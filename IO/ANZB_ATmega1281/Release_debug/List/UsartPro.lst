###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       02/Jan/2024  12:26:17
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\UsartPro.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWA840.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\UsartPro.c"
#        --cpu=m128 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release_debug\Obj"
#        -D OS_LIBMODE_S -D OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D
#        USE_1281_RX_INT_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=0 -D
#        __ATMEGA_1281__ -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release_debug\List"
#        -y --initializers_in_flash -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -Ohz)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release_debug\List\UsartPro.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release_debug\Obj\UsartPro.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\UsartPro.c
      1          /****************************************************************************************
      2          / Com protocol for USART0&1
      3          /
      4          ***************************************************************************************/
      5          
      6          #ifdef __ATMEGA_1280__
      7              #include	"iom1280.h"
      8          #endif
      9          
     10          #ifdef __ATMEGA_1281__
     11              #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3f
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
     12          #endif
     13          #include "stdio.h"
     14          #include "math.h"
     15          #include "string.h"
     16          #include "externals.h"
     17          #include "version.h"
     18          
     19          /*************************************************************************
     20          *   (This is a timer calback)
     21          *  Timout timer USART 0
     22          *
     23          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     24          void TimoutUSART0(void) {
   \                     TimoutUSART0:
     25          
     26              UCSR0B &= ~(__BIT_MASK(UDRIE0));            // transmission end, disable int.
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   7D0F               ANDI    R16, 0xDF
   \   00000006   930000C1           STS     193, R16
     27              ClrBit(PORTE, 0x04);                              // TXE0 off
   \   0000000A   94F8               cli
   \   0000000C   9872               CBI     0x0E, 0x02
   \   0000000E   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_203:
   \   00000010   F409               BRNE    ??TimoutUSART0_0
   \   00000012   9478               sei
     28          #if USE_1281_RX_INT_TASK == 0
     29              OS_StopTimer(&TimerUSART0);                    // and stop timer
     30          #endif
     31              GoToSyncUART(0);                                    // go to sync modus for recive
   \                     ??TimoutUSART0_0:
   \   00000014   E000               LDI     R16, 0
   \   00000016                      REQUIRE ?Subroutine142
   \   00000016                      REQUIRE _A_UCSR0B
   \   00000016                      REQUIRE _A_PORTE
   \   00000016                      ;               // Fall through to label ?Subroutine142
     32          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine142:
   \   00000000   ....               RJMP    GoToSyncUART

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   9100....           LDS     R16, (OS_Global + 1)
   \   00000004                      REQUIRE ?Subroutine137
   \   00000004                      ;               // Fall through to label ?Subroutine137

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine137:
   \   00000000   2300               TST     R16
   \   00000002   9508               RET
     33          
     34          /*************************************************************************
     35          *   (This is a timer calback)
     36          *  Timer USART 0 on before TX
     37          *
     38          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     39          void TimoutUSART0On(void) {
   \                     TimoutUSART0On:
     40          
     41              UCSR0B |= __BIT_MASK(UDRIE0);                     // start sending by enableing interrupt
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   6200               ORI     R16, 0x20
   \   00000006   930000C1           STS     193, R16
     42          #if USE_1281_RX_INT_TASK == 0
     43              OS_StopTimer(&TimerUSART0On);                    // and stop timer
     44          #endif
     45          }
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_UCSR0B
     46          
     47          /*************************************************************************
     48          *   (This is a timer calback)
     49          *  Timout timer USART 1
     50          *
     51          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     52          void TimoutUSART1(void) {
   \                     TimoutUSART1:
     53          
     54              UCSR1B &= ~(__BIT_MASK(UDRIE1));            // transmission end, disable int.
   \   00000000   910000C9           LDS     R16, 201
   \   00000004   7D0F               ANDI    R16, 0xDF
   \   00000006   930000C9           STS     201, R16
     55              ClrBit(PORTE, 0x08);                              // TXE1 off
   \   0000000A   94F8               cli
   \   0000000C   9873               CBI     0x0E, 0x03
   \   0000000E   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_204:
   \   00000010   F409               BRNE    ??TimoutUSART1_0
   \   00000012   9478               sei
     56          #if USE_1281_RX_INT_TASK == 0
     57              OS_StopTimer(&TimerUSART1);                    // and stop timer
     58          #endif
     59              GoToSyncUART(1);                                    // go to sync modus for recive
   \                     ??TimoutUSART1_0:
   \   00000014   E001               LDI     R16, 1
   \   00000016   ....               RJMP    ?Subroutine142
   \   00000018                      REQUIRE _A_UCSR1B
   \   00000018                      REQUIRE _A_PORTE
     60          }
     61          
     62          
     63          /*************************************************************************
     64          *   (This is a timer calback)
     65          *  Timer USART 1 on before TX
     66          *
     67          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     68          void TimoutUSART1On(void) {
   \                     TimoutUSART1On:
     69          
     70              UCSR1B |= __BIT_MASK(UDRIE1);                     // start sending by enableing interrupt
   \   00000000   910000C9           LDS     R16, 201
   \   00000004   6200               ORI     R16, 0x20
   \   00000006   930000C9           STS     201, R16
     71          #if USE_1281_RX_INT_TASK == 0
     72              OS_StopTimer(&TimerUSART1On);                    // and stop timer
     73          #endif
     74          }
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_UCSR1B
     75          
     76          
     77          #if USE_1281_RX_INT_TASK==0
     78          /*************************************************************************
     79          *   (This is a task)
     80          *  Usart0 handler
     81          *
     82          *************************************************************************/
     83          void Usart0Handler(void) {
     84          
     85              while (1) {
     86                  OS_WaitEvent(1);
     87                  OS_Use(&UARTSEND);
     88                  UsartCheckPackage(0);
     89                  OS_Unuse(&UARTSEND);
     90              }
     91          }
     92          
     93          /*************************************************************************
     94          *   (This is a task)
     95          *  Usart1 handler
     96          *
     97          *************************************************************************/
     98          void Usart1Handler(void) {
     99          
    100              while (1) {
    101                  OS_WaitEvent(1);
    102                  OS_Use(&UARTSEND);
    103                  UsartCheckPackage(1);
    104                  OS_Unuse(&UARTSEND);
    105              }
    106          }
    107          #endif
    108          /*************************************************************************
    109          *
    110          *  Check the incoming packages
    111          *
    112          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine144:
   \   00000000   E0E7               LDI     R30, 7
   \   00000002   ........           JMP     ?EPILOGUE_B7_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   0FE8               ADD     R30, R24
   \   00000002   1FF9               ADC     R31, R25
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine157_0:
   \   00000000   8300               ST      Z, R16
   \   00000002   8311               STD     Z+1, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine148:
   \   00000000   ........           JMP     ?S_EC_MUL_L02

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine117:
   \   00000000   E010               LDI     R17, 0
   \   00000002   EF4D               LDI     R20, 253
   \   00000004   E051               LDI     R21, 1
   \   00000006   ....               RJMP    ?Subroutine148

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine112:
   \   00000000   5EED               SUBI    R30, 237
   \   00000002                      REQUIRE ?Subroutine141
   \   00000002                      ;               // Fall through to label ?Subroutine141

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine141:
   \   00000000   4FFE               SBCI    R31, 254
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine138:
   \   00000000   9711               SBIW    R27:R26, 1
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    113          void UsartCheckPackage(char ch) {
   \                     UsartCheckPackage:
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004   2E60               MOV     R6, R16
    114          
    115              unsigned short pointer;
    116              char    retval;
    117          
    118              UART[ch].RxSendReply = false;                              // flag for answering set to fault
   \   00000006   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_20:
   \   00000008   2E42               MOV     R4, R18
   \   0000000A   ....               LDI     R18, (UART) >> 8
   \   0000000C   0E40               ADD     R4, R16
   \   0000000E   1F21               ADC     R18, R17
   \   00000010   2E52               MOV     R5, R18
   \   00000012   01D2               MOVW    R27:R26, R5:R4
   \   00000014   54A5               SUBI    R26, 69
   \   00000016   4FBE               SBCI    R27, 254
   \   00000018   01FD               MOVW    R31:R30, R27:R26
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   8303               STD     Z+3, R16
    119              UART[ch].TxFirst = 11;                                     // Start pos for first TX command
   \   0000001E   01F2               MOVW    R31:R30, R5:R4
   \   00000020   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_214:
   \   00000022   E00B               LDI     R16, 11
   \   00000024   E010               LDI     R17, 0
   \   00000026   ....               RCALL   ??Subroutine157_0
    120              pointer = 7;
   \                     ??CrossCallReturnLabel_277:
   \   00000028   E087               LDI     R24, 7
   \   0000002A   E090               LDI     R25, 0
    121              do {
    122                  retval = CheckActionUart(ch, pointer);
   \                     ??UsartCheckPackage_0:
   \   0000002C   019C               MOVW    R19:R18, R25:R24
   \   0000002E   2D06               MOV     R16, R6
   \   00000030   ....               RCALL   CheckActionUart
    123                  pointer = pointer + UART[ch].pRxBuffer[pointer + 2]
    124                      + (UART[ch].pRxBuffer[pointer + 3] * 256) + 4;      // Point to a command cmd hb/lb
   \   00000032   01F2               MOVW    R31:R30, R5:R4
   \   00000034   ....               RCALL   ?Subroutine40
    125              } while (retval && (pointer < (UART[ch].RxPacklen - 4)));
   \                     ??CrossCallReturnLabel_55:
   \   00000036   5EE3               SUBI    R30, 227
   \   00000038   4FFE               SBCI    R31, 254
   \   0000003A   8110               LD      R17, Z
   \   0000003C   81F1               LDD     R31, Z+1
   \   0000003E   2FE1               MOV     R30, R17
   \   00000040   9634               ADIW    R31:R30, 4
   \   00000042   0F8E               ADD     R24, R30
   \   00000044   1F9F               ADC     R25, R31
   \   00000046   2300               TST     R16
   \   00000048   F029               BREQ    ??UsartCheckPackage_1
   \   0000004A   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_291:
   \   0000004C   9734               SBIW    R31:R30, 4
   \   0000004E   178E               CP      R24, R30
   \   00000050   079F               CPC     R25, R31
   \   00000052   F360               BRCS    ??UsartCheckPackage_0
    126              if (UART[ch].RxSendReply) {                                   //send answer?
   \                     ??UsartCheckPackage_1:
   \   00000054   01FD               MOVW    R31:R30, R27:R26
   \   00000056   8103               LDD     R16, Z+3
   \   00000058   2300               TST     R16
   \   0000005A   2D06               MOV     R16, R6
   \   0000005C   F011               BREQ    ??UsartCheckPackage_2
    127                  Uart_BuildTail(ch);                                       // yes, build tail (and header) and start sending
   \   0000005E   ....               RCALL   Uart_BuildTail
   \   00000060   C001               RJMP    ??UsartCheckPackage_3
    128              } else {
    129                  GoToSyncUART(ch);                                        // go to sync modus here if not reply
   \                     ??UsartCheckPackage_2:
   \   00000062   ....               RCALL   GoToSyncUART
    130              }
    131          }
   \                     ??UsartCheckPackage_3:
   \   00000064   ....               RJMP    ?Subroutine144

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine62:
   \   00000000   91ED               LD      R30, X+
   \   00000002   91FC               LD      R31, X
   \   00000004   ....               RJMP    ?Subroutine138

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_232:
   \   00000002   ....               LDI     R18, LOW(UART)
   \   00000004   9508               RET
    132          
    133          
    134          /*************************************************************************
    135          *
    136          *  Check action on received data
    137          *
    138          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine145:
   \   00000000   E0EA               LDI     R30, 10
   \   00000002   ........           JMP     ?EPILOGUE_B10_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine75:
   \   00000000   ........           JMP     ?PROLOGUE10_L09

   \                                 In  segment CODE, align 2, keep-with-next
    139          char CheckActionUart(char ch, unsigned short pointer) {
   \                     CheckActionUart:
   \   00000000   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_98:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002   2FA0               MOV     R26, R16
   \   00000004   01C9               MOVW    R25:R24, R19:R18
    140          
    141              unsigned short   command;
    142              char    retval = true;
   \   00000006   E0B1               LDI     R27, 1
    143          
    144              command = UART[ch].pRxBuffer[pointer] | (UART[ch].pRxBuffer[pointer + 1] << 8);
   \   00000008   ....               LDI     R18, LOW((UART + 283))
   \   0000000A   ....               LDI     R19, HIGH((UART + 283))
   \   0000000C   0F28               ADD     R18, R24
   \   0000000E   1F39               ADC     R19, R25
   \   00000010   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_227:
   \   00000012   0129               MOVW    R5:R4, R19:R18
   \   00000014   0E40               ADD     R4, R16
   \   00000016   1E51               ADC     R5, R17
   \   00000018   01F2               MOVW    R31:R30, R5:R4
   \   0000001A   8080               LD      R8, Z
   \   0000001C   8091               LDD     R9, Z+1
    145              switch (command) {                                  // check action
   \   0000001E   013C               MOVW    R7:R6, R25:R24
   \   00000020   E004               LDI     R16, 4
   \   00000022   0E60               ADD     R6, R16
   \   00000024   E000               LDI     R16, 0
   \   00000026   1E70               ADC     R7, R16
   \   00000028   0184               MOVW    R17:R16, R9:R8
   \   0000002A   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart>_0`)
   \   0000002C   ....               LDI     R31, (`?<Jumptable for CheckActionUart>_0`) >> 16
   \   0000002E   BFFB               OUT     0x3B, R31
   \   00000030   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart>_0`)
   \   00000032   ........           JMP     ?SV_SWITCH_L06
    146              case CMD_REQ_STATUS :                           // Regusest status for target
    147                  BuildStatusData(ch);                         // make package
   \                     ??CheckActionUart_0:
   \   00000036   2F0A               MOV     R16, R26
   \   00000038   ....               RCALL   BuildStatusData
    148                  break;
   \   0000003A   C075               RJMP    ??CheckActionUart_1
    149          
    150              case CMD_GET_STACKSTATUS :                        // Request stck status
    151                  BuildStackStatus(ch, pointer + 4);                     // receive package
   \                     ??CheckActionUart_2:
   \   0000003C   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_102:
   \   0000003E   ....               RCALL   BuildStackStatus
    152                  break;
   \   00000040   C072               RJMP    ??CheckActionUart_1
    153          
    154              case CMD_EEPROM_RESET :                        // Reset EEPROM??
    155                  GetResetEEPROM(ch, pointer + 4);                     // receive package
   \                     ??CheckActionUart_3:
   \   00000042   ........           CALL    EEPROMReset
    156                  break;
   \   00000046   C06F               RJMP    ??CheckActionUart_1
    157          
    158              case CMD_GOTO_BOOTLOADER :                        // Goto bootlaoder??
    159                  GetGotoBootloader(ch, pointer + 4);                     // receive package
   \                     ??CheckActionUart_4:
   \   00000048   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_103:
   \   0000004A   ....               RCALL   GetGotoBootloader
    160                  break;
   \   0000004C   C06C               RJMP    ??CheckActionUart_1
    161          
    162              case CMD_SND_EEPROM_DATA :                              // Receive EEPROM data
    163                  GetEEPROMData(ch, pointer + 4);                     // receive package
   \                     ??CheckActionUart_5:
   \   0000004E   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_104:
   \   00000050   ....               RCALL   GetEEPROMData
    164                  break;
   \   00000052   C069               RJMP    ??CheckActionUart_1
    165          
    166              case CMD_REQ_EEPROM_DATA :                              // Request to send EEPROM data
    167                  BuildEEPROMData(ch, pointer + 4);                     // receive package
   \                     ??CheckActionUart_6:
   \   00000054   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_105:
   \   00000056   ....               RCALL   BuildEEPROMData
    168                  break;
   \   00000058   C066               RJMP    ??CheckActionUart_1
    169          
    170              case CMD_REQ_INT_DATA :                              // Request external data
    171                  BuildADInt(ch, pointer + 4);                     // receive package
   \                     ??CheckActionUart_7:
   \   0000005A   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_106:
   \   0000005C   ....               RCALL   BuildADInt
    172                  break;
   \   0000005E   C063               RJMP    ??CheckActionUart_1
    173          
    174              case CMD_SND_RS4_SETUP :                              // Receive sertup of AN-RS485
    175                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_8:
   \   00000060   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_208:
   \   00000062   F009               BREQ    $+2+2
   \   00000064   C060               RJMP    ??CheckActionUart_1
    176                      GetRS4Setup(ch, pointer + 4);                     // receive package
   \   00000066   ....               RCALL   ?Subroutine77
    177                  }
   \                     ??CrossCallReturnLabel_107:
   \   00000068   ....               RCALL   GetRS4Setup
   \   0000006A   C05D               RJMP    ??CheckActionUart_1
    178                  break;
    179          
    180              case CMD_REQ_RS4_SETUP :                              // Request for sertup of AN-RS485
    181                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_9:
   \   0000006C   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_209:
   \   0000006E   F009               BREQ    $+2+2
   \   00000070   C05A               RJMP    ??CheckActionUart_1
    182                      BuildRS4Setup(ch, pointer + 4);                     // receive package
   \   00000072   ....               RCALL   ?Subroutine77
    183                  }
   \                     ??CrossCallReturnLabel_108:
   \   00000074   ....               RCALL   BuildRS4Setup
   \   00000076   C057               RJMP    ??CheckActionUart_1
    184                  break;
    185          
    186              case CMD_SND_RS4_ADBUF :                              // Request external AD data
    187                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_10:
   \   00000078   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_210:
   \   0000007A   F009               BREQ    $+2+2
   \   0000007C   C054               RJMP    ??CheckActionUart_1
    188                      GetADData(ch, pointer + 4);                     // receive package
   \   0000007E   ....               RCALL   ?Subroutine77
    189                  }
   \                     ??CrossCallReturnLabel_109:
   \   00000080   ....               RCALL   GetADData
   \   00000082   C051               RJMP    ??CheckActionUart_1
    190                  break;
    191          
    192              case CMD_REQ_RS4_DATA :                              // Request external AD eeprom data
    193                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_11:
   \   00000084   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_211:
   \   00000086   F009               BREQ    $+2+2
   \   00000088   C04E               RJMP    ??CheckActionUart_1
    194                      switch (UART[ch].pRxBuffer[pointer + 4]) {
   \   0000008A   9605               ADIW    R25:R24, 5
   \   0000008C   01F2               MOVW    R31:R30, R5:R4
   \   0000008E   8104               LDD     R16, Z+4
   \   00000090   2300               TST     R16
   \   00000092   F019               BREQ    ??CheckActionUart_12
   \   00000094   950A               DEC     R16
   \   00000096   F121               BREQ    ??CheckActionUart_13
   \   00000098   C046               RJMP    ??CheckActionUart_1
    195                      case 0:                                         // Measure data
    196                          BuildMData485(ch, pointer + 5);              // receive package
   \                     ??CheckActionUart_12:
   \   0000009A   019C               MOVW    R19:R18, R25:R24
   \   0000009C   2F0A               MOV     R16, R26
   \   0000009E   ....               RCALL   BuildMData485
    197                          if (TData.RS4.FromTargetBuffer[0][0] == true) {     // send eepromdata ch 0?
   \   000000A0   9100....           LDS     R16, (TData + 1428)
   \   000000A4   3001               CPI     R16, 1
   \   000000A6   F431               BRNE    ??CheckActionUart_14
    198                              BuildADEpromdata(ch, 0);
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   2F0A               MOV     R16, R26
   \   000000AC   ....               RCALL   BuildADEpromdata
    199                              TData.RS4.FromTargetBuffer[0][0] = false;  // Marked as sent
   \   000000AE   E000               LDI     R16, 0
   \   000000B0   9300....           STS     (TData + 1428), R16
    200                          }
    201                          if (TData.RS4.FromTargetBuffer[1][0] == true) {     // send eepromdata ch 1?
   \                     ??CheckActionUart_14:
   \   000000B4   9100....           LDS     R16, (TData + 1478)
   \   000000B8   3001               CPI     R16, 1
   \   000000BA   F429               BRNE    ??CheckActionUart_15
    202                              BuildADEpromdata(ch, 1);                  // channel 1
   \   000000BC   018D               MOVW    R17:R16, R27:R26
   \   000000BE   ....               RCALL   BuildADEpromdata
    203                              TData.RS4.FromTargetBuffer[1][0] = false;  // Marked as sent
   \   000000C0   E000               LDI     R16, 0
   \   000000C2   9300....           STS     (TData + 1478), R16
    204                          }
    205                          if ((TData.RS4.WHDataAvailable >> UART[ch].pRxBuffer[pointer + 5]) & 0x01) {
   \                     ??CheckActionUart_15:
   \   000000C6   9100....           LDS     R16, (TData + 1267)
   \   000000CA   E010               LDI     R17, 0
   \   000000CC   01F2               MOVW    R31:R30, R5:R4
   \   000000CE   8145               LDD     R20, Z+5
   \   000000D0   ........           CALL    ?SS_SHR_L02
   \   000000D4   7001               ANDI    R16, 0x01
   \   000000D6   F139               BREQ    ??CheckActionUart_1
    206                              BuildWHdata(ch, pointer + 5);
   \   000000D8   019C               MOVW    R19:R18, R25:R24
   \   000000DA   2F0A               MOV     R16, R26
   \   000000DC   ....               RCALL   BuildWHdata
   \   000000DE   C023               RJMP    ??CheckActionUart_1
    207                              //TData.RS4.WHDataAvailable &= ~(0x01 << UART[ch].pRxBuffer[pointer+5]);
    208                          }
    209                          break;
    210                      case 1:                                         // Raw and cal data
    211                          BuildRData485(ch, pointer + 5);                     // receive package
   \                     ??CheckActionUart_13:
   \   000000E0   019C               MOVW    R19:R18, R25:R24
   \   000000E2   2F0A               MOV     R16, R26
   \   000000E4   ....               RCALL   BuildRData485
    212                          break;
   \   000000E6   C01F               RJMP    ??CheckActionUart_1
    213                      }
    214                  }
    215                  break;
    216          
    217              case CMD_SND_ANA_SETUP :                              // Receive sertup of AN-RSANA
    218                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_16:
   \   000000E8   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_63:
   \   000000EA   F4E9               BRNE    ??CheckActionUart_1
    219                      GetANASetup(ch, pointer + 4);                     // receive package
   \   000000EC   ....               RCALL   ?Subroutine77
    220                  }
   \                     ??CrossCallReturnLabel_110:
   \   000000EE   ....               RCALL   GetANASetup
   \   000000F0   C01A               RJMP    ??CheckActionUart_1
    221                  break;
    222          
    223              case CMD_REQ_ANA_SETUP :                              // Request for sertup of AN-RSANA
    224                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_17:
   \   000000F2   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_64:
   \   000000F4   F4C1               BRNE    ??CheckActionUart_1
    225                      BuildANASetup(ch, pointer + 4);                     // receive package
   \   000000F6   ....               RCALL   ?Subroutine77
    226                  }
   \                     ??CrossCallReturnLabel_111:
   \   000000F8   ....               RCALL   BuildANASetup
   \   000000FA   C015               RJMP    ??CheckActionUart_1
    227                  break;
    228          
    229              case CMD_SND_ANA_FILTER :                              // Receive filter of AN-RSANA
    230                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_18:
   \   000000FC   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_65:
   \   000000FE   F499               BRNE    ??CheckActionUart_1
    231                      GetANAFilter(ch, pointer + 4);                     // receive package
   \   00000100   ....               RCALL   ?Subroutine77
    232                  }
   \                     ??CrossCallReturnLabel_112:
   \   00000102   ....               RCALL   GetANAFilter
   \   00000104   C010               RJMP    ??CheckActionUart_1
    233                  break;
    234          
    235              case CMD_REQ_ANA_FILTER :                              // Request filter of AN-RSANA
    236                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_19:
   \   00000106   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_66:
   \   00000108   F471               BRNE    ??CheckActionUart_1
    237                      BuildANAFilter(ch, pointer + 4);                     // receive package
   \   0000010A   ....               RCALL   ?Subroutine77
    238                  }
   \                     ??CrossCallReturnLabel_113:
   \   0000010C   ....               RCALL   BuildANAFilter
   \   0000010E   C00B               RJMP    ??CheckActionUart_1
    239                  break;
    240          
    241              case CMD_REQ_ANA_DATA :                              // Request ANA data(4-20ma)
    242                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_20:
   \   00000110   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_67:
   \   00000112   F449               BRNE    ??CheckActionUart_1
    243                      BuildMDataANA(ch, pointer + 4);                     // receive
   \   00000114   ....               RCALL   ?Subroutine77
    244                  }
   \                     ??CrossCallReturnLabel_114:
   \   00000116   ....               RCALL   BuildMDataANA
   \   00000118   C006               RJMP    ??CheckActionUart_1
    245                  break;
    246          
    247              default:
    248                  if (command < MAX_ECMD) {                   // handle end commands
   \                     ??CheckActionUart_21:
   \   0000011A   E604               LDI     R16, 100
   \   0000011C   1680               CP      R8, R16
   \   0000011E   E000               LDI     R16, 0
   \   00000120   0690               CPC     R9, R16
   \   00000122   F408               BRCC    ??CheckActionUart_1
    249                      retval = false;
   \   00000124   E0B0               LDI     R27, 0
    250                  }
    251                  break;
    252          
    253              }
    254              return retval;
   \                     ??CheckActionUart_1:
   \   00000126   2F0B               MOV     R16, R27
   \   00000128   ....               RJMP    ?Subroutine145
    255          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine77:
   \   00000000   0193               MOVW    R19:R18, R7:R6
   \   00000002   2F0A               MOV     R16, R26
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine49:
   \   00000000   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_143:
   \   00000002   ....               RJMP    ?Subroutine137

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine93:
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine47:
   \   00000000   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_142:
   \   00000002   3001               CPI     R16, 1
   \   00000004   9508               RET
    256          
    257          /*************************************************************************
    258          *
    259          * Build send packet header
    260          *
    261          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    262          void Uart_BuildHeader(char ch) {
   \                     Uart_BuildHeader:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
    263          
    264              UART[ch].RxFirst = 0;                                // Reset pointers
   \   00000004   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_8:
   \   00000006   01FD               MOVW    R31:R30, R27:R26
   \   00000008   54EF               SUBI    R30, 79
   \   0000000A   4FFE               SBCI    R31, 254
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   8300               ST      Z, R16
   \   00000010   8301               STD     Z+1, R16
    265              UART[ch].RxLast  = 0;
   \   00000012   8302               STD     Z+2, R16
   \   00000014   8303               STD     Z+3, R16
    266              UART[ch].TxLast  = 0;
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   5EEB               SUBI    R30, 235
   \   0000001A   4FFE               SBCI    R31, 254
   \   0000001C   8300               ST      Z, R16
   \   0000001E   8301               STD     Z+1, R16
    267          
    268              UART[ch].pTxBuffer[0] = ANPRO10_SYN;                        /* Sync */
   \   00000020   E106               LDI     R16, 22
   \   00000022   930D               ST      X+, R16
    269              UART[ch].pTxBuffer[1] = ANPRO10_SYN;                        /* Sync */
   \   00000024   930D               ST      X+, R16
    270              UART[ch].pTxBuffer[2] = ANPRO10_SYN;                        /* Sync */
   \   00000026   930D               ST      X+, R16
    271              UART[ch].pTxBuffer[3] = ANPRO10_SOH;                        /* Start of header */
   \   00000028   935C               ST      X, R21
   \   0000002A   9611               ADIW    R27:R26, 1
    272              UART[ch].pTxBuffer[4] = UART[ch].pRxBuffer[2];      /* RXID */
   \   0000002C   8500               LDD     R16, Z+8
   \   0000002E   930C               ST      X, R16
   \   00000030   9714               SBIW    R27:R26, 4
    273              UART[ch].pTxBuffer[5] = UART[ch].pRxBuffer[3];      /* Rx address */
   \   00000032   8501               LDD     R16, Z+9
   \   00000034   01FD               MOVW    R31:R30, R27:R26
   \   00000036   8305               STD     Z+5, R16
    274              UART[ch].pTxBuffer[6] = 0x10 + UnitID;              /* Unit ID */
   \   00000038   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_140:
   \   0000003A   5F00               SUBI    R16, 240
   \   0000003C   8306               STD     Z+6, R16
    275              UART[ch].pTxBuffer[7] = MyAddress();                 /* Tx address */
   \   0000003E   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_70:
   \   00000040   01FD               MOVW    R31:R30, R27:R26
   \   00000042   8307               STD     Z+7, R16
    276              UART[ch].pTxBuffer[8] = 0;                          /* packlen HB, don't know yet */
   \   00000044   E000               LDI     R16, 0
   \   00000046   8700               STD     Z+8, R16
    277              UART[ch].pTxBuffer[9] = 0;                          /* packlen LB, don't know yet */
   \   00000048   8701               STD     Z+9, R16
    278              UART[ch].pTxBuffer[10] = 0;                         /* Header checksum, don't know yet */
   \   0000004A   8702               STD     Z+10, R16
    279          }
   \   0000004C                      REQUIRE ?Subroutine134
   \   0000004C                      ;               // Fall through to label ?Subroutine134

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine134:
   \   00000000   91A9               LD      R26, Y+
   \   00000002   91B9               LD      R27, Y+
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine110:
   \   00000000   0FA0               ADD     R26, R16
   \   00000002   1FB1               ADC     R27, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine50:
   \   00000000   ........           JMP     MyAddress

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_229:
   \   00000002   ....               LDI     R26, LOW(UART)
   \   00000004   ....               LDI     R27, (UART) >> 8
   \   00000006   ....               RJMP    ?Subroutine110
    280          
    281          /*************************************************************************
    282          *
    283          * Build  packet tail
    284          *
    285          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    286          void Uart_BuildTail(char ch) {
   \                     Uart_BuildTail:
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004   2E60               MOV     R6, R16
    287          
    288              Uart_BuildHeader(ch);                                    // fist build the header
   \   00000006   ....               RCALL   Uart_BuildHeader
    289          
    290              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK & 0xff;  // End command lb
   \   00000008   2D06               MOV     R16, R6
   \   0000000A   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_223:
   \   0000000C   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_148:
   \   0000000E   01DC               MOVW    R27:R26, R25:R24
   \   00000010   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_170:
   \   00000012   ....               RCALL   ?Subroutine14
    291              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK >> 8;    // End command hb
    292              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0x00;                  // End data
   \                     ??CrossCallReturnLabel_255:
   \   00000014   ....               RCALL   ?Subroutine18
    293          
    294              UART[ch].pTxBuffer[UART[ch].TxFirst] = UART[ch].TxSeqCnt;   // Sequence counter
   \                     ??CrossCallReturnLabel_22:
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8127               LDD     R18, Z+7
   \   0000001A   ....               RCALL   ?Subroutine19
    295              UART[ch].TxFirst++;
   \                     ??CrossCallReturnLabel_24:
   \   0000001C   ....               RCALL   ?Subroutine61
    296              UART[ch].TxSeqCnt++;
   \                     ??CrossCallReturnLabel_80:
   \   0000001E   01FC               MOVW    R31:R30, R25:R24
   \   00000020   5EE6               SUBI    R30, 230
   \   00000022   4FFE               SBCI    R31, 254
   \   00000024   8100               LD      R16, Z
   \   00000026   9503               INC     R16
   \   00000028   8300               ST      Z, R16
    297          
    298              UART[ch].pTxBuffer[8] = UART[ch].TxFirst - 2;                    // correct length because stx's
   \   0000002A   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_294:
   \   0000002C   5002               SUBI    R16, 2
   \   0000002E   01FC               MOVW    R31:R30, R25:R24
   \   00000030   8700               STD     Z+8, R16
    299              UART[ch].pTxBuffer[9] = (UART[ch].TxFirst - 2) >> 8;             // packet len high
   \   00000032   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_290:
   \   00000034   9732               SBIW    R31:R30, 2
   \   00000036   2F0F               MOV     R16, R31
   \   00000038   01FC               MOVW    R31:R30, R25:R24
   \   0000003A   8701               STD     Z+9, R16
    300          
    301              UART[ch].pTxBuffer[10] = CalcDSTxChecksum(ch, 10);         // Get header checksum
   \   0000003C   E02A               LDI     R18, 10
   \   0000003E   E030               LDI     R19, 0
   \   00000040   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_71:
   \   00000042   8702               STD     Z+10, R16
    302          
    303              UART[ch].pTxBuffer[UART[ch].TxFirst] = CalcDSTxChecksum(ch, UART[ch].TxFirst); // Get checksum
   \   00000044   904D               LD      R4, X+
   \   00000046   905C               LD      R5, X
   \   00000048   9711               SBIW    R27:R26, 1
   \   0000004A   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_302:
   \   0000004C   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_72:
   \   0000004E   0DE4               ADD     R30, R4
   \   00000050   1DF5               ADC     R31, R5
   \   00000052   8300               ST      Z, R16
    304              UART[ch].TxFirst++;                                        // OBS!! must be inc here due to ANSI standard !!!!
   \   00000054   ....               RCALL   ?Subroutine131
   \                     ??CrossCallReturnLabel_342:
   \   00000056   ....               RCALL   ?Subroutine61
    305          
    306              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANPRO10_EOT;            // End of transmission
   \                     ??CrossCallReturnLabel_81:
   \   00000058   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_295:
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   ....               RCALL   ?Subroutine132
   \                     ??CrossCallReturnLabel_305:
   \   0000005E   01FC               MOVW    R31:R30, R25:R24
   \   00000060   ....               RCALL   ?Subroutine106
    307              UART[ch].TxCount = UART[ch].TxFirst;                      //bytes to send
   \                     ??CrossCallReturnLabel_264:
   \   00000062   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_296:
   \   00000064   01FD               MOVW    R31:R30, R27:R26
   \   00000066   8304               STD     Z+4, R16
   \   00000068   8315               STD     Z+5, R17
    308              UART[ch].TxLast = 0;                                     // reset cunter
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   8302               STD     Z+2, R16
   \   0000006E   8303               STD     Z+3, R16
    309              UART[ch].RxState = SEND;
   \   00000070   5489               SUBI    R24, 73
   \   00000072   4F9E               SBCI    R25, 254
   \   00000074   01FC               MOVW    R31:R30, R25:R24
   \   00000076   E003               LDI     R16, 3
   \   00000078   8300               ST      Z, R16
    310              if (ch == 0) {                                           // Turn on TXE for channel
   \   0000007A   2066               TST     R6
   \   0000007C   F441               BRNE    ??Uart_BuildTail_0
    311          #if USE_1281_RX_INT_TASK == 0
    312                  OS_RetriggerTimer(&TimerUSART0);                     // and start timeout TX timer
    313          #endif
    314                  SetBit(PORTE, 0x04);                                 // TXE0 on
   \   0000007E   94F8               cli
   \   00000080   9A72               SBI     0x0E, 0x02
   \   00000082   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_205:
   \   00000084   F409               BRNE    ??Uart_BuildTail_1
   \   00000086   9478               sei
    315                  OS_RetriggerTimer(&TimerUSART0On);                           // and start timer for on before TX
   \                     ??Uart_BuildTail_1:
   \   00000088   ....               LDI     R16, LOW(TimerUSART0On)
   \   0000008A   ....               LDI     R17, (TimerUSART0On) >> 8
   \   0000008C   C00A               RJMP    ??Uart_BuildTail_2
    316              } else if (ch == 1) {
   \                     ??Uart_BuildTail_0:
   \   0000008E   E001               LDI     R16, 1
   \   00000090   1660               CP      R6, R16
   \   00000092   F449               BRNE    ??Uart_BuildTail_3
    317                  //       OS_RetriggerTimer(&TimerUSART1);                     // and start timeout TX timer
    318                  SetBit(PORTE, 0x08);                                // TXE1 on
   \   00000094   94F8               cli
   \   00000096   9A73               SBI     0x0E, 0x03
   \   00000098   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_206:
   \   0000009A   F409               BRNE    ??Uart_BuildTail_4
   \   0000009C   9478               sei
    319                  OS_RetriggerTimer(&TimerUSART1On);                     // and start timer for on before TX
   \                     ??Uart_BuildTail_4:
   \   0000009E   ....               LDI     R16, LOW(TimerUSART1On)
   \   000000A0   ....               LDI     R17, (TimerUSART1On) >> 8
   \                     ??Uart_BuildTail_2:
   \   000000A2   ........           CALL    OS_RetriggerTimer
    320              }
    321          }
   \                     ??Uart_BuildTail_3:
   \   000000A6                      REQUIRE ?Subroutine144
   \   000000A6                      REQUIRE _A_PORTE
   \   000000A6                      ;               // Fall through to label ?Subroutine144

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine61:
   \   00000000   5F0F               SUBI    R16, 255
   \   00000002   ....               RJMP    ?Subroutine122

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine51:
   \   00000000   2D06               MOV     R16, R6
   \   00000002   ....               RCALL   CalcDSTxChecksum
   \   00000004   01FC               MOVW    R31:R30, R25:R24
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine129:
   \   00000000   912D               LD      R18, X+
   \   00000002   913C               LD      R19, X
   \   00000004   ....               RJMP    ?Subroutine138

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine106:
   \   00000000   ....               RCALL   ??Subroutine166_0
   \                     ??CrossCallReturnLabel_357:
   \   00000002   E004               LDI     R16, 4
   \   00000004   ....               RJMP    ?Subroutine139

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine122:
   \   00000000   4F1F               SBCI    R17, 255
   \   00000002   931C               ST      X, R17
   \   00000004   930E               ST      -X, R16
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine119:
   \   00000000   5EAD               SUBI    R26, 237
   \   00000002   4FBE               SBCI    R27, 254
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine139:
   \   00000000   8300               ST      Z, R16
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine151:
   \   00000000   01FC               MOVW    R31:R30, R25:R24
   \   00000002   ....               RJMP    ??Subroutine166_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_150:
   \   00000002   ....               RCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_127:
   \   00000004   E000               LDI     R16, 0
   \   00000006   ....               RJMP    ?Subroutine139

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   ....               RCALL   ?Subroutine151
   \                     ??CrossCallReturnLabel_317:
   \   00000002   8320               ST      Z, R18
   \   00000004                      REQUIRE ?Subroutine131
   \   00000004                      ;               // Fall through to label ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine131:
   \   00000000   910D               LD      R16, X+
   \   00000002   911C               LD      R17, X
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_151:
   \   00000002   8300               ST      Z, R16
   \   00000004                      REQUIRE ?Subroutine100
   \   00000004                      ;               // Fall through to label ?Subroutine100

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine100:
   \   00000000   ....               RCALL   ?Subroutine131
   \                     ??CrossCallReturnLabel_343:
   \   00000002                      REQUIRE ?Subroutine138
   \   00000002                      ;               // Fall through to label ?Subroutine138

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine96:
   \   00000000   ....               RCALL   ?Subroutine128
   \                     ??CrossCallReturnLabel_310:
   \   00000002   ....               RCALL   ?Subroutine125
   \                     ??CrossCallReturnLabel_356:
   \   00000004   E000               LDI     R16, 0
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine116:
   \   00000000   8300               ST      Z, R16
   \   00000002                      REQUIRE ?Subroutine128
   \   00000002                      ;               // Fall through to label ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine128:
   \   00000000   ....               RCALL   ?Subroutine131
   \                     ??CrossCallReturnLabel_344:
   \   00000002   9711               SBIW    R27:R26, 1
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006                      REQUIRE ?Subroutine132
   \   00000006                      ;               // Fall through to label ?Subroutine132

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine132:
   \   00000000   9631               ADIW    R31:R30, 1
   \   00000002   93ED               ST      X+, R30
   \   00000004   93FC               ST      X, R31
   \   00000006   ....               RJMP    ?Subroutine138

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine83:
   \   00000000   ....               RCALL   ?Subroutine116
   \                     ??CrossCallReturnLabel_160:
   \   00000002                      REQUIRE ?Subroutine125
   \   00000002                      ;               // Fall through to label ?Subroutine125

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine125:
   \   00000000   01FC               MOVW    R31:R30, R25:R24
   \   00000002                      REQUIRE ??Subroutine166_0
   \   00000002                      ;               // Fall through to label ??Subroutine166_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine166_0:
   \   00000000   0FE0               ADD     R30, R16
   \   00000002   1FF1               ADC     R31, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine95:
   \   00000000   ....               LDI     R24, LOW(UART)
   \   00000002   ....               LDI     R25, (UART) >> 8
   \   00000004   0F80               ADD     R24, R16
   \   00000006   1F91               ADC     R25, R17
   \   00000008   9508               RET
    322          
    323          /*************************************************************************
    324          *
    325          * Build datablock for card status
    326          *
    327          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine135:
   \   00000000   0FE2               ADD     R30, R18
   \   00000002   1FF3               ADC     R31, R19
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine86:
   \   00000000   5002               SUBI    R16, 2
   \   00000002   8300               ST      Z, R16
   \   00000004   918D               LD      R24, X+
   \   00000006   919C               LD      R25, X
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine150:
   \   00000000   9711               SBIW    R27:R26, 1
   \   00000002   ....               RJMP    ?Subroutine99

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine99:
   \   00000000   ....               RCALL   ?Subroutine131
   \                     ??CrossCallReturnLabel_345:
   \   00000002   5F0E               SUBI    R16, 254
   \   00000004                      REQUIRE ?Subroutine122
   \   00000004                      ;               // Fall through to label ?Subroutine122

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine146:
   \   00000000   E0E8               LDI     R30, 8
   \   00000002   ........           JMP     ?EPILOGUE_B8_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine133:
   \   00000000   54E2               SUBI    R30, 66
   \   00000002   4FFE               SBCI    R31, 254
   \   00000004   8350               ST      Z, R21
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   8300               ST      Z, R16
   \   00000002                      REQUIRE ?Subroutine151
   \   00000002                      REQUIRE ??Subroutine159_0
   \   00000002                      ;               // Fall through to label ??Subroutine159_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine159_0:
   \   00000000   ....               RCALL   ?Subroutine131
   \                     ??CrossCallReturnLabel_346:
   \   00000002                      REQUIRE ?Subroutine151
   \   00000002                      REQUIRE ??Subroutine160_0
   \   00000002                      ;               // Fall through to label ??Subroutine160_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine160_0:
   \   00000000   9711               SBIW    R27:R26, 1
   \   00000002                      REQUIRE ?Subroutine151
   \   00000002                      REQUIRE ??Subroutine161_0
   \   00000002                      ;               // Fall through to label ??Subroutine161_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine161_0:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   ....               RCALL   ?Subroutine132
   \                     ??CrossCallReturnLabel_311:
   \   00000004                      REQUIRE ?Subroutine151
   \   00000004                      ;               // Fall through to label ?Subroutine151

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine140:
   \   00000000   8391               STD     Z+1, R25
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine76:
   \   00000000   ........           JMP     ?PROLOGUE8_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine94:
   \   00000000   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_173:
   \   00000002   ....               RJMP    ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_299:
   \   00000002   1906               SUB     R16, R6
   \   00000004   ....               RCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_133:
   \   00000006   1986               SUB     R24, R6
   \   00000008   0997               SBC     R25, R7
   \   0000000A   ....               RJMP    ?Subroutine103

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine103:
   \   00000000   9702               SBIW    R25:R24, 2
   \   00000002   ....               RJMP    ?Subroutine140

   \                                 In  segment CODE, align 2, keep-with-next
    328          void BuildStatusData(char ch) {
   \                     BuildStatusData:
   \   00000000   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_101:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002   2F20               MOV     R18, R16
    329          
    330              short ntna;
    331              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000004   ....               RCALL   ?Subroutine0
    332          
    333              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS & 0xff;
   \                     ??CrossCallReturnLabel_0:
   \   00000006   EE09               LDI     R16, 233
   \   00000008   ....               RCALL   ?Subroutine20
    334              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS >> 8;
   \                     ??CrossCallReturnLabel_314:
   \   0000000A   E003               LDI     R16, 3
   \   0000000C   8300               ST      Z, R16
    335              ntna = UART[ch].TxFirst;                                    /* remember index */
   \   0000000E   906D               LD      R6, X+
   \   00000010   907C               LD      R7, X
   \   00000012   ....               RCALL   ?Subroutine150
    336              UART[ch].TxFirst += 2;                                      // two byte length
    337              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ch;               // channel
   \                     ??CrossCallReturnLabel_246:
   \   00000014   ....               RCALL   ??Subroutine159_0
   \                     ??CrossCallReturnLabel_320:
   \   00000016   8320               ST      Z, R18
    338              UART[ch].pTxBuffer[UART[ch].TxFirst++] = DEVICE_IO + UnitID;   // Product ID
   \   00000018   ....               RCALL   ?Subroutine120
   \                     ??CrossCallReturnLabel_175:
   \   0000001A   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_141:
   \   0000001C   5F00               SUBI    R16, 240
   \   0000001E   01FC               MOVW    R31:R30, R25:R24
   \   00000020   ....               RCALL   ?Subroutine135
   \                     ??CrossCallReturnLabel_189:
   \   00000022   ....               RCALL   ?Subroutine31
    339              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MyAddress();           // unit adddress
   \                     ??CrossCallReturnLabel_287:
   \   00000024   01F2               MOVW    R31:R30, R5:R4
   \   00000026   ....               RCALL   ?Subroutine132
   \                     ??CrossCallReturnLabel_307:
   \   00000028   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_69:
   \   0000002A   01FC               MOVW    R31:R30, R25:R24
   \   0000002C   0DE4               ADD     R30, R4
   \   0000002E   1DF5               ADC     R31, R5
   \   00000030   ....               RCALL   ?Subroutine20
    340              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROG_VERSION;       // software version */
   \                     ??CrossCallReturnLabel_313:
   \   00000032   E20E               LDI     R16, 46
   \   00000034   ....               RCALL   ?Subroutine16
    341              UART[ch].pTxBuffer[UART[ch].TxFirst++] = COMP_VERSION;        // cpmpability version
    342              UART[ch].pTxBuffer[UART[ch].TxFirst++] = STORE_VERSION;        // cpmpability version
   \                     ??CrossCallReturnLabel_162:
   \   00000036   ....               RCALL   ?Subroutine151
   \                     ??CrossCallReturnLabel_316:
   \   00000038   E002               LDI     R16, 2
   \   0000003A   ....               RCALL   ?Subroutine20
    343              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RXSIZE_UART & 0xff);         // rx buffer size
   \                     ??CrossCallReturnLabel_312:
   \   0000003C   E906               LDI     R16, 150
   \   0000003E   8300               ST      Z, R16
    344              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((RXSIZE_UART >> 8) & 0xff); // rx buffer size
   \   00000040   ....               RCALL   ?Subroutine18
    345              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TXSIZE_UART & 0xff);         // tx buffer size
   \                     ??CrossCallReturnLabel_21:
   \   00000042   ....               RCALL   ??Subroutine161_0
   \                     ??CrossCallReturnLabel_318:
   \   00000044   E103               LDI     R16, 19
   \   00000046   ....               RCALL   ?Subroutine16
    346              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((TXSIZE_UART >> 8) & 0xff);  // tx buffer size
    347              UART[ch].pTxBuffer[UART[ch].TxFirst++] = RestartStatus;                  // restart flag
   \                     ??CrossCallReturnLabel_161:
   \   00000048   9120....           LDS     R18, RestartStatus
   \   0000004C   ....               RCALL   ?Subroutine19
    348              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROGTYPE_APP;                // Application program
   \                     ??CrossCallReturnLabel_23:
   \   0000004E   ....               RCALL   ??Subroutine160_0
   \                     ??CrossCallReturnLabel_319:
   \   00000050   E001               LDI     R16, 1
   \   00000052   8300               ST      Z, R16
    349          
    350              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   00000054   0D86               ADD     R24, R6
   \   00000056   1D97               ADC     R25, R7
   \   00000058   01FC               MOVW    R31:R30, R25:R24
   \   0000005A   ....               RCALL   ?Subroutine25
    351              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
    352          
    353              RestartStatus = 0;                                                       // set reset stat to 0 = read
   \                     ??CrossCallReturnLabel_37:
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   9300....           STS     RestartStatus, R16
    354          }
   \   00000062   ....               RJMP    ?Subroutine146

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine120:
   \   00000000   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_304:
   \   00000002   01F9               MOVW    R31:R30, R19:R18
   \   00000004   ....               RJMP    ?Subroutine132

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   8300               ST      Z, R16
   \   00000002   904D               LD      R4, X+
   \   00000004   905C               LD      R5, X
   \   00000006   ....               RJMP    ?Subroutine138

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   ....               RCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_126:
   \   00000002   E001               LDI     R16, 1
   \   00000004                      REQUIRE ?Subroutine116
   \   00000004                      ;               // Fall through to label ?Subroutine116

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_228:
   \   00000002   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_149:
   \   00000004   01FC               MOVW    R31:R30, R25:R24
   \   00000006   ....               RCALL   ?Subroutine133
   \                     ??CrossCallReturnLabel_183:
   \   00000008   01DC               MOVW    R27:R26, R25:R24
   \   0000000A   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_146:
   \   0000000C   ....               RJMP    ?Subroutine151
    355          
    356          /*************************************************************************
    357          *
    358          * Build EEPROM data package
    359          *
    360          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    361          void BuildEEPROMData(char ch, short pointer) {
   \                     BuildEEPROMData:
   \   00000000   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_100:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
    362          
    363              short ntna;
    364              char channel;
    365              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000002   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_18:
   \   00000004   2E44               MOV     R4, R20
   \   00000006   ....               LDI     R20, (UART) >> 8
   \   00000008   0E40               ADD     R4, R16
   \   0000000A   1F41               ADC     R20, R17
   \   0000000C   2E54               MOV     R5, R20
   \   0000000E   01F2               MOVW    R31:R30, R5:R4
   \   00000010   ....               RCALL   ?Subroutine133
    366          
    367              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA & 0xff;
   \                     ??CrossCallReturnLabel_182:
   \   00000012   01D2               MOVW    R27:R26, R5:R4
   \   00000014   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_145:
   \   00000016   01F2               MOVW    R31:R30, R5:R4
   \   00000018   ....               RCALL   ??Subroutine166_0
   \                     ??CrossCallReturnLabel_355:
   \   0000001A   E309               LDI     R16, 57
   \   0000001C   ....               RCALL   ?Subroutine116
    368              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA >> 8;
   \                     ??CrossCallReturnLabel_163:
   \   0000001E   01F2               MOVW    R31:R30, R5:R4
   \   00000020   ....               RCALL   ?Subroutine15
    369              ntna = UART[ch].TxFirst;                                    /* remember index */
    370              UART[ch].TxFirst += 2;                                      // two byte length
    371          
    372              channel = UART[ch].pRxBuffer[pointer];
   \                     ??CrossCallReturnLabel_244:
   \   00000022   ....               RCALL   ?Subroutine67
   \                     ??CrossCallReturnLabel_192:
   \   00000024   5EE5               SUBI    R30, 229
   \   00000026   4FFE               SBCI    R31, 254
   \   00000028   8100               LD      R16, Z
    373              UART[ch].pTxBuffer[UART[ch].TxFirst++] = channel; //channel
   \   0000002A   ....               RCALL   ?Subroutine120
   \                     ??CrossCallReturnLabel_174:
   \   0000002C   ....               RCALL   ?Subroutine67
   \                     ??CrossCallReturnLabel_193:
   \   0000002E   8300               ST      Z, R16
    374          
    375              ReadEEPROMBuffer((channel * sizeof(float) * 2), sizeof(float), (char *)&UART[ch].pTxBuffer[UART[ch].TxFirst]);
   \   00000030   E018               LDI     R17, 8
   \   00000032   9F01               MUL     R16, R17
   \   00000034   01C0               MOVW    R25:R24, R1:R0
   \   00000036   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_73:
   \   00000038   0180               MOVW    R17:R16, R1:R0
   \   0000003A   ....               RCALL   ?Subroutine53
    376              UART[ch].TxFirst += sizeof(float);
    377              ReadEEPROMBuffer((channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char *)&UART[ch].pTxBuffer[UART[ch].TxFirst]);
   \                     ??CrossCallReturnLabel_339:
   \   0000003C   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_74:
   \   0000003E   9604               ADIW    R25:R24, 4
   \   00000040   018C               MOVW    R17:R16, R25:R24
   \   00000042   ....               RCALL   ?Subroutine53
    378              UART[ch].TxFirst += sizeof(float);
    379          
    380              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??CrossCallReturnLabel_338:
   \   00000044   0C46               ADD     R4, R6
   \   00000046   1C57               ADC     R5, R7
   \   00000048   01F2               MOVW    R31:R30, R5:R4
   \   0000004A   ....               RCALL   ?Subroutine25
    381              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
    382          }
   \                     ??CrossCallReturnLabel_38:
   \   0000004C   ....               RJMP    ?Subroutine146

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine54:
   \   00000000   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_301:
   \   00000002   01A2               MOVW    R21:R20, R5:R4
   \   00000004   0F40               ADD     R20, R16
   \   00000006   1F51               ADC     R21, R17
   \   00000008   E024               LDI     R18, 4
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine53:
   \   00000000   ........           CALL    ReadEEPROMBuffer
   \   00000004                      REQUIRE ??Subroutine165_0
   \   00000004                      ;               // Fall through to label ??Subroutine165_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine165_0:
   \   00000000   ....               RCALL   ?Subroutine131
   \                     ??CrossCallReturnLabel_347:
   \   00000002   5F0C               SUBI    R16, 252
   \   00000004   ....               RJMP    ?Subroutine122

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_265:
   \   00000002   906D               LD      R6, X+
   \   00000004   907C               LD      R7, X
   \   00000006   ....               RJMP    ?Subroutine150

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_231:
   \   00000002   ....               LDI     R20, LOW(UART)
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine67:
   \   00000000   01F2               MOVW    R31:R30, R5:R4
   \   00000002   ....               RJMP    ?Subroutine135
    383          
    384          
    385          /*************************************************************************
    386          *
    387          * Build datablock for Internal AD
    388          *
    389          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine149:
   \   00000000   ....               RCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_243:
   \   00000002   ....               RJMP    ??Subroutine168_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine113:
   \   00000000   932C               ST      X, R18
   \   00000002                      REQUIRE ??Subroutine154_0
   \   00000002                      ;               // Fall through to label ??Subroutine154_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine154_0:
   \   00000000   8120               LD      R18, Z
   \   00000002   8131               LDD     R19, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine118:
   \   00000000   ....               RCALL   ?Subroutine127
   \                     ??CrossCallReturnLabel_327:
   \   00000002   01D8               MOVW    R27:R26, R17:R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine68:
   \   00000000   E080               LDI     R24, 0
   \   00000002   E090               LDI     R25, 0
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine92:
   \   00000000   8100               LD      R16, Z
   \   00000002   8111               LDD     R17, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine127:
   \   00000000   9601               ADIW    R25:R24, 1
   \   00000002   8380               ST      Z, R24
   \   00000004                      REQUIRE ?Subroutine140
   \   00000004                      ;               // Fall through to label ?Subroutine140

   \                                 In  segment CODE, align 2, keep-with-next
    390          void BuildADInt(char ch, short pointer) {
   \                     BuildADInt:
   \   00000000   ....               RCALL   ?Subroutine2
    391          
    392              short ntna, i;
    393              UART[ch].RxSendReply = true;                               // flag for answering
    394          
    395              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA & 0xff;
   \                     ??CrossCallReturnLabel_4:
   \   00000002   E423               LDI     R18, 67
   \   00000004   ....               RCALL   ?Subroutine41
    396              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA >> 8;
    397              ntna = UART[ch].TxFirst;                                    /* remember index */
    398              UART[ch].TxFirst += 2;                                      // two byte length
    399          
    400              for (i = 0; i < 3; i++) {
   \                     ??CrossCallReturnLabel_56:
   \   00000006   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_89:
   \   00000008   E043               LDI     R20, 3
    401                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i];
   \                     ??BuildADInt_0:
   \   0000000A   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_336:
   \   0000000C   01BC               MOVW    R23:R22, R25:R24
   \   0000000E   0F66               LSL     R22
   \   00000010   1F77               ROL     R23
   \   00000012   01DB               MOVW    R27:R26, R23:R22
   \   00000014   ....               SUBI    R26, LOW((-(ADInt) & 0xFFFF))
   \   00000016   ....               SBCI    R27, (-(ADInt) & 0xFFFF) >> 8
   \   00000018   916D               LD      R22, X+
   \   0000001A   917C               LD      R23, X
   \   0000001C   01D8               MOVW    R27:R26, R17:R16
   \   0000001E   0DA0               ADD     R26, R0
   \   00000020   1DB1               ADC     R27, R1
   \   00000022   936C               ST      X, R22
    402                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] >> 8;   // ADresult
   \   00000024   ....               RCALL   ?Subroutine46
    403              }
   \                     ??CrossCallReturnLabel_337:
   \   00000026   01D8               MOVW    R27:R26, R17:R16
   \   00000028   0DA0               ADD     R26, R0
   \   0000002A   1DB1               ADC     R27, R1
   \   0000002C   937C               ST      X, R23
   \   0000002E   9601               ADIW    R25:R24, 1
   \   00000030   954A               DEC     R20
   \   00000032   F759               BRNE    ??BuildADInt_0
    404          
    405              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   00000034   ....               RJMP    ?Subroutine149
    406              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
    407          
    408          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine46:
   \   00000000   8000               LD      R0, Z
   \   00000002   8011               LDD     R1, Z+1
   \   00000004   01D0               MOVW    R27:R26, R1:R0
   \   00000006                      REQUIRE ??Subroutine164_0
   \   00000006                      ;               // Fall through to label ??Subroutine164_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine164_0:
   \   00000000   9611               ADIW    R27:R26, 1
   \   00000002   83A0               ST      Z, R26
   \   00000004   83B1               STD     Z+1, R27
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine41:
   \   00000000   932C               ST      X, R18
   \   00000002   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_139:
   \   00000004   E024               LDI     R18, 4
   \   00000006   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_268:
   \   00000008                      REQUIRE ?Subroutine114
   \   00000008                      ;               // Fall through to label ?Subroutine114

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine114:
   \   00000000   8140               LD      R20, Z
   \   00000002   8151               LDD     R21, Z+1
   \   00000004   5F4E               SUBI    R20, 254
   \   00000006   4F5F               SBCI    R21, 255
   \   00000008   8340               ST      Z, R20
   \   0000000A   8351               STD     Z+1, R21
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   0F02               ADD     R16, R18
   \   00000002   1F13               ADC     R17, R19
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_239:
   \   00000008   1B02               SUB     R16, R18
   \   0000000A   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_241:
   \   0000000C   1B82               SUB     R24, R18
   \   0000000E   0B93               SBC     R25, R19
   \   00000010                      REQUIRE ?Subroutine104
   \   00000010                      ;               // Fall through to label ?Subroutine104

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine104:
   \   00000000   9702               SBIW    R25:R24, 2
   \   00000002   01FD               MOVW    R31:R30, R27:R26
   \   00000004   8391               STD     Z+1, R25
   \   00000006   E0E4               LDI     R30, 4
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine97:
   \   00000000   5002               SUBI    R16, 2
   \   00000002   930C               ST      X, R16
   \   00000004   8180               LD      R24, Z
   \   00000006   8191               LDD     R25, Z+1
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_202:
   \   00000006   01F8               MOVW    R31:R30, R17:R16
   \   00000008   ....               RCALL   ?Subroutine133
   \                     ??CrossCallReturnLabel_184:
   \   0000000A   01F8               MOVW    R31:R30, R17:R16
   \   0000000C   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_215:
   \   0000000E   ....               RJMP    ?Subroutine91

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine91:
   \   00000000   8120               LD      R18, Z
   \   00000002   8131               LDD     R19, Z+1
   \   00000004   01C9               MOVW    R25:R24, R19:R18
   \   00000006   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_169:
   \   00000008   0FA2               ADD     R26, R18
   \   0000000A   1FB3               ADC     R27, R19
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine136:
   \   00000000   0F02               ADD     R16, R18
   \   00000002   1F13               ADC     R17, R19
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine89:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_234:
   \   00000002   0198               MOVW    R19:R18, R17:R16
   \   00000004   ....               LDI     R16, LOW(UART)
   \   00000006   ....               LDI     R17, (UART) >> 8
   \   00000008   ....               RJMP    ?Subroutine136

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine168_0:
   \   00000000   ........           JMP     ?EPILOGUE_B4_L09
    409          
    410          
    411          /*************************************************************************
    412          *
    413          * Build datablock for eeprom on ADcard
    414          *
    415          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine153_0:
   \   00000000   01F9               MOVW    R31:R30, R19:R18
   \   00000002                      REQUIRE ?Subroutine106
   \   00000002                      ;               // Fall through to label ?Subroutine106

   \                                 In  segment CODE, align 2, keep-with-next
    416          void BuildADEpromdata(char ch, char portch) {
   \                     BuildADEpromdata:
   \   00000000   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_117:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002   2F61               MOV     R22, R17
    417          
    418              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000004   ....               RCALL   ?Subroutine87
    419          
    420              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF & 0xff;
   \                     ??CrossCallReturnLabel_185:
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   \   00000008   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_172:
   \   0000000A   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_137:
   \   0000000C   01F9               MOVW    R31:R30, R19:R18
   \   0000000E   ....               RCALL   ??Subroutine166_0
   \                     ??CrossCallReturnLabel_350:
   \   00000010   E809               LDI     R16, 137
   \   00000012   8300               ST      Z, R16
    421              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF >> 8;
   \   00000014   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_138:
   \   00000016   ....               RCALL   ??Subroutine153_0
    422              short ntna = UART[ch].TxFirst;                                    // remember index
   \                     ??CrossCallReturnLabel_266:
   \   00000018   01FD               MOVW    R31:R30, R27:R26
   \   0000001A   8020               LD      R2, Z
   \   0000001C   8031               LDD     R3, Z+1
    423              UART[ch].TxFirst += 2;                                      // two byte length
   \   0000001E   ....               RCALL   ?Subroutine30
    424          
    425              for (short i = 0; i < 44; i++) {
   \                     ??CrossCallReturnLabel_280:
   \   00000020   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_87:
   \   00000022   E27C               LDI     R23, 44
   \   00000024   E342               LDI     R20, 50
    426                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FromTargetBuffer[portch][i];
   \                     ??BuildADEpromdata_0:
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   8040               LD      R4, Z
   \   0000002A   8051               LDD     R5, Z+1
   \   0000002C   0182               MOVW    R17:R16, R5:R4
   \   0000002E   5F0F               SUBI    R16, 255
   \   00000030   ....               RCALL   ??Subroutine156_0
    427              }
   \                     ??CrossCallReturnLabel_278:
   \   00000032   ....               LDI     R30, LOW((TData + 1428))
   \   00000034   ....               LDI     R31, HIGH((TData + 1428))
   \   00000036   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_54:
   \   00000038   2F06               MOV     R16, R22
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_221:
   \   0000003E   ....               RCALL   ??Subroutine166_0
   \                     ??CrossCallReturnLabel_351:
   \   00000040   8100               LD      R16, Z
   \   00000042   01F9               MOVW    R31:R30, R19:R18
   \   00000044   0DE4               ADD     R30, R4
   \   00000046   1DF5               ADC     R31, R5
   \   00000048   8300               ST      Z, R16
   \   0000004A   9601               ADIW    R25:R24, 1
   \   0000004C   957A               DEC     R23
   \   0000004E   F759               BRNE    ??BuildADEpromdata_0
    428              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   00000050   0D22               ADD     R18, R2
   \   00000052   1D33               ADC     R19, R3
   \   00000054   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_76:
   \   00000056   1902               SUB     R16, R2
   \   00000058   ....               RCALL   ?Subroutine86
    429              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \                     ??CrossCallReturnLabel_132:
   \   0000005A   1982               SUB     R24, R2
   \   0000005C   0993               SBC     R25, R3
   \   0000005E   ....               RCALL   ?Subroutine103
    430          
    431          }
   \                     ??CrossCallReturnLabel_323:
   \   00000060                      REQUIRE ?Subroutine147
   \   00000060                      ;               // Fall through to label ?Subroutine147

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine147:
   \   00000000   E0E6               LDI     R30, 6
   \   00000002   ........           JMP     ?EPILOGUE_B6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002                      REQUIRE ?Subroutine88
   \   00000002                      ;               // Fall through to label ?Subroutine88

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine88:
   \   00000000   8100               LD      R16, Z
   \   00000002   8111               LDD     R17, Z+1
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   ....               RJMP    ?Subroutine127

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_238:
   \   00000002   5F0E               SUBI    R16, 254
   \   00000004                      REQUIRE ??Subroutine156_0
   \   00000004                      ;               // Fall through to label ??Subroutine156_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine156_0:
   \   00000000   4F1F               SBCI    R17, 255
   \   00000002                      REQUIRE ??Subroutine157_0
   \   00000002                      ;               // Fall through to label ??Subroutine157_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   E050               LDI     R21, 0
   \   00000002                      REQUIRE ?Subroutine148
   \   00000002                      ;               // Fall through to label ?Subroutine148

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine55:
   \   00000000   01F9               MOVW    R31:R30, R19:R18
   \   00000002   ....               RJMP    ?Subroutine100

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine87:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_233:
   \   00000002   ....               LDI     R18, LOW(UART)
   \   00000004   ....               LDI     R19, (UART) >> 8
   \   00000006   0F20               ADD     R18, R16
   \   00000008   1F31               ADC     R19, R17
   \   0000000A   01F9               MOVW    R31:R30, R19:R18
   \   0000000C   ....               RJMP    ?Subroutine133

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine79:
   \   00000000   ........           JMP     ?PROLOGUE6_L09
    432          
    433          /*************************************************************************
    434          *
    435          * Build datablock for WHData on ADcard
    436          *
    437          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine152_0:
   \   00000000   8000               LD      R0, Z
   \   00000002   8011               LDD     R1, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    438          void BuildWHdata(char ch, short pointer) {
   \                     BuildWHdata:
   \   00000000   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_99:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
    439          
    440              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000002   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_17:
   \   00000004   ....               LDI     R21, (UART) >> 8
   \   00000006   0F40               ADD     R20, R16
   \   00000008   1F51               ADC     R21, R17
   \   0000000A   01FA               MOVW    R31:R30, R21:R20
   \   0000000C   54E2               SUBI    R30, 66
   \   0000000E   4FFE               SBCI    R31, 254
   \   00000010   E001               LDI     R16, 1
   \   00000012   8300               ST      Z, R16
    441          
    442              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF & 0xff;
   \   00000014   01FA               MOVW    R31:R30, R21:R20
   \   00000016   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_212:
   \   00000018   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_42:
   \   0000001A   E90C               LDI     R16, 156
   \   0000001C   930C               ST      X, R16
    443              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF >> 8;
   \   0000001E   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_43:
   \   00000020   E004               LDI     R16, 4
   \   00000022   930C               ST      X, R16
    444              short ntna = UART[ch].TxFirst;                          // remember index
   \   00000024   ....               RCALL   ??Subroutine155_0
    445              UART[ch].TxFirst += 2;                                  // two byte length
   \                     ??CrossCallReturnLabel_273:
   \   00000026   ....               RCALL   ?Subroutine30
    446          
    447              OS_EnterRegion();
   \                     ??CrossCallReturnLabel_279:
   \   00000028   ....               LDI     R26, LOW(OS_Global)
   \   0000002A   ....               LDI     R27, (OS_Global) >> 8
   \   0000002C   910C               LD      R16, X
   \   0000002E   9503               INC     R16
   \   00000030   930C               ST      X, R16
    448              for (short i = 0; i < 4; i++) {
   \   00000032   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_86:
   \   00000034   E004               LDI     R16, 4
   \   00000036   2E20               MOV     R2, R16
   \   00000038   018A               MOVW    R17:R16, R21:R20
   \   0000003A   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_197:
   \   0000003C   5E05               SUBI    R16, 229
   \   0000003E   4F1E               SBCI    R17, 254
    449                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] & 0xff; // WashTrackcnt
   \                     ??BuildWHdata_0:
   \   00000040   8060               LD      R6, Z
   \   00000042   8071               LDD     R7, Z+1
   \   00000044   0193               MOVW    R19:R18, R7:R6
   \   00000046   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_115:
   \   00000048   019C               MOVW    R19:R18, R25:R24
   \   0000004A   0F22               LSL     R18
   \   0000004C   1F33               ROL     R19
   \   0000004E   ....               LDI     R26, LOW((TData + 1179))
   \   00000050   2E4A               MOV     R4, R26
   \   00000052   ....               LDI     R26, HIGH((TData + 1179))
   \   00000054   0E42               ADD     R4, R18
   \   00000056   1FA3               ADC     R26, R19
   \   00000058   2E5A               MOV     R5, R26
   \   0000005A   01D8               MOVW    R27:R26, R17:R16
   \   0000005C   900C               LD      R0, X
   \   0000005E   E0A8               LDI     R26, 8
   \   00000060   9E0A               MUL     R0, R26
   \   00000062   0C40               ADD     R4, R0
   \   00000064   1C51               ADC     R5, R1
   \   00000066   01D2               MOVW    R27:R26, R5:R4
   \   00000068   900D               LD      R0, X+
   \   0000006A   01DA               MOVW    R27:R26, R21:R20
   \   0000006C   0DA6               ADD     R26, R6
   \   0000006E   1DB7               ADC     R27, R7
   \   00000070   920C               ST      X, R0
    450                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] >> 8) & 0xff; // WashTrackcnt
   \   00000072   8040               LD      R4, Z
   \   00000074   8051               LDD     R5, Z+1
   \   00000076   01D2               MOVW    R27:R26, R5:R4
   \   00000078   ....               RCALL   ??Subroutine164_0
    451              }
   \                     ??CrossCallReturnLabel_335:
   \   0000007A   ....               LDI     R26, LOW((TData + 1179))
   \   0000007C   2E6A               MOV     R6, R26
   \   0000007E   ....               LDI     R26, HIGH((TData + 1179))
   \   00000080   0E62               ADD     R6, R18
   \   00000082   1FA3               ADC     R26, R19
   \   00000084   2E7A               MOV     R7, R26
   \   00000086   01D8               MOVW    R27:R26, R17:R16
   \   00000088   913C               LD      R19, X
   \   0000008A   E028               LDI     R18, 8
   \   0000008C   9F32               MUL     R19, R18
   \   0000008E   0C60               ADD     R6, R0
   \   00000090   1C71               ADC     R7, R1
   \   00000092   01D3               MOVW    R27:R26, R7:R6
   \   00000094   9611               ADIW    R27:R26, 1
   \   00000096   912C               LD      R18, X
   \   00000098   01DA               MOVW    R27:R26, R21:R20
   \   0000009A   0DA4               ADD     R26, R4
   \   0000009C   1DB5               ADC     R27, R5
   \   0000009E   932C               ST      X, R18
   \   000000A0   9601               ADIW    R25:R24, 1
   \   000000A2   942A               DEC     R2
   \   000000A4   F669               BRNE    ??BuildWHdata_0
    452              UART[ch].pTxBuffer[UART[ch].TxFirst++] =  TData.RS4.LevelSwitch[UART[ch].pRxBuffer[pointer]];
   \   000000A6   ....               RCALL   ??Subroutine152_0
   \                     ??CrossCallReturnLabel_249:
   \   000000A8   01C0               MOVW    R25:R24, R1:R0
   \   000000AA   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_166:
   \   000000AC   91AC               LD      R26, X
   \   000000AE   E0B0               LDI     R27, 0
   \   000000B0   ....               SUBI    R26, LOW((-(TData + 1243) & 0xFFFF))
   \   000000B2   ....               SBCI    R27, HIGH((-(TData + 1243) & 0xFFFF))
   \   000000B4   912C               LD      R18, X
   \   000000B6   01DA               MOVW    R27:R26, R21:R20
   \   000000B8   0DA0               ADD     R26, R0
   \   000000BA   1DB1               ADC     R27, R1
   \   000000BC   932C               ST      X, R18
    453              UART[ch].pTxBuffer[UART[ch].TxFirst++] =  TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] & 0xff; // WashTrackcnt
   \   000000BE   8020               LD      R2, Z
   \   000000C0   8031               LDD     R3, Z+1
   \   000000C2   01C1               MOVW    R25:R24, R3:R2
   \   000000C4   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_167:
   \   000000C6   912C               LD      R18, X
   \   000000C8   E032               LDI     R19, 2
   \   000000CA   9F23               MUL     R18, R19
   \   000000CC   01D0               MOVW    R27:R26, R1:R0
   \   000000CE   ....               SUBI    R26, LOW((-(TData + 1251) & 0xFFFF))
   \   000000D0   ....               SBCI    R27, HIGH((-(TData + 1251) & 0xFFFF))
   \   000000D2   912D               LD      R18, X+
   \   000000D4   01DA               MOVW    R27:R26, R21:R20
   \   000000D6   0DA2               ADD     R26, R2
   \   000000D8   1DB3               ADC     R27, R3
   \   000000DA   ....               RCALL   ?Subroutine113
    454              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] >> 8) & 0xff; // WashTrackcnt
   \                     ??CrossCallReturnLabel_267:
   \   000000DC   01C9               MOVW    R25:R24, R19:R18
   \   000000DE   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_168:
   \   000000E0   910C               LD      R16, X
   \   000000E2   E012               LDI     R17, 2
   \   000000E4   9F01               MUL     R16, R17
   \   000000E6   01D0               MOVW    R27:R26, R1:R0
   \   000000E8   ....               SUBI    R26, LOW((-(TData + 1251) & 0xFFFF))
   \   000000EA   ....               SBCI    R27, HIGH((-(TData + 1251) & 0xFFFF))
   \   000000EC   9611               ADIW    R27:R26, 1
   \   000000EE   910C               LD      R16, X
   \   000000F0   01DA               MOVW    R27:R26, R21:R20
   \   000000F2   0FA2               ADD     R26, R18
   \   000000F4   1FB3               ADC     R27, R19
   \   000000F6   930C               ST      X, R16
    455              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   000000F8   0F46               ADD     R20, R22
   \   000000FA   1F57               ADC     R21, R23
   \   000000FC   01DA               MOVW    R27:R26, R21:R20
   \   000000FE   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_235:
   \   00000100   1B06               SUB     R16, R22
   \   00000102   ....               RCALL   ?Subroutine97
    456              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \                     ??CrossCallReturnLabel_240:
   \   00000104   1B86               SUB     R24, R22
   \   00000106   0B97               SBC     R25, R23
   \   00000108   9702               SBIW    R25:R24, 2
   \   0000010A   01FA               MOVW    R31:R30, R21:R20
   \   0000010C   8391               STD     Z+1, R25
    457              OS_LeaveRegion();
   \   0000010E   ........           CALL    OS_LeaveRegion
    458          }
   \   00000112                      REQUIRE ?Subroutine146
   \   00000112                      ;               // Fall through to label ?Subroutine146

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine155_0:
   \   00000000   8160               LD      R22, Z
   \   00000002   8171               LDD     R23, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   ....               RCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_135:
   \   00000002   01DA               MOVW    R27:R26, R21:R20
   \   00000004   ....               RJMP    ?Subroutine110

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine78:
   \   00000000   5F2F               SUBI    R18, 255
   \   00000002   4F3F               SBCI    R19, 255
   \   00000004   8320               ST      Z, R18
   \   00000006   8331               STD     Z+1, R19
   \   00000008   9508               RET
    459          
    460          
    461          
    462          /*************************************************************************
    463          *
    464          * Build setup dat package for AN-ZB485
    465          *
    466          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   ........           JMP     ?PROLOGUE4_L09

   \                                 In  segment CODE, align 2, keep-with-next
    467          void BuildRS4Setup(char ch, short pointer) {
   \                     BuildRS4Setup:
   \   00000000   ....               RCALL   ?Subroutine35
    468          
    469              short ntna;
    470              UART[ch].RxSendReply = true;                               // flag for answering
   \                     ??CrossCallReturnLabel_48:
   \   00000002   ....               RCALL   ?Subroutine87
    471          
    472              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP & 0xff;
   \                     ??CrossCallReturnLabel_186:
   \   00000004   01F9               MOVW    R31:R30, R19:R18
   \   00000006   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_213:
   \   00000008   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_157:
   \   0000000A   E507               LDI     R16, 87
   \   0000000C   930C               ST      X, R16
    473              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP >> 8;
   \   0000000E   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_158:
   \   00000010   E004               LDI     R16, 4
   \   00000012   930C               ST      X, R16
    474              ntna = UART[ch].TxFirst;                                    /* remember index */
   \   00000014   ....               RCALL   ?Subroutine92
    475              UART[ch].TxFirst += 2;                                      // two byte length
   \                     ??CrossCallReturnLabel_236:
   \   00000016   ....               RCALL   ?Subroutine43
    476          
    477              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.PortUsed;  // send the setup
   \                     ??CrossCallReturnLabel_321:
   \   00000018   9160....           LDS     R22, TData
   \   0000001C   ....               RCALL   ?Subroutine74
    478              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[0];  // send the sensor type
   \                     ??CrossCallReturnLabel_93:
   \   0000001E   ....               RCALL   ??Subroutine162_0
   \                     ??CrossCallReturnLabel_328:
   \   00000020   9160....           LDS     R22, (TData + 1)
   \   00000024   ....               RCALL   ?Subroutine74
    479              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[1];  // send the sensor type
   \                     ??CrossCallReturnLabel_94:
   \   00000026   ....               RCALL   ??Subroutine162_0
   \                     ??CrossCallReturnLabel_329:
   \   00000028   9160....           LDS     R22, (TData + 2)
   \   0000002C   ....               RCALL   ?Subroutine74
    480          
    481              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??CrossCallReturnLabel_95:
   \   0000002E   0F20               ADD     R18, R16
   \   00000030   1F31               ADC     R19, R17
   \   00000032   01D9               MOVW    R27:R26, R19:R18
   \   00000034   ....               RCALL   ??Subroutine154_0
   \                     ??CrossCallReturnLabel_269:
   \   00000036   1B20               SUB     R18, R16
   \   00000038   5022               SUBI    R18, 2
   \   0000003A   932C               ST      X, R18
    482              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   0000003C   8180               LD      R24, Z
   \   0000003E   8191               LDD     R25, Z+1
   \   00000040   1B80               SUB     R24, R16
   \   00000042   0B91               SBC     R25, R17
   \   00000044   ....               RCALL   ?Subroutine104
    483          }
   \                     ??CrossCallReturnLabel_242:
   \   00000046   ....               RJMP    ??Subroutine168_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine74:
   \   00000000   01D9               MOVW    R27:R26, R19:R18
   \   00000002   0FA4               ADD     R26, R20
   \   00000004   1FB5               ADC     R27, R21
   \   00000006   936C               ST      X, R22
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine43:
   \   00000000   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_159:
   \   00000002                      REQUIRE ?Subroutine127
   \   00000002                      REQUIRE ??Subroutine162_0
   \   00000002                      ;               // Fall through to label ??Subroutine162_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine162_0:
   \   00000000   8140               LD      R20, Z
   \   00000002   8151               LDD     R21, Z+1
   \   00000004   01CA               MOVW    R25:R24, R21:R20
   \   00000006                      REQUIRE ?Subroutine127
   \   00000006                      ;               // Fall through to label ?Subroutine127

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   ....               RCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_136:
   \   00000002   01D9               MOVW    R27:R26, R19:R18
   \   00000004                      REQUIRE ?Subroutine110
   \   00000004                      ;               // Fall through to label ?Subroutine110
    484          
    485          /*************************************************************************
    486          *
    487          * Build datablock of measured data for ADcard
    488          *
    489          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   E010               LDI     R17, 0
   \   00000002   ....               RJMP    ?Subroutine148

   \                                 In  segment CODE, align 2, keep-with-next
    490          void BuildMData485(char ch, short pointer) {
   \                     BuildMData485:
   \   00000000   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_97:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
    491              short ntna, i;
    492              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000002   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_225:
   \   00000004   ....               LDI     R22, LOW(UART)
   \   00000006   ....               LDI     R23, (UART) >> 8
   \   00000008   0F60               ADD     R22, R16
   \   0000000A   1F71               ADC     R23, R17
   \   0000000C   01FB               MOVW    R31:R30, R23:R22
   \   0000000E   ....               RCALL   ?Subroutine133
    493          
    494              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA & 0xff;
   \                     ??CrossCallReturnLabel_181:
   \   00000010   01DB               MOVW    R27:R26, R23:R22
   \   00000012   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_144:
   \   00000014   01FB               MOVW    R31:R30, R23:R22
   \   00000016   ....               RCALL   ??Subroutine166_0
   \                     ??CrossCallReturnLabel_352:
   \   00000018   E705               LDI     R16, 117
   \   0000001A   ....               RCALL   ?Subroutine116
    495              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA >> 8;
   \                     ??CrossCallReturnLabel_164:
   \   0000001C   01FB               MOVW    R31:R30, R23:R22
   \   0000001E   ....               RCALL   ?Subroutine15
    496              ntna = UART[ch].TxFirst;                                    /* remember index */
    497              UART[ch].TxFirst += 2;                                      // two byte length
    498          
    499              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer];
   \                     ??CrossCallReturnLabel_245:
   \   00000020   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_78:
   \   00000022   0F26               ADD     R18, R22
   \   00000024   1F37               ADC     R19, R23
   \   00000026   5E25               SUBI    R18, 229
   \   00000028   4F3E               SBCI    R19, 254
   \   0000002A   ....               RCALL   ??Subroutine158_0
   \                     ??CrossCallReturnLabel_281:
   \   0000002C   ....               RCALL   ?Subroutine24
    500              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.IOUnitStatus[UART[ch].pRxBuffer[pointer]] | (RestartStatus << 4); // IOUnit status +  restart status
   \                     ??CrossCallReturnLabel_36:
   \   0000002E   8103               LDD     R16, Z+3
   \   00000030   9110....           LDS     R17, RestartStatus
   \   00000034   9512               SWAP    R17
   \   00000036   7F10               ANDI    R17, 0xF0
   \   00000038   2B01               OR      R16, R17
   \   0000003A   ....               RCALL   ?Subroutine69
    501              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] & 0xff; // Failcnt error
   \                     ??CrossCallReturnLabel_261:
   \   0000003C   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_79:
   \   0000003E   ....               RCALL   ??Subroutine158_0
   \                     ??CrossCallReturnLabel_282:
   \   00000040   E014               LDI     R17, 4
   \   00000042   9F01               MUL     R16, R17
   \   00000044   01F0               MOVW    R31:R30, R1:R0
   \   00000046   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_154:
   \   00000048   8503               LDD     R16, Z+11
   \   0000004A   ....               RCALL   ?Subroutine23
    502              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] >> 8) & 0xff; // Failcnt error
   \                     ??CrossCallReturnLabel_33:
   \   0000004C   8504               LDD     R16, Z+12
   \   0000004E   ....               RCALL   ?Subroutine23
    503              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] & 0xff; // Failcnt total
   \                     ??CrossCallReturnLabel_32:
   \   00000050   8505               LDD     R16, Z+13
   \   00000052   ....               RCALL   ?Subroutine23
    504              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] >> 8) & 0xff; // Failcnt total
   \                     ??CrossCallReturnLabel_31:
   \   00000054   8506               LDD     R16, Z+14
   \   00000056   ....               RCALL   ?Subroutine24
    505              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusSWVer[UART[ch].pRxBuffer[pointer]]; // Target status byte 1
   \                     ??CrossCallReturnLabel_35:
   \   00000058   A503               LDD     R16, Z+43
   \   0000005A   ....               RCALL   ?Subroutine24
    506              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]]; // Target status byte 2
   \                     ??CrossCallReturnLabel_34:
   \   0000005C   A903               LDD     R16, Z+51
   \   0000005E   ....               RCALL   ?Subroutine69
    507          
    508              TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]] &= ~0x80;                                  //reset restart flag for adcard
   \                     ??CrossCallReturnLabel_262:
   \   00000060   01F9               MOVW    R31:R30, R19:R18
   \   00000062   81E0               LD      R30, Z
   \   00000064   E0F0               LDI     R31, 0
   \   00000066   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_155:
   \   00000068   A903               LDD     R16, Z+51
   \   0000006A   770F               ANDI    R16, 0x7F
   \   0000006C   AB03               STD     Z+51, R16
    509          
    510              for (i = 0; i < 14; i++) {
   \   0000006E   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_88:
   \   00000070   E00E               LDI     R16, 14
   \   00000072   2E40               MOV     R4, R16
    511                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup1[UART[ch].pRxBuffer[pointer]][i];
   \                     ??BuildMData485_0:
   \   00000074   ....               RCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_288:
   \   00000076   ....               LDI     R16, LOW((TData + 59))
   \   00000078   2E80               MOV     R8, R16
   \   0000007A   ....               LDI     R16, HIGH((TData + 59))
   \   0000007C   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_284:
   \   0000007E   E010               LDI     R17, 0
   \   00000080   E04E               LDI     R20, 14
   \   00000082   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_222:
   \   00000084   ....               RCALL   ?Subroutine38
    512                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup2[UART[ch].pRxBuffer[pointer]][i];
   \                     ??CrossCallReturnLabel_257:
   \   00000086   ....               RCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_289:
   \   00000088   ....               LDI     R16, LOW((TData + 171))
   \   0000008A   2E80               MOV     R8, R16
   \   0000008C   ....               LDI     R16, HIGH((TData + 171))
   \   0000008E   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_285:
   \   00000090   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_16:
   \   00000092   ....               RCALL   ?Subroutine38
    513                  *((float *)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float *)&TData.RS4.Result[UART[ch].pRxBuffer[pointer]][i]);   // ADresult
   \                     ??CrossCallReturnLabel_258:
   \   00000094   ....               LDI     R16, LOW((TData + 731))
   \   00000096   ....               LDI     R17, HIGH((TData + 731))
   \   00000098   0118               MOVW    R3:R2, R17:R16
   \   0000009A   018C               MOVW    R17:R16, R25:R24
   \   0000009C   0F00               LSL     R16
   \   0000009E   1F11               ROL     R17
   \   000000A0   0F00               LSL     R16
   \   000000A2   1F11               ROL     R17
   \   000000A4   0E20               ADD     R2, R16
   \   000000A6   1E31               ADC     R3, R17
   \   000000A8   ....               RCALL   ??Subroutine158_0
   \                     ??CrossCallReturnLabel_283:
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   E348               LDI     R20, 56
   \   000000AE   ....               RCALL   ?Subroutine148
   \                     ??CrossCallReturnLabel_219:
   \   000000B0   0E20               ADD     R2, R16
   \   000000B2   1E31               ADC     R3, R17
   \   000000B4   01F1               MOVW    R31:R30, R3:R2
   \   000000B6   ....               RCALL   ??Subroutine152_0
   \                     ??CrossCallReturnLabel_250:
   \   000000B8   8022               LDD     R2, Z+2
   \   000000BA   8033               LDD     R3, Z+3
   \   000000BC   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_298:
   \   000000BE   01FB               MOVW    R31:R30, R23:R22
   \   000000C0   ....               RCALL   ??Subroutine166_0
   \                     ??CrossCallReturnLabel_353:
   \   000000C2   ....               RCALL   ?Subroutine73
    514                  UART[ch].TxFirst += sizeof(float);
   \                     ??CrossCallReturnLabel_92:
   \   000000C4   ....               RCALL   ??Subroutine165_0
    515              }
   \                     ??CrossCallReturnLabel_340:
   \   000000C6   9601               ADIW    R25:R24, 1
   \   000000C8   944A               DEC     R4
   \   000000CA   F6A1               BRNE    ??BuildMData485_0
    516          
    517              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   000000CC   0D66               ADD     R22, R6
   \   000000CE   1D77               ADC     R23, R7
   \   000000D0   01FB               MOVW    R31:R30, R23:R22
   \   000000D2   ....               RCALL   ?Subroutine25
    518              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
    519          
    520          }
   \                     ??CrossCallReturnLabel_39:
   \   000000D4   ....               RJMP    ?Subroutine145

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine73:
   \   00000000   8200               ST      Z, R0
   \   00000002   8211               STD     Z+1, R1
   \   00000004   8222               STD     Z+2, R2
   \   00000006   8233               STD     Z+3, R3
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine69:
   \   00000000   01FB               MOVW    R31:R30, R23:R22
   \   00000002                      REQUIRE ?Subroutine123
   \   00000002                      ;               // Fall through to label ?Subroutine123

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine123:
   \   00000000   0FE4               ADD     R30, R20
   \   00000002   1FF5               ADC     R31, R21
   \   00000004   ....               RJMP    ?Subroutine139

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine66:
   \   00000000   0E88               ADD     R8, R24
   \   00000002   1F09               ADC     R16, R25
   \   00000004   2E90               MOV     R9, R16
   \   00000006                      REQUIRE ??Subroutine158_0
   \   00000006                      ;               // Fall through to label ??Subroutine158_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine158_0:
   \   00000000   01F9               MOVW    R31:R30, R19:R18
   \   00000002   8100               LD      R16, Z
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine58:
   \   00000000   902D               LD      R2, X+
   \   00000002   903C               LD      R3, X
   \   00000004   9711               SBIW    R27:R26, 1
   \   00000006   0181               MOVW    R17:R16, R3:R2
   \   00000008   5F0F               SUBI    R16, 255
   \   0000000A   4F1F               SBCI    R17, 255
   \   0000000C   930D               ST      X+, R16
   \   0000000E   931C               ST      X, R17
   \   00000010   ....               RJMP    ?Subroutine138

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine56:
   \   00000000   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_178:
   \   00000002   ....               RJMP    ?Subroutine132

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   0E80               ADD     R8, R16
   \   00000002   1E91               ADC     R9, R17
   \   00000004   01F4               MOVW    R31:R30, R9:R8
   \   00000006   8100               LD      R16, Z
   \   00000008   01FB               MOVW    R31:R30, R23:R22
   \   0000000A   0DE2               ADD     R30, R2
   \   0000000C   1DF3               ADC     R31, R3
   \   0000000E                      REQUIRE ?Subroutine139
   \   0000000E                      ;               // Fall through to label ?Subroutine139

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_128:
   \   00000002   81E0               LD      R30, Z
   \   00000004   E0F0               LDI     R31, 0
   \   00000006                      REQUIRE ?Subroutine108
   \   00000006                      ;               // Fall through to label ?Subroutine108

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine108:
   \   00000000   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000002   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_129:
   \   00000002   8100               LD      R16, Z
   \   00000004   9F01               MUL     R16, R17
   \   00000006   01F0               MOVW    R31:R30, R1:R0
   \   00000008   ....               RJMP    ?Subroutine108

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine85:
   \   00000000   01FB               MOVW    R31:R30, R23:R22
   \   00000002   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_263:
   \   00000004   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_179:
   \   00000006   ....               RCALL   ?Subroutine132
   \                     ??CrossCallReturnLabel_309:
   \   00000008   01F9               MOVW    R31:R30, R19:R18
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine124:
   \   00000000   914D               LD      R20, X+
   \   00000002   915C               LD      R21, X
   \   00000004   9711               SBIW    R27:R26, 1
   \   00000006   01FA               MOVW    R31:R30, R21:R20
   \   00000008   9508               RET
    521          
    522          /*************************************************************************
    523          *
    524          * Build datablock of raw and cal data for ADcard
    525          *
    526          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   ....               RCALL   ?Subroutine116
   \                     ??CrossCallReturnLabel_165:
   \   00000002                      REQUIRE ?Subroutine106
   \   00000002                      REQUIRE ??Subroutine153_0
   \   00000002                      ;               // Fall through to label ??Subroutine153_0

   \                                 In  segment CODE, align 2, keep-with-next
    527          void BuildRData485(char ch, short pointer) {
   \                     BuildRData485:
   \   00000000   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_96:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002   01B9               MOVW    R23:R22, R19:R18
    528              short ntna, i;
    529              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000004   ....               RCALL   ?Subroutine1
    530          
    531              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA & 0xff;
   \                     ??CrossCallReturnLabel_2:
   \   00000006   E706               LDI     R16, 118
   \   00000008   ....               RCALL   ?Subroutine17
    532              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA >> 8;
    533              ntna = UART[ch].TxFirst;                                    /* remember index */
   \                     ??CrossCallReturnLabel_253:
   \   0000000A   904D               LD      R4, X+
   \   0000000C   905C               LD      R5, X
   \   0000000E   ....               RCALL   ?Subroutine150
    534              UART[ch].TxFirst += 2;                                      // two byte length
    535          
    536              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer];
   \                     ??CrossCallReturnLabel_247:
   \   00000010   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_77:
   \   00000012   0F62               ADD     R22, R18
   \   00000014   1F73               ADC     R23, R19
   \   00000016   5E65               SUBI    R22, 229
   \   00000018   4F7E               SBCI    R23, 254
   \   0000001A   01FB               MOVW    R31:R30, R23:R22
   \   0000001C   8100               LD      R16, Z
   \   0000001E   01F9               MOVW    R31:R30, R19:R18
   \   00000020   ....               RCALL   ?Subroutine123
    537              for (i = 0; i < 14; i++) {
   \                     ??CrossCallReturnLabel_259:
   \   00000022   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_85:
   \   00000024   E00E               LDI     R16, 14
   \   00000026   2E60               MOV     R6, R16
    538                  *((short *)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short *)&TData.RS4.Raw[UART[ch].pRxBuffer[pointer]][i]);   // Raw data
   \                     ??BuildRData485_0:
   \   00000028   011C               MOVW    R3:R2, R25:R24
   \   0000002A   0C22               LSL     R2
   \   0000002C   1C33               ROL     R3
   \   0000002E   ....               LDI     R16, LOW((TData + 283))
   \   00000030   2E80               MOV     R8, R16
   \   00000032   ....               LDI     R16, HIGH((TData + 283))
   \   00000034   ....               RCALL   ?Subroutine3
    539                  UART[ch].TxFirst += sizeof(short);
    540                  *((short *)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short *)&TData.RS4.Cal[UART[ch].pRxBuffer[pointer]][i]);   // Cal data
   \                     ??CrossCallReturnLabel_7:
   \   00000036   ....               LDI     R16, LOW((TData + 507))
   \   00000038   2E80               MOV     R8, R16
   \   0000003A   ....               LDI     R16, HIGH((TData + 507))
   \   0000003C   ....               RCALL   ?Subroutine3
    541                  UART[ch].TxFirst += sizeof(short);
    542              }
   \                     ??CrossCallReturnLabel_6:
   \   0000003E   9601               ADIW    R25:R24, 1
   \   00000040   946A               DEC     R6
   \   00000042   F791               BRNE    ??BuildRData485_0
    543          
    544              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   00000044   0D24               ADD     R18, R4
   \   00000046   1D35               ADC     R19, R5
   \   00000048   01F9               MOVW    R31:R30, R19:R18
   \   0000004A   ....               RCALL   ?Subroutine27
    545              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
    546          
    547          }
   \                     ??CrossCallReturnLabel_41:
   \   0000004C                      REQUIRE ?Subroutine145
   \   0000004C                      ;               // Fall through to label ?Subroutine145

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0C82               ADD     R8, R2
   \   00000002   1D03               ADC     R16, R3
   \   00000004   2E90               MOV     R9, R16
   \   00000006   01FB               MOVW    R31:R30, R23:R22
   \   00000008   8100               LD      R16, Z
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14C               LDI     R20, 28
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ....               RCALL   ?Subroutine148
   \                     ??CrossCallReturnLabel_220:
   \   00000012   0E80               ADD     R8, R16
   \   00000014   1E91               ADC     R9, R17
   \   00000016   01F4               MOVW    R31:R30, R9:R8
   \   00000018   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_237:
   \   0000001A   914D               LD      R20, X+
   \   0000001C   915C               LD      R21, X
   \   0000001E   9711               SBIW    R27:R26, 1
   \   00000020   01F9               MOVW    R31:R30, R19:R18
   \   00000022   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_260:
   \   00000024   8311               STD     Z+1, R17
   \   00000026                      REQUIRE ?Subroutine99
   \   00000026                      ;               // Fall through to label ?Subroutine99

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_187:
   \   00000002   01D9               MOVW    R27:R26, R19:R18
   \   00000004   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_147:
   \   00000006   01F9               MOVW    R31:R30, R19:R18
   \   00000008   ....               RJMP    ??Subroutine166_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_300:
   \   00000002   1904               SUB     R16, R4
   \   00000004   ....               RCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_134:
   \   00000006   1984               SUB     R24, R4
   \   00000008   0995               SBC     R25, R5
   \   0000000A                      REQUIRE ?Subroutine103
   \   0000000A                      ;               // Fall through to label ?Subroutine103
    548          
    549          /*************************************************************************
    550          *
    551          * Build setup data package for AN-ZBANA
    552          *
    553          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    554          void BuildANASetup(char ch, short pointer) {
   \                     BuildANASetup:
   \   00000000   ....               RCALL   ?Subroutine2
    555          
    556              short ntna;
    557              UART[ch].RxSendReply = true;                               // flag for answering
    558          
    559              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP & 0xff;
   \                     ??CrossCallReturnLabel_5:
   \   00000002   EB2B               LDI     R18, 187
   \   00000004   ....               RCALL   ?Subroutine41
    560              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP >> 8;
    561              ntna = UART[ch].TxFirst;                                    /* remember index */
    562              UART[ch].TxFirst += 2;                                      // two byte length
    563          
    564              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.PortUsed & 0xff;
   \                     ??CrossCallReturnLabel_57:
   \   00000006   ....               RCALL   ??Subroutine155_0
   \                     ??CrossCallReturnLabel_271:
   \   00000008   01CB               MOVW    R25:R24, R23:R22
   \   0000000A   ....               RCALL   ?Subroutine127
   \                     ??CrossCallReturnLabel_325:
   \   0000000C   9140....           LDS     R20, TData
   \   00000010   ....               RCALL   ?Subroutine65
    565              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.Ana.PortUsed >> 8) & 0xff;
   \                     ??CrossCallReturnLabel_82:
   \   00000012   ....               RCALL   ??Subroutine155_0
   \                     ??CrossCallReturnLabel_272:
   \   00000014   01CB               MOVW    R25:R24, R23:R22
   \   00000016   ....               RCALL   ?Subroutine127
   \                     ??CrossCallReturnLabel_326:
   \   00000018   9140....           LDS     R20, (TData + 1)
   \   0000001C   ....               RCALL   ?Subroutine65
    566          
    567              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??CrossCallReturnLabel_83:
   \   0000001E                      REQUIRE ?Subroutine149
   \   0000001E                      ;               // Fall through to label ?Subroutine149
    568              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
    569          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine65:
   \   00000000   01D8               MOVW    R27:R26, R17:R16
   \   00000002   0FA6               ADD     R26, R22
   \   00000004   1FB7               ADC     R27, R23
   \   00000006   934C               ST      X, R20
   \   00000008   9508               RET
    570          
    571          /*************************************************************************
    572          *
    573          * Build filter data package for AN-ZBANA
    574          *
    575          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine70:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002                      REQUIRE ??Subroutine152_0
   \   00000002                      ;               // Fall through to label ??Subroutine152_0

   \                                 In  segment CODE, align 2, keep-with-next
    576          void BuildANAFilter(char ch, short pointer) {
   \                     BuildANAFilter:
   \   00000000   ....               RCALL   ?Subroutine35
    577          
    578              char port;
    579              short ntna;
    580              UART[ch].RxSendReply = true;                               // flag for answering
   \                     ??CrossCallReturnLabel_46:
   \   00000002   ....               RCALL   ?Subroutine1
    581          
    582              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER & 0xff;
   \                     ??CrossCallReturnLabel_3:
   \   00000004   EC0F               LDI     R16, 207
   \   00000006   ....               RCALL   ?Subroutine17
    583              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER >> 8;
    584              ntna = UART[ch].TxFirst;                                    /* remember index */
   \                     ??CrossCallReturnLabel_254:
   \   00000008   914D               LD      R20, X+
   \   0000000A   915C               LD      R21, X
   \   0000000C   ....               RCALL   ?Subroutine150
    585              UART[ch].TxFirst += 2;                                      // two byte length
    586          
    587              for (port = 0; port < 12; port++) {
   \                     ??CrossCallReturnLabel_248:
   \   0000000E   E060               LDI     R22, 0
   \   00000010   E00C               LDI     R16, 12
    588          #if USE_MODBUS_PROTOCOL == 1
    589                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (char)TData.Ana.Filter[port];
    590          #else
    591                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Filter[port];
   \                     ??BuildANAFilter_0:
   \   00000012   ....               RCALL   ?Subroutine70
    592          #endif
    593              }
   \                     ??CrossCallReturnLabel_252:
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   ....               RCALL   ?Subroutine132
   \                     ??CrossCallReturnLabel_306:
   \   00000018   ....               RCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_60:
   \   0000001A   8112               LDD     R17, Z+2
   \   0000001C   01F9               MOVW    R31:R30, R19:R18
   \   0000001E   0DE0               ADD     R30, R0
   \   00000020   1DF1               ADC     R31, R1
   \   00000022   8310               ST      Z, R17
   \   00000024   9563               INC     R22
   \   00000026   950A               DEC     R16
   \   00000028   F7A1               BRNE    ??BuildANAFilter_0
    594          
    595              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   0000002A   0F24               ADD     R18, R20
   \   0000002C   1F35               ADC     R19, R21
   \   0000002E   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_75:
   \   00000030   1B04               SUB     R16, R20
   \   00000032   ....               RCALL   ?Subroutine86
    596              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \                     ??CrossCallReturnLabel_131:
   \   00000034   1B84               SUB     R24, R20
   \   00000036   0B95               SBC     R25, R21
   \   00000038   ....               RJMP    ?Subroutine143
    597          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine45:
   \   00000000   E0F0               LDI     R31, 0
   \   00000002   2FE6               MOV     R30, R22
   \   00000004   ....               RJMP    ?Subroutine108

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine143:
   \   00000000   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_324:
   \   00000002                      REQUIRE ??Subroutine167_0
   \   00000002                      ;               // Fall through to label ??Subroutine167_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine167_0:
   \   00000000   E0E4               LDI     R30, 4
   \   00000002                      REQUIRE ??Subroutine168_0
   \   00000002                      ;               // Fall through to label ??Subroutine168_0
    598          
    599          /*************************************************************************
    600          *
    601          * Build datablock for External AD (ANA)
    602          *
    603          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    604          void BuildMDataANA(char ch, short pointer) {
   \                     BuildMDataANA:
   \   00000000   ....               RCALL   ?Subroutine35
    605          
    606              short ntna, i;
    607              UART[ch].RxSendReply = true;                               // flag for answering
   \                     ??CrossCallReturnLabel_45:
   \   00000002   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_200:
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006   ....               RCALL   ?Subroutine133
    608          
    609              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA & 0xff;
   \                     ??CrossCallReturnLabel_180:
   \   00000008   01D8               MOVW    R27:R26, R17:R16
   \   0000000A   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_171:
   \   0000000C   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_190:
   \   0000000E   ED29               LDI     R18, 217
   \   00000010   8320               ST      Z, R18
    610              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA >> 8;
   \   00000012   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_191:
   \   00000014   E024               LDI     R18, 4
   \   00000016   8320               ST      Z, R18
    611              ntna = UART[ch].TxFirst;                                    /* remember index */
   \   00000018   ....               RCALL   ?Subroutine129
    612              UART[ch].TxFirst += 2;                                      // two byte length
   \                     ??CrossCallReturnLabel_303:
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   ....               RCALL   ?Subroutine43
    613          
    614              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RestartStatus << 4);    // Add restart status
   \                     ??CrossCallReturnLabel_322:
   \   0000001E   9160....           LDS     R22, RestartStatus
   \   00000022   9562               SWAP    R22
   \   00000024   7F60               ANDI    R22, 0xF0
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   0FE4               ADD     R30, R20
   \   0000002A   1FF5               ADC     R31, R21
   \   0000002C   8360               ST      Z, R22
    615              for (i = 0; i < 12; i++) {
   \   0000002E   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_84:
   \   00000030   E04C               LDI     R20, 12
    616                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Status[i];
   \                     ??BuildMDataANA_0:
   \   00000032   ....               RCALL   ?Subroutine70
   \                     ??CrossCallReturnLabel_251:
   \   00000034   01B0               MOVW    R23:R22, R1:R0
   \   00000036   5F6F               SUBI    R22, 255
   \   00000038   4F7F               SBCI    R23, 255
   \   0000003A   8360               ST      Z, R22
   \   0000003C   8371               STD     Z+1, R23
   \   0000003E   01FC               MOVW    R31:R30, R25:R24
   \   00000040   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_152:
   \   00000042   8556               LDD     R21, Z+14
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   0DE0               ADD     R30, R0
   \   00000048   1DF1               ADC     R31, R1
   \   0000004A   8350               ST      Z, R21
    617                  *((float *)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float *)&TData.Ana.Result[i]);   // ADresult
   \   0000004C   01BC               MOVW    R23:R22, R25:R24
   \   0000004E   0F66               LSL     R22
   \   00000050   1F77               ROL     R23
   \   00000052   0F66               LSL     R22
   \   00000054   1F77               ROL     R23
   \   00000056   01FB               MOVW    R31:R30, R23:R22
   \   00000058   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_153:
   \   0000005A   8C02               LDD     R0, Z+26
   \   0000005C   8C13               LDD     R1, Z+27
   \   0000005E   8C24               LDD     R2, Z+28
   \   00000060   8C35               LDD     R3, Z+29
   \   00000062   ....               RCALL   ?Subroutine72
   \                     ??CrossCallReturnLabel_274:
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   0FE6               ADD     R30, R22
   \   00000068   1FF7               ADC     R31, R23
   \   0000006A   ....               RCALL   ?Subroutine73
    618                  UART[ch].TxFirst += sizeof(float);
   \                     ??CrossCallReturnLabel_91:
   \   0000006C   ....               RCALL   ?Subroutine72
    619              }
   \                     ??CrossCallReturnLabel_275:
   \   0000006E   5F6C               SUBI    R22, 252
   \   00000070   4F7F               SBCI    R23, 255
   \   00000072   8360               ST      Z, R22
   \   00000074   8371               STD     Z+1, R23
   \   00000076   9601               ADIW    R25:R24, 1
   \   00000078   954A               DEC     R20
   \   0000007A   F6D9               BRNE    ??BuildMDataANA_0
    620          
    621              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   0000007C   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_196:
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_297:
   \   00000082   1B02               SUB     R16, R18
   \   00000084   ....               RCALL   ?Subroutine86
    622              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \                     ??CrossCallReturnLabel_130:
   \   00000086   1B82               SUB     R24, R18
   \   00000088   0B93               SBC     R25, R19
   \   0000008A   ....               RJMP    ?Subroutine143
    623          
    624          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine57:
   \   00000000   ....               RCALL   ?Subroutine120
   \                     ??CrossCallReturnLabel_176:
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004                      REQUIRE ?Subroutine135
   \   00000004                      ;               // Fall through to label ?Subroutine135

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine72:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002                      REQUIRE ??Subroutine155_0
   \   00000002                      ;               // Fall through to label ??Subroutine155_0
    625          
    626          /*************************************************************************
    627          *
    628          * Build datablock for Stack status
    629          *
    630          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    631          void BuildStackStatus(char ch, short pointer) {
   \                     BuildStackStatus:
   \   00000000   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_119:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
    632          
    633              short ntna, stack;
    634              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000002   ....               RCALL   ?Subroutine0
    635          
    636              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS & 0xff;
   \                     ??CrossCallReturnLabel_1:
   \   00000004   E707               LDI     R16, 119
   \   00000006   ....               RCALL   ?Subroutine20
    637              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS >> 8;
   \                     ??CrossCallReturnLabel_315:
   \   00000008   E007               LDI     R16, 7
   \   0000000A   ....               RCALL   ?Subroutine31
    638              ntna = UART[ch].TxFirst;                                    /* remember index */
    639              UART[ch].TxFirst += 2;                                      // two byte length
   \                     ??CrossCallReturnLabel_286:
   \   0000000C   ....               RCALL   ?Subroutine99
    640          #if USE_1281_RX_INT_TASK == 0
    641              stack = OS_GetStackSpace(&TCB_USART0);                            // USART 0
    642              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
    643              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
    644              stack = OS_GetStackSpace(&TCB_USART1);                            // USART 1
    645              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
    646              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
    647          #else
    648              stack = OS_GetStackSpace(&TCB_ATMega1281RX_Driver0);                // TCB_ATMega1281RX_Driver0
   \                     ??CrossCallReturnLabel_341:
   \   0000000E   ....               LDI     R16, LOW(TCB_ATMega1281RX_Driver0)
   \   00000010   ....               LDI     R17, (TCB_ATMega1281RX_Driver0) >> 8
   \   00000012   ....               RCALL   ?Subroutine22
    649              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
    650              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
    651              stack = OS_GetStackSpace(&TCB_ATMega1281RX_Driver1);                // TCB_ATMega1281RX_Driver1
   \                     ??CrossCallReturnLabel_25:
   \   00000014   ....               LDI     R16, LOW(TCB_ATMega1281RX_Driver1)
   \   00000016   ....               LDI     R17, (TCB_ATMega1281RX_Driver1) >> 8
   \   00000018   ....               RCALL   ?Subroutine22
    652              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
    653              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
    654          #endif
    655              stack = OS_GetStackSpace(&TCB_WATCHDOG);                            // watchdog
   \                     ??CrossCallReturnLabel_26:
   \   0000001A   ....               LDI     R16, LOW(TCB_WATCHDOG)
   \   0000001C   ....               LDI     R17, (TCB_WATCHDOG) >> 8
   \   0000001E   ....               RCALL   ?Subroutine22
    656              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
    657              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
    658              switch (UnitID) {
   \                     ??CrossCallReturnLabel_27:
   \   00000020   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_207:
   \   00000022   F019               BREQ    ??BuildStackStatus_0
   \   00000024   950A               DEC     R16
   \   00000026   F041               BREQ    ??BuildStackStatus_1
   \   00000028   C00B               RJMP    ??CrossCallReturnLabel_256
    659              case AN_ZB485 :
    660                  stack = OS_GetStackSpace(&TCB_RS485Ctl);                            // RS485 Control
   \                     ??BuildStackStatus_0:
   \   0000002A   ....               LDI     R16, LOW(TCB_RS485Ctl)
   \   0000002C   ....               LDI     R17, (TCB_RS485Ctl) >> 8
   \   0000002E   ....               RCALL   ?Subroutine22
    661                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
    662                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
    663                  stack = OS_GetStackSpace(&TCB_RS485Rec);                            // RS485 receive
   \                     ??CrossCallReturnLabel_28:
   \   00000030   ....               LDI     R16, LOW(TCB_RS485Rec)
   \   00000032   ....               LDI     R17, (TCB_RS485Rec) >> 8
   \   00000034   ....               RCALL   ?Subroutine22
    664                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
    665                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
    666                  break;
   \                     ??CrossCallReturnLabel_29:
   \   00000036   C004               RJMP    ??CrossCallReturnLabel_256
    667              case AN_ZBANA :
    668                  stack = OS_GetStackSpace(&TCB_AD7715);                            // AD handling
   \                     ??BuildStackStatus_1:
   \   00000038   ....               LDI     R16, LOW(TCB_AD7715)
   \   0000003A   ....               LDI     R17, (TCB_AD7715) >> 8
   \   0000003C   ....               RCALL   ?Subroutine22
    669                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
    670                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
    671                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0;
   \                     ??CrossCallReturnLabel_30:
   \   0000003E   ....               RCALL   ?Subroutine14
    672                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0;
    673                  break;
    674              }
    675          
    676              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??CrossCallReturnLabel_256:
   \   00000040   0D84               ADD     R24, R4
   \   00000042   1D95               ADC     R25, R5
   \   00000044   01FC               MOVW    R31:R30, R25:R24
   \   00000046   ....               RCALL   ?Subroutine27
    677              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
    678          
    679          }
   \                     ??CrossCallReturnLabel_40:
   \   00000048   ....               RJMP    ?Subroutine147

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   ........           CALL    OS_GetStackSpace
   \   00000004   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_194:
   \   00000006   8300               ST      Z, R16
   \   00000008   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_195:
   \   0000000A   8310               ST      Z, R17
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine98:
   \   00000000   ....               RCALL   ?Subroutine120
   \                     ??CrossCallReturnLabel_177:
   \   00000002   01FC               MOVW    R31:R30, R25:R24
   \   00000004   ....               RJMP    ?Subroutine135
    680          
    681          //////////////////////////////////////////////////////////////////////////////
    682          // Receiving data to IO module here
    683          /////////////////////////////////////////////////////////////////////////////
    684          
    685          /*************************************************************************
    686          *
    687          * Receive Command to Reset the EEPROM
    688          *
    689          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    690          void GetResetEEPROM(char ch, short pointer) {
   \                     GetResetEEPROM:
    691          
    692              EEPROMReset();
   \   00000000   ........           JMP     EEPROMReset
    693          }
    694          
    695          
    696          /*************************************************************************
    697          *
    698          * Receive Command to go to the bootloader program
    699          *
    700          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    701          void GetGotoBootloader(char ch, short pointer) {
   \                     GetGotoBootloader:
    702          
    703          //    void (*BootApp)(void) = (void(*)())0xF000;
    704          
    705              // 128 -> 1281
    706              /*
    707              while ( (EECR & 1<<EEWE) != 0 ) //chech if EEPROM is ready
    708                  ;
    709              EEARL = (0x0fff & 0xff);
    710              EEARH = (0x0fff >> 8);
    711              EEDR = 0xff;
    712              EECR |= (1<<EEMWE);
    713              EECR |= (1<<EEWE);
    714              while (EECR & (1<<EEWE))
    715                  ;
    716              */
    717              while ((EECR & 1 << EEPE) != 0) //chech if EEPROM is ready
   \                     ??GetGotoBootloader_0:
   \   00000000   99F9               SBIC    0x1F, 0x01
   \   00000002   CFFE               RJMP    ??GetGotoBootloader_0
    718              ;
    719              EEARL = (0x0fff & 0xff);
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   BD01               OUT     0x21, R16
    720              EEARH = (0x0fff >> 8);
   \   00000008   E00F               LDI     R16, 15
   \   0000000A   BD02               OUT     0x22, R16
    721              EEDR = 0xff;
   \   0000000C   EF0F               LDI     R16, 255
   \   0000000E   BD00               OUT     0x20, R16
    722              EECR |= (1 << EEMPE);
   \   00000010   9AFA               SBI     0x1F, 0x02
    723              EECR |= (1 << EEPE);
   \   00000012   9AF9               SBI     0x1F, 0x01
   \   00000014   E108               LDI     R16, 24
   \   00000016   C002               RJMP    ??GetGotoBootloader_1
    724              while (EECR & (1 << EEPE))
    725          
    726                  // 128 -> 1281
    727                  // WDTCR = 0x18;               //Start watchdog to genetate restart
    728                  // WDTCR = 0x08;               //Start watchdog to genetate restart
    729                  WDTCSR = 0x18;               //Start watchdog to genetate restart
   \                     ??GetGotoBootloader_2:
   \   00000018   9300....           STS     _A_WDTCSR, R16
   \                     ??GetGotoBootloader_1:
   \   0000001C   99F9               SBIC    0x1F, 0x01
   \   0000001E   CFFC               RJMP    ??GetGotoBootloader_2
    730              WDTCSR = 0x08;               //Start watchdog to genetate restart
   \   00000020   E008               LDI     R16, 8
   \   00000022   9300....           STS     _A_WDTCSR, R16
    731          }
   \   00000026   9508               RET
   \   00000028                      REQUIRE _A_EECR
   \   00000028                      REQUIRE _A_EEAR
   \   00000028                      REQUIRE _A_EEDR
   \   00000028                      REQUIRE _A_WDTCSR
    732          
    733          /*************************************************************************
    734          *
    735          * Receive EEPROM data
    736          *
    737          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    738          void GetEEPROMData(char ch, short pointer) {
   \                     GetEEPROMData:
   \   00000000   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_118:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
    739          
    740              char channel;
    741              int t0;
    742          
    743              channel = UART[ch].pRxBuffer[pointer];
   \   00000002   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_226:
   \   00000004   01A8               MOVW    R21:R20, R17:R16
   \   00000006   ....               LDI     R16, LOW(UART)
   \   00000008   ....               LDI     R17, (UART) >> 8
   \   0000000A   0F04               ADD     R16, R20
   \   0000000C   1F15               ADC     R17, R21
   \   0000000E   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_198:
   \   00000010   0128               MOVW    R5:R4, R17:R16
   \   00000012   01D8               MOVW    R27:R26, R17:R16
   \   00000014   5EA5               SUBI    R26, 229
   \   00000016   4FBE               SBCI    R27, 254
   \   00000018   01FD               MOVW    R31:R30, R27:R26
   \   0000001A   8120               LD      R18, Z
    744              if ((channel >= 0x80) && (UnitID == 0x01)) { // AN-ZBANA
   \   0000001C   3820               CPI     R18, 128
   \   0000001E   F0F0               BRCS    ??GetEEPROMData_0
   \   00000020   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_62:
   \   00000022   F4E1               BRNE    ??GetEEPROMData_0
    745                  *((float *)&TData.Ana.Offset[channel & 0x0f]) = *((float *)&UART[ch].pRxBuffer[pointer + 1]);  //offset
   \   00000024   ....               LDI     R16, LOW((TData + 98))
   \   00000026   ....               LDI     R17, HIGH((TData + 98))
   \   00000028   2F42               MOV     R20, R18
   \   0000002A   E050               LDI     R21, 0
   \   0000002C   704F               ANDI    R20, 0x0F
   \   0000002E   0F44               LSL     R20
   \   00000030   0F44               LSL     R20
   \   00000032   0F04               ADD     R16, R20
   \   00000034   1F15               ADC     R17, R21
   \   00000036   8141               LDD     R20, Z+1
   \   00000038   8152               LDD     R21, Z+2
   \   0000003A   8163               LDD     R22, Z+3
   \   0000003C   8174               LDD     R23, Z+4
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   8340               ST      Z, R20
   \   00000042   8351               STD     Z+1, R21
   \   00000044   8362               STD     Z+2, R22
   \   00000046   8373               STD     Z+3, R23
    746                  *((float *)&TData.Ana.Gain[channel & 0x0f]) = *((float *)&UART[ch].pRxBuffer[pointer + 5]);  //gain
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8145               LDD     R20, Z+5
   \   0000004C   8156               LDD     R21, Z+6
   \   0000004E   8167               LDD     R22, Z+7
   \   00000050   8570               LDD     R23, Z+8
   \   00000052   01F8               MOVW    R31:R30, R17:R16
   \   00000054   AB40               STD     Z+48, R20
   \   00000056   AB51               STD     Z+49, R21
   \   00000058   AB62               STD     Z+50, R22
   \   0000005A   AB73               STD     Z+51, R23
    747              }
    748              WriteEEPROMBuffer((channel * sizeof(float) * 2), sizeof(float), (char *)&UART[ch].pRxBuffer[pointer + 1]);
   \                     ??GetEEPROMData_0:
   \   0000005C   E008               LDI     R16, 8
   \   0000005E   9F20               MUL     R18, R16
   \   00000060   01D0               MOVW    R27:R26, R1:R0
   \   00000062   01A2               MOVW    R21:R20, R5:R4
   \   00000064   5E44               SUBI    R20, 228
   \   00000066   4F5E               SBCI    R21, 254
   \   00000068   E024               LDI     R18, 4
   \   0000006A   0180               MOVW    R17:R16, R1:R0
   \   0000006C   ....               RCALL   ?Subroutine80
    749              t0 = OS_GetTime();
    750              do {
    751                  OS_Delay(1);
   \                     ??CrossCallReturnLabel_120:
   \   0000006E   ....               RCALL   ?Subroutine8
    752              }while ((OS_GetTime() - t0) < (sizeof(float) * 9) && !EEPWriteOK);  //8.5 ms programming time
   \                     ??CrossCallReturnLabel_10:
   \   00000070   F420               BRCC    ??GetEEPROMData_1
   \   00000072   9100....           LDS     R16, EEPWriteOK
   \   00000076   2300               TST     R16
   \   00000078   F3D1               BREQ    ??CrossCallReturnLabel_120
    753              WriteEEPROMBuffer((channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char *)&UART[ch].pRxBuffer[pointer + 5]);
   \                     ??GetEEPROMData_1:
   \   0000007A   E200               LDI     R16, 32
   \   0000007C   0E40               ADD     R4, R16
   \   0000007E   E001               LDI     R16, 1
   \   00000080   1E50               ADC     R5, R16
   \   00000082   01A2               MOVW    R21:R20, R5:R4
   \   00000084   E024               LDI     R18, 4
   \   00000086   9614               ADIW    R27:R26, 4
   \   00000088   018D               MOVW    R17:R16, R27:R26
   \   0000008A   ....               RCALL   ?Subroutine80
    754              t0 = OS_GetTime();
    755              do {
    756                  OS_Delay(1);
   \                     ??CrossCallReturnLabel_121:
   \   0000008C   ....               RCALL   ?Subroutine8
    757              }while ((OS_GetTime() - t0) < (sizeof(float) * 9) && !EEPWriteOK);
   \                     ??CrossCallReturnLabel_11:
   \   0000008E   F420               BRCC    ??GetEEPROMData_2
   \   00000090   9100....           LDS     R16, EEPWriteOK
   \   00000094   2300               TST     R16
   \   00000096   F3D1               BREQ    ??CrossCallReturnLabel_121
    758          }
   \                     ??GetEEPROMData_2:
   \   00000098   ....               RJMP    ?Subroutine147

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine80:
   \   00000000   ........           CALL    WriteEEPROMBuffer
   \   00000004   ........           CALL    OS__Gettime
   \   00000008   01C8               MOVW    R25:R24, R17:R16
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   E001               LDI     R16, 1
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    OS_Delay
   \   00000008   ........           CALL    OS__Gettime
   \   0000000C   1B08               SUB     R16, R24
   \   0000000E   0B19               SBC     R17, R25
   \   00000010   3204               CPI     R16, 36
   \   00000012   4010               SBCI    R17, 0
   \   00000014   9508               RET
    759          
    760          /*************************************************************************
    761          *
    762          * Receive AN-ZB485 setup
    763          *
    764          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    765          void GetRS4Setup(char ch, short pointer) {
   \                     GetRS4Setup:
    766          
    767              TData.RS4.PortUsed = UART[ch].pRxBuffer[pointer];           // Get the setup
   \   00000000   ....               LDI     R30, LOW((UART + 283))
   \   00000002   ....               LDI     R31, HIGH((UART + 283))
   \   00000004   ....               RCALL   ?Subroutine135
   \                     ??CrossCallReturnLabel_188:
   \   00000006   ....               RCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_13:
   \   00000008   8100               LD      R16, Z
   \   0000000A   9300....           STS     TData, R16
    768              TData.RS4.SensorType[0] = UART[ch].pRxBuffer[pointer + 1];       // Get the sensor type
   \   0000000E   8101               LDD     R16, Z+1
   \   00000010   9300....           STS     (TData + 1), R16
    769              TData.RS4.SensorType[1] = UART[ch].pRxBuffer[pointer + 2];       // Get the sensor type
   \   00000014   8102               LDD     R16, Z+2
   \   00000016   9300....           STS     (TData + 2), R16
    770              WriteEEPROMByte(EEPROM_PORTSETUP, TData.RS4.PortUsed);      // store in EEPROM
   \   0000001A   9120....           LDS     R18, TData
   \   0000001E   ....               RCALL   ?Subroutine6
    771              WriteEEPROMByte(EEPROM_PORTSETUP + 1, TData.RS4.SensorType[0]);
   \                     ??CrossCallReturnLabel_333:
   \   00000020   9120....           LDS     R18, (TData + 1)
   \   00000024   E003               LDI     R16, 3
   \   00000026   ....               RCALL   ??Subroutine163_0
    772              WriteEEPROMByte(EEPROM_PORTSETUP + 2, TData.RS4.SensorType[1]);
   \                     ??CrossCallReturnLabel_331:
   \   00000028   9120....           LDS     R18, (TData + 2)
   \   0000002C   E004               LDI     R16, 4
   \   0000002E   ....               RCALL   ??Subroutine163_0
    773              SetRS4Port();                                               // Set power on ports
   \                     ??CrossCallReturnLabel_330:
   \   00000030   ........           JMP     SetRS4Port
    774          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_230:
   \   00000002   ....               RJMP    ??Subroutine166_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   E002               LDI     R16, 2
   \   00000002                      REQUIRE ??Subroutine163_0
   \   00000002                      ;               // Fall through to label ??Subroutine163_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine163_0:
   \   00000000   E010               LDI     R17, 0
   \   00000002   ........           JMP     WriteEEPROMByte
    775          
    776          /*************************************************************************
    777          *
    778          * Rceive data fo AD card
    779          *
    780          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    781          void GetADData(char ch, short pointer) {
   \                     GetADData:
   \   00000000   ....               RCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_47:
   \   00000002   01C9               MOVW    R25:R24, R19:R18
    782          
    783              char i, pair;
    784          
    785              if (UART[ch].pRxBuffer[pointer] <= 3) {
   \   00000004   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_19:
   \   00000006   ....               LDI     R19, (UART) >> 8
   \   00000008   0F20               ADD     R18, R16
   \   0000000A   1F31               ADC     R19, R17
   \   0000000C   ....               RCALL   ?Subroutine37
   \                     ??CrossCallReturnLabel_50:
   \   0000000E   3064               CPI     R22, 4
   \   00000010   F410               BRCC    ??GetADData_0
    786                  pair = 0;
   \   00000012   E000               LDI     R16, 0
   \   00000014   C001               RJMP    ??GetADData_1
    787              } else {
    788                  pair = 1;
   \                     ??GetADData_0:
   \   00000016   E500               LDI     R16, 80
   \                     ??GetADData_1:
   \   00000018   E010               LDI     R17, 0
    789              }
    790              if (!TData.RS4.ToTargetBuffer[pair][0]) {                                // buffer empty?
   \   0000001A   ....               LDI     R20, LOW(TData)
   \   0000001C   ....               LDI     R21, (TData) >> 8
   \   0000001E   0F40               ADD     R20, R16
   \   00000020   1F51               ADC     R21, R17
   \   00000022   01DA               MOVW    R27:R26, R21:R20
   \   00000024   50AC               SUBI    R26, 12
   \   00000026   4FBB               SBCI    R27, 251
   \   00000028   910C               LD      R16, X
   \   0000002A   2300               TST     R16
   \   0000002C   F4E1               BRNE    ??GetADData_2
    791                  TData.RS4.ToTargetBuffer[pair][0] = true;                            //  Availible data for AD card
   \   0000002E   E001               LDI     R16, 1
   \   00000030   930C               ST      X, R16
    792                  TData.RS4.ToTargetBuffer[pair][1] = UART[ch].pRxBuffer[pointer++];   //  Channel to AD card
   \   00000032   01FD               MOVW    R31:R30, R27:R26
   \   00000034   8361               STD     Z+1, R22
    793                  TData.RS4.ToTargetBuffer[pair][2] = UART[ch].pRxBuffer[pointer++];   // nob in datablock
   \   00000036   9601               ADIW    R25:R24, 1
   \   00000038   01F9               MOVW    R31:R30, R19:R18
   \   0000003A   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_216:
   \   0000003C   8100               LD      R16, Z
   \   0000003E   01FD               MOVW    R31:R30, R27:R26
   \   00000040   8302               STD     Z+2, R16
   \   00000042   9601               ADIW    R25:R24, 1
    794                  for (i = 3; i < TData.RS4.ToTargetBuffer[pair][2] + 3; i++) {
   \   00000044   E003               LDI     R16, 3
   \   00000046   C008               RJMP    ??GetADData_3
    795                      TData.RS4.ToTargetBuffer[pair][i] = UART[ch].pRxBuffer[pointer++];  //Get the buffer
   \                     ??GetADData_4:
   \   00000048   ....               RCALL   ?Subroutine37
    796                  }
   \                     ??CrossCallReturnLabel_51:
   \   0000004A   01FA               MOVW    R31:R30, R21:R20
   \   0000004C   ....               RCALL   ??Subroutine166_0
   \                     ??CrossCallReturnLabel_354:
   \   0000004E   50EC               SUBI    R30, 12
   \   00000050   4FFB               SBCI    R31, 251
   \   00000052   8360               ST      Z, R22
   \   00000054   9601               ADIW    R25:R24, 1
   \   00000056   9503               INC     R16
   \                     ??GetADData_3:
   \   00000058   01FD               MOVW    R31:R30, R27:R26
   \   0000005A   81E2               LDD     R30, Z+2
   \   0000005C   E0F0               LDI     R31, 0
   \   0000005E   9633               ADIW    R31:R30, 3
   \   00000060   170E               CP      R16, R30
   \   00000062   071F               CPC     R17, R31
   \   00000064   F38C               BRLT    ??GetADData_4
    797              }
    798          }
   \                     ??GetADData_2:
   \   00000066   ....               RJMP    ??Subroutine167_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine37:
   \   00000000   01F9               MOVW    R31:R30, R19:R18
   \   00000002   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_218:
   \   00000004   8160               LD      R22, Z
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine115:
   \   00000000   0FE8               ADD     R30, R24
   \   00000002   1FF9               ADC     R31, R25
   \   00000004   5EE5               SUBI    R30, 229
   \   00000006   ....               RJMP    ?Subroutine141
    799          
    800          /*************************************************************************
    801          *
    802          * Receive AN-ZBANA setup
    803          *
    804          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    805          void GetANASetup(char ch, short pointer) {
   \                     GetANASetup:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
    806          
    807              TData.Ana.PortUsed = UART[ch].pRxBuffer[pointer] + (UART[ch].pRxBuffer[pointer + 1] << 8);  //Get the setup
   \   00000004   ....               LDI     R26, LOW((UART + 283))
   \   00000006   ....               LDI     R27, HIGH((UART + 283))
   \   00000008   0FA2               ADD     R26, R18
   \   0000000A   1FB3               ADC     R27, R19
   \   0000000C   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_224:
   \   0000000E   ....               RCALL   ?Subroutine110
   \                     ??CrossCallReturnLabel_156:
   \   00000010   910C               LD      R16, X
   \   00000012   01FD               MOVW    R31:R30, R27:R26
   \   00000014   8111               LDD     R17, Z+1
   \   00000016   ....               LDI     R30, LOW(TData)
   \   00000018   ....               LDI     R31, (TData) >> 8
   \   0000001A   ....               RCALL   ??Subroutine157_0
    808              WriteEEPROMByte(EEPROM_PORTSETUP, UART[ch].pRxBuffer[pointer]);   // store in EEPROM
   \                     ??CrossCallReturnLabel_276:
   \   0000001C   912C               LD      R18, X
   \   0000001E   ....               RCALL   ?Subroutine6
    809              WriteEEPROMByte(EEPROM_PORTSETUP + 1, UART[ch].pRxBuffer[pointer + 1]);
   \                     ??CrossCallReturnLabel_334:
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   8121               LDD     R18, Z+1
   \   00000024   E003               LDI     R16, 3
   \   00000026   ....               RCALL   ??Subroutine163_0
    810              SetAnaPort();                           // set the port on or off
   \                     ??CrossCallReturnLabel_332:
   \   00000028   ........           CALL    SetAnaPort
    811          }
   \   0000002C   ....               RJMP    ?Subroutine134
    812          
    813          /*************************************************************************
    814          *
    815          * Receive AN-ZBANA filter
    816          *
    817          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    818          void GetANAFilter(char ch, short pointer) {
   \                     GetANAFilter:
   \   00000000   011C               MOVW    R3:R2, R25:R24
   \   00000002   2F70               MOV     R23, R16
   \   00000004   01C9               MOVW    R25:R24, R19:R18
    819              char port;
    820          
    821              for (port = 0; port < 12; port++) {
   \   00000006   E060               LDI     R22, 0
   \   00000008   E02C               LDI     R18, 12
   \   0000000A   EF4D               LDI     R20, 253
   \   0000000C   E051               LDI     R21, 1
    822                  TData.Ana.Filter[port] = UART[ch].pRxBuffer[pointer++];  //Get the filter
   \                     ??GetANAFilter_0:
   \   0000000E   ....               LDI     R30, LOW((UART + 283))
   \   00000010   ....               LDI     R31, HIGH((UART + 283))
   \   00000012   ....               RCALL   ?Subroutine40
    823              }
   \                     ??CrossCallReturnLabel_53:
   \   00000014   2F07               MOV     R16, R23
   \   00000016   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_15:
   \   00000018   ....               RCALL   ??Subroutine166_0
   \                     ??CrossCallReturnLabel_349:
   \   0000001A   8130               LD      R19, Z
   \   0000001C   ....               RCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_61:
   \   0000001E   8332               STD     Z+2, R19
   \   00000020   9601               ADIW    R25:R24, 1
   \   00000022   9563               INC     R22
   \   00000024   952A               DEC     R18
   \   00000026   F799               BRNE    ??GetANAFilter_0
    824          }
   \   00000028   01C1               MOVW    R25:R24, R3:R2
   \   0000002A   9508               RET
    825          
    826          
    827          /*************************************************************************
    828          *
    829          *  Receive data on USARTs
    830          *
    831          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    832          void ReceivePacketUart(char ch) {
   \                     ReceivePacketUart:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
    833          
    834              switch (UART[ch].RxState) {                  // check status
   \   00000006   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_201:
   \   00000008   01C8               MOVW    R25:R24, R17:R16
   \   0000000A   5E85               SUBI    R24, 229
   \   0000000C   4F9E               SBCI    R25, 254
   \   0000000E   01D8               MOVW    R27:R26, R17:R16
   \   00000010   54AD               SUBI    R26, 77
   \   00000012   4FBE               SBCI    R27, 254
   \   00000014   01FD               MOVW    R31:R30, R27:R26
   \   00000016   8124               LDD     R18, Z+4
   \   00000018   2322               TST     R18
   \   0000001A   F409               BRNE    $+2+2
   \   0000001C   C078               RJMP    ??ReceivePacketUart_0
   \   0000001E   952A               DEC     R18
   \   00000020   F031               BREQ    ??ReceivePacketUart_1
   \   00000022   952A               DEC     R18
   \   00000024   F1B9               BREQ    ??ReceivePacketUart_2
   \   00000026   5028               SUBI    R18, 8
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C071               RJMP    ??ReceivePacketUart_0
   \   0000002C   C06E               RJMP    ??ReceivePacketUart_3
    835              case SYNC :
    836                  // all functionallity in inerrupt routine
    837                  break;
    838              case HEADER :
    839                  if (UART[ch].RxLast >= 6) {             // receive header
   \                     ??ReceivePacketUart_1:
   \   0000002E   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_292:
   \   00000030   9736               SBIW    R31:R30, 6
   \   00000032   F408               BRCC    $+2+2
   \   00000034   C06C               RJMP    ??ReceivePacketUart_0
    840                      UART[ch].RxPacklen = (UART[ch].pRxBuffer[4] + (UART[ch].pRxBuffer[5] * 256)); // Find length of package
   \   00000036   01FC               MOVW    R31:R30, R25:R24
   \   00000038   8104               LDD     R16, Z+4
   \   0000003A   8115               LDD     R17, Z+5
   \   0000003C   01FD               MOVW    R31:R30, R27:R26
   \   0000003E   8700               STD     Z+8, R16
   \   00000040   8711               STD     Z+9, R17
    841                      if (CalcDSRxChecksum(ch, 6) && (UART[ch].pRxBuffer[0] == (DEVICE_IO + UnitID))) {
   \   00000042   E026               LDI     R18, 6
   \   00000044   E030               LDI     R19, 0
   \   00000046   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_124:
   \   00000048   F409               BRNE    $+2+2
   \   0000004A   C05F               RJMP    ??ReceivePacketUart_3
   \   0000004C   01FC               MOVW    R31:R30, R25:R24
   \   0000004E   8100               LD      R16, Z
   \   00000050   E010               LDI     R17, 0
   \   00000052   91E0....           LDS     R30, UnitID
   \   00000056   E0F0               LDI     R31, 0
   \   00000058   9670               ADIW    R31:R30, 16
   \   0000005A   170E               CP      R16, R30
   \   0000005C   071F               CPC     R17, R31
   \   0000005E   F009               BREQ    $+2+2
   \   00000060   C054               RJMP    ??ReceivePacketUart_3
    842                          // header checksum OK and to me
    843                          if ((UART[ch].RxPacklen < ((short)RXSIZE_UART - UART[ch].RxLast)) && (UART[ch].RxPacklen >= MIN_PACK_LEN)) {    /* chk. header */
   \   00000062   01FD               MOVW    R31:R30, R27:R26
   \   00000064   8520               LDD     R18, Z+8
   \   00000066   8531               LDD     R19, Z+9
   \   00000068   E906               LDI     R16, 150
   \   0000006A   8140               LD      R20, Z
   \   0000006C   8151               LDD     R21, Z+1
   \   0000006E   1B04               SUB     R16, R20
   \   00000070   0B15               SBC     R17, R21
   \   00000072   1720               CP      R18, R16
   \   00000074   0731               CPC     R19, R17
   \   00000076   F008               BRCS    $+2+2
   \   00000078   C048               RJMP    ??ReceivePacketUart_3
   \   0000007A   8580               LDD     R24, Z+8
   \   0000007C   8591               LDD     R25, Z+9
   \   0000007E   9707               SBIW    R25:R24, 7
   \   00000080   F408               BRCC    $+2+2
   \   00000082   C043               RJMP    ??ReceivePacketUart_3
    844                              UART[ch].RxState = RECEIVE;       // Header ok go to data receive state
   \   00000084   E002               LDI     R16, 2
   \   00000086   8304               STD     Z+4, R16
    845                              UART[ch].RxCount = UART[ch].RxLast + 1;                     // Set receive counter
   \   00000088   8180               LD      R24, Z
   \   0000008A   8191               LDD     R25, Z+1
   \   0000008C   9601               ADIW    R25:R24, 1
   \   0000008E   8382               STD     Z+2, R24
   \   00000090   8393               STD     Z+3, R25
   \   00000092   C03D               RJMP    ??ReceivePacketUart_0
    846                          } else {
    847                              GoToSyncUART(ch);                     // go to sync modus for recive
    848                          }
    849                      } else {
    850                          GoToSyncUART(ch);                     // go to sync modus for recive
    851                      }
    852                  }
    853                  break;
    854          
    855              case RECEIVE :
    856                  ++UART[ch].RxCount;
   \                     ??ReceivePacketUart_2:
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   54EB               SUBI    R30, 75
   \   00000098   4FFE               SBCI    R31, 254
   \   0000009A   ....               RCALL   ??Subroutine154_0
   \                     ??CrossCallReturnLabel_270:
   \   0000009C   ....               RCALL   ?Subroutine78
    857                  if (UART[ch].RxCount >= UART[ch].RxPacklen) {
   \                     ??CrossCallReturnLabel_116:
   \   0000009E   01FD               MOVW    R31:R30, R27:R26
   \   000000A0   8122               LDD     R18, Z+2
   \   000000A2   8133               LDD     R19, Z+3
   \   000000A4   8540               LDD     R20, Z+8
   \   000000A6   8551               LDD     R21, Z+9
   \   000000A8   1724               CP      R18, R20
   \   000000AA   0735               CPC     R19, R21
   \   000000AC   F180               BRCS    ??ReceivePacketUart_0
    858                      if ((UART[ch].pRxBuffer[UART[ch].RxPacklen - 1]) == ANPRO10_EOT) {
   \   000000AE   8520               LDD     R18, Z+8
   \   000000B0   8531               LDD     R19, Z+9
   \   000000B2   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_199:
   \   000000B4   5E06               SUBI    R16, 230
   \   000000B6   4F1E               SBCI    R17, 254
   \   000000B8   01F8               MOVW    R31:R30, R17:R16
   \   000000BA   8100               LD      R16, Z
   \   000000BC   3004               CPI     R16, 4
   \   000000BE   F529               BRNE    ??ReceivePacketUart_3
    859                          if (CalcDSRxChecksum(ch, UART[ch].RxPacklen - 2)) {
   \   000000C0   01FD               MOVW    R31:R30, R27:R26
   \   000000C2   8520               LDD     R18, Z+8
   \   000000C4   8531               LDD     R19, Z+9
   \   000000C6   5022               SUBI    R18, 2
   \   000000C8   4030               SBCI    R19, 0
   \   000000CA   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_125:
   \   000000CC   F0F1               BREQ    ??ReceivePacketUart_3
    860                              if ((UART[ch].pRxBuffer[1] == MyAddress()) ||      // message to me? or
    861                                  (UART[ch].pRxBuffer[1] == 0xff)) {            // broadcast
   \   000000CE   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_68:
   \   000000D0   2F10               MOV     R17, R16
   \   000000D2   01FC               MOVW    R31:R30, R25:R24
   \   000000D4   8101               LDD     R16, Z+1
   \   000000D6   1701               CP      R16, R17
   \   000000D8   F011               BREQ    ??ReceivePacketUart_4
   \   000000DA   3F0F               CPI     R16, 255
   \   000000DC   F4B1               BRNE    ??ReceivePacketUart_3
    862                                  hostAddress = UART[ch].pRxBuffer[3];                     // address to sender (host)
   \                     ??ReceivePacketUart_4:
   \   000000DE   8103               LDD     R16, Z+3
   \   000000E0   9300....           STS     hostAddress, R16
    863                                  UART[ch].RxState = HANDLE;                     // Package OK
   \   000000E4   01FD               MOVW    R31:R30, R27:R26
   \   000000E6   E00A               LDI     R16, 10
   \   000000E8   8304               STD     Z+4, R16
    864                                  switch (ch) {
   \   000000EA   2044               TST     R4
   \   000000EC   F019               BREQ    ??ReceivePacketUart_5
   \   000000EE   944A               DEC     R4
   \   000000F0   F021               BREQ    ??ReceivePacketUart_6
   \   000000F2   C00D               RJMP    ??ReceivePacketUart_0
    865                                  case 0:
    866                                      OS_Use(&UARTSEND);
   \                     ??ReceivePacketUart_5:
   \   000000F4   ....               RCALL   ?Subroutine81
    867                                      UsartCheckPackage(0);
   \                     ??CrossCallReturnLabel_123:
   \   000000F6   E000               LDI     R16, 0
   \   000000F8   C002               RJMP    ??ReceivePacketUart_7
    868                                      OS_Unuse(&UARTSEND);
    869                                      break;
    870                                  case 1:
    871                                      OS_Use(&UARTSEND);
   \                     ??ReceivePacketUart_6:
   \   000000FA   ....               RCALL   ?Subroutine81
    872                                      UsartCheckPackage(1);
   \                     ??CrossCallReturnLabel_122:
   \   000000FC   E001               LDI     R16, 1
   \                     ??ReceivePacketUart_7:
   \   000000FE   ....               RCALL   UsartCheckPackage
    873                                      OS_Unuse(&UARTSEND);
   \   00000100   ....               LDI     R16, LOW(UARTSEND)
   \   00000102   ....               LDI     R17, (UARTSEND) >> 8
   \   00000104   ........           CALL    OS_Unuse
    874                                      break;
   \   00000108   C002               RJMP    ??ReceivePacketUart_0
    875                                  }
    876                              } else {
    877                                  GoToSyncUART(ch);                     // go to sync modus for recive
    878                              }
    879                          } else {
    880                              GoToSyncUART(ch);                     // go to sync modus for recive
    881                          }
    882                      } else {
    883                          GoToSyncUART(ch);                     // go to sync modus for recive
    884                      }
    885                  }
    886                  break;
    887              case HANDLE :
    888                  break;
    889              default:
    890                  GoToSyncUART(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart_3:
   \   0000010A   2D04               MOV     R16, R4
   \   0000010C   ....               RCALL   GoToSyncUART
    891                  break;
    892              }                                                           // end switch
    893              if (++UART[ch].RxLast >= RXSIZE_UART) {                     // check pointer
   \                     ??ReceivePacketUart_0:
   \   0000010E   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_293:
   \   00000110   ....               RCALL   ?Subroutine132
   \                     ??CrossCallReturnLabel_308:
   \   00000112   39E6               CPI     R30, 150
   \   00000114   E000               LDI     R16, 0
   \   00000116   40F0               SBCI    R31, 0
   \   00000118   F010               BRCS    ??ReceivePacketUart_8
    894                  UART[ch].RxLast = 0;                                     // reset pointer
   \   0000011A   930D               ST      X+, R16
   \   0000011C   930C               ST      X, R16
    895              }
    896          }
   \                     ??ReceivePacketUart_8:
   \   0000011E   E0E5               LDI     R30, 5
   \   00000120   ........           JMP     ?EPILOGUE_B5_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine82:
   \   00000000   2D04               MOV     R16, R4
   \   00000002   ....               RCALL   CalcDSRxChecksum
   \   00000004   2B01               OR      R16, R17
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine81:
   \   00000000   ....               LDI     R16, LOW(UARTSEND)
   \   00000002   ....               LDI     R17, (UARTSEND) >> 8
   \   00000004   ........           JMP     OS_Use
    897          
    898          
    899          /*************************************************************************
    900          *
    901          * Calculate tx checksum (header and package) using Dallas Semiconductor one-wire CRC
    902          *
    903          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    904          char CalcDSTxChecksum(char ch, unsigned short len) {
   \                     CalcDSTxChecksum:
   \   00000000   ....               RCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_44:
   \   00000002   2E20               MOV     R2, R16
   \   00000004   2FB3               MOV     R27, R19
    905              unsigned short  cnt;
    906              unsigned char   csum;
    907          
    908              csum = 0;
   \   00000006   E060               LDI     R22, 0
    909              for (cnt = 4; cnt < len; cnt++) {
   \   00000008   E084               LDI     R24, 4
   \   0000000A   E090               LDI     R25, 0
   \   0000000C   EF4D               LDI     R20, 253
   \   0000000E   E051               LDI     R21, 1
   \   00000010   ....               LDI     R19, (crc) >> 16
   \   00000012   C00C               RJMP    ??CalcDSTxChecksum_0
    910                  csum = crc[csum ^ UART[ch].pTxBuffer[cnt]];
   \                     ??CalcDSTxChecksum_1:
   \   00000014   2D02               MOV     R16, R2
   \   00000016   ....               RCALL   ?Subroutine10
    911              }
   \                     ??CrossCallReturnLabel_14:
   \   00000018   ....               LDI     R30, LOW(UART)
   \   0000001A   ....               LDI     R31, (UART) >> 8
   \   0000001C   ....               RCALL   ??Subroutine166_0
   \                     ??CrossCallReturnLabel_348:
   \   0000001E   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_52:
   \   00000020   8100               LD      R16, Z
   \   00000022   2760               EOR     R22, R16
   \   00000024   2FE6               MOV     R30, R22
   \   00000026   ....               RCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_58:
   \   00000028   9166               ELPM    R22, Z
   \   0000002A   9601               ADIW    R25:R24, 1
   \                     ??CalcDSTxChecksum_0:
   \   0000002C   1782               CP      R24, R18
   \   0000002E   079B               CPC     R25, R27
   \   00000030   F388               BRCS    ??CalcDSTxChecksum_1
    912              return csum;
   \   00000032   2F06               MOV     R16, R22
   \   00000034   ....               RJMP    ??Subroutine167_0
    913          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine44:
   \   00000000   E0F0               LDI     R31, 0
   \   00000002   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000004   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000006   BF3B               OUT     0x3B, R19
   \   00000008   9508               RET
    914          
    915          /*************************************************************************
    916          *
    917          * Calculate rx packet checksum (header and package) using Dallas Semiconductor one-wire CRC
    918          *
    919          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    920          short CalcDSRxChecksum(char ch, unsigned short len) {
   \                     CalcDSRxChecksum:
   \   00000000   ....               RCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_49:
   \   00000002   01B9               MOVW    R23:R22, R19:R18
    921          
    922              unsigned short  cnt;
    923              unsigned char   csum;
    924          
    925              csum = 0;
   \   00000004   E020               LDI     R18, 0
    926          
    927              for (cnt = 0; cnt < len; cnt++) {
   \   00000006   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_90:
   \   00000008   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_9:
   \   0000000A   ....               LDI     R19, (crc) >> 16
   \   0000000C   C009               RJMP    ??CalcDSRxChecksum_0
    928                  csum = crc[csum ^ UART[ch].pRxBuffer[cnt]];
   \                     ??CalcDSRxChecksum_1:
   \   0000000E   2F02               MOV     R16, R18
   \   00000010   01FD               MOVW    R31:R30, R27:R26
   \   00000012   ....               RCALL   ?Subroutine115
    929              }
   \                     ??CrossCallReturnLabel_217:
   \   00000014   8120               LD      R18, Z
   \   00000016   2702               EOR     R16, R18
   \   00000018   2FE0               MOV     R30, R16
   \   0000001A   ....               RCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_59:
   \   0000001C   9126               ELPM    R18, Z
   \   0000001E   9601               ADIW    R25:R24, 1
   \                     ??CalcDSRxChecksum_0:
   \   00000020   1786               CP      R24, R22
   \   00000022   0797               CPC     R25, R23
   \   00000024   F3A0               BRCS    ??CalcDSRxChecksum_1
    930              if (csum == UART[ch].pRxBuffer[len]) {
   \   00000026   0FA6               ADD     R26, R22
   \   00000028   1FB7               ADC     R27, R23
   \   0000002A   5EA5               SUBI    R26, 229
   \   0000002C   4FBE               SBCI    R27, 254
   \   0000002E   910C               LD      R16, X
   \   00000030   1720               CP      R18, R16
   \   00000032   F411               BRNE    ??CalcDSRxChecksum_2
    931                  return true;
   \   00000034   E001               LDI     R16, 1
   \   00000036   C001               RJMP    ??CalcDSRxChecksum_3
    932              } else {
    933                  return false;
   \                     ??CalcDSRxChecksum_2:
   \   00000038   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum_3:
   \   0000003A   E010               LDI     R17, 0
    934              }
   \   0000003C   ....               RJMP    ??Subroutine167_0
    935          }
    936          
    937          
    938          /*************************************************************************
    939          *
    940          * Goes to sync mode
    941          *
    942          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    943          __monitor void GoToSyncUART(char ch) {
   \                     GoToSyncUART:
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
    944          
    945              if (ch < 2) {
   \   00000004   3002               CPI     R16, 2
   \   00000006   F440               BRCC    ??GoToSyncUART_0
    946                  UART[ch].SyncCnt = 0;  // ready for sync
   \   00000008   ....               LDI     R30, LOW((UART + 433))
   \   0000000A   ....               LDI     R31, HIGH((UART + 433))
   \   0000000C   ....               RCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_12:
   \   0000000E   E000               LDI     R16, 0
   \   00000010   8307               STD     Z+7, R16
    947                  UART[ch].RxState = SYNC;
   \   00000012   8306               STD     Z+6, R16
    948                  UART[ch].RxFirst = 0;
   \   00000014   8300               ST      Z, R16
   \   00000016   8301               STD     Z+1, R16
    949              }
    950          }
   \                     ??GoToSyncUART_0:
   \   00000018   BF2F               OUT     0x3F, R18
   \   0000001A   9508               RET

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart>_0`:
   \   00000000   E803               DW      59395
   \   00000002   01                 DB      1
   \   00000003   ....               DW      (??CheckActionUart_21) /2
   \   00000005   ....               DW      (??CheckActionUart_0) /2
   \   00000007   0A                 DB      0xa
   \   00000008   ....               DW      (??CheckActionUart_3) /2
   \   0000000A   0A                 DB      0xa
   \   0000000B   ....               DW      (??CheckActionUart_4) /2
   \   0000000D   32                 DB      0x32
   \   0000000E   ....               DW      (??CheckActionUart_5) /2
   \   00000010   0A                 DB      0xa
   \   00000011   ....               DW      (??CheckActionUart_6) /2
   \   00000013   0A                 DB      0xa
   \   00000014   ....               DW      (??CheckActionUart_7) /2
   \   00000016   0A                 DB      0xa
   \   00000017   ....               DW      (??CheckActionUart_8) /2
   \   00000019   0A                 DB      0xa
   \   0000001A   ....               DW      (??CheckActionUart_9) /2
   \   0000001C   1E                 DB      0x1e
   \   0000001D   ....               DW      (??CheckActionUart_11) /2
   \   0000001F   14                 DB      0x14
   \   00000020   ....               DW      (??CheckActionUart_10) /2
   \   00000022   28                 DB      0x28
   \   00000023   ....               DW      (??CheckActionUart_16) /2
   \   00000025   0A                 DB      0xa
   \   00000026   ....               DW      (??CheckActionUart_17) /2
   \   00000028   0A                 DB      0xa
   \   00000029   ....               DW      (??CheckActionUart_18) /2
   \   0000002B   0A                 DB      0xa
   \   0000002C   ....               DW      (??CheckActionUart_19) /2
   \   0000002E   0A                 DB      0xa
   \   0000002F   ....               DW      (??CheckActionUart_20) /2
   \   00000031   02FE9E             DB      254,0x2,0x9e
   \   00000034   ....               DW      (??CheckActionUart_2) /2
   \   00000036   FB                 DB      251
   \   00000037   00                 DB      0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      6      2   BuildADEpromdata
        6      2 ?S_EC_MUL_L02
        6      4 ?S_EC_MUL_L02
      4      2   BuildADInt
        4      6 ?S_EC_MUL_L02
      4      2   BuildANAFilter
        4      6 ?S_EC_MUL_L02
      4      2   BuildANASetup
        4      6 ?S_EC_MUL_L02
      8      2   BuildEEPROMData
        8      4   -> ReadEEPROMBuffer
        8      4 ?S_EC_MUL_L02
     10      2   BuildMData485
       10      2 ?S_EC_MUL_L02
      4      2   BuildMDataANA
        4      4 ?S_EC_MUL_L02
     10      2   BuildRData485
       10      4 ?S_EC_MUL_L02
       10      6 ?S_EC_MUL_L02
      4      2   BuildRS4Setup
        4      4 ?S_EC_MUL_L02
      6      2   BuildStackStatus
        6      4   -> OS_GetStackSpace
        6      4 ?S_EC_MUL_L02
      8      2   BuildStatusData
        8      2   -> MyAddress
        8      4 ?S_EC_MUL_L02
      8      2   BuildWHdata
        8      2   -> OS_LeaveRegion
        8      4 ?S_EC_MUL_L02
      4      2   CalcDSRxChecksum
        4      4 ?S_EC_MUL_L02
      4      2   CalcDSTxChecksum
        4      2 ?S_EC_MUL_L02
     10      2   CheckActionUart
       10      2   -> BuildADEpromdata
       10      2   -> BuildADInt
       10      2   -> BuildANAFilter
       10      2   -> BuildANASetup
       10      2   -> BuildEEPROMData
       10      2   -> BuildMData485
       10      2   -> BuildMDataANA
       10      2   -> BuildRData485
       10      2   -> BuildRS4Setup
       10      2   -> BuildStackStatus
       10      2   -> BuildStatusData
       10      2   -> BuildWHdata
       10      2   -> EEPROMReset
       10      2   -> GetADData
       10      2   -> GetANAFilter
       10      2   -> GetANASetup
       10      2   -> GetEEPROMData
       10      2   -> GetGotoBootloader
       10      2   -> GetRS4Setup
       10      2 ?SS_SHR_L02
       10      2 ?SV_SWITCH_L06
       10      2 ?S_EC_MUL_L02
      4      2   GetADData
        4      4 ?S_EC_MUL_L02
      0      2   GetANAFilter
        0      2 ?S_EC_MUL_L02
      2      2   GetANASetup
        2      2   -> SetAnaPort
        2      2   -> WriteEEPROMByte
        2      2 ?S_EC_MUL_L02
      6      2   GetEEPROMData
        6      4   -> OS_Delay
        6      4   -> OS__Gettime
        6      4   -> WriteEEPROMBuffer
        6      2 ?S_EC_MUL_L02
      0      2   GetGotoBootloader
      0      2   GetRS4Setup
        0      2   -> SetRS4Port
        0      2   -> WriteEEPROMByte
        0      4 ?S_EC_MUL_L02
      0      2   GetResetEEPROM
        0      2   -> EEPROMReset
      0      2   GoToSyncUART
        0      4 ?S_EC_MUL_L02
      5      2   ReceivePacketUart
        5      4   -> CalcDSRxChecksum
        5      2   -> GoToSyncUART
        5      2   -> MyAddress
        5      2   -> OS_Unuse
        5      2   -> OS_Use
        5      2   -> UsartCheckPackage
        5      4 ?S_EC_MUL_L02
      0      2   TimoutUSART0
        0      2   -> GoToSyncUART
      0      2   TimoutUSART0On
      0      2   TimoutUSART1
        0      2   -> GoToSyncUART
      0      2   TimoutUSART1On
      2      2   Uart_BuildHeader
        2      2   -> MyAddress
        2      4 ?S_EC_MUL_L02
      7      2   Uart_BuildTail
        7      4   -> CalcDSTxChecksum
        7      2   -> OS_RetriggerTimer
        7      2   -> Uart_BuildHeader
        7      2 ?S_EC_MUL_L02
      7      2   UsartCheckPackage
        7      2   -> CheckActionUart
        7      2   -> GoToSyncUART
        7      2   -> Uart_BuildTail
        7      4 ?S_EC_MUL_L02


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      56  ?<Jumptable for CheckActionUart>_0
       6  ??Subroutine152_0
       2  ??Subroutine153_0
       6  ??Subroutine154_0
       6  ??Subroutine155_0
       2  ??Subroutine156_0
       6  ??Subroutine157_0
       6  ??Subroutine158_0
       2  ??Subroutine159_0
       2  ??Subroutine160_0
       4  ??Subroutine161_0
       6  ??Subroutine162_0
       6  ??Subroutine163_0
       8  ??Subroutine164_0
       6  ??Subroutine165_0
       6  ??Subroutine166_0
       2  ??Subroutine167_0
       4  ??Subroutine168_0
      14  ?Subroutine0
      10  ?Subroutine1
       4  ?Subroutine10
       2  ?Subroutine100
       4  ?Subroutine103
      10  ?Subroutine104
       6  ?Subroutine106
       6  ?Subroutine108
       6  ?Subroutine11
       6  ?Subroutine110
       2  ?Subroutine112
       2  ?Subroutine113
      14  ?Subroutine114
       8  ?Subroutine115
       2  ?Subroutine116
       8  ?Subroutine117
       6  ?Subroutine118
       6  ?Subroutine119
       6  ?Subroutine12
       6  ?Subroutine120
       8  ?Subroutine122
       6  ?Subroutine123
      10  ?Subroutine124
       2  ?Subroutine125
       4  ?Subroutine127
       6  ?Subroutine128
       6  ?Subroutine129
       6  ?Subroutine131
       8  ?Subroutine132
       8  ?Subroutine133
       6  ?Subroutine134
       6  ?Subroutine135
       6  ?Subroutine136
       4  ?Subroutine137
       4  ?Subroutine138
       4  ?Subroutine139
       8  ?Subroutine14
       4  ?Subroutine140
       4  ?Subroutine141
       2  ?Subroutine142
       2  ?Subroutine143
       6  ?Subroutine144
       6  ?Subroutine145
       6  ?Subroutine146
       6  ?Subroutine147
       4  ?Subroutine148
       4  ?Subroutine149
       8  ?Subroutine15
       4  ?Subroutine150
       4  ?Subroutine151
       4  ?Subroutine16
       2  ?Subroutine17
       4  ?Subroutine18
       4  ?Subroutine19
      16  ?Subroutine2
       2  ?Subroutine20
       2  ?Subroutine21
      14  ?Subroutine22
      10  ?Subroutine23
       6  ?Subroutine24
      12  ?Subroutine25
      10  ?Subroutine27
       4  ?Subroutine28
      38  ?Subroutine3
       4  ?Subroutine30
       8  ?Subroutine31
      16  ?Subroutine32
       6  ?Subroutine33
       4  ?Subroutine34
       4  ?Subroutine35
       2  ?Subroutine36
       8  ?Subroutine37
      14  ?Subroutine38
       6  ?Subroutine40
       8  ?Subroutine41
       2  ?Subroutine43
      10  ?Subroutine44
       6  ?Subroutine45
       6  ?Subroutine46
       6  ?Subroutine47
       4  ?Subroutine49
       4  ?Subroutine50
       8  ?Subroutine51
       4  ?Subroutine53
      12  ?Subroutine54
       4  ?Subroutine55
       4  ?Subroutine56
       4  ?Subroutine57
      18  ?Subroutine58
       2  ?Subroutine6
       4  ?Subroutine61
       6  ?Subroutine62
      10  ?Subroutine65
       6  ?Subroutine66
       4  ?Subroutine67
       6  ?Subroutine68
       2  ?Subroutine69
       8  ?Subroutine7
       2  ?Subroutine70
       2  ?Subroutine72
      10  ?Subroutine73
      10  ?Subroutine74
       4  ?Subroutine75
       4  ?Subroutine76
       6  ?Subroutine77
      10  ?Subroutine78
       4  ?Subroutine79
      22  ?Subroutine8
      12  ?Subroutine80
       8  ?Subroutine81
       8  ?Subroutine82
       2  ?Subroutine83
      12  ?Subroutine85
      10  ?Subroutine86
      14  ?Subroutine87
       8  ?Subroutine88
      10  ?Subroutine89
       4  ?Subroutine9
      14  ?Subroutine91
       6  ?Subroutine92
       6  ?Subroutine93
       4  ?Subroutine94
      10  ?Subroutine95
       8  ?Subroutine96
      10  ?Subroutine97
       6  ?Subroutine98
       4  ?Subroutine99
      96  BuildADEpromdata
      54  BuildADInt
      58  BuildANAFilter
      30  BuildANASetup
      78  BuildEEPROMData
     214  BuildMData485
     140  BuildMDataANA
      76  BuildRData485
      72  BuildRS4Setup
      74  BuildStackStatus
     100  BuildStatusData
     274  BuildWHdata
      62  CalcDSRxChecksum
      54  CalcDSTxChecksum
     298  CheckActionUart
     104  GetADData
      44  GetANAFilter
      46  GetANASetup
     154  GetEEPROMData
      40  GetGotoBootloader
      52  GetRS4Setup
       4  GetResetEEPROM
      28  GoToSyncUART
     292  ReceivePacketUart
      22  TimoutUSART0
      12  TimoutUSART0On
      24  TimoutUSART1
      12  TimoutUSART1On
      76  Uart_BuildHeader
     166  Uart_BuildTail
     102  UsartCheckPackage
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_PORTE
       1  _A_UCSR0B
       1  _A_UCSR1B
       1  _A_WDTCSR

 
     8 bytes in segment ABSOLUTE
 3 806 bytes in segment CODE
    56 bytes in segment SWITCH
 
 3 862 bytes of CODE memory
     0 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: 4
