###############################################################################
#
# IAR C/C++ Compiler V8.10.1.1784/W64 for Microchip AVR   02/May/2023  12:58:18
# Copyright 1996-2023 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file           =  D:\S2Prog\IO\ANZB_ATmega1281\Src\init.c
#    Command line          =
#        -f D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\init.r90.rsp
#        (D:\S2Prog\IO\ANZB_ATmega1281\Src\init.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main -D OS_LIBMODE_D -D
#        OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D USE_MODBUS_PROTOCOL=0 -lCN
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\List\Main -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB_ATmega1281\INC\ -I
#        D:\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\ --eeprom_size 4096
#        --clib -On) --dependencies=n
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\init.r90.iar_deps
#    Locale                =  C
#    List file             =
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\List\Main\init.lst
#    Object file           =
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\init.r90
#    Runtime model:           
#      __64bit_doubles     =  disabled
#      __SystemLibrary     =  CLib
#      __architecture      =  *
#      __cpu               =  3
#      __cpu_name          =  ATmega1281
#      __dlib_version      =  clib
#      __enhanced_core     =  enabled
#      __enhanced_core_mul =  enabled
#      __has_elpm          =  true
#      __memory_model      =  2
#      __mex               =  disabled
#      __no_rampd          =  enabled
#      __rt_version        =  3
#      __vtable_memory     =  __nearflash
#
###############################################################################

D:\S2Prog\IO\ANZB_ATmega1281\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xcc
   \   __no_init union <unnamed>#43 volatile __io _A_UBRR1
   \                     _A_UBRR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xca
   \   __no_init union <unnamed>#49 volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   __no_init union <unnamed>#56 volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc4
   \   __no_init union <unnamed>#62 volatile __io _A_UBRR0
   \                     _A_UBRR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xc2
   \   __no_init union <unnamed>#68 volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   __no_init union <unnamed>#72 volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   __no_init union <unnamed>#75 volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb3
   \   __no_init union <unnamed>#102 volatile __io _A_OCR2A
   \                     _A_OCR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb1
   \   __no_init union <unnamed>#108 volatile __io _A_TCCR2B
   \                     _A_TCCR2B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb0
   \   __no_init union <unnamed>#111 volatile __io _A_TCCR2A
   \                     _A_TCCR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7c
   \   __no_init union <unnamed>#240 volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a
   \   __no_init union <unnamed>#246 volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x75
   \   __no_init union <unnamed>#255 volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x74
   \   __no_init union <unnamed>#258 volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   __no_init union <unnamed>#288 volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x69
   \   __no_init union <unnamed>#291 volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   __no_init union <unnamed>#309 volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   __no_init union <unnamed>#327 volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   __no_init union <unnamed>#330 volatile __io _A_MCUSR
   \                     _A_MCUSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   __no_init union <unnamed>#391 volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   __no_init union <unnamed>#418 volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x33
   \   __no_init union <unnamed>#421 volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   __no_init union <unnamed>#427 volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   __no_init union <unnamed>#430 volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   __no_init union <unnamed>#436 volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2d
   \   __no_init union <unnamed>#439 volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   __no_init union <unnamed>#445 volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   __no_init union <unnamed>#448 volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   __no_init union <unnamed>#454 volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27
   \   __no_init union <unnamed>#457 volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x25
   \   __no_init union <unnamed>#463 volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x24
   \   __no_init union <unnamed>#466 volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   __no_init union <unnamed>#469 volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x22
   \   __no_init union <unnamed>#472 volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x21
   \   __no_init union <unnamed>#475 volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          /*
     14          **===========================================================================
     15          ** Init the system according to board type
     16          **===========================================================================
     17          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     18          void InitSystem(void) {
   \                     InitSystem:
     19          
     20              DDRB    =  0x00 ;      // Port B data direction, bit 0, 4-7 out
   \   00000000   E000               LDI     R16, 0
   \   00000002   B904               OUT     0x04, R16
     21          //    PORTB   =  0xc;
     22              UnitID  = (PINB >> 2)& 0x03;       //get the unit ID
   \   00000004   B103               IN      R16, 0x03
   \   00000006   9506               LSR     R16
   \   00000008   9506               LSR     R16
   \   0000000A   7003               ANDI    R16, 0x03
   \   0000000C   9300....           STS     UnitID, R16
     23          #if (OS_UART == 0)
     24              UnitID = 0x00; //AStmark  for test
     25          #endif
     26          
     27              Init_CPU();                         // init all processes
   \   00000010   ....               RCALL   Init_CPU
     28              Init_IO();
   \   00000012   ....               RCALL   Init_IO
     29              Init_TMR() ;
   \   00000014   ....               RCALL   Init_TMR
     30          #if (OS_UART != 0)
     31              Init_USART(0, 38400) ;              // 
   \   00000016   E040               LDI     R20, 0
   \   00000018   E956               LDI     R21, 150
   \   0000001A   E060               LDI     R22, 0
   \   0000001C   E070               LDI     R23, 0
   \   0000001E   E000               LDI     R16, 0
   \   00000020   ....               RCALL   Init_USART
     32          #endif
     33              Init_USART(1, 38400) ;              //    
   \   00000022   E040               LDI     R20, 0
   \   00000024   E956               LDI     R21, 150
   \   00000026   E060               LDI     R22, 0
   \   00000028   E070               LDI     R23, 0
   \   0000002A   E001               LDI     R16, 1
   \   0000002C   ....               RCALL   Init_USART
     34              Init_AD();
   \   0000002E   ....               RCALL   Init_AD
     35              Init_Values();                      // init the values in the system
   \   00000030   ....               RCALL   Init_Values
     36          
     37              // 128 -> 1281
     38              // ADCSR |= 0x40 ;                     //start the AD convertion
     39              ADCSRA |= 0x40 ;
   \   00000032   9100007A           LDS     R16, 122
   \   00000036   6400               ORI     R16, 0x40
   \   00000038   9300007A           STS     122, R16
     40          }
   \   0000003C   9508               RET
   \   0000003E                      REQUIRE _A_DDRB
   \   0000003E                      REQUIRE _A_PINB
   \   0000003E                      REQUIRE _A_ADCSRA
     41          
     42          /*
     43          **===========================================================================
     44          ** Init the CPU related registers
     45          **===========================================================================
     46          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     47          void Init_CPU( void ) {
   \                     Init_CPU:
     48          
     49              __disable_interrupt();
   \   00000000   94F8               CLI
     50          
     51              /*--- Configure CPU and interrupts ---*/
     52              switch (UnitID) {
   \   00000002   9100....           LDS     R16, UnitID
   \   00000006   5000               SUBI    R16, 0
   \   00000008   F019               BREQ    ??Init_CPU_0
   \   0000000A   950A               DEC     R16
   \   0000000C   F089               BREQ    ??Init_CPU_1
   \   0000000E   C01F               RJMP    ??Init_CPU_2
     53              case AN_ZB485:                  // AN-ZB485 
     54                  MCUCR = 0xc0 ;        // MCU control register  External Ram + wait state
   \                     ??Init_CPU_0:
   \   00000010   EC00               LDI     R16, 192
   \   00000012   BF05               OUT     0x35, R16
     55                  EIMSK = 0x00 ;        // External interrupt mask register, all off
   \   00000014   E000               LDI     R16, 0
   \   00000016   BB0D               OUT     0x1D, R16
     56                  EICRA = 0xAf ;        // External interrupt control register, 0,1 raising, rest faling
   \   00000018   EA0F               LDI     R16, 175
   \   0000001A   93000069           STS     105, R16
     57                  EICRB = 0xAA ;        // External interrupt control register 
   \   0000001E   EA0A               LDI     R16, 170
   \   00000020   9300006A           STS     106, R16
     58                  EIMSK = 0x03 ;        // External interrupt mask register, int 0 and 1 on
   \   00000024   E003               LDI     R16, 3
   \   00000026   BB0D               OUT     0x1D, R16
     59                  XMCRA = 0x80; // maximum wait states
   \   00000028   E800               LDI     R16, 128
   \   0000002A   93000074           STS     116, R16
     60                  break;
   \   0000002E   C00F               RJMP    ??Init_CPU_2
     61              case AN_ZBANA:                  // AN-ZBANA
     62                  MCUCR = 0x00 ;        // MCU control register wait state
   \                     ??Init_CPU_1:
   \   00000030   E000               LDI     R16, 0
   \   00000032   BF05               OUT     0x35, R16
     63                  EIMSK = 0x00 ;        // External interrupt mask register , all off
   \   00000034   E000               LDI     R16, 0
   \   00000036   BB0D               OUT     0x1D, R16
     64                  EICRA = 0xAA ;        // External interrupt control register, o on faling edge
   \   00000038   EA0A               LDI     R16, 170
   \   0000003A   93000069           STS     105, R16
     65                  EICRB = 0xAA ;        // External interrupt control register 
   \   0000003E   EA0A               LDI     R16, 170
   \   00000040   9300006A           STS     106, R16
     66                  EIMSK = 0x01 ;        // External interrupt mask register, int 0 on
   \   00000044   E001               LDI     R16, 1
   \   00000046   BB0D               OUT     0x1D, R16
     67                  XMCRA = 0x00 ; // maximum wait states
   \   00000048   E000               LDI     R16, 0
   \   0000004A   93000074           STS     116, R16
     68                  break;
     69              }
     70              // XMCRA = 0x00; // maximum wait states
     71              XMCRB = 0x07 ;       // Full portC + bus keeper
   \                     ??Init_CPU_2:
   \   0000004E   E007               LDI     R16, 7
   \   00000050   93000075           STS     117, R16
     72              //
     73              // hkim
     74              // are you fucking out of mind?
     75              // why do you enable global interrupt here?
     76              //
     77              // SREG = 0x80;  // global interrupt
     78          
     79              //
     80              // 128 -> 1281
     81              // No XDIV in 1281. CLKPR instead.
     82              // Anyway No need to do this.
     83              //XDIV  = 0x00 ;     // Init valuse used 0x00
     84          
     85              // 128 -> 1281
     86              // register name change
     87              // RestartStatus = MCUCSR;       // Remember reset source
     88              RestartStatus = MCUSR;
   \   00000054   B704               IN      R16, 0x34
   \   00000056   9300....           STS     RestartStatus, R16
     89              MCUSR = 0x00; // and reset
   \   0000005A   E000               LDI     R16, 0
   \   0000005C   BF04               OUT     0x34, R16
     90              /*--- Initialize buffer ---*/
     91              WriteCount = 0;
   \   0000005E   E000               LDI     R16, 0
   \   00000060   9300....           STS     WriteCount, R16
     92          
     93          }
   \   00000064   9508               RET
   \   00000066                      REQUIRE _A_MCUCR
   \   00000066                      REQUIRE _A_EIMSK
   \   00000066                      REQUIRE _A_EICRA
   \   00000066                      REQUIRE _A_EICRB
   \   00000066                      REQUIRE _A_XMCRA
   \   00000066                      REQUIRE _A_XMCRB
   \   00000066                      REQUIRE _A_MCUSR
     94          
     95          /*
     96          **===========================================================================
     97          ** Init the watchdog registers
     98          **===========================================================================
     99          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    100          __monitor void Init_Watchdog( void ) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
    101          
    102              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
    103              // 128 -> 1281
    104              // WDTCR = 0x0f;
    105              WDTCSR = 0x0f;
   \   00000006   E00F               LDI     R16, 15
   \   00000008   93000060           STS     96, R16
    106              asm("WDR");                             // kick the dog!!
   \   0000000C   95A8               WDR
    107          
    108          }
   \   0000000E   BF1F               OUT     0x3F, R17
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_WDTCSR
    109          
    110          /*
    111          **===========================================================================
    112          ** Init the IO related registers
    113          **===========================================================================
    114          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    115          void Init_IO( void ) {
   \                     Init_IO:
    116          
    117              /*--- Initialize the data registers, output value and input pullup ---*/
    118              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   5000               SUBI    R16, 0
   \   00000006   F019               BREQ    ??Init_IO_0
   \   00000008   950A               DEC     R16
   \   0000000A   F0F1               BREQ    ??Init_IO_1
   \   0000000C   9508               RET
    119              case AN_ZB485:                  // AN-ZB485  
    120                  DDRA   =  0xff ;      // Port A data direction (out), external bus
   \                     ??Init_IO_0:
   \   0000000E   EF0F               LDI     R16, 255
   \   00000010   B901               OUT     0x01, R16
    121                  PORTA  =  0x00 ;      // Port A data
   \   00000012   E000               LDI     R16, 0
   \   00000014   B902               OUT     0x02, R16
    122                  DDRB   =  0x10 ;      // Port B data direction, bit 0, 4-7 out
   \   00000016   E100               LDI     R16, 16
   \   00000018   B904               OUT     0x04, R16
    123                  PORTB  =  0x00 ;      // Port B data   
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   B905               OUT     0x05, R16
    124                  DDRC   =  0xff ;      // Port C data direction, all out
   \   0000001E   EF0F               LDI     R16, 255
   \   00000020   B907               OUT     0x07, R16
    125                  PORTC  =  0x00 ;      // Port C data
   \   00000022   E000               LDI     R16, 0
   \   00000024   B908               OUT     0x08, R16
    126                  DDRD   =  0x00 ;      // Port D data direction, all in except output to osc and txd
   \   00000026   E000               LDI     R16, 0
   \   00000028   B90A               OUT     0x0A, R16
    127                  PORTD  =  0xff ;      // Port D data pullup on int fro AD
   \   0000002A   EF0F               LDI     R16, 255
   \   0000002C   B90B               OUT     0x0B, R16
    128                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   0000002E   EF0E               LDI     R16, 254
   \   00000030   B90D               OUT     0x0D, R16
    129                  PORTE  =  0xf0 ;      // Port E data 
   \   00000032   EF00               LDI     R16, 240
   \   00000034   B90E               OUT     0x0E, R16
    130                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000036   E000               LDI     R16, 0
   \   00000038   BB00               OUT     0x10, R16
    131                  PORTF  =  0x00 ;      // Port F data 
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   BB01               OUT     0x11, R16
    132                  DDRG   =  0x07 ;      // Port G data direction, port 1,2,3 out
   \   0000003E   E007               LDI     R16, 7
   \   00000040   BB03               OUT     0x13, R16
    133                  PORTG  =  0x03 ;      // Port G data 
   \   00000042   E003               LDI     R16, 3
   \   00000044   BB04               OUT     0x14, R16
    134                  break;
   \   00000046   9508               RET
    135              case AN_ZBANA:                  // AN-ZBANA
    136                  DDRA   =  0x00 ;      // Port A data direction in (not used)
   \                     ??Init_IO_1:
   \   00000048   E000               LDI     R16, 0
   \   0000004A   B901               OUT     0x01, R16
    137                  PORTA  =  0x00 ;      // Port A data
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   B902               OUT     0x02, R16
    138                  DDRB   =  0xF1 ;      // Port B data direction, bit 0, 4-7 out
   \   00000050   EF01               LDI     R16, 241
   \   00000052   B904               OUT     0x04, R16
    139                  PORTB  =  0x00 ;      // Port B data   
   \   00000054   E000               LDI     R16, 0
   \   00000056   B905               OUT     0x05, R16
    140                  DDRC   =  0xFF ;      // Port C data direction, all out
   \   00000058   EF0F               LDI     R16, 255
   \   0000005A   B907               OUT     0x07, R16
    141                  PORTC  =  0x00 ;      // Port C data
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   B908               OUT     0x08, R16
    142                  DDRD   =  0x02 ;      // Port D data direction, all in except output to osc and txd
   \   00000060   E002               LDI     R16, 2
   \   00000062   B90A               OUT     0x0A, R16
    143                  PORTD  =  0xf1 ;      // Port D data pullup on int fro AD
   \   00000064   EF01               LDI     R16, 241
   \   00000066   B90B               OUT     0x0B, R16
    144                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   00000068   EF0E               LDI     R16, 254
   \   0000006A   B90D               OUT     0x0D, R16
    145                  PORTE  =  0x00 ;      // Port E data 
   \   0000006C   E000               LDI     R16, 0
   \   0000006E   B90E               OUT     0x0E, R16
    146                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000070   E000               LDI     R16, 0
   \   00000072   BB00               OUT     0x10, R16
    147                  PORTF  =  0x00 ;      // Port F data 
   \   00000074   E000               LDI     R16, 0
   \   00000076   BB01               OUT     0x11, R16
    148                  DDRG   =  0x10 ;      // Port G data direction, bit 5 out
   \   00000078   E100               LDI     R16, 16
   \   0000007A   BB03               OUT     0x13, R16
    149                  PORTG  =  0x00 ;      // Port G data 
   \   0000007C   E000               LDI     R16, 0
   \   0000007E   BB04               OUT     0x14, R16
    150                  break;
    151              default:
    152                  break;
    153              }    
    154          }
   \   00000080   9508               RET
   \   00000082                      REQUIRE _A_DDRA
   \   00000082                      REQUIRE _A_PORTA
   \   00000082                      REQUIRE _A_DDRB
   \   00000082                      REQUIRE _A_PORTB
   \   00000082                      REQUIRE _A_DDRC
   \   00000082                      REQUIRE _A_PORTC
   \   00000082                      REQUIRE _A_DDRD
   \   00000082                      REQUIRE _A_PORTD
   \   00000082                      REQUIRE _A_DDRE
   \   00000082                      REQUIRE _A_PORTE
   \   00000082                      REQUIRE _A_DDRF
   \   00000082                      REQUIRE _A_PORTF
   \   00000082                      REQUIRE _A_DDRG
   \   00000082                      REQUIRE _A_PORTG
    155          
    156          /*
    157          **===========================================================================
    158          ** Init the timer related registers
    159          **===========================================================================
    160          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    161          void Init_TMR( void ) {
   \                     Init_TMR:
    162              /*--- Timer control (disable clock inputs) ---*/
    163          
    164              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   5000               SUBI    R16, 0
   \   00000006   F019               BREQ    ??Init_TMR_0
   \   00000008   950A               DEC     R16
   \   0000000A   F059               BREQ    ??Init_TMR_1
   \   0000000C   9508               RET
    165              case AN_ZB485:                  // AN-ZB485
    166                  // 128 -> 1281
    167                  // TIM0 and TIM2 are swapped in 1281.
    168                  // Registers are completely changed.
    169                  // TCCR0   =  0x99 ;      // Timer control register 0
    170                  // OCR0    =  3;         // Timer output compare register 0, 2MHZ //16MHz xtal
    171                  //
    172                  // TCCR2A : 0 1 0 0 - - 1 0
    173                  // TCCR2B : 1 0 - - 0 0 0 1
    174                  //
    175                  // COM2A1 COM2A0 : 0 1
    176                  // COM2B1 COM2B0 : 0 0
    177                  // WGM21 WGM20   : 1 0
    178                  // FOC2A : 1, FOR2B : 0, WGM22 : 0, CS2/1/0 : 0 0 1
    179                  //
    180                  // COM2A : Toggle
    181                  // WGM : CTC
    182                  // Clock Scale: 1
    183          
    184                  TCCR2A = 0x42;
   \                     ??Init_TMR_0:
   \   0000000E   E402               LDI     R16, 66
   \   00000010   930000B0           STS     176, R16
    185                  TCCR2B = 0x81;
   \   00000014   E801               LDI     R16, 129
   \   00000016   930000B1           STS     177, R16
    186                  OCR2A = 3;
   \   0000001A   E003               LDI     R16, 3
   \   0000001C   930000B3           STS     179, R16
    187                  break;
   \   00000020   9508               RET
    188              case AN_ZBANA:                  // AN-ZBANA
    189                  // 128 -> 1281
    190                  // TCCR0   =  0x99 ;      // Timer control register 0
    191                  // OCR0    =  7 ;         // Timer output compare register 0, 1MHZ //16MHz xtal
    192                  TCCR2A = 0x42;
   \                     ??Init_TMR_1:
   \   00000022   E402               LDI     R16, 66
   \   00000024   930000B0           STS     176, R16
    193                  TCCR2B = 0x81;
   \   00000028   E801               LDI     R16, 129
   \   0000002A   930000B1           STS     177, R16
    194                  OCR2A = 7;
   \   0000002E   E007               LDI     R16, 7
   \   00000030   930000B3           STS     179, R16
    195                  break;
    196              default:
    197                  break;
    198              }
    199          
    200          } 
   \   00000034   9508               RET
   \   00000036                      REQUIRE _A_TCCR2A
   \   00000036                      REQUIRE _A_TCCR2B
   \   00000036                      REQUIRE _A_OCR2A
    201          
    202          /*
    203          **===========================================================================
    204          ** Init the USARTs registers
    205          **===========================================================================
    206          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    207          void Init_USART( char channel, unsigned long baud ) {
   \                     Init_USART:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01CA               MOVW    R25:R24, R21:R20
   \   00000008   01DB               MOVW    R27:R26, R23:R22
    208          
    209          
    210              /*--- Configure UART data block ---*/
    211              UART[channel].TxFirst   = 0x00;
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E12A               LDI     R18, 26
   \   00000010   9E42               MUL     R4, R18
   \   00000012   01F0               MOVW    R31:R30, R1:R0
   \   00000014   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000018   8302               STD     Z+2, R16
   \   0000001A   8313               STD     Z+3, R17
    212              UART[channel].TxLast    = 0x00;
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E12A               LDI     R18, 26
   \   00000022   9E42               MUL     R4, R18
   \   00000024   01F0               MOVW    R31:R30, R1:R0
   \   00000026   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002A   8304               STD     Z+4, R16
   \   0000002C   8315               STD     Z+5, R17
    213              UART[channel].TxCount   = 0x00;
   \   0000002E   E000               LDI     R16, 0
   \   00000030   E010               LDI     R17, 0
   \   00000032   E12A               LDI     R18, 26
   \   00000034   9E42               MUL     R4, R18
   \   00000036   01F0               MOVW    R31:R30, R1:R0
   \   00000038   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000003C   8306               STD     Z+6, R16
   \   0000003E   8317               STD     Z+7, R17
    214              UART[channel].RxFirst   = 0x00;
   \   00000040   E000               LDI     R16, 0
   \   00000042   E010               LDI     R17, 0
   \   00000044   E12A               LDI     R18, 26
   \   00000046   9E42               MUL     R4, R18
   \   00000048   01F0               MOVW    R31:R30, R1:R0
   \   0000004A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000004C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000004E   8704               STD     Z+12, R16
   \   00000050   8715               STD     Z+13, R17
    215              UART[channel].RxLast    = 0x00;
   \   00000052   E000               LDI     R16, 0
   \   00000054   E010               LDI     R17, 0
   \   00000056   E12A               LDI     R18, 26
   \   00000058   9E42               MUL     R4, R18
   \   0000005A   01F0               MOVW    R31:R30, R1:R0
   \   0000005C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000060   8706               STD     Z+14, R16
   \   00000062   8717               STD     Z+15, R17
    216              UART[channel].RxCount   = 0x00;
   \   00000064   E000               LDI     R16, 0
   \   00000066   E010               LDI     R17, 0
   \   00000068   E12A               LDI     R18, 26
   \   0000006A   9E42               MUL     R4, R18
   \   0000006C   01F0               MOVW    R31:R30, R1:R0
   \   0000006E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000070   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000072   8B00               STD     Z+16, R16
   \   00000074   8B11               STD     Z+17, R17
    217              UART[channel].RxState   = SYNC;
   \   00000076   E10A               LDI     R16, 26
   \   00000078   9E40               MUL     R4, R16
   \   0000007A   01F0               MOVW    R31:R30, R1:R0
   \   0000007C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000080   E000               LDI     R16, 0
   \   00000082   8B02               STD     Z+18, R16
    218              UART[channel].SyncCnt   = 0 ;
   \   00000084   E10A               LDI     R16, 26
   \   00000086   9E40               MUL     R4, R16
   \   00000088   01F0               MOVW    R31:R30, R1:R0
   \   0000008A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000008C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000008E   E000               LDI     R16, 0
   \   00000090   8B03               STD     Z+19, R16
    219              UART[channel].TxStatus  = 0x00;
   \   00000092   E10A               LDI     R16, 26
   \   00000094   9E40               MUL     R4, R16
   \   00000096   01F0               MOVW    R31:R30, R1:R0
   \   00000098   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009C   E000               LDI     R16, 0
   \   0000009E   8700               STD     Z+8, R16
    220          
    221              switch (channel) {
   \   000000A0   2D04               MOV     R16, R4
   \   000000A2   5000               SUBI    R16, 0
   \   000000A4   F019               BREQ    ??Init_USART_0
   \   000000A6   950A               DEC     R16
   \   000000A8   F1F9               BREQ    ??Init_USART_1
   \   000000AA   C07B               RJMP    ??Init_USART_2
    222              case 0x00 :          
    223                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_0:
   \   000000AC   EF0A               LDI     R16, 250
   \   000000AE   E010               LDI     R17, 0
   \   000000B0   E12A               LDI     R18, 26
   \   000000B2   9E42               MUL     R4, R18
   \   000000B4   01F0               MOVW    R31:R30, R1:R0
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8B04               STD     Z+20, R16
   \   000000BC   8B15               STD     Z+21, R17
    224                  UART[channel].pTxBuffer = TxBufferCh0;        
   \   000000BE   ....               LDI     R16, LOW(TxBufferCh0)
   \   000000C0   ....               LDI     R17, (TxBufferCh0) >> 8
   \   000000C2   E12A               LDI     R18, 26
   \   000000C4   9E42               MUL     R4, R18
   \   000000C6   01F0               MOVW    R31:R30, R1:R0
   \   000000C8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000CC   8300               ST      Z, R16
   \   000000CE   8311               STD     Z+1, R17
    225                  UART[channel].pRxBuffer = RxBufferCh0;        
   \   000000D0   ....               LDI     R16, LOW(RxBufferCh0)
   \   000000D2   ....               LDI     R17, (RxBufferCh0) >> 8
   \   000000D4   E12A               LDI     R18, 26
   \   000000D6   9E42               MUL     R4, R18
   \   000000D8   01F0               MOVW    R31:R30, R1:R0
   \   000000DA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000DC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000DE   8702               STD     Z+10, R16
   \   000000E0   8713               STD     Z+11, R17
    226                  UCSR0A  = 0x00; 
   \   000000E2   E000               LDI     R16, 0
   \   000000E4   930000C0           STS     192, R16
    227                  UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   000000E8   01AC               MOVW    R21:R20, R25:R24
   \   000000EA   01BD               MOVW    R23:R22, R27:R26
   \   000000EC   E400               LDI     R16, 64
   \   000000EE   E412               LDI     R17, 66
   \   000000F0   E02F               LDI     R18, 15
   \   000000F2   E030               LDI     R19, 0
   \   000000F4   ........           CALL    ?UL_DIVMOD_L03
   \   000000F8   950A               DEC     R16
   \   000000FA   930000C4           STS     196, R16
    228                  UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   000000FE   01AC               MOVW    R21:R20, R25:R24
   \   00000100   01BD               MOVW    R23:R22, R27:R26
   \   00000102   E400               LDI     R16, 64
   \   00000104   E412               LDI     R17, 66
   \   00000106   E02F               LDI     R18, 15
   \   00000108   E030               LDI     R19, 0
   \   0000010A   ........           CALL    ?UL_DIVMOD_L03
   \   0000010E   5001               SUBI    R16, 1
   \   00000110   4010               SBCI    R17, 0
   \   00000112   2F01               MOV     R16, R17
   \   00000114   E010               LDI     R17, 0
   \   00000116   930000C5           STS     197, R16
    229                  // why the fuck do you enalbe UDRE here you stupid fucktard!!! -hkim
    230                  // UCSR0B = 0xb8; /* tx/ rx enable, int udre/rxon */
    231                  UCSR0B  = 0x98;       /* tx/ rx enable, int udre/rxon */
   \   0000011A   E908               LDI     R16, 152
   \   0000011C   930000C1           STS     193, R16
    232                  UCSR0C  = 0x06;       /* n,8,1 */
   \   00000120   E006               LDI     R16, 6
   \   00000122   930000C2           STS     194, R16
    233                  break;
   \   00000126   C03D               RJMP    ??Init_USART_2
    234              case 0x01 :
    235                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_1:
   \   00000128   EF0A               LDI     R16, 250
   \   0000012A   E010               LDI     R17, 0
   \   0000012C   E12A               LDI     R18, 26
   \   0000012E   9E42               MUL     R4, R18
   \   00000130   01F0               MOVW    R31:R30, R1:R0
   \   00000132   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000134   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000136   8B04               STD     Z+20, R16
   \   00000138   8B15               STD     Z+21, R17
    236                  UART[channel].pTxBuffer = TxBufferCh1;
   \   0000013A   ....               LDI     R16, LOW(TxBufferCh1)
   \   0000013C   ....               LDI     R17, (TxBufferCh1) >> 8
   \   0000013E   E12A               LDI     R18, 26
   \   00000140   9E42               MUL     R4, R18
   \   00000142   01F0               MOVW    R31:R30, R1:R0
   \   00000144   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000146   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000148   8300               ST      Z, R16
   \   0000014A   8311               STD     Z+1, R17
    237                  UART[channel].pRxBuffer = RxBufferCh1;
   \   0000014C   ....               LDI     R16, LOW(RxBufferCh1)
   \   0000014E   ....               LDI     R17, (RxBufferCh1) >> 8
   \   00000150   E12A               LDI     R18, 26
   \   00000152   9E42               MUL     R4, R18
   \   00000154   01F0               MOVW    R31:R30, R1:R0
   \   00000156   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000158   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000015A   8702               STD     Z+10, R16
   \   0000015C   8713               STD     Z+11, R17
    238                  UCSR1A  = 0x00; 
   \   0000015E   E000               LDI     R16, 0
   \   00000160   930000C8           STS     200, R16
    239                  UBRR1L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   00000164   01AC               MOVW    R21:R20, R25:R24
   \   00000166   01BD               MOVW    R23:R22, R27:R26
   \   00000168   E400               LDI     R16, 64
   \   0000016A   E412               LDI     R17, 66
   \   0000016C   E02F               LDI     R18, 15
   \   0000016E   E030               LDI     R19, 0
   \   00000170   ........           CALL    ?UL_DIVMOD_L03
   \   00000174   950A               DEC     R16
   \   00000176   930000CC           STS     204, R16
    240                  UBRR1H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   0000017A   01AC               MOVW    R21:R20, R25:R24
   \   0000017C   01BD               MOVW    R23:R22, R27:R26
   \   0000017E   E400               LDI     R16, 64
   \   00000180   E412               LDI     R17, 66
   \   00000182   E02F               LDI     R18, 15
   \   00000184   E030               LDI     R19, 0
   \   00000186   ........           CALL    ?UL_DIVMOD_L03
   \   0000018A   5001               SUBI    R16, 1
   \   0000018C   4010               SBCI    R17, 0
   \   0000018E   2F01               MOV     R16, R17
   \   00000190   E010               LDI     R17, 0
   \   00000192   930000CD           STS     205, R16
    241                  // why the fuck do you enalbe UDRE here you stupid fucktard!!! -hkim
    242                  // UCSR1B = 0xb8; /* tx/ rx enable, int udre/rxon */
    243                  UCSR0B = 0x98;       /* tx/ rx enable, int udre/rxon */
   \   00000196   E908               LDI     R16, 152
   \   00000198   930000C1           STS     193, R16
    244                  UCSR1C  = 0x06;       /* n,8,1 */
   \   0000019C   E006               LDI     R16, 6
   \   0000019E   930000CA           STS     202, R16
    245                  break;
    246              default:
    247                  break ;
    248              }    
    249          }
   \                     ??Init_USART_2:
   \   000001A2   E0E5               LDI     R30, 5
   \   000001A4   ........           JMP     ?EPILOGUE_B5_L09
   \   000001A8                      REQUIRE _A_UCSR0A
   \   000001A8                      REQUIRE _A_UBRR0
   \   000001A8                      REQUIRE _A_UCSR0B
   \   000001A8                      REQUIRE _A_UCSR0C
   \   000001A8                      REQUIRE _A_UCSR1A
   \   000001A8                      REQUIRE _A_UBRR1
   \   000001A8                      REQUIRE _A_UCSR1C
    250          
    251          
    252          /*
    253          **===========================================================================
    254          ** Init the AD converter registers
    255          **===========================================================================
    256          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    257          void Init_AD( void ) {
   \                     Init_AD:
    258          
    259              char i;     
    260              for (i = 0; i<8; i++) {                 // Init variables
   \   00000000   E000               LDI     R16, 0
   \                     ??Init_AD_0:
   \   00000002   3008               CPI     R16, 8
   \   00000004   F458               BRCC    ??Init_AD_1
    261                  ADInt.Result[i] = 0;                   // convertion resluts
   \   00000006   E020               LDI     R18, 0
   \   00000008   E030               LDI     R19, 0
   \   0000000A   E012               LDI     R17, 2
   \   0000000C   9F01               MUL     R16, R17
   \   0000000E   01F0               MOVW    R31:R30, R1:R0
   \   00000010   ....               SUBI    R30, LOW((-(ADInt) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(ADInt) & 0xFFFF) >> 8
   \   00000014   8320               ST      Z, R18
   \   00000016   8331               STD     Z+1, R19
    262              }
   \   00000018   9503               INC     R16
   \   0000001A   CFF3               RJMP    ??Init_AD_0
    263              ADChannel = 0x00 ;                      // AD channel to be converted
   \                     ??Init_AD_1:
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   9310....           STS     ADChannel, R17
    264              ADMUX   = 0xc0 ;                        // Ref = 2,56V, right adjust
   \   00000022   EC10               LDI     R17, 192
   \   00000024   9310007C           STS     124, R17
    265              // 128 -> 1281
    266              // ADCSR   = 0x8f ;                        // AD enabled, int enabled, xtal / 128
    267              ADCSRA = 0x8f;
   \   00000028   E81F               LDI     R17, 143
   \   0000002A   9310007A           STS     122, R17
    268          }
   \   0000002E   9508               RET
   \   00000030                      REQUIRE _A_ADMUX
   \   00000030                      REQUIRE _A_ADCSRA
    269          
    270          /*
    271          **===========================================================================
    272          ** Init values  in the system
    273          **===========================================================================
    274          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    275          void Init_Values(void) {
   \                     Init_Values:
    276          
    277          
    278          }
   \   00000000   9508               RET

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   InitSystem
        0      2   -> Init_AD
        0      2   -> Init_CPU
        0      2   -> Init_IO
        0      2   -> Init_TMR
        0      2   -> Init_USART
        0      2   -> Init_Values
      0      2   Init_AD
      0      2   Init_CPU
      0      2   Init_IO
      0      2   Init_TMR
      5      2   Init_USART
        5      2 ?UL_DIVMOD_L03
      0      2   Init_Values
      0      2   Init_Watchdog


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      62  InitSystem
      48  Init_AD
     102  Init_CPU
     130  Init_IO
      54  Init_TMR
     424  Init_USART
       2  Init_Values
      18  Init_Watchdog
       1  _A_ADCSRA
       1  _A_ADMUX
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_MCUCR
       1  _A_MCUSR
       1  _A_OCR2A
       1  _A_PINB
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_TCCR2A
       1  _A_TCCR2B
       2  _A_UBRR0
       2  _A_UBRR1
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UCSR1A
       1  _A_UCSR1C
       1  _A_WDTCSR
       1  _A_XMCRA
       1  _A_XMCRB

 
  37 bytes in segment ABSOLUTE
 840 bytes in segment CODE
 
 840 bytes of CODE memory
   0 bytes of DATA memory (+ 37 bytes shared)

Errors: none
Warnings: none
