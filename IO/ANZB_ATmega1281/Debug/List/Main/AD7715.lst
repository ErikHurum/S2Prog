###############################################################################
#
# IAR C/C++ Compiler V8.10.1.1784/W64 for Microchip AVR   02/May/2023  12:58:19
# Copyright 1996-2023 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file           =  D:\S2Prog\IO\ANZB_ATmega1281\Src\AD7715.c
#    Command line          =
#        -f D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\AD7715.r90.rsp
#        (D:\S2Prog\IO\ANZB_ATmega1281\Src\AD7715.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main -D OS_LIBMODE_D -D
#        OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D USE_MODBUS_PROTOCOL=0 -lCN
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\List\Main -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB_ATmega1281\INC\ -I
#        D:\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\ --eeprom_size 4096
#        --clib -On) --dependencies=n
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\AD7715.r90.iar_deps
#    Locale                =  C
#    List file             =
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\List\Main\AD7715.lst
#    Object file           =
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\AD7715.r90
#    Runtime model:           
#      __64bit_doubles     =  disabled
#      __SystemLibrary     =  CLib
#      __architecture      =  *
#      __cpu               =  3
#      __cpu_name          =  ATmega1281
#      __dlib_version      =  clib
#      __enhanced_core     =  enabled
#      __enhanced_core_mul =  enabled
#      __has_elpm          =  true
#      __memory_model      =  2
#      __mex               =  disabled
#      __no_rampd          =  enabled
#      __rt_version        =  3
#      __vtable_memory     =  __nearflash
#
###############################################################################

D:\S2Prog\IO\ANZB_ATmega1281\Src\AD7715.c
      1          /****************************************************************************************
      2          / AD converter handling , AD7715
      3          /
      4          ***************************************************************************************/
      5          
      6          #include <math.h>
      7          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0x34
   \   __no_init union <unnamed>#418 volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   __no_init union <unnamed>#424 volatile __io _A_PING
   \                     _A_PING:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   __no_init union <unnamed>#436 volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   __no_init union <unnamed>#445 volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   __no_init union <unnamed>#454 volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x25
   \   __no_init union <unnamed>#463 volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          
     13          
     14          #if USE_MODBUS_PROTOCOL == 1
     15          #include "common_def.h"
     16          
     17          #define EEPROM_OFFSET_ADDR(ch)    ((0x80 | ch) * sizeof(float) * 2)
     18          #define EEPROM_GAIN_ADDR(ch)      (((0x80 | ch) * sizeof(float) * 2) + sizeof(float))
     19          
     20          #define EEPROM_RSP_DELAY_ADDR(port)   (EEPROM_OFFGAIN + 1024 + port * sizeof(uint16_t))
     21          
     22          #define ADC_OFFSET_MIN        -2.0f
     23          #define ADC_OFFSET_MAX        2.0f
     24          
     25          #define ADC_GAIN_MIN          0.98f
     26          #define ADC_GAIN_MAX          1.02f
     27          
     28          #define ADC_FILTER_MIN        0.0f
     29          #define ADC_FILTER_MAX        2.0f
     30          
     31          static void load_eeprom_misc(void);
     32          #endif
     33          

   \                                 In  segment CODE, align 2, keep-with-next
     34          static inline signed char
     35          fcompare(float a, float b)
   \                     fcompare:
     36          {
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   0128               MOVW    R5:R4, R17:R16
   \   00000006   0139               MOVW    R7:R6, R19:R18
   \   00000008   01CA               MOVW    R25:R24, R21:R20
   \   0000000A   01DB               MOVW    R27:R26, R23:R22
     37            //
     38            // returns -1 when a < b
     39            //          1 when a > b
     40            //          0 when equal
     41            //
     42            #define FLT_EPSILON 0.000001f
     43          
     44            float d = a - b;
   \   0000000C   0182               MOVW    R17:R16, R5:R4
   \   0000000E   0193               MOVW    R19:R18, R7:R6
   \   00000010   01AC               MOVW    R21:R20, R25:R24
   \   00000012   01BD               MOVW    R23:R22, R27:R26
   \   00000014   ........           CALL    ?F_SUB_L04
   \   00000018   0108               MOVW    R1:R0, R17:R16
   \   0000001A   0119               MOVW    R3:R2, R19:R18
     45          
     46            if (d >= -FLT_EPSILON && d <= FLT_EPSILON)
   \   0000001C   0180               MOVW    R17:R16, R1:R0
   \   0000001E   0191               MOVW    R19:R18, R3:R2
   \   00000020   EB4D               LDI     R20, 189
   \   00000022   E357               LDI     R21, 55
   \   00000024   E866               LDI     R22, 134
   \   00000026   EB75               LDI     R23, 181
   \   00000028   ........           CALL    ?F_CMP_GE_L04
   \   0000002C   F458               BRCC    ??fcompare_0
   \   0000002E   0180               MOVW    R17:R16, R1:R0
   \   00000030   0191               MOVW    R19:R18, R3:R2
   \   00000032   EB4E               LDI     R20, 190
   \   00000034   E357               LDI     R21, 55
   \   00000036   E866               LDI     R22, 134
   \   00000038   E375               LDI     R23, 53
   \   0000003A   ........           CALL    ?F_CMP_LT_L04
   \   0000003E   F410               BRCC    ??fcompare_0
     47            {
     48              return 0;
   \   00000040   E000               LDI     R16, 0
   \   00000042   C00C               RJMP    ??fcompare_1
     49            }
     50          
     51            if(d < -FLT_EPSILON)
   \                     ??fcompare_0:
   \   00000044   0180               MOVW    R17:R16, R1:R0
   \   00000046   0191               MOVW    R19:R18, R3:R2
   \   00000048   EB4D               LDI     R20, 189
   \   0000004A   E357               LDI     R21, 55
   \   0000004C   E866               LDI     R22, 134
   \   0000004E   EB75               LDI     R23, 181
   \   00000050   ........           CALL    ?F_CMP_LT_L04
   \   00000054   F410               BRCC    ??fcompare_2
     52            {
     53              // a is less than b
     54              return -1;
   \   00000056   EF0F               LDI     R16, 255
   \   00000058   C001               RJMP    ??fcompare_1
     55            }
     56          
     57            // a is bigger than b
     58            return 1;
   \                     ??fcompare_2:
   \   0000005A   E001               LDI     R16, 1
   \                     ??fcompare_1:
   \   0000005C   E0E8               LDI     R30, 8
   \   0000005E   ........           JMP     ?EPILOGUE_B8_L09
     59          }
     60          
     61          /*************************************************************************
     62          *   (This is a task)
     63          *  AD7715 task 
     64          *
     65          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     66          void AD7715(void) {
   \                     AD7715:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   9724               SBIW    R29:R28, 4
     67              char ch, Rev1 = 0; 
   \   00000006   E0B0               LDI     R27, 0
     68              unsigned int addata ;
     69              float Tempfloat;
     70          
     71              for (ch = 0; ch<12; ch++) {
   \   00000008   E0A0               LDI     R26, 0
   \                     ??AD7715_0:
   \   0000000A   30AC               CPI     R26, 12
   \   0000000C   F440               BRCC    ??AD7715_1
     72                  TData.Ana.Filter[ch] = 1.0;
   \   0000000E   E001               LDI     R16, 1
   \   00000010   2FEA               MOV     R30, R26
   \   00000012   E0F0               LDI     R31, 0
   \   00000014   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000018   8302               STD     Z+2, R16
     73              }
   \   0000001A   95A3               INC     R26
   \   0000001C   CFF6               RJMP    ??AD7715_0
     74              TData.Ana.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP) + (ReadEEPROMByte(EEPROM_PORTSETUP+1) <<8); // Get setup from EEPROM
   \                     ??AD7715_1:
   \   0000001E   E002               LDI     R16, 2
   \   00000020   E010               LDI     R17, 0
   \   00000022   ........           CALL    ReadEEPROMByte
   \   00000026   2F80               MOV     R24, R16
   \   00000028   E003               LDI     R16, 3
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   ........           CALL    ReadEEPROMByte
   \   00000030   2F28               MOV     R18, R24
   \   00000032   2F30               MOV     R19, R16
   \   00000034   ....               LDI     R30, LOW(TData)
   \   00000036   ....               LDI     R31, (TData) >> 8
   \   00000038   8320               ST      Z, R18
   \   0000003A   8331               STD     Z+1, R19
     75              SetAnaPort();
   \   0000003C   ....               RCALL   SetAnaPort
     76          
     77              WriteAdByte(0xff) ;             // Write 32 1's to reset
   \   0000003E   EF0F               LDI     R16, 255
   \   00000040   ....               RCALL   WriteAdByte
     78              WriteAdByte(0xff) ;
   \   00000042   EF0F               LDI     R16, 255
   \   00000044   ....               RCALL   WriteAdByte
     79              WriteAdByte(0xff) ;
   \   00000046   EF0F               LDI     R16, 255
   \   00000048   ....               RCALL   WriteAdByte
     80              WriteAdByte(0xff) ;
   \   0000004A   EF0F               LDI     R16, 255
   \   0000004C   ....               RCALL   WriteAdByte
     81              
     82              // Calibrate and check if the card is layout rev 1?
     83              WriteAdByte(0x10) ;             // Next write setup reg 
   \   0000004E   E100               LDI     R16, 16
   \   00000050   ....               RCALL   WriteAdByte
     84              WriteAdByte(0x4e) ;             //  Ad setup data, unipolar, calibrate
   \   00000052   E40E               LDI     R16, 78
   \   00000054   ....               RCALL   WriteAdByte
     85              OS_Delay(250);
   \   00000056   EF0A               LDI     R16, 250
   \   00000058   E010               LDI     R17, 0
   \   0000005A   ........           CALL    OS_Delay
     86              OS_ClearEvents(&TCB_AD7715);
   \   0000005E   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000060   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000062   ........           CALL    OS_ClearEvents
     87              OS_WaitEventTimed(1, 1000);
   \   00000066   EE28               LDI     R18, 232
   \   00000068   E033               LDI     R19, 3
   \   0000006A   E001               LDI     R16, 1
   \   0000006C   ........           CALL    OS_WaitEventTimed
     88              
     89              ClrBit(PORTE,0xf0);                 // check channel 14 for 2.5 V
   \   00000070   9100....           LDS     R16, (OS_Global + 1)
   \   00000074   7F00               ANDI    R16, 0xF0
   \   00000076   2300               TST     R16
   \   00000078   F021               BREQ    ??AD7715_2
   \   0000007A   E909               LDI     R16, 153
   \   0000007C   E010               LDI     R17, 0
   \   0000007E   ........           CALL    OS_Error
   \                     ??AD7715_2:
   \   00000082   94F8               cli
   \   00000084   ....               LDI     R30, LOW(OS_Global)
   \   00000086   ....               LDI     R31, (OS_Global) >> 8
   \   00000088   8101               LDD     R16, Z+1
   \   0000008A   9503               INC     R16
   \   0000008C   8301               STD     Z+1, R16
   \   0000008E   B10E               IN      R16, 0x0E
   \   00000090   700F               ANDI    R16, 0x0F
   \   00000092   B90E               OUT     0x0E, R16
   \   00000094   9100....           LDS     R16, (OS_Global + 1)
   \   00000098   7F00               ANDI    R16, 0xF0
   \   0000009A   2300               TST     R16
   \   0000009C   F021               BREQ    ??AD7715_3
   \   0000009E   E909               LDI     R16, 153
   \   000000A0   E010               LDI     R17, 0
   \   000000A2   ........           CALL    OS_Error
   \                     ??AD7715_3:
   \   000000A6   ....               LDI     R30, LOW(OS_Global)
   \   000000A8   ....               LDI     R31, (OS_Global) >> 8
   \   000000AA   8101               LDD     R16, Z+1
   \   000000AC   950A               DEC     R16
   \   000000AE   8301               STD     Z+1, R16
   \   000000B0   9100....           LDS     R16, (OS_Global + 1)
   \   000000B4   2300               TST     R16
   \   000000B6   F409               BRNE    ??AD7715_4
   \   000000B8   9478               sei
     90              SetBit(PORTE, (14 << 4) & 0xf0);    // check 
   \                     ??AD7715_4:
   \   000000BA   9100....           LDS     R16, (OS_Global + 1)
   \   000000BE   7F00               ANDI    R16, 0xF0
   \   000000C0   2300               TST     R16
   \   000000C2   F021               BREQ    ??AD7715_5
   \   000000C4   E909               LDI     R16, 153
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   ........           CALL    OS_Error
   \                     ??AD7715_5:
   \   000000CC   94F8               cli
   \   000000CE   ....               LDI     R30, LOW(OS_Global)
   \   000000D0   ....               LDI     R31, (OS_Global) >> 8
   \   000000D2   8101               LDD     R16, Z+1
   \   000000D4   9503               INC     R16
   \   000000D6   8301               STD     Z+1, R16
   \   000000D8   B10E               IN      R16, 0x0E
   \   000000DA   6E00               ORI     R16, 0xE0
   \   000000DC   B90E               OUT     0x0E, R16
   \   000000DE   9100....           LDS     R16, (OS_Global + 1)
   \   000000E2   7F00               ANDI    R16, 0xF0
   \   000000E4   2300               TST     R16
   \   000000E6   F021               BREQ    ??AD7715_6
   \   000000E8   E909               LDI     R16, 153
   \   000000EA   E010               LDI     R17, 0
   \   000000EC   ........           CALL    OS_Error
   \                     ??AD7715_6:
   \   000000F0   ....               LDI     R30, LOW(OS_Global)
   \   000000F2   ....               LDI     R31, (OS_Global) >> 8
   \   000000F4   8101               LDD     R16, Z+1
   \   000000F6   950A               DEC     R16
   \   000000F8   8301               STD     Z+1, R16
   \   000000FA   9100....           LDS     R16, (OS_Global + 1)
   \   000000FE   2300               TST     R16
   \   00000100   F409               BRNE    ??AD7715_7
   \   00000102   9478               sei
     91              WriteAdByte(0x10) ;                 // Next write data 
   \                     ??AD7715_7:
   \   00000104   E100               LDI     R16, 16
   \   00000106   ....               RCALL   WriteAdByte
     92              WriteAdByte(0x0e) ;                 // Ad setup data, unipolar
   \   00000108   E00E               LDI     R16, 14
   \   0000010A   ....               RCALL   WriteAdByte
     93              OS_Delay(85);
   \   0000010C   E505               LDI     R16, 85
   \   0000010E   E010               LDI     R17, 0
   \   00000110   ........           CALL    OS_Delay
     94              OS_ClearEvents(&TCB_AD7715);
   \   00000114   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000116   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000118   ........           CALL    OS_ClearEvents
     95              OS_WaitEventTimed(1, 250);
   \   0000011C   EF2A               LDI     R18, 250
   \   0000011E   E030               LDI     R19, 0
   \   00000120   E001               LDI     R16, 1
   \   00000122   ........           CALL    OS_WaitEventTimed
     96              WriteAdByte(0x38) ;                 // Next read data 
   \   00000126   E308               LDI     R16, 56
   \   00000128   ....               RCALL   WriteAdByte
     97              addata = ReadAdByte()* 256 ;        // read data 16 bit data from ad 
   \   0000012A   ....               RCALL   ReadAdByte
   \   0000012C   2F90               MOV     R25, R16
   \   0000012E   E080               LDI     R24, 0
     98              addata += ReadAdByte() ;
   \   00000130   ....               RCALL   ReadAdByte
   \   00000132   E010               LDI     R17, 0
   \   00000134   0F80               ADD     R24, R16
   \   00000136   1F91               ADC     R25, R17
     99              if (addata > 60000){
   \   00000138   3681               CPI     R24, 97
   \   0000013A   EE0A               LDI     R16, 234
   \   0000013C   0790               CPC     R25, R16
   \   0000013E   F0E8               BRCS    ??AD7715_8
    100                  Rev1 = true;
   \   00000140   E0B1               LDI     R27, 1
    101                  for (ch = 0 ; ch < 12 ; ch++) {       // Get the gain and offset from the EEPROM
   \   00000142   E000               LDI     R16, 0
   \                     ??AD7715_9:
   \   00000144   300C               CPI     R16, 12
   \   00000146   F5A8               BRCC    ??AD7715_10
    102                     TData.Ana.Offset[ch] = 0.0;
   \   00000148   E014               LDI     R17, 4
   \   0000014A   9F01               MUL     R16, R17
   \   0000014C   01F0               MOVW    R31:R30, R1:R0
   \   0000014E   ....               SUBI    R30, LOW((-(TData + 98) & 0xFFFF))
   \   00000150   ....               SBCI    R31, HIGH((-(TData + 98) & 0xFFFF))
   \   00000152   E010               LDI     R17, 0
   \   00000154   8310               ST      Z, R17
   \   00000156   8311               STD     Z+1, R17
   \   00000158   8312               STD     Z+2, R17
   \   0000015A   8313               STD     Z+3, R17
    103                     TData.Ana.Gain[ch] = 0.9985;
   \   0000015C   EB42               LDI     R20, 178
   \   0000015E   E95D               LDI     R21, 157
   \   00000160   E76F               LDI     R22, 127
   \   00000162   E37F               LDI     R23, 63
   \   00000164   E014               LDI     R17, 4
   \   00000166   9F01               MUL     R16, R17
   \   00000168   01F0               MOVW    R31:R30, R1:R0
   \   0000016A   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   0000016C   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   0000016E   8340               ST      Z, R20
   \   00000170   8351               STD     Z+1, R21
   \   00000172   8362               STD     Z+2, R22
   \   00000174   8373               STD     Z+3, R23
    104                 }
   \   00000176   9503               INC     R16
   \   00000178   CFE5               RJMP    ??AD7715_9
    105              } else {
    106                  for (ch = 0 ; ch < 12 ; ch++) {       // Get the gain and offset from the EEPROM
   \                     ??AD7715_8:
   \   0000017A   E000               LDI     R16, 0
   \                     ??AD7715_11:
   \   0000017C   300C               CPI     R16, 12
   \   0000017E   F4C8               BRCC    ??AD7715_10
    107                     TData.Ana.Offset[ch] = 0.0;
   \   00000180   E014               LDI     R17, 4
   \   00000182   9F01               MUL     R16, R17
   \   00000184   01F0               MOVW    R31:R30, R1:R0
   \   00000186   ....               SUBI    R30, LOW((-(TData + 98) & 0xFFFF))
   \   00000188   ....               SBCI    R31, HIGH((-(TData + 98) & 0xFFFF))
   \   0000018A   E010               LDI     R17, 0
   \   0000018C   8310               ST      Z, R17
   \   0000018E   8311               STD     Z+1, R17
   \   00000190   8312               STD     Z+2, R17
   \   00000192   8313               STD     Z+3, R17
    108                     TData.Ana.Gain[ch] = 0.9965;
   \   00000194   EA40               LDI     R20, 160
   \   00000196   E15A               LDI     R21, 26
   \   00000198   E76F               LDI     R22, 127
   \   0000019A   E37F               LDI     R23, 63
   \   0000019C   E014               LDI     R17, 4
   \   0000019E   9F01               MUL     R16, R17
   \   000001A0   01F0               MOVW    R31:R30, R1:R0
   \   000001A2   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   000001A4   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   000001A6   8340               ST      Z, R20
   \   000001A8   8351               STD     Z+1, R21
   \   000001AA   8362               STD     Z+2, R22
   \   000001AC   8373               STD     Z+3, R23
    109                 }
   \   000001AE   9503               INC     R16
   \   000001B0   CFE5               RJMP    ??AD7715_11
    110              }
    111              for (ch = 0 ; ch < 12 ; ch++) {       // Get the gain and offset from the EEPROM
   \                     ??AD7715_10:
   \   000001B2   E0A0               LDI     R26, 0
   \                     ??AD7715_12:
   \   000001B4   30AC               CPI     R26, 12
   \   000001B6   F008               BRCS    $+2+2
   \   000001B8   C072               RJMP    ??AD7715_13
    112                ReadEEPROMBuffer( (ch | 0x80) * sizeof(float)*2, sizeof(float), (char*)&Tempfloat );
   \   000001BA   01AE               MOVW    R21:R20, R29:R28
   \   000001BC   E024               LDI     R18, 4
   \   000001BE   01BA               MOVW    R23:R22, R21:R20
   \   000001C0   2F0A               MOV     R16, R26
   \   000001C2   E010               LDI     R17, 0
   \   000001C4   6800               ORI     R16, 0x80
   \   000001C6   E043               LDI     R20, 3
   \   000001C8   ........           CALL    ?S_SHL_L02
   \   000001CC   01AB               MOVW    R21:R20, R23:R22
   \   000001CE   ........           CALL    ReadEEPROMBuffer
    113          
    114          #if 0 // hkim. you shouldn't do floating point comparison like this
    115                  if (IsFloat(Tempfloat) && Tempfloat > -2.0 && Tempfloat < 2.0 ) { 
    116                  *((float*)&TData.Ana.Offset[ch]) = *((float*)&Tempfloat) ;  //offset
    117                }
    118                
    119                ReadEEPROMBuffer( ((ch | 0x80) * sizeof(float)*2) + sizeof(float), sizeof(float), (char*)&Tempfloat );
    120                
    121                if (IsFloat(Tempfloat) && Tempfloat > 0.98 && Tempfloat < 1.02)
    122                  {
    123                      *((float *)&TData.Ana.Gain[ch]) = *((float *)&Tempfloat); //gain
    124                  }
    125          #else
    126                  if (IsFloat(Tempfloat) && fcompare(Tempfloat, -2.0) > 0 && fcompare(Tempfloat, 2.0) < 0)
   \   000001D2   8108               LD      R16, Y
   \   000001D4   8119               LDD     R17, Y+1
   \   000001D6   812A               LDD     R18, Y+2
   \   000001D8   813B               LDD     R19, Y+3
   \   000001DA   ........           CALL    IsFloat
   \   000001DE   2300               TST     R16
   \   000001E0   F119               BREQ    ??AD7715_14
   \   000001E2   E040               LDI     R20, 0
   \   000001E4   E050               LDI     R21, 0
   \   000001E6   E060               LDI     R22, 0
   \   000001E8   EC70               LDI     R23, 192
   \   000001EA   8108               LD      R16, Y
   \   000001EC   8119               LDD     R17, Y+1
   \   000001EE   812A               LDD     R18, Y+2
   \   000001F0   813B               LDD     R19, Y+3
   \   000001F2   ....               RCALL   fcompare
   \   000001F4   3001               CPI     R16, 1
   \   000001F6   F0C4               BRLT    ??AD7715_14
   \   000001F8   E040               LDI     R20, 0
   \   000001FA   E050               LDI     R21, 0
   \   000001FC   E060               LDI     R22, 0
   \   000001FE   E470               LDI     R23, 64
   \   00000200   8108               LD      R16, Y
   \   00000202   8119               LDD     R17, Y+1
   \   00000204   812A               LDD     R18, Y+2
   \   00000206   813B               LDD     R19, Y+3
   \   00000208   ....               RCALL   fcompare
   \   0000020A   2300               TST     R16
   \   0000020C   F46A               BRPL    ??AD7715_14
    127                  {
    128                      *((float *)&TData.Ana.Offset[ch]) = *((float *)&Tempfloat); //offset
   \   0000020E   8108               LD      R16, Y
   \   00000210   8119               LDD     R17, Y+1
   \   00000212   812A               LDD     R18, Y+2
   \   00000214   813B               LDD     R19, Y+3
   \   00000216   E044               LDI     R20, 4
   \   00000218   9FA4               MUL     R26, R20
   \   0000021A   01F0               MOVW    R31:R30, R1:R0
   \   0000021C   ....               SUBI    R30, LOW((-(TData + 98) & 0xFFFF))
   \   0000021E   ....               SBCI    R31, HIGH((-(TData + 98) & 0xFFFF))
   \   00000220   8300               ST      Z, R16
   \   00000222   8311               STD     Z+1, R17
   \   00000224   8322               STD     Z+2, R18
   \   00000226   8333               STD     Z+3, R19
    129                  }
    130          
    131                  ReadEEPROMBuffer(((ch | 0x80) * sizeof(float) * 2) + sizeof(float), sizeof(float), (char *)&Tempfloat);
   \                     ??AD7715_14:
   \   00000228   01AE               MOVW    R21:R20, R29:R28
   \   0000022A   E024               LDI     R18, 4
   \   0000022C   01BA               MOVW    R23:R22, R21:R20
   \   0000022E   2F0A               MOV     R16, R26
   \   00000230   E010               LDI     R17, 0
   \   00000232   6800               ORI     R16, 0x80
   \   00000234   E043               LDI     R20, 3
   \   00000236   ........           CALL    ?S_SHL_L02
   \   0000023A   5F0C               SUBI    R16, 252
   \   0000023C   4F1F               SBCI    R17, 255
   \   0000023E   01AB               MOVW    R21:R20, R23:R22
   \   00000240   ........           CALL    ReadEEPROMBuffer
    132          
    133                  if (IsFloat(Tempfloat) && fcompare(Tempfloat, 0.98) > 0 && fcompare(Tempfloat, 1.02) < 0)
   \   00000244   8108               LD      R16, Y
   \   00000246   8119               LDD     R17, Y+1
   \   00000248   812A               LDD     R18, Y+2
   \   0000024A   813B               LDD     R19, Y+3
   \   0000024C   ........           CALL    IsFloat
   \   00000250   2300               TST     R16
   \   00000252   F119               BREQ    ??AD7715_15
   \   00000254   E448               LDI     R20, 72
   \   00000256   EE51               LDI     R21, 225
   \   00000258   E76A               LDI     R22, 122
   \   0000025A   E37F               LDI     R23, 63
   \   0000025C   8108               LD      R16, Y
   \   0000025E   8119               LDD     R17, Y+1
   \   00000260   812A               LDD     R18, Y+2
   \   00000262   813B               LDD     R19, Y+3
   \   00000264   ....               RCALL   fcompare
   \   00000266   3001               CPI     R16, 1
   \   00000268   F0C4               BRLT    ??AD7715_15
   \   0000026A   E54C               LDI     R20, 92
   \   0000026C   E85F               LDI     R21, 143
   \   0000026E   E862               LDI     R22, 130
   \   00000270   E37F               LDI     R23, 63
   \   00000272   8108               LD      R16, Y
   \   00000274   8119               LDD     R17, Y+1
   \   00000276   812A               LDD     R18, Y+2
   \   00000278   813B               LDD     R19, Y+3
   \   0000027A   ....               RCALL   fcompare
   \   0000027C   2300               TST     R16
   \   0000027E   F46A               BRPL    ??AD7715_15
    134                  { 
    135                  *((float*)&TData.Ana.Gain[ch]) = *((float*)&Tempfloat) ;  //gain
   \   00000280   8108               LD      R16, Y
   \   00000282   8119               LDD     R17, Y+1
   \   00000284   812A               LDD     R18, Y+2
   \   00000286   813B               LDD     R19, Y+3
   \   00000288   E044               LDI     R20, 4
   \   0000028A   9FA4               MUL     R26, R20
   \   0000028C   01F0               MOVW    R31:R30, R1:R0
   \   0000028E   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   00000290   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   00000292   8300               ST      Z, R16
   \   00000294   8311               STD     Z+1, R17
   \   00000296   8322               STD     Z+2, R18
   \   00000298   8333               STD     Z+3, R19
    136                }
    137          #endif
    138              }
   \                     ??AD7715_15:
   \   0000029A   95A3               INC     R26
   \   0000029C   CF8B               RJMP    ??AD7715_12
    139          
    140              //
    141              // let modbus task that I'm done initializing
    142              //
    143          #if USE_MODBUS_PROTOCOL == 1
    144              load_eeprom_misc();
    145          
    146              {
    147                extern void modbus_rtu_notify_go(void);
    148                modbus_rtu_notify_go();
    149              }
    150          #endif
    151          
    152              while (1) {
    153                  if (Rev1) {
   \                     ??AD7715_13:
   \   0000029E   23BB               TST     R27
   \   000002A0   F409               BRNE    $+2+2
   \   000002A2   C0B7               RJMP    ??AD7715_16
    154                     
    155                      ClrBit(PORTE,0xf0); 
   \   000002A4   9100....           LDS     R16, (OS_Global + 1)
   \   000002A8   7F00               ANDI    R16, 0xF0
   \   000002AA   2300               TST     R16
   \   000002AC   F021               BREQ    ??AD7715_17
   \   000002AE   E909               LDI     R16, 153
   \   000002B0   E010               LDI     R17, 0
   \   000002B2   ........           CALL    OS_Error
   \                     ??AD7715_17:
   \   000002B6   94F8               cli
   \   000002B8   ....               LDI     R30, LOW(OS_Global)
   \   000002BA   ....               LDI     R31, (OS_Global) >> 8
   \   000002BC   8101               LDD     R16, Z+1
   \   000002BE   9503               INC     R16
   \   000002C0   8301               STD     Z+1, R16
   \   000002C2   B10E               IN      R16, 0x0E
   \   000002C4   700F               ANDI    R16, 0x0F
   \   000002C6   B90E               OUT     0x0E, R16
   \   000002C8   9100....           LDS     R16, (OS_Global + 1)
   \   000002CC   7F00               ANDI    R16, 0xF0
   \   000002CE   2300               TST     R16
   \   000002D0   F021               BREQ    ??AD7715_18
   \   000002D2   E909               LDI     R16, 153
   \   000002D4   E010               LDI     R17, 0
   \   000002D6   ........           CALL    OS_Error
   \                     ??AD7715_18:
   \   000002DA   ....               LDI     R30, LOW(OS_Global)
   \   000002DC   ....               LDI     R31, (OS_Global) >> 8
   \   000002DE   8101               LDD     R16, Z+1
   \   000002E0   950A               DEC     R16
   \   000002E2   8301               STD     Z+1, R16
   \   000002E4   9100....           LDS     R16, (OS_Global + 1)
   \   000002E8   2300               TST     R16
   \   000002EA   F409               BRNE    ??AD7715_19
   \   000002EC   9478               sei
    156                      SetBit(PORTE, (15 << 4) & 0xf0); // 0V at ch 16
   \                     ??AD7715_19:
   \   000002EE   9100....           LDS     R16, (OS_Global + 1)
   \   000002F2   7F00               ANDI    R16, 0xF0
   \   000002F4   2300               TST     R16
   \   000002F6   F021               BREQ    ??AD7715_20
   \   000002F8   E909               LDI     R16, 153
   \   000002FA   E010               LDI     R17, 0
   \   000002FC   ........           CALL    OS_Error
   \                     ??AD7715_20:
   \   00000300   94F8               cli
   \   00000302   ....               LDI     R30, LOW(OS_Global)
   \   00000304   ....               LDI     R31, (OS_Global) >> 8
   \   00000306   8101               LDD     R16, Z+1
   \   00000308   9503               INC     R16
   \   0000030A   8301               STD     Z+1, R16
   \   0000030C   B10E               IN      R16, 0x0E
   \   0000030E   6F00               ORI     R16, 0xF0
   \   00000310   B90E               OUT     0x0E, R16
   \   00000312   9100....           LDS     R16, (OS_Global + 1)
   \   00000316   7F00               ANDI    R16, 0xF0
   \   00000318   2300               TST     R16
   \   0000031A   F021               BREQ    ??AD7715_21
   \   0000031C   E909               LDI     R16, 153
   \   0000031E   E010               LDI     R17, 0
   \   00000320   ........           CALL    OS_Error
   \                     ??AD7715_21:
   \   00000324   ....               LDI     R30, LOW(OS_Global)
   \   00000326   ....               LDI     R31, (OS_Global) >> 8
   \   00000328   8101               LDD     R16, Z+1
   \   0000032A   950A               DEC     R16
   \   0000032C   8301               STD     Z+1, R16
   \   0000032E   9100....           LDS     R16, (OS_Global + 1)
   \   00000332   2300               TST     R16
   \   00000334   F409               BRNE    ??AD7715_22
   \   00000336   9478               sei
    157                      WriteAdByte(0x10) ;             // Next write setup reg 
   \                     ??AD7715_22:
   \   00000338   E100               LDI     R16, 16
   \   0000033A   ....               RCALL   WriteAdByte
    158                      WriteAdByte(0x8e) ;             //  AStark test zero scale calibrate
   \   0000033C   E80E               LDI     R16, 142
   \   0000033E   ....               RCALL   WriteAdByte
    159                      OS_Delay(250);
   \   00000340   EF0A               LDI     R16, 250
   \   00000342   E010               LDI     R17, 0
   \   00000344   ........           CALL    OS_Delay
    160                      OS_ClearEvents(&TCB_AD7715);
   \   00000348   ....               LDI     R16, LOW(TCB_AD7715)
   \   0000034A   ....               LDI     R17, (TCB_AD7715) >> 8
   \   0000034C   ........           CALL    OS_ClearEvents
    161                      OS_WaitEventTimed(1, 1000);
   \   00000350   EE28               LDI     R18, 232
   \   00000352   E033               LDI     R19, 3
   \   00000354   E001               LDI     R16, 1
   \   00000356   ........           CALL    OS_WaitEventTimed
    162                      
    163                      ClrBit(PORTE,0xf0); 
   \   0000035A   9100....           LDS     R16, (OS_Global + 1)
   \   0000035E   7F00               ANDI    R16, 0xF0
   \   00000360   2300               TST     R16
   \   00000362   F021               BREQ    ??AD7715_23
   \   00000364   E909               LDI     R16, 153
   \   00000366   E010               LDI     R17, 0
   \   00000368   ........           CALL    OS_Error
   \                     ??AD7715_23:
   \   0000036C   94F8               cli
   \   0000036E   ....               LDI     R30, LOW(OS_Global)
   \   00000370   ....               LDI     R31, (OS_Global) >> 8
   \   00000372   8101               LDD     R16, Z+1
   \   00000374   9503               INC     R16
   \   00000376   8301               STD     Z+1, R16
   \   00000378   B10E               IN      R16, 0x0E
   \   0000037A   700F               ANDI    R16, 0x0F
   \   0000037C   B90E               OUT     0x0E, R16
   \   0000037E   9100....           LDS     R16, (OS_Global + 1)
   \   00000382   7F00               ANDI    R16, 0xF0
   \   00000384   2300               TST     R16
   \   00000386   F021               BREQ    ??AD7715_24
   \   00000388   E909               LDI     R16, 153
   \   0000038A   E010               LDI     R17, 0
   \   0000038C   ........           CALL    OS_Error
   \                     ??AD7715_24:
   \   00000390   ....               LDI     R30, LOW(OS_Global)
   \   00000392   ....               LDI     R31, (OS_Global) >> 8
   \   00000394   8101               LDD     R16, Z+1
   \   00000396   950A               DEC     R16
   \   00000398   8301               STD     Z+1, R16
   \   0000039A   9100....           LDS     R16, (OS_Global + 1)
   \   0000039E   2300               TST     R16
   \   000003A0   F409               BRNE    ??AD7715_25
   \   000003A2   9478               sei
    164                      SetBit(PORTE, (14 << 4) & 0xf0); // 2.5V at ch 15
   \                     ??AD7715_25:
   \   000003A4   9100....           LDS     R16, (OS_Global + 1)
   \   000003A8   7F00               ANDI    R16, 0xF0
   \   000003AA   2300               TST     R16
   \   000003AC   F021               BREQ    ??AD7715_26
   \   000003AE   E909               LDI     R16, 153
   \   000003B0   E010               LDI     R17, 0
   \   000003B2   ........           CALL    OS_Error
   \                     ??AD7715_26:
   \   000003B6   94F8               cli
   \   000003B8   ....               LDI     R30, LOW(OS_Global)
   \   000003BA   ....               LDI     R31, (OS_Global) >> 8
   \   000003BC   8101               LDD     R16, Z+1
   \   000003BE   9503               INC     R16
   \   000003C0   8301               STD     Z+1, R16
   \   000003C2   B10E               IN      R16, 0x0E
   \   000003C4   6E00               ORI     R16, 0xE0
   \   000003C6   B90E               OUT     0x0E, R16
   \   000003C8   9100....           LDS     R16, (OS_Global + 1)
   \   000003CC   7F00               ANDI    R16, 0xF0
   \   000003CE   2300               TST     R16
   \   000003D0   F021               BREQ    ??AD7715_27
   \   000003D2   E909               LDI     R16, 153
   \   000003D4   E010               LDI     R17, 0
   \   000003D6   ........           CALL    OS_Error
   \                     ??AD7715_27:
   \   000003DA   ....               LDI     R30, LOW(OS_Global)
   \   000003DC   ....               LDI     R31, (OS_Global) >> 8
   \   000003DE   8101               LDD     R16, Z+1
   \   000003E0   950A               DEC     R16
   \   000003E2   8301               STD     Z+1, R16
   \   000003E4   9100....           LDS     R16, (OS_Global + 1)
   \   000003E8   2300               TST     R16
   \   000003EA   F409               BRNE    ??AD7715_28
   \   000003EC   9478               sei
    165                      WriteAdByte(0x10) ;             // Next write setup reg 
   \                     ??AD7715_28:
   \   000003EE   E100               LDI     R16, 16
   \   000003F0   ....               RCALL   WriteAdByte
    166                      WriteAdByte(0xce) ;             //  AStark test full scale calibrate
   \   000003F2   EC0E               LDI     R16, 206
   \   000003F4   ....               RCALL   WriteAdByte
    167                      OS_Delay(250);
   \   000003F6   EF0A               LDI     R16, 250
   \   000003F8   E010               LDI     R17, 0
   \   000003FA   ........           CALL    OS_Delay
    168                      OS_ClearEvents(&TCB_AD7715);
   \   000003FE   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000400   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000402   ........           CALL    OS_ClearEvents
    169                      OS_WaitEventTimed(1, 1000);
   \   00000406   EE28               LDI     R18, 232
   \   00000408   E033               LDI     R19, 3
   \   0000040A   E001               LDI     R16, 1
   \   0000040C   ........           CALL    OS_WaitEventTimed
   \   00000410   C011               RJMP    ??AD7715_29
    170           
    171                  } else {
    172                      WriteAdByte(0x10) ;             // Next write setup reg 
   \                     ??AD7715_16:
   \   00000412   E100               LDI     R16, 16
   \   00000414   ....               RCALL   WriteAdByte
    173                      WriteAdByte(0x4e) ;             //  Internal calibration calibrate
   \   00000416   E40E               LDI     R16, 78
   \   00000418   ....               RCALL   WriteAdByte
    174                      OS_Delay(250);
   \   0000041A   EF0A               LDI     R16, 250
   \   0000041C   E010               LDI     R17, 0
   \   0000041E   ........           CALL    OS_Delay
    175                      OS_ClearEvents(&TCB_AD7715);
   \   00000422   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000424   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000426   ........           CALL    OS_ClearEvents
    176                      OS_WaitEventTimed(1, 1000);
   \   0000042A   EE28               LDI     R18, 232
   \   0000042C   E033               LDI     R19, 3
   \   0000042E   E001               LDI     R16, 1
   \   00000430   ........           CALL    OS_WaitEventTimed
    177                  }
    178          
    179                  for (ch = 0 ; ch < 12 ; ch++) {
   \                     ??AD7715_29:
   \   00000434   E0A0               LDI     R26, 0
   \                     ??AD7715_30:
   \   00000436   30AC               CPI     R26, 12
   \   00000438   F008               BRCS    $+2+2
   \   0000043A   CF31               RJMP    ??AD7715_13
    180                      ClrBit(PORTE,0xf0); 
   \   0000043C   9100....           LDS     R16, (OS_Global + 1)
   \   00000440   7F00               ANDI    R16, 0xF0
   \   00000442   2300               TST     R16
   \   00000444   F021               BREQ    ??AD7715_31
   \   00000446   E909               LDI     R16, 153
   \   00000448   E010               LDI     R17, 0
   \   0000044A   ........           CALL    OS_Error
   \                     ??AD7715_31:
   \   0000044E   94F8               cli
   \   00000450   ....               LDI     R30, LOW(OS_Global)
   \   00000452   ....               LDI     R31, (OS_Global) >> 8
   \   00000454   8101               LDD     R16, Z+1
   \   00000456   9503               INC     R16
   \   00000458   8301               STD     Z+1, R16
   \   0000045A   B10E               IN      R16, 0x0E
   \   0000045C   700F               ANDI    R16, 0x0F
   \   0000045E   B90E               OUT     0x0E, R16
   \   00000460   9100....           LDS     R16, (OS_Global + 1)
   \   00000464   7F00               ANDI    R16, 0xF0
   \   00000466   2300               TST     R16
   \   00000468   F021               BREQ    ??AD7715_32
   \   0000046A   E909               LDI     R16, 153
   \   0000046C   E010               LDI     R17, 0
   \   0000046E   ........           CALL    OS_Error
   \                     ??AD7715_32:
   \   00000472   ....               LDI     R30, LOW(OS_Global)
   \   00000474   ....               LDI     R31, (OS_Global) >> 8
   \   00000476   8101               LDD     R16, Z+1
   \   00000478   950A               DEC     R16
   \   0000047A   8301               STD     Z+1, R16
   \   0000047C   9100....           LDS     R16, (OS_Global + 1)
   \   00000480   2300               TST     R16
   \   00000482   F409               BRNE    ??AD7715_33
   \   00000484   9478               sei
    181                      SetBit(PORTE, (ch << 4) & 0xf0);
   \                     ??AD7715_33:
   \   00000486   9100....           LDS     R16, (OS_Global + 1)
   \   0000048A   7F00               ANDI    R16, 0xF0
   \   0000048C   2300               TST     R16
   \   0000048E   F021               BREQ    ??AD7715_34
   \   00000490   E909               LDI     R16, 153
   \   00000492   E010               LDI     R17, 0
   \   00000494   ........           CALL    OS_Error
   \                     ??AD7715_34:
   \   00000498   94F8               cli
   \   0000049A   ....               LDI     R30, LOW(OS_Global)
   \   0000049C   ....               LDI     R31, (OS_Global) >> 8
   \   0000049E   8101               LDD     R16, Z+1
   \   000004A0   9503               INC     R16
   \   000004A2   8301               STD     Z+1, R16
   \   000004A4   2F0A               MOV     R16, R26
   \   000004A6   9502               SWAP    R16
   \   000004A8   7F00               ANDI    R16, 0xF0
   \   000004AA   B11E               IN      R17, 0x0E
   \   000004AC   2B10               OR      R17, R16
   \   000004AE   B91E               OUT     0x0E, R17
   \   000004B0   9100....           LDS     R16, (OS_Global + 1)
   \   000004B4   7F00               ANDI    R16, 0xF0
   \   000004B6   2300               TST     R16
   \   000004B8   F021               BREQ    ??AD7715_35
   \   000004BA   E909               LDI     R16, 153
   \   000004BC   E010               LDI     R17, 0
   \   000004BE   ........           CALL    OS_Error
   \                     ??AD7715_35:
   \   000004C2   ....               LDI     R30, LOW(OS_Global)
   \   000004C4   ....               LDI     R31, (OS_Global) >> 8
   \   000004C6   8101               LDD     R16, Z+1
   \   000004C8   950A               DEC     R16
   \   000004CA   8301               STD     Z+1, R16
   \   000004CC   9100....           LDS     R16, (OS_Global + 1)
   \   000004D0   2300               TST     R16
   \   000004D2   F409               BRNE    ??AD7715_36
   \   000004D4   9478               sei
    182                      WriteAdByte(0x10) ;                 // Next write data 
   \                     ??AD7715_36:
   \   000004D6   E100               LDI     R16, 16
   \   000004D8   ....               RCALL   WriteAdByte
    183                      WriteAdByte(0x0e) ;                          // Ad setup data, unipolar
   \   000004DA   E00E               LDI     R16, 14
   \   000004DC   ....               RCALL   WriteAdByte
    184                      OS_Delay(85);
   \   000004DE   E505               LDI     R16, 85
   \   000004E0   E010               LDI     R17, 0
   \   000004E2   ........           CALL    OS_Delay
    185                      OS_ClearEvents(&TCB_AD7715);
   \   000004E6   ....               LDI     R16, LOW(TCB_AD7715)
   \   000004E8   ....               LDI     R17, (TCB_AD7715) >> 8
   \   000004EA   ........           CALL    OS_ClearEvents
    186                      OS_WaitEventTimed(1, 250);
   \   000004EE   EF2A               LDI     R18, 250
   \   000004F0   E030               LDI     R19, 0
   \   000004F2   E001               LDI     R16, 1
   \   000004F4   ........           CALL    OS_WaitEventTimed
    187                      WriteAdByte(0x38) ;             // Next read data 
   \   000004F8   E308               LDI     R16, 56
   \   000004FA   ....               RCALL   WriteAdByte
    188                      addata = ReadAdByte()* 256 ;        // read data 16 bit data from ad 
   \   000004FC   ....               RCALL   ReadAdByte
   \   000004FE   2F30               MOV     R19, R16
   \   00000500   E020               LDI     R18, 0
   \   00000502   01C9               MOVW    R25:R24, R19:R18
    189                      addata += ReadAdByte() ;
   \   00000504   ....               RCALL   ReadAdByte
   \   00000506   E010               LDI     R17, 0
   \   00000508   0F80               ADD     R24, R16
   \   0000050A   1F91               ADC     R25, R17
    190          
    191                      #if USE_MODBUS_PROTOCOL == 1
    192                      OS_Use(&adc_lock);
    193                      #endif
    194          
    195                      TData.Ana.Status[ch] = 0;                   // Result ok
   \   0000050C   2FEA               MOV     R30, R26
   \   0000050E   E0F0               LDI     R31, 0
   \   00000510   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000512   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000514   E000               LDI     R16, 0
   \   00000516   8706               STD     Z+14, R16
    196                      TData.Ana.Result[ch] += ((((((float)addata / 65535.0) * 25.0) * TData.Ana.Gain[ch])-TData.Ana.Offset[ch] - TData.Ana.Result[ch])
    197                                               / (TData.Ana.Filter[ch]+1.0))  ;             // readed value / 16bit * 2.5 volt range
   \   00000518   018C               MOVW    R17:R16, R25:R24
   \   0000051A   E020               LDI     R18, 0
   \   0000051C   E030               LDI     R19, 0
   \   0000051E   ........           CALL    ?UL2F_L04
   \   00000522   E040               LDI     R20, 0
   \   00000524   EF5F               LDI     R21, 255
   \   00000526   E76F               LDI     R22, 127
   \   00000528   E477               LDI     R23, 71
   \   0000052A   ........           CALL    ?F_DIV_L04
   \   0000052E   E040               LDI     R20, 0
   \   00000530   E050               LDI     R21, 0
   \   00000532   EC68               LDI     R22, 200
   \   00000534   E471               LDI     R23, 65
   \   00000536   ........           CALL    ?F_MUL_L04
   \   0000053A   E044               LDI     R20, 4
   \   0000053C   9FA4               MUL     R26, R20
   \   0000053E   01F0               MOVW    R31:R30, R1:R0
   \   00000540   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   00000542   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   00000544   8140               LD      R20, Z
   \   00000546   8151               LDD     R21, Z+1
   \   00000548   8162               LDD     R22, Z+2
   \   0000054A   8173               LDD     R23, Z+3
   \   0000054C   ........           CALL    ?F_MUL_L04
   \   00000550   E044               LDI     R20, 4
   \   00000552   9FA4               MUL     R26, R20
   \   00000554   01F0               MOVW    R31:R30, R1:R0
   \   00000556   ....               SUBI    R30, LOW((-(TData + 98) & 0xFFFF))
   \   00000558   ....               SBCI    R31, HIGH((-(TData + 98) & 0xFFFF))
   \   0000055A   8140               LD      R20, Z
   \   0000055C   8151               LDD     R21, Z+1
   \   0000055E   8162               LDD     R22, Z+2
   \   00000560   8173               LDD     R23, Z+3
   \   00000562   ........           CALL    ?F_SUB_L04
   \   00000566   E044               LDI     R20, 4
   \   00000568   9FA4               MUL     R26, R20
   \   0000056A   01F0               MOVW    R31:R30, R1:R0
   \   0000056C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000056E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000570   8D42               LDD     R20, Z+26
   \   00000572   8D53               LDD     R21, Z+27
   \   00000574   8D64               LDD     R22, Z+28
   \   00000576   8D75               LDD     R23, Z+29
   \   00000578   ........           CALL    ?F_SUB_L04
   \   0000057C   0128               MOVW    R5:R4, R17:R16
   \   0000057E   0139               MOVW    R7:R6, R19:R18
   \   00000580   2FEA               MOV     R30, R26
   \   00000582   E0F0               LDI     R31, 0
   \   00000584   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000586   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000588   8102               LDD     R16, Z+2
   \   0000058A   E010               LDI     R17, 0
   \   0000058C   E020               LDI     R18, 0
   \   0000058E   E030               LDI     R19, 0
   \   00000590   ........           CALL    ?UL2F_L04
   \   00000594   E040               LDI     R20, 0
   \   00000596   E050               LDI     R21, 0
   \   00000598   E860               LDI     R22, 128
   \   0000059A   E37F               LDI     R23, 63
   \   0000059C   ........           CALL    ?F_ADD_L04
   \   000005A0   01A8               MOVW    R21:R20, R17:R16
   \   000005A2   01B9               MOVW    R23:R22, R19:R18
   \   000005A4   0182               MOVW    R17:R16, R5:R4
   \   000005A6   0193               MOVW    R19:R18, R7:R6
   \   000005A8   ........           CALL    ?F_DIV_L04
   \   000005AC   E044               LDI     R20, 4
   \   000005AE   9FA4               MUL     R26, R20
   \   000005B0   01F0               MOVW    R31:R30, R1:R0
   \   000005B2   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000005B4   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000005B6   8D42               LDD     R20, Z+26
   \   000005B8   8D53               LDD     R21, Z+27
   \   000005BA   8D64               LDD     R22, Z+28
   \   000005BC   8D75               LDD     R23, Z+29
   \   000005BE   ........           CALL    ?F_ADD_L04
   \   000005C2   E044               LDI     R20, 4
   \   000005C4   9FA4               MUL     R26, R20
   \   000005C6   01F0               MOVW    R31:R30, R1:R0
   \   000005C8   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000005CA   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000005CC   8F02               STD     Z+26, R16
   \   000005CE   8F13               STD     Z+27, R17
   \   000005D0   8F24               STD     Z+28, R18
   \   000005D2   8F35               STD     Z+29, R19
    198          
    199                      #if USE_MODBUS_PROTOCOL == 1
    200                      OS_Unuse(&adc_lock);
    201                      #endif
    202                  } 
   \   000005D4   95A3               INC     R26
   \   000005D6   CF2F               RJMP    ??AD7715_30
   \   000005D8                      REQUIRE _A_PORTE
    203              }
    204          }
    205          
    206          /*************************************************************************
    207          *
    208          *  Set ports on or off
    209          *
    210          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    211          void SetAnaPort(void) {
   \                     SetAnaPort:
    212          
    213              PORTC = (TData.Ana.PortUsed & 0xff) ;         // Set power on ports 0-7
   \   00000000   ....               LDI     R30, LOW(TData)
   \   00000002   ....               LDI     R31, (TData) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   8111               LDD     R17, Z+1
   \   00000008   B908               OUT     0x08, R16
    214              ClrBit(PORTB, 0xe1);                            // Set power on ports 8-11 off
   \   0000000A   9100....           LDS     R16, (OS_Global + 1)
   \   0000000E   7F00               ANDI    R16, 0xF0
   \   00000010   2300               TST     R16
   \   00000012   F021               BREQ    ??SetAnaPort_0
   \   00000014   E909               LDI     R16, 153
   \   00000016   E010               LDI     R17, 0
   \   00000018   ........           CALL    OS_Error
   \                     ??SetAnaPort_0:
   \   0000001C   94F8               cli
   \   0000001E   ....               LDI     R30, LOW(OS_Global)
   \   00000020   ....               LDI     R31, (OS_Global) >> 8
   \   00000022   8101               LDD     R16, Z+1
   \   00000024   9503               INC     R16
   \   00000026   8301               STD     Z+1, R16
   \   00000028   B105               IN      R16, 0x05
   \   0000002A   710E               ANDI    R16, 0x1E
   \   0000002C   B905               OUT     0x05, R16
   \   0000002E   9100....           LDS     R16, (OS_Global + 1)
   \   00000032   7F00               ANDI    R16, 0xF0
   \   00000034   2300               TST     R16
   \   00000036   F021               BREQ    ??SetAnaPort_1
   \   00000038   E909               LDI     R16, 153
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ........           CALL    OS_Error
   \                     ??SetAnaPort_1:
   \   00000040   ....               LDI     R30, LOW(OS_Global)
   \   00000042   ....               LDI     R31, (OS_Global) >> 8
   \   00000044   8101               LDD     R16, Z+1
   \   00000046   950A               DEC     R16
   \   00000048   8301               STD     Z+1, R16
   \   0000004A   9100....           LDS     R16, (OS_Global + 1)
   \   0000004E   2300               TST     R16
   \   00000050   F409               BRNE    ??SetAnaPort_2
   \   00000052   9478               sei
    215              SetBit(PORTB, TData.Ana.PortUsed>>8 & 0x01);    // Set power on port 8
   \                     ??SetAnaPort_2:
   \   00000054   9100....           LDS     R16, (OS_Global + 1)
   \   00000058   7F00               ANDI    R16, 0xF0
   \   0000005A   2300               TST     R16
   \   0000005C   F021               BREQ    ??SetAnaPort_3
   \   0000005E   E909               LDI     R16, 153
   \   00000060   E010               LDI     R17, 0
   \   00000062   ........           CALL    OS_Error
   \                     ??SetAnaPort_3:
   \   00000066   94F8               cli
   \   00000068   ....               LDI     R30, LOW(OS_Global)
   \   0000006A   ....               LDI     R31, (OS_Global) >> 8
   \   0000006C   8101               LDD     R16, Z+1
   \   0000006E   9503               INC     R16
   \   00000070   8301               STD     Z+1, R16
   \   00000072   ....               LDI     R30, LOW(TData)
   \   00000074   ....               LDI     R31, (TData) >> 8
   \   00000076   8101               LDD     R16, Z+1
   \   00000078   7001               ANDI    R16, 0x01
   \   0000007A   B115               IN      R17, 0x05
   \   0000007C   2B10               OR      R17, R16
   \   0000007E   B915               OUT     0x05, R17
   \   00000080   9100....           LDS     R16, (OS_Global + 1)
   \   00000084   7F00               ANDI    R16, 0xF0
   \   00000086   2300               TST     R16
   \   00000088   F021               BREQ    ??SetAnaPort_4
   \   0000008A   E909               LDI     R16, 153
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   ........           CALL    OS_Error
   \                     ??SetAnaPort_4:
   \   00000092   ....               LDI     R30, LOW(OS_Global)
   \   00000094   ....               LDI     R31, (OS_Global) >> 8
   \   00000096   8101               LDD     R16, Z+1
   \   00000098   950A               DEC     R16
   \   0000009A   8301               STD     Z+1, R16
   \   0000009C   9100....           LDS     R16, (OS_Global + 1)
   \   000000A0   2300               TST     R16
   \   000000A2   F409               BRNE    ??SetAnaPort_5
   \   000000A4   9478               sei
    216              SetBit(PORTB, TData.Ana.PortUsed>>4 & 0xe0);      // Set power on ports 9-11
   \                     ??SetAnaPort_5:
   \   000000A6   9100....           LDS     R16, (OS_Global + 1)
   \   000000AA   7F00               ANDI    R16, 0xF0
   \   000000AC   2300               TST     R16
   \   000000AE   F021               BREQ    ??SetAnaPort_6
   \   000000B0   E909               LDI     R16, 153
   \   000000B2   E010               LDI     R17, 0
   \   000000B4   ........           CALL    OS_Error
   \                     ??SetAnaPort_6:
   \   000000B8   94F8               cli
   \   000000BA   ....               LDI     R30, LOW(OS_Global)
   \   000000BC   ....               LDI     R31, (OS_Global) >> 8
   \   000000BE   8101               LDD     R16, Z+1
   \   000000C0   9503               INC     R16
   \   000000C2   8301               STD     Z+1, R16
   \   000000C4   ....               LDI     R30, LOW(TData)
   \   000000C6   ....               LDI     R31, (TData) >> 8
   \   000000C8   8100               LD      R16, Z
   \   000000CA   8111               LDD     R17, Z+1
   \   000000CC   E044               LDI     R20, 4
   \   000000CE   ........           CALL    ?US_SHR_L02
   \   000000D2   7E00               ANDI    R16, 0xE0
   \   000000D4   B115               IN      R17, 0x05
   \   000000D6   2B10               OR      R17, R16
   \   000000D8   B915               OUT     0x05, R17
   \   000000DA   9100....           LDS     R16, (OS_Global + 1)
   \   000000DE   7F00               ANDI    R16, 0xF0
   \   000000E0   2300               TST     R16
   \   000000E2   F021               BREQ    ??SetAnaPort_7
   \   000000E4   E909               LDI     R16, 153
   \   000000E6   E010               LDI     R17, 0
   \   000000E8   ........           CALL    OS_Error
   \                     ??SetAnaPort_7:
   \   000000EC   ....               LDI     R30, LOW(OS_Global)
   \   000000EE   ....               LDI     R31, (OS_Global) >> 8
   \   000000F0   8101               LDD     R16, Z+1
   \   000000F2   950A               DEC     R16
   \   000000F4   8301               STD     Z+1, R16
   \   000000F6   9100....           LDS     R16, (OS_Global + 1)
   \   000000FA   2300               TST     R16
   \   000000FC   F409               BRNE    ??SetAnaPort_8
   \   000000FE   9478               sei
    217          
    218          }
   \                     ??SetAnaPort_8:
   \   00000100   9508               RET
   \   00000102                      REQUIRE _A_PORTC
   \   00000102                      REQUIRE _A_PORTB
    219          
    220          /*************************************************************************
    221          *
    222          *  Read from AD-converter
    223          *
    224          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    225          char ReadAdByte(void) {
   \                     ReadAdByte:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    226          
    227              char i, readbyte;
    228          
    229              for (i = 0; i <  8; i++) {
   \   00000004   E080               LDI     R24, 0
   \                     ??ReadAdByte_0:
   \   00000006   3088               CPI     R24, 8
   \   00000008   F008               BRCS    $+2+2
   \   0000000A   C04E               RJMP    ??ReadAdByte_1
    230                  readbyte <<= 1 ;                    // shift to next bit 
   \   0000000C   0F99               LSL     R25
    231                  ClrBit(PORTD, ADCLK) ;
   \   0000000E   9100....           LDS     R16, (OS_Global + 1)
   \   00000012   7F00               ANDI    R16, 0xF0
   \   00000014   2300               TST     R16
   \   00000016   F021               BREQ    ??ReadAdByte_2
   \   00000018   E909               LDI     R16, 153
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   ........           CALL    OS_Error
   \                     ??ReadAdByte_2:
   \   00000020   94F8               cli
   \   00000022   ....               LDI     R30, LOW(OS_Global)
   \   00000024   ....               LDI     R31, (OS_Global) >> 8
   \   00000026   8101               LDD     R16, Z+1
   \   00000028   9503               INC     R16
   \   0000002A   8301               STD     Z+1, R16
   \   0000002C   9859               CBI     0x0B, 0x01
   \   0000002E   9100....           LDS     R16, (OS_Global + 1)
   \   00000032   7F00               ANDI    R16, 0xF0
   \   00000034   2300               TST     R16
   \   00000036   F021               BREQ    ??ReadAdByte_3
   \   00000038   E909               LDI     R16, 153
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ........           CALL    OS_Error
   \                     ??ReadAdByte_3:
   \   00000040   ....               LDI     R30, LOW(OS_Global)
   \   00000042   ....               LDI     R31, (OS_Global) >> 8
   \   00000044   8101               LDD     R16, Z+1
   \   00000046   950A               DEC     R16
   \   00000048   8301               STD     Z+1, R16
   \   0000004A   9100....           LDS     R16, (OS_Global + 1)
   \   0000004E   2300               TST     R16
   \   00000050   F409               BRNE    ??ReadAdByte_4
   \   00000052   9478               sei
    232                  SetBit(PORTD, ADCLK) ;                  // set clock line high 
   \                     ??ReadAdByte_4:
   \   00000054   9100....           LDS     R16, (OS_Global + 1)
   \   00000058   7F00               ANDI    R16, 0xF0
   \   0000005A   2300               TST     R16
   \   0000005C   F021               BREQ    ??ReadAdByte_5
   \   0000005E   E909               LDI     R16, 153
   \   00000060   E010               LDI     R17, 0
   \   00000062   ........           CALL    OS_Error
   \                     ??ReadAdByte_5:
   \   00000066   94F8               cli
   \   00000068   ....               LDI     R30, LOW(OS_Global)
   \   0000006A   ....               LDI     R31, (OS_Global) >> 8
   \   0000006C   8101               LDD     R16, Z+1
   \   0000006E   9503               INC     R16
   \   00000070   8301               STD     Z+1, R16
   \   00000072   9A59               SBI     0x0B, 0x01
   \   00000074   9100....           LDS     R16, (OS_Global + 1)
   \   00000078   7F00               ANDI    R16, 0xF0
   \   0000007A   2300               TST     R16
   \   0000007C   F021               BREQ    ??ReadAdByte_6
   \   0000007E   E909               LDI     R16, 153
   \   00000080   E010               LDI     R17, 0
   \   00000082   ........           CALL    OS_Error
   \                     ??ReadAdByte_6:
   \   00000086   ....               LDI     R30, LOW(OS_Global)
   \   00000088   ....               LDI     R31, (OS_Global) >> 8
   \   0000008A   8101               LDD     R16, Z+1
   \   0000008C   950A               DEC     R16
   \   0000008E   8301               STD     Z+1, R16
   \   00000090   9100....           LDS     R16, (OS_Global + 1)
   \   00000094   2300               TST     R16
   \   00000096   F409               BRNE    ??ReadAdByte_7
   \   00000098   9478               sei
    233                  if (PING & ADDO) {                  // data  = 1?
   \                     ??ReadAdByte_7:
   \   0000009A   9B93               SBIS    0x12, 0x03
   \   0000009C   C002               RJMP    ??ReadAdByte_8
    234                      readbyte |= 0x01 ;                    // set bit high 
   \   0000009E   6091               ORI     R25, 0x01
   \   000000A0   C001               RJMP    ??ReadAdByte_9
    235                  } else {
    236                      readbyte &= ~0x01 ;                   // set bit low 
   \                     ??ReadAdByte_8:
   \   000000A2   7F9E               ANDI    R25, 0xFE
    237                  }
    238              }
   \                     ??ReadAdByte_9:
   \   000000A4   9583               INC     R24
   \   000000A6   CFAF               RJMP    ??ReadAdByte_0
    239              return readbyte ;
   \                     ??ReadAdByte_1:
   \   000000A8   2F09               MOV     R16, R25
   \   000000AA   9189               LD      R24, Y+
   \   000000AC   9199               LD      R25, Y+
   \   000000AE   9508               RET
   \   000000B0                      REQUIRE _A_PORTD
   \   000000B0                      REQUIRE _A_PING
    240          }
    241          
    242          /*************************************************************************
    243          *
    244          *  Write to AD-converter
    245          *
    246          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    247          void WriteAdByte(char data) {
   \                     WriteAdByte:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   2F80               MOV     R24, R16
    248          
    249              char i;
    250          
    251              for (i = 0; i <  8; i++) {
   \   00000006   E090               LDI     R25, 0
   \                     ??WriteAdByte_0:
   \   00000008   3098               CPI     R25, 8
   \   0000000A   F008               BRCS    $+2+2
   \   0000000C   C092               RJMP    ??WriteAdByte_1
    252                  ClrBit(PORTD, ADCLK) ;                  // set clock line low
   \   0000000E   9100....           LDS     R16, (OS_Global + 1)
   \   00000012   7F00               ANDI    R16, 0xF0
   \   00000014   2300               TST     R16
   \   00000016   F021               BREQ    ??WriteAdByte_2
   \   00000018   E909               LDI     R16, 153
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   ........           CALL    OS_Error
   \                     ??WriteAdByte_2:
   \   00000020   94F8               cli
   \   00000022   ....               LDI     R30, LOW(OS_Global)
   \   00000024   ....               LDI     R31, (OS_Global) >> 8
   \   00000026   8101               LDD     R16, Z+1
   \   00000028   9503               INC     R16
   \   0000002A   8301               STD     Z+1, R16
   \   0000002C   9859               CBI     0x0B, 0x01
   \   0000002E   9100....           LDS     R16, (OS_Global + 1)
   \   00000032   7F00               ANDI    R16, 0xF0
   \   00000034   2300               TST     R16
   \   00000036   F021               BREQ    ??WriteAdByte_3
   \   00000038   E909               LDI     R16, 153
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ........           CALL    OS_Error
   \                     ??WriteAdByte_3:
   \   00000040   ....               LDI     R30, LOW(OS_Global)
   \   00000042   ....               LDI     R31, (OS_Global) >> 8
   \   00000044   8101               LDD     R16, Z+1
   \   00000046   950A               DEC     R16
   \   00000048   8301               STD     Z+1, R16
   \   0000004A   9100....           LDS     R16, (OS_Global + 1)
   \   0000004E   2300               TST     R16
   \   00000050   F409               BRNE    ??WriteAdByte_4
   \   00000052   9478               sei
    253                  if (data & 0x80) {                  // data bit = 1? 
   \                     ??WriteAdByte_4:
   \   00000054   FF87               SBRS    R24, 7
   \   00000056   C024               RJMP    ??WriteAdByte_5
    254                      SetBit(PORTG,ADDI) ;                  // set data high 
   \   00000058   9100....           LDS     R16, (OS_Global + 1)
   \   0000005C   7F00               ANDI    R16, 0xF0
   \   0000005E   2300               TST     R16
   \   00000060   F021               BREQ    ??WriteAdByte_6
   \   00000062   E909               LDI     R16, 153
   \   00000064   E010               LDI     R17, 0
   \   00000066   ........           CALL    OS_Error
   \                     ??WriteAdByte_6:
   \   0000006A   94F8               cli
   \   0000006C   ....               LDI     R30, LOW(OS_Global)
   \   0000006E   ....               LDI     R31, (OS_Global) >> 8
   \   00000070   8101               LDD     R16, Z+1
   \   00000072   9503               INC     R16
   \   00000074   8301               STD     Z+1, R16
   \   00000076   9AA4               SBI     0x14, 0x04
   \   00000078   9100....           LDS     R16, (OS_Global + 1)
   \   0000007C   7F00               ANDI    R16, 0xF0
   \   0000007E   2300               TST     R16
   \   00000080   F021               BREQ    ??WriteAdByte_7
   \   00000082   E909               LDI     R16, 153
   \   00000084   E010               LDI     R17, 0
   \   00000086   ........           CALL    OS_Error
   \                     ??WriteAdByte_7:
   \   0000008A   ....               LDI     R30, LOW(OS_Global)
   \   0000008C   ....               LDI     R31, (OS_Global) >> 8
   \   0000008E   8101               LDD     R16, Z+1
   \   00000090   950A               DEC     R16
   \   00000092   8301               STD     Z+1, R16
   \   00000094   9100....           LDS     R16, (OS_Global + 1)
   \   00000098   2300               TST     R16
   \   0000009A   F529               BRNE    ??WriteAdByte_8
   \   0000009C   9478               sei
   \   0000009E   C023               RJMP    ??WriteAdByte_8
    255                  } else {
    256                      ClrBit(PORTG, ADDI) ;                 // set data low 
   \                     ??WriteAdByte_5:
   \   000000A0   9100....           LDS     R16, (OS_Global + 1)
   \   000000A4   7F00               ANDI    R16, 0xF0
   \   000000A6   2300               TST     R16
   \   000000A8   F021               BREQ    ??WriteAdByte_9
   \   000000AA   E909               LDI     R16, 153
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   ........           CALL    OS_Error
   \                     ??WriteAdByte_9:
   \   000000B2   94F8               cli
   \   000000B4   ....               LDI     R30, LOW(OS_Global)
   \   000000B6   ....               LDI     R31, (OS_Global) >> 8
   \   000000B8   8101               LDD     R16, Z+1
   \   000000BA   9503               INC     R16
   \   000000BC   8301               STD     Z+1, R16
   \   000000BE   98A4               CBI     0x14, 0x04
   \   000000C0   9100....           LDS     R16, (OS_Global + 1)
   \   000000C4   7F00               ANDI    R16, 0xF0
   \   000000C6   2300               TST     R16
   \   000000C8   F021               BREQ    ??WriteAdByte_10
   \   000000CA   E909               LDI     R16, 153
   \   000000CC   E010               LDI     R17, 0
   \   000000CE   ........           CALL    OS_Error
   \                     ??WriteAdByte_10:
   \   000000D2   ....               LDI     R30, LOW(OS_Global)
   \   000000D4   ....               LDI     R31, (OS_Global) >> 8
   \   000000D6   8101               LDD     R16, Z+1
   \   000000D8   950A               DEC     R16
   \   000000DA   8301               STD     Z+1, R16
   \   000000DC   9100....           LDS     R16, (OS_Global + 1)
   \   000000E0   2300               TST     R16
   \   000000E2   F409               BRNE    ??WriteAdByte_8
   \   000000E4   9478               sei
    257                  }
    258                  data <<= 1 ;                        // shift to next bit 
   \                     ??WriteAdByte_8:
   \   000000E6   0F88               LSL     R24
    259                  SetBit(PORTD, ADCLK) ;                  // set clock line high 
   \   000000E8   9100....           LDS     R16, (OS_Global + 1)
   \   000000EC   7F00               ANDI    R16, 0xF0
   \   000000EE   2300               TST     R16
   \   000000F0   F021               BREQ    ??WriteAdByte_11
   \   000000F2   E909               LDI     R16, 153
   \   000000F4   E010               LDI     R17, 0
   \   000000F6   ........           CALL    OS_Error
   \                     ??WriteAdByte_11:
   \   000000FA   94F8               cli
   \   000000FC   ....               LDI     R30, LOW(OS_Global)
   \   000000FE   ....               LDI     R31, (OS_Global) >> 8
   \   00000100   8101               LDD     R16, Z+1
   \   00000102   9503               INC     R16
   \   00000104   8301               STD     Z+1, R16
   \   00000106   9A59               SBI     0x0B, 0x01
   \   00000108   9100....           LDS     R16, (OS_Global + 1)
   \   0000010C   7F00               ANDI    R16, 0xF0
   \   0000010E   2300               TST     R16
   \   00000110   F021               BREQ    ??WriteAdByte_12
   \   00000112   E909               LDI     R16, 153
   \   00000114   E010               LDI     R17, 0
   \   00000116   ........           CALL    OS_Error
   \                     ??WriteAdByte_12:
   \   0000011A   ....               LDI     R30, LOW(OS_Global)
   \   0000011C   ....               LDI     R31, (OS_Global) >> 8
   \   0000011E   8101               LDD     R16, Z+1
   \   00000120   950A               DEC     R16
   \   00000122   8301               STD     Z+1, R16
   \   00000124   9100....           LDS     R16, (OS_Global + 1)
   \   00000128   2300               TST     R16
   \   0000012A   F409               BRNE    ??WriteAdByte_13
   \   0000012C   9478               sei
    260              }           
   \                     ??WriteAdByte_13:
   \   0000012E   9593               INC     R25
   \   00000130   CF6B               RJMP    ??WriteAdByte_0
    261          }       
   \                     ??WriteAdByte_1:
   \   00000132   9189               LD      R24, Y+
   \   00000134   9199               LD      R25, Y+
   \   00000136   9508               RET
   \   00000138                      REQUIRE _A_PORTD
   \   00000138                      REQUIRE _A_PORTG
    262          
    263          /*************************************************************************
    264          *  
    265          * public utilities
    266          *
    267          *************************************************************************/
    268          #if USE_MODBUS_PROTOCOL == 1
    269          static inline float
    270          u16_to_float_offset(uint16_t offset)
    271          {
    272            return ((float)offset - 20000.0f)/10000.0f;
    273          }
    274          
    275          static inline uint16_t
    276          float_offset_to_u16(float offset)
    277          {
    278            return (uint16_t)(floor(offset*10000 + 0.5f)) + 20000;
    279          }
    280          
    281          static inline float
    282          u16_to_float_gain(uint16_t gain)
    283          {
    284            return ((float)gain)/10000.0f;
    285          }
    286          
    287          static inline uint16_t
    288          float_gain_to_u16(float gain)
    289          {
    290            return (uint16_t)(floor(gain * 10000.0f + 0.5f));
    291          }
    292          
    293          static inline float
    294          u16_to_float_filter(uint16_t filter)
    295          {
    296            return filter / 10000.0f;
    297          }
    298          
    299          static inline uint16_t
    300          float_filter_to_u16(float filter)
    301          {
    302            return (uint16_t)(floor(filter * 10000 + 0.5f));
    303          }
    304          
    305          static inline uint16_t
    306          float_ma_to_u16(float ma)
    307          {
    308            return (uint16_t)(floor(ma * 1000.0f + 0.5f));
    309          }
    310          
    311          static void
    312          load_eeprom_misc(void)
    313          {
    314            char ch;
    315            uint16_t temp;
    316          
    317            for (ch = 0; ch < 2; ch++)
    318            {
    319              ReadEEPROMBuffer(EEPROM_RSP_DELAY_ADDR(ch), sizeof(uint16_t), (char*)&temp);
    320          
    321              if (temp > 0 && temp <= 5000)
    322              {
    323                TData.Ana.Rsp_Delay[ch] = temp;
    324              }
    325              else
    326              {
    327                TData.Ana.Rsp_Delay[ch] = 0;
    328              }
    329            }
    330          }
    331          
    332          //
    333          // gain
    334          //
    335          static inline void
    336          __adc_task_set_gain(uint8_t ch, uint16_t gain)
    337          {
    338            float gain_f;
    339            uint16_t gain_cur = float_gain_to_u16(TData.Ana.Gain[ch]);
    340          
    341            if (gain == gain_cur)
    342            {
    343              return;
    344            }
    345          
    346            gain_f = u16_to_float_gain(gain);
    347            if(fcompare(gain_f, ADC_GAIN_MIN) <= 0 || fcompare(gain_f, ADC_GAIN_MAX) >= 0)
    348            {
    349              // invalid value just silently ignore
    350              return;
    351            }
    352          
    353            TData.Ana.Gain[ch] = gain_f;
    354            WriteEEPROMBufferSync(EEPROM_GAIN_ADDR(ch), sizeof(float), (char*)&gain_f);
    355          }
    356          
    357          void
    358          adc_task_set_gain(uint8_t ch, uint16_t gain)
    359          {
    360            OS_Use(&adc_lock);
    361            __adc_task_set_gain(ch, gain);
    362            OS_Unuse(&adc_lock);
    363          }
    364          
    365          uint16_t
    366          adc_task_get_gain(uint8_t ch)
    367          {
    368            uint16_t ret;
    369          
    370            OS_Use(&adc_lock);
    371            ret = float_gain_to_u16(TData.Ana.Gain[ch]);
    372            OS_Unuse(&adc_lock);
    373          
    374            return ret;
    375          }
    376          
    377          //
    378          // offset
    379          //
    380          static void
    381          __adc_task_set_offset(uint8_t ch, uint16_t offset)
    382          {
    383            float offset_f;
    384            uint16_t offset_cur = float_offset_to_u16(TData.Ana.Offset[ch]);
    385          
    386            if(offset == offset_cur)
    387            {
    388              return;
    389            }
    390          
    391            offset_f = u16_to_float_offset(offset);
    392            if (fcompare(offset_f, ADC_OFFSET_MIN) <= 0 || fcompare(offset_f, ADC_OFFSET_MAX) >= 0)
    393            {
    394              // invalid value just silently ignore
    395              return;
    396            }
    397          
    398            TData.Ana.Offset[ch] = offset_f;
    399          
    400            WriteEEPROMBufferSync(EEPROM_OFFSET_ADDR(ch), sizeof(float), (char*)&offset_f);
    401          }
    402          
    403          void
    404          adc_task_set_offset(uint8_t ch, uint16_t offset)
    405          {
    406            OS_Use(&adc_lock);
    407            __adc_task_set_offset(ch, offset);
    408            OS_Unuse(&adc_lock);
    409          }
    410          
    411          uint16_t
    412          adc_task_get_offset(uint8_t ch)
    413          {
    414            uint16_t ret;
    415          
    416            OS_Use(&adc_lock);
    417            ret =  float_offset_to_u16(TData.Ana.Offset[ch]);
    418            OS_Unuse(&adc_lock);
    419          
    420            return ret;
    421          }
    422          
    423          //
    424          // filter
    425          //
    426          static void
    427          __adc_task_set_filter(uint8_t ch, uint16_t filter)
    428          {
    429            float filter_f;
    430            uint16_t filter_cur = float_filter_to_u16(TData.Ana.Filter[ch]);
    431          
    432            if (filter_cur == filter)
    433            {
    434              return;
    435            }
    436          
    437            filter_f = u16_to_float_filter(filter);
    438            if (fcompare(filter_f, ADC_FILTER_MIN) <= 0 || fcompare(filter_f, ADC_FILTER_MAX) >= 0)
    439            {
    440              // invalid value just silently ignore
    441              return;
    442            }
    443          
    444            TData.Ana.Filter[ch] = filter_f;
    445          }
    446          
    447          void
    448          adc_task_set_filter(uint8_t ch, uint16_t filter)
    449          {
    450            OS_Use(&adc_lock);
    451            __adc_task_set_filter(ch, filter);
    452            OS_Unuse(&adc_lock);
    453          }
    454          
    455          uint16_t
    456          adc_task_get_filter(uint8_t ch)
    457          {
    458            uint16_t ret;
    459          
    460            OS_Use(&adc_lock);
    461            ret = float_filter_to_u16(TData.Ana.Filter[ch]);
    462            OS_Unuse(&adc_lock);
    463          
    464            return ret;
    465          }
    466          
    467          //
    468          // power
    469          //
    470          static void
    471          adc_task_control_port_power(uint8_t ch, uint8_t on)
    472          {
    473            switch(ch)
    474            {
    475            case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
    476              // PORTC 0-7
    477              if(on)
    478              {
    479                SetBit(PORTC, _BV(ch));
    480              }
    481              else
    482              {
    483                ClrBit(PORTC, _BV(ch));
    484              }
    485              break;
    486          
    487            case 8:
    488              // PORTB 0
    489              if(on)
    490              {
    491                SetBit(PORTB, _BV(0));
    492              }
    493              else
    494              {
    495                ClrBit(PORTB, _BV(0));
    496              }
    497              break;
    498          
    499            case 9: case 10: case 11:
    500              // PORTB 5-7
    501              if(on)
    502              {
    503                SetBit(PORTB, _BV(ch - 4));
    504              }
    505              else
    506              {
    507                ClrBit(PORTB, _BV(ch - 4));
    508              }
    509              break;
    510            }
    511          }
    512          
    513          static void
    514          __adc_task_set_power(uint8_t ch, uint8_t on)
    515          {
    516            uint8_t current;
    517          
    518            current = (TData.Ana.PortUsed >> ch) & 0x01;
    519          
    520            if(current == on)
    521            {
    522              // no need to waste time
    523              return;
    524            }
    525          
    526            adc_task_control_port_power(ch, on);
    527          
    528            // save to eeprom
    529            if(on)
    530            {
    531              TData.Ana.PortUsed |= (1 << ch);
    532            }
    533            else
    534            {
    535              TData.Ana.PortUsed &= ~(1 << ch);
    536            }
    537          
    538            WriteEEPROMByte(EEPROM_PORTSETUP + 0, (TData.Ana.PortUsed & 0xff));
    539            WriteEEPROMByte(EEPROM_PORTSETUP + 1, (TData.Ana.PortUsed >> 8) & 0xff);
    540          }
    541          
    542          void
    543          adc_task_set_power(uint8_t ch, uint8_t on)
    544          {
    545            OS_Use(&adc_lock);
    546            __adc_task_set_power(ch, on);
    547            OS_Unuse(&adc_lock);
    548          }
    549          
    550          uint8_t
    551          adc_task_get_power(uint8_t ch)
    552          {
    553            uint8_t status;
    554          
    555            OS_Use(&adc_lock);
    556            status = (TData.Ana.PortUsed >> ch) & 0x01;
    557            OS_Unuse(&adc_lock);
    558          
    559            return status;
    560          }
    561          
    562          //
    563          // status
    564          //
    565          uint8_t
    566          adc_task_get_status(uint8_t ch)
    567          {
    568            uint8_t status;
    569          
    570            OS_Use(&adc_lock);
    571            status = TData.Ana.Status[ch];
    572            OS_Unuse(&adc_lock);
    573          
    574            return status;
    575          }
    576          
    577          //
    578          // ma
    579          //
    580          uint16_t
    581          adc_task_get_ma(uint8_t ch)
    582          {
    583            float ma_f;
    584          
    585            OS_Use(&adc_lock);
    586            ma_f = TData.Ana.Result[ch];
    587            OS_Unuse(&adc_lock);
    588          
    589            return float_ma_to_u16(ma_f);
    590          }
    591          
    592          static void
    593          __adc_task_set_rsp_delay(char port, uint16_t delay)
    594          {
    595            uint16_t cur_delay = TData.Ana.Rsp_Delay[port];
    596          
    597            if(cur_delay == delay)
    598            {
    599              return;
    600            }
    601          
    602            if (delay > 5000)
    603            {
    604              return;
    605            }
    606          
    607            TData.Ana.Rsp_Delay[port] = delay;
    608          
    609            WriteEEPROMBufferSync(EEPROM_RSP_DELAY_ADDR(port), sizeof(uint16_t), (char*)&delay);
    610          }
    611          
    612          void
    613          adc_task_set_rsp_delay(char port, uint16_t delay)
    614          {
    615            OS_Use(&adc_lock);
    616            __adc_task_set_rsp_delay(port, delay);
    617            OS_Unuse(&adc_lock);
    618          }
    619          
    620          uint16_t
    621          adc_task_get_rsp_delay(char port)
    622          {
    623            uint16_t    ret;
    624          
    625            OS_Use(&adc_lock);
    626            ret = TData.Ana.Rsp_Delay[port];
    627            OS_Unuse(&adc_lock);
    628          
    629            return ret;
    630          }
    631          
    632          #endif /* USE_MODBUS_PROTOCOL == 1 */

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     12      2   AD7715
       12      2   -> IsFloat
       12      2   -> OS_ClearEvents
       12      2   -> OS_Delay
       12      2   -> OS_Error
       12      2   -> OS_WaitEventTimed
       12      2   -> ReadAdByte
       12      2   -> ReadEEPROMBuffer
       12      2   -> ReadEEPROMByte
       12      2   -> SetAnaPort
       12      2   -> WriteAdByte
       12      2   -> fcompare
       12      2 ?F_ADD_L04
       12      2 ?F_DIV_L04
       12      2 ?F_MUL_L04
       12      2 ?F_SUB_L04
       12      2 ?S_SHL_L02
       12      2 ?UL2F_L04
      2      2   ReadAdByte
        2      2   -> OS_Error
      0      2   SetAnaPort
        0      2   -> OS_Error
        0      2 ?US_SHR_L02
      2      2   WriteAdByte
        2      2   -> OS_Error
      8      2   fcompare
        8      2 ?F_CMP_GE_L04
        8      2 ?F_CMP_LT_L04
        8      2 ?F_SUB_L04


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
   1'496  AD7715
     176  ReadAdByte
     258  SetAnaPort
     312  WriteAdByte
       1  _A_PING
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTG
      98  fcompare

 
     6 bytes in segment ABSOLUTE
 2'340 bytes in segment CODE
 
 2'340 bytes of CODE memory
     0 bytes of DATA memory (+ 6 bytes shared)

Errors: none
Warnings: none
