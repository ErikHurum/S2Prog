###############################################################################
#
# IAR C/C++ Compiler V8.10.1.1784/W64 for Microchip AVR   02/May/2023  12:58:19
# Copyright 1996-2023 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file           =  D:\S2Prog\IO\ANZB_ATmega1281\Src\UsartPro.c
#    Command line          =
#        -f D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\UsartPro.r90.rsp
#        (D:\S2Prog\IO\ANZB_ATmega1281\Src\UsartPro.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main -D OS_LIBMODE_D -D
#        OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D USE_MODBUS_PROTOCOL=0 -lCN
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\List\Main -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB_ATmega1281\INC\ -I
#        D:\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\ --eeprom_size 4096
#        --clib -On) --dependencies=n
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\UsartPro.r90.iar_deps
#    Locale                =  C
#    List file             =
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\List\Main\UsartPro.lst
#    Object file           =
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\UsartPro.r90
#    Runtime model:           
#      __64bit_doubles     =  disabled
#      __SystemLibrary     =  CLib
#      __architecture      =  *
#      __cpu               =  3
#      __cpu_name          =  ATmega1281
#      __dlib_version      =  clib
#      __enhanced_core     =  enabled
#      __enhanced_core_mul =  enabled
#      __has_elpm          =  true
#      __memory_model      =  2
#      __mex               =  disabled
#      __no_rampd          =  enabled
#      __rt_version        =  3
#      __vtable_memory     =  __nearflash
#
###############################################################################

D:\S2Prog\IO\ANZB_ATmega1281\Src\UsartPro.c
      1          /****************************************************************************************
      2          / Com protocol for USART0
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xc9
   \   __no_init union <unnamed>#53 volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   __no_init union <unnamed>#72 volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   __no_init union <unnamed>#309 volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   __no_init union <unnamed>#376 volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x40
   \   __no_init union <unnamed>#382 volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3f
   \   __no_init union <unnamed>#385 volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   __no_init union <unnamed>#436 volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "string.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          
     13          /*************************************************************************
     14          *   (This is a timer calback)
     15          *  Timout timer USART 0
     16          *
     17          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     18          void TimoutUSART0(void) {
   \                     TimoutUSART0:
     19          
     20              UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   7D0F               ANDI    R16, 0xDF
   \   00000006   930000C1           STS     193, R16
     21              ClrBit(PORTE, 0x04) ;                              // TXE0 off
   \   0000000A   9100....           LDS     R16, (OS_Global + 1)
   \   0000000E   7F00               ANDI    R16, 0xF0
   \   00000010   2300               TST     R16
   \   00000012   F021               BREQ    ??TimoutUSART0_0
   \   00000014   E909               LDI     R16, 153
   \   00000016   E010               LDI     R17, 0
   \   00000018   ........           CALL    OS_Error
   \                     ??TimoutUSART0_0:
   \   0000001C   94F8               cli
   \   0000001E   ....               LDI     R30, LOW(OS_Global)
   \   00000020   ....               LDI     R31, (OS_Global) >> 8
   \   00000022   8101               LDD     R16, Z+1
   \   00000024   9503               INC     R16
   \   00000026   8301               STD     Z+1, R16
   \   00000028   9872               CBI     0x0E, 0x02
   \   0000002A   9100....           LDS     R16, (OS_Global + 1)
   \   0000002E   7F00               ANDI    R16, 0xF0
   \   00000030   2300               TST     R16
   \   00000032   F021               BREQ    ??TimoutUSART0_1
   \   00000034   E909               LDI     R16, 153
   \   00000036   E010               LDI     R17, 0
   \   00000038   ........           CALL    OS_Error
   \                     ??TimoutUSART0_1:
   \   0000003C   ....               LDI     R30, LOW(OS_Global)
   \   0000003E   ....               LDI     R31, (OS_Global) >> 8
   \   00000040   8101               LDD     R16, Z+1
   \   00000042   950A               DEC     R16
   \   00000044   8301               STD     Z+1, R16
   \   00000046   9100....           LDS     R16, (OS_Global + 1)
   \   0000004A   2300               TST     R16
   \   0000004C   F409               BRNE    ??TimoutUSART0_2
   \   0000004E   9478               sei
     22              OS_StopTimer(&TimerUSART0);                    // and stop timer
   \                     ??TimoutUSART0_2:
   \   00000050   ....               LDI     R16, LOW(TimerUSART0)
   \   00000052   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000054   ........           CALL    OS_StopTimer
     23              GoToSyncUART(0) ;                                    // go to sync modus for recive
   \   00000058   E000               LDI     R16, 0
   \   0000005A   ....               RCALL   GoToSyncUART
     24          }
   \   0000005C   9508               RET
   \   0000005E                      REQUIRE _A_UCSR0B
   \   0000005E                      REQUIRE _A_PORTE
     25          
     26          /*************************************************************************
     27          *   (This is a timer calback)
     28          *  Timer USART 0 on before TX
     29          *
     30          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     31          void TimoutUSART0On(void) {
   \                     TimoutUSART0On:
     32          
     33              UCSR0B |= __BIT_MASK( UDRIE0) ;                     // start sending by enableing interrupt
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   6200               ORI     R16, 0x20
   \   00000006   930000C1           STS     193, R16
     34              OS_StopTimer(&TimerUSART0On);                    // and stop timer
   \   0000000A   ....               LDI     R16, LOW(TimerUSART0On)
   \   0000000C   ....               LDI     R17, (TimerUSART0On) >> 8
   \   0000000E   ........           CALL    OS_StopTimer
     35          }
   \   00000012   9508               RET
   \   00000014                      REQUIRE _A_UCSR0B
     36          
     37          /*************************************************************************
     38          *   (This is a timer calback)
     39          *  Timout timer USART 1
     40          *
     41          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     42          void TimoutUSART1(void) {
   \                     TimoutUSART1:
     43          
     44              UCSR1B &= ~(__BIT_MASK( UDRIE1)) ;            // transmission end, disable int.
   \   00000000   910000C9           LDS     R16, 201
   \   00000004   7D0F               ANDI    R16, 0xDF
   \   00000006   930000C9           STS     201, R16
     45              ClrBit(PORTE, 0x08) ;                              // TXE1 off
   \   0000000A   9100....           LDS     R16, (OS_Global + 1)
   \   0000000E   7F00               ANDI    R16, 0xF0
   \   00000010   2300               TST     R16
   \   00000012   F021               BREQ    ??TimoutUSART1_0
   \   00000014   E909               LDI     R16, 153
   \   00000016   E010               LDI     R17, 0
   \   00000018   ........           CALL    OS_Error
   \                     ??TimoutUSART1_0:
   \   0000001C   94F8               cli
   \   0000001E   ....               LDI     R30, LOW(OS_Global)
   \   00000020   ....               LDI     R31, (OS_Global) >> 8
   \   00000022   8101               LDD     R16, Z+1
   \   00000024   9503               INC     R16
   \   00000026   8301               STD     Z+1, R16
   \   00000028   9873               CBI     0x0E, 0x03
   \   0000002A   9100....           LDS     R16, (OS_Global + 1)
   \   0000002E   7F00               ANDI    R16, 0xF0
   \   00000030   2300               TST     R16
   \   00000032   F021               BREQ    ??TimoutUSART1_1
   \   00000034   E909               LDI     R16, 153
   \   00000036   E010               LDI     R17, 0
   \   00000038   ........           CALL    OS_Error
   \                     ??TimoutUSART1_1:
   \   0000003C   ....               LDI     R30, LOW(OS_Global)
   \   0000003E   ....               LDI     R31, (OS_Global) >> 8
   \   00000040   8101               LDD     R16, Z+1
   \   00000042   950A               DEC     R16
   \   00000044   8301               STD     Z+1, R16
   \   00000046   9100....           LDS     R16, (OS_Global + 1)
   \   0000004A   2300               TST     R16
   \   0000004C   F409               BRNE    ??TimoutUSART1_2
   \   0000004E   9478               sei
     46              OS_StopTimer(&TimerUSART1);                    // and stop timer
   \                     ??TimoutUSART1_2:
   \   00000050   ....               LDI     R16, LOW(TimerUSART1)
   \   00000052   ....               LDI     R17, (TimerUSART1) >> 8
   \   00000054   ........           CALL    OS_StopTimer
     47              GoToSyncUART(1) ;                                    // go to sync modus for recive
   \   00000058   E001               LDI     R16, 1
   \   0000005A   ....               RCALL   GoToSyncUART
     48          }
   \   0000005C   9508               RET
   \   0000005E                      REQUIRE _A_UCSR1B
   \   0000005E                      REQUIRE _A_PORTE
     49          
     50          
     51          /*************************************************************************
     52          *   (This is a timer calback)
     53          *  Timer USART 1 on before TX
     54          *
     55          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     56          void TimoutUSART1On(void) {
   \                     TimoutUSART1On:
     57          
     58              UCSR1B |= __BIT_MASK( UDRIE1) ;                     // start sending by enableing interrupt
   \   00000000   910000C9           LDS     R16, 201
   \   00000004   6200               ORI     R16, 0x20
   \   00000006   930000C9           STS     201, R16
     59              OS_StopTimer(&TimerUSART1On);                    // and stop timer
   \   0000000A   ....               LDI     R16, LOW(TimerUSART1On)
   \   0000000C   ....               LDI     R17, (TimerUSART1On) >> 8
   \   0000000E   ........           CALL    OS_StopTimer
     60          }
   \   00000012   9508               RET
   \   00000014                      REQUIRE _A_UCSR1B
     61          
     62          
     63          /*************************************************************************
     64          *   (This is a task)
     65          *  Usart0 handler
     66          *
     67          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     68          void Usart0Handler(void) {
   \                     Usart0Handler:
   \   00000000   938A               ST      -Y, R24
     69              char stat;
     70          
     71              while (1) {
     72                  stat = OS_WaitEventTimed(1,500);
   \                     ??Usart0Handler_0:
   \   00000002   EF24               LDI     R18, 244
   \   00000004   E031               LDI     R19, 1
   \   00000006   E001               LDI     R16, 1
   \   00000008   ........           CALL    OS_WaitEventTimed
   \   0000000C   2F80               MOV     R24, R16
     73                  if (stat) {
   \   0000000E   2388               TST     R24
   \   00000010   F3C1               BREQ    ??Usart0Handler_0
     74                      OS_Use(&UARTSEND);
   \   00000012   ....               LDI     R16, LOW(UARTSEND)
   \   00000014   ....               LDI     R17, (UARTSEND) >> 8
   \   00000016   ........           CALL    OS_Use
     75                      UsartCheckPackage(0) ;
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   ....               RCALL   UsartCheckPackage
     76                      OS_Unuse(&UARTSEND);
   \   0000001E   ....               LDI     R16, LOW(UARTSEND)
   \   00000020   ....               LDI     R17, (UARTSEND) >> 8
   \   00000022   ........           CALL    OS_Unuse
   \   00000026   CFED               RJMP    ??Usart0Handler_0
     77                  }
     78              }
     79          }
     80          
     81          /*************************************************************************
     82          *   (This is a task)
     83          *  Usart1 handler
     84          *
     85          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     86          void Usart1Handler(void) {
   \                     Usart1Handler:
   \   00000000   938A               ST      -Y, R24
     87              char stat;
     88          
     89              while (1) {
     90                  stat = OS_WaitEventTimed(1,500);
   \                     ??Usart1Handler_0:
   \   00000002   EF24               LDI     R18, 244
   \   00000004   E031               LDI     R19, 1
   \   00000006   E001               LDI     R16, 1
   \   00000008   ........           CALL    OS_WaitEventTimed
   \   0000000C   2F80               MOV     R24, R16
     91                  if (stat) {
   \   0000000E   2388               TST     R24
   \   00000010   F3C1               BREQ    ??Usart1Handler_0
     92                      OS_Use(&UARTSEND);
   \   00000012   ....               LDI     R16, LOW(UARTSEND)
   \   00000014   ....               LDI     R17, (UARTSEND) >> 8
   \   00000016   ........           CALL    OS_Use
     93                      UsartCheckPackage(1) ;
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   ....               RCALL   UsartCheckPackage
     94                      OS_Unuse(&UARTSEND);
   \   0000001E   ....               LDI     R16, LOW(UARTSEND)
   \   00000020   ....               LDI     R17, (UARTSEND) >> 8
   \   00000022   ........           CALL    OS_Unuse
   \   00000026   CFED               RJMP    ??Usart1Handler_0
     95                  }
     96              }
     97          }
     98          
     99          /*************************************************************************
    100          *
    101          *  Check the incoming packages
    102          *
    103          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    104          void UsartCheckPackage(char ch) {
   \                     UsartCheckPackage:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2FA0               MOV     R26, R16
    105          
    106              unsigned short pointer;
    107              char    retval ;
    108          
    109              UART[ch].RxSendReply = false ;                              // flag for answering set to fault
   \   00000006   E10A               LDI     R16, 26
   \   00000008   9FA0               MUL     R26, R16
   \   0000000A   01F0               MOVW    R31:R30, R1:R0
   \   0000000C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000000E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000010   E000               LDI     R16, 0
   \   00000012   8F01               STD     Z+25, R16
    110              UART[ch].TxFirst = 11 ;                                     // Start pos for first TX command
   \   00000014   E00B               LDI     R16, 11
   \   00000016   E010               LDI     R17, 0
   \   00000018   E12A               LDI     R18, 26
   \   0000001A   9FA2               MUL     R26, R18
   \   0000001C   01F0               MOVW    R31:R30, R1:R0
   \   0000001E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000020   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000022   8302               STD     Z+2, R16
   \   00000024   8313               STD     Z+3, R17
    111              pointer = 7 ;
   \   00000026   E087               LDI     R24, 7
   \   00000028   E090               LDI     R25, 0
    112              do {
    113                  retval = CheckActionUart(ch, pointer);
   \                     ??UsartCheckPackage_0:
   \   0000002A   019C               MOVW    R19:R18, R25:R24
   \   0000002C   2F0A               MOV     R16, R26
   \   0000002E   ....               RCALL   CheckActionUart
   \   00000030   2FB0               MOV     R27, R16
    114                  pointer = pointer + UART[ch].pRxBuffer[pointer+2]
    115                            + (UART[ch].pRxBuffer[pointer+3]*256) + 4;      // Point to a command cmd hb/lb
   \   00000032   E10A               LDI     R16, 26
   \   00000034   9FA0               MUL     R26, R16
   \   00000036   01F0               MOVW    R31:R30, R1:R0
   \   00000038   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000003C   8502               LDD     R16, Z+10
   \   0000003E   8513               LDD     R17, Z+11
   \   00000040   0F08               ADD     R16, R24
   \   00000042   1F19               ADC     R17, R25
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   8122               LDD     R18, Z+2
   \   00000048   E10A               LDI     R16, 26
   \   0000004A   9FA0               MUL     R26, R16
   \   0000004C   01F0               MOVW    R31:R30, R1:R0
   \   0000004E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000050   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000052   8502               LDD     R16, Z+10
   \   00000054   8513               LDD     R17, Z+11
   \   00000056   0F08               ADD     R16, R24
   \   00000058   1F19               ADC     R17, R25
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   8113               LDD     R17, Z+3
   \   0000005E   2F02               MOV     R16, R18
   \   00000060   5F0C               SUBI    R16, 252
   \   00000062   4F1F               SBCI    R17, 255
   \   00000064   0F80               ADD     R24, R16
   \   00000066   1F91               ADC     R25, R17
    116              } while (retval && (pointer < (UART[ch].RxPacklen - 4 )));
   \   00000068   23BB               TST     R27
   \   0000006A   F061               BREQ    ??UsartCheckPackage_1
   \   0000006C   E10A               LDI     R16, 26
   \   0000006E   9FA0               MUL     R26, R16
   \   00000070   01F0               MOVW    R31:R30, R1:R0
   \   00000072   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000074   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000076   8906               LDD     R16, Z+22
   \   00000078   8917               LDD     R17, Z+23
   \   0000007A   5004               SUBI    R16, 4
   \   0000007C   4010               SBCI    R17, 0
   \   0000007E   1780               CP      R24, R16
   \   00000080   0791               CPC     R25, R17
   \   00000082   F298               BRCS    ??UsartCheckPackage_0
    117              if (UART[ch].RxSendReply) {                                   //send answer?
   \                     ??UsartCheckPackage_1:
   \   00000084   E10A               LDI     R16, 26
   \   00000086   9FA0               MUL     R26, R16
   \   00000088   01F0               MOVW    R31:R30, R1:R0
   \   0000008A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000008C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000008E   8D01               LDD     R16, Z+25
   \   00000090   2300               TST     R16
   \   00000092   F021               BREQ    ??UsartCheckPackage_2
    118                  Uart_BuildTail(ch);                                       // yes, build tail (and header) and start sending
   \   00000094   2F0A               MOV     R16, R26
   \   00000096   ........           CALL    Uart_BuildTail
   \   0000009A   C003               RJMP    ??UsartCheckPackage_3
    119              } else {
    120                  GoToSyncUART(ch) ;                                        // go to sync modus here if not reply
   \                     ??UsartCheckPackage_2:
   \   0000009C   2F0A               MOV     R16, R26
   \   0000009E   ........           CALL    GoToSyncUART
    121              }
    122          }
   \                     ??UsartCheckPackage_3:
   \   000000A2   E0E4               LDI     R30, 4
   \   000000A4   ........           JMP     ?EPILOGUE_B4_L09
    123          
    124          
    125          /*************************************************************************
    126          *
    127          *  Check action on received data
    128          *
    129          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    130          char CheckActionUart(char ch, unsigned short pointer) {
   \                     CheckActionUart:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    131          
    132              unsigned short   command;
    133              char    retval = true;
   \   00000008   E0B1               LDI     R27, 1
    134          
    135              command = UART[ch].pRxBuffer[pointer] | (UART[ch].pRxBuffer[pointer+1] << 8);
   \   0000000A   E10A               LDI     R16, 26
   \   0000000C   9FA0               MUL     R26, R16
   \   0000000E   01F0               MOVW    R31:R30, R1:R0
   \   00000010   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000014   8502               LDD     R16, Z+10
   \   00000016   8513               LDD     R17, Z+11
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   0FE8               ADD     R30, R24
   \   0000001C   1FF9               ADC     R31, R25
   \   0000001E   8040               LD      R4, Z
   \   00000020   E10A               LDI     R16, 26
   \   00000022   9FA0               MUL     R26, R16
   \   00000024   01F0               MOVW    R31:R30, R1:R0
   \   00000026   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002A   8502               LDD     R16, Z+10
   \   0000002C   8513               LDD     R17, Z+11
   \   0000002E   0F08               ADD     R16, R24
   \   00000030   1F19               ADC     R17, R25
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   8051               LDD     R5, Z+1
    136              switch (command) {                                  // check action
   \   00000036   0182               MOVW    R17:R16, R5:R4
   \   00000038   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart>_0`)
   \   0000003A   ....               LDI     R31, (`?<Jumptable for CheckActionUart>_0`) >> 16
   \   0000003C   BFFB               OUT     0x3B, R31
   \   0000003E   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart>_0`)
   \   00000040   ........           JMP     ?SV_SWITCH_L06
    137              case CMD_REQ_STATUS :                           // Regusest status for target
    138                  BuildStatusData(ch) ;                         // make package
   \                     ??CheckActionUart_0:
   \   00000044   2F0A               MOV     R16, R26
   \   00000046   ....               RCALL   BuildStatusData
    139                  break;
   \   00000048   C0D3               RJMP    ??CheckActionUart_1
    140          
    141              case CMD_GET_STACKSTATUS :                        // Request stck status
    142                  BuildStackStatus(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_2:
   \   0000004A   019C               MOVW    R19:R18, R25:R24
   \   0000004C   5F2C               SUBI    R18, 252
   \   0000004E   4F3F               SBCI    R19, 255
   \   00000050   2F0A               MOV     R16, R26
   \   00000052   ....               RCALL   BuildStackStatus
    143                  break ;
   \   00000054   C0CD               RJMP    ??CheckActionUart_1
    144          
    145              case CMD_EEPROM_RESET :                        // Reset EEPROM??
    146                  GetResetEEPROM(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_3:
   \   00000056   019C               MOVW    R19:R18, R25:R24
   \   00000058   5F2C               SUBI    R18, 252
   \   0000005A   4F3F               SBCI    R19, 255
   \   0000005C   2F0A               MOV     R16, R26
   \   0000005E   ....               RCALL   GetResetEEPROM
    147                  break ;
   \   00000060   C0C7               RJMP    ??CheckActionUart_1
    148          
    149              case CMD_GOTO_BOOTLOADER :                        // Goto bootlaoder??
    150                  GetGotoBootloader(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_4:
   \   00000062   019C               MOVW    R19:R18, R25:R24
   \   00000064   5F2C               SUBI    R18, 252
   \   00000066   4F3F               SBCI    R19, 255
   \   00000068   2F0A               MOV     R16, R26
   \   0000006A   ....               RCALL   GetGotoBootloader
    151                  break ;
   \   0000006C   C0C1               RJMP    ??CheckActionUart_1
    152          
    153              case CMD_SND_EEPROM_DATA :                              // Receive EEPROM data
    154                  GetEEPROMData(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_5:
   \   0000006E   019C               MOVW    R19:R18, R25:R24
   \   00000070   5F2C               SUBI    R18, 252
   \   00000072   4F3F               SBCI    R19, 255
   \   00000074   2F0A               MOV     R16, R26
   \   00000076   ....               RCALL   GetEEPROMData
    155                  break ;
   \   00000078   C0BB               RJMP    ??CheckActionUart_1
    156          
    157              case CMD_REQ_EEPROM_DATA :                              // Request to send EEPROM data
    158                  BuildEEPROMData(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_6:
   \   0000007A   019C               MOVW    R19:R18, R25:R24
   \   0000007C   5F2C               SUBI    R18, 252
   \   0000007E   4F3F               SBCI    R19, 255
   \   00000080   2F0A               MOV     R16, R26
   \   00000082   ....               RCALL   BuildEEPROMData
    159                  break ;
   \   00000084   C0B5               RJMP    ??CheckActionUart_1
    160          
    161              case CMD_REQ_INT_DATA :                              // Request external data
    162                  BuildADInt(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_7:
   \   00000086   019C               MOVW    R19:R18, R25:R24
   \   00000088   5F2C               SUBI    R18, 252
   \   0000008A   4F3F               SBCI    R19, 255
   \   0000008C   2F0A               MOV     R16, R26
   \   0000008E   ....               RCALL   BuildADInt
    163                  break ;
   \   00000090   C0AF               RJMP    ??CheckActionUart_1
    164          
    165              case CMD_SND_RS4_SETUP :                              // Receive sertup of AN-RS485
    166                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_8:
   \   00000092   9100....           LDS     R16, UnitID
   \   00000096   2300               TST     R16
   \   00000098   F429               BRNE    ??CheckActionUart_9
    167                      GetRS4Setup(ch, pointer+4) ;                     // receive package
   \   0000009A   019C               MOVW    R19:R18, R25:R24
   \   0000009C   5F2C               SUBI    R18, 252
   \   0000009E   4F3F               SBCI    R19, 255
   \   000000A0   2F0A               MOV     R16, R26
   \   000000A2   ....               RCALL   GetRS4Setup
    168                  }
    169                  break ;
   \                     ??CheckActionUart_9:
   \   000000A4   C0A5               RJMP    ??CheckActionUart_1
    170          
    171              case CMD_REQ_RS4_SETUP :                              // Request for sertup of AN-RS485
    172                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_10:
   \   000000A6   9100....           LDS     R16, UnitID
   \   000000AA   2300               TST     R16
   \   000000AC   F431               BRNE    ??CheckActionUart_11
    173                      BuildRS4Setup(ch, pointer+4) ;                     // receive package
   \   000000AE   019C               MOVW    R19:R18, R25:R24
   \   000000B0   5F2C               SUBI    R18, 252
   \   000000B2   4F3F               SBCI    R19, 255
   \   000000B4   2F0A               MOV     R16, R26
   \   000000B6   ........           CALL    BuildRS4Setup
    174                  }
    175                  break ;
   \                     ??CheckActionUart_11:
   \   000000BA   C09A               RJMP    ??CheckActionUart_1
    176          
    177              case CMD_SND_RS4_ADBUF :                              // Request external AD data
    178                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_12:
   \   000000BC   9100....           LDS     R16, UnitID
   \   000000C0   2300               TST     R16
   \   000000C2   F431               BRNE    ??CheckActionUart_13
    179                      GetADData(ch, pointer+4) ;                     // receive package
   \   000000C4   019C               MOVW    R19:R18, R25:R24
   \   000000C6   5F2C               SUBI    R18, 252
   \   000000C8   4F3F               SBCI    R19, 255
   \   000000CA   2F0A               MOV     R16, R26
   \   000000CC   ........           CALL    GetADData
    180                  }
    181                  break;
   \                     ??CheckActionUart_13:
   \   000000D0   C08F               RJMP    ??CheckActionUart_1
    182          
    183              case CMD_REQ_RS4_DATA :                              // Request external AD eeprom data
    184                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_14:
   \   000000D2   9100....           LDS     R16, UnitID
   \   000000D6   2300               TST     R16
   \   000000D8   F009               BREQ    $+2+2
   \   000000DA   C08A               RJMP    ??CheckActionUart_1
    185                      switch (UART[ch].pRxBuffer[pointer+4]) {
   \   000000DC   E10A               LDI     R16, 26
   \   000000DE   9FA0               MUL     R26, R16
   \   000000E0   01F0               MOVW    R31:R30, R1:R0
   \   000000E2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000E4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000E6   8502               LDD     R16, Z+10
   \   000000E8   8513               LDD     R17, Z+11
   \   000000EA   0F08               ADD     R16, R24
   \   000000EC   1F19               ADC     R17, R25
   \   000000EE   01F8               MOVW    R31:R30, R17:R16
   \   000000F0   8104               LDD     R16, Z+4
   \   000000F2   5000               SUBI    R16, 0
   \   000000F4   F019               BREQ    ??CheckActionUart_15
   \   000000F6   950A               DEC     R16
   \   000000F8   F1B9               BREQ    ??CheckActionUart_16
   \   000000FA   C07A               RJMP    ??CheckActionUart_1
    186                      case 0:                                         // Measure data
    187                          BuildMData485(ch, pointer+5) ;              // receive package
   \                     ??CheckActionUart_15:
   \   000000FC   019C               MOVW    R19:R18, R25:R24
   \   000000FE   5F2B               SUBI    R18, 251
   \   00000100   4F3F               SBCI    R19, 255
   \   00000102   2F0A               MOV     R16, R26
   \   00000104   ........           CALL    BuildMData485
    188                          if (TData.RS4.FromTargetBuffer[0][0] == true) {     // send eepromdata ch 0?
   \   00000108   9100....           LDS     R16, (TData + 1428)
   \   0000010C   3001               CPI     R16, 1
   \   0000010E   F439               BRNE    ??CheckActionUart_17
    189                            BuildADEpromdata(ch, 0);
   \   00000110   E010               LDI     R17, 0
   \   00000112   2F0A               MOV     R16, R26
   \   00000114   ........           CALL    BuildADEpromdata
    190                            TData.RS4.FromTargetBuffer[0][0] = false ;  // Marked as sent
   \   00000118   E000               LDI     R16, 0
   \   0000011A   9300....           STS     (TData + 1428), R16
    191                          }
    192                          if (TData.RS4.FromTargetBuffer[1][0] == true) {     // send eepromdata ch 1?
   \                     ??CheckActionUart_17:
   \   0000011E   9100....           LDS     R16, (TData + 1478)
   \   00000122   3001               CPI     R16, 1
   \   00000124   F439               BRNE    ??CheckActionUart_18
    193                            BuildADEpromdata(ch, 1);                  // channel 1
   \   00000126   E011               LDI     R17, 1
   \   00000128   2F0A               MOV     R16, R26
   \   0000012A   ........           CALL    BuildADEpromdata
    194                            TData.RS4.FromTargetBuffer[1][0] = false ;  // Marked as sent
   \   0000012E   E000               LDI     R16, 0
   \   00000130   9300....           STS     (TData + 1478), R16
    195                          }
    196                          if ((TData.RS4.WHDataAvailable >> UART[ch].pRxBuffer[pointer+5]) & 0x01) {
   \                     ??CheckActionUart_18:
   \   00000134   9100....           LDS     R16, (TData + 1267)
   \   00000138   E010               LDI     R17, 0
   \   0000013A   E12A               LDI     R18, 26
   \   0000013C   9FA2               MUL     R26, R18
   \   0000013E   01F0               MOVW    R31:R30, R1:R0
   \   00000140   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000142   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000144   8522               LDD     R18, Z+10
   \   00000146   8533               LDD     R19, Z+11
   \   00000148   0F28               ADD     R18, R24
   \   0000014A   1F39               ADC     R19, R25
   \   0000014C   01F9               MOVW    R31:R30, R19:R18
   \   0000014E   8145               LDD     R20, Z+5
   \   00000150   ........           CALL    ?SS_SHR_L02
   \   00000154   7001               ANDI    R16, 0x01
   \   00000156   2300               TST     R16
   \   00000158   F069               BREQ    ??CheckActionUart_19
    197                              BuildWHdata(ch, pointer + 5);
   \   0000015A   019C               MOVW    R19:R18, R25:R24
   \   0000015C   5F2B               SUBI    R18, 251
   \   0000015E   4F3F               SBCI    R19, 255
   \   00000160   2F0A               MOV     R16, R26
   \   00000162   ........           CALL    BuildWHdata
    198                              //TData.RS4.WHDataAvailable &= ~(0x01 << UART[ch].pRxBuffer[pointer+5]);
    199                          }
    200                          break;
   \   00000166   C044               RJMP    ??CheckActionUart_1
    201                      case 1:                                         // Raw and cal data
    202                          BuildRData485(ch, pointer+5) ;                     // receive package
   \                     ??CheckActionUart_16:
   \   00000168   019C               MOVW    R19:R18, R25:R24
   \   0000016A   5F2B               SUBI    R18, 251
   \   0000016C   4F3F               SBCI    R19, 255
   \   0000016E   2F0A               MOV     R16, R26
   \   00000170   ........           CALL    BuildRData485
    203                          break;
    204                      }
    205                  }
    206                  break;
   \                     ??CheckActionUart_19:
   \   00000174   C03D               RJMP    ??CheckActionUart_1
    207          
    208              case CMD_SND_ANA_SETUP :                              // Receive sertup of AN-RSANA
    209                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_20:
   \   00000176   9100....           LDS     R16, UnitID
   \   0000017A   3001               CPI     R16, 1
   \   0000017C   F5C9               BRNE    ??CheckActionUart_1
    210                      GetANASetup(ch, pointer+4) ;                     // receive package
   \   0000017E   019C               MOVW    R19:R18, R25:R24
   \   00000180   5F2C               SUBI    R18, 252
   \   00000182   4F3F               SBCI    R19, 255
   \   00000184   2F0A               MOV     R16, R26
   \   00000186   ........           CALL    GetANASetup
    211                  }
    212                  break ;
   \   0000018A   C032               RJMP    ??CheckActionUart_1
    213          
    214              case CMD_REQ_ANA_SETUP :                              // Request for sertup of AN-RSANA
    215                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_21:
   \   0000018C   9100....           LDS     R16, UnitID
   \   00000190   3001               CPI     R16, 1
   \   00000192   F571               BRNE    ??CheckActionUart_1
    216                      BuildANASetup(ch, pointer+4) ;                     // receive package
   \   00000194   019C               MOVW    R19:R18, R25:R24
   \   00000196   5F2C               SUBI    R18, 252
   \   00000198   4F3F               SBCI    R19, 255
   \   0000019A   2F0A               MOV     R16, R26
   \   0000019C   ........           CALL    BuildANASetup
    217                  }
    218                  break ;
   \   000001A0   C027               RJMP    ??CheckActionUart_1
    219          
    220              case CMD_SND_ANA_FILTER :                              // Receive filter of AN-RSANA
    221                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_22:
   \   000001A2   9100....           LDS     R16, UnitID
   \   000001A6   3001               CPI     R16, 1
   \   000001A8   F519               BRNE    ??CheckActionUart_1
    222                      GetANAFilter(ch, pointer+4) ;                     // receive package
   \   000001AA   019C               MOVW    R19:R18, R25:R24
   \   000001AC   5F2C               SUBI    R18, 252
   \   000001AE   4F3F               SBCI    R19, 255
   \   000001B0   2F0A               MOV     R16, R26
   \   000001B2   ........           CALL    GetANAFilter
    223                  }
    224                  break ;
   \   000001B6   C01C               RJMP    ??CheckActionUart_1
    225          
    226              case CMD_REQ_ANA_FILTER :                              // Request filter of AN-RSANA
    227                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_23:
   \   000001B8   9100....           LDS     R16, UnitID
   \   000001BC   3001               CPI     R16, 1
   \   000001BE   F4C1               BRNE    ??CheckActionUart_1
    228                      BuildANAFilter(ch, pointer+4) ;                     // receive package
   \   000001C0   019C               MOVW    R19:R18, R25:R24
   \   000001C2   5F2C               SUBI    R18, 252
   \   000001C4   4F3F               SBCI    R19, 255
   \   000001C6   2F0A               MOV     R16, R26
   \   000001C8   ........           CALL    BuildANAFilter
    229                  }
    230                  break ;
   \   000001CC   C011               RJMP    ??CheckActionUart_1
    231          
    232              case CMD_REQ_ANA_DATA :                              // Request ANA data(4-20ma)
    233                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_24:
   \   000001CE   9100....           LDS     R16, UnitID
   \   000001D2   3001               CPI     R16, 1
   \   000001D4   F469               BRNE    ??CheckActionUart_1
    234                      BuildMDataANA(ch, pointer+4) ;                     // receive
   \   000001D6   019C               MOVW    R19:R18, R25:R24
   \   000001D8   5F2C               SUBI    R18, 252
   \   000001DA   4F3F               SBCI    R19, 255
   \   000001DC   2F0A               MOV     R16, R26
   \   000001DE   ........           CALL    BuildMDataANA
    235                  }
    236                  break ;
   \   000001E2   C006               RJMP    ??CheckActionUart_1
    237          
    238              default:
    239                  if (command < MAX_ECMD) {                   // handle end commands
   \                     ??CheckActionUart_25:
   \   000001E4   E604               LDI     R16, 100
   \   000001E6   1640               CP      R4, R16
   \   000001E8   E000               LDI     R16, 0
   \   000001EA   0650               CPC     R5, R16
   \   000001EC   F408               BRCC    ??CheckActionUart_1
    240                      retval = false ;
   \   000001EE   E0B0               LDI     R27, 0
    241                  }
    242                  break;
    243          
    244              }
    245              return retval;
   \                     ??CheckActionUart_1:
   \   000001F0   2F0B               MOV     R16, R27
   \   000001F2   E0E6               LDI     R30, 6
   \   000001F4   ........           JMP     ?EPILOGUE_B6_L09
    246          }
    247          
    248          /*************************************************************************
    249          *
    250          * Build send packet header
    251          *
    252          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    253          void Uart_BuildHeader(char ch) {
   \                     Uart_BuildHeader:
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    254          
    255              UART[ch].RxFirst = 0;                                // Reset pointers
   \   00000004   E000               LDI     R16, 0
   \   00000006   E010               LDI     R17, 0
   \   00000008   E12A               LDI     R18, 26
   \   0000000A   9F82               MUL     R24, R18
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000012   8704               STD     Z+12, R16
   \   00000014   8715               STD     Z+13, R17
    256              UART[ch].RxLast  = 0;
   \   00000016   E000               LDI     R16, 0
   \   00000018   E010               LDI     R17, 0
   \   0000001A   E12A               LDI     R18, 26
   \   0000001C   9F82               MUL     R24, R18
   \   0000001E   01F0               MOVW    R31:R30, R1:R0
   \   00000020   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000022   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000024   8706               STD     Z+14, R16
   \   00000026   8717               STD     Z+15, R17
    257              UART[ch].TxLast  = 0;
   \   00000028   E000               LDI     R16, 0
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   E12A               LDI     R18, 26
   \   0000002E   9F82               MUL     R24, R18
   \   00000030   01F0               MOVW    R31:R30, R1:R0
   \   00000032   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000034   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000036   8304               STD     Z+4, R16
   \   00000038   8315               STD     Z+5, R17
    258          
    259              UART[ch].pTxBuffer[0] = ANPRO10_SYN ;                        /* Sync */
   \   0000003A   E126               LDI     R18, 22
   \   0000003C   E10A               LDI     R16, 26
   \   0000003E   9F80               MUL     R24, R16
   \   00000040   01F0               MOVW    R31:R30, R1:R0
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8100               LD      R16, Z
   \   00000048   8111               LDD     R17, Z+1
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   8320               ST      Z, R18
    260              UART[ch].pTxBuffer[1] = ANPRO10_SYN ;                        /* Sync */
   \   0000004E   E126               LDI     R18, 22
   \   00000050   E10A               LDI     R16, 26
   \   00000052   9F80               MUL     R24, R16
   \   00000054   01F0               MOVW    R31:R30, R1:R0
   \   00000056   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000058   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005A   8100               LD      R16, Z
   \   0000005C   8111               LDD     R17, Z+1
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   8321               STD     Z+1, R18
    261              UART[ch].pTxBuffer[2] = ANPRO10_SYN ;                        /* Sync */
   \   00000062   E126               LDI     R18, 22
   \   00000064   E10A               LDI     R16, 26
   \   00000066   9F80               MUL     R24, R16
   \   00000068   01F0               MOVW    R31:R30, R1:R0
   \   0000006A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000006E   8100               LD      R16, Z
   \   00000070   8111               LDD     R17, Z+1
   \   00000072   01F8               MOVW    R31:R30, R17:R16
   \   00000074   8322               STD     Z+2, R18
    262              UART[ch].pTxBuffer[3] = ANPRO10_SOH ;                        /* Start of header */
   \   00000076   E021               LDI     R18, 1
   \   00000078   E10A               LDI     R16, 26
   \   0000007A   9F80               MUL     R24, R16
   \   0000007C   01F0               MOVW    R31:R30, R1:R0
   \   0000007E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000082   8100               LD      R16, Z
   \   00000084   8111               LDD     R17, Z+1
   \   00000086   01F8               MOVW    R31:R30, R17:R16
   \   00000088   8323               STD     Z+3, R18
    263              UART[ch].pTxBuffer[4] = UART[ch].pRxBuffer[2] ;      /* RXID */
   \   0000008A   E10A               LDI     R16, 26
   \   0000008C   9F80               MUL     R24, R16
   \   0000008E   01F0               MOVW    R31:R30, R1:R0
   \   00000090   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000092   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000094   8502               LDD     R16, Z+10
   \   00000096   8513               LDD     R17, Z+11
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   8122               LDD     R18, Z+2
   \   0000009C   E10A               LDI     R16, 26
   \   0000009E   9F80               MUL     R24, R16
   \   000000A0   01F0               MOVW    R31:R30, R1:R0
   \   000000A2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A6   8100               LD      R16, Z
   \   000000A8   8111               LDD     R17, Z+1
   \   000000AA   01F8               MOVW    R31:R30, R17:R16
   \   000000AC   8324               STD     Z+4, R18
    264              UART[ch].pTxBuffer[5] = UART[ch].pRxBuffer[3] ;      /* Rx address */
   \   000000AE   E10A               LDI     R16, 26
   \   000000B0   9F80               MUL     R24, R16
   \   000000B2   01F0               MOVW    R31:R30, R1:R0
   \   000000B4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000B8   8502               LDD     R16, Z+10
   \   000000BA   8513               LDD     R17, Z+11
   \   000000BC   01F8               MOVW    R31:R30, R17:R16
   \   000000BE   8123               LDD     R18, Z+3
   \   000000C0   E10A               LDI     R16, 26
   \   000000C2   9F80               MUL     R24, R16
   \   000000C4   01F0               MOVW    R31:R30, R1:R0
   \   000000C6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000C8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000CA   8100               LD      R16, Z
   \   000000CC   8111               LDD     R17, Z+1
   \   000000CE   01F8               MOVW    R31:R30, R17:R16
   \   000000D0   8325               STD     Z+5, R18
    265              UART[ch].pTxBuffer[6] = 0x10 + UnitID ;              /* Unit ID */
   \   000000D2   9120....           LDS     R18, UnitID
   \   000000D6   5F20               SUBI    R18, 240
   \   000000D8   E10A               LDI     R16, 26
   \   000000DA   9F80               MUL     R24, R16
   \   000000DC   01F0               MOVW    R31:R30, R1:R0
   \   000000DE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000E0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000E2   8100               LD      R16, Z
   \   000000E4   8111               LDD     R17, Z+1
   \   000000E6   01F8               MOVW    R31:R30, R17:R16
   \   000000E8   8326               STD     Z+6, R18
    266              UART[ch].pTxBuffer[7] = MyAddress();                 /* Tx address */
   \   000000EA   ........           CALL    MyAddress
   \   000000EE   2F20               MOV     R18, R16
   \   000000F0   E10A               LDI     R16, 26
   \   000000F2   9F80               MUL     R24, R16
   \   000000F4   01F0               MOVW    R31:R30, R1:R0
   \   000000F6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000FA   8100               LD      R16, Z
   \   000000FC   8111               LDD     R17, Z+1
   \   000000FE   01F8               MOVW    R31:R30, R17:R16
   \   00000100   8327               STD     Z+7, R18
    267              UART[ch].pTxBuffer[8] = 0 ;                          /* packlen HB, don't know yet */
   \   00000102   E10A               LDI     R16, 26
   \   00000104   9F80               MUL     R24, R16
   \   00000106   01F0               MOVW    R31:R30, R1:R0
   \   00000108   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000010A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010C   8100               LD      R16, Z
   \   0000010E   8111               LDD     R17, Z+1
   \   00000110   01F8               MOVW    R31:R30, R17:R16
   \   00000112   E000               LDI     R16, 0
   \   00000114   8700               STD     Z+8, R16
    268              UART[ch].pTxBuffer[9] = 0 ;                          /* packlen LB, don't know yet */
   \   00000116   E10A               LDI     R16, 26
   \   00000118   9F80               MUL     R24, R16
   \   0000011A   01F0               MOVW    R31:R30, R1:R0
   \   0000011C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000011E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000120   8100               LD      R16, Z
   \   00000122   8111               LDD     R17, Z+1
   \   00000124   01F8               MOVW    R31:R30, R17:R16
   \   00000126   E000               LDI     R16, 0
   \   00000128   8701               STD     Z+9, R16
    269              UART[ch].pTxBuffer[10] = 0 ;                         /* Header checksum, don't know yet */
   \   0000012A   E10A               LDI     R16, 26
   \   0000012C   9F80               MUL     R24, R16
   \   0000012E   01F0               MOVW    R31:R30, R1:R0
   \   00000130   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000132   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000134   8100               LD      R16, Z
   \   00000136   8111               LDD     R17, Z+1
   \   00000138   01F8               MOVW    R31:R30, R17:R16
   \   0000013A   E000               LDI     R16, 0
   \   0000013C   8702               STD     Z+10, R16
    270          }
   \   0000013E   9189               LD      R24, Y+
   \   00000140   9508               RET
    271          
    272          /*************************************************************************
    273          *
    274          * Build  packet tail
    275          *
    276          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    277          void Uart_BuildTail(char ch) {
   \                     Uart_BuildTail:
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    278          
    279              Uart_BuildHeader(ch);                                    // fist build the header
   \   00000004   2F08               MOV     R16, R24
   \   00000006   ....               RCALL   Uart_BuildHeader
    280          
    281              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK & 0xff ;  // End command lb
   \   00000008   E10A               LDI     R16, 26
   \   0000000A   9F80               MUL     R24, R16
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000012   8100               LD      R16, Z
   \   00000014   8111               LDD     R17, Z+1
   \   00000016   E12A               LDI     R18, 26
   \   00000018   9F82               MUL     R24, R18
   \   0000001A   01F0               MOVW    R31:R30, R1:R0
   \   0000001C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000020   8122               LDD     R18, Z+2
   \   00000022   8133               LDD     R19, Z+3
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   0FE2               ADD     R30, R18
   \   00000028   1FF3               ADC     R31, R19
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   8300               ST      Z, R16
   \   0000002E   E10A               LDI     R16, 26
   \   00000030   9F80               MUL     R24, R16
   \   00000032   01F0               MOVW    R31:R30, R1:R0
   \   00000034   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000036   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000038   8102               LDD     R16, Z+2
   \   0000003A   8113               LDD     R17, Z+3
   \   0000003C   5F0F               SUBI    R16, 255
   \   0000003E   4F1F               SBCI    R17, 255
   \   00000040   8302               STD     Z+2, R16
   \   00000042   8313               STD     Z+3, R17
    282              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK >> 8 ;    // End command hb
   \   00000044   E10A               LDI     R16, 26
   \   00000046   9F80               MUL     R24, R16
   \   00000048   01F0               MOVW    R31:R30, R1:R0
   \   0000004A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000004C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000004E   8100               LD      R16, Z
   \   00000050   8111               LDD     R17, Z+1
   \   00000052   E12A               LDI     R18, 26
   \   00000054   9F82               MUL     R24, R18
   \   00000056   01F0               MOVW    R31:R30, R1:R0
   \   00000058   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005C   8122               LDD     R18, Z+2
   \   0000005E   8133               LDD     R19, Z+3
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   0FE2               ADD     R30, R18
   \   00000064   1FF3               ADC     R31, R19
   \   00000066   E000               LDI     R16, 0
   \   00000068   8300               ST      Z, R16
   \   0000006A   E10A               LDI     R16, 26
   \   0000006C   9F80               MUL     R24, R16
   \   0000006E   01F0               MOVW    R31:R30, R1:R0
   \   00000070   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000072   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000074   8102               LDD     R16, Z+2
   \   00000076   8113               LDD     R17, Z+3
   \   00000078   5F0F               SUBI    R16, 255
   \   0000007A   4F1F               SBCI    R17, 255
   \   0000007C   8302               STD     Z+2, R16
   \   0000007E   8313               STD     Z+3, R17
    283              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0x00 ;                  // End data
   \   00000080   E10A               LDI     R16, 26
   \   00000082   9F80               MUL     R24, R16
   \   00000084   01F0               MOVW    R31:R30, R1:R0
   \   00000086   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000088   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000008A   8100               LD      R16, Z
   \   0000008C   8111               LDD     R17, Z+1
   \   0000008E   E12A               LDI     R18, 26
   \   00000090   9F82               MUL     R24, R18
   \   00000092   01F0               MOVW    R31:R30, R1:R0
   \   00000094   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000096   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000098   8122               LDD     R18, Z+2
   \   0000009A   8133               LDD     R19, Z+3
   \   0000009C   01F8               MOVW    R31:R30, R17:R16
   \   0000009E   0FE2               ADD     R30, R18
   \   000000A0   1FF3               ADC     R31, R19
   \   000000A2   E000               LDI     R16, 0
   \   000000A4   8300               ST      Z, R16
   \   000000A6   E10A               LDI     R16, 26
   \   000000A8   9F80               MUL     R24, R16
   \   000000AA   01F0               MOVW    R31:R30, R1:R0
   \   000000AC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000AE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000B0   8102               LDD     R16, Z+2
   \   000000B2   8113               LDD     R17, Z+3
   \   000000B4   5F0F               SUBI    R16, 255
   \   000000B6   4F1F               SBCI    R17, 255
   \   000000B8   8302               STD     Z+2, R16
   \   000000BA   8313               STD     Z+3, R17
    284          
    285              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].TxSeqCnt++ ;   // Sequence counter
   \   000000BC   E10A               LDI     R16, 26
   \   000000BE   9F80               MUL     R24, R16
   \   000000C0   01F0               MOVW    R31:R30, R1:R0
   \   000000C2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000C4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000C6   8521               LDD     R18, Z+9
   \   000000C8   2F02               MOV     R16, R18
   \   000000CA   9503               INC     R16
   \   000000CC   E11A               LDI     R17, 26
   \   000000CE   9F81               MUL     R24, R17
   \   000000D0   01F0               MOVW    R31:R30, R1:R0
   \   000000D2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D6   8701               STD     Z+9, R16
   \   000000D8   E10A               LDI     R16, 26
   \   000000DA   9F80               MUL     R24, R16
   \   000000DC   01F0               MOVW    R31:R30, R1:R0
   \   000000DE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000E0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000E2   8100               LD      R16, Z
   \   000000E4   8111               LDD     R17, Z+1
   \   000000E6   E13A               LDI     R19, 26
   \   000000E8   9F83               MUL     R24, R19
   \   000000EA   01F0               MOVW    R31:R30, R1:R0
   \   000000EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F0   8142               LDD     R20, Z+2
   \   000000F2   8153               LDD     R21, Z+3
   \   000000F4   01F8               MOVW    R31:R30, R17:R16
   \   000000F6   0FE4               ADD     R30, R20
   \   000000F8   1FF5               ADC     R31, R21
   \   000000FA   8320               ST      Z, R18
   \   000000FC   E10A               LDI     R16, 26
   \   000000FE   9F80               MUL     R24, R16
   \   00000100   01F0               MOVW    R31:R30, R1:R0
   \   00000102   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000104   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000106   8102               LDD     R16, Z+2
   \   00000108   8113               LDD     R17, Z+3
   \   0000010A   5F0F               SUBI    R16, 255
   \   0000010C   4F1F               SBCI    R17, 255
   \   0000010E   8302               STD     Z+2, R16
   \   00000110   8313               STD     Z+3, R17
    286          
    287              UART[ch].pTxBuffer[8] = UART[ch].TxFirst -2;                    // correct length because stx's
   \   00000112   E10A               LDI     R16, 26
   \   00000114   9F80               MUL     R24, R16
   \   00000116   01F0               MOVW    R31:R30, R1:R0
   \   00000118   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000011A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000011C   8122               LDD     R18, Z+2
   \   0000011E   8133               LDD     R19, Z+3
   \   00000120   5022               SUBI    R18, 2
   \   00000122   E10A               LDI     R16, 26
   \   00000124   9F80               MUL     R24, R16
   \   00000126   01F0               MOVW    R31:R30, R1:R0
   \   00000128   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000012A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000012C   8100               LD      R16, Z
   \   0000012E   8111               LDD     R17, Z+1
   \   00000130   01F8               MOVW    R31:R30, R17:R16
   \   00000132   8720               STD     Z+8, R18
    288              UART[ch].pTxBuffer[9] = (UART[ch].TxFirst-2) >> 8 ;             // packet len high
   \   00000134   E10A               LDI     R16, 26
   \   00000136   9F80               MUL     R24, R16
   \   00000138   01F0               MOVW    R31:R30, R1:R0
   \   0000013A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000013C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000013E   8102               LDD     R16, Z+2
   \   00000140   8113               LDD     R17, Z+3
   \   00000142   5002               SUBI    R16, 2
   \   00000144   4010               SBCI    R17, 0
   \   00000146   2F01               MOV     R16, R17
   \   00000148   E010               LDI     R17, 0
   \   0000014A   2F20               MOV     R18, R16
   \   0000014C   E10A               LDI     R16, 26
   \   0000014E   9F80               MUL     R24, R16
   \   00000150   01F0               MOVW    R31:R30, R1:R0
   \   00000152   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000154   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000156   8100               LD      R16, Z
   \   00000158   8111               LDD     R17, Z+1
   \   0000015A   01F8               MOVW    R31:R30, R17:R16
   \   0000015C   8721               STD     Z+9, R18
    289          
    290              UART[ch].pTxBuffer[10] = CalcDSTxChecksum(ch, 10) ;         // Get header checksum
   \   0000015E   E02A               LDI     R18, 10
   \   00000160   E030               LDI     R19, 0
   \   00000162   2F08               MOV     R16, R24
   \   00000164   ....               RCALL   CalcDSTxChecksum
   \   00000166   2F20               MOV     R18, R16
   \   00000168   E10A               LDI     R16, 26
   \   0000016A   9F80               MUL     R24, R16
   \   0000016C   01F0               MOVW    R31:R30, R1:R0
   \   0000016E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000170   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000172   8100               LD      R16, Z
   \   00000174   8111               LDD     R17, Z+1
   \   00000176   01F8               MOVW    R31:R30, R17:R16
   \   00000178   8722               STD     Z+10, R18
    291          
    292              UART[ch].pTxBuffer[UART[ch].TxFirst] = CalcDSTxChecksum(ch, UART[ch].TxFirst) ; // Get checksum
   \   0000017A   E10A               LDI     R16, 26
   \   0000017C   9F80               MUL     R24, R16
   \   0000017E   01F0               MOVW    R31:R30, R1:R0
   \   00000180   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000182   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000184   8122               LDD     R18, Z+2
   \   00000186   8133               LDD     R19, Z+3
   \   00000188   2F08               MOV     R16, R24
   \   0000018A   ....               RCALL   CalcDSTxChecksum
   \   0000018C   2F20               MOV     R18, R16
   \   0000018E   E10A               LDI     R16, 26
   \   00000190   9F80               MUL     R24, R16
   \   00000192   01F0               MOVW    R31:R30, R1:R0
   \   00000194   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000196   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000198   8100               LD      R16, Z
   \   0000019A   8111               LDD     R17, Z+1
   \   0000019C   E13A               LDI     R19, 26
   \   0000019E   9F83               MUL     R24, R19
   \   000001A0   01F0               MOVW    R31:R30, R1:R0
   \   000001A2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001A4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001A6   8142               LDD     R20, Z+2
   \   000001A8   8153               LDD     R21, Z+3
   \   000001AA   01F8               MOVW    R31:R30, R17:R16
   \   000001AC   0FE4               ADD     R30, R20
   \   000001AE   1FF5               ADC     R31, R21
   \   000001B0   8320               ST      Z, R18
    293              UART[ch].TxFirst++ ;                                        // OBS!! must be inc here due to ANSI standard !!!!
   \   000001B2   E10A               LDI     R16, 26
   \   000001B4   9F80               MUL     R24, R16
   \   000001B6   01F0               MOVW    R31:R30, R1:R0
   \   000001B8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001BA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001BC   8102               LDD     R16, Z+2
   \   000001BE   8113               LDD     R17, Z+3
   \   000001C0   5F0F               SUBI    R16, 255
   \   000001C2   4F1F               SBCI    R17, 255
   \   000001C4   8302               STD     Z+2, R16
   \   000001C6   8313               STD     Z+3, R17
    294          
    295              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANPRO10_EOT ;            // End of transmission
   \   000001C8   E024               LDI     R18, 4
   \   000001CA   E10A               LDI     R16, 26
   \   000001CC   9F80               MUL     R24, R16
   \   000001CE   01F0               MOVW    R31:R30, R1:R0
   \   000001D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001D4   8100               LD      R16, Z
   \   000001D6   8111               LDD     R17, Z+1
   \   000001D8   E13A               LDI     R19, 26
   \   000001DA   9F83               MUL     R24, R19
   \   000001DC   01F0               MOVW    R31:R30, R1:R0
   \   000001DE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E2   8142               LDD     R20, Z+2
   \   000001E4   8153               LDD     R21, Z+3
   \   000001E6   01F8               MOVW    R31:R30, R17:R16
   \   000001E8   0FE4               ADD     R30, R20
   \   000001EA   1FF5               ADC     R31, R21
   \   000001EC   8320               ST      Z, R18
   \   000001EE   E10A               LDI     R16, 26
   \   000001F0   9F80               MUL     R24, R16
   \   000001F2   01F0               MOVW    R31:R30, R1:R0
   \   000001F4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001F6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001F8   8102               LDD     R16, Z+2
   \   000001FA   8113               LDD     R17, Z+3
   \   000001FC   5F0F               SUBI    R16, 255
   \   000001FE   4F1F               SBCI    R17, 255
   \   00000200   8302               STD     Z+2, R16
   \   00000202   8313               STD     Z+3, R17
    296              UART[ch].TxCount = UART[ch].TxFirst;                      //bytes to send
   \   00000204   E10A               LDI     R16, 26
   \   00000206   9F80               MUL     R24, R16
   \   00000208   01F0               MOVW    R31:R30, R1:R0
   \   0000020A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000020C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000020E   8102               LDD     R16, Z+2
   \   00000210   8113               LDD     R17, Z+3
   \   00000212   E12A               LDI     R18, 26
   \   00000214   9F82               MUL     R24, R18
   \   00000216   01F0               MOVW    R31:R30, R1:R0
   \   00000218   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000021A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000021C   8306               STD     Z+6, R16
   \   0000021E   8317               STD     Z+7, R17
    297              UART[ch].TxLast = 0;                                     // reset cunter
   \   00000220   E000               LDI     R16, 0
   \   00000222   E010               LDI     R17, 0
   \   00000224   E12A               LDI     R18, 26
   \   00000226   9F82               MUL     R24, R18
   \   00000228   01F0               MOVW    R31:R30, R1:R0
   \   0000022A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000022C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000022E   8304               STD     Z+4, R16
   \   00000230   8315               STD     Z+5, R17
    298              if (ch == 0) {                                           // Turn on TXE for channel
   \   00000232   2388               TST     R24
   \   00000234   F561               BRNE    ??Uart_BuildTail_0
    299                  OS_RetriggerTimer(&TimerUSART0);                     // and start timeout TX timer
   \   00000236   ....               LDI     R16, LOW(TimerUSART0)
   \   00000238   ....               LDI     R17, (TimerUSART0) >> 8
   \   0000023A   ........           CALL    OS_RetriggerTimer
    300                  SetBit(PORTE, 0x04) ;                                // TXE0 on
   \   0000023E   9100....           LDS     R16, (OS_Global + 1)
   \   00000242   7F00               ANDI    R16, 0xF0
   \   00000244   2300               TST     R16
   \   00000246   F021               BREQ    ??Uart_BuildTail_1
   \   00000248   E909               LDI     R16, 153
   \   0000024A   E010               LDI     R17, 0
   \   0000024C   ........           CALL    OS_Error
   \                     ??Uart_BuildTail_1:
   \   00000250   94F8               cli
   \   00000252   ....               LDI     R30, LOW(OS_Global)
   \   00000254   ....               LDI     R31, (OS_Global) >> 8
   \   00000256   8101               LDD     R16, Z+1
   \   00000258   9503               INC     R16
   \   0000025A   8301               STD     Z+1, R16
   \   0000025C   9A72               SBI     0x0E, 0x02
   \   0000025E   9100....           LDS     R16, (OS_Global + 1)
   \   00000262   7F00               ANDI    R16, 0xF0
   \   00000264   2300               TST     R16
   \   00000266   F021               BREQ    ??Uart_BuildTail_2
   \   00000268   E909               LDI     R16, 153
   \   0000026A   E010               LDI     R17, 0
   \   0000026C   ........           CALL    OS_Error
   \                     ??Uart_BuildTail_2:
   \   00000270   ....               LDI     R30, LOW(OS_Global)
   \   00000272   ....               LDI     R31, (OS_Global) >> 8
   \   00000274   8101               LDD     R16, Z+1
   \   00000276   950A               DEC     R16
   \   00000278   8301               STD     Z+1, R16
   \   0000027A   9100....           LDS     R16, (OS_Global + 1)
   \   0000027E   2300               TST     R16
   \   00000280   F409               BRNE    ??Uart_BuildTail_3
   \   00000282   9478               sei
    301                  OS_RetriggerTimer(&TimerUSART0On);                   // and start timer for on before TX
   \                     ??Uart_BuildTail_3:
   \   00000284   ....               LDI     R16, LOW(TimerUSART0On)
   \   00000286   ....               LDI     R17, (TimerUSART0On) >> 8
   \   00000288   ........           CALL    OS_RetriggerTimer
   \   0000028C   C02D               RJMP    ??Uart_BuildTail_4
    302              } else if (ch ==1) {
   \                     ??Uart_BuildTail_0:
   \   0000028E   3081               CPI     R24, 1
   \   00000290   F559               BRNE    ??Uart_BuildTail_4
    303                  OS_RetriggerTimer(&TimerUSART1);                     // and start timeout TX timer
   \   00000292   ....               LDI     R16, LOW(TimerUSART1)
   \   00000294   ....               LDI     R17, (TimerUSART1) >> 8
   \   00000296   ........           CALL    OS_RetriggerTimer
    304                  SetBit(PORTE, 0x08) ;                                // TXE1 on
   \   0000029A   9100....           LDS     R16, (OS_Global + 1)
   \   0000029E   7F00               ANDI    R16, 0xF0
   \   000002A0   2300               TST     R16
   \   000002A2   F021               BREQ    ??Uart_BuildTail_5
   \   000002A4   E909               LDI     R16, 153
   \   000002A6   E010               LDI     R17, 0
   \   000002A8   ........           CALL    OS_Error
   \                     ??Uart_BuildTail_5:
   \   000002AC   94F8               cli
   \   000002AE   ....               LDI     R30, LOW(OS_Global)
   \   000002B0   ....               LDI     R31, (OS_Global) >> 8
   \   000002B2   8101               LDD     R16, Z+1
   \   000002B4   9503               INC     R16
   \   000002B6   8301               STD     Z+1, R16
   \   000002B8   9A73               SBI     0x0E, 0x03
   \   000002BA   9100....           LDS     R16, (OS_Global + 1)
   \   000002BE   7F00               ANDI    R16, 0xF0
   \   000002C0   2300               TST     R16
   \   000002C2   F021               BREQ    ??Uart_BuildTail_6
   \   000002C4   E909               LDI     R16, 153
   \   000002C6   E010               LDI     R17, 0
   \   000002C8   ........           CALL    OS_Error
   \                     ??Uart_BuildTail_6:
   \   000002CC   ....               LDI     R30, LOW(OS_Global)
   \   000002CE   ....               LDI     R31, (OS_Global) >> 8
   \   000002D0   8101               LDD     R16, Z+1
   \   000002D2   950A               DEC     R16
   \   000002D4   8301               STD     Z+1, R16
   \   000002D6   9100....           LDS     R16, (OS_Global + 1)
   \   000002DA   2300               TST     R16
   \   000002DC   F409               BRNE    ??Uart_BuildTail_7
   \   000002DE   9478               sei
    305                  OS_RetriggerTimer(&TimerUSART1On);                   // and start timer for on before TX
   \                     ??Uart_BuildTail_7:
   \   000002E0   ....               LDI     R16, LOW(TimerUSART1On)
   \   000002E2   ....               LDI     R17, (TimerUSART1On) >> 8
   \   000002E4   ........           CALL    OS_RetriggerTimer
    306              }
    307          }
   \                     ??Uart_BuildTail_4:
   \   000002E8   9189               LD      R24, Y+
   \   000002EA   9508               RET
   \   000002EC                      REQUIRE _A_PORTE
    308          
    309          /*************************************************************************
    310          *
    311          * Build datablock for card status
    312          *
    313          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    314          void BuildStatusData(char ch){
   \                     BuildStatusData:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
    315          
    316              short ntna ;
    317              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000006   E001               LDI     R16, 1
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9FA1               MUL     R26, R17
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000012   8F01               STD     Z+25, R16
    318          
    319              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS & 0xff;
   \   00000014   EE29               LDI     R18, 233
   \   00000016   E10A               LDI     R16, 26
   \   00000018   9FA0               MUL     R26, R16
   \   0000001A   01F0               MOVW    R31:R30, R1:R0
   \   0000001C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000020   8100               LD      R16, Z
   \   00000022   8111               LDD     R17, Z+1
   \   00000024   E13A               LDI     R19, 26
   \   00000026   9FA3               MUL     R26, R19
   \   00000028   01F0               MOVW    R31:R30, R1:R0
   \   0000002A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002E   8142               LDD     R20, Z+2
   \   00000030   8153               LDD     R21, Z+3
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   0FE4               ADD     R30, R20
   \   00000036   1FF5               ADC     R31, R21
   \   00000038   8320               ST      Z, R18
   \   0000003A   E10A               LDI     R16, 26
   \   0000003C   9FA0               MUL     R26, R16
   \   0000003E   01F0               MOVW    R31:R30, R1:R0
   \   00000040   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000044   8102               LDD     R16, Z+2
   \   00000046   8113               LDD     R17, Z+3
   \   00000048   5F0F               SUBI    R16, 255
   \   0000004A   4F1F               SBCI    R17, 255
   \   0000004C   8302               STD     Z+2, R16
   \   0000004E   8313               STD     Z+3, R17
    320              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS >> 8;
   \   00000050   E023               LDI     R18, 3
   \   00000052   E10A               LDI     R16, 26
   \   00000054   9FA0               MUL     R26, R16
   \   00000056   01F0               MOVW    R31:R30, R1:R0
   \   00000058   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005C   8100               LD      R16, Z
   \   0000005E   8111               LDD     R17, Z+1
   \   00000060   E13A               LDI     R19, 26
   \   00000062   9FA3               MUL     R26, R19
   \   00000064   01F0               MOVW    R31:R30, R1:R0
   \   00000066   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000006A   8142               LDD     R20, Z+2
   \   0000006C   8153               LDD     R21, Z+3
   \   0000006E   01F8               MOVW    R31:R30, R17:R16
   \   00000070   0FE4               ADD     R30, R20
   \   00000072   1FF5               ADC     R31, R21
   \   00000074   8320               ST      Z, R18
   \   00000076   E10A               LDI     R16, 26
   \   00000078   9FA0               MUL     R26, R16
   \   0000007A   01F0               MOVW    R31:R30, R1:R0
   \   0000007C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000080   8102               LDD     R16, Z+2
   \   00000082   8113               LDD     R17, Z+3
   \   00000084   5F0F               SUBI    R16, 255
   \   00000086   4F1F               SBCI    R17, 255
   \   00000088   8302               STD     Z+2, R16
   \   0000008A   8313               STD     Z+3, R17
    321              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000008C   E10A               LDI     R16, 26
   \   0000008E   9FA0               MUL     R26, R16
   \   00000090   01F0               MOVW    R31:R30, R1:R0
   \   00000092   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000094   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000096   8042               LDD     R4, Z+2
   \   00000098   8053               LDD     R5, Z+3
    322              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000009A   E10A               LDI     R16, 26
   \   0000009C   9FA0               MUL     R26, R16
   \   0000009E   01F0               MOVW    R31:R30, R1:R0
   \   000000A0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A4   8102               LDD     R16, Z+2
   \   000000A6   8113               LDD     R17, Z+3
   \   000000A8   5F0E               SUBI    R16, 254
   \   000000AA   4F1F               SBCI    R17, 255
   \   000000AC   8302               STD     Z+2, R16
   \   000000AE   8313               STD     Z+3, R17
    323              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ch ;               // channel
   \   000000B0   E10A               LDI     R16, 26
   \   000000B2   9FA0               MUL     R26, R16
   \   000000B4   01F0               MOVW    R31:R30, R1:R0
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8100               LD      R16, Z
   \   000000BC   8111               LDD     R17, Z+1
   \   000000BE   E12A               LDI     R18, 26
   \   000000C0   9FA2               MUL     R26, R18
   \   000000C2   01F0               MOVW    R31:R30, R1:R0
   \   000000C4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000C6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000C8   8122               LDD     R18, Z+2
   \   000000CA   8133               LDD     R19, Z+3
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   0FE2               ADD     R30, R18
   \   000000D0   1FF3               ADC     R31, R19
   \   000000D2   83A0               ST      Z, R26
   \   000000D4   E10A               LDI     R16, 26
   \   000000D6   9FA0               MUL     R26, R16
   \   000000D8   01F0               MOVW    R31:R30, R1:R0
   \   000000DA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000DC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000DE   8102               LDD     R16, Z+2
   \   000000E0   8113               LDD     R17, Z+3
   \   000000E2   5F0F               SUBI    R16, 255
   \   000000E4   4F1F               SBCI    R17, 255
   \   000000E6   8302               STD     Z+2, R16
   \   000000E8   8313               STD     Z+3, R17
    324              UART[ch].pTxBuffer[UART[ch].TxFirst++] = DEVICE_IO + UnitID ;   // Product ID
   \   000000EA   9120....           LDS     R18, UnitID
   \   000000EE   5F20               SUBI    R18, 240
   \   000000F0   E10A               LDI     R16, 26
   \   000000F2   9FA0               MUL     R26, R16
   \   000000F4   01F0               MOVW    R31:R30, R1:R0
   \   000000F6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000FA   8100               LD      R16, Z
   \   000000FC   8111               LDD     R17, Z+1
   \   000000FE   E13A               LDI     R19, 26
   \   00000100   9FA3               MUL     R26, R19
   \   00000102   01F0               MOVW    R31:R30, R1:R0
   \   00000104   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000106   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000108   8142               LDD     R20, Z+2
   \   0000010A   8153               LDD     R21, Z+3
   \   0000010C   01F8               MOVW    R31:R30, R17:R16
   \   0000010E   0FE4               ADD     R30, R20
   \   00000110   1FF5               ADC     R31, R21
   \   00000112   8320               ST      Z, R18
   \   00000114   E10A               LDI     R16, 26
   \   00000116   9FA0               MUL     R26, R16
   \   00000118   01F0               MOVW    R31:R30, R1:R0
   \   0000011A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000011C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000011E   8102               LDD     R16, Z+2
   \   00000120   8113               LDD     R17, Z+3
   \   00000122   5F0F               SUBI    R16, 255
   \   00000124   4F1F               SBCI    R17, 255
   \   00000126   8302               STD     Z+2, R16
   \   00000128   8313               STD     Z+3, R17
    325              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MyAddress();           // unit adddress
   \   0000012A   E10A               LDI     R16, 26
   \   0000012C   9FA0               MUL     R26, R16
   \   0000012E   01F0               MOVW    R31:R30, R1:R0
   \   00000130   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000132   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000134   8182               LDD     R24, Z+2
   \   00000136   8193               LDD     R25, Z+3
   \   00000138   018C               MOVW    R17:R16, R25:R24
   \   0000013A   5F0F               SUBI    R16, 255
   \   0000013C   4F1F               SBCI    R17, 255
   \   0000013E   E12A               LDI     R18, 26
   \   00000140   9FA2               MUL     R26, R18
   \   00000142   01F0               MOVW    R31:R30, R1:R0
   \   00000144   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000146   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000148   8302               STD     Z+2, R16
   \   0000014A   8313               STD     Z+3, R17
   \   0000014C   ........           CALL    MyAddress
   \   00000150   2F20               MOV     R18, R16
   \   00000152   E10A               LDI     R16, 26
   \   00000154   9FA0               MUL     R26, R16
   \   00000156   01F0               MOVW    R31:R30, R1:R0
   \   00000158   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000015A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000015C   8100               LD      R16, Z
   \   0000015E   8111               LDD     R17, Z+1
   \   00000160   01F8               MOVW    R31:R30, R17:R16
   \   00000162   0FE8               ADD     R30, R24
   \   00000164   1FF9               ADC     R31, R25
   \   00000166   8320               ST      Z, R18
    326              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROG_VERSION ;       // software version */
   \   00000168   E228               LDI     R18, 40
   \   0000016A   E10A               LDI     R16, 26
   \   0000016C   9FA0               MUL     R26, R16
   \   0000016E   01F0               MOVW    R31:R30, R1:R0
   \   00000170   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000172   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000174   8100               LD      R16, Z
   \   00000176   8111               LDD     R17, Z+1
   \   00000178   E13A               LDI     R19, 26
   \   0000017A   9FA3               MUL     R26, R19
   \   0000017C   01F0               MOVW    R31:R30, R1:R0
   \   0000017E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000180   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000182   8142               LDD     R20, Z+2
   \   00000184   8153               LDD     R21, Z+3
   \   00000186   01F8               MOVW    R31:R30, R17:R16
   \   00000188   0FE4               ADD     R30, R20
   \   0000018A   1FF5               ADC     R31, R21
   \   0000018C   8320               ST      Z, R18
   \   0000018E   E10A               LDI     R16, 26
   \   00000190   9FA0               MUL     R26, R16
   \   00000192   01F0               MOVW    R31:R30, R1:R0
   \   00000194   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000196   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000198   8102               LDD     R16, Z+2
   \   0000019A   8113               LDD     R17, Z+3
   \   0000019C   5F0F               SUBI    R16, 255
   \   0000019E   4F1F               SBCI    R17, 255
   \   000001A0   8302               STD     Z+2, R16
   \   000001A2   8313               STD     Z+3, R17
    327              UART[ch].pTxBuffer[UART[ch].TxFirst++] = COMP_VERSION;        // cpmpability version
   \   000001A4   E021               LDI     R18, 1
   \   000001A6   E10A               LDI     R16, 26
   \   000001A8   9FA0               MUL     R26, R16
   \   000001AA   01F0               MOVW    R31:R30, R1:R0
   \   000001AC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001AE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001B0   8100               LD      R16, Z
   \   000001B2   8111               LDD     R17, Z+1
   \   000001B4   E13A               LDI     R19, 26
   \   000001B6   9FA3               MUL     R26, R19
   \   000001B8   01F0               MOVW    R31:R30, R1:R0
   \   000001BA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001BC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001BE   8142               LDD     R20, Z+2
   \   000001C0   8153               LDD     R21, Z+3
   \   000001C2   01F8               MOVW    R31:R30, R17:R16
   \   000001C4   0FE4               ADD     R30, R20
   \   000001C6   1FF5               ADC     R31, R21
   \   000001C8   8320               ST      Z, R18
   \   000001CA   E10A               LDI     R16, 26
   \   000001CC   9FA0               MUL     R26, R16
   \   000001CE   01F0               MOVW    R31:R30, R1:R0
   \   000001D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001D4   8102               LDD     R16, Z+2
   \   000001D6   8113               LDD     R17, Z+3
   \   000001D8   5F0F               SUBI    R16, 255
   \   000001DA   4F1F               SBCI    R17, 255
   \   000001DC   8302               STD     Z+2, R16
   \   000001DE   8313               STD     Z+3, R17
    328              UART[ch].pTxBuffer[UART[ch].TxFirst++] = STORE_VERSION;        // cpmpability version
   \   000001E0   E022               LDI     R18, 2
   \   000001E2   E10A               LDI     R16, 26
   \   000001E4   9FA0               MUL     R26, R16
   \   000001E6   01F0               MOVW    R31:R30, R1:R0
   \   000001E8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001EA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001EC   8100               LD      R16, Z
   \   000001EE   8111               LDD     R17, Z+1
   \   000001F0   E13A               LDI     R19, 26
   \   000001F2   9FA3               MUL     R26, R19
   \   000001F4   01F0               MOVW    R31:R30, R1:R0
   \   000001F6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001F8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001FA   8142               LDD     R20, Z+2
   \   000001FC   8153               LDD     R21, Z+3
   \   000001FE   01F8               MOVW    R31:R30, R17:R16
   \   00000200   0FE4               ADD     R30, R20
   \   00000202   1FF5               ADC     R31, R21
   \   00000204   8320               ST      Z, R18
   \   00000206   E10A               LDI     R16, 26
   \   00000208   9FA0               MUL     R26, R16
   \   0000020A   01F0               MOVW    R31:R30, R1:R0
   \   0000020C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000020E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000210   8102               LDD     R16, Z+2
   \   00000212   8113               LDD     R17, Z+3
   \   00000214   5F0F               SUBI    R16, 255
   \   00000216   4F1F               SBCI    R17, 255
   \   00000218   8302               STD     Z+2, R16
   \   0000021A   8313               STD     Z+3, R17
    329              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RXSIZE_UART & 0xff);         // rx buffer size
   \   0000021C   E926               LDI     R18, 150
   \   0000021E   E10A               LDI     R16, 26
   \   00000220   9FA0               MUL     R26, R16
   \   00000222   01F0               MOVW    R31:R30, R1:R0
   \   00000224   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000226   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000228   8100               LD      R16, Z
   \   0000022A   8111               LDD     R17, Z+1
   \   0000022C   E13A               LDI     R19, 26
   \   0000022E   9FA3               MUL     R26, R19
   \   00000230   01F0               MOVW    R31:R30, R1:R0
   \   00000232   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000234   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000236   8142               LDD     R20, Z+2
   \   00000238   8153               LDD     R21, Z+3
   \   0000023A   01F8               MOVW    R31:R30, R17:R16
   \   0000023C   0FE4               ADD     R30, R20
   \   0000023E   1FF5               ADC     R31, R21
   \   00000240   8320               ST      Z, R18
   \   00000242   E10A               LDI     R16, 26
   \   00000244   9FA0               MUL     R26, R16
   \   00000246   01F0               MOVW    R31:R30, R1:R0
   \   00000248   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000024A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000024C   8102               LDD     R16, Z+2
   \   0000024E   8113               LDD     R17, Z+3
   \   00000250   5F0F               SUBI    R16, 255
   \   00000252   4F1F               SBCI    R17, 255
   \   00000254   8302               STD     Z+2, R16
   \   00000256   8313               STD     Z+3, R17
    330              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (( RXSIZE_UART >> 8) & 0xff); // rx buffer size
   \   00000258   E10A               LDI     R16, 26
   \   0000025A   9FA0               MUL     R26, R16
   \   0000025C   01F0               MOVW    R31:R30, R1:R0
   \   0000025E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000260   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000262   8100               LD      R16, Z
   \   00000264   8111               LDD     R17, Z+1
   \   00000266   E12A               LDI     R18, 26
   \   00000268   9FA2               MUL     R26, R18
   \   0000026A   01F0               MOVW    R31:R30, R1:R0
   \   0000026C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000026E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000270   8122               LDD     R18, Z+2
   \   00000272   8133               LDD     R19, Z+3
   \   00000274   01F8               MOVW    R31:R30, R17:R16
   \   00000276   0FE2               ADD     R30, R18
   \   00000278   1FF3               ADC     R31, R19
   \   0000027A   E000               LDI     R16, 0
   \   0000027C   8300               ST      Z, R16
   \   0000027E   E10A               LDI     R16, 26
   \   00000280   9FA0               MUL     R26, R16
   \   00000282   01F0               MOVW    R31:R30, R1:R0
   \   00000284   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000286   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000288   8102               LDD     R16, Z+2
   \   0000028A   8113               LDD     R17, Z+3
   \   0000028C   5F0F               SUBI    R16, 255
   \   0000028E   4F1F               SBCI    R17, 255
   \   00000290   8302               STD     Z+2, R16
   \   00000292   8313               STD     Z+3, R17
    331              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TXSIZE_UART & 0xff);         // tx buffer size
   \   00000294   E123               LDI     R18, 19
   \   00000296   E10A               LDI     R16, 26
   \   00000298   9FA0               MUL     R26, R16
   \   0000029A   01F0               MOVW    R31:R30, R1:R0
   \   0000029C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000029E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002A0   8100               LD      R16, Z
   \   000002A2   8111               LDD     R17, Z+1
   \   000002A4   E13A               LDI     R19, 26
   \   000002A6   9FA3               MUL     R26, R19
   \   000002A8   01F0               MOVW    R31:R30, R1:R0
   \   000002AA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002AC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002AE   8142               LDD     R20, Z+2
   \   000002B0   8153               LDD     R21, Z+3
   \   000002B2   01F8               MOVW    R31:R30, R17:R16
   \   000002B4   0FE4               ADD     R30, R20
   \   000002B6   1FF5               ADC     R31, R21
   \   000002B8   8320               ST      Z, R18
   \   000002BA   E10A               LDI     R16, 26
   \   000002BC   9FA0               MUL     R26, R16
   \   000002BE   01F0               MOVW    R31:R30, R1:R0
   \   000002C0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002C2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002C4   8102               LDD     R16, Z+2
   \   000002C6   8113               LDD     R17, Z+3
   \   000002C8   5F0F               SUBI    R16, 255
   \   000002CA   4F1F               SBCI    R17, 255
   \   000002CC   8302               STD     Z+2, R16
   \   000002CE   8313               STD     Z+3, R17
    332              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((TXSIZE_UART >> 8) & 0xff);  // tx buffer size
   \   000002D0   E021               LDI     R18, 1
   \   000002D2   E10A               LDI     R16, 26
   \   000002D4   9FA0               MUL     R26, R16
   \   000002D6   01F0               MOVW    R31:R30, R1:R0
   \   000002D8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002DA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002DC   8100               LD      R16, Z
   \   000002DE   8111               LDD     R17, Z+1
   \   000002E0   E13A               LDI     R19, 26
   \   000002E2   9FA3               MUL     R26, R19
   \   000002E4   01F0               MOVW    R31:R30, R1:R0
   \   000002E6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002E8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002EA   8142               LDD     R20, Z+2
   \   000002EC   8153               LDD     R21, Z+3
   \   000002EE   01F8               MOVW    R31:R30, R17:R16
   \   000002F0   0FE4               ADD     R30, R20
   \   000002F2   1FF5               ADC     R31, R21
   \   000002F4   8320               ST      Z, R18
   \   000002F6   E10A               LDI     R16, 26
   \   000002F8   9FA0               MUL     R26, R16
   \   000002FA   01F0               MOVW    R31:R30, R1:R0
   \   000002FC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002FE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000300   8102               LDD     R16, Z+2
   \   00000302   8113               LDD     R17, Z+3
   \   00000304   5F0F               SUBI    R16, 255
   \   00000306   4F1F               SBCI    R17, 255
   \   00000308   8302               STD     Z+2, R16
   \   0000030A   8313               STD     Z+3, R17
    333              UART[ch].pTxBuffer[UART[ch].TxFirst++] = RestartStatus ;                  // restart flag
   \   0000030C   9120....           LDS     R18, RestartStatus
   \   00000310   E10A               LDI     R16, 26
   \   00000312   9FA0               MUL     R26, R16
   \   00000314   01F0               MOVW    R31:R30, R1:R0
   \   00000316   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000318   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000031A   8100               LD      R16, Z
   \   0000031C   8111               LDD     R17, Z+1
   \   0000031E   E13A               LDI     R19, 26
   \   00000320   9FA3               MUL     R26, R19
   \   00000322   01F0               MOVW    R31:R30, R1:R0
   \   00000324   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000326   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000328   8142               LDD     R20, Z+2
   \   0000032A   8153               LDD     R21, Z+3
   \   0000032C   01F8               MOVW    R31:R30, R17:R16
   \   0000032E   0FE4               ADD     R30, R20
   \   00000330   1FF5               ADC     R31, R21
   \   00000332   8320               ST      Z, R18
   \   00000334   E10A               LDI     R16, 26
   \   00000336   9FA0               MUL     R26, R16
   \   00000338   01F0               MOVW    R31:R30, R1:R0
   \   0000033A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000033C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000033E   8102               LDD     R16, Z+2
   \   00000340   8113               LDD     R17, Z+3
   \   00000342   5F0F               SUBI    R16, 255
   \   00000344   4F1F               SBCI    R17, 255
   \   00000346   8302               STD     Z+2, R16
   \   00000348   8313               STD     Z+3, R17
    334              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROGTYPE_APP ;                // Application program
   \   0000034A   E021               LDI     R18, 1
   \   0000034C   E10A               LDI     R16, 26
   \   0000034E   9FA0               MUL     R26, R16
   \   00000350   01F0               MOVW    R31:R30, R1:R0
   \   00000352   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000354   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000356   8100               LD      R16, Z
   \   00000358   8111               LDD     R17, Z+1
   \   0000035A   E13A               LDI     R19, 26
   \   0000035C   9FA3               MUL     R26, R19
   \   0000035E   01F0               MOVW    R31:R30, R1:R0
   \   00000360   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000362   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000364   8142               LDD     R20, Z+2
   \   00000366   8153               LDD     R21, Z+3
   \   00000368   01F8               MOVW    R31:R30, R17:R16
   \   0000036A   0FE4               ADD     R30, R20
   \   0000036C   1FF5               ADC     R31, R21
   \   0000036E   8320               ST      Z, R18
   \   00000370   E10A               LDI     R16, 26
   \   00000372   9FA0               MUL     R26, R16
   \   00000374   01F0               MOVW    R31:R30, R1:R0
   \   00000376   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000378   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000037A   8102               LDD     R16, Z+2
   \   0000037C   8113               LDD     R17, Z+3
   \   0000037E   5F0F               SUBI    R16, 255
   \   00000380   4F1F               SBCI    R17, 255
   \   00000382   8302               STD     Z+2, R16
   \   00000384   8313               STD     Z+3, R17
    335          
    336              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000386   E10A               LDI     R16, 26
   \   00000388   9FA0               MUL     R26, R16
   \   0000038A   01F0               MOVW    R31:R30, R1:R0
   \   0000038C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000038E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000390   8122               LDD     R18, Z+2
   \   00000392   8133               LDD     R19, Z+3
   \   00000394   1924               SUB     R18, R4
   \   00000396   5022               SUBI    R18, 2
   \   00000398   E10A               LDI     R16, 26
   \   0000039A   9FA0               MUL     R26, R16
   \   0000039C   01F0               MOVW    R31:R30, R1:R0
   \   0000039E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003A0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003A2   8100               LD      R16, Z
   \   000003A4   8111               LDD     R17, Z+1
   \   000003A6   01F8               MOVW    R31:R30, R17:R16
   \   000003A8   0DE4               ADD     R30, R4
   \   000003AA   1DF5               ADC     R31, R5
   \   000003AC   8320               ST      Z, R18
    337              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000003AE   E10A               LDI     R16, 26
   \   000003B0   9FA0               MUL     R26, R16
   \   000003B2   01F0               MOVW    R31:R30, R1:R0
   \   000003B4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003B6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003B8   8102               LDD     R16, Z+2
   \   000003BA   8113               LDD     R17, Z+3
   \   000003BC   1904               SUB     R16, R4
   \   000003BE   0915               SBC     R17, R5
   \   000003C0   5002               SUBI    R16, 2
   \   000003C2   4010               SBCI    R17, 0
   \   000003C4   2F01               MOV     R16, R17
   \   000003C6   E010               LDI     R17, 0
   \   000003C8   2F20               MOV     R18, R16
   \   000003CA   E10A               LDI     R16, 26
   \   000003CC   9FA0               MUL     R26, R16
   \   000003CE   01F0               MOVW    R31:R30, R1:R0
   \   000003D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003D4   8100               LD      R16, Z
   \   000003D6   8111               LDD     R17, Z+1
   \   000003D8   0D04               ADD     R16, R4
   \   000003DA   1D15               ADC     R17, R5
   \   000003DC   01F8               MOVW    R31:R30, R17:R16
   \   000003DE   8321               STD     Z+1, R18
    338          
    339              RestartStatus = 0 ;                                                       // set reset stat to 0 = read
   \   000003E0   E000               LDI     R16, 0
   \   000003E2   9300....           STS     RestartStatus, R16
    340          }
   \   000003E6   E0E6               LDI     R30, 6
   \   000003E8   ........           JMP     ?EPILOGUE_B6_L09
    341          
    342          /*************************************************************************
    343          *
    344          * Build EEPROM data package
    345          *
    346          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    347          void BuildEEPROMData(char ch, short pointer) {
   \                     BuildEEPROMData:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2F80               MOV     R24, R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
    348          
    349              short ntna ;
    350              char channel;
    351              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000008   E001               LDI     R16, 1
   \   0000000A   E11A               LDI     R17, 26
   \   0000000C   9F81               MUL     R24, R17
   \   0000000E   01F0               MOVW    R31:R30, R1:R0
   \   00000010   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000014   8F01               STD     Z+25, R16
    352          
    353              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA & 0xff;
   \   00000016   E329               LDI     R18, 57
   \   00000018   E10A               LDI     R16, 26
   \   0000001A   9F80               MUL     R24, R16
   \   0000001C   01F0               MOVW    R31:R30, R1:R0
   \   0000001E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000020   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000022   8100               LD      R16, Z
   \   00000024   8111               LDD     R17, Z+1
   \   00000026   E13A               LDI     R19, 26
   \   00000028   9F83               MUL     R24, R19
   \   0000002A   01F0               MOVW    R31:R30, R1:R0
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   8142               LDD     R20, Z+2
   \   00000032   8153               LDD     R21, Z+3
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   0FE4               ADD     R30, R20
   \   00000038   1FF5               ADC     R31, R21
   \   0000003A   8320               ST      Z, R18
   \   0000003C   E10A               LDI     R16, 26
   \   0000003E   9F80               MUL     R24, R16
   \   00000040   01F0               MOVW    R31:R30, R1:R0
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   5F0F               SUBI    R16, 255
   \   0000004C   4F1F               SBCI    R17, 255
   \   0000004E   8302               STD     Z+2, R16
   \   00000050   8313               STD     Z+3, R17
    354              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA >> 8;
   \   00000052   E024               LDI     R18, 4
   \   00000054   E10A               LDI     R16, 26
   \   00000056   9F80               MUL     R24, R16
   \   00000058   01F0               MOVW    R31:R30, R1:R0
   \   0000005A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005E   8100               LD      R16, Z
   \   00000060   8111               LDD     R17, Z+1
   \   00000062   E13A               LDI     R19, 26
   \   00000064   9F83               MUL     R24, R19
   \   00000066   01F0               MOVW    R31:R30, R1:R0
   \   00000068   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000006A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000006C   8142               LDD     R20, Z+2
   \   0000006E   8153               LDD     R21, Z+3
   \   00000070   01F8               MOVW    R31:R30, R17:R16
   \   00000072   0FE4               ADD     R30, R20
   \   00000074   1FF5               ADC     R31, R21
   \   00000076   8320               ST      Z, R18
   \   00000078   E10A               LDI     R16, 26
   \   0000007A   9F80               MUL     R24, R16
   \   0000007C   01F0               MOVW    R31:R30, R1:R0
   \   0000007E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000082   8102               LDD     R16, Z+2
   \   00000084   8113               LDD     R17, Z+3
   \   00000086   5F0F               SUBI    R16, 255
   \   00000088   4F1F               SBCI    R17, 255
   \   0000008A   8302               STD     Z+2, R16
   \   0000008C   8313               STD     Z+3, R17
    355              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000008E   E10A               LDI     R16, 26
   \   00000090   9F80               MUL     R24, R16
   \   00000092   01F0               MOVW    R31:R30, R1:R0
   \   00000094   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000096   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000098   81A2               LDD     R26, Z+2
   \   0000009A   81B3               LDD     R27, Z+3
    356              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000009C   E10A               LDI     R16, 26
   \   0000009E   9F80               MUL     R24, R16
   \   000000A0   01F0               MOVW    R31:R30, R1:R0
   \   000000A2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A6   8102               LDD     R16, Z+2
   \   000000A8   8113               LDD     R17, Z+3
   \   000000AA   5F0E               SUBI    R16, 254
   \   000000AC   4F1F               SBCI    R17, 255
   \   000000AE   8302               STD     Z+2, R16
   \   000000B0   8313               STD     Z+3, R17
    357          
    358              channel = UART[ch].pRxBuffer[pointer];
   \   000000B2   E10A               LDI     R16, 26
   \   000000B4   9F80               MUL     R24, R16
   \   000000B6   01F0               MOVW    R31:R30, R1:R0
   \   000000B8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BC   8502               LDD     R16, Z+10
   \   000000BE   8513               LDD     R17, Z+11
   \   000000C0   01F8               MOVW    R31:R30, R17:R16
   \   000000C2   0DE4               ADD     R30, R4
   \   000000C4   1DF5               ADC     R31, R5
   \   000000C6   8190               LD      R25, Z
    359              UART[ch].pTxBuffer[UART[ch].TxFirst++] = channel; //channel
   \   000000C8   E10A               LDI     R16, 26
   \   000000CA   9F80               MUL     R24, R16
   \   000000CC   01F0               MOVW    R31:R30, R1:R0
   \   000000CE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D2   8100               LD      R16, Z
   \   000000D4   8111               LDD     R17, Z+1
   \   000000D6   E12A               LDI     R18, 26
   \   000000D8   9F82               MUL     R24, R18
   \   000000DA   01F0               MOVW    R31:R30, R1:R0
   \   000000DC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000DE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000E0   8122               LDD     R18, Z+2
   \   000000E2   8133               LDD     R19, Z+3
   \   000000E4   01F8               MOVW    R31:R30, R17:R16
   \   000000E6   0FE2               ADD     R30, R18
   \   000000E8   1FF3               ADC     R31, R19
   \   000000EA   8390               ST      Z, R25
   \   000000EC   E10A               LDI     R16, 26
   \   000000EE   9F80               MUL     R24, R16
   \   000000F0   01F0               MOVW    R31:R30, R1:R0
   \   000000F2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F6   8102               LDD     R16, Z+2
   \   000000F8   8113               LDD     R17, Z+3
   \   000000FA   5F0F               SUBI    R16, 255
   \   000000FC   4F1F               SBCI    R17, 255
   \   000000FE   8302               STD     Z+2, R16
   \   00000100   8313               STD     Z+3, R17
    360          
    361              ReadEEPROMBuffer( (channel * sizeof(float)* 2) , sizeof(float), (char*)&UART[ch].pTxBuffer[UART[ch].TxFirst] );
   \   00000102   E10A               LDI     R16, 26
   \   00000104   9F80               MUL     R24, R16
   \   00000106   01F0               MOVW    R31:R30, R1:R0
   \   00000108   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000010A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010C   8140               LD      R20, Z
   \   0000010E   8151               LDD     R21, Z+1
   \   00000110   E10A               LDI     R16, 26
   \   00000112   9F80               MUL     R24, R16
   \   00000114   01F0               MOVW    R31:R30, R1:R0
   \   00000116   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000118   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000011A   8102               LDD     R16, Z+2
   \   0000011C   8113               LDD     R17, Z+3
   \   0000011E   0F40               ADD     R20, R16
   \   00000120   1F51               ADC     R21, R17
   \   00000122   E024               LDI     R18, 4
   \   00000124   E008               LDI     R16, 8
   \   00000126   9F90               MUL     R25, R16
   \   00000128   0180               MOVW    R17:R16, R1:R0
   \   0000012A   ........           CALL    ReadEEPROMBuffer
    362              UART[ch].TxFirst += sizeof(float) ;
   \   0000012E   E10A               LDI     R16, 26
   \   00000130   9F80               MUL     R24, R16
   \   00000132   01F0               MOVW    R31:R30, R1:R0
   \   00000134   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000136   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000138   8102               LDD     R16, Z+2
   \   0000013A   8113               LDD     R17, Z+3
   \   0000013C   5F0C               SUBI    R16, 252
   \   0000013E   4F1F               SBCI    R17, 255
   \   00000140   8302               STD     Z+2, R16
   \   00000142   8313               STD     Z+3, R17
    363              ReadEEPROMBuffer( (channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char*)&UART[ch].pTxBuffer[UART[ch].TxFirst] );
   \   00000144   E10A               LDI     R16, 26
   \   00000146   9F80               MUL     R24, R16
   \   00000148   01F0               MOVW    R31:R30, R1:R0
   \   0000014A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000014C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000014E   8140               LD      R20, Z
   \   00000150   8151               LDD     R21, Z+1
   \   00000152   E10A               LDI     R16, 26
   \   00000154   9F80               MUL     R24, R16
   \   00000156   01F0               MOVW    R31:R30, R1:R0
   \   00000158   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000015A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000015C   8102               LDD     R16, Z+2
   \   0000015E   8113               LDD     R17, Z+3
   \   00000160   0F40               ADD     R20, R16
   \   00000162   1F51               ADC     R21, R17
   \   00000164   E024               LDI     R18, 4
   \   00000166   E008               LDI     R16, 8
   \   00000168   9F90               MUL     R25, R16
   \   0000016A   E004               LDI     R16, 4
   \   0000016C   0E00               ADD     R0, R16
   \   0000016E   E000               LDI     R16, 0
   \   00000170   1E10               ADC     R1, R16
   \   00000172   0180               MOVW    R17:R16, R1:R0
   \   00000174   ........           CALL    ReadEEPROMBuffer
    364              UART[ch].TxFirst += sizeof(float) ;
   \   00000178   E10A               LDI     R16, 26
   \   0000017A   9F80               MUL     R24, R16
   \   0000017C   01F0               MOVW    R31:R30, R1:R0
   \   0000017E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000180   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000182   8102               LDD     R16, Z+2
   \   00000184   8113               LDD     R17, Z+3
   \   00000186   5F0C               SUBI    R16, 252
   \   00000188   4F1F               SBCI    R17, 255
   \   0000018A   8302               STD     Z+2, R16
   \   0000018C   8313               STD     Z+3, R17
    365          
    366              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   0000018E   E10A               LDI     R16, 26
   \   00000190   9F80               MUL     R24, R16
   \   00000192   01F0               MOVW    R31:R30, R1:R0
   \   00000194   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000196   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000198   8122               LDD     R18, Z+2
   \   0000019A   8133               LDD     R19, Z+3
   \   0000019C   1B2A               SUB     R18, R26
   \   0000019E   5022               SUBI    R18, 2
   \   000001A0   E10A               LDI     R16, 26
   \   000001A2   9F80               MUL     R24, R16
   \   000001A4   01F0               MOVW    R31:R30, R1:R0
   \   000001A6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001A8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001AA   8100               LD      R16, Z
   \   000001AC   8111               LDD     R17, Z+1
   \   000001AE   01F8               MOVW    R31:R30, R17:R16
   \   000001B0   0FEA               ADD     R30, R26
   \   000001B2   1FFB               ADC     R31, R27
   \   000001B4   8320               ST      Z, R18
    367              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000001B6   E10A               LDI     R16, 26
   \   000001B8   9F80               MUL     R24, R16
   \   000001BA   01F0               MOVW    R31:R30, R1:R0
   \   000001BC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001BE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001C0   8102               LDD     R16, Z+2
   \   000001C2   8113               LDD     R17, Z+3
   \   000001C4   1B0A               SUB     R16, R26
   \   000001C6   0B1B               SBC     R17, R27
   \   000001C8   5002               SUBI    R16, 2
   \   000001CA   4010               SBCI    R17, 0
   \   000001CC   2F01               MOV     R16, R17
   \   000001CE   E010               LDI     R17, 0
   \   000001D0   2F20               MOV     R18, R16
   \   000001D2   E10A               LDI     R16, 26
   \   000001D4   9F80               MUL     R24, R16
   \   000001D6   01F0               MOVW    R31:R30, R1:R0
   \   000001D8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001DA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001DC   8100               LD      R16, Z
   \   000001DE   8111               LDD     R17, Z+1
   \   000001E0   0F0A               ADD     R16, R26
   \   000001E2   1F1B               ADC     R17, R27
   \   000001E4   01F8               MOVW    R31:R30, R17:R16
   \   000001E6   8321               STD     Z+1, R18
    368          }
   \   000001E8   E0E6               LDI     R30, 6
   \   000001EA   ........           JMP     ?EPILOGUE_B6_L09
    369          
    370          
    371          /*************************************************************************
    372          *
    373          * Build datablock for Internal AD
    374          *
    375          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    376          void BuildADInt(char ch, short pointer) {
   \                     BuildADInt:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01B9               MOVW    R23:R22, R19:R18
    377          
    378              short ntna, i ;
    379              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000006   E011               LDI     R17, 1
   \   00000008   E12A               LDI     R18, 26
   \   0000000A   9F02               MUL     R16, R18
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000012   8F11               STD     Z+25, R17
    380          
    381              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA & 0xff;
   \   00000014   E413               LDI     R17, 67
   \   00000016   E12A               LDI     R18, 26
   \   00000018   9F02               MUL     R16, R18
   \   0000001A   01F0               MOVW    R31:R30, R1:R0
   \   0000001C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000020   8120               LD      R18, Z
   \   00000022   8131               LDD     R19, Z+1
   \   00000024   E14A               LDI     R20, 26
   \   00000026   9F04               MUL     R16, R20
   \   00000028   01F0               MOVW    R31:R30, R1:R0
   \   0000002A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002E   8142               LDD     R20, Z+2
   \   00000030   8153               LDD     R21, Z+3
   \   00000032   01F9               MOVW    R31:R30, R19:R18
   \   00000034   0FE4               ADD     R30, R20
   \   00000036   1FF5               ADC     R31, R21
   \   00000038   8310               ST      Z, R17
   \   0000003A   E11A               LDI     R17, 26
   \   0000003C   9F01               MUL     R16, R17
   \   0000003E   01F0               MOVW    R31:R30, R1:R0
   \   00000040   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000044   8122               LDD     R18, Z+2
   \   00000046   8133               LDD     R19, Z+3
   \   00000048   5F2F               SUBI    R18, 255
   \   0000004A   4F3F               SBCI    R19, 255
   \   0000004C   8322               STD     Z+2, R18
   \   0000004E   8333               STD     Z+3, R19
    382              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA >> 8;
   \   00000050   E014               LDI     R17, 4
   \   00000052   E12A               LDI     R18, 26
   \   00000054   9F02               MUL     R16, R18
   \   00000056   01F0               MOVW    R31:R30, R1:R0
   \   00000058   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005C   8120               LD      R18, Z
   \   0000005E   8131               LDD     R19, Z+1
   \   00000060   E14A               LDI     R20, 26
   \   00000062   9F04               MUL     R16, R20
   \   00000064   01F0               MOVW    R31:R30, R1:R0
   \   00000066   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000006A   8142               LDD     R20, Z+2
   \   0000006C   8153               LDD     R21, Z+3
   \   0000006E   01F9               MOVW    R31:R30, R19:R18
   \   00000070   0FE4               ADD     R30, R20
   \   00000072   1FF5               ADC     R31, R21
   \   00000074   8310               ST      Z, R17
   \   00000076   E11A               LDI     R17, 26
   \   00000078   9F01               MUL     R16, R17
   \   0000007A   01F0               MOVW    R31:R30, R1:R0
   \   0000007C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000080   8122               LDD     R18, Z+2
   \   00000082   8133               LDD     R19, Z+3
   \   00000084   5F2F               SUBI    R18, 255
   \   00000086   4F3F               SBCI    R19, 255
   \   00000088   8322               STD     Z+2, R18
   \   0000008A   8333               STD     Z+3, R19
    383              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000008C   E11A               LDI     R17, 26
   \   0000008E   9F01               MUL     R16, R17
   \   00000090   01F0               MOVW    R31:R30, R1:R0
   \   00000092   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000094   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000096   8122               LDD     R18, Z+2
   \   00000098   8133               LDD     R19, Z+3
    384              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000009A   E11A               LDI     R17, 26
   \   0000009C   9F01               MUL     R16, R17
   \   0000009E   01F0               MOVW    R31:R30, R1:R0
   \   000000A0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A4   8142               LDD     R20, Z+2
   \   000000A6   8153               LDD     R21, Z+3
   \   000000A8   5F4E               SUBI    R20, 254
   \   000000AA   4F5F               SBCI    R21, 255
   \   000000AC   8342               STD     Z+2, R20
   \   000000AE   8353               STD     Z+3, R21
    385          
    386              for (i = 0; i<3; i++) {
   \   000000B0   E040               LDI     R20, 0
   \   000000B2   E050               LDI     R21, 0
   \                     ??BuildADInt_0:
   \   000000B4   3043               CPI     R20, 3
   \   000000B6   E010               LDI     R17, 0
   \   000000B8   0751               CPC     R21, R17
   \   000000BA   F00C               BRLT    $+2+2
   \   000000BC   C04E               RJMP    ??BuildADInt_1
    387                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] ;
   \   000000BE   01FA               MOVW    R31:R30, R21:R20
   \   000000C0   0FEE               LSL     R30
   \   000000C2   1FFF               ROL     R31
   \   000000C4   ....               SUBI    R30, LOW((-(ADInt) & 0xFFFF))
   \   000000C6   ....               SBCI    R31, (-(ADInt) & 0xFFFF) >> 8
   \   000000C8   8000               LD      R0, Z
   \   000000CA   8011               LDD     R1, Z+1
   \   000000CC   2D10               MOV     R17, R0
   \   000000CE   E1EA               LDI     R30, 26
   \   000000D0   9F0E               MUL     R16, R30
   \   000000D2   01F0               MOVW    R31:R30, R1:R0
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8020               LD      R2, Z
   \   000000DA   8031               LDD     R3, Z+1
   \   000000DC   E1EA               LDI     R30, 26
   \   000000DE   9F0E               MUL     R16, R30
   \   000000E0   01F0               MOVW    R31:R30, R1:R0
   \   000000E2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000E4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000E6   8002               LDD     R0, Z+2
   \   000000E8   8013               LDD     R1, Z+3
   \   000000EA   01F1               MOVW    R31:R30, R3:R2
   \   000000EC   0DE0               ADD     R30, R0
   \   000000EE   1DF1               ADC     R31, R1
   \   000000F0   8310               ST      Z, R17
   \   000000F2   E11A               LDI     R17, 26
   \   000000F4   9F01               MUL     R16, R17
   \   000000F6   01F0               MOVW    R31:R30, R1:R0
   \   000000F8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000FA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000FC   8182               LDD     R24, Z+2
   \   000000FE   8193               LDD     R25, Z+3
   \   00000100   9601               ADIW    R25:R24, 1
   \   00000102   8382               STD     Z+2, R24
   \   00000104   8393               STD     Z+3, R25
    388                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] >> 8 ;   // ADresult
   \   00000106   01FA               MOVW    R31:R30, R21:R20
   \   00000108   0FEE               LSL     R30
   \   0000010A   1FFF               ROL     R31
   \   0000010C   ....               SUBI    R30, LOW((-(ADInt) & 0xFFFF))
   \   0000010E   ....               SBCI    R31, (-(ADInt) & 0xFFFF) >> 8
   \   00000110   8000               LD      R0, Z
   \   00000112   8011               LDD     R1, Z+1
   \   00000114   2C01               MOV     R0, R1
   \   00000116   0C11               LSL     R1
   \   00000118   0811               SBC     R1, R1
   \   0000011A   2D10               MOV     R17, R0
   \   0000011C   E1EA               LDI     R30, 26
   \   0000011E   9F0E               MUL     R16, R30
   \   00000120   01F0               MOVW    R31:R30, R1:R0
   \   00000122   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000124   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000126   8020               LD      R2, Z
   \   00000128   8031               LDD     R3, Z+1
   \   0000012A   E1EA               LDI     R30, 26
   \   0000012C   9F0E               MUL     R16, R30
   \   0000012E   01F0               MOVW    R31:R30, R1:R0
   \   00000130   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000132   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000134   8002               LDD     R0, Z+2
   \   00000136   8013               LDD     R1, Z+3
   \   00000138   01F1               MOVW    R31:R30, R3:R2
   \   0000013A   0DE0               ADD     R30, R0
   \   0000013C   1DF1               ADC     R31, R1
   \   0000013E   8310               ST      Z, R17
   \   00000140   E11A               LDI     R17, 26
   \   00000142   9F01               MUL     R16, R17
   \   00000144   01F0               MOVW    R31:R30, R1:R0
   \   00000146   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000148   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000014A   8182               LDD     R24, Z+2
   \   0000014C   8193               LDD     R25, Z+3
   \   0000014E   9601               ADIW    R25:R24, 1
   \   00000150   8382               STD     Z+2, R24
   \   00000152   8393               STD     Z+3, R25
    389              }
   \   00000154   5F4F               SUBI    R20, 255
   \   00000156   4F5F               SBCI    R21, 255
   \   00000158   CFAD               RJMP    ??BuildADInt_0
    390          
    391              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??BuildADInt_1:
   \   0000015A   E11A               LDI     R17, 26
   \   0000015C   9F01               MUL     R16, R17
   \   0000015E   01F0               MOVW    R31:R30, R1:R0
   \   00000160   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000162   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000164   8182               LDD     R24, Z+2
   \   00000166   8193               LDD     R25, Z+3
   \   00000168   1B82               SUB     R24, R18
   \   0000016A   5082               SUBI    R24, 2
   \   0000016C   E11A               LDI     R17, 26
   \   0000016E   9F01               MUL     R16, R17
   \   00000170   01F0               MOVW    R31:R30, R1:R0
   \   00000172   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000174   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000176   8000               LD      R0, Z
   \   00000178   8011               LDD     R1, Z+1
   \   0000017A   01F0               MOVW    R31:R30, R1:R0
   \   0000017C   0FE2               ADD     R30, R18
   \   0000017E   1FF3               ADC     R31, R19
   \   00000180   8380               ST      Z, R24
    392              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000182   E11A               LDI     R17, 26
   \   00000184   9F01               MUL     R16, R17
   \   00000186   01F0               MOVW    R31:R30, R1:R0
   \   00000188   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000018A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000018C   8182               LDD     R24, Z+2
   \   0000018E   8193               LDD     R25, Z+3
   \   00000190   1B82               SUB     R24, R18
   \   00000192   0B93               SBC     R25, R19
   \   00000194   9702               SBIW    R25:R24, 2
   \   00000196   2F89               MOV     R24, R25
   \   00000198   E090               LDI     R25, 0
   \   0000019A   E11A               LDI     R17, 26
   \   0000019C   9F01               MUL     R16, R17
   \   0000019E   01F0               MOVW    R31:R30, R1:R0
   \   000001A0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001A2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001A4   8000               LD      R0, Z
   \   000001A6   8011               LDD     R1, Z+1
   \   000001A8   0E02               ADD     R0, R18
   \   000001AA   1E13               ADC     R1, R19
   \   000001AC   01F0               MOVW    R31:R30, R1:R0
   \   000001AE   8381               STD     Z+1, R24
    393          
    394          }
   \   000001B0   9189               LD      R24, Y+
   \   000001B2   9199               LD      R25, Y+
   \   000001B4   9508               RET
    395          
    396          
    397          /*************************************************************************
    398          *
    399          * Build datablock for eeprom on ADcard
    400          *
    401          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    402          void BuildADEpromdata(char ch, char portch) {
   \                     BuildADEpromdata:
    403          
    404              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000000   E021               LDI     R18, 1
   \   00000002   E13A               LDI     R19, 26
   \   00000004   9F03               MUL     R16, R19
   \   00000006   01F0               MOVW    R31:R30, R1:R0
   \   00000008   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000000A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000000C   8F21               STD     Z+25, R18
    405          
    406              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF & 0xff;
   \   0000000E   E849               LDI     R20, 137
   \   00000010   E12A               LDI     R18, 26
   \   00000012   9F02               MUL     R16, R18
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   8120               LD      R18, Z
   \   0000001C   8131               LDD     R19, Z+1
   \   0000001E   E15A               LDI     R21, 26
   \   00000020   9F05               MUL     R16, R21
   \   00000022   01F0               MOVW    R31:R30, R1:R0
   \   00000024   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000026   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000028   8162               LDD     R22, Z+2
   \   0000002A   8173               LDD     R23, Z+3
   \   0000002C   01F9               MOVW    R31:R30, R19:R18
   \   0000002E   0FE6               ADD     R30, R22
   \   00000030   1FF7               ADC     R31, R23
   \   00000032   8340               ST      Z, R20
   \   00000034   E12A               LDI     R18, 26
   \   00000036   9F02               MUL     R16, R18
   \   00000038   01F0               MOVW    R31:R30, R1:R0
   \   0000003A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000003E   8122               LDD     R18, Z+2
   \   00000040   8133               LDD     R19, Z+3
   \   00000042   5F2F               SUBI    R18, 255
   \   00000044   4F3F               SBCI    R19, 255
   \   00000046   8322               STD     Z+2, R18
   \   00000048   8333               STD     Z+3, R19
    407              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF >> 8;
   \   0000004A   E044               LDI     R20, 4
   \   0000004C   E12A               LDI     R18, 26
   \   0000004E   9F02               MUL     R16, R18
   \   00000050   01F0               MOVW    R31:R30, R1:R0
   \   00000052   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000054   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000056   8120               LD      R18, Z
   \   00000058   8131               LDD     R19, Z+1
   \   0000005A   E15A               LDI     R21, 26
   \   0000005C   9F05               MUL     R16, R21
   \   0000005E   01F0               MOVW    R31:R30, R1:R0
   \   00000060   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000064   8162               LDD     R22, Z+2
   \   00000066   8173               LDD     R23, Z+3
   \   00000068   01F9               MOVW    R31:R30, R19:R18
   \   0000006A   0FE6               ADD     R30, R22
   \   0000006C   1FF7               ADC     R31, R23
   \   0000006E   8340               ST      Z, R20
   \   00000070   E12A               LDI     R18, 26
   \   00000072   9F02               MUL     R16, R18
   \   00000074   01F0               MOVW    R31:R30, R1:R0
   \   00000076   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000078   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000007A   8122               LDD     R18, Z+2
   \   0000007C   8133               LDD     R19, Z+3
   \   0000007E   5F2F               SUBI    R18, 255
   \   00000080   4F3F               SBCI    R19, 255
   \   00000082   8322               STD     Z+2, R18
   \   00000084   8333               STD     Z+3, R19
    408              short ntna = UART[ch].TxFirst ;                                    // remember index
   \   00000086   E12A               LDI     R18, 26
   \   00000088   9F02               MUL     R16, R18
   \   0000008A   01F0               MOVW    R31:R30, R1:R0
   \   0000008C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000008E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000090   8122               LDD     R18, Z+2
   \   00000092   8133               LDD     R19, Z+3
    409              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000094   E14A               LDI     R20, 26
   \   00000096   9F04               MUL     R16, R20
   \   00000098   01F0               MOVW    R31:R30, R1:R0
   \   0000009A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009E   8142               LDD     R20, Z+2
   \   000000A0   8153               LDD     R21, Z+3
   \   000000A2   5F4E               SUBI    R20, 254
   \   000000A4   4F5F               SBCI    R21, 255
   \   000000A6   8342               STD     Z+2, R20
   \   000000A8   8353               STD     Z+3, R21
    410          
    411              for (short i = 0; i < 44; i++) {
   \   000000AA   E040               LDI     R20, 0
   \   000000AC   E050               LDI     R21, 0
   \                     ??BuildADEpromdata_0:
   \   000000AE   324C               CPI     R20, 44
   \   000000B0   E060               LDI     R22, 0
   \   000000B2   0756               CPC     R21, R22
   \   000000B4   F564               BRGE    ??BuildADEpromdata_1
    412                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FromTargetBuffer[portch][i] ;
   \   000000B6   E362               LDI     R22, 50
   \   000000B8   9F16               MUL     R17, R22
   \   000000BA   ....               LDI     R22, LOW(TData)
   \   000000BC   0E06               ADD     R0, R22
   \   000000BE   ....               LDI     R22, (TData) >> 8
   \   000000C0   1E16               ADC     R1, R22
   \   000000C2   0E04               ADD     R0, R20
   \   000000C4   1E15               ADC     R1, R21
   \   000000C6   01F0               MOVW    R31:R30, R1:R0
   \   000000C8   56EC               SUBI    R30, 108
   \   000000CA   4FFA               SBCI    R31, 250
   \   000000CC   8020               LD      R2, Z
   \   000000CE   E16A               LDI     R22, 26
   \   000000D0   9F06               MUL     R16, R22
   \   000000D2   01F0               MOVW    R31:R30, R1:R0
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8160               LD      R22, Z
   \   000000DA   8171               LDD     R23, Z+1
   \   000000DC   E1EA               LDI     R30, 26
   \   000000DE   9F0E               MUL     R16, R30
   \   000000E0   01F0               MOVW    R31:R30, R1:R0
   \   000000E2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000E4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000E6   8002               LDD     R0, Z+2
   \   000000E8   8013               LDD     R1, Z+3
   \   000000EA   01FB               MOVW    R31:R30, R23:R22
   \   000000EC   0DE0               ADD     R30, R0
   \   000000EE   1DF1               ADC     R31, R1
   \   000000F0   8220               ST      Z, R2
   \   000000F2   E16A               LDI     R22, 26
   \   000000F4   9F06               MUL     R16, R22
   \   000000F6   01F0               MOVW    R31:R30, R1:R0
   \   000000F8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000FA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000FC   8162               LDD     R22, Z+2
   \   000000FE   8173               LDD     R23, Z+3
   \   00000100   5F6F               SUBI    R22, 255
   \   00000102   4F7F               SBCI    R23, 255
   \   00000104   8362               STD     Z+2, R22
   \   00000106   8373               STD     Z+3, R23
    413              }
   \   00000108   5F4F               SUBI    R20, 255
   \   0000010A   4F5F               SBCI    R21, 255
   \   0000010C   CFD0               RJMP    ??BuildADEpromdata_0
    414              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??BuildADEpromdata_1:
   \   0000010E   E14A               LDI     R20, 26
   \   00000110   9F04               MUL     R16, R20
   \   00000112   01F0               MOVW    R31:R30, R1:R0
   \   00000114   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000116   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000118   8162               LDD     R22, Z+2
   \   0000011A   8173               LDD     R23, Z+3
   \   0000011C   1B62               SUB     R22, R18
   \   0000011E   5062               SUBI    R22, 2
   \   00000120   E14A               LDI     R20, 26
   \   00000122   9F04               MUL     R16, R20
   \   00000124   01F0               MOVW    R31:R30, R1:R0
   \   00000126   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000128   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000012A   8140               LD      R20, Z
   \   0000012C   8151               LDD     R21, Z+1
   \   0000012E   01FA               MOVW    R31:R30, R21:R20
   \   00000130   0FE2               ADD     R30, R18
   \   00000132   1FF3               ADC     R31, R19
   \   00000134   8360               ST      Z, R22
    415              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   00000136   E14A               LDI     R20, 26
   \   00000138   9F04               MUL     R16, R20
   \   0000013A   01F0               MOVW    R31:R30, R1:R0
   \   0000013C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000013E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000140   8142               LDD     R20, Z+2
   \   00000142   8153               LDD     R21, Z+3
   \   00000144   1B42               SUB     R20, R18
   \   00000146   0B53               SBC     R21, R19
   \   00000148   5042               SUBI    R20, 2
   \   0000014A   4050               SBCI    R21, 0
   \   0000014C   2F45               MOV     R20, R21
   \   0000014E   E050               LDI     R21, 0
   \   00000150   2F64               MOV     R22, R20
   \   00000152   E14A               LDI     R20, 26
   \   00000154   9F04               MUL     R16, R20
   \   00000156   01F0               MOVW    R31:R30, R1:R0
   \   00000158   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000015A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000015C   8140               LD      R20, Z
   \   0000015E   8151               LDD     R21, Z+1
   \   00000160   0F42               ADD     R20, R18
   \   00000162   1F53               ADC     R21, R19
   \   00000164   01FA               MOVW    R31:R30, R21:R20
   \   00000166   8361               STD     Z+1, R22
    416          
    417          }
   \   00000168   9508               RET
    418          
    419          /*************************************************************************
    420          *
    421          * Build datablock for WHData on ADcard
    422          *
    423          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    424          void BuildWHdata(char ch, short pointer) {
   \                     BuildWHdata:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2F80               MOV     R24, R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
    425          
    426              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000008   E001               LDI     R16, 1
   \   0000000A   E11A               LDI     R17, 26
   \   0000000C   9F81               MUL     R24, R17
   \   0000000E   01F0               MOVW    R31:R30, R1:R0
   \   00000010   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000014   8F01               STD     Z+25, R16
    427          
    428              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF & 0xff;
   \   00000016   E92C               LDI     R18, 156
   \   00000018   E10A               LDI     R16, 26
   \   0000001A   9F80               MUL     R24, R16
   \   0000001C   01F0               MOVW    R31:R30, R1:R0
   \   0000001E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000020   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000022   8100               LD      R16, Z
   \   00000024   8111               LDD     R17, Z+1
   \   00000026   E13A               LDI     R19, 26
   \   00000028   9F83               MUL     R24, R19
   \   0000002A   01F0               MOVW    R31:R30, R1:R0
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   8142               LDD     R20, Z+2
   \   00000032   8153               LDD     R21, Z+3
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   0FE4               ADD     R30, R20
   \   00000038   1FF5               ADC     R31, R21
   \   0000003A   8320               ST      Z, R18
   \   0000003C   E10A               LDI     R16, 26
   \   0000003E   9F80               MUL     R24, R16
   \   00000040   01F0               MOVW    R31:R30, R1:R0
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   5F0F               SUBI    R16, 255
   \   0000004C   4F1F               SBCI    R17, 255
   \   0000004E   8302               STD     Z+2, R16
   \   00000050   8313               STD     Z+3, R17
    429              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF >> 8;
   \   00000052   E024               LDI     R18, 4
   \   00000054   E10A               LDI     R16, 26
   \   00000056   9F80               MUL     R24, R16
   \   00000058   01F0               MOVW    R31:R30, R1:R0
   \   0000005A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005E   8100               LD      R16, Z
   \   00000060   8111               LDD     R17, Z+1
   \   00000062   E13A               LDI     R19, 26
   \   00000064   9F83               MUL     R24, R19
   \   00000066   01F0               MOVW    R31:R30, R1:R0
   \   00000068   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000006A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000006C   8142               LDD     R20, Z+2
   \   0000006E   8153               LDD     R21, Z+3
   \   00000070   01F8               MOVW    R31:R30, R17:R16
   \   00000072   0FE4               ADD     R30, R20
   \   00000074   1FF5               ADC     R31, R21
   \   00000076   8320               ST      Z, R18
   \   00000078   E10A               LDI     R16, 26
   \   0000007A   9F80               MUL     R24, R16
   \   0000007C   01F0               MOVW    R31:R30, R1:R0
   \   0000007E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000082   8102               LDD     R16, Z+2
   \   00000084   8113               LDD     R17, Z+3
   \   00000086   5F0F               SUBI    R16, 255
   \   00000088   4F1F               SBCI    R17, 255
   \   0000008A   8302               STD     Z+2, R16
   \   0000008C   8313               STD     Z+3, R17
    430              short ntna = UART[ch].TxFirst;                          // remember index
   \   0000008E   E10A               LDI     R16, 26
   \   00000090   9F80               MUL     R24, R16
   \   00000092   01F0               MOVW    R31:R30, R1:R0
   \   00000094   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000096   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000098   81A2               LDD     R26, Z+2
   \   0000009A   81B3               LDD     R27, Z+3
    431              UART[ch].TxFirst += 2;                                  // two byte length
   \   0000009C   E10A               LDI     R16, 26
   \   0000009E   9F80               MUL     R24, R16
   \   000000A0   01F0               MOVW    R31:R30, R1:R0
   \   000000A2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A6   8102               LDD     R16, Z+2
   \   000000A8   8113               LDD     R17, Z+3
   \   000000AA   5F0E               SUBI    R16, 254
   \   000000AC   4F1F               SBCI    R17, 255
   \   000000AE   8302               STD     Z+2, R16
   \   000000B0   8313               STD     Z+3, R17
    432          
    433              OS_EnterRegion();
   \   000000B2   ....               LDI     R30, LOW(OS_Global)
   \   000000B4   ....               LDI     R31, (OS_Global) >> 8
   \   000000B6   8100               LD      R16, Z
   \   000000B8   9503               INC     R16
   \   000000BA   8300               ST      Z, R16
    434              for (short i = 0; i < 4; i++) {
   \   000000BC   E000               LDI     R16, 0
   \   000000BE   E010               LDI     R17, 0
   \                     ??BuildWHdata_0:
   \   000000C0   3004               CPI     R16, 4
   \   000000C2   E020               LDI     R18, 0
   \   000000C4   0712               CPC     R17, R18
   \   000000C6   F00C               BRLT    $+2+2
   \   000000C8   C075               RJMP    ??BuildWHdata_1
    435                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] & 0xff; // WashTrackcnt
   \   000000CA   E12A               LDI     R18, 26
   \   000000CC   9F82               MUL     R24, R18
   \   000000CE   01F0               MOVW    R31:R30, R1:R0
   \   000000D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D4   8522               LDD     R18, Z+10
   \   000000D6   8533               LDD     R19, Z+11
   \   000000D8   01F9               MOVW    R31:R30, R19:R18
   \   000000DA   0DE4               ADD     R30, R4
   \   000000DC   1DF5               ADC     R31, R5
   \   000000DE   8120               LD      R18, Z
   \   000000E0   E038               LDI     R19, 8
   \   000000E2   9F23               MUL     R18, R19
   \   000000E4   ....               LDI     R18, LOW(TData)
   \   000000E6   0E02               ADD     R0, R18
   \   000000E8   ....               LDI     R18, (TData) >> 8
   \   000000EA   1E12               ADC     R1, R18
   \   000000EC   0E00               ADD     R0, R16
   \   000000EE   1E11               ADC     R1, R17
   \   000000F0   0E00               ADD     R0, R16
   \   000000F2   1E11               ADC     R1, R17
   \   000000F4   01F0               MOVW    R31:R30, R1:R0
   \   000000F6   56E5               SUBI    R30, 101
   \   000000F8   4FFB               SBCI    R31, 251
   \   000000FA   8120               LD      R18, Z
   \   000000FC   8131               LDD     R19, Z+1
   \   000000FE   2F42               MOV     R20, R18
   \   00000100   E12A               LDI     R18, 26
   \   00000102   9F82               MUL     R24, R18
   \   00000104   01F0               MOVW    R31:R30, R1:R0
   \   00000106   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000108   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010A   8120               LD      R18, Z
   \   0000010C   8131               LDD     R19, Z+1
   \   0000010E   E15A               LDI     R21, 26
   \   00000110   9F85               MUL     R24, R21
   \   00000112   01F0               MOVW    R31:R30, R1:R0
   \   00000114   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000116   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000118   8162               LDD     R22, Z+2
   \   0000011A   8173               LDD     R23, Z+3
   \   0000011C   01F9               MOVW    R31:R30, R19:R18
   \   0000011E   0FE6               ADD     R30, R22
   \   00000120   1FF7               ADC     R31, R23
   \   00000122   8340               ST      Z, R20
   \   00000124   E12A               LDI     R18, 26
   \   00000126   9F82               MUL     R24, R18
   \   00000128   01F0               MOVW    R31:R30, R1:R0
   \   0000012A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000012C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000012E   8122               LDD     R18, Z+2
   \   00000130   8133               LDD     R19, Z+3
   \   00000132   5F2F               SUBI    R18, 255
   \   00000134   4F3F               SBCI    R19, 255
   \   00000136   8322               STD     Z+2, R18
   \   00000138   8333               STD     Z+3, R19
    436                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] >> 8) & 0xff; // WashTrackcnt
   \   0000013A   E12A               LDI     R18, 26
   \   0000013C   9F82               MUL     R24, R18
   \   0000013E   01F0               MOVW    R31:R30, R1:R0
   \   00000140   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000142   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000144   8522               LDD     R18, Z+10
   \   00000146   8533               LDD     R19, Z+11
   \   00000148   01F9               MOVW    R31:R30, R19:R18
   \   0000014A   0DE4               ADD     R30, R4
   \   0000014C   1DF5               ADC     R31, R5
   \   0000014E   8120               LD      R18, Z
   \   00000150   E038               LDI     R19, 8
   \   00000152   9F23               MUL     R18, R19
   \   00000154   ....               LDI     R18, LOW(TData)
   \   00000156   0E02               ADD     R0, R18
   \   00000158   ....               LDI     R18, (TData) >> 8
   \   0000015A   1E12               ADC     R1, R18
   \   0000015C   0E00               ADD     R0, R16
   \   0000015E   1E11               ADC     R1, R17
   \   00000160   0E00               ADD     R0, R16
   \   00000162   1E11               ADC     R1, R17
   \   00000164   01F0               MOVW    R31:R30, R1:R0
   \   00000166   56E5               SUBI    R30, 101
   \   00000168   4FFB               SBCI    R31, 251
   \   0000016A   8120               LD      R18, Z
   \   0000016C   8131               LDD     R19, Z+1
   \   0000016E   2F23               MOV     R18, R19
   \   00000170   E030               LDI     R19, 0
   \   00000172   2F42               MOV     R20, R18
   \   00000174   E12A               LDI     R18, 26
   \   00000176   9F82               MUL     R24, R18
   \   00000178   01F0               MOVW    R31:R30, R1:R0
   \   0000017A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000017C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000017E   8120               LD      R18, Z
   \   00000180   8131               LDD     R19, Z+1
   \   00000182   E15A               LDI     R21, 26
   \   00000184   9F85               MUL     R24, R21
   \   00000186   01F0               MOVW    R31:R30, R1:R0
   \   00000188   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000018A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000018C   8162               LDD     R22, Z+2
   \   0000018E   8173               LDD     R23, Z+3
   \   00000190   01F9               MOVW    R31:R30, R19:R18
   \   00000192   0FE6               ADD     R30, R22
   \   00000194   1FF7               ADC     R31, R23
   \   00000196   8340               ST      Z, R20
   \   00000198   E12A               LDI     R18, 26
   \   0000019A   9F82               MUL     R24, R18
   \   0000019C   01F0               MOVW    R31:R30, R1:R0
   \   0000019E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001A0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001A2   8122               LDD     R18, Z+2
   \   000001A4   8133               LDD     R19, Z+3
   \   000001A6   5F2F               SUBI    R18, 255
   \   000001A8   4F3F               SBCI    R19, 255
   \   000001AA   8322               STD     Z+2, R18
   \   000001AC   8333               STD     Z+3, R19
    437              }
   \   000001AE   5F0F               SUBI    R16, 255
   \   000001B0   4F1F               SBCI    R17, 255
   \   000001B2   CF86               RJMP    ??BuildWHdata_0
    438              UART[ch].pTxBuffer[UART[ch].TxFirst++] =  TData.RS4.LevelSwitch[UART[ch].pRxBuffer[pointer]];
   \                     ??BuildWHdata_1:
   \   000001B4   E10A               LDI     R16, 26
   \   000001B6   9F80               MUL     R24, R16
   \   000001B8   01F0               MOVW    R31:R30, R1:R0
   \   000001BA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001BC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001BE   8502               LDD     R16, Z+10
   \   000001C0   8513               LDD     R17, Z+11
   \   000001C2   01F8               MOVW    R31:R30, R17:R16
   \   000001C4   0DE4               ADD     R30, R4
   \   000001C6   1DF5               ADC     R31, R5
   \   000001C8   8100               LD      R16, Z
   \   000001CA   E010               LDI     R17, 0
   \   000001CC   01F8               MOVW    R31:R30, R17:R16
   \   000001CE   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   000001D0   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   000001D2   8120               LD      R18, Z
   \   000001D4   E10A               LDI     R16, 26
   \   000001D6   9F80               MUL     R24, R16
   \   000001D8   01F0               MOVW    R31:R30, R1:R0
   \   000001DA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001DC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001DE   8100               LD      R16, Z
   \   000001E0   8111               LDD     R17, Z+1
   \   000001E2   E13A               LDI     R19, 26
   \   000001E4   9F83               MUL     R24, R19
   \   000001E6   01F0               MOVW    R31:R30, R1:R0
   \   000001E8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001EA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001EC   8142               LDD     R20, Z+2
   \   000001EE   8153               LDD     R21, Z+3
   \   000001F0   01F8               MOVW    R31:R30, R17:R16
   \   000001F2   0FE4               ADD     R30, R20
   \   000001F4   1FF5               ADC     R31, R21
   \   000001F6   8320               ST      Z, R18
   \   000001F8   E10A               LDI     R16, 26
   \   000001FA   9F80               MUL     R24, R16
   \   000001FC   01F0               MOVW    R31:R30, R1:R0
   \   000001FE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000200   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000202   8102               LDD     R16, Z+2
   \   00000204   8113               LDD     R17, Z+3
   \   00000206   5F0F               SUBI    R16, 255
   \   00000208   4F1F               SBCI    R17, 255
   \   0000020A   8302               STD     Z+2, R16
   \   0000020C   8313               STD     Z+3, R17
    439              UART[ch].pTxBuffer[UART[ch].TxFirst++] =  TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] & 0xff; // WashTrackcnt
   \   0000020E   E10A               LDI     R16, 26
   \   00000210   9F80               MUL     R24, R16
   \   00000212   01F0               MOVW    R31:R30, R1:R0
   \   00000214   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000216   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000218   8502               LDD     R16, Z+10
   \   0000021A   8513               LDD     R17, Z+11
   \   0000021C   01F8               MOVW    R31:R30, R17:R16
   \   0000021E   0DE4               ADD     R30, R4
   \   00000220   1DF5               ADC     R31, R5
   \   00000222   8100               LD      R16, Z
   \   00000224   E012               LDI     R17, 2
   \   00000226   9F01               MUL     R16, R17
   \   00000228   01F0               MOVW    R31:R30, R1:R0
   \   0000022A   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   0000022C   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   0000022E   8100               LD      R16, Z
   \   00000230   8111               LDD     R17, Z+1
   \   00000232   2F20               MOV     R18, R16
   \   00000234   E10A               LDI     R16, 26
   \   00000236   9F80               MUL     R24, R16
   \   00000238   01F0               MOVW    R31:R30, R1:R0
   \   0000023A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000023C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000023E   8100               LD      R16, Z
   \   00000240   8111               LDD     R17, Z+1
   \   00000242   E13A               LDI     R19, 26
   \   00000244   9F83               MUL     R24, R19
   \   00000246   01F0               MOVW    R31:R30, R1:R0
   \   00000248   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000024A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000024C   8142               LDD     R20, Z+2
   \   0000024E   8153               LDD     R21, Z+3
   \   00000250   01F8               MOVW    R31:R30, R17:R16
   \   00000252   0FE4               ADD     R30, R20
   \   00000254   1FF5               ADC     R31, R21
   \   00000256   8320               ST      Z, R18
   \   00000258   E10A               LDI     R16, 26
   \   0000025A   9F80               MUL     R24, R16
   \   0000025C   01F0               MOVW    R31:R30, R1:R0
   \   0000025E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000260   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000262   8102               LDD     R16, Z+2
   \   00000264   8113               LDD     R17, Z+3
   \   00000266   5F0F               SUBI    R16, 255
   \   00000268   4F1F               SBCI    R17, 255
   \   0000026A   8302               STD     Z+2, R16
   \   0000026C   8313               STD     Z+3, R17
    440              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] >> 8) & 0xff; // WashTrackcnt
   \   0000026E   E10A               LDI     R16, 26
   \   00000270   9F80               MUL     R24, R16
   \   00000272   01F0               MOVW    R31:R30, R1:R0
   \   00000274   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000276   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000278   8502               LDD     R16, Z+10
   \   0000027A   8513               LDD     R17, Z+11
   \   0000027C   01F8               MOVW    R31:R30, R17:R16
   \   0000027E   0DE4               ADD     R30, R4
   \   00000280   1DF5               ADC     R31, R5
   \   00000282   8100               LD      R16, Z
   \   00000284   E012               LDI     R17, 2
   \   00000286   9F01               MUL     R16, R17
   \   00000288   01F0               MOVW    R31:R30, R1:R0
   \   0000028A   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   0000028C   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   0000028E   8100               LD      R16, Z
   \   00000290   8111               LDD     R17, Z+1
   \   00000292   2F01               MOV     R16, R17
   \   00000294   E010               LDI     R17, 0
   \   00000296   2F20               MOV     R18, R16
   \   00000298   E10A               LDI     R16, 26
   \   0000029A   9F80               MUL     R24, R16
   \   0000029C   01F0               MOVW    R31:R30, R1:R0
   \   0000029E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002A0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002A2   8100               LD      R16, Z
   \   000002A4   8111               LDD     R17, Z+1
   \   000002A6   E13A               LDI     R19, 26
   \   000002A8   9F83               MUL     R24, R19
   \   000002AA   01F0               MOVW    R31:R30, R1:R0
   \   000002AC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002AE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002B0   8142               LDD     R20, Z+2
   \   000002B2   8153               LDD     R21, Z+3
   \   000002B4   01F8               MOVW    R31:R30, R17:R16
   \   000002B6   0FE4               ADD     R30, R20
   \   000002B8   1FF5               ADC     R31, R21
   \   000002BA   8320               ST      Z, R18
   \   000002BC   E10A               LDI     R16, 26
   \   000002BE   9F80               MUL     R24, R16
   \   000002C0   01F0               MOVW    R31:R30, R1:R0
   \   000002C2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002C4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002C6   8102               LDD     R16, Z+2
   \   000002C8   8113               LDD     R17, Z+3
   \   000002CA   5F0F               SUBI    R16, 255
   \   000002CC   4F1F               SBCI    R17, 255
   \   000002CE   8302               STD     Z+2, R16
   \   000002D0   8313               STD     Z+3, R17
    441              UART[ch].pTxBuffer[ntna]     = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   000002D2   E10A               LDI     R16, 26
   \   000002D4   9F80               MUL     R24, R16
   \   000002D6   01F0               MOVW    R31:R30, R1:R0
   \   000002D8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002DA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002DC   8122               LDD     R18, Z+2
   \   000002DE   8133               LDD     R19, Z+3
   \   000002E0   1B2A               SUB     R18, R26
   \   000002E2   5022               SUBI    R18, 2
   \   000002E4   E10A               LDI     R16, 26
   \   000002E6   9F80               MUL     R24, R16
   \   000002E8   01F0               MOVW    R31:R30, R1:R0
   \   000002EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002EE   8100               LD      R16, Z
   \   000002F0   8111               LDD     R17, Z+1
   \   000002F2   01F8               MOVW    R31:R30, R17:R16
   \   000002F4   0FEA               ADD     R30, R26
   \   000002F6   1FFB               ADC     R31, R27
   \   000002F8   8320               ST      Z, R18
    442              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   000002FA   E10A               LDI     R16, 26
   \   000002FC   9F80               MUL     R24, R16
   \   000002FE   01F0               MOVW    R31:R30, R1:R0
   \   00000300   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000302   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000304   8102               LDD     R16, Z+2
   \   00000306   8113               LDD     R17, Z+3
   \   00000308   1B0A               SUB     R16, R26
   \   0000030A   0B1B               SBC     R17, R27
   \   0000030C   5002               SUBI    R16, 2
   \   0000030E   4010               SBCI    R17, 0
   \   00000310   2F01               MOV     R16, R17
   \   00000312   E010               LDI     R17, 0
   \   00000314   2F20               MOV     R18, R16
   \   00000316   E10A               LDI     R16, 26
   \   00000318   9F80               MUL     R24, R16
   \   0000031A   01F0               MOVW    R31:R30, R1:R0
   \   0000031C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000031E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000320   8100               LD      R16, Z
   \   00000322   8111               LDD     R17, Z+1
   \   00000324   0F0A               ADD     R16, R26
   \   00000326   1F1B               ADC     R17, R27
   \   00000328   01F8               MOVW    R31:R30, R17:R16
   \   0000032A   8321               STD     Z+1, R18
    443              OS_LeaveRegion();
   \   0000032C   ........           CALL    OS_LeaveRegion
    444          }
   \   00000330   E0E6               LDI     R30, 6
   \   00000332   ........           JMP     ?EPILOGUE_B6_L09
    445          
    446          
    447          
    448          /*************************************************************************
    449          *
    450          * Build setup dat package for AN-ZB485
    451          *
    452          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    453          void BuildRS4Setup(char ch, short pointer) {
   \                     BuildRS4Setup:
   \   00000000   01A9               MOVW    R21:R20, R19:R18
    454          
    455              short ntna ;
    456              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000002   E011               LDI     R17, 1
   \   00000004   E12A               LDI     R18, 26
   \   00000006   9F02               MUL     R16, R18
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000000E   8F11               STD     Z+25, R17
    457          
    458              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP & 0xff;
   \   00000010   E517               LDI     R17, 87
   \   00000012   E12A               LDI     R18, 26
   \   00000014   9F02               MUL     R16, R18
   \   00000016   01F0               MOVW    R31:R30, R1:R0
   \   00000018   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001C   8120               LD      R18, Z
   \   0000001E   8131               LDD     R19, Z+1
   \   00000020   E16A               LDI     R22, 26
   \   00000022   9F06               MUL     R16, R22
   \   00000024   01F0               MOVW    R31:R30, R1:R0
   \   00000026   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002A   8162               LDD     R22, Z+2
   \   0000002C   8173               LDD     R23, Z+3
   \   0000002E   01F9               MOVW    R31:R30, R19:R18
   \   00000030   0FE6               ADD     R30, R22
   \   00000032   1FF7               ADC     R31, R23
   \   00000034   8310               ST      Z, R17
   \   00000036   E11A               LDI     R17, 26
   \   00000038   9F01               MUL     R16, R17
   \   0000003A   01F0               MOVW    R31:R30, R1:R0
   \   0000003C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000003E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000040   8122               LDD     R18, Z+2
   \   00000042   8133               LDD     R19, Z+3
   \   00000044   5F2F               SUBI    R18, 255
   \   00000046   4F3F               SBCI    R19, 255
   \   00000048   8322               STD     Z+2, R18
   \   0000004A   8333               STD     Z+3, R19
    459              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP >> 8;
   \   0000004C   E014               LDI     R17, 4
   \   0000004E   E12A               LDI     R18, 26
   \   00000050   9F02               MUL     R16, R18
   \   00000052   01F0               MOVW    R31:R30, R1:R0
   \   00000054   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000056   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000058   8120               LD      R18, Z
   \   0000005A   8131               LDD     R19, Z+1
   \   0000005C   E16A               LDI     R22, 26
   \   0000005E   9F06               MUL     R16, R22
   \   00000060   01F0               MOVW    R31:R30, R1:R0
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8162               LDD     R22, Z+2
   \   00000068   8173               LDD     R23, Z+3
   \   0000006A   01F9               MOVW    R31:R30, R19:R18
   \   0000006C   0FE6               ADD     R30, R22
   \   0000006E   1FF7               ADC     R31, R23
   \   00000070   8310               ST      Z, R17
   \   00000072   E11A               LDI     R17, 26
   \   00000074   9F01               MUL     R16, R17
   \   00000076   01F0               MOVW    R31:R30, R1:R0
   \   00000078   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000007A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000007C   8122               LDD     R18, Z+2
   \   0000007E   8133               LDD     R19, Z+3
   \   00000080   5F2F               SUBI    R18, 255
   \   00000082   4F3F               SBCI    R19, 255
   \   00000084   8322               STD     Z+2, R18
   \   00000086   8333               STD     Z+3, R19
    460              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   00000088   E11A               LDI     R17, 26
   \   0000008A   9F01               MUL     R16, R17
   \   0000008C   01F0               MOVW    R31:R30, R1:R0
   \   0000008E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000092   8122               LDD     R18, Z+2
   \   00000094   8133               LDD     R19, Z+3
    461              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000096   E11A               LDI     R17, 26
   \   00000098   9F01               MUL     R16, R17
   \   0000009A   01F0               MOVW    R31:R30, R1:R0
   \   0000009C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A0   8162               LDD     R22, Z+2
   \   000000A2   8173               LDD     R23, Z+3
   \   000000A4   5F6E               SUBI    R22, 254
   \   000000A6   4F7F               SBCI    R23, 255
   \   000000A8   8362               STD     Z+2, R22
   \   000000AA   8373               STD     Z+3, R23
    462          
    463              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.PortUsed;  // send the setup
   \   000000AC   9110....           LDS     R17, TData
   \   000000B0   E16A               LDI     R22, 26
   \   000000B2   9F06               MUL     R16, R22
   \   000000B4   01F0               MOVW    R31:R30, R1:R0
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8160               LD      R22, Z
   \   000000BC   8171               LDD     R23, Z+1
   \   000000BE   E1EA               LDI     R30, 26
   \   000000C0   9F0E               MUL     R16, R30
   \   000000C2   01F0               MOVW    R31:R30, R1:R0
   \   000000C4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000C6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000C8   8002               LDD     R0, Z+2
   \   000000CA   8013               LDD     R1, Z+3
   \   000000CC   01FB               MOVW    R31:R30, R23:R22
   \   000000CE   0DE0               ADD     R30, R0
   \   000000D0   1DF1               ADC     R31, R1
   \   000000D2   8310               ST      Z, R17
   \   000000D4   E11A               LDI     R17, 26
   \   000000D6   9F01               MUL     R16, R17
   \   000000D8   01F0               MOVW    R31:R30, R1:R0
   \   000000DA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000DC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000DE   8162               LDD     R22, Z+2
   \   000000E0   8173               LDD     R23, Z+3
   \   000000E2   5F6F               SUBI    R22, 255
   \   000000E4   4F7F               SBCI    R23, 255
   \   000000E6   8362               STD     Z+2, R22
   \   000000E8   8373               STD     Z+3, R23
    464              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[0];  // send the sensor type
   \   000000EA   9110....           LDS     R17, (TData + 1)
   \   000000EE   E16A               LDI     R22, 26
   \   000000F0   9F06               MUL     R16, R22
   \   000000F2   01F0               MOVW    R31:R30, R1:R0
   \   000000F4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F8   8160               LD      R22, Z
   \   000000FA   8171               LDD     R23, Z+1
   \   000000FC   E1EA               LDI     R30, 26
   \   000000FE   9F0E               MUL     R16, R30
   \   00000100   01F0               MOVW    R31:R30, R1:R0
   \   00000102   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000104   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000106   8002               LDD     R0, Z+2
   \   00000108   8013               LDD     R1, Z+3
   \   0000010A   01FB               MOVW    R31:R30, R23:R22
   \   0000010C   0DE0               ADD     R30, R0
   \   0000010E   1DF1               ADC     R31, R1
   \   00000110   8310               ST      Z, R17
   \   00000112   E11A               LDI     R17, 26
   \   00000114   9F01               MUL     R16, R17
   \   00000116   01F0               MOVW    R31:R30, R1:R0
   \   00000118   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000011A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000011C   8162               LDD     R22, Z+2
   \   0000011E   8173               LDD     R23, Z+3
   \   00000120   5F6F               SUBI    R22, 255
   \   00000122   4F7F               SBCI    R23, 255
   \   00000124   8362               STD     Z+2, R22
   \   00000126   8373               STD     Z+3, R23
    465              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[1];  // send the sensor type
   \   00000128   9110....           LDS     R17, (TData + 2)
   \   0000012C   E16A               LDI     R22, 26
   \   0000012E   9F06               MUL     R16, R22
   \   00000130   01F0               MOVW    R31:R30, R1:R0
   \   00000132   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000134   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000136   8160               LD      R22, Z
   \   00000138   8171               LDD     R23, Z+1
   \   0000013A   E1EA               LDI     R30, 26
   \   0000013C   9F0E               MUL     R16, R30
   \   0000013E   01F0               MOVW    R31:R30, R1:R0
   \   00000140   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000142   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000144   8002               LDD     R0, Z+2
   \   00000146   8013               LDD     R1, Z+3
   \   00000148   01FB               MOVW    R31:R30, R23:R22
   \   0000014A   0DE0               ADD     R30, R0
   \   0000014C   1DF1               ADC     R31, R1
   \   0000014E   8310               ST      Z, R17
   \   00000150   E11A               LDI     R17, 26
   \   00000152   9F01               MUL     R16, R17
   \   00000154   01F0               MOVW    R31:R30, R1:R0
   \   00000156   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000158   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000015A   8162               LDD     R22, Z+2
   \   0000015C   8173               LDD     R23, Z+3
   \   0000015E   5F6F               SUBI    R22, 255
   \   00000160   4F7F               SBCI    R23, 255
   \   00000162   8362               STD     Z+2, R22
   \   00000164   8373               STD     Z+3, R23
    466          
    467              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000166   E11A               LDI     R17, 26
   \   00000168   9F01               MUL     R16, R17
   \   0000016A   01F0               MOVW    R31:R30, R1:R0
   \   0000016C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000016E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000170   8162               LDD     R22, Z+2
   \   00000172   8173               LDD     R23, Z+3
   \   00000174   2F16               MOV     R17, R22
   \   00000176   1B12               SUB     R17, R18
   \   00000178   5012               SUBI    R17, 2
   \   0000017A   E16A               LDI     R22, 26
   \   0000017C   9F06               MUL     R16, R22
   \   0000017E   01F0               MOVW    R31:R30, R1:R0
   \   00000180   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000182   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000184   8160               LD      R22, Z
   \   00000186   8171               LDD     R23, Z+1
   \   00000188   01FB               MOVW    R31:R30, R23:R22
   \   0000018A   0FE2               ADD     R30, R18
   \   0000018C   1FF3               ADC     R31, R19
   \   0000018E   8310               ST      Z, R17
    468              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000190   E11A               LDI     R17, 26
   \   00000192   9F01               MUL     R16, R17
   \   00000194   01F0               MOVW    R31:R30, R1:R0
   \   00000196   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000198   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000019A   8162               LDD     R22, Z+2
   \   0000019C   8173               LDD     R23, Z+3
   \   0000019E   1B62               SUB     R22, R18
   \   000001A0   0B73               SBC     R23, R19
   \   000001A2   5062               SUBI    R22, 2
   \   000001A4   4070               SBCI    R23, 0
   \   000001A6   2F67               MOV     R22, R23
   \   000001A8   E070               LDI     R23, 0
   \   000001AA   2F16               MOV     R17, R22
   \   000001AC   E16A               LDI     R22, 26
   \   000001AE   9F06               MUL     R16, R22
   \   000001B0   01F0               MOVW    R31:R30, R1:R0
   \   000001B2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001B4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001B6   8160               LD      R22, Z
   \   000001B8   8171               LDD     R23, Z+1
   \   000001BA   0F62               ADD     R22, R18
   \   000001BC   1F73               ADC     R23, R19
   \   000001BE   01FB               MOVW    R31:R30, R23:R22
   \   000001C0   8311               STD     Z+1, R17
    469          }
   \   000001C2   9508               RET
    470          
    471          /*************************************************************************
    472          *
    473          * Build datablock of measured data for ADcard
    474          *
    475          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    476          void BuildMData485(char ch, short pointer) {
   \                     BuildMData485:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   0119               MOVW    R3:R2, R19:R18
    477          
    478              short ntna, i ;
    479              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000006   E011               LDI     R17, 1
   \   00000008   E12A               LDI     R18, 26
   \   0000000A   9F02               MUL     R16, R18
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000012   8F11               STD     Z+25, R17
    480          
    481              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA & 0xff;
   \   00000014   E715               LDI     R17, 117
   \   00000016   E12A               LDI     R18, 26
   \   00000018   9F02               MUL     R16, R18
   \   0000001A   01F0               MOVW    R31:R30, R1:R0
   \   0000001C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000020   8120               LD      R18, Z
   \   00000022   8131               LDD     R19, Z+1
   \   00000024   E14A               LDI     R20, 26
   \   00000026   9F04               MUL     R16, R20
   \   00000028   01F0               MOVW    R31:R30, R1:R0
   \   0000002A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002E   8142               LDD     R20, Z+2
   \   00000030   8153               LDD     R21, Z+3
   \   00000032   01F9               MOVW    R31:R30, R19:R18
   \   00000034   0FE4               ADD     R30, R20
   \   00000036   1FF5               ADC     R31, R21
   \   00000038   8310               ST      Z, R17
   \   0000003A   E11A               LDI     R17, 26
   \   0000003C   9F01               MUL     R16, R17
   \   0000003E   01F0               MOVW    R31:R30, R1:R0
   \   00000040   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000044   8122               LDD     R18, Z+2
   \   00000046   8133               LDD     R19, Z+3
   \   00000048   5F2F               SUBI    R18, 255
   \   0000004A   4F3F               SBCI    R19, 255
   \   0000004C   8322               STD     Z+2, R18
   \   0000004E   8333               STD     Z+3, R19
    482              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA >> 8;
   \   00000050   E014               LDI     R17, 4
   \   00000052   E12A               LDI     R18, 26
   \   00000054   9F02               MUL     R16, R18
   \   00000056   01F0               MOVW    R31:R30, R1:R0
   \   00000058   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005C   8120               LD      R18, Z
   \   0000005E   8131               LDD     R19, Z+1
   \   00000060   E14A               LDI     R20, 26
   \   00000062   9F04               MUL     R16, R20
   \   00000064   01F0               MOVW    R31:R30, R1:R0
   \   00000066   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000006A   8142               LDD     R20, Z+2
   \   0000006C   8153               LDD     R21, Z+3
   \   0000006E   01F9               MOVW    R31:R30, R19:R18
   \   00000070   0FE4               ADD     R30, R20
   \   00000072   1FF5               ADC     R31, R21
   \   00000074   8310               ST      Z, R17
   \   00000076   E11A               LDI     R17, 26
   \   00000078   9F01               MUL     R16, R17
   \   0000007A   01F0               MOVW    R31:R30, R1:R0
   \   0000007C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000080   8122               LDD     R18, Z+2
   \   00000082   8133               LDD     R19, Z+3
   \   00000084   5F2F               SUBI    R18, 255
   \   00000086   4F3F               SBCI    R19, 255
   \   00000088   8322               STD     Z+2, R18
   \   0000008A   8333               STD     Z+3, R19
    483              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000008C   E11A               LDI     R17, 26
   \   0000008E   9F01               MUL     R16, R17
   \   00000090   01F0               MOVW    R31:R30, R1:R0
   \   00000092   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000094   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000096   8182               LDD     R24, Z+2
   \   00000098   8193               LDD     R25, Z+3
    484              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000009A   E11A               LDI     R17, 26
   \   0000009C   9F01               MUL     R16, R17
   \   0000009E   01F0               MOVW    R31:R30, R1:R0
   \   000000A0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A4   8122               LDD     R18, Z+2
   \   000000A6   8133               LDD     R19, Z+3
   \   000000A8   5F2E               SUBI    R18, 254
   \   000000AA   4F3F               SBCI    R19, 255
   \   000000AC   8322               STD     Z+2, R18
   \   000000AE   8333               STD     Z+3, R19
    485          
    486              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer] ;
   \   000000B0   E11A               LDI     R17, 26
   \   000000B2   9F01               MUL     R16, R17
   \   000000B4   01F0               MOVW    R31:R30, R1:R0
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8522               LDD     R18, Z+10
   \   000000BC   8533               LDD     R19, Z+11
   \   000000BE   01F9               MOVW    R31:R30, R19:R18
   \   000000C0   0DE2               ADD     R30, R2
   \   000000C2   1DF3               ADC     R31, R3
   \   000000C4   8110               LD      R17, Z
   \   000000C6   E12A               LDI     R18, 26
   \   000000C8   9F02               MUL     R16, R18
   \   000000CA   01F0               MOVW    R31:R30, R1:R0
   \   000000CC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000CE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D0   8120               LD      R18, Z
   \   000000D2   8131               LDD     R19, Z+1
   \   000000D4   E14A               LDI     R20, 26
   \   000000D6   9F04               MUL     R16, R20
   \   000000D8   01F0               MOVW    R31:R30, R1:R0
   \   000000DA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000DC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000DE   8142               LDD     R20, Z+2
   \   000000E0   8153               LDD     R21, Z+3
   \   000000E2   01F9               MOVW    R31:R30, R19:R18
   \   000000E4   0FE4               ADD     R30, R20
   \   000000E6   1FF5               ADC     R31, R21
   \   000000E8   8310               ST      Z, R17
   \   000000EA   E11A               LDI     R17, 26
   \   000000EC   9F01               MUL     R16, R17
   \   000000EE   01F0               MOVW    R31:R30, R1:R0
   \   000000F0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F4   8122               LDD     R18, Z+2
   \   000000F6   8133               LDD     R19, Z+3
   \   000000F8   5F2F               SUBI    R18, 255
   \   000000FA   4F3F               SBCI    R19, 255
   \   000000FC   8322               STD     Z+2, R18
   \   000000FE   8333               STD     Z+3, R19
    487              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.IOUnitStatus[UART[ch].pRxBuffer[pointer]] | (RestartStatus <<4); // IOUnit status +  restart status
   \   00000100   E11A               LDI     R17, 26
   \   00000102   9F01               MUL     R16, R17
   \   00000104   01F0               MOVW    R31:R30, R1:R0
   \   00000106   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000108   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010A   8522               LDD     R18, Z+10
   \   0000010C   8533               LDD     R19, Z+11
   \   0000010E   01F9               MOVW    R31:R30, R19:R18
   \   00000110   0DE2               ADD     R30, R2
   \   00000112   1DF3               ADC     R31, R3
   \   00000114   8120               LD      R18, Z
   \   00000116   E030               LDI     R19, 0
   \   00000118   01F9               MOVW    R31:R30, R19:R18
   \   0000011A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000011C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000011E   8113               LDD     R17, Z+3
   \   00000120   9120....           LDS     R18, RestartStatus
   \   00000124   9522               SWAP    R18
   \   00000126   7F20               ANDI    R18, 0xF0
   \   00000128   2B12               OR      R17, R18
   \   0000012A   E12A               LDI     R18, 26
   \   0000012C   9F02               MUL     R16, R18
   \   0000012E   01F0               MOVW    R31:R30, R1:R0
   \   00000130   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000132   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000134   8120               LD      R18, Z
   \   00000136   8131               LDD     R19, Z+1
   \   00000138   E14A               LDI     R20, 26
   \   0000013A   9F04               MUL     R16, R20
   \   0000013C   01F0               MOVW    R31:R30, R1:R0
   \   0000013E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000140   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000142   8142               LDD     R20, Z+2
   \   00000144   8153               LDD     R21, Z+3
   \   00000146   01F9               MOVW    R31:R30, R19:R18
   \   00000148   0FE4               ADD     R30, R20
   \   0000014A   1FF5               ADC     R31, R21
   \   0000014C   8310               ST      Z, R17
   \   0000014E   E11A               LDI     R17, 26
   \   00000150   9F01               MUL     R16, R17
   \   00000152   01F0               MOVW    R31:R30, R1:R0
   \   00000154   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000156   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000158   8122               LDD     R18, Z+2
   \   0000015A   8133               LDD     R19, Z+3
   \   0000015C   5F2F               SUBI    R18, 255
   \   0000015E   4F3F               SBCI    R19, 255
   \   00000160   8322               STD     Z+2, R18
   \   00000162   8333               STD     Z+3, R19
    488              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] & 0xff; // Failcnt error
   \   00000164   E11A               LDI     R17, 26
   \   00000166   9F01               MUL     R16, R17
   \   00000168   01F0               MOVW    R31:R30, R1:R0
   \   0000016A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000016C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000016E   8522               LDD     R18, Z+10
   \   00000170   8533               LDD     R19, Z+11
   \   00000172   01F9               MOVW    R31:R30, R19:R18
   \   00000174   0DE2               ADD     R30, R2
   \   00000176   1DF3               ADC     R31, R3
   \   00000178   8110               LD      R17, Z
   \   0000017A   E024               LDI     R18, 4
   \   0000017C   9F12               MUL     R17, R18
   \   0000017E   01F0               MOVW    R31:R30, R1:R0
   \   00000180   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000182   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000184   8523               LDD     R18, Z+11
   \   00000186   8534               LDD     R19, Z+12
   \   00000188   2F12               MOV     R17, R18
   \   0000018A   E12A               LDI     R18, 26
   \   0000018C   9F02               MUL     R16, R18
   \   0000018E   01F0               MOVW    R31:R30, R1:R0
   \   00000190   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000192   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000194   8120               LD      R18, Z
   \   00000196   8131               LDD     R19, Z+1
   \   00000198   E14A               LDI     R20, 26
   \   0000019A   9F04               MUL     R16, R20
   \   0000019C   01F0               MOVW    R31:R30, R1:R0
   \   0000019E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001A0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001A2   8142               LDD     R20, Z+2
   \   000001A4   8153               LDD     R21, Z+3
   \   000001A6   01F9               MOVW    R31:R30, R19:R18
   \   000001A8   0FE4               ADD     R30, R20
   \   000001AA   1FF5               ADC     R31, R21
   \   000001AC   8310               ST      Z, R17
   \   000001AE   E11A               LDI     R17, 26
   \   000001B0   9F01               MUL     R16, R17
   \   000001B2   01F0               MOVW    R31:R30, R1:R0
   \   000001B4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001B6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001B8   8122               LDD     R18, Z+2
   \   000001BA   8133               LDD     R19, Z+3
   \   000001BC   5F2F               SUBI    R18, 255
   \   000001BE   4F3F               SBCI    R19, 255
   \   000001C0   8322               STD     Z+2, R18
   \   000001C2   8333               STD     Z+3, R19
    489              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] >> 8) & 0xff; // Failcnt error
   \   000001C4   E11A               LDI     R17, 26
   \   000001C6   9F01               MUL     R16, R17
   \   000001C8   01F0               MOVW    R31:R30, R1:R0
   \   000001CA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001CC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001CE   8522               LDD     R18, Z+10
   \   000001D0   8533               LDD     R19, Z+11
   \   000001D2   01F9               MOVW    R31:R30, R19:R18
   \   000001D4   0DE2               ADD     R30, R2
   \   000001D6   1DF3               ADC     R31, R3
   \   000001D8   8110               LD      R17, Z
   \   000001DA   E024               LDI     R18, 4
   \   000001DC   9F12               MUL     R17, R18
   \   000001DE   01F0               MOVW    R31:R30, R1:R0
   \   000001E0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001E2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001E4   8523               LDD     R18, Z+11
   \   000001E6   8534               LDD     R19, Z+12
   \   000001E8   2F23               MOV     R18, R19
   \   000001EA   E030               LDI     R19, 0
   \   000001EC   2F12               MOV     R17, R18
   \   000001EE   E12A               LDI     R18, 26
   \   000001F0   9F02               MUL     R16, R18
   \   000001F2   01F0               MOVW    R31:R30, R1:R0
   \   000001F4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001F6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001F8   8120               LD      R18, Z
   \   000001FA   8131               LDD     R19, Z+1
   \   000001FC   E14A               LDI     R20, 26
   \   000001FE   9F04               MUL     R16, R20
   \   00000200   01F0               MOVW    R31:R30, R1:R0
   \   00000202   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000204   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000206   8142               LDD     R20, Z+2
   \   00000208   8153               LDD     R21, Z+3
   \   0000020A   01F9               MOVW    R31:R30, R19:R18
   \   0000020C   0FE4               ADD     R30, R20
   \   0000020E   1FF5               ADC     R31, R21
   \   00000210   8310               ST      Z, R17
   \   00000212   E11A               LDI     R17, 26
   \   00000214   9F01               MUL     R16, R17
   \   00000216   01F0               MOVW    R31:R30, R1:R0
   \   00000218   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000021A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000021C   8122               LDD     R18, Z+2
   \   0000021E   8133               LDD     R19, Z+3
   \   00000220   5F2F               SUBI    R18, 255
   \   00000222   4F3F               SBCI    R19, 255
   \   00000224   8322               STD     Z+2, R18
   \   00000226   8333               STD     Z+3, R19
    490              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] & 0xff; // Failcnt total
   \   00000228   E11A               LDI     R17, 26
   \   0000022A   9F01               MUL     R16, R17
   \   0000022C   01F0               MOVW    R31:R30, R1:R0
   \   0000022E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000230   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000232   8522               LDD     R18, Z+10
   \   00000234   8533               LDD     R19, Z+11
   \   00000236   01F9               MOVW    R31:R30, R19:R18
   \   00000238   0DE2               ADD     R30, R2
   \   0000023A   1DF3               ADC     R31, R3
   \   0000023C   8110               LD      R17, Z
   \   0000023E   E024               LDI     R18, 4
   \   00000240   9F12               MUL     R17, R18
   \   00000242   01F0               MOVW    R31:R30, R1:R0
   \   00000244   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000246   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000248   8525               LDD     R18, Z+13
   \   0000024A   8536               LDD     R19, Z+14
   \   0000024C   2F12               MOV     R17, R18
   \   0000024E   E12A               LDI     R18, 26
   \   00000250   9F02               MUL     R16, R18
   \   00000252   01F0               MOVW    R31:R30, R1:R0
   \   00000254   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000256   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000258   8120               LD      R18, Z
   \   0000025A   8131               LDD     R19, Z+1
   \   0000025C   E14A               LDI     R20, 26
   \   0000025E   9F04               MUL     R16, R20
   \   00000260   01F0               MOVW    R31:R30, R1:R0
   \   00000262   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000264   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000266   8142               LDD     R20, Z+2
   \   00000268   8153               LDD     R21, Z+3
   \   0000026A   01F9               MOVW    R31:R30, R19:R18
   \   0000026C   0FE4               ADD     R30, R20
   \   0000026E   1FF5               ADC     R31, R21
   \   00000270   8310               ST      Z, R17
   \   00000272   E11A               LDI     R17, 26
   \   00000274   9F01               MUL     R16, R17
   \   00000276   01F0               MOVW    R31:R30, R1:R0
   \   00000278   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000027A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000027C   8122               LDD     R18, Z+2
   \   0000027E   8133               LDD     R19, Z+3
   \   00000280   5F2F               SUBI    R18, 255
   \   00000282   4F3F               SBCI    R19, 255
   \   00000284   8322               STD     Z+2, R18
   \   00000286   8333               STD     Z+3, R19
    491              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] >> 8) & 0xff; // Failcnt total
   \   00000288   E11A               LDI     R17, 26
   \   0000028A   9F01               MUL     R16, R17
   \   0000028C   01F0               MOVW    R31:R30, R1:R0
   \   0000028E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000290   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000292   8522               LDD     R18, Z+10
   \   00000294   8533               LDD     R19, Z+11
   \   00000296   01F9               MOVW    R31:R30, R19:R18
   \   00000298   0DE2               ADD     R30, R2
   \   0000029A   1DF3               ADC     R31, R3
   \   0000029C   8110               LD      R17, Z
   \   0000029E   E024               LDI     R18, 4
   \   000002A0   9F12               MUL     R17, R18
   \   000002A2   01F0               MOVW    R31:R30, R1:R0
   \   000002A4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000002A6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000002A8   8525               LDD     R18, Z+13
   \   000002AA   8536               LDD     R19, Z+14
   \   000002AC   2F23               MOV     R18, R19
   \   000002AE   E030               LDI     R19, 0
   \   000002B0   2F12               MOV     R17, R18
   \   000002B2   E12A               LDI     R18, 26
   \   000002B4   9F02               MUL     R16, R18
   \   000002B6   01F0               MOVW    R31:R30, R1:R0
   \   000002B8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002BA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002BC   8120               LD      R18, Z
   \   000002BE   8131               LDD     R19, Z+1
   \   000002C0   E14A               LDI     R20, 26
   \   000002C2   9F04               MUL     R16, R20
   \   000002C4   01F0               MOVW    R31:R30, R1:R0
   \   000002C6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002C8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002CA   8142               LDD     R20, Z+2
   \   000002CC   8153               LDD     R21, Z+3
   \   000002CE   01F9               MOVW    R31:R30, R19:R18
   \   000002D0   0FE4               ADD     R30, R20
   \   000002D2   1FF5               ADC     R31, R21
   \   000002D4   8310               ST      Z, R17
   \   000002D6   E11A               LDI     R17, 26
   \   000002D8   9F01               MUL     R16, R17
   \   000002DA   01F0               MOVW    R31:R30, R1:R0
   \   000002DC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002DE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002E0   8122               LDD     R18, Z+2
   \   000002E2   8133               LDD     R19, Z+3
   \   000002E4   5F2F               SUBI    R18, 255
   \   000002E6   4F3F               SBCI    R19, 255
   \   000002E8   8322               STD     Z+2, R18
   \   000002EA   8333               STD     Z+3, R19
    492              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusSWVer[UART[ch].pRxBuffer[pointer]] ; // Target status byte 1
   \   000002EC   E11A               LDI     R17, 26
   \   000002EE   9F01               MUL     R16, R17
   \   000002F0   01F0               MOVW    R31:R30, R1:R0
   \   000002F2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002F4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002F6   8522               LDD     R18, Z+10
   \   000002F8   8533               LDD     R19, Z+11
   \   000002FA   01F9               MOVW    R31:R30, R19:R18
   \   000002FC   0DE2               ADD     R30, R2
   \   000002FE   1DF3               ADC     R31, R3
   \   00000300   8120               LD      R18, Z
   \   00000302   E030               LDI     R19, 0
   \   00000304   01F9               MOVW    R31:R30, R19:R18
   \   00000306   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000308   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000030A   A513               LDD     R17, Z+43
   \   0000030C   E12A               LDI     R18, 26
   \   0000030E   9F02               MUL     R16, R18
   \   00000310   01F0               MOVW    R31:R30, R1:R0
   \   00000312   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000314   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000316   8120               LD      R18, Z
   \   00000318   8131               LDD     R19, Z+1
   \   0000031A   E14A               LDI     R20, 26
   \   0000031C   9F04               MUL     R16, R20
   \   0000031E   01F0               MOVW    R31:R30, R1:R0
   \   00000320   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000322   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000324   8142               LDD     R20, Z+2
   \   00000326   8153               LDD     R21, Z+3
   \   00000328   01F9               MOVW    R31:R30, R19:R18
   \   0000032A   0FE4               ADD     R30, R20
   \   0000032C   1FF5               ADC     R31, R21
   \   0000032E   8310               ST      Z, R17
   \   00000330   E11A               LDI     R17, 26
   \   00000332   9F01               MUL     R16, R17
   \   00000334   01F0               MOVW    R31:R30, R1:R0
   \   00000336   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000338   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000033A   8122               LDD     R18, Z+2
   \   0000033C   8133               LDD     R19, Z+3
   \   0000033E   5F2F               SUBI    R18, 255
   \   00000340   4F3F               SBCI    R19, 255
   \   00000342   8322               STD     Z+2, R18
   \   00000344   8333               STD     Z+3, R19
    493              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]] ; // Target status byte 2
   \   00000346   E11A               LDI     R17, 26
   \   00000348   9F01               MUL     R16, R17
   \   0000034A   01F0               MOVW    R31:R30, R1:R0
   \   0000034C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000034E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000350   8522               LDD     R18, Z+10
   \   00000352   8533               LDD     R19, Z+11
   \   00000354   01F9               MOVW    R31:R30, R19:R18
   \   00000356   0DE2               ADD     R30, R2
   \   00000358   1DF3               ADC     R31, R3
   \   0000035A   8120               LD      R18, Z
   \   0000035C   E030               LDI     R19, 0
   \   0000035E   01F9               MOVW    R31:R30, R19:R18
   \   00000360   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000362   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000364   A913               LDD     R17, Z+51
   \   00000366   E12A               LDI     R18, 26
   \   00000368   9F02               MUL     R16, R18
   \   0000036A   01F0               MOVW    R31:R30, R1:R0
   \   0000036C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000036E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000370   8120               LD      R18, Z
   \   00000372   8131               LDD     R19, Z+1
   \   00000374   E14A               LDI     R20, 26
   \   00000376   9F04               MUL     R16, R20
   \   00000378   01F0               MOVW    R31:R30, R1:R0
   \   0000037A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000037C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000037E   8142               LDD     R20, Z+2
   \   00000380   8153               LDD     R21, Z+3
   \   00000382   01F9               MOVW    R31:R30, R19:R18
   \   00000384   0FE4               ADD     R30, R20
   \   00000386   1FF5               ADC     R31, R21
   \   00000388   8310               ST      Z, R17
   \   0000038A   E11A               LDI     R17, 26
   \   0000038C   9F01               MUL     R16, R17
   \   0000038E   01F0               MOVW    R31:R30, R1:R0
   \   00000390   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000392   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000394   8122               LDD     R18, Z+2
   \   00000396   8133               LDD     R19, Z+3
   \   00000398   5F2F               SUBI    R18, 255
   \   0000039A   4F3F               SBCI    R19, 255
   \   0000039C   8322               STD     Z+2, R18
   \   0000039E   8333               STD     Z+3, R19
    494          
    495              TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]] &= ~0x80;                                  //reset restart flag for adcard
   \   000003A0   E11A               LDI     R17, 26
   \   000003A2   9F01               MUL     R16, R17
   \   000003A4   01F0               MOVW    R31:R30, R1:R0
   \   000003A6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003A8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003AA   8522               LDD     R18, Z+10
   \   000003AC   8533               LDD     R19, Z+11
   \   000003AE   01F9               MOVW    R31:R30, R19:R18
   \   000003B0   0DE2               ADD     R30, R2
   \   000003B2   1DF3               ADC     R31, R3
   \   000003B4   8120               LD      R18, Z
   \   000003B6   E030               LDI     R19, 0
   \   000003B8   01F9               MOVW    R31:R30, R19:R18
   \   000003BA   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000003BC   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000003BE   A913               LDD     R17, Z+51
   \   000003C0   771F               ANDI    R17, 0x7F
   \   000003C2   AB13               STD     Z+51, R17
    496          
    497              for (i = 0; i < 14; i++) {
   \   000003C4   E020               LDI     R18, 0
   \   000003C6   E030               LDI     R19, 0
   \                     ??BuildMData485_0:
   \   000003C8   302E               CPI     R18, 14
   \   000003CA   E010               LDI     R17, 0
   \   000003CC   0731               CPC     R19, R17
   \   000003CE   F00C               BRLT    $+2+2
   \   000003D0   C0A8               RJMP    ??BuildMData485_1
    498                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup1[UART[ch].pRxBuffer[pointer]][i] ;
   \   000003D2   E11A               LDI     R17, 26
   \   000003D4   9F01               MUL     R16, R17
   \   000003D6   01F0               MOVW    R31:R30, R1:R0
   \   000003D8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003DA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003DC   8542               LDD     R20, Z+10
   \   000003DE   8553               LDD     R21, Z+11
   \   000003E0   01FA               MOVW    R31:R30, R21:R20
   \   000003E2   0DE2               ADD     R30, R2
   \   000003E4   1DF3               ADC     R31, R3
   \   000003E6   8110               LD      R17, Z
   \   000003E8   E04E               LDI     R20, 14
   \   000003EA   9F14               MUL     R17, R20
   \   000003EC   ....               LDI     R17, LOW(TData)
   \   000003EE   0E01               ADD     R0, R17
   \   000003F0   ....               LDI     R17, (TData) >> 8
   \   000003F2   1E11               ADC     R1, R17
   \   000003F4   0E02               ADD     R0, R18
   \   000003F6   1E13               ADC     R1, R19
   \   000003F8   01F0               MOVW    R31:R30, R1:R0
   \   000003FA   AD13               LDD     R17, Z+59
   \   000003FC   E14A               LDI     R20, 26
   \   000003FE   9F04               MUL     R16, R20
   \   00000400   01F0               MOVW    R31:R30, R1:R0
   \   00000402   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000404   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000406   8140               LD      R20, Z
   \   00000408   8151               LDD     R21, Z+1
   \   0000040A   E16A               LDI     R22, 26
   \   0000040C   9F06               MUL     R16, R22
   \   0000040E   01F0               MOVW    R31:R30, R1:R0
   \   00000410   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000412   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000414   8162               LDD     R22, Z+2
   \   00000416   8173               LDD     R23, Z+3
   \   00000418   01FA               MOVW    R31:R30, R21:R20
   \   0000041A   0FE6               ADD     R30, R22
   \   0000041C   1FF7               ADC     R31, R23
   \   0000041E   8310               ST      Z, R17
   \   00000420   E11A               LDI     R17, 26
   \   00000422   9F01               MUL     R16, R17
   \   00000424   01F0               MOVW    R31:R30, R1:R0
   \   00000426   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000428   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000042A   8142               LDD     R20, Z+2
   \   0000042C   8153               LDD     R21, Z+3
   \   0000042E   5F4F               SUBI    R20, 255
   \   00000430   4F5F               SBCI    R21, 255
   \   00000432   8342               STD     Z+2, R20
   \   00000434   8353               STD     Z+3, R21
    499                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup2[UART[ch].pRxBuffer[pointer]][i] ;
   \   00000436   E11A               LDI     R17, 26
   \   00000438   9F01               MUL     R16, R17
   \   0000043A   01F0               MOVW    R31:R30, R1:R0
   \   0000043C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000043E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000440   8542               LDD     R20, Z+10
   \   00000442   8553               LDD     R21, Z+11
   \   00000444   01FA               MOVW    R31:R30, R21:R20
   \   00000446   0DE2               ADD     R30, R2
   \   00000448   1DF3               ADC     R31, R3
   \   0000044A   8110               LD      R17, Z
   \   0000044C   E04E               LDI     R20, 14
   \   0000044E   9F14               MUL     R17, R20
   \   00000450   ....               LDI     R17, LOW(TData)
   \   00000452   0E01               ADD     R0, R17
   \   00000454   ....               LDI     R17, (TData) >> 8
   \   00000456   1E11               ADC     R1, R17
   \   00000458   0E02               ADD     R0, R18
   \   0000045A   1E13               ADC     R1, R19
   \   0000045C   01F0               MOVW    R31:R30, R1:R0
   \   0000045E   55E5               SUBI    R30, 85
   \   00000460   4FFF               SBCI    R31, 255
   \   00000462   8110               LD      R17, Z
   \   00000464   E14A               LDI     R20, 26
   \   00000466   9F04               MUL     R16, R20
   \   00000468   01F0               MOVW    R31:R30, R1:R0
   \   0000046A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000046C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000046E   8140               LD      R20, Z
   \   00000470   8151               LDD     R21, Z+1
   \   00000472   E16A               LDI     R22, 26
   \   00000474   9F06               MUL     R16, R22
   \   00000476   01F0               MOVW    R31:R30, R1:R0
   \   00000478   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000047A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000047C   8162               LDD     R22, Z+2
   \   0000047E   8173               LDD     R23, Z+3
   \   00000480   01FA               MOVW    R31:R30, R21:R20
   \   00000482   0FE6               ADD     R30, R22
   \   00000484   1FF7               ADC     R31, R23
   \   00000486   8310               ST      Z, R17
   \   00000488   E11A               LDI     R17, 26
   \   0000048A   9F01               MUL     R16, R17
   \   0000048C   01F0               MOVW    R31:R30, R1:R0
   \   0000048E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000490   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000492   8142               LDD     R20, Z+2
   \   00000494   8153               LDD     R21, Z+3
   \   00000496   5F4F               SUBI    R20, 255
   \   00000498   4F5F               SBCI    R21, 255
   \   0000049A   8342               STD     Z+2, R20
   \   0000049C   8353               STD     Z+3, R21
    500                  *((float*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float*)&TData.RS4.Result[UART[ch].pRxBuffer[pointer]][i]) ;   // ADresult
   \   0000049E   E11A               LDI     R17, 26
   \   000004A0   9F01               MUL     R16, R17
   \   000004A2   01F0               MOVW    R31:R30, R1:R0
   \   000004A4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004A6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004A8   8542               LDD     R20, Z+10
   \   000004AA   8553               LDD     R21, Z+11
   \   000004AC   01FA               MOVW    R31:R30, R21:R20
   \   000004AE   0DE2               ADD     R30, R2
   \   000004B0   1DF3               ADC     R31, R3
   \   000004B2   8110               LD      R17, Z
   \   000004B4   E348               LDI     R20, 56
   \   000004B6   9F14               MUL     R17, R20
   \   000004B8   ....               LDI     R17, LOW(TData)
   \   000004BA   0E01               ADD     R0, R17
   \   000004BC   ....               LDI     R17, (TData) >> 8
   \   000004BE   1E11               ADC     R1, R17
   \   000004C0   01A9               MOVW    R21:R20, R19:R18
   \   000004C2   0F44               LSL     R20
   \   000004C4   1F55               ROL     R21
   \   000004C6   0F44               LSL     R20
   \   000004C8   1F55               ROL     R21
   \   000004CA   0E04               ADD     R0, R20
   \   000004CC   1E15               ADC     R1, R21
   \   000004CE   01F0               MOVW    R31:R30, R1:R0
   \   000004D0   52E5               SUBI    R30, 37
   \   000004D2   4FFD               SBCI    R31, 253
   \   000004D4   8140               LD      R20, Z
   \   000004D6   8151               LDD     R21, Z+1
   \   000004D8   8162               LDD     R22, Z+2
   \   000004DA   8173               LDD     R23, Z+3
   \   000004DC   E11A               LDI     R17, 26
   \   000004DE   9F01               MUL     R16, R17
   \   000004E0   01F0               MOVW    R31:R30, R1:R0
   \   000004E2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004E4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004E6   81A0               LD      R26, Z
   \   000004E8   81B1               LDD     R27, Z+1
   \   000004EA   E11A               LDI     R17, 26
   \   000004EC   9F01               MUL     R16, R17
   \   000004EE   01F0               MOVW    R31:R30, R1:R0
   \   000004F0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004F2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004F4   8002               LDD     R0, Z+2
   \   000004F6   8013               LDD     R1, Z+3
   \   000004F8   01FD               MOVW    R31:R30, R27:R26
   \   000004FA   0DE0               ADD     R30, R0
   \   000004FC   1DF1               ADC     R31, R1
   \   000004FE   8340               ST      Z, R20
   \   00000500   8351               STD     Z+1, R21
   \   00000502   8362               STD     Z+2, R22
   \   00000504   8373               STD     Z+3, R23
    501                  UART[ch].TxFirst += sizeof(float) ;
   \   00000506   E11A               LDI     R17, 26
   \   00000508   9F01               MUL     R16, R17
   \   0000050A   01F0               MOVW    R31:R30, R1:R0
   \   0000050C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000050E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000510   8142               LDD     R20, Z+2
   \   00000512   8153               LDD     R21, Z+3
   \   00000514   5F4C               SUBI    R20, 252
   \   00000516   4F5F               SBCI    R21, 255
   \   00000518   8342               STD     Z+2, R20
   \   0000051A   8353               STD     Z+3, R21
    502              }
   \   0000051C   5F2F               SUBI    R18, 255
   \   0000051E   4F3F               SBCI    R19, 255
   \   00000520   CF53               RJMP    ??BuildMData485_0
    503          
    504              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??BuildMData485_1:
   \   00000522   E11A               LDI     R17, 26
   \   00000524   9F01               MUL     R16, R17
   \   00000526   01F0               MOVW    R31:R30, R1:R0
   \   00000528   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000052A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000052C   8162               LDD     R22, Z+2
   \   0000052E   8173               LDD     R23, Z+3
   \   00000530   1B68               SUB     R22, R24
   \   00000532   5062               SUBI    R22, 2
   \   00000534   E11A               LDI     R17, 26
   \   00000536   9F01               MUL     R16, R17
   \   00000538   01F0               MOVW    R31:R30, R1:R0
   \   0000053A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000053C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000053E   8140               LD      R20, Z
   \   00000540   8151               LDD     R21, Z+1
   \   00000542   01FA               MOVW    R31:R30, R21:R20
   \   00000544   0FE8               ADD     R30, R24
   \   00000546   1FF9               ADC     R31, R25
   \   00000548   8360               ST      Z, R22
    505              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   0000054A   E11A               LDI     R17, 26
   \   0000054C   9F01               MUL     R16, R17
   \   0000054E   01F0               MOVW    R31:R30, R1:R0
   \   00000550   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000552   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000554   8142               LDD     R20, Z+2
   \   00000556   8153               LDD     R21, Z+3
   \   00000558   1B48               SUB     R20, R24
   \   0000055A   0B59               SBC     R21, R25
   \   0000055C   5042               SUBI    R20, 2
   \   0000055E   4050               SBCI    R21, 0
   \   00000560   2F45               MOV     R20, R21
   \   00000562   E050               LDI     R21, 0
   \   00000564   2F14               MOV     R17, R20
   \   00000566   E14A               LDI     R20, 26
   \   00000568   9F04               MUL     R16, R20
   \   0000056A   01F0               MOVW    R31:R30, R1:R0
   \   0000056C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000056E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000570   8140               LD      R20, Z
   \   00000572   8151               LDD     R21, Z+1
   \   00000574   0F48               ADD     R20, R24
   \   00000576   1F59               ADC     R21, R25
   \   00000578   01FA               MOVW    R31:R30, R21:R20
   \   0000057A   8311               STD     Z+1, R17
    506          
    507          }
   \   0000057C   E0E4               LDI     R30, 4
   \   0000057E   ........           JMP     ?EPILOGUE_B4_L09
    508          
    509          /*************************************************************************
    510          *
    511          * Build datablock of raw and cal data for ADcard
    512          *
    513          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    514          void BuildRData485(char ch, short pointer) {
   \                     BuildRData485:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01B9               MOVW    R23:R22, R19:R18
    515          
    516              short ntna, i ;
    517              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000006   E011               LDI     R17, 1
   \   00000008   E12A               LDI     R18, 26
   \   0000000A   9F02               MUL     R16, R18
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000012   8F11               STD     Z+25, R17
    518          
    519              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA & 0xff;
   \   00000014   E716               LDI     R17, 118
   \   00000016   E12A               LDI     R18, 26
   \   00000018   9F02               MUL     R16, R18
   \   0000001A   01F0               MOVW    R31:R30, R1:R0
   \   0000001C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000020   8120               LD      R18, Z
   \   00000022   8131               LDD     R19, Z+1
   \   00000024   E14A               LDI     R20, 26
   \   00000026   9F04               MUL     R16, R20
   \   00000028   01F0               MOVW    R31:R30, R1:R0
   \   0000002A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002E   8142               LDD     R20, Z+2
   \   00000030   8153               LDD     R21, Z+3
   \   00000032   01F9               MOVW    R31:R30, R19:R18
   \   00000034   0FE4               ADD     R30, R20
   \   00000036   1FF5               ADC     R31, R21
   \   00000038   8310               ST      Z, R17
   \   0000003A   E11A               LDI     R17, 26
   \   0000003C   9F01               MUL     R16, R17
   \   0000003E   01F0               MOVW    R31:R30, R1:R0
   \   00000040   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000044   8122               LDD     R18, Z+2
   \   00000046   8133               LDD     R19, Z+3
   \   00000048   5F2F               SUBI    R18, 255
   \   0000004A   4F3F               SBCI    R19, 255
   \   0000004C   8322               STD     Z+2, R18
   \   0000004E   8333               STD     Z+3, R19
    520              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA >> 8;
   \   00000050   E014               LDI     R17, 4
   \   00000052   E12A               LDI     R18, 26
   \   00000054   9F02               MUL     R16, R18
   \   00000056   01F0               MOVW    R31:R30, R1:R0
   \   00000058   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005C   8120               LD      R18, Z
   \   0000005E   8131               LDD     R19, Z+1
   \   00000060   E14A               LDI     R20, 26
   \   00000062   9F04               MUL     R16, R20
   \   00000064   01F0               MOVW    R31:R30, R1:R0
   \   00000066   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000006A   8142               LDD     R20, Z+2
   \   0000006C   8153               LDD     R21, Z+3
   \   0000006E   01F9               MOVW    R31:R30, R19:R18
   \   00000070   0FE4               ADD     R30, R20
   \   00000072   1FF5               ADC     R31, R21
   \   00000074   8310               ST      Z, R17
   \   00000076   E11A               LDI     R17, 26
   \   00000078   9F01               MUL     R16, R17
   \   0000007A   01F0               MOVW    R31:R30, R1:R0
   \   0000007C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000080   8122               LDD     R18, Z+2
   \   00000082   8133               LDD     R19, Z+3
   \   00000084   5F2F               SUBI    R18, 255
   \   00000086   4F3F               SBCI    R19, 255
   \   00000088   8322               STD     Z+2, R18
   \   0000008A   8333               STD     Z+3, R19
    521              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000008C   E11A               LDI     R17, 26
   \   0000008E   9F01               MUL     R16, R17
   \   00000090   01F0               MOVW    R31:R30, R1:R0
   \   00000092   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000094   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000096   8122               LDD     R18, Z+2
   \   00000098   8133               LDD     R19, Z+3
    522              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000009A   E11A               LDI     R17, 26
   \   0000009C   9F01               MUL     R16, R17
   \   0000009E   01F0               MOVW    R31:R30, R1:R0
   \   000000A0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A4   8142               LDD     R20, Z+2
   \   000000A6   8153               LDD     R21, Z+3
   \   000000A8   5F4E               SUBI    R20, 254
   \   000000AA   4F5F               SBCI    R21, 255
   \   000000AC   8342               STD     Z+2, R20
   \   000000AE   8353               STD     Z+3, R21
    523          
    524              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer] ;
   \   000000B0   E11A               LDI     R17, 26
   \   000000B2   9F01               MUL     R16, R17
   \   000000B4   01F0               MOVW    R31:R30, R1:R0
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8542               LDD     R20, Z+10
   \   000000BC   8553               LDD     R21, Z+11
   \   000000BE   01FA               MOVW    R31:R30, R21:R20
   \   000000C0   0FE6               ADD     R30, R22
   \   000000C2   1FF7               ADC     R31, R23
   \   000000C4   8110               LD      R17, Z
   \   000000C6   E14A               LDI     R20, 26
   \   000000C8   9F04               MUL     R16, R20
   \   000000CA   01F0               MOVW    R31:R30, R1:R0
   \   000000CC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000CE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D0   8140               LD      R20, Z
   \   000000D2   8151               LDD     R21, Z+1
   \   000000D4   E1EA               LDI     R30, 26
   \   000000D6   9F0E               MUL     R16, R30
   \   000000D8   01F0               MOVW    R31:R30, R1:R0
   \   000000DA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000DC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000DE   8002               LDD     R0, Z+2
   \   000000E0   8013               LDD     R1, Z+3
   \   000000E2   01FA               MOVW    R31:R30, R21:R20
   \   000000E4   0DE0               ADD     R30, R0
   \   000000E6   1DF1               ADC     R31, R1
   \   000000E8   8310               ST      Z, R17
   \   000000EA   E11A               LDI     R17, 26
   \   000000EC   9F01               MUL     R16, R17
   \   000000EE   01F0               MOVW    R31:R30, R1:R0
   \   000000F0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F4   8142               LDD     R20, Z+2
   \   000000F6   8153               LDD     R21, Z+3
   \   000000F8   5F4F               SUBI    R20, 255
   \   000000FA   4F5F               SBCI    R21, 255
   \   000000FC   8342               STD     Z+2, R20
   \   000000FE   8353               STD     Z+3, R21
    525              for (i = 0; i < 14; i++) {
   \   00000100   E040               LDI     R20, 0
   \   00000102   E050               LDI     R21, 0
   \                     ??BuildRData485_0:
   \   00000104   304E               CPI     R20, 14
   \   00000106   E010               LDI     R17, 0
   \   00000108   0751               CPC     R21, R17
   \   0000010A   F00C               BRLT    $+2+2
   \   0000010C   C071               RJMP    ??BuildRData485_1
    526                  *((short*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short*)&TData.RS4.Raw[UART[ch].pRxBuffer[pointer]][i]) ;   // Raw data
   \   0000010E   E11A               LDI     R17, 26
   \   00000110   9F01               MUL     R16, R17
   \   00000112   01F0               MOVW    R31:R30, R1:R0
   \   00000114   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000116   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000118   8402               LDD     R0, Z+10
   \   0000011A   8413               LDD     R1, Z+11
   \   0000011C   01F0               MOVW    R31:R30, R1:R0
   \   0000011E   0FE6               ADD     R30, R22
   \   00000120   1FF7               ADC     R31, R23
   \   00000122   8110               LD      R17, Z
   \   00000124   E1EC               LDI     R30, 28
   \   00000126   9F1E               MUL     R17, R30
   \   00000128   ....               LDI     R17, LOW(TData)
   \   0000012A   0E01               ADD     R0, R17
   \   0000012C   ....               LDI     R17, (TData) >> 8
   \   0000012E   1E11               ADC     R1, R17
   \   00000130   0E04               ADD     R0, R20
   \   00000132   1E15               ADC     R1, R21
   \   00000134   0E04               ADD     R0, R20
   \   00000136   1E15               ADC     R1, R21
   \   00000138   01F0               MOVW    R31:R30, R1:R0
   \   0000013A   5EE5               SUBI    R30, 229
   \   0000013C   4FFE               SBCI    R31, 254
   \   0000013E   8180               LD      R24, Z
   \   00000140   8191               LDD     R25, Z+1
   \   00000142   E11A               LDI     R17, 26
   \   00000144   9F01               MUL     R16, R17
   \   00000146   01F0               MOVW    R31:R30, R1:R0
   \   00000148   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000014A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000014C   8020               LD      R2, Z
   \   0000014E   8031               LDD     R3, Z+1
   \   00000150   E11A               LDI     R17, 26
   \   00000152   9F01               MUL     R16, R17
   \   00000154   01F0               MOVW    R31:R30, R1:R0
   \   00000156   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000158   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000015A   8002               LDD     R0, Z+2
   \   0000015C   8013               LDD     R1, Z+3
   \   0000015E   01F1               MOVW    R31:R30, R3:R2
   \   00000160   0DE0               ADD     R30, R0
   \   00000162   1DF1               ADC     R31, R1
   \   00000164   8380               ST      Z, R24
   \   00000166   8391               STD     Z+1, R25
    527                  UART[ch].TxFirst += sizeof(short) ;
   \   00000168   E11A               LDI     R17, 26
   \   0000016A   9F01               MUL     R16, R17
   \   0000016C   01F0               MOVW    R31:R30, R1:R0
   \   0000016E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000170   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000172   8182               LDD     R24, Z+2
   \   00000174   8193               LDD     R25, Z+3
   \   00000176   9602               ADIW    R25:R24, 2
   \   00000178   8382               STD     Z+2, R24
   \   0000017A   8393               STD     Z+3, R25
    528                  *((short*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short*)&TData.RS4.Cal[UART[ch].pRxBuffer[pointer]][i]) ;   // Cal data
   \   0000017C   E11A               LDI     R17, 26
   \   0000017E   9F01               MUL     R16, R17
   \   00000180   01F0               MOVW    R31:R30, R1:R0
   \   00000182   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000184   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000186   8402               LDD     R0, Z+10
   \   00000188   8413               LDD     R1, Z+11
   \   0000018A   01F0               MOVW    R31:R30, R1:R0
   \   0000018C   0FE6               ADD     R30, R22
   \   0000018E   1FF7               ADC     R31, R23
   \   00000190   8110               LD      R17, Z
   \   00000192   E1EC               LDI     R30, 28
   \   00000194   9F1E               MUL     R17, R30
   \   00000196   ....               LDI     R17, LOW(TData)
   \   00000198   0E01               ADD     R0, R17
   \   0000019A   ....               LDI     R17, (TData) >> 8
   \   0000019C   1E11               ADC     R1, R17
   \   0000019E   0E04               ADD     R0, R20
   \   000001A0   1E15               ADC     R1, R21
   \   000001A2   0E04               ADD     R0, R20
   \   000001A4   1E15               ADC     R1, R21
   \   000001A6   01F0               MOVW    R31:R30, R1:R0
   \   000001A8   50E5               SUBI    R30, 5
   \   000001AA   4FFE               SBCI    R31, 254
   \   000001AC   8180               LD      R24, Z
   \   000001AE   8191               LDD     R25, Z+1
   \   000001B0   E11A               LDI     R17, 26
   \   000001B2   9F01               MUL     R16, R17
   \   000001B4   01F0               MOVW    R31:R30, R1:R0
   \   000001B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001BA   8020               LD      R2, Z
   \   000001BC   8031               LDD     R3, Z+1
   \   000001BE   E11A               LDI     R17, 26
   \   000001C0   9F01               MUL     R16, R17
   \   000001C2   01F0               MOVW    R31:R30, R1:R0
   \   000001C4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001C6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001C8   8002               LDD     R0, Z+2
   \   000001CA   8013               LDD     R1, Z+3
   \   000001CC   01F1               MOVW    R31:R30, R3:R2
   \   000001CE   0DE0               ADD     R30, R0
   \   000001D0   1DF1               ADC     R31, R1
   \   000001D2   8380               ST      Z, R24
   \   000001D4   8391               STD     Z+1, R25
    529                  UART[ch].TxFirst += sizeof(short) ;
   \   000001D6   E11A               LDI     R17, 26
   \   000001D8   9F01               MUL     R16, R17
   \   000001DA   01F0               MOVW    R31:R30, R1:R0
   \   000001DC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001DE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E0   8182               LDD     R24, Z+2
   \   000001E2   8193               LDD     R25, Z+3
   \   000001E4   9602               ADIW    R25:R24, 2
   \   000001E6   8382               STD     Z+2, R24
   \   000001E8   8393               STD     Z+3, R25
    530              }
   \   000001EA   5F4F               SUBI    R20, 255
   \   000001EC   4F5F               SBCI    R21, 255
   \   000001EE   CF8A               RJMP    ??BuildRData485_0
    531          
    532              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??BuildRData485_1:
   \   000001F0   E11A               LDI     R17, 26
   \   000001F2   9F01               MUL     R16, R17
   \   000001F4   01F0               MOVW    R31:R30, R1:R0
   \   000001F6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001F8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001FA   8182               LDD     R24, Z+2
   \   000001FC   8193               LDD     R25, Z+3
   \   000001FE   1B82               SUB     R24, R18
   \   00000200   5082               SUBI    R24, 2
   \   00000202   E11A               LDI     R17, 26
   \   00000204   9F01               MUL     R16, R17
   \   00000206   01F0               MOVW    R31:R30, R1:R0
   \   00000208   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000020A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000020C   8000               LD      R0, Z
   \   0000020E   8011               LDD     R1, Z+1
   \   00000210   01F0               MOVW    R31:R30, R1:R0
   \   00000212   0FE2               ADD     R30, R18
   \   00000214   1FF3               ADC     R31, R19
   \   00000216   8380               ST      Z, R24
    533              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000218   E11A               LDI     R17, 26
   \   0000021A   9F01               MUL     R16, R17
   \   0000021C   01F0               MOVW    R31:R30, R1:R0
   \   0000021E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000220   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000222   8182               LDD     R24, Z+2
   \   00000224   8193               LDD     R25, Z+3
   \   00000226   1B82               SUB     R24, R18
   \   00000228   0B93               SBC     R25, R19
   \   0000022A   9702               SBIW    R25:R24, 2
   \   0000022C   2F89               MOV     R24, R25
   \   0000022E   E090               LDI     R25, 0
   \   00000230   E11A               LDI     R17, 26
   \   00000232   9F01               MUL     R16, R17
   \   00000234   01F0               MOVW    R31:R30, R1:R0
   \   00000236   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000238   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000023A   8000               LD      R0, Z
   \   0000023C   8011               LDD     R1, Z+1
   \   0000023E   0E02               ADD     R0, R18
   \   00000240   1E13               ADC     R1, R19
   \   00000242   01F0               MOVW    R31:R30, R1:R0
   \   00000244   8381               STD     Z+1, R24
    534          
    535          }
   \   00000246   9189               LD      R24, Y+
   \   00000248   9199               LD      R25, Y+
   \   0000024A   9508               RET
    536          
    537          /*************************************************************************
    538          *
    539          * Build setup data package for AN-ZBANA
    540          *
    541          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    542          void BuildANASetup(char ch, short pointer) {
   \                     BuildANASetup:
   \   00000000   01A9               MOVW    R21:R20, R19:R18
    543          
    544              short ntna ;
    545              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000002   E011               LDI     R17, 1
   \   00000004   E12A               LDI     R18, 26
   \   00000006   9F02               MUL     R16, R18
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000000E   8F11               STD     Z+25, R17
    546          
    547              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP & 0xff;
   \   00000010   EB1B               LDI     R17, 187
   \   00000012   E12A               LDI     R18, 26
   \   00000014   9F02               MUL     R16, R18
   \   00000016   01F0               MOVW    R31:R30, R1:R0
   \   00000018   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001C   8120               LD      R18, Z
   \   0000001E   8131               LDD     R19, Z+1
   \   00000020   E16A               LDI     R22, 26
   \   00000022   9F06               MUL     R16, R22
   \   00000024   01F0               MOVW    R31:R30, R1:R0
   \   00000026   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002A   8162               LDD     R22, Z+2
   \   0000002C   8173               LDD     R23, Z+3
   \   0000002E   01F9               MOVW    R31:R30, R19:R18
   \   00000030   0FE6               ADD     R30, R22
   \   00000032   1FF7               ADC     R31, R23
   \   00000034   8310               ST      Z, R17
   \   00000036   E11A               LDI     R17, 26
   \   00000038   9F01               MUL     R16, R17
   \   0000003A   01F0               MOVW    R31:R30, R1:R0
   \   0000003C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000003E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000040   8122               LDD     R18, Z+2
   \   00000042   8133               LDD     R19, Z+3
   \   00000044   5F2F               SUBI    R18, 255
   \   00000046   4F3F               SBCI    R19, 255
   \   00000048   8322               STD     Z+2, R18
   \   0000004A   8333               STD     Z+3, R19
    548              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP >> 8;
   \   0000004C   E014               LDI     R17, 4
   \   0000004E   E12A               LDI     R18, 26
   \   00000050   9F02               MUL     R16, R18
   \   00000052   01F0               MOVW    R31:R30, R1:R0
   \   00000054   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000056   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000058   8120               LD      R18, Z
   \   0000005A   8131               LDD     R19, Z+1
   \   0000005C   E16A               LDI     R22, 26
   \   0000005E   9F06               MUL     R16, R22
   \   00000060   01F0               MOVW    R31:R30, R1:R0
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8162               LDD     R22, Z+2
   \   00000068   8173               LDD     R23, Z+3
   \   0000006A   01F9               MOVW    R31:R30, R19:R18
   \   0000006C   0FE6               ADD     R30, R22
   \   0000006E   1FF7               ADC     R31, R23
   \   00000070   8310               ST      Z, R17
   \   00000072   E11A               LDI     R17, 26
   \   00000074   9F01               MUL     R16, R17
   \   00000076   01F0               MOVW    R31:R30, R1:R0
   \   00000078   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000007A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000007C   8122               LDD     R18, Z+2
   \   0000007E   8133               LDD     R19, Z+3
   \   00000080   5F2F               SUBI    R18, 255
   \   00000082   4F3F               SBCI    R19, 255
   \   00000084   8322               STD     Z+2, R18
   \   00000086   8333               STD     Z+3, R19
    549              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   00000088   E11A               LDI     R17, 26
   \   0000008A   9F01               MUL     R16, R17
   \   0000008C   01F0               MOVW    R31:R30, R1:R0
   \   0000008E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000092   8122               LDD     R18, Z+2
   \   00000094   8133               LDD     R19, Z+3
    550              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000096   E11A               LDI     R17, 26
   \   00000098   9F01               MUL     R16, R17
   \   0000009A   01F0               MOVW    R31:R30, R1:R0
   \   0000009C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A0   8162               LDD     R22, Z+2
   \   000000A2   8173               LDD     R23, Z+3
   \   000000A4   5F6E               SUBI    R22, 254
   \   000000A6   4F7F               SBCI    R23, 255
   \   000000A8   8362               STD     Z+2, R22
   \   000000AA   8373               STD     Z+3, R23
    551          
    552              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.PortUsed & 0xff;
   \   000000AC   ....               LDI     R30, LOW(TData)
   \   000000AE   ....               LDI     R31, (TData) >> 8
   \   000000B0   8160               LD      R22, Z
   \   000000B2   8171               LDD     R23, Z+1
   \   000000B4   2F16               MOV     R17, R22
   \   000000B6   E16A               LDI     R22, 26
   \   000000B8   9F06               MUL     R16, R22
   \   000000BA   01F0               MOVW    R31:R30, R1:R0
   \   000000BC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000BE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000C0   8160               LD      R22, Z
   \   000000C2   8171               LDD     R23, Z+1
   \   000000C4   E1EA               LDI     R30, 26
   \   000000C6   9F0E               MUL     R16, R30
   \   000000C8   01F0               MOVW    R31:R30, R1:R0
   \   000000CA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000CC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000CE   8002               LDD     R0, Z+2
   \   000000D0   8013               LDD     R1, Z+3
   \   000000D2   01FB               MOVW    R31:R30, R23:R22
   \   000000D4   0DE0               ADD     R30, R0
   \   000000D6   1DF1               ADC     R31, R1
   \   000000D8   8310               ST      Z, R17
   \   000000DA   E11A               LDI     R17, 26
   \   000000DC   9F01               MUL     R16, R17
   \   000000DE   01F0               MOVW    R31:R30, R1:R0
   \   000000E0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000E2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000E4   8162               LDD     R22, Z+2
   \   000000E6   8173               LDD     R23, Z+3
   \   000000E8   5F6F               SUBI    R22, 255
   \   000000EA   4F7F               SBCI    R23, 255
   \   000000EC   8362               STD     Z+2, R22
   \   000000EE   8373               STD     Z+3, R23
    553              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.Ana.PortUsed >> 8) & 0xff;
   \   000000F0   ....               LDI     R30, LOW(TData)
   \   000000F2   ....               LDI     R31, (TData) >> 8
   \   000000F4   8160               LD      R22, Z
   \   000000F6   8171               LDD     R23, Z+1
   \   000000F8   2F67               MOV     R22, R23
   \   000000FA   E070               LDI     R23, 0
   \   000000FC   2F16               MOV     R17, R22
   \   000000FE   E16A               LDI     R22, 26
   \   00000100   9F06               MUL     R16, R22
   \   00000102   01F0               MOVW    R31:R30, R1:R0
   \   00000104   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000106   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000108   8160               LD      R22, Z
   \   0000010A   8171               LDD     R23, Z+1
   \   0000010C   E1EA               LDI     R30, 26
   \   0000010E   9F0E               MUL     R16, R30
   \   00000110   01F0               MOVW    R31:R30, R1:R0
   \   00000112   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000114   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000116   8002               LDD     R0, Z+2
   \   00000118   8013               LDD     R1, Z+3
   \   0000011A   01FB               MOVW    R31:R30, R23:R22
   \   0000011C   0DE0               ADD     R30, R0
   \   0000011E   1DF1               ADC     R31, R1
   \   00000120   8310               ST      Z, R17
   \   00000122   E11A               LDI     R17, 26
   \   00000124   9F01               MUL     R16, R17
   \   00000126   01F0               MOVW    R31:R30, R1:R0
   \   00000128   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000012A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000012C   8162               LDD     R22, Z+2
   \   0000012E   8173               LDD     R23, Z+3
   \   00000130   5F6F               SUBI    R22, 255
   \   00000132   4F7F               SBCI    R23, 255
   \   00000134   8362               STD     Z+2, R22
   \   00000136   8373               STD     Z+3, R23
    554          
    555              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000138   E11A               LDI     R17, 26
   \   0000013A   9F01               MUL     R16, R17
   \   0000013C   01F0               MOVW    R31:R30, R1:R0
   \   0000013E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000140   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000142   8162               LDD     R22, Z+2
   \   00000144   8173               LDD     R23, Z+3
   \   00000146   2F16               MOV     R17, R22
   \   00000148   1B12               SUB     R17, R18
   \   0000014A   5012               SUBI    R17, 2
   \   0000014C   E16A               LDI     R22, 26
   \   0000014E   9F06               MUL     R16, R22
   \   00000150   01F0               MOVW    R31:R30, R1:R0
   \   00000152   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000154   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000156   8160               LD      R22, Z
   \   00000158   8171               LDD     R23, Z+1
   \   0000015A   01FB               MOVW    R31:R30, R23:R22
   \   0000015C   0FE2               ADD     R30, R18
   \   0000015E   1FF3               ADC     R31, R19
   \   00000160   8310               ST      Z, R17
    556              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000162   E11A               LDI     R17, 26
   \   00000164   9F01               MUL     R16, R17
   \   00000166   01F0               MOVW    R31:R30, R1:R0
   \   00000168   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000016A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000016C   8162               LDD     R22, Z+2
   \   0000016E   8173               LDD     R23, Z+3
   \   00000170   1B62               SUB     R22, R18
   \   00000172   0B73               SBC     R23, R19
   \   00000174   5062               SUBI    R22, 2
   \   00000176   4070               SBCI    R23, 0
   \   00000178   2F67               MOV     R22, R23
   \   0000017A   E070               LDI     R23, 0
   \   0000017C   2F16               MOV     R17, R22
   \   0000017E   E16A               LDI     R22, 26
   \   00000180   9F06               MUL     R16, R22
   \   00000182   01F0               MOVW    R31:R30, R1:R0
   \   00000184   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000186   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000188   8160               LD      R22, Z
   \   0000018A   8171               LDD     R23, Z+1
   \   0000018C   0F62               ADD     R22, R18
   \   0000018E   1F73               ADC     R23, R19
   \   00000190   01FB               MOVW    R31:R30, R23:R22
   \   00000192   8311               STD     Z+1, R17
    557          }
   \   00000194   9508               RET
    558          
    559          /*************************************************************************
    560          *
    561          * Build filter data package for AN-ZBANA
    562          *
    563          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    564          void BuildANAFilter(char ch, short pointer) {
   \                     BuildANAFilter:
   \   00000000   2E38               MOV     R3, R24
   \   00000002   01A9               MOVW    R21:R20, R19:R18
    565          
    566              char port;
    567              short ntna ;
    568              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000004   E011               LDI     R17, 1
   \   00000006   E12A               LDI     R18, 26
   \   00000008   9F02               MUL     R16, R18
   \   0000000A   01F0               MOVW    R31:R30, R1:R0
   \   0000000C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000000E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000010   8F11               STD     Z+25, R17
    569          
    570              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER & 0xff;
   \   00000012   EC1F               LDI     R17, 207
   \   00000014   E12A               LDI     R18, 26
   \   00000016   9F02               MUL     R16, R18
   \   00000018   01F0               MOVW    R31:R30, R1:R0
   \   0000001A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001E   8120               LD      R18, Z
   \   00000020   8131               LDD     R19, Z+1
   \   00000022   E16A               LDI     R22, 26
   \   00000024   9F06               MUL     R16, R22
   \   00000026   01F0               MOVW    R31:R30, R1:R0
   \   00000028   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002C   8162               LDD     R22, Z+2
   \   0000002E   8173               LDD     R23, Z+3
   \   00000030   01F9               MOVW    R31:R30, R19:R18
   \   00000032   0FE6               ADD     R30, R22
   \   00000034   1FF7               ADC     R31, R23
   \   00000036   8310               ST      Z, R17
   \   00000038   E11A               LDI     R17, 26
   \   0000003A   9F01               MUL     R16, R17
   \   0000003C   01F0               MOVW    R31:R30, R1:R0
   \   0000003E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000040   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000042   8122               LDD     R18, Z+2
   \   00000044   8133               LDD     R19, Z+3
   \   00000046   5F2F               SUBI    R18, 255
   \   00000048   4F3F               SBCI    R19, 255
   \   0000004A   8322               STD     Z+2, R18
   \   0000004C   8333               STD     Z+3, R19
    571              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER >> 8;
   \   0000004E   E014               LDI     R17, 4
   \   00000050   E12A               LDI     R18, 26
   \   00000052   9F02               MUL     R16, R18
   \   00000054   01F0               MOVW    R31:R30, R1:R0
   \   00000056   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000058   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005A   8120               LD      R18, Z
   \   0000005C   8131               LDD     R19, Z+1
   \   0000005E   E16A               LDI     R22, 26
   \   00000060   9F06               MUL     R16, R22
   \   00000062   01F0               MOVW    R31:R30, R1:R0
   \   00000064   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000068   8162               LDD     R22, Z+2
   \   0000006A   8173               LDD     R23, Z+3
   \   0000006C   01F9               MOVW    R31:R30, R19:R18
   \   0000006E   0FE6               ADD     R30, R22
   \   00000070   1FF7               ADC     R31, R23
   \   00000072   8310               ST      Z, R17
   \   00000074   E11A               LDI     R17, 26
   \   00000076   9F01               MUL     R16, R17
   \   00000078   01F0               MOVW    R31:R30, R1:R0
   \   0000007A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000007E   8122               LDD     R18, Z+2
   \   00000080   8133               LDD     R19, Z+3
   \   00000082   5F2F               SUBI    R18, 255
   \   00000084   4F3F               SBCI    R19, 255
   \   00000086   8322               STD     Z+2, R18
   \   00000088   8333               STD     Z+3, R19
    572              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000008A   E11A               LDI     R17, 26
   \   0000008C   9F01               MUL     R16, R17
   \   0000008E   01F0               MOVW    R31:R30, R1:R0
   \   00000090   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000092   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000094   8122               LDD     R18, Z+2
   \   00000096   8133               LDD     R19, Z+3
    573              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000098   E11A               LDI     R17, 26
   \   0000009A   9F01               MUL     R16, R17
   \   0000009C   01F0               MOVW    R31:R30, R1:R0
   \   0000009E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A2   8162               LDD     R22, Z+2
   \   000000A4   8173               LDD     R23, Z+3
   \   000000A6   5F6E               SUBI    R22, 254
   \   000000A8   4F7F               SBCI    R23, 255
   \   000000AA   8362               STD     Z+2, R22
   \   000000AC   8373               STD     Z+3, R23
    574          
    575              for (port = 0; port < 12; port++) {
   \   000000AE   E010               LDI     R17, 0
   \                     ??BuildANAFilter_0:
   \   000000B0   301C               CPI     R17, 12
   \   000000B2   F520               BRCC    ??BuildANAFilter_1
    576                  #if USE_MODBUS_PROTOCOL == 1
    577                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (char)TData.Ana.Filter[port];
    578                  #else
    579                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Filter[port];
   \   000000B4   2FE1               MOV     R30, R17
   \   000000B6   E0F0               LDI     R31, 0
   \   000000B8   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000BC   8022               LDD     R2, Z+2
   \   000000BE   E16A               LDI     R22, 26
   \   000000C0   9F06               MUL     R16, R22
   \   000000C2   01F0               MOVW    R31:R30, R1:R0
   \   000000C4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000C6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000C8   8160               LD      R22, Z
   \   000000CA   8171               LDD     R23, Z+1
   \   000000CC   E1EA               LDI     R30, 26
   \   000000CE   9F0E               MUL     R16, R30
   \   000000D0   01F0               MOVW    R31:R30, R1:R0
   \   000000D2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D6   8002               LDD     R0, Z+2
   \   000000D8   8013               LDD     R1, Z+3
   \   000000DA   01FB               MOVW    R31:R30, R23:R22
   \   000000DC   0DE0               ADD     R30, R0
   \   000000DE   1DF1               ADC     R31, R1
   \   000000E0   8220               ST      Z, R2
   \   000000E2   E16A               LDI     R22, 26
   \   000000E4   9F06               MUL     R16, R22
   \   000000E6   01F0               MOVW    R31:R30, R1:R0
   \   000000E8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000EC   8162               LDD     R22, Z+2
   \   000000EE   8173               LDD     R23, Z+3
   \   000000F0   5F6F               SUBI    R22, 255
   \   000000F2   4F7F               SBCI    R23, 255
   \   000000F4   8362               STD     Z+2, R22
   \   000000F6   8373               STD     Z+3, R23
    580                  #endif
    581              }
   \   000000F8   9513               INC     R17
   \   000000FA   CFDA               RJMP    ??BuildANAFilter_0
    582          
    583              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??BuildANAFilter_1:
   \   000000FC   E16A               LDI     R22, 26
   \   000000FE   9F06               MUL     R16, R22
   \   00000100   01F0               MOVW    R31:R30, R1:R0
   \   00000102   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000104   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000106   8162               LDD     R22, Z+2
   \   00000108   8173               LDD     R23, Z+3
   \   0000010A   2F86               MOV     R24, R22
   \   0000010C   1B82               SUB     R24, R18
   \   0000010E   5082               SUBI    R24, 2
   \   00000110   E16A               LDI     R22, 26
   \   00000112   9F06               MUL     R16, R22
   \   00000114   01F0               MOVW    R31:R30, R1:R0
   \   00000116   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000118   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000011A   8160               LD      R22, Z
   \   0000011C   8171               LDD     R23, Z+1
   \   0000011E   01FB               MOVW    R31:R30, R23:R22
   \   00000120   0FE2               ADD     R30, R18
   \   00000122   1FF3               ADC     R31, R19
   \   00000124   8380               ST      Z, R24
    584              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000126   E16A               LDI     R22, 26
   \   00000128   9F06               MUL     R16, R22
   \   0000012A   01F0               MOVW    R31:R30, R1:R0
   \   0000012C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000012E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000130   8162               LDD     R22, Z+2
   \   00000132   8173               LDD     R23, Z+3
   \   00000134   1B62               SUB     R22, R18
   \   00000136   0B73               SBC     R23, R19
   \   00000138   5062               SUBI    R22, 2
   \   0000013A   4070               SBCI    R23, 0
   \   0000013C   2F67               MOV     R22, R23
   \   0000013E   E070               LDI     R23, 0
   \   00000140   2E26               MOV     R2, R22
   \   00000142   E16A               LDI     R22, 26
   \   00000144   9F06               MUL     R16, R22
   \   00000146   01F0               MOVW    R31:R30, R1:R0
   \   00000148   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000014A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000014C   8160               LD      R22, Z
   \   0000014E   8171               LDD     R23, Z+1
   \   00000150   0F62               ADD     R22, R18
   \   00000152   1F73               ADC     R23, R19
   \   00000154   01FB               MOVW    R31:R30, R23:R22
   \   00000156   8221               STD     Z+1, R2
    585          }
   \   00000158   2D83               MOV     R24, R3
   \   0000015A   9508               RET
    586          
    587          /*************************************************************************
    588          *
    589          * Build datablock for External AD (ANA)
    590          *
    591          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    592          void BuildMDataANA(char ch, short pointer) {
   \                     BuildMDataANA:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   0119               MOVW    R3:R2, R19:R18
    593          
    594              short ntna, i ;
    595              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000006   E011               LDI     R17, 1
   \   00000008   E12A               LDI     R18, 26
   \   0000000A   9F02               MUL     R16, R18
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000012   8F11               STD     Z+25, R17
    596          
    597              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA & 0xff;
   \   00000014   ED19               LDI     R17, 217
   \   00000016   E12A               LDI     R18, 26
   \   00000018   9F02               MUL     R16, R18
   \   0000001A   01F0               MOVW    R31:R30, R1:R0
   \   0000001C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000020   8120               LD      R18, Z
   \   00000022   8131               LDD     R19, Z+1
   \   00000024   E14A               LDI     R20, 26
   \   00000026   9F04               MUL     R16, R20
   \   00000028   01F0               MOVW    R31:R30, R1:R0
   \   0000002A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002E   8142               LDD     R20, Z+2
   \   00000030   8153               LDD     R21, Z+3
   \   00000032   01F9               MOVW    R31:R30, R19:R18
   \   00000034   0FE4               ADD     R30, R20
   \   00000036   1FF5               ADC     R31, R21
   \   00000038   8310               ST      Z, R17
   \   0000003A   E11A               LDI     R17, 26
   \   0000003C   9F01               MUL     R16, R17
   \   0000003E   01F0               MOVW    R31:R30, R1:R0
   \   00000040   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000044   8122               LDD     R18, Z+2
   \   00000046   8133               LDD     R19, Z+3
   \   00000048   5F2F               SUBI    R18, 255
   \   0000004A   4F3F               SBCI    R19, 255
   \   0000004C   8322               STD     Z+2, R18
   \   0000004E   8333               STD     Z+3, R19
    598              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA >> 8;
   \   00000050   E014               LDI     R17, 4
   \   00000052   E12A               LDI     R18, 26
   \   00000054   9F02               MUL     R16, R18
   \   00000056   01F0               MOVW    R31:R30, R1:R0
   \   00000058   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005C   8120               LD      R18, Z
   \   0000005E   8131               LDD     R19, Z+1
   \   00000060   E14A               LDI     R20, 26
   \   00000062   9F04               MUL     R16, R20
   \   00000064   01F0               MOVW    R31:R30, R1:R0
   \   00000066   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000006A   8142               LDD     R20, Z+2
   \   0000006C   8153               LDD     R21, Z+3
   \   0000006E   01F9               MOVW    R31:R30, R19:R18
   \   00000070   0FE4               ADD     R30, R20
   \   00000072   1FF5               ADC     R31, R21
   \   00000074   8310               ST      Z, R17
   \   00000076   E11A               LDI     R17, 26
   \   00000078   9F01               MUL     R16, R17
   \   0000007A   01F0               MOVW    R31:R30, R1:R0
   \   0000007C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000080   8122               LDD     R18, Z+2
   \   00000082   8133               LDD     R19, Z+3
   \   00000084   5F2F               SUBI    R18, 255
   \   00000086   4F3F               SBCI    R19, 255
   \   00000088   8322               STD     Z+2, R18
   \   0000008A   8333               STD     Z+3, R19
    599              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000008C   E11A               LDI     R17, 26
   \   0000008E   9F01               MUL     R16, R17
   \   00000090   01F0               MOVW    R31:R30, R1:R0
   \   00000092   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000094   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000096   8122               LDD     R18, Z+2
   \   00000098   8133               LDD     R19, Z+3
    600              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000009A   E11A               LDI     R17, 26
   \   0000009C   9F01               MUL     R16, R17
   \   0000009E   01F0               MOVW    R31:R30, R1:R0
   \   000000A0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A4   8142               LDD     R20, Z+2
   \   000000A6   8153               LDD     R21, Z+3
   \   000000A8   5F4E               SUBI    R20, 254
   \   000000AA   4F5F               SBCI    R21, 255
   \   000000AC   8342               STD     Z+2, R20
   \   000000AE   8353               STD     Z+3, R21
    601          
    602              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RestartStatus << 4) ;    // Add restart status
   \   000000B0   9110....           LDS     R17, RestartStatus
   \   000000B4   9512               SWAP    R17
   \   000000B6   7F10               ANDI    R17, 0xF0
   \   000000B8   E14A               LDI     R20, 26
   \   000000BA   9F04               MUL     R16, R20
   \   000000BC   01F0               MOVW    R31:R30, R1:R0
   \   000000BE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000C0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000C2   8140               LD      R20, Z
   \   000000C4   8151               LDD     R21, Z+1
   \   000000C6   E16A               LDI     R22, 26
   \   000000C8   9F06               MUL     R16, R22
   \   000000CA   01F0               MOVW    R31:R30, R1:R0
   \   000000CC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000CE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D0   8162               LDD     R22, Z+2
   \   000000D2   8173               LDD     R23, Z+3
   \   000000D4   01FA               MOVW    R31:R30, R21:R20
   \   000000D6   0FE6               ADD     R30, R22
   \   000000D8   1FF7               ADC     R31, R23
   \   000000DA   8310               ST      Z, R17
   \   000000DC   E11A               LDI     R17, 26
   \   000000DE   9F01               MUL     R16, R17
   \   000000E0   01F0               MOVW    R31:R30, R1:R0
   \   000000E2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000E4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000E6   8142               LDD     R20, Z+2
   \   000000E8   8153               LDD     R21, Z+3
   \   000000EA   5F4F               SUBI    R20, 255
   \   000000EC   4F5F               SBCI    R21, 255
   \   000000EE   8342               STD     Z+2, R20
   \   000000F0   8353               STD     Z+3, R21
    603              for (i = 0; i<12; i++) {
   \   000000F2   E080               LDI     R24, 0
   \   000000F4   E090               LDI     R25, 0
   \                     ??BuildMDataANA_0:
   \   000000F6   308C               CPI     R24, 12
   \   000000F8   E010               LDI     R17, 0
   \   000000FA   0791               CPC     R25, R17
   \   000000FC   F00C               BRLT    $+2+2
   \   000000FE   C04E               RJMP    ??BuildMDataANA_1
    604                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Status[i] ;
   \   00000100   01FC               MOVW    R31:R30, R25:R24
   \   00000102   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000104   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000106   8516               LDD     R17, Z+14
   \   00000108   E14A               LDI     R20, 26
   \   0000010A   9F04               MUL     R16, R20
   \   0000010C   01F0               MOVW    R31:R30, R1:R0
   \   0000010E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000110   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000112   8140               LD      R20, Z
   \   00000114   8151               LDD     R21, Z+1
   \   00000116   E16A               LDI     R22, 26
   \   00000118   9F06               MUL     R16, R22
   \   0000011A   01F0               MOVW    R31:R30, R1:R0
   \   0000011C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000011E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000120   8162               LDD     R22, Z+2
   \   00000122   8173               LDD     R23, Z+3
   \   00000124   01FA               MOVW    R31:R30, R21:R20
   \   00000126   0FE6               ADD     R30, R22
   \   00000128   1FF7               ADC     R31, R23
   \   0000012A   8310               ST      Z, R17
   \   0000012C   E11A               LDI     R17, 26
   \   0000012E   9F01               MUL     R16, R17
   \   00000130   01F0               MOVW    R31:R30, R1:R0
   \   00000132   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000134   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000136   8142               LDD     R20, Z+2
   \   00000138   8153               LDD     R21, Z+3
   \   0000013A   5F4F               SUBI    R20, 255
   \   0000013C   4F5F               SBCI    R21, 255
   \   0000013E   8342               STD     Z+2, R20
   \   00000140   8353               STD     Z+3, R21
    605                  *((float*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float*)&TData.Ana.Result[i]) ;   // ADresult
   \   00000142   01FC               MOVW    R31:R30, R25:R24
   \   00000144   0FEE               LSL     R30
   \   00000146   1FFF               ROL     R31
   \   00000148   0FEE               LSL     R30
   \   0000014A   1FFF               ROL     R31
   \   0000014C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000014E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000150   8D42               LDD     R20, Z+26
   \   00000152   8D53               LDD     R21, Z+27
   \   00000154   8D64               LDD     R22, Z+28
   \   00000156   8D75               LDD     R23, Z+29
   \   00000158   E11A               LDI     R17, 26
   \   0000015A   9F01               MUL     R16, R17
   \   0000015C   01F0               MOVW    R31:R30, R1:R0
   \   0000015E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000160   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000162   81A0               LD      R26, Z
   \   00000164   81B1               LDD     R27, Z+1
   \   00000166   E11A               LDI     R17, 26
   \   00000168   9F01               MUL     R16, R17
   \   0000016A   01F0               MOVW    R31:R30, R1:R0
   \   0000016C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000016E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000170   8002               LDD     R0, Z+2
   \   00000172   8013               LDD     R1, Z+3
   \   00000174   01FD               MOVW    R31:R30, R27:R26
   \   00000176   0DE0               ADD     R30, R0
   \   00000178   1DF1               ADC     R31, R1
   \   0000017A   8340               ST      Z, R20
   \   0000017C   8351               STD     Z+1, R21
   \   0000017E   8362               STD     Z+2, R22
   \   00000180   8373               STD     Z+3, R23
    606                  UART[ch].TxFirst += sizeof(float) ;
   \   00000182   E11A               LDI     R17, 26
   \   00000184   9F01               MUL     R16, R17
   \   00000186   01F0               MOVW    R31:R30, R1:R0
   \   00000188   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000018A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000018C   8142               LDD     R20, Z+2
   \   0000018E   8153               LDD     R21, Z+3
   \   00000190   5F4C               SUBI    R20, 252
   \   00000192   4F5F               SBCI    R21, 255
   \   00000194   8342               STD     Z+2, R20
   \   00000196   8353               STD     Z+3, R21
    607              }
   \   00000198   9601               ADIW    R25:R24, 1
   \   0000019A   CFAD               RJMP    ??BuildMDataANA_0
    608          
    609              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??BuildMDataANA_1:
   \   0000019C   E11A               LDI     R17, 26
   \   0000019E   9F01               MUL     R16, R17
   \   000001A0   01F0               MOVW    R31:R30, R1:R0
   \   000001A2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001A4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001A6   8162               LDD     R22, Z+2
   \   000001A8   8173               LDD     R23, Z+3
   \   000001AA   1B62               SUB     R22, R18
   \   000001AC   5062               SUBI    R22, 2
   \   000001AE   E11A               LDI     R17, 26
   \   000001B0   9F01               MUL     R16, R17
   \   000001B2   01F0               MOVW    R31:R30, R1:R0
   \   000001B4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001B6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001B8   8140               LD      R20, Z
   \   000001BA   8151               LDD     R21, Z+1
   \   000001BC   01FA               MOVW    R31:R30, R21:R20
   \   000001BE   0FE2               ADD     R30, R18
   \   000001C0   1FF3               ADC     R31, R19
   \   000001C2   8360               ST      Z, R22
    610              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000001C4   E11A               LDI     R17, 26
   \   000001C6   9F01               MUL     R16, R17
   \   000001C8   01F0               MOVW    R31:R30, R1:R0
   \   000001CA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001CC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001CE   8142               LDD     R20, Z+2
   \   000001D0   8153               LDD     R21, Z+3
   \   000001D2   1B42               SUB     R20, R18
   \   000001D4   0B53               SBC     R21, R19
   \   000001D6   5042               SUBI    R20, 2
   \   000001D8   4050               SBCI    R21, 0
   \   000001DA   2F45               MOV     R20, R21
   \   000001DC   E050               LDI     R21, 0
   \   000001DE   2F14               MOV     R17, R20
   \   000001E0   E14A               LDI     R20, 26
   \   000001E2   9F04               MUL     R16, R20
   \   000001E4   01F0               MOVW    R31:R30, R1:R0
   \   000001E6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001EA   8140               LD      R20, Z
   \   000001EC   8151               LDD     R21, Z+1
   \   000001EE   0F42               ADD     R20, R18
   \   000001F0   1F53               ADC     R21, R19
   \   000001F2   01FA               MOVW    R31:R30, R21:R20
   \   000001F4   8311               STD     Z+1, R17
    611          
    612          }
   \   000001F6   E0E4               LDI     R30, 4
   \   000001F8   ........           JMP     ?EPILOGUE_B4_L09
    613          
    614          /*************************************************************************
    615          *
    616          * Build datablock for Stack status
    617          *
    618          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    619          void BuildStackStatus(char ch, short pointer) {
   \                     BuildStackStatus:
   \   00000000   ........           CALL    ?PROLOGUE12_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004   2F80               MOV     R24, R16
   \   00000006   0159               MOVW    R11:R10, R19:R18
    620          
    621              short ntna, stack ;
    622              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000008   E001               LDI     R16, 1
   \   0000000A   E11A               LDI     R17, 26
   \   0000000C   9F81               MUL     R24, R17
   \   0000000E   01F0               MOVW    R31:R30, R1:R0
   \   00000010   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000014   8F01               STD     Z+25, R16
    623          
    624              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS & 0xff;
   \   00000016   E727               LDI     R18, 119
   \   00000018   E10A               LDI     R16, 26
   \   0000001A   9F80               MUL     R24, R16
   \   0000001C   01F0               MOVW    R31:R30, R1:R0
   \   0000001E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000020   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000022   8100               LD      R16, Z
   \   00000024   8111               LDD     R17, Z+1
   \   00000026   E13A               LDI     R19, 26
   \   00000028   9F83               MUL     R24, R19
   \   0000002A   01F0               MOVW    R31:R30, R1:R0
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   8142               LDD     R20, Z+2
   \   00000032   8153               LDD     R21, Z+3
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   0FE4               ADD     R30, R20
   \   00000038   1FF5               ADC     R31, R21
   \   0000003A   8320               ST      Z, R18
   \   0000003C   E10A               LDI     R16, 26
   \   0000003E   9F80               MUL     R24, R16
   \   00000040   01F0               MOVW    R31:R30, R1:R0
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   5F0F               SUBI    R16, 255
   \   0000004C   4F1F               SBCI    R17, 255
   \   0000004E   8302               STD     Z+2, R16
   \   00000050   8313               STD     Z+3, R17
    625              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS >> 8;
   \   00000052   E027               LDI     R18, 7
   \   00000054   E10A               LDI     R16, 26
   \   00000056   9F80               MUL     R24, R16
   \   00000058   01F0               MOVW    R31:R30, R1:R0
   \   0000005A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005E   8100               LD      R16, Z
   \   00000060   8111               LDD     R17, Z+1
   \   00000062   E13A               LDI     R19, 26
   \   00000064   9F83               MUL     R24, R19
   \   00000066   01F0               MOVW    R31:R30, R1:R0
   \   00000068   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000006A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000006C   8142               LDD     R20, Z+2
   \   0000006E   8153               LDD     R21, Z+3
   \   00000070   01F8               MOVW    R31:R30, R17:R16
   \   00000072   0FE4               ADD     R30, R20
   \   00000074   1FF5               ADC     R31, R21
   \   00000076   8320               ST      Z, R18
   \   00000078   E10A               LDI     R16, 26
   \   0000007A   9F80               MUL     R24, R16
   \   0000007C   01F0               MOVW    R31:R30, R1:R0
   \   0000007E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000082   8102               LDD     R16, Z+2
   \   00000084   8113               LDD     R17, Z+3
   \   00000086   5F0F               SUBI    R16, 255
   \   00000088   4F1F               SBCI    R17, 255
   \   0000008A   8302               STD     Z+2, R16
   \   0000008C   8313               STD     Z+3, R17
    626              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000008E   E10A               LDI     R16, 26
   \   00000090   9F80               MUL     R24, R16
   \   00000092   01F0               MOVW    R31:R30, R1:R0
   \   00000094   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000096   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000098   8082               LDD     R8, Z+2
   \   0000009A   8093               LDD     R9, Z+3
    627              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000009C   E10A               LDI     R16, 26
   \   0000009E   9F80               MUL     R24, R16
   \   000000A0   01F0               MOVW    R31:R30, R1:R0
   \   000000A2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A6   8102               LDD     R16, Z+2
   \   000000A8   8113               LDD     R17, Z+3
   \   000000AA   5F0E               SUBI    R16, 254
   \   000000AC   4F1F               SBCI    R17, 255
   \   000000AE   8302               STD     Z+2, R16
   \   000000B0   8313               STD     Z+3, R17
    628          
    629              stack = OS_GetStackSpace(&TCB_USART0);                            // USART 0
   \   000000B2   ....               LDI     R16, LOW(TCB_USART0)
   \   000000B4   ....               LDI     R17, (TCB_USART0) >> 8
   \   000000B6   ........           CALL    OS_GetStackSpace
   \   000000BA   0138               MOVW    R7:R6, R17:R16
    630              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   000000BC   E10A               LDI     R16, 26
   \   000000BE   9F80               MUL     R24, R16
   \   000000C0   01F0               MOVW    R31:R30, R1:R0
   \   000000C2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000C4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000C6   8100               LD      R16, Z
   \   000000C8   8111               LDD     R17, Z+1
   \   000000CA   E12A               LDI     R18, 26
   \   000000CC   9F82               MUL     R24, R18
   \   000000CE   01F0               MOVW    R31:R30, R1:R0
   \   000000D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D4   8122               LDD     R18, Z+2
   \   000000D6   8133               LDD     R19, Z+3
   \   000000D8   01F8               MOVW    R31:R30, R17:R16
   \   000000DA   0FE2               ADD     R30, R18
   \   000000DC   1FF3               ADC     R31, R19
   \   000000DE   8260               ST      Z, R6
   \   000000E0   E10A               LDI     R16, 26
   \   000000E2   9F80               MUL     R24, R16
   \   000000E4   01F0               MOVW    R31:R30, R1:R0
   \   000000E6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000E8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000EA   8102               LDD     R16, Z+2
   \   000000EC   8113               LDD     R17, Z+3
   \   000000EE   5F0F               SUBI    R16, 255
   \   000000F0   4F1F               SBCI    R17, 255
   \   000000F2   8302               STD     Z+2, R16
   \   000000F4   8313               STD     Z+3, R17
    631              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   000000F6   0183               MOVW    R17:R16, R7:R6
   \   000000F8   2F01               MOV     R16, R17
   \   000000FA   0F11               LSL     R17
   \   000000FC   0B11               SBC     R17, R17
   \   000000FE   2F20               MOV     R18, R16
   \   00000100   E10A               LDI     R16, 26
   \   00000102   9F80               MUL     R24, R16
   \   00000104   01F0               MOVW    R31:R30, R1:R0
   \   00000106   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000108   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010A   8100               LD      R16, Z
   \   0000010C   8111               LDD     R17, Z+1
   \   0000010E   E13A               LDI     R19, 26
   \   00000110   9F83               MUL     R24, R19
   \   00000112   01F0               MOVW    R31:R30, R1:R0
   \   00000114   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000116   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000118   8142               LDD     R20, Z+2
   \   0000011A   8153               LDD     R21, Z+3
   \   0000011C   01F8               MOVW    R31:R30, R17:R16
   \   0000011E   0FE4               ADD     R30, R20
   \   00000120   1FF5               ADC     R31, R21
   \   00000122   8320               ST      Z, R18
   \   00000124   E10A               LDI     R16, 26
   \   00000126   9F80               MUL     R24, R16
   \   00000128   01F0               MOVW    R31:R30, R1:R0
   \   0000012A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000012C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000012E   8102               LDD     R16, Z+2
   \   00000130   8113               LDD     R17, Z+3
   \   00000132   5F0F               SUBI    R16, 255
   \   00000134   4F1F               SBCI    R17, 255
   \   00000136   8302               STD     Z+2, R16
   \   00000138   8313               STD     Z+3, R17
    632              stack = OS_GetStackSpace(&TCB_USART1);                            // USART 1
   \   0000013A   ....               LDI     R16, LOW(TCB_USART1)
   \   0000013C   ....               LDI     R17, (TCB_USART1) >> 8
   \   0000013E   ........           CALL    OS_GetStackSpace
   \   00000142   01D8               MOVW    R27:R26, R17:R16
    633              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   00000144   E10A               LDI     R16, 26
   \   00000146   9F80               MUL     R24, R16
   \   00000148   01F0               MOVW    R31:R30, R1:R0
   \   0000014A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000014C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000014E   8100               LD      R16, Z
   \   00000150   8111               LDD     R17, Z+1
   \   00000152   E12A               LDI     R18, 26
   \   00000154   9F82               MUL     R24, R18
   \   00000156   01F0               MOVW    R31:R30, R1:R0
   \   00000158   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000015A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000015C   8122               LDD     R18, Z+2
   \   0000015E   8133               LDD     R19, Z+3
   \   00000160   01F8               MOVW    R31:R30, R17:R16
   \   00000162   0FE2               ADD     R30, R18
   \   00000164   1FF3               ADC     R31, R19
   \   00000166   83A0               ST      Z, R26
   \   00000168   E10A               LDI     R16, 26
   \   0000016A   9F80               MUL     R24, R16
   \   0000016C   01F0               MOVW    R31:R30, R1:R0
   \   0000016E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000170   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000172   8102               LDD     R16, Z+2
   \   00000174   8113               LDD     R17, Z+3
   \   00000176   5F0F               SUBI    R16, 255
   \   00000178   4F1F               SBCI    R17, 255
   \   0000017A   8302               STD     Z+2, R16
   \   0000017C   8313               STD     Z+3, R17
    634              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   0000017E   019D               MOVW    R19:R18, R27:R26
   \   00000180   2F23               MOV     R18, R19
   \   00000182   0F33               LSL     R19
   \   00000184   0B33               SBC     R19, R19
   \   00000186   E10A               LDI     R16, 26
   \   00000188   9F80               MUL     R24, R16
   \   0000018A   01F0               MOVW    R31:R30, R1:R0
   \   0000018C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000018E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000190   8100               LD      R16, Z
   \   00000192   8111               LDD     R17, Z+1
   \   00000194   E13A               LDI     R19, 26
   \   00000196   9F83               MUL     R24, R19
   \   00000198   01F0               MOVW    R31:R30, R1:R0
   \   0000019A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000019C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000019E   8142               LDD     R20, Z+2
   \   000001A0   8153               LDD     R21, Z+3
   \   000001A2   01F8               MOVW    R31:R30, R17:R16
   \   000001A4   0FE4               ADD     R30, R20
   \   000001A6   1FF5               ADC     R31, R21
   \   000001A8   8320               ST      Z, R18
   \   000001AA   E10A               LDI     R16, 26
   \   000001AC   9F80               MUL     R24, R16
   \   000001AE   01F0               MOVW    R31:R30, R1:R0
   \   000001B0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001B2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001B4   8102               LDD     R16, Z+2
   \   000001B6   8113               LDD     R17, Z+3
   \   000001B8   5F0F               SUBI    R16, 255
   \   000001BA   4F1F               SBCI    R17, 255
   \   000001BC   8302               STD     Z+2, R16
   \   000001BE   8313               STD     Z+3, R17
    635              stack = OS_GetStackSpace(&TCB_WATCHDOG);                            // watchdog
   \   000001C0   ....               LDI     R16, LOW(TCB_WATCHDOG)
   \   000001C2   ....               LDI     R17, (TCB_WATCHDOG) >> 8
   \   000001C4   ........           CALL    OS_GetStackSpace
   \   000001C8   0128               MOVW    R5:R4, R17:R16
    636              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   000001CA   E10A               LDI     R16, 26
   \   000001CC   9F80               MUL     R24, R16
   \   000001CE   01F0               MOVW    R31:R30, R1:R0
   \   000001D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001D4   8100               LD      R16, Z
   \   000001D6   8111               LDD     R17, Z+1
   \   000001D8   E12A               LDI     R18, 26
   \   000001DA   9F82               MUL     R24, R18
   \   000001DC   01F0               MOVW    R31:R30, R1:R0
   \   000001DE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E2   8122               LDD     R18, Z+2
   \   000001E4   8133               LDD     R19, Z+3
   \   000001E6   01F8               MOVW    R31:R30, R17:R16
   \   000001E8   0FE2               ADD     R30, R18
   \   000001EA   1FF3               ADC     R31, R19
   \   000001EC   8240               ST      Z, R4
   \   000001EE   E10A               LDI     R16, 26
   \   000001F0   9F80               MUL     R24, R16
   \   000001F2   01F0               MOVW    R31:R30, R1:R0
   \   000001F4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001F6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001F8   8102               LDD     R16, Z+2
   \   000001FA   8113               LDD     R17, Z+3
   \   000001FC   5F0F               SUBI    R16, 255
   \   000001FE   4F1F               SBCI    R17, 255
   \   00000200   8302               STD     Z+2, R16
   \   00000202   8313               STD     Z+3, R17
    637              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   00000204   01A2               MOVW    R21:R20, R5:R4
   \   00000206   2F45               MOV     R20, R21
   \   00000208   0F55               LSL     R21
   \   0000020A   0B55               SBC     R21, R21
   \   0000020C   E10A               LDI     R16, 26
   \   0000020E   9F80               MUL     R24, R16
   \   00000210   01F0               MOVW    R31:R30, R1:R0
   \   00000212   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000214   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000216   8100               LD      R16, Z
   \   00000218   8111               LDD     R17, Z+1
   \   0000021A   E12A               LDI     R18, 26
   \   0000021C   9F82               MUL     R24, R18
   \   0000021E   01F0               MOVW    R31:R30, R1:R0
   \   00000220   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000222   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000224   8122               LDD     R18, Z+2
   \   00000226   8133               LDD     R19, Z+3
   \   00000228   01F8               MOVW    R31:R30, R17:R16
   \   0000022A   0FE2               ADD     R30, R18
   \   0000022C   1FF3               ADC     R31, R19
   \   0000022E   8340               ST      Z, R20
   \   00000230   E10A               LDI     R16, 26
   \   00000232   9F80               MUL     R24, R16
   \   00000234   01F0               MOVW    R31:R30, R1:R0
   \   00000236   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000238   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000023A   8102               LDD     R16, Z+2
   \   0000023C   8113               LDD     R17, Z+3
   \   0000023E   5F0F               SUBI    R16, 255
   \   00000240   4F1F               SBCI    R17, 255
   \   00000242   8302               STD     Z+2, R16
   \   00000244   8313               STD     Z+3, R17
    638              switch (UnitID) {
   \   00000246   9100....           LDS     R16, UnitID
   \   0000024A   5000               SUBI    R16, 0
   \   0000024C   F021               BREQ    ??BuildStackStatus_0
   \   0000024E   950A               DEC     R16
   \   00000250   F409               BRNE    $+2+2
   \   00000252   C088               RJMP    ??BuildStackStatus_1
   \   00000254   C107               RJMP    ??BuildStackStatus_2
    639              case AN_ZB485 :
    640                  stack = OS_GetStackSpace(&TCB_RS485Ctl);                            // RS485 Control
   \                     ??BuildStackStatus_0:
   \   00000256   ....               LDI     R16, LOW(TCB_RS485Ctl)
   \   00000258   ....               LDI     R17, (TCB_RS485Ctl) >> 8
   \   0000025A   ........           CALL    OS_GetStackSpace
   \   0000025E   01D8               MOVW    R27:R26, R17:R16
    641                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   00000260   E10A               LDI     R16, 26
   \   00000262   9F80               MUL     R24, R16
   \   00000264   01F0               MOVW    R31:R30, R1:R0
   \   00000266   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000268   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000026A   8100               LD      R16, Z
   \   0000026C   8111               LDD     R17, Z+1
   \   0000026E   E12A               LDI     R18, 26
   \   00000270   9F82               MUL     R24, R18
   \   00000272   01F0               MOVW    R31:R30, R1:R0
   \   00000274   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000276   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000278   8122               LDD     R18, Z+2
   \   0000027A   8133               LDD     R19, Z+3
   \   0000027C   01F8               MOVW    R31:R30, R17:R16
   \   0000027E   0FE2               ADD     R30, R18
   \   00000280   1FF3               ADC     R31, R19
   \   00000282   83A0               ST      Z, R26
   \   00000284   E10A               LDI     R16, 26
   \   00000286   9F80               MUL     R24, R16
   \   00000288   01F0               MOVW    R31:R30, R1:R0
   \   0000028A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000028C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000028E   8102               LDD     R16, Z+2
   \   00000290   8113               LDD     R17, Z+3
   \   00000292   5F0F               SUBI    R16, 255
   \   00000294   4F1F               SBCI    R17, 255
   \   00000296   8302               STD     Z+2, R16
   \   00000298   8313               STD     Z+3, R17
    642                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   0000029A   019D               MOVW    R19:R18, R27:R26
   \   0000029C   2F23               MOV     R18, R19
   \   0000029E   0F33               LSL     R19
   \   000002A0   0B33               SBC     R19, R19
   \   000002A2   E10A               LDI     R16, 26
   \   000002A4   9F80               MUL     R24, R16
   \   000002A6   01F0               MOVW    R31:R30, R1:R0
   \   000002A8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002AA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002AC   8100               LD      R16, Z
   \   000002AE   8111               LDD     R17, Z+1
   \   000002B0   E13A               LDI     R19, 26
   \   000002B2   9F83               MUL     R24, R19
   \   000002B4   01F0               MOVW    R31:R30, R1:R0
   \   000002B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002BA   8142               LDD     R20, Z+2
   \   000002BC   8153               LDD     R21, Z+3
   \   000002BE   01F8               MOVW    R31:R30, R17:R16
   \   000002C0   0FE4               ADD     R30, R20
   \   000002C2   1FF5               ADC     R31, R21
   \   000002C4   8320               ST      Z, R18
   \   000002C6   E10A               LDI     R16, 26
   \   000002C8   9F80               MUL     R24, R16
   \   000002CA   01F0               MOVW    R31:R30, R1:R0
   \   000002CC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002CE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002D0   8102               LDD     R16, Z+2
   \   000002D2   8113               LDD     R17, Z+3
   \   000002D4   5F0F               SUBI    R16, 255
   \   000002D6   4F1F               SBCI    R17, 255
   \   000002D8   8302               STD     Z+2, R16
   \   000002DA   8313               STD     Z+3, R17
    643                  stack = OS_GetStackSpace(&TCB_RS485Rec);                            // RS485 receive
   \   000002DC   ....               LDI     R16, LOW(TCB_RS485Rec)
   \   000002DE   ....               LDI     R17, (TCB_RS485Rec) >> 8
   \   000002E0   ........           CALL    OS_GetStackSpace
   \   000002E4   0128               MOVW    R5:R4, R17:R16
    644                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   000002E6   E10A               LDI     R16, 26
   \   000002E8   9F80               MUL     R24, R16
   \   000002EA   01F0               MOVW    R31:R30, R1:R0
   \   000002EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002F0   8100               LD      R16, Z
   \   000002F2   8111               LDD     R17, Z+1
   \   000002F4   E12A               LDI     R18, 26
   \   000002F6   9F82               MUL     R24, R18
   \   000002F8   01F0               MOVW    R31:R30, R1:R0
   \   000002FA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002FC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002FE   8122               LDD     R18, Z+2
   \   00000300   8133               LDD     R19, Z+3
   \   00000302   01F8               MOVW    R31:R30, R17:R16
   \   00000304   0FE2               ADD     R30, R18
   \   00000306   1FF3               ADC     R31, R19
   \   00000308   8240               ST      Z, R4
   \   0000030A   E10A               LDI     R16, 26
   \   0000030C   9F80               MUL     R24, R16
   \   0000030E   01F0               MOVW    R31:R30, R1:R0
   \   00000310   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000312   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000314   8102               LDD     R16, Z+2
   \   00000316   8113               LDD     R17, Z+3
   \   00000318   5F0F               SUBI    R16, 255
   \   0000031A   4F1F               SBCI    R17, 255
   \   0000031C   8302               STD     Z+2, R16
   \   0000031E   8313               STD     Z+3, R17
    645                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   00000320   0192               MOVW    R19:R18, R5:R4
   \   00000322   2F23               MOV     R18, R19
   \   00000324   0F33               LSL     R19
   \   00000326   0B33               SBC     R19, R19
   \   00000328   E10A               LDI     R16, 26
   \   0000032A   9F80               MUL     R24, R16
   \   0000032C   01F0               MOVW    R31:R30, R1:R0
   \   0000032E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000330   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000332   8100               LD      R16, Z
   \   00000334   8111               LDD     R17, Z+1
   \   00000336   E13A               LDI     R19, 26
   \   00000338   9F83               MUL     R24, R19
   \   0000033A   01F0               MOVW    R31:R30, R1:R0
   \   0000033C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000033E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000340   8142               LDD     R20, Z+2
   \   00000342   8153               LDD     R21, Z+3
   \   00000344   01F8               MOVW    R31:R30, R17:R16
   \   00000346   0FE4               ADD     R30, R20
   \   00000348   1FF5               ADC     R31, R21
   \   0000034A   8320               ST      Z, R18
   \   0000034C   E10A               LDI     R16, 26
   \   0000034E   9F80               MUL     R24, R16
   \   00000350   01F0               MOVW    R31:R30, R1:R0
   \   00000352   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000354   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000356   8102               LDD     R16, Z+2
   \   00000358   8113               LDD     R17, Z+3
   \   0000035A   5F0F               SUBI    R16, 255
   \   0000035C   4F1F               SBCI    R17, 255
   \   0000035E   8302               STD     Z+2, R16
   \   00000360   8313               STD     Z+3, R17
    646                  break;
   \   00000362   C080               RJMP    ??BuildStackStatus_2
    647              case AN_ZBANA :
    648                  stack = OS_GetStackSpace(&TCB_AD7715);                            // AD handling
   \                     ??BuildStackStatus_1:
   \   00000364   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000366   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000368   ........           CALL    OS_GetStackSpace
   \   0000036C   0128               MOVW    R5:R4, R17:R16
    649                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   0000036E   E10A               LDI     R16, 26
   \   00000370   9F80               MUL     R24, R16
   \   00000372   01F0               MOVW    R31:R30, R1:R0
   \   00000374   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000376   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000378   8100               LD      R16, Z
   \   0000037A   8111               LDD     R17, Z+1
   \   0000037C   E12A               LDI     R18, 26
   \   0000037E   9F82               MUL     R24, R18
   \   00000380   01F0               MOVW    R31:R30, R1:R0
   \   00000382   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000384   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000386   8122               LDD     R18, Z+2
   \   00000388   8133               LDD     R19, Z+3
   \   0000038A   01F8               MOVW    R31:R30, R17:R16
   \   0000038C   0FE2               ADD     R30, R18
   \   0000038E   1FF3               ADC     R31, R19
   \   00000390   8240               ST      Z, R4
   \   00000392   E10A               LDI     R16, 26
   \   00000394   9F80               MUL     R24, R16
   \   00000396   01F0               MOVW    R31:R30, R1:R0
   \   00000398   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000039A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000039C   8102               LDD     R16, Z+2
   \   0000039E   8113               LDD     R17, Z+3
   \   000003A0   5F0F               SUBI    R16, 255
   \   000003A2   4F1F               SBCI    R17, 255
   \   000003A4   8302               STD     Z+2, R16
   \   000003A6   8313               STD     Z+3, R17
    650                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   000003A8   0182               MOVW    R17:R16, R5:R4
   \   000003AA   2F01               MOV     R16, R17
   \   000003AC   0F11               LSL     R17
   \   000003AE   0B11               SBC     R17, R17
   \   000003B0   2F20               MOV     R18, R16
   \   000003B2   E10A               LDI     R16, 26
   \   000003B4   9F80               MUL     R24, R16
   \   000003B6   01F0               MOVW    R31:R30, R1:R0
   \   000003B8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003BA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003BC   8100               LD      R16, Z
   \   000003BE   8111               LDD     R17, Z+1
   \   000003C0   E13A               LDI     R19, 26
   \   000003C2   9F83               MUL     R24, R19
   \   000003C4   01F0               MOVW    R31:R30, R1:R0
   \   000003C6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003C8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003CA   8142               LDD     R20, Z+2
   \   000003CC   8153               LDD     R21, Z+3
   \   000003CE   01F8               MOVW    R31:R30, R17:R16
   \   000003D0   0FE4               ADD     R30, R20
   \   000003D2   1FF5               ADC     R31, R21
   \   000003D4   8320               ST      Z, R18
   \   000003D6   E10A               LDI     R16, 26
   \   000003D8   9F80               MUL     R24, R16
   \   000003DA   01F0               MOVW    R31:R30, R1:R0
   \   000003DC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003DE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003E0   8102               LDD     R16, Z+2
   \   000003E2   8113               LDD     R17, Z+3
   \   000003E4   5F0F               SUBI    R16, 255
   \   000003E6   4F1F               SBCI    R17, 255
   \   000003E8   8302               STD     Z+2, R16
   \   000003EA   8313               STD     Z+3, R17
    651                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
   \   000003EC   E10A               LDI     R16, 26
   \   000003EE   9F80               MUL     R24, R16
   \   000003F0   01F0               MOVW    R31:R30, R1:R0
   \   000003F2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003F4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003F6   8100               LD      R16, Z
   \   000003F8   8111               LDD     R17, Z+1
   \   000003FA   E12A               LDI     R18, 26
   \   000003FC   9F82               MUL     R24, R18
   \   000003FE   01F0               MOVW    R31:R30, R1:R0
   \   00000400   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000402   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000404   8122               LDD     R18, Z+2
   \   00000406   8133               LDD     R19, Z+3
   \   00000408   01F8               MOVW    R31:R30, R17:R16
   \   0000040A   0FE2               ADD     R30, R18
   \   0000040C   1FF3               ADC     R31, R19
   \   0000040E   E000               LDI     R16, 0
   \   00000410   8300               ST      Z, R16
   \   00000412   E10A               LDI     R16, 26
   \   00000414   9F80               MUL     R24, R16
   \   00000416   01F0               MOVW    R31:R30, R1:R0
   \   00000418   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000041A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000041C   8102               LDD     R16, Z+2
   \   0000041E   8113               LDD     R17, Z+3
   \   00000420   5F0F               SUBI    R16, 255
   \   00000422   4F1F               SBCI    R17, 255
   \   00000424   8302               STD     Z+2, R16
   \   00000426   8313               STD     Z+3, R17
    652                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
   \   00000428   E10A               LDI     R16, 26
   \   0000042A   9F80               MUL     R24, R16
   \   0000042C   01F0               MOVW    R31:R30, R1:R0
   \   0000042E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000430   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000432   8100               LD      R16, Z
   \   00000434   8111               LDD     R17, Z+1
   \   00000436   E12A               LDI     R18, 26
   \   00000438   9F82               MUL     R24, R18
   \   0000043A   01F0               MOVW    R31:R30, R1:R0
   \   0000043C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000043E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000440   8122               LDD     R18, Z+2
   \   00000442   8133               LDD     R19, Z+3
   \   00000444   01F8               MOVW    R31:R30, R17:R16
   \   00000446   0FE2               ADD     R30, R18
   \   00000448   1FF3               ADC     R31, R19
   \   0000044A   E000               LDI     R16, 0
   \   0000044C   8300               ST      Z, R16
   \   0000044E   E10A               LDI     R16, 26
   \   00000450   9F80               MUL     R24, R16
   \   00000452   01F0               MOVW    R31:R30, R1:R0
   \   00000454   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000456   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000458   8102               LDD     R16, Z+2
   \   0000045A   8113               LDD     R17, Z+3
   \   0000045C   5F0F               SUBI    R16, 255
   \   0000045E   4F1F               SBCI    R17, 255
   \   00000460   8302               STD     Z+2, R16
   \   00000462   8313               STD     Z+3, R17
    653                  break;
    654              }
    655          
    656              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??BuildStackStatus_2:
   \   00000464   E10A               LDI     R16, 26
   \   00000466   9F80               MUL     R24, R16
   \   00000468   01F0               MOVW    R31:R30, R1:R0
   \   0000046A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000046C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000046E   8122               LDD     R18, Z+2
   \   00000470   8133               LDD     R19, Z+3
   \   00000472   1928               SUB     R18, R8
   \   00000474   5022               SUBI    R18, 2
   \   00000476   E10A               LDI     R16, 26
   \   00000478   9F80               MUL     R24, R16
   \   0000047A   01F0               MOVW    R31:R30, R1:R0
   \   0000047C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000047E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000480   8100               LD      R16, Z
   \   00000482   8111               LDD     R17, Z+1
   \   00000484   01F8               MOVW    R31:R30, R17:R16
   \   00000486   0DE8               ADD     R30, R8
   \   00000488   1DF9               ADC     R31, R9
   \   0000048A   8320               ST      Z, R18
    657              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   0000048C   E10A               LDI     R16, 26
   \   0000048E   9F80               MUL     R24, R16
   \   00000490   01F0               MOVW    R31:R30, R1:R0
   \   00000492   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000494   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000496   8102               LDD     R16, Z+2
   \   00000498   8113               LDD     R17, Z+3
   \   0000049A   1908               SUB     R16, R8
   \   0000049C   0919               SBC     R17, R9
   \   0000049E   5002               SUBI    R16, 2
   \   000004A0   4010               SBCI    R17, 0
   \   000004A2   2F01               MOV     R16, R17
   \   000004A4   E010               LDI     R17, 0
   \   000004A6   2F20               MOV     R18, R16
   \   000004A8   E10A               LDI     R16, 26
   \   000004AA   9F80               MUL     R24, R16
   \   000004AC   01F0               MOVW    R31:R30, R1:R0
   \   000004AE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004B0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004B2   8100               LD      R16, Z
   \   000004B4   8111               LDD     R17, Z+1
   \   000004B6   0D08               ADD     R16, R8
   \   000004B8   1D19               ADC     R17, R9
   \   000004BA   01F8               MOVW    R31:R30, R17:R16
   \   000004BC   8321               STD     Z+1, R18
    658          
    659          }
   \   000004BE   E0EC               LDI     R30, 12
   \   000004C0   ........           JMP     ?EPILOGUE_B12_L09
    660          
    661          //////////////////////////////////////////////////////////////////////////////
    662          // Receiving data to IO module here
    663          /////////////////////////////////////////////////////////////////////////////
    664          
    665          /*************************************************************************
    666          *
    667          * Receive Command to Reset the EEPROM
    668          *
    669          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    670          void GetResetEEPROM(char ch, short pointer) {
   \                     GetResetEEPROM:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    671          
    672              EEPROMReset();
   \   00000008   ........           CALL    EEPROMReset
    673          }
   \   0000000C   E0E3               LDI     R30, 3
   \   0000000E   ........           JMP     ?EPILOGUE_B3_L09
    674          
    675          
    676          /*************************************************************************
    677          *
    678          * Receive Command to go to the bootloader program
    679          *
    680          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    681          void GetGotoBootloader(char ch, short pointer) {
   \                     GetGotoBootloader:
    682          
    683          //    void (*BootApp)(void) = (void(*)())0xF000;
    684          
    685              // 128 -> 1281
    686              /*
    687              while ( (EECR & 1<<EEWE) != 0 ) //chech if EEPROM is ready
    688                  ;
    689              EEARL = (0x0fff & 0xff);
    690              EEARH = (0x0fff >> 8);
    691              EEDR = 0xff;
    692              EECR |= (1<<EEMWE);
    693              EECR |= (1<<EEWE);
    694              while (EECR & (1<<EEWE))
    695                  ;
    696              */
    697              while ( (EECR & 1<<EEPE) != 0 ) //chech if EEPROM is ready
   \                     ??GetGotoBootloader_0:
   \   00000000   99F9               SBIC    0x1F, 0x01
   \   00000002   CFFE               RJMP    ??GetGotoBootloader_0
    698                  ;
    699              EEARL = (0x0fff & 0xff);
   \   00000004   EF1F               LDI     R17, 255
   \   00000006   BD11               OUT     0x21, R17
    700              EEARH = (0x0fff >> 8);
   \   00000008   E01F               LDI     R17, 15
   \   0000000A   BD12               OUT     0x22, R17
    701              EEDR = 0xff;
   \   0000000C   EF1F               LDI     R17, 255
   \   0000000E   BD10               OUT     0x20, R17
    702              EECR |= (1<<EEMPE);
   \   00000010   9AFA               SBI     0x1F, 0x02
    703              EECR |= (1<<EEPE);
   \   00000012   9AF9               SBI     0x1F, 0x01
    704              while (EECR & (1<<EEPE))
   \                     ??GetGotoBootloader_1:
   \   00000014   9BF9               SBIS    0x1F, 0x01
   \   00000016   C004               RJMP    ??GetGotoBootloader_2
    705          
    706              // 128 -> 1281
    707              // WDTCR = 0x18;               //Start watchdog to genetate restart
    708              // WDTCR = 0x08;               //Start watchdog to genetate restart
    709              WDTCSR = 0x18;               //Start watchdog to genetate restart
   \   00000018   E118               LDI     R17, 24
   \   0000001A   93100060           STS     96, R17
   \   0000001E   CFFA               RJMP    ??GetGotoBootloader_1
    710              WDTCSR = 0x08;               //Start watchdog to genetate restart
   \                     ??GetGotoBootloader_2:
   \   00000020   E018               LDI     R17, 8
   \   00000022   93100060           STS     96, R17
    711          }
   \   00000026   9508               RET
   \   00000028                      REQUIRE _A_EECR
   \   00000028                      REQUIRE _A_EEAR
   \   00000028                      REQUIRE _A_EEDR
   \   00000028                      REQUIRE _A_WDTCSR
    712          
    713          /*************************************************************************
    714          *
    715          * Receive EEPROM data
    716          *
    717          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    718          void GetEEPROMData(char ch, short pointer) {
   \                     GetEEPROMData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2E70               MOV     R7, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    719          
    720            char channel;
    721            int t0;
    722          
    723              channel = UART[ch].pRxBuffer[pointer] ;
   \   00000008   E10A               LDI     R16, 26
   \   0000000A   9E70               MUL     R7, R16
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000012   8502               LDD     R16, Z+10
   \   00000014   8513               LDD     R17, Z+11
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   0FE8               ADD     R30, R24
   \   0000001A   1FF9               ADC     R31, R25
   \   0000001C   8060               LD      R6, Z
    724              if ((channel >= 0x80) && (UnitID == 0x01)) { // AN-ZBANA
   \   0000001E   E800               LDI     R16, 128
   \   00000020   1660               CP      R6, R16
   \   00000022   F1E0               BRCS    ??GetEEPROMData_0
   \   00000024   9100....           LDS     R16, UnitID
   \   00000028   3001               CPI     R16, 1
   \   0000002A   F5C1               BRNE    ??GetEEPROMData_0
    725                *((float*)&TData.Ana.Offset[channel & 0x0f]) = *((float*)&UART[ch].pRxBuffer[pointer+1]) ;  //offset
   \   0000002C   E10A               LDI     R16, 26
   \   0000002E   9E70               MUL     R7, R16
   \   00000030   01F0               MOVW    R31:R30, R1:R0
   \   00000032   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000034   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000036   8502               LDD     R16, Z+10
   \   00000038   8513               LDD     R17, Z+11
   \   0000003A   0F08               ADD     R16, R24
   \   0000003C   1F19               ADC     R17, R25
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   8101               LDD     R16, Z+1
   \   00000042   8112               LDD     R17, Z+2
   \   00000044   8123               LDD     R18, Z+3
   \   00000046   8134               LDD     R19, Z+4
   \   00000048   2DE6               MOV     R30, R6
   \   0000004A   E0F0               LDI     R31, 0
   \   0000004C   70EF               ANDI    R30, 0x0F
   \   0000004E   E0F0               LDI     R31, 0
   \   00000050   0FEE               LSL     R30
   \   00000052   1FFF               ROL     R31
   \   00000054   0FEE               LSL     R30
   \   00000056   1FFF               ROL     R31
   \   00000058   ....               SUBI    R30, LOW((-(TData + 98) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, HIGH((-(TData + 98) & 0xFFFF))
   \   0000005C   8300               ST      Z, R16
   \   0000005E   8311               STD     Z+1, R17
   \   00000060   8322               STD     Z+2, R18
   \   00000062   8333               STD     Z+3, R19
    726                *((float*)&TData.Ana.Gain[channel & 0x0f]) = *((float*)&UART[ch].pRxBuffer[pointer+5]) ;  //gain
   \   00000064   E10A               LDI     R16, 26
   \   00000066   9E70               MUL     R7, R16
   \   00000068   01F0               MOVW    R31:R30, R1:R0
   \   0000006A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000006E   8502               LDD     R16, Z+10
   \   00000070   8513               LDD     R17, Z+11
   \   00000072   0F08               ADD     R16, R24
   \   00000074   1F19               ADC     R17, R25
   \   00000076   01F8               MOVW    R31:R30, R17:R16
   \   00000078   8105               LDD     R16, Z+5
   \   0000007A   8116               LDD     R17, Z+6
   \   0000007C   8127               LDD     R18, Z+7
   \   0000007E   8530               LDD     R19, Z+8
   \   00000080   2DE6               MOV     R30, R6
   \   00000082   E0F0               LDI     R31, 0
   \   00000084   70EF               ANDI    R30, 0x0F
   \   00000086   E0F0               LDI     R31, 0
   \   00000088   0FEE               LSL     R30
   \   0000008A   1FFF               ROL     R31
   \   0000008C   0FEE               LSL     R30
   \   0000008E   1FFF               ROL     R31
   \   00000090   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   00000092   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   00000094   8300               ST      Z, R16
   \   00000096   8311               STD     Z+1, R17
   \   00000098   8322               STD     Z+2, R18
   \   0000009A   8333               STD     Z+3, R19
    727              }
    728              WriteEEPROMBuffer((channel * sizeof(float) * 2), sizeof(float), (char*)&UART[ch].pRxBuffer[pointer+1]);
   \                     ??GetEEPROMData_0:
   \   0000009C   E10A               LDI     R16, 26
   \   0000009E   9E70               MUL     R7, R16
   \   000000A0   01F0               MOVW    R31:R30, R1:R0
   \   000000A2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A6   8542               LDD     R20, Z+10
   \   000000A8   8553               LDD     R21, Z+11
   \   000000AA   0F48               ADD     R20, R24
   \   000000AC   1F59               ADC     R21, R25
   \   000000AE   5F4F               SUBI    R20, 255
   \   000000B0   4F5F               SBCI    R21, 255
   \   000000B2   E024               LDI     R18, 4
   \   000000B4   E008               LDI     R16, 8
   \   000000B6   9E60               MUL     R6, R16
   \   000000B8   0180               MOVW    R17:R16, R1:R0
   \   000000BA   ........           CALL    WriteEEPROMBuffer
    729              t0 = OS_GetTime();
   \   000000BE   ........           CALL    OS__Gettime
   \   000000C2   0128               MOVW    R5:R4, R17:R16
    730              do {
    731                OS_Delay(1);
   \                     ??GetEEPROMData_1:
   \   000000C4   E001               LDI     R16, 1
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   ........           CALL    OS_Delay
    732              }while ((OS_GetTime()-t0)< (sizeof(float)*9) && !EEPWriteOK);  //8.5 ms programming time
   \   000000CC   ........           CALL    OS__Gettime
   \   000000D0   1904               SUB     R16, R4
   \   000000D2   0915               SBC     R17, R5
   \   000000D4   3204               CPI     R16, 36
   \   000000D6   4010               SBCI    R17, 0
   \   000000D8   F420               BRCC    ??GetEEPROMData_2
   \   000000DA   9100....           LDS     R16, EEPWriteOK
   \   000000DE   2300               TST     R16
   \   000000E0   F389               BREQ    ??GetEEPROMData_1
    733              WriteEEPROMBuffer( (channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char*)&UART[ch].pRxBuffer[pointer+5]);
   \                     ??GetEEPROMData_2:
   \   000000E2   E10A               LDI     R16, 26
   \   000000E4   9E70               MUL     R7, R16
   \   000000E6   01F0               MOVW    R31:R30, R1:R0
   \   000000E8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000EC   8542               LDD     R20, Z+10
   \   000000EE   8553               LDD     R21, Z+11
   \   000000F0   0F48               ADD     R20, R24
   \   000000F2   1F59               ADC     R21, R25
   \   000000F4   5F4B               SUBI    R20, 251
   \   000000F6   4F5F               SBCI    R21, 255
   \   000000F8   E024               LDI     R18, 4
   \   000000FA   E008               LDI     R16, 8
   \   000000FC   9E60               MUL     R6, R16
   \   000000FE   E004               LDI     R16, 4
   \   00000100   0E00               ADD     R0, R16
   \   00000102   E000               LDI     R16, 0
   \   00000104   1E10               ADC     R1, R16
   \   00000106   0180               MOVW    R17:R16, R1:R0
   \   00000108   ........           CALL    WriteEEPROMBuffer
    734              t0 = OS_GetTime();
   \   0000010C   ........           CALL    OS__Gettime
   \   00000110   01D8               MOVW    R27:R26, R17:R16
    735              do {
    736                OS_Delay(1);
   \                     ??GetEEPROMData_3:
   \   00000112   E001               LDI     R16, 1
   \   00000114   E010               LDI     R17, 0
   \   00000116   ........           CALL    OS_Delay
    737              }while ((OS_GetTime()-t0)< (sizeof(float)*9) && !EEPWriteOK);
   \   0000011A   ........           CALL    OS__Gettime
   \   0000011E   1B0A               SUB     R16, R26
   \   00000120   0B1B               SBC     R17, R27
   \   00000122   3204               CPI     R16, 36
   \   00000124   4010               SBCI    R17, 0
   \   00000126   F420               BRCC    ??GetEEPROMData_4
   \   00000128   9100....           LDS     R16, EEPWriteOK
   \   0000012C   2300               TST     R16
   \   0000012E   F389               BREQ    ??GetEEPROMData_3
    738          }
   \                     ??GetEEPROMData_4:
   \   00000130   E0E8               LDI     R30, 8
   \   00000132   ........           JMP     ?EPILOGUE_B8_L09
    739          
    740          /*************************************************************************
    741          *
    742          * Receive AN-ZB485 setup
    743          *
    744          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    745          void GetRS4Setup(char ch, short pointer) {
   \                     GetRS4Setup:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    746          
    747              TData.RS4.PortUsed = UART[ch].pRxBuffer[pointer];           // Get the setup
   \   00000008   E10A               LDI     R16, 26
   \   0000000A   9FA0               MUL     R26, R16
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000012   8502               LDD     R16, Z+10
   \   00000014   8513               LDD     R17, Z+11
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   0FE8               ADD     R30, R24
   \   0000001A   1FF9               ADC     R31, R25
   \   0000001C   8100               LD      R16, Z
   \   0000001E   9300....           STS     TData, R16
    748              TData.RS4.SensorType[0] = UART[ch].pRxBuffer[pointer+1];       // Get the sensor type
   \   00000022   E10A               LDI     R16, 26
   \   00000024   9FA0               MUL     R26, R16
   \   00000026   01F0               MOVW    R31:R30, R1:R0
   \   00000028   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002C   8502               LDD     R16, Z+10
   \   0000002E   8513               LDD     R17, Z+11
   \   00000030   0F08               ADD     R16, R24
   \   00000032   1F19               ADC     R17, R25
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   8101               LDD     R16, Z+1
   \   00000038   9300....           STS     (TData + 1), R16
    749              TData.RS4.SensorType[1] = UART[ch].pRxBuffer[pointer+2];       // Get the sensor type
   \   0000003C   E10A               LDI     R16, 26
   \   0000003E   9FA0               MUL     R26, R16
   \   00000040   01F0               MOVW    R31:R30, R1:R0
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8502               LDD     R16, Z+10
   \   00000048   8513               LDD     R17, Z+11
   \   0000004A   0F08               ADD     R16, R24
   \   0000004C   1F19               ADC     R17, R25
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   8102               LDD     R16, Z+2
   \   00000052   9300....           STS     (TData + 2), R16
    750              WriteEEPROMByte(EEPROM_PORTSETUP, TData.RS4.PortUsed);      // store in EEPROM
   \   00000056   9120....           LDS     R18, TData
   \   0000005A   E002               LDI     R16, 2
   \   0000005C   E010               LDI     R17, 0
   \   0000005E   ........           CALL    WriteEEPROMByte
    751              WriteEEPROMByte(EEPROM_PORTSETUP+1, TData.RS4.SensorType[0]);
   \   00000062   9120....           LDS     R18, (TData + 1)
   \   00000066   E003               LDI     R16, 3
   \   00000068   E010               LDI     R17, 0
   \   0000006A   ........           CALL    WriteEEPROMByte
    752              WriteEEPROMByte(EEPROM_PORTSETUP+2, TData.RS4.SensorType[1]);
   \   0000006E   9120....           LDS     R18, (TData + 2)
   \   00000072   E004               LDI     R16, 4
   \   00000074   E010               LDI     R17, 0
   \   00000076   ........           CALL    WriteEEPROMByte
    753              SetRS4Port();                                               // Set power on ports
   \   0000007A   ........           CALL    SetRS4Port
    754          }
   \   0000007E   E0E3               LDI     R30, 3
   \   00000080   ........           JMP     ?EPILOGUE_B3_L09
    755          
    756          /*************************************************************************
    757          *
    758          * Rceive data fo AD card
    759          *
    760          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    761          void GetADData(char ch, short pointer) {
   \                     GetADData:
    762          
    763             char i, pair;
    764          
    765             if (UART[ch].pRxBuffer[pointer] <=3) {
   \   00000000   E11A               LDI     R17, 26
   \   00000002   9F01               MUL     R16, R17
   \   00000004   01F0               MOVW    R31:R30, R1:R0
   \   00000006   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000008   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000000A   8562               LDD     R22, Z+10
   \   0000000C   8573               LDD     R23, Z+11
   \   0000000E   01FB               MOVW    R31:R30, R23:R22
   \   00000010   0FE2               ADD     R30, R18
   \   00000012   1FF3               ADC     R31, R19
   \   00000014   8110               LD      R17, Z
   \   00000016   3014               CPI     R17, 4
   \   00000018   F410               BRCC    ??GetADData_0
    766               pair = 0;
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   C001               RJMP    ??GetADData_1
    767             } else {
    768               pair = 1;
   \                     ??GetADData_0:
   \   0000001E   E011               LDI     R17, 1
    769             }
    770             if (!TData.RS4.ToTargetBuffer[pair][0]) {                                // buffer empty?
   \                     ??GetADData_1:
   \   00000020   E550               LDI     R21, 80
   \   00000022   9F15               MUL     R17, R21
   \   00000024   01F0               MOVW    R31:R30, R1:R0
   \   00000026   ....               SUBI    R30, LOW((-(TData + 1268) & 0xFFFF))
   \   00000028   ....               SBCI    R31, HIGH((-(TData + 1268) & 0xFFFF))
   \   0000002A   8150               LD      R21, Z
   \   0000002C   2355               TST     R21
   \   0000002E   F009               BREQ    $+2+2
   \   00000030   C057               RJMP    ??GetADData_2
    771                TData.RS4.ToTargetBuffer[pair][0] = true;                            //  Availible data for AD card
   \   00000032   E051               LDI     R21, 1
   \   00000034   E560               LDI     R22, 80
   \   00000036   9F16               MUL     R17, R22
   \   00000038   01F0               MOVW    R31:R30, R1:R0
   \   0000003A   ....               SUBI    R30, LOW((-(TData + 1268) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, HIGH((-(TData + 1268) & 0xFFFF))
   \   0000003E   8350               ST      Z, R21
    772                TData.RS4.ToTargetBuffer[pair][1] = UART[ch].pRxBuffer[pointer++];   //  Channel to AD card
   \   00000040   E15A               LDI     R21, 26
   \   00000042   9F05               MUL     R16, R21
   \   00000044   01F0               MOVW    R31:R30, R1:R0
   \   00000046   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000004A   8562               LDD     R22, Z+10
   \   0000004C   8573               LDD     R23, Z+11
   \   0000004E   01FB               MOVW    R31:R30, R23:R22
   \   00000050   0FE2               ADD     R30, R18
   \   00000052   1FF3               ADC     R31, R19
   \   00000054   8150               LD      R21, Z
   \   00000056   E560               LDI     R22, 80
   \   00000058   9F16               MUL     R17, R22
   \   0000005A   01F0               MOVW    R31:R30, R1:R0
   \   0000005C   ....               SUBI    R30, LOW((-(TData + 1269) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, HIGH((-(TData + 1269) & 0xFFFF))
   \   00000060   8350               ST      Z, R21
   \   00000062   5F2F               SUBI    R18, 255
   \   00000064   4F3F               SBCI    R19, 255
    773                TData.RS4.ToTargetBuffer[pair][2] = UART[ch].pRxBuffer[pointer++];   // nob in datablock
   \   00000066   E15A               LDI     R21, 26
   \   00000068   9F05               MUL     R16, R21
   \   0000006A   01F0               MOVW    R31:R30, R1:R0
   \   0000006C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000070   8562               LDD     R22, Z+10
   \   00000072   8573               LDD     R23, Z+11
   \   00000074   01FB               MOVW    R31:R30, R23:R22
   \   00000076   0FE2               ADD     R30, R18
   \   00000078   1FF3               ADC     R31, R19
   \   0000007A   8150               LD      R21, Z
   \   0000007C   E560               LDI     R22, 80
   \   0000007E   9F16               MUL     R17, R22
   \   00000080   01F0               MOVW    R31:R30, R1:R0
   \   00000082   ....               SUBI    R30, LOW((-(TData + 1270) & 0xFFFF))
   \   00000084   ....               SBCI    R31, HIGH((-(TData + 1270) & 0xFFFF))
   \   00000086   8350               ST      Z, R21
   \   00000088   5F2F               SUBI    R18, 255
   \   0000008A   4F3F               SBCI    R19, 255
    774                for (i = 3; i < TData.RS4.ToTargetBuffer[pair][2] + 3; i++) {
   \   0000008C   E043               LDI     R20, 3
   \                     ??GetADData_3:
   \   0000008E   E050               LDI     R21, 0
   \   00000090   E560               LDI     R22, 80
   \   00000092   9F16               MUL     R17, R22
   \   00000094   01F0               MOVW    R31:R30, R1:R0
   \   00000096   ....               SUBI    R30, LOW((-(TData + 1270) & 0xFFFF))
   \   00000098   ....               SBCI    R31, HIGH((-(TData + 1270) & 0xFFFF))
   \   0000009A   8160               LD      R22, Z
   \   0000009C   E070               LDI     R23, 0
   \   0000009E   5F6D               SUBI    R22, 253
   \   000000A0   4F7F               SBCI    R23, 255
   \   000000A2   1746               CP      R20, R22
   \   000000A4   0757               CPC     R21, R23
   \   000000A6   F4E4               BRGE    ??GetADData_2
    775                    TData.RS4.ToTargetBuffer[pair][i] = UART[ch].pRxBuffer[pointer++];  //Get the buffer
   \   000000A8   E15A               LDI     R21, 26
   \   000000AA   9F05               MUL     R16, R21
   \   000000AC   01F0               MOVW    R31:R30, R1:R0
   \   000000AE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000B2   8562               LDD     R22, Z+10
   \   000000B4   8573               LDD     R23, Z+11
   \   000000B6   01FB               MOVW    R31:R30, R23:R22
   \   000000B8   0FE2               ADD     R30, R18
   \   000000BA   1FF3               ADC     R31, R19
   \   000000BC   8160               LD      R22, Z
   \   000000BE   E550               LDI     R21, 80
   \   000000C0   9F15               MUL     R17, R21
   \   000000C2   ....               LDI     R21, LOW(TData)
   \   000000C4   0E05               ADD     R0, R21
   \   000000C6   ....               LDI     R21, (TData) >> 8
   \   000000C8   1E15               ADC     R1, R21
   \   000000CA   E050               LDI     R21, 0
   \   000000CC   0E04               ADD     R0, R20
   \   000000CE   1E15               ADC     R1, R21
   \   000000D0   01F0               MOVW    R31:R30, R1:R0
   \   000000D2   50EC               SUBI    R30, 12
   \   000000D4   4FFB               SBCI    R31, 251
   \   000000D6   8360               ST      Z, R22
   \   000000D8   5F2F               SUBI    R18, 255
   \   000000DA   4F3F               SBCI    R19, 255
    776                }
   \   000000DC   9543               INC     R20
   \   000000DE   CFD7               RJMP    ??GetADData_3
    777             }
    778          }
   \                     ??GetADData_2:
   \   000000E0   9508               RET
    779          
    780          /*************************************************************************
    781          *
    782          * Receive AN-ZBANA setup
    783          *
    784          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    785          void GetANASetup(char ch, short pointer) {
   \                     GetANASetup:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    786          
    787              TData.Ana.PortUsed = UART[ch].pRxBuffer[pointer] + (UART[ch].pRxBuffer[pointer+1] << 8);  //Get the setup
   \   00000008   E10A               LDI     R16, 26
   \   0000000A   9FA0               MUL     R26, R16
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000012   8502               LDD     R16, Z+10
   \   00000014   8513               LDD     R17, Z+11
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   0FE8               ADD     R30, R24
   \   0000001A   1FF9               ADC     R31, R25
   \   0000001C   8120               LD      R18, Z
   \   0000001E   E10A               LDI     R16, 26
   \   00000020   9FA0               MUL     R26, R16
   \   00000022   01F0               MOVW    R31:R30, R1:R0
   \   00000024   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000026   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000028   8502               LDD     R16, Z+10
   \   0000002A   8513               LDD     R17, Z+11
   \   0000002C   0F08               ADD     R16, R24
   \   0000002E   1F19               ADC     R17, R25
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   8111               LDD     R17, Z+1
   \   00000034   2F02               MOV     R16, R18
   \   00000036   ....               LDI     R30, LOW(TData)
   \   00000038   ....               LDI     R31, (TData) >> 8
   \   0000003A   8300               ST      Z, R16
   \   0000003C   8311               STD     Z+1, R17
    788              WriteEEPROMByte(EEPROM_PORTSETUP,UART[ch].pRxBuffer[pointer]);   // store in EEPROM
   \   0000003E   E10A               LDI     R16, 26
   \   00000040   9FA0               MUL     R26, R16
   \   00000042   01F0               MOVW    R31:R30, R1:R0
   \   00000044   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000048   8502               LDD     R16, Z+10
   \   0000004A   8513               LDD     R17, Z+11
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   0FE8               ADD     R30, R24
   \   00000050   1FF9               ADC     R31, R25
   \   00000052   8120               LD      R18, Z
   \   00000054   E002               LDI     R16, 2
   \   00000056   E010               LDI     R17, 0
   \   00000058   ........           CALL    WriteEEPROMByte
    789              WriteEEPROMByte(EEPROM_PORTSETUP+1,UART[ch].pRxBuffer[pointer+1]);
   \   0000005C   E10A               LDI     R16, 26
   \   0000005E   9FA0               MUL     R26, R16
   \   00000060   01F0               MOVW    R31:R30, R1:R0
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8502               LDD     R16, Z+10
   \   00000068   8513               LDD     R17, Z+11
   \   0000006A   0F08               ADD     R16, R24
   \   0000006C   1F19               ADC     R17, R25
   \   0000006E   01F8               MOVW    R31:R30, R17:R16
   \   00000070   8121               LDD     R18, Z+1
   \   00000072   E003               LDI     R16, 3
   \   00000074   E010               LDI     R17, 0
   \   00000076   ........           CALL    WriteEEPROMByte
    790              SetAnaPort();                           // set the port on or off
   \   0000007A   ........           CALL    SetAnaPort
    791          }
   \   0000007E   E0E3               LDI     R30, 3
   \   00000080   ........           JMP     ?EPILOGUE_B3_L09
    792          
    793          /*************************************************************************
    794          *
    795          * Receive AN-ZBANA filter
    796          *
    797          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    798          void GetANAFilter(char ch, short pointer) {
   \                     GetANAFilter:
    799              char port;
    800          
    801              for (port = 0; port <12; port++) {
   \   00000000   E010               LDI     R17, 0
   \                     ??GetANAFilter_0:
   \   00000002   301C               CPI     R17, 12
   \   00000004   F4A0               BRCC    ??GetANAFilter_1
    802                  TData.Ana.Filter[port] = UART[ch].pRxBuffer[pointer++];  //Get the filter
   \   00000006   E14A               LDI     R20, 26
   \   00000008   9F04               MUL     R16, R20
   \   0000000A   01F0               MOVW    R31:R30, R1:R0
   \   0000000C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000000E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000010   8542               LDD     R20, Z+10
   \   00000012   8553               LDD     R21, Z+11
   \   00000014   01FA               MOVW    R31:R30, R21:R20
   \   00000016   0FE2               ADD     R30, R18
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   8140               LD      R20, Z
   \   0000001C   2FE1               MOV     R30, R17
   \   0000001E   E0F0               LDI     R31, 0
   \   00000020   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000022   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000024   8342               STD     Z+2, R20
   \   00000026   5F2F               SUBI    R18, 255
   \   00000028   4F3F               SBCI    R19, 255
    803              }
   \   0000002A   9513               INC     R17
   \   0000002C   CFEA               RJMP    ??GetANAFilter_0
    804          }
   \                     ??GetANAFilter_1:
   \   0000002E   9508               RET
    805          
    806          /*************************************************************************
    807          *
    808          *  Receive data on USARTs
    809          *
    810          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    811          void ReceivePacketUart(char ch) {
   \                     ReceivePacketUart:
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    812          
    813              switch (UART[ch].RxState) {                  // check status
   \   00000004   E10A               LDI     R16, 26
   \   00000006   9F80               MUL     R24, R16
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000000E   8902               LDD     R16, Z+18
   \   00000010   5000               SUBI    R16, 0
   \   00000012   F049               BREQ    ??ReceivePacketUart_0
   \   00000014   950A               DEC     R16
   \   00000016   F041               BREQ    ??ReceivePacketUart_1
   \   00000018   950A               DEC     R16
   \   0000001A   F409               BRNE    $+2+2
   \   0000001C   C082               RJMP    ??ReceivePacketUart_2
   \   0000001E   5008               SUBI    R16, 8
   \   00000020   F409               BRNE    $+2+2
   \   00000022   C109               RJMP    ??ReceivePacketUart_3
   \   00000024   C105               RJMP    ??ReceivePacketUart_4
    814              case SYNC :
    815                  // all functionallity in inerrupt routine
    816                  break ;
   \                     ??ReceivePacketUart_0:
   \   00000026   C107               RJMP    ??ReceivePacketUart_3
    817              case HEADER :
    818                  if (UART[ch].RxLast >= 6) {             // receive header
   \                     ??ReceivePacketUart_1:
   \   00000028   E10A               LDI     R16, 26
   \   0000002A   9F80               MUL     R24, R16
   \   0000002C   01F0               MOVW    R31:R30, R1:R0
   \   0000002E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000032   8506               LDD     R16, Z+14
   \   00000034   8517               LDD     R17, Z+15
   \   00000036   3006               CPI     R16, 6
   \   00000038   4010               SBCI    R17, 0
   \   0000003A   F408               BRCC    $+2+2
   \   0000003C   C0FC               RJMP    ??ReceivePacketUart_3
    819                      UART[ch].RxPacklen = (UART[ch].pRxBuffer[4] + (UART[ch].pRxBuffer[5] * 256)) ; // Find length of package
   \   0000003E   E10A               LDI     R16, 26
   \   00000040   9F80               MUL     R24, R16
   \   00000042   01F0               MOVW    R31:R30, R1:R0
   \   00000044   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000048   8502               LDD     R16, Z+10
   \   0000004A   8513               LDD     R17, Z+11
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   8124               LDD     R18, Z+4
   \   00000050   E10A               LDI     R16, 26
   \   00000052   9F80               MUL     R24, R16
   \   00000054   01F0               MOVW    R31:R30, R1:R0
   \   00000056   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000058   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005A   8502               LDD     R16, Z+10
   \   0000005C   8513               LDD     R17, Z+11
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   8115               LDD     R17, Z+5
   \   00000062   2F02               MOV     R16, R18
   \   00000064   E12A               LDI     R18, 26
   \   00000066   9F82               MUL     R24, R18
   \   00000068   01F0               MOVW    R31:R30, R1:R0
   \   0000006A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000006E   8B06               STD     Z+22, R16
   \   00000070   8B17               STD     Z+23, R17
    820                      if (CalcDSRxChecksum(ch, 6) && (UART[ch].pRxBuffer[0] == (DEVICE_IO + UnitID))) {
   \   00000072   E026               LDI     R18, 6
   \   00000074   E030               LDI     R19, 0
   \   00000076   2F08               MOV     R16, R24
   \   00000078   ....               RCALL   CalcDSRxChecksum
   \   0000007A   2B01               OR      R16, R17
   \   0000007C   F409               BRNE    $+2+2
   \   0000007E   C04D               RJMP    ??ReceivePacketUart_5
   \   00000080   E10A               LDI     R16, 26
   \   00000082   9F80               MUL     R24, R16
   \   00000084   01F0               MOVW    R31:R30, R1:R0
   \   00000086   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000088   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000008A   8502               LDD     R16, Z+10
   \   0000008C   8513               LDD     R17, Z+11
   \   0000008E   01F8               MOVW    R31:R30, R17:R16
   \   00000090   8120               LD      R18, Z
   \   00000092   E030               LDI     R19, 0
   \   00000094   9100....           LDS     R16, UnitID
   \   00000098   E010               LDI     R17, 0
   \   0000009A   5F00               SUBI    R16, 240
   \   0000009C   4F1F               SBCI    R17, 255
   \   0000009E   1720               CP      R18, R16
   \   000000A0   0731               CPC     R19, R17
   \   000000A2   F5D9               BRNE    ??ReceivePacketUart_5
    821                          // header checksum OK and to me
    822                          if ((UART[ch].RxPacklen < ((short) RXSIZE_UART-UART[ch].RxLast)) &&    /* chk. header */
    823                              (UART[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   000000A4   E10A               LDI     R16, 26
   \   000000A6   9F80               MUL     R24, R16
   \   000000A8   01F0               MOVW    R31:R30, R1:R0
   \   000000AA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000AC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000AE   8926               LDD     R18, Z+22
   \   000000B0   8937               LDD     R19, Z+23
   \   000000B2   E906               LDI     R16, 150
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   E14A               LDI     R20, 26
   \   000000B8   9F84               MUL     R24, R20
   \   000000BA   01F0               MOVW    R31:R30, R1:R0
   \   000000BC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000BE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000C0   8546               LDD     R20, Z+14
   \   000000C2   8557               LDD     R21, Z+15
   \   000000C4   1B04               SUB     R16, R20
   \   000000C6   0B15               SBC     R17, R21
   \   000000C8   1720               CP      R18, R16
   \   000000CA   0731               CPC     R19, R17
   \   000000CC   F510               BRCC    ??ReceivePacketUart_6
   \   000000CE   E10A               LDI     R16, 26
   \   000000D0   9F80               MUL     R24, R16
   \   000000D2   01F0               MOVW    R31:R30, R1:R0
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8906               LDD     R16, Z+22
   \   000000DA   8917               LDD     R17, Z+23
   \   000000DC   3007               CPI     R16, 7
   \   000000DE   4010               SBCI    R17, 0
   \   000000E0   F0C0               BRCS    ??ReceivePacketUart_6
    824                              UART[ch].RxState = RECEIVE ;       // Header ok go to data receive state
   \   000000E2   E002               LDI     R16, 2
   \   000000E4   E11A               LDI     R17, 26
   \   000000E6   9F81               MUL     R24, R17
   \   000000E8   01F0               MOVW    R31:R30, R1:R0
   \   000000EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000EE   8B02               STD     Z+18, R16
    825                              UART[ch].RxCount = UART[ch].RxLast + 1 ;    // Set receive counter
   \   000000F0   E10A               LDI     R16, 26
   \   000000F2   9F80               MUL     R24, R16
   \   000000F4   01F0               MOVW    R31:R30, R1:R0
   \   000000F6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000FA   8506               LDD     R16, Z+14
   \   000000FC   8517               LDD     R17, Z+15
   \   000000FE   5F0F               SUBI    R16, 255
   \   00000100   4F1F               SBCI    R17, 255
   \   00000102   E12A               LDI     R18, 26
   \   00000104   9F82               MUL     R24, R18
   \   00000106   01F0               MOVW    R31:R30, R1:R0
   \   00000108   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000010A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010C   8B00               STD     Z+16, R16
   \   0000010E   8B11               STD     Z+17, R17
   \   00000110   C092               RJMP    ??ReceivePacketUart_3
    826                          } else {
    827                              GoToSyncUART(ch) ;                        // go to sync modus for recive
   \                     ??ReceivePacketUart_6:
   \   00000112   2F08               MOV     R16, R24
   \   00000114   ........           CALL    GoToSyncUART
   \   00000118   C08E               RJMP    ??ReceivePacketUart_3
    828                          }
    829                      } else {
    830                          GoToSyncUART(ch) ;                            // go to sync modus for recive
   \                     ??ReceivePacketUart_5:
   \   0000011A   2F08               MOV     R16, R24
   \   0000011C   ........           CALL    GoToSyncUART
    831                      }
    832                  }
    833                  break ;
   \   00000120   C08A               RJMP    ??ReceivePacketUart_3
    834              case RECEIVE :
    835                  if (++UART[ch].RxCount >= UART[ch].RxPacklen) {
   \                     ??ReceivePacketUart_2:
   \   00000122   E10A               LDI     R16, 26
   \   00000124   9F80               MUL     R24, R16
   \   00000126   01F0               MOVW    R31:R30, R1:R0
   \   00000128   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000012A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000012C   8900               LDD     R16, Z+16
   \   0000012E   8911               LDD     R17, Z+17
   \   00000130   5F0F               SUBI    R16, 255
   \   00000132   4F1F               SBCI    R17, 255
   \   00000134   8B00               STD     Z+16, R16
   \   00000136   8B11               STD     Z+17, R17
   \   00000138   E10A               LDI     R16, 26
   \   0000013A   9F80               MUL     R24, R16
   \   0000013C   01F0               MOVW    R31:R30, R1:R0
   \   0000013E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000140   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000142   8900               LDD     R16, Z+16
   \   00000144   8911               LDD     R17, Z+17
   \   00000146   E12A               LDI     R18, 26
   \   00000148   9F82               MUL     R24, R18
   \   0000014A   01F0               MOVW    R31:R30, R1:R0
   \   0000014C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000014E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000150   8926               LDD     R18, Z+22
   \   00000152   8937               LDD     R19, Z+23
   \   00000154   1702               CP      R16, R18
   \   00000156   0713               CPC     R17, R19
   \   00000158   F408               BRCC    $+2+2
   \   0000015A   C06D               RJMP    ??ReceivePacketUart_3
    836                      if ((UART[ch].pRxBuffer[UART[ch].RxPacklen -1]) == ANPRO10_EOT) {
   \   0000015C   E10A               LDI     R16, 26
   \   0000015E   9F80               MUL     R24, R16
   \   00000160   01F0               MOVW    R31:R30, R1:R0
   \   00000162   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000164   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000166   8502               LDD     R16, Z+10
   \   00000168   8513               LDD     R17, Z+11
   \   0000016A   E12A               LDI     R18, 26
   \   0000016C   9F82               MUL     R24, R18
   \   0000016E   01F0               MOVW    R31:R30, R1:R0
   \   00000170   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000172   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000174   8926               LDD     R18, Z+22
   \   00000176   8937               LDD     R19, Z+23
   \   00000178   0F02               ADD     R16, R18
   \   0000017A   1F13               ADC     R17, R19
   \   0000017C   01F8               MOVW    R31:R30, R17:R16
   \   0000017E   9731               SBIW    R31:R30, 1
   \   00000180   8100               LD      R16, Z
   \   00000182   3004               CPI     R16, 4
   \   00000184   F009               BREQ    $+2+2
   \   00000186   C050               RJMP    ??ReceivePacketUart_7
    837                          if (CalcDSRxChecksum(ch, UART[ch].RxPacklen-2)) {
   \   00000188   E10A               LDI     R16, 26
   \   0000018A   9F80               MUL     R24, R16
   \   0000018C   01F0               MOVW    R31:R30, R1:R0
   \   0000018E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000190   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000192   8926               LDD     R18, Z+22
   \   00000194   8937               LDD     R19, Z+23
   \   00000196   5022               SUBI    R18, 2
   \   00000198   4030               SBCI    R19, 0
   \   0000019A   2F08               MOV     R16, R24
   \   0000019C   ....               RCALL   CalcDSRxChecksum
   \   0000019E   2B01               OR      R16, R17
   \   000001A0   F1F9               BREQ    ??ReceivePacketUart_8
    838                              if ((UART[ch].pRxBuffer[1] == MyAddress())||      // message to me? or
    839                                  (UART[ch].pRxBuffer[1] == 0xff)) {            // broadcast
   \   000001A2   ........           CALL    MyAddress
   \   000001A6   2F20               MOV     R18, R16
   \   000001A8   E10A               LDI     R16, 26
   \   000001AA   9F80               MUL     R24, R16
   \   000001AC   01F0               MOVW    R31:R30, R1:R0
   \   000001AE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001B0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001B2   8502               LDD     R16, Z+10
   \   000001B4   8513               LDD     R17, Z+11
   \   000001B6   01F8               MOVW    R31:R30, R17:R16
   \   000001B8   8101               LDD     R16, Z+1
   \   000001BA   1702               CP      R16, R18
   \   000001BC   F059               BREQ    ??ReceivePacketUart_9
   \   000001BE   E10A               LDI     R16, 26
   \   000001C0   9F80               MUL     R24, R16
   \   000001C2   01F0               MOVW    R31:R30, R1:R0
   \   000001C4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001C6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001C8   8502               LDD     R16, Z+10
   \   000001CA   8513               LDD     R17, Z+11
   \   000001CC   01F8               MOVW    R31:R30, R17:R16
   \   000001CE   8101               LDD     R16, Z+1
   \   000001D0   3F0F               CPI     R16, 255
   \   000001D2   F511               BRNE    ??ReceivePacketUart_10
    840                                  hostAddress = UART[ch].pRxBuffer[3];            // address to sender (host)
   \                     ??ReceivePacketUart_9:
   \   000001D4   E10A               LDI     R16, 26
   \   000001D6   9F80               MUL     R24, R16
   \   000001D8   01F0               MOVW    R31:R30, R1:R0
   \   000001DA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001DC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001DE   8502               LDD     R16, Z+10
   \   000001E0   8513               LDD     R17, Z+11
   \   000001E2   01F8               MOVW    R31:R30, R17:R16
   \   000001E4   8103               LDD     R16, Z+3
   \   000001E6   9300....           STS     hostAddress, R16
    841                                  UART[ch].RxState = HANDLE ;                     // Package OK
   \   000001EA   E00A               LDI     R16, 10
   \   000001EC   E11A               LDI     R17, 26
   \   000001EE   9F81               MUL     R24, R17
   \   000001F0   01F0               MOVW    R31:R30, R1:R0
   \   000001F2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001F4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001F6   8B02               STD     Z+18, R16
    842                                  if (ch == 0) {
   \   000001F8   2388               TST     R24
   \   000001FA   F431               BRNE    ??ReceivePacketUart_11
    843                                      OS_SignalEvent(1, &TCB_USART0);
   \   000001FC   ....               LDI     R18, LOW(TCB_USART0)
   \   000001FE   ....               LDI     R19, (TCB_USART0) >> 8
   \   00000200   E001               LDI     R16, 1
   \   00000202   ........           CALL    OS_SignalEvent
   \   00000206   C017               RJMP    ??ReceivePacketUart_3
    844                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart_11:
   \   00000208   3081               CPI     R24, 1
   \   0000020A   F4A9               BRNE    ??ReceivePacketUart_3
    845                                      OS_SignalEvent(1, &TCB_USART1);
   \   0000020C   ....               LDI     R18, LOW(TCB_USART1)
   \   0000020E   ....               LDI     R19, (TCB_USART1) >> 8
   \   00000210   E001               LDI     R16, 1
   \   00000212   ........           CALL    OS_SignalEvent
   \   00000216   C00F               RJMP    ??ReceivePacketUart_3
    846                                  }
    847                              } else {
    848                                  GoToSyncUART(ch) ;                             // go to sync modus for recive
   \                     ??ReceivePacketUart_10:
   \   00000218   2F08               MOV     R16, R24
   \   0000021A   ........           CALL    GoToSyncUART
   \   0000021E   C00B               RJMP    ??ReceivePacketUart_3
    849                              }
    850                          } else {
    851                              GoToSyncUART(ch) ;                                // go to sync modus for recive
   \                     ??ReceivePacketUart_8:
   \   00000220   2F08               MOV     R16, R24
   \   00000222   ........           CALL    GoToSyncUART
   \   00000226   C007               RJMP    ??ReceivePacketUart_3
    852                          }
    853                      } else {
    854                          GoToSyncUART(ch) ;                                    // go to sync modus for recive
   \                     ??ReceivePacketUart_7:
   \   00000228   2F08               MOV     R16, R24
   \   0000022A   ........           CALL    GoToSyncUART
    855                      }
    856                  }
    857                  break ;
   \   0000022E   C003               RJMP    ??ReceivePacketUart_3
    858              case HANDLE :
    859                  break;
    860              default :
    861                  GoToSyncUART(ch) ;                                            // go to sync modus for recive
   \                     ??ReceivePacketUart_4:
   \   00000230   2F08               MOV     R16, R24
   \   00000232   ........           CALL    GoToSyncUART
    862                  break ;
    863              }                                                           // end switch
    864              if (++UART[ch].RxLast >= RXSIZE_UART) {                     // check pointer
   \                     ??ReceivePacketUart_3:
   \   00000236   E10A               LDI     R16, 26
   \   00000238   9F80               MUL     R24, R16
   \   0000023A   01F0               MOVW    R31:R30, R1:R0
   \   0000023C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000023E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000240   8506               LDD     R16, Z+14
   \   00000242   8517               LDD     R17, Z+15
   \   00000244   5F0F               SUBI    R16, 255
   \   00000246   4F1F               SBCI    R17, 255
   \   00000248   8706               STD     Z+14, R16
   \   0000024A   8717               STD     Z+15, R17
   \   0000024C   E10A               LDI     R16, 26
   \   0000024E   9F80               MUL     R24, R16
   \   00000250   01F0               MOVW    R31:R30, R1:R0
   \   00000252   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000254   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000256   8506               LDD     R16, Z+14
   \   00000258   8517               LDD     R17, Z+15
   \   0000025A   3906               CPI     R16, 150
   \   0000025C   E020               LDI     R18, 0
   \   0000025E   0712               CPC     R17, R18
   \   00000260   F048               BRCS    ??ReceivePacketUart_12
    865                  UART[ch].RxLast = 0;                                     // reset pointer
   \   00000262   E000               LDI     R16, 0
   \   00000264   E010               LDI     R17, 0
   \   00000266   E12A               LDI     R18, 26
   \   00000268   9F82               MUL     R24, R18
   \   0000026A   01F0               MOVW    R31:R30, R1:R0
   \   0000026C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000026E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000270   8706               STD     Z+14, R16
   \   00000272   8717               STD     Z+15, R17
    866              }
    867          }
   \                     ??ReceivePacketUart_12:
   \   00000274   9189               LD      R24, Y+
   \   00000276   9508               RET
    868          
    869          
    870          /*************************************************************************
    871          *
    872          * Calculate tx checksum (header and package) using Dallas Semiconductor one-wire CRC
    873          *
    874          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    875          char CalcDSTxChecksum(char ch, unsigned short len) {
   \                     CalcDSTxChecksum:
   \   00000000   2E20               MOV     R2, R16
   \   00000002   01A9               MOVW    R21:R20, R19:R18
    876          
    877              unsigned short  cnt ;
    878              unsigned char   csum ;
    879          
    880              csum = 0 ;
   \   00000004   E000               LDI     R16, 0
    881              for (cnt = 4 ; cnt < len ; cnt++) {
   \   00000006   E064               LDI     R22, 4
   \   00000008   E070               LDI     R23, 0
   \                     ??CalcDSTxChecksum_0:
   \   0000000A   1764               CP      R22, R20
   \   0000000C   0775               CPC     R23, R21
   \   0000000E   F4C8               BRCC    ??CalcDSTxChecksum_1
    882                  csum = crc[csum ^ UART[ch].pTxBuffer[cnt]] ;
   \   00000010   2F20               MOV     R18, R16
   \   00000012   E030               LDI     R19, 0
   \   00000014   E10A               LDI     R16, 26
   \   00000016   9E20               MUL     R2, R16
   \   00000018   01F0               MOVW    R31:R30, R1:R0
   \   0000001A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001E   8100               LD      R16, Z
   \   00000020   8111               LDD     R17, Z+1
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   0FE6               ADD     R30, R22
   \   00000026   1FF7               ADC     R31, R23
   \   00000028   8100               LD      R16, Z
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   2720               EOR     R18, R16
   \   0000002E   2731               EOR     R19, R17
   \   00000030   01F9               MOVW    R31:R30, R19:R18
   \   00000032   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000034   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000036   ....               LDI     R19, (crc) >> 16
   \   00000038   BF3B               OUT     0x3B, R19
   \   0000003A   9106               ELPM    R16, Z
    883              }
   \   0000003C   5F6F               SUBI    R22, 255
   \   0000003E   4F7F               SBCI    R23, 255
   \   00000040   CFE4               RJMP    ??CalcDSTxChecksum_0
    884              return csum ;
   \                     ??CalcDSTxChecksum_1:
   \   00000042   9508               RET
    885          }
    886          
    887          /*************************************************************************
    888          *
    889          * Calculate rx packet checksum (header and package) using Dallas Semiconductor one-wire CRC
    890          *
    891          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    892          short CalcDSRxChecksum(char ch, unsigned short len) {
   \                     CalcDSRxChecksum:
   \   00000000   2E20               MOV     R2, R16
   \   00000002   01A9               MOVW    R21:R20, R19:R18
    893          
    894              unsigned short  cnt ;
    895              unsigned char   csum ;
    896          
    897              csum = 0 ;
   \   00000004   E020               LDI     R18, 0
    898              for (cnt=0 ; cnt < len ; cnt++) {
   \   00000006   E060               LDI     R22, 0
   \   00000008   E070               LDI     R23, 0
   \                     ??CalcDSRxChecksum_0:
   \   0000000A   1764               CP      R22, R20
   \   0000000C   0775               CPC     R23, R21
   \   0000000E   F4C0               BRCC    ??CalcDSRxChecksum_1
    899                  csum = crc[csum ^ UART[ch].pRxBuffer[cnt]] ;
   \   00000010   E030               LDI     R19, 0
   \   00000012   E10A               LDI     R16, 26
   \   00000014   9E20               MUL     R2, R16
   \   00000016   01F0               MOVW    R31:R30, R1:R0
   \   00000018   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001C   8502               LDD     R16, Z+10
   \   0000001E   8513               LDD     R17, Z+11
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   0FE6               ADD     R30, R22
   \   00000024   1FF7               ADC     R31, R23
   \   00000026   8100               LD      R16, Z
   \   00000028   E010               LDI     R17, 0
   \   0000002A   2720               EOR     R18, R16
   \   0000002C   2731               EOR     R19, R17
   \   0000002E   01F9               MOVW    R31:R30, R19:R18
   \   00000030   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000032   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000034   ....               LDI     R19, (crc) >> 16
   \   00000036   BF3B               OUT     0x3B, R19
   \   00000038   9126               ELPM    R18, Z
    900              }
   \   0000003A   5F6F               SUBI    R22, 255
   \   0000003C   4F7F               SBCI    R23, 255
   \   0000003E   CFE5               RJMP    ??CalcDSRxChecksum_0
    901              if (csum == UART[ch].pRxBuffer[len]) {
   \                     ??CalcDSRxChecksum_1:
   \   00000040   E10A               LDI     R16, 26
   \   00000042   9E20               MUL     R2, R16
   \   00000044   01F0               MOVW    R31:R30, R1:R0
   \   00000046   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000004A   8502               LDD     R16, Z+10
   \   0000004C   8513               LDD     R17, Z+11
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   0FE4               ADD     R30, R20
   \   00000052   1FF5               ADC     R31, R21
   \   00000054   8100               LD      R16, Z
   \   00000056   1720               CP      R18, R16
   \   00000058   F419               BRNE    ??CalcDSRxChecksum_2
    902                  return true ;
   \   0000005A   E001               LDI     R16, 1
   \   0000005C   E010               LDI     R17, 0
   \   0000005E   9508               RET
    903              } else {
    904                  return false ;
   \                     ??CalcDSRxChecksum_2:
   \   00000060   E000               LDI     R16, 0
   \   00000062   E010               LDI     R17, 0
   \   00000064   9508               RET
    905              }
    906          }
    907          
    908          /*************************************************************************
    909          *
    910          * Goes to sync mode
    911          *
    912          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    913          __monitor void GoToSyncUART(char ch) {
   \                     GoToSyncUART:
   \   00000000   B74F               IN      R20, 0x3F
   \   00000002   94F8               CLI
    914          
    915              if (ch < 2) {
   \   00000004   3002               CPI     R16, 2
   \   00000006   F4B8               BRCC    ??GoToSyncUART_0
    916                  UART[ch].SyncCnt = 0 ;                        // ready for sync
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000012   E010               LDI     R17, 0
   \   00000014   8B13               STD     Z+19, R17
    917                  UART[ch].RxState = SYNC ;
   \   00000016   E11A               LDI     R17, 26
   \   00000018   9F01               MUL     R16, R17
   \   0000001A   01F0               MOVW    R31:R30, R1:R0
   \   0000001C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000020   E010               LDI     R17, 0
   \   00000022   8B12               STD     Z+18, R17
    918                  UART[ch].RxFirst = 0 ;
   \   00000024   E020               LDI     R18, 0
   \   00000026   E030               LDI     R19, 0
   \   00000028   E11A               LDI     R17, 26
   \   0000002A   9F01               MUL     R16, R17
   \   0000002C   01F0               MOVW    R31:R30, R1:R0
   \   0000002E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000032   8724               STD     Z+12, R18
   \   00000034   8735               STD     Z+13, R19
    919              }
    920          }
   \                     ??GoToSyncUART_0:
   \   00000036   BF4F               OUT     0x3F, R20
   \   00000038   9508               RET

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart>_0`:
   \   00000000   E803               DW      59395
   \   00000002   01                 DB      1
   \   00000003   ....               DW      (??CheckActionUart_25) /2
   \   00000005   ....               DW      (??CheckActionUart_0) /2
   \   00000007   0A                 DB      0xa
   \   00000008   ....               DW      (??CheckActionUart_3) /2
   \   0000000A   0A                 DB      0xa
   \   0000000B   ....               DW      (??CheckActionUart_4) /2
   \   0000000D   32                 DB      0x32
   \   0000000E   ....               DW      (??CheckActionUart_5) /2
   \   00000010   0A                 DB      0xa
   \   00000011   ....               DW      (??CheckActionUart_6) /2
   \   00000013   0A                 DB      0xa
   \   00000014   ....               DW      (??CheckActionUart_7) /2
   \   00000016   0A                 DB      0xa
   \   00000017   ....               DW      (??CheckActionUart_8) /2
   \   00000019   0A                 DB      0xa
   \   0000001A   ....               DW      (??CheckActionUart_10) /2
   \   0000001C   1E                 DB      0x1e
   \   0000001D   ....               DW      (??CheckActionUart_14) /2
   \   0000001F   14                 DB      0x14
   \   00000020   ....               DW      (??CheckActionUart_12) /2
   \   00000022   28                 DB      0x28
   \   00000023   ....               DW      (??CheckActionUart_20) /2
   \   00000025   0A                 DB      0xa
   \   00000026   ....               DW      (??CheckActionUart_21) /2
   \   00000028   0A                 DB      0xa
   \   00000029   ....               DW      (??CheckActionUart_22) /2
   \   0000002B   0A                 DB      0xa
   \   0000002C   ....               DW      (??CheckActionUart_23) /2
   \   0000002E   0A                 DB      0xa
   \   0000002F   ....               DW      (??CheckActionUart_24) /2
   \   00000031   02FE9E             DB      254,0x2,0x9e
   \   00000034   ....               DW      (??CheckActionUart_2) /2
   \   00000036   FB                 DB      251
   \   00000037   00                 DB      0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   BuildADEpromdata
      2      2   BuildADInt
      0      2   BuildANAFilter
      0      2   BuildANASetup
      6      2   BuildEEPROMData
        6      2   -> ReadEEPROMBuffer
      4      2   BuildMData485
      4      2   BuildMDataANA
      2      2   BuildRData485
      0      2   BuildRS4Setup
     12      2   BuildStackStatus
       12      2   -> OS_GetStackSpace
      6      2   BuildStatusData
        6      2   -> MyAddress
      6      2   BuildWHdata
        6      2   -> OS_LeaveRegion
      0      2   CalcDSRxChecksum
      0      2   CalcDSTxChecksum
      6      2   CheckActionUart
        6      2   -> BuildADEpromdata
        6      2   -> BuildADInt
        6      2   -> BuildANAFilter
        6      2   -> BuildANASetup
        6      2   -> BuildEEPROMData
        6      2   -> BuildMData485
        6      2   -> BuildMDataANA
        6      2   -> BuildRData485
        6      2   -> BuildRS4Setup
        6      2   -> BuildStackStatus
        6      2   -> BuildStatusData
        6      2   -> BuildWHdata
        6      2   -> GetADData
        6      2   -> GetANAFilter
        6      2   -> GetANASetup
        6      2   -> GetEEPROMData
        6      2   -> GetGotoBootloader
        6      2   -> GetRS4Setup
        6      2   -> GetResetEEPROM
        6      2 ?SS_SHR_L02
        6      2 ?SV_SWITCH_L06
      0      2   GetADData
      0      2   GetANAFilter
      3      2   GetANASetup
        3      2   -> SetAnaPort
        3      2   -> WriteEEPROMByte
      8      2   GetEEPROMData
        8      2   -> OS_Delay
        8      2   -> OS__Gettime
        8      2   -> WriteEEPROMBuffer
      0      2   GetGotoBootloader
      3      2   GetRS4Setup
        3      2   -> SetRS4Port
        3      2   -> WriteEEPROMByte
      3      2   GetResetEEPROM
        3      2   -> EEPROMReset
      0      2   GoToSyncUART
      1      2   ReceivePacketUart
        1      2   -> CalcDSRxChecksum
        1      2   -> GoToSyncUART
        1      2   -> MyAddress
        1      2   -> OS_SignalEvent
      0      2   TimoutUSART0
        0      2   -> GoToSyncUART
        0      2   -> OS_Error
        0      2   -> OS_StopTimer
      0      2   TimoutUSART0On
        0      2   -> OS_StopTimer
      0      2   TimoutUSART1
        0      2   -> GoToSyncUART
        0      2   -> OS_Error
        0      2   -> OS_StopTimer
      0      2   TimoutUSART1On
        0      2   -> OS_StopTimer
      1      2   Uart_BuildHeader
        1      2   -> MyAddress
      1      2   Uart_BuildTail
        1      2   -> CalcDSTxChecksum
        1      2   -> OS_Error
        1      2   -> OS_RetriggerTimer
        1      2   -> Uart_BuildHeader
      1      2   Usart0Handler
        1      2   -> OS_Unuse
        1      2   -> OS_Use
        1      2   -> OS_WaitEventTimed
        1      2   -> UsartCheckPackage
      1      2   Usart1Handler
        1      2   -> OS_Unuse
        1      2   -> OS_Use
        1      2   -> OS_WaitEventTimed
        1      2   -> UsartCheckPackage
      4      2   UsartCheckPackage
        4      2   -> CheckActionUart
        4      2   -> GoToSyncUART
        4      2   -> Uart_BuildTail


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      56  ?<Jumptable for CheckActionUart>_0
     362  BuildADEpromdata
     438  BuildADInt
     348  BuildANAFilter
     406  BuildANASetup
     494  BuildEEPROMData
   1'410  BuildMData485
     508  BuildMDataANA
     588  BuildRData485
     452  BuildRS4Setup
   1'220  BuildStackStatus
   1'004  BuildStatusData
     822  BuildWHdata
     102  CalcDSRxChecksum
      68  CalcDSTxChecksum
     504  CheckActionUart
     226  GetADData
      48  GetANAFilter
     132  GetANASetup
     310  GetEEPROMData
      40  GetGotoBootloader
     132  GetRS4Setup
      18  GetResetEEPROM
      58  GoToSyncUART
     632  ReceivePacketUart
      94  TimoutUSART0
      20  TimoutUSART0On
      94  TimoutUSART1
      20  TimoutUSART1On
     322  Uart_BuildHeader
     748  Uart_BuildTail
      40  Usart0Handler
      40  Usart1Handler
     168  UsartCheckPackage
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_PORTE
       1  _A_UCSR0B
       1  _A_UCSR1B
       1  _A_WDTCSR

 
      8 bytes in segment ABSOLUTE
 11'868 bytes in segment CODE
     56 bytes in segment SWITCH
 
 11'924 bytes of CODE memory
      0 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
