###############################################################################
#
# IAR C/C++ Compiler V8.10.1.1784/W64 for Microchip AVR   02/May/2023  12:58:18
# Copyright 1996-2023 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file           =  D:\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c
#    Command line          =
#        -f D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\RS485.r90.rsp
#        (D:\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main -D OS_LIBMODE_D -D
#        OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D USE_MODBUS_PROTOCOL=0 -lCN
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\List\Main -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB_ATmega1281\INC\ -I
#        D:\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\ --eeprom_size 4096
#        --clib -On) --dependencies=n
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\RS485.r90.iar_deps
#    Locale                =  C
#    List file             =
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\List\Main\RS485.lst
#    Object file           =
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\RS485.r90
#    Runtime model:           
#      __64bit_doubles     =  disabled
#      __SystemLibrary     =  CLib
#      __architecture      =  *
#      __cpu               =  3
#      __cpu_name          =  ATmega1281
#      __dlib_version      =  clib
#      __enhanced_core     =  enabled
#      __enhanced_core_mul =  enabled
#      __has_elpm          =  true
#      __memory_model      =  2
#      __mex               =  disabled
#      __no_rampd          =  enabled
#      __rt_version        =  3
#      __vtable_memory     =  __nearflash
#
###############################################################################

D:\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c
      1          
      2          /****************************************************************************************
      3          / Uart communication to external ADcards
      4          /
      5          ***************************************************************************************/
      6          
      7          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0x2e
   \   __no_init union <unnamed>#436 volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   __no_init union <unnamed>#454 volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          
     13          #if USE_MODBUS_PROTOCOL == 1
     14          #include "common_def.h"
     15          
     16          #endif /* USE_MODBUS_PROTOCOL == 1 */
     17          
     18          
     19          /************************************************ *************************
     20          *   (This is a timer calback)
     21          *  Timout timer UART 0
     22          *
     23          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     24          void TimoutUART0(void) {
   \                     TimoutUART0:
     25          
     26              U0_MCR &= ~RTS;      // set RTS off
   \   00000000   E0EC               LDI     R30, LOW(8716)
   \   00000002   E2F2               LDI     R31, (8716) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   7F0D               ANDI    R16, 0xFD
   \   00000008   8300               ST      Z, R16
     27          }
   \   0000000A   9508               RET
     28          
     29          /*************************************************************************
     30          *   (This is a timer calback)
     31          *  Timout timer UART 1
     32          *
     33          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     34          void TimoutUART1(void) {
   \                     TimoutUART1:
     35          
     36              U1_MCR &= ~RTS;       // set RTS off
   \   00000000   E0E4               LDI     R30, LOW(8708)
   \   00000002   E2F2               LDI     R31, (8708) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   7F0D               ANDI    R16, 0xFD
   \   00000008   8300               ST      Z, R16
     37          }
   \   0000000A   9508               RET
     38          
     39          
     40          /*************************************************************************
     41          *   (This is a task)
     42          *  Usart handler UART send request
     43          *
     44          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     45          void ExtRS485Ctl(void) {
   \                     ExtRS485Ctl:
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
     46              char SeqCnt = 0;
   \   00000004   E080               LDI     R24, 0
     47              char PowerOnTimer = POWER_ON_CNT;                    // do not make a unwanted power on sequence in the starting phase
   \   00000006   E095               LDI     R25, 5
     48              char EventStatus;
     49              char AskMD[2];
     50              char temp;
     51          
     52              
     53              Init16552(0, 9600);                                      // Init UART channel 0
   \   00000008   E840               LDI     R20, 128
   \   0000000A   E255               LDI     R21, 37
   \   0000000C   E060               LDI     R22, 0
   \   0000000E   E070               LDI     R23, 0
   \   00000010   E000               LDI     R16, 0
   \   00000012   ....               RCALL   Init16552
     54              Init16552(1, 9600);                                      // Init UART channel 1
   \   00000014   E840               LDI     R20, 128
   \   00000016   E255               LDI     R21, 37
   \   00000018   E060               LDI     R22, 0
   \   0000001A   E070               LDI     R23, 0
   \   0000001C   E001               LDI     R16, 1
   \   0000001E   ....               RCALL   Init16552
     55              
     56              TData.RS4.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP);   // Get setup from EEPROM
   \   00000020   E002               LDI     R16, 2
   \   00000022   E010               LDI     R17, 0
   \   00000024   ........           CALL    ReadEEPROMByte
   \   00000028   9300....           STS     TData, R16
     57              TData.RS4.SensorType[0] = ReadEEPROMByte(EEPROM_PORTSETUP + 1);
   \   0000002C   E003               LDI     R16, 3
   \   0000002E   E010               LDI     R17, 0
   \   00000030   ........           CALL    ReadEEPROMByte
   \   00000034   9300....           STS     (TData + 1), R16
     58              TData.RS4.SensorType[1] = ReadEEPROMByte(EEPROM_PORTSETUP + 2);
   \   00000038   E004               LDI     R16, 4
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ........           CALL    ReadEEPROMByte
   \   00000040   9300....           STS     (TData + 2), R16
     59          #if USE_MODBUS_PROTOCOL == 1
     60              {
     61                static void load_eeprom_misc_485(void);
     62                load_eeprom_misc_485();
     63              }
     64          #endif
     65          
     66              TData.RS4.ToTargetBuffer[0][0] = false;
   \   00000044   E000               LDI     R16, 0
   \   00000046   9300....           STS     (TData + 1268), R16
     67              TData.RS4.ToTargetBuffer[1][0] = false;
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   9300....           STS     (TData + 1348), R16
     68              TData.RS4.FromTargetBuffer[0][0] = false;
   \   00000050   E000               LDI     R16, 0
   \   00000052   9300....           STS     (TData + 1428), R16
     69              TData.RS4.FromTargetBuffer[1][0] = false;
   \   00000056   E000               LDI     R16, 0
   \   00000058   9300....           STS     (TData + 1478), R16
     70              
     71              
     72              for (char i = 0; i < 8; i++) {
   \   0000005C   2466               CLR     R6
   \                     ??ExtRS485Ctl_0:
   \   0000005E   E008               LDI     R16, 8
   \   00000060   1660               CP      R6, R16
   \   00000062   F598               BRCC    ??ExtRS485Ctl_1
     73                  SetBit(PORTC, (TData.RS4.PortUsed & (0x01 << i)));      // Switch on power
   \   00000064   9100....           LDS     R16, (OS_Global + 1)
   \   00000068   7F00               ANDI    R16, 0xF0
   \   0000006A   2300               TST     R16
   \   0000006C   F021               BREQ    ??ExtRS485Ctl_2
   \   0000006E   E909               LDI     R16, 153
   \   00000070   E010               LDI     R17, 0
   \   00000072   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_2:
   \   00000076   94F8               cli
   \   00000078   ....               LDI     R30, LOW(OS_Global)
   \   0000007A   ....               LDI     R31, (OS_Global) >> 8
   \   0000007C   8101               LDD     R16, Z+1
   \   0000007E   9503               INC     R16
   \   00000080   8301               STD     Z+1, R16
   \   00000082   9120....           LDS     R18, TData
   \   00000086   2D46               MOV     R20, R6
   \   00000088   E001               LDI     R16, 1
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   ........           CALL    ?S_SHL_L02
   \   00000090   2320               AND     R18, R16
   \   00000092   B108               IN      R16, 0x08
   \   00000094   2B02               OR      R16, R18
   \   00000096   B908               OUT     0x08, R16
   \   00000098   9100....           LDS     R16, (OS_Global + 1)
   \   0000009C   7F00               ANDI    R16, 0xF0
   \   0000009E   2300               TST     R16
   \   000000A0   F021               BREQ    ??ExtRS485Ctl_3
   \   000000A2   E909               LDI     R16, 153
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_3:
   \   000000AA   ....               LDI     R30, LOW(OS_Global)
   \   000000AC   ....               LDI     R31, (OS_Global) >> 8
   \   000000AE   8101               LDD     R16, Z+1
   \   000000B0   950A               DEC     R16
   \   000000B2   8301               STD     Z+1, R16
   \   000000B4   9100....           LDS     R16, (OS_Global + 1)
   \   000000B8   2300               TST     R16
   \   000000BA   F409               BRNE    ??ExtRS485Ctl_4
   \   000000BC   9478               sei
     74                  OS_Delay(100);
   \                     ??ExtRS485Ctl_4:
   \   000000BE   E604               LDI     R16, 100
   \   000000C0   E010               LDI     R17, 0
   \   000000C2   ........           CALL    OS_Delay
     75              }
   \   000000C6   9463               INC     R6
   \   000000C8   CFCA               RJMP    ??ExtRS485Ctl_0
     76              OS_Delay(UART_START_DELAY);                               // Waiting for target startup
   \                     ??ExtRS485Ctl_1:
   \   000000CA   E700               LDI     R16, 112
   \   000000CC   E117               LDI     R17, 23
   \   000000CE   ........           CALL    OS_Delay
     77          
     78          #if USE_MODBUS_PROTOCOL == 1
     79              //
     80              // let modbus task that I'm done initializing
     81              //
     82              {
     83                extern void modbus_rtu_notify_go(void);
     84                modbus_rtu_notify_go();
     85              }
     86          #endif
     87          
     88              while (1) {
     89                  for (PortPair = 0; PortPair < 4; PortPair++) {        // loop through all ports
   \                     ??ExtRS485Ctl_5:
   \   000000D2   E000               LDI     R16, 0
   \   000000D4   9300....           STS     PortPair, R16
   \                     ??ExtRS485Ctl_6:
   \   000000D8   9100....           LDS     R16, PortPair
   \   000000DC   3004               CPI     R16, 4
   \   000000DE   F008               BRCS    $+2+2
   \   000000E0   C234               RJMP    ??ExtRS485Ctl_7
     90                      if (UART16552[0].RxFaultCnt > MAX_16552_FAIL) {
   \   000000E2   9100....           LDS     R16, (UART16552 + 24)
   \   000000E6   3009               CPI     R16, 9
   \   000000E8   F010               BRCS    ??ExtRS485Ctl_8
     91                          EmptyRxBuf16552(0);                            // Empty UART channel 0
   \   000000EA   E000               LDI     R16, 0
   \   000000EC   ....               RCALL   EmptyRxBuf16552
     92                      }
     93                      if (UART16552[1].RxFaultCnt > MAX_16552_FAIL) {
   \                     ??ExtRS485Ctl_8:
   \   000000EE   9100....           LDS     R16, (UART16552 + 50)
   \   000000F2   3009               CPI     R16, 9
   \   000000F4   F010               BRCS    ??ExtRS485Ctl_9
     94                          EmptyRxBuf16552(1);                            // Empty UART channel 1
   \   000000F6   E001               LDI     R16, 1
   \   000000F8   ....               RCALL   EmptyRxBuf16552
     95                      }
     96                      if (PowerOnTimer < POWER_ON_CNT) {
   \                     ??ExtRS485Ctl_9:
   \   000000FA   3095               CPI     R25, 5
   \   000000FC   F420               BRCC    ??ExtRS485Ctl_10
     97                          if (++PowerOnTimer >= POWER_ON_CNT) {          // check if time to switch on power
   \   000000FE   9593               INC     R25
   \   00000100   3095               CPI     R25, 5
   \   00000102   F008               BRCS    ??ExtRS485Ctl_10
     98                              SetRS4Port();                                // and set power on ports
   \   00000104   ....               RCALL   SetRS4Port
     99                          }
    100                      }
    101                      SetBit(PORTE, 0xf0);
   \                     ??ExtRS485Ctl_10:
   \   00000106   9100....           LDS     R16, (OS_Global + 1)
   \   0000010A   7F00               ANDI    R16, 0xF0
   \   0000010C   2300               TST     R16
   \   0000010E   F021               BREQ    ??ExtRS485Ctl_11
   \   00000110   E909               LDI     R16, 153
   \   00000112   E010               LDI     R17, 0
   \   00000114   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_11:
   \   00000118   94F8               cli
   \   0000011A   ....               LDI     R30, LOW(OS_Global)
   \   0000011C   ....               LDI     R31, (OS_Global) >> 8
   \   0000011E   8101               LDD     R16, Z+1
   \   00000120   9503               INC     R16
   \   00000122   8301               STD     Z+1, R16
   \   00000124   B10E               IN      R16, 0x0E
   \   00000126   6F00               ORI     R16, 0xF0
   \   00000128   B90E               OUT     0x0E, R16
   \   0000012A   9100....           LDS     R16, (OS_Global + 1)
   \   0000012E   7F00               ANDI    R16, 0xF0
   \   00000130   2300               TST     R16
   \   00000132   F021               BREQ    ??ExtRS485Ctl_12
   \   00000134   E909               LDI     R16, 153
   \   00000136   E010               LDI     R17, 0
   \   00000138   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_12:
   \   0000013C   ....               LDI     R30, LOW(OS_Global)
   \   0000013E   ....               LDI     R31, (OS_Global) >> 8
   \   00000140   8101               LDD     R16, Z+1
   \   00000142   950A               DEC     R16
   \   00000144   8301               STD     Z+1, R16
   \   00000146   9100....           LDS     R16, (OS_Global + 1)
   \   0000014A   2300               TST     R16
   \   0000014C   F409               BRNE    ??ExtRS485Ctl_13
   \   0000014E   9478               sei
    102                      // volatile undefined behavior
    103                      // ClrBit(PORTE, (0x10 << PortPair) & 0xf0);           // set mux port
    104                      //
    105                      temp = (0x10 << PortPair) & 0xf0;
   \                     ??ExtRS485Ctl_13:
   \   00000150   9140....           LDS     R20, PortPair
   \   00000154   E100               LDI     R16, 16
   \   00000156   E010               LDI     R17, 0
   \   00000158   ........           CALL    ?S_SHL_L02
   \   0000015C   7F00               ANDI    R16, 0xF0
   \   0000015E   2E40               MOV     R4, R16
    106                      ClrBit(PORTE, temp);           // set mux port
   \   00000160   9100....           LDS     R16, (OS_Global + 1)
   \   00000164   7F00               ANDI    R16, 0xF0
   \   00000166   2300               TST     R16
   \   00000168   F021               BREQ    ??ExtRS485Ctl_14
   \   0000016A   E909               LDI     R16, 153
   \   0000016C   E010               LDI     R17, 0
   \   0000016E   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_14:
   \   00000172   94F8               cli
   \   00000174   ....               LDI     R30, LOW(OS_Global)
   \   00000176   ....               LDI     R31, (OS_Global) >> 8
   \   00000178   8101               LDD     R16, Z+1
   \   0000017A   9503               INC     R16
   \   0000017C   8301               STD     Z+1, R16
   \   0000017E   2D04               MOV     R16, R4
   \   00000180   9500               COM     R16
   \   00000182   B11E               IN      R17, 0x0E
   \   00000184   2310               AND     R17, R16
   \   00000186   B91E               OUT     0x0E, R17
   \   00000188   9100....           LDS     R16, (OS_Global + 1)
   \   0000018C   7F00               ANDI    R16, 0xF0
   \   0000018E   2300               TST     R16
   \   00000190   F021               BREQ    ??ExtRS485Ctl_15
   \   00000192   E909               LDI     R16, 153
   \   00000194   E010               LDI     R17, 0
   \   00000196   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_15:
   \   0000019A   ....               LDI     R30, LOW(OS_Global)
   \   0000019C   ....               LDI     R31, (OS_Global) >> 8
   \   0000019E   8101               LDD     R16, Z+1
   \   000001A0   950A               DEC     R16
   \   000001A2   8301               STD     Z+1, R16
   \   000001A4   9100....           LDS     R16, (OS_Global + 1)
   \   000001A8   2300               TST     R16
   \   000001AA   F409               BRNE    ??ExtRS485Ctl_16
   \   000001AC   9478               sei
    107                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {      // sensor on port 0?
   \                     ??ExtRS485Ctl_16:
   \   000001AE   9100....           LDS     R16, TData
   \   000001B2   E010               LDI     R17, 0
   \   000001B4   9140....           LDS     R20, PortPair
   \   000001B8   ........           CALL    ?SS_SHR_L02
   \   000001BC   7001               ANDI    R16, 0x01
   \   000001BE   2300               TST     R16
   \   000001C0   F409               BRNE    $+2+2
   \   000001C2   C0BE               RJMP    ??ExtRS485Ctl_17
    108                          UART16552[0].TxFirst = 6;                       // Start packet build at pos.
   \   000001C4   E006               LDI     R16, 6
   \   000001C6   E010               LDI     R17, 0
   \   000001C8   ....               LDI     R30, LOW(UART16552)
   \   000001CA   ....               LDI     R31, (UART16552) >> 8
   \   000001CC   8302               STD     Z+2, R16
   \   000001CE   8313               STD     Z+3, R17
    109                          char SnsType = (TData.RS4.SensorType[0] >> (2 * PortPair)) & 0x3;
   \   000001D0   9100....           LDS     R16, (TData + 1)
   \   000001D4   E010               LDI     R17, 0
   \   000001D6   9140....           LDS     R20, PortPair
   \   000001DA   0F44               LSL     R20
   \   000001DC   ........           CALL    ?SS_SHR_L02
   \   000001E0   2E60               MOV     R6, R16
   \   000001E2   E003               LDI     R16, 3
   \   000001E4   2260               AND     R6, R16
    110                          switch (SnsType) {
   \   000001E6   2D06               MOV     R16, R6
   \   000001E8   5000               SUBI    R16, 0
   \   000001EA   F409               BRNE    $+2+2
   \   000001EC   C04F               RJMP    ??ExtRS485Ctl_18
   \   000001EE   950A               DEC     R16
   \   000001F0   F019               BREQ    ??ExtRS485Ctl_19
   \   000001F2   950A               DEC     R16
   \   000001F4   F151               BREQ    ??ExtRS485Ctl_20
   \   000001F6   C0A1               RJMP    ??ExtRS485Ctl_21
    111                          case 0x01:    //Water ingress??
    112                              switch (SeqCnt) {
   \                     ??ExtRS485Ctl_19:
   \   000001F8   2F08               MOV     R16, R24
   \   000001FA   5000               SUBI    R16, 0
   \   000001FC   F019               BREQ    ??ExtRS485Ctl_22
   \   000001FE   5104               SUBI    R16, 20
   \   00000200   F021               BREQ    ??ExtRS485Ctl_23
   \   00000202   C020               RJMP    ??ExtRS485Ctl_24
    113                              case 0:
    114                                  Uart_BuildReqWISCardStatus(0);          //Card status
   \                     ??ExtRS485Ctl_22:
   \   00000204   E000               LDI     R16, 0
   \   00000206   ....               RCALL   Uart_BuildReqWISCardStatus
    115                                  break;
   \   00000208   C098               RJMP    ??ExtRS485Ctl_21
    116                              case 20:
    117                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
   \                     ??ExtRS485Ctl_23:
   \   0000020A   9100....           LDS     R16, (TData + 1428)
   \   0000020E   2300               TST     R16
   \   00000210   F4B1               BRNE    ??ExtRS485Ctl_25
   \   00000212   9100....           LDS     R16, (TData + 1530)
   \   00000216   9110....           LDS     R17, PortPair
   \   0000021A   1701               CP      R16, R17
   \   0000021C   F481               BRNE    ??ExtRS485Ctl_25
    118                                      Uart_BuildReqWISXData(0, 115);            // Request serial no
   \   0000021E   E713               LDI     R17, 115
   \   00000220   E000               LDI     R16, 0
   \   00000222   ....               RCALL   Uart_BuildReqWISXData
    119                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
   \   00000224   ....               LDI     R30, LOW((TData + 1530))
   \   00000226   ....               LDI     R31, HIGH((TData + 1530))
   \   00000228   8100               LD      R16, Z
   \   0000022A   9503               INC     R16
   \   0000022C   8300               ST      Z, R16
   \   0000022E   9100....           LDS     R16, (TData + 1530)
   \   00000232   3004               CPI     R16, 4
   \   00000234   F048               BRCS    ??ExtRS485Ctl_26
    120                                          TData.RS4.EEPROMPortpair[0] = 0;
   \   00000236   E000               LDI     R16, 0
   \   00000238   9300....           STS     (TData + 1530), R16
   \   0000023C   C07E               RJMP    ??ExtRS485Ctl_21
    121                                      }
    122                                  } else {
    123                                      Uart_BuildReqWISData(0);                //WIS data
   \                     ??ExtRS485Ctl_25:
   \   0000023E   E000               LDI     R16, 0
   \   00000240   ....               RCALL   Uart_BuildReqWISData
    124                                  }
    125                                  break;
   \   00000242   C07B               RJMP    ??ExtRS485Ctl_21
    126                              default:
    127                                  Uart_BuildReqWISData(0);                //WIS data
   \                     ??ExtRS485Ctl_24:
   \   00000244   E000               LDI     R16, 0
   \   00000246   ....               RCALL   Uart_BuildReqWISData
    128                                  break;
    129                              }
    130                              break;
   \                     ??ExtRS485Ctl_26:
   \   00000248   C078               RJMP    ??ExtRS485Ctl_21
    131                          case 0x02: // Radar??
    132                              switch (SeqCnt) {
   \                     ??ExtRS485Ctl_20:
   \   0000024A   2F08               MOV     R16, R24
   \   0000024C   5000               SUBI    R16, 0
   \   0000024E   F0D9               BREQ    ??ExtRS485Ctl_27
   \   00000250   5104               SUBI    R16, 20
   \   00000252   F4B1               BRNE    ??ExtRS485Ctl_28
    133                              case 20:
    134                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
   \   00000254   9100....           LDS     R16, (TData + 1428)
   \   00000258   2300               TST     R16
   \   0000025A   F491               BRNE    ??ExtRS485Ctl_28
   \   0000025C   9100....           LDS     R16, (TData + 1530)
   \   00000260   9110....           LDS     R17, PortPair
   \   00000264   1701               CP      R16, R17
   \   00000266   F461               BRNE    ??ExtRS485Ctl_28
    135                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
   \   00000268   ....               LDI     R30, LOW((TData + 1530))
   \   0000026A   ....               LDI     R31, HIGH((TData + 1530))
   \   0000026C   8100               LD      R16, Z
   \   0000026E   9503               INC     R16
   \   00000270   8300               ST      Z, R16
   \   00000272   9100....           LDS     R16, (TData + 1530)
   \   00000276   3004               CPI     R16, 4
   \   00000278   F018               BRCS    ??ExtRS485Ctl_28
    136                                          TData.RS4.EEPROMPortpair[0] = 0;
   \   0000027A   E000               LDI     R16, 0
   \   0000027C   9300....           STS     (TData + 1530), R16
    137                                      }
    138                                  }
    139                                  // Fall through and send the request
    140                              default:
    141                                  Uart_BuildReqRadarData(0);          // Radar data
   \                     ??ExtRS485Ctl_28:
   \   00000280   E000               LDI     R16, 0
   \   00000282   ....               RCALL   Uart_BuildReqRadarData
    142                                  break;
   \   00000284   C05A               RJMP    ??ExtRS485Ctl_21
    143                              case 0:
    144                                  Uart_BuildReqRadarInfo(0);          //Radar Information
   \                     ??ExtRS485Ctl_27:
   \   00000286   E000               LDI     R16, 0
   \   00000288   ....               RCALL   Uart_BuildReqRadarInfo
    145                                  break;
    146                              }
    147                              break;
   \   0000028A   C057               RJMP    ??ExtRS485Ctl_21
    148                          case 0x00:  // AN-SGCNV
    149                              if ((TData.RS4.ToTargetBuffer[0][0] == true) && // Data ready for this AD card
    150                                  (TData.RS4.ToTargetBuffer[0][1] == PortPair)) {
   \                     ??ExtRS485Ctl_18:
   \   0000028C   9100....           LDS     R16, (TData + 1268)
   \   00000290   3001               CPI     R16, 1
   \   00000292   F469               BRNE    ??ExtRS485Ctl_29
   \   00000294   9100....           LDS     R16, (TData + 1269)
   \   00000298   9110....           LDS     R17, PortPair
   \   0000029C   1701               CP      R16, R17
   \   0000029E   F439               BRNE    ??ExtRS485Ctl_29
    151                                  Uart_BuildSndData(0);                       // add data to AD card package
   \   000002A0   E000               LDI     R16, 0
   \   000002A2   ....               RCALL   Uart_BuildSndData
    152                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
   \   000002A4   E000               LDI     R16, 0
   \   000002A6   ....               RCALL   Uart_BuildReqConfig
    153                                  AskMD[0] = false;
   \   000002A8   E000               LDI     R16, 0
   \   000002AA   2FA0               MOV     R26, R16
   \   000002AC   C002               RJMP    ??ExtRS485Ctl_30
    154                              } else {
    155                                  AskMD[0] = true;
   \                     ??ExtRS485Ctl_29:
   \   000002AE   E001               LDI     R16, 1
   \   000002B0   2FA0               MOV     R26, R16
    156                              }
    157                              if (SeqCnt == 0) {
   \                     ??ExtRS485Ctl_30:
   \   000002B2   2388               TST     R24
   \   000002B4   F419               BRNE    ??ExtRS485Ctl_31
    158                                  Uart_BuildReqCardStatus(0);             //Card status, cmd 27
   \   000002B6   E000               LDI     R16, 0
   \   000002B8   ....               RCALL   Uart_BuildReqCardStatus
   \   000002BA   C03F               RJMP    ??ExtRS485Ctl_21
    159                              } else if (SeqCnt == 5) {
   \                     ??ExtRS485Ctl_31:
   \   000002BC   3085               CPI     R24, 5
   \   000002BE   F419               BRNE    ??ExtRS485Ctl_32
    160                                  Uart_BuildReqR16552(0);                 //Raw data, cmd 13
   \   000002C0   E000               LDI     R16, 0
   \   000002C2   ....               RCALL   Uart_BuildReqR16552
   \   000002C4   C03A               RJMP    ??ExtRS485Ctl_21
    161                              } else if (SeqCnt == 10) {
   \                     ??ExtRS485Ctl_32:
   \   000002C6   308A               CPI     R24, 10
   \   000002C8   F419               BRNE    ??ExtRS485Ctl_33
    162                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
   \   000002CA   E000               LDI     R16, 0
   \   000002CC   ....               RCALL   Uart_BuildReqConfig
   \   000002CE   C035               RJMP    ??ExtRS485Ctl_21
    163                              } else if (SeqCnt == 15) {
   \                     ??ExtRS485Ctl_33:
   \   000002D0   308F               CPI     R24, 15
   \   000002D2   F419               BRNE    ??ExtRS485Ctl_34
    164                                  Uart_BuildReqC16552(0);                 //Cal data, cmd 16
   \   000002D4   E000               LDI     R16, 0
   \   000002D6   ....               RCALL   Uart_BuildReqC16552
   \   000002D8   C030               RJMP    ??ExtRS485Ctl_21
    165                              } else if (SeqCnt == 20) {
   \                     ??ExtRS485Ctl_34:
   \   000002DA   3184               CPI     R24, 20
   \   000002DC   F551               BRNE    ??ExtRS485Ctl_35
    166                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
   \   000002DE   9100....           LDS     R16, (TData + 1428)
   \   000002E2   2300               TST     R16
   \   000002E4   F509               BRNE    ??ExtRS485Ctl_36
   \   000002E6   9100....           LDS     R16, (TData + 1530)
   \   000002EA   9110....           LDS     R17, PortPair
   \   000002EE   1701               CP      R16, R17
   \   000002F0   F4D9               BRNE    ??ExtRS485Ctl_36
    167                                      Uart_BuildReqEEPROMData(0);             //EEpromdata cmd, 24
   \   000002F2   E000               LDI     R16, 0
   \   000002F4   ....               RCALL   Uart_BuildReqEEPROMData
    168                                      if ((TData.RS4.EEPROMADChannel[0] += 2) > 14) { //Next channel
   \   000002F6   ....               LDI     R30, LOW((TData + 1528))
   \   000002F8   ....               LDI     R31, HIGH((TData + 1528))
   \   000002FA   8100               LD      R16, Z
   \   000002FC   5F0E               SUBI    R16, 254
   \   000002FE   8300               ST      Z, R16
   \   00000300   9100....           LDS     R16, (TData + 1528)
   \   00000304   300F               CPI     R16, 15
   \   00000306   F0C8               BRCS    ??ExtRS485Ctl_21
    169                                          TData.RS4.EEPROMADChannel[0] = 0;
   \   00000308   E000               LDI     R16, 0
   \   0000030A   9300....           STS     (TData + 1528), R16
    170                                          if (++TData.RS4.EEPROMPortpair[0] >= 4) {
   \   0000030E   ....               LDI     R30, LOW((TData + 1530))
   \   00000310   ....               LDI     R31, HIGH((TData + 1530))
   \   00000312   8100               LD      R16, Z
   \   00000314   9503               INC     R16
   \   00000316   8300               ST      Z, R16
   \   00000318   9100....           LDS     R16, (TData + 1530)
   \   0000031C   3004               CPI     R16, 4
   \   0000031E   F068               BRCS    ??ExtRS485Ctl_21
    171                                              TData.RS4.EEPROMPortpair[0] = 0;
   \   00000320   E000               LDI     R16, 0
   \   00000322   9300....           STS     (TData + 1530), R16
   \   00000326   C009               RJMP    ??ExtRS485Ctl_21
    172                                          }
    173                                      }
    174                                  } else if (AskMD[0] == true) {
   \                     ??ExtRS485Ctl_36:
   \   00000328   30A1               CPI     R26, 1
   \   0000032A   F439               BRNE    ??ExtRS485Ctl_21
    175                                      Uart_BuildReqM16552(0);                 //Measure data, cmd 10
   \   0000032C   E000               LDI     R16, 0
   \   0000032E   ....               RCALL   Uart_BuildReqM16552
   \   00000330   C004               RJMP    ??ExtRS485Ctl_21
    176                                  }
    177                              } else if (AskMD[0] == true) {
   \                     ??ExtRS485Ctl_35:
   \   00000332   30A1               CPI     R26, 1
   \   00000334   F411               BRNE    ??ExtRS485Ctl_21
    178                                  Uart_BuildReqM16552(0);                 //Measure data, cmd 10
   \   00000336   E000               LDI     R16, 0
   \   00000338   ....               RCALL   Uart_BuildReqM16552
    179                              }
    180                              break;
    181                          }
    182                          Uart_BuildTail16552(0);
   \                     ??ExtRS485Ctl_21:
   \   0000033A   E000               LDI     R16, 0
   \   0000033C   ....               RCALL   Uart_BuildTail16552
   \   0000033E   C012               RJMP    ??ExtRS485Ctl_37
    183                      } else {
    184                          if (TData.RS4.EEPROMPortpair[0] == PortPair) {
   \                     ??ExtRS485Ctl_17:
   \   00000340   9100....           LDS     R16, (TData + 1530)
   \   00000344   9110....           LDS     R17, PortPair
   \   00000348   1701               CP      R16, R17
   \   0000034A   F461               BRNE    ??ExtRS485Ctl_37
    185                              if (++TData.RS4.EEPROMPortpair[0] >= 4) {  // make sure that the EEPROM reading is not stopped
   \   0000034C   ....               LDI     R30, LOW((TData + 1530))
   \   0000034E   ....               LDI     R31, HIGH((TData + 1530))
   \   00000350   8100               LD      R16, Z
   \   00000352   9503               INC     R16
   \   00000354   8300               ST      Z, R16
   \   00000356   9100....           LDS     R16, (TData + 1530)
   \   0000035A   3004               CPI     R16, 4
   \   0000035C   F018               BRCS    ??ExtRS485Ctl_37
    186                                  TData.RS4.EEPROMPortpair[0] = 0;
   \   0000035E   E000               LDI     R16, 0
   \   00000360   9300....           STS     (TData + 1530), R16
    187                              }
    188                          }
    189                      }
    190                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Ctl_37:
   \   00000364   9100....           LDS     R16, TData
   \   00000368   E010               LDI     R17, 0
   \   0000036A   9140....           LDS     R20, PortPair
   \   0000036E   5F4C               SUBI    R20, 252
   \   00000370   ........           CALL    ?SS_SHR_L02
   \   00000374   7001               ANDI    R16, 0x01
   \   00000376   2300               TST     R16
   \   00000378   F409               BRNE    $+2+2
   \   0000037A   C0C4               RJMP    ??ExtRS485Ctl_38
    191                          UART16552[1].TxFirst = 6;                       // Start at
   \   0000037C   E006               LDI     R16, 6
   \   0000037E   E010               LDI     R17, 0
   \   00000380   ....               LDI     R30, LOW(UART16552)
   \   00000382   ....               LDI     R31, (UART16552) >> 8
   \   00000384   8F04               STD     Z+28, R16
   \   00000386   8F15               STD     Z+29, R17
    192                          char SnsType = ((TData.RS4.SensorType[1] >> (2 * PortPair))) & 0x3;
   \   00000388   9100....           LDS     R16, (TData + 2)
   \   0000038C   E010               LDI     R17, 0
   \   0000038E   9140....           LDS     R20, PortPair
   \   00000392   0F44               LSL     R20
   \   00000394   ........           CALL    ?SS_SHR_L02
   \   00000398   2E60               MOV     R6, R16
   \   0000039A   E003               LDI     R16, 3
   \   0000039C   2260               AND     R6, R16
    193                          switch (SnsType) {
   \   0000039E   2D06               MOV     R16, R6
   \   000003A0   5000               SUBI    R16, 0
   \   000003A2   F409               BRNE    $+2+2
   \   000003A4   C04F               RJMP    ??ExtRS485Ctl_39
   \   000003A6   950A               DEC     R16
   \   000003A8   F019               BREQ    ??ExtRS485Ctl_40
   \   000003AA   950A               DEC     R16
   \   000003AC   F151               BREQ    ??ExtRS485Ctl_41
   \   000003AE   C0A6               RJMP    ??ExtRS485Ctl_42
    194                          case 0x01:    //Water ingress??
    195                              switch (SeqCnt) {
   \                     ??ExtRS485Ctl_40:
   \   000003B0   2F08               MOV     R16, R24
   \   000003B2   5000               SUBI    R16, 0
   \   000003B4   F019               BREQ    ??ExtRS485Ctl_43
   \   000003B6   5104               SUBI    R16, 20
   \   000003B8   F021               BREQ    ??ExtRS485Ctl_44
   \   000003BA   C020               RJMP    ??ExtRS485Ctl_45
    196                              case 0:
    197                                  Uart_BuildReqWISCardStatus(1);          //Card status
   \                     ??ExtRS485Ctl_43:
   \   000003BC   E001               LDI     R16, 1
   \   000003BE   ....               RCALL   Uart_BuildReqWISCardStatus
    198                                  break;
   \   000003C0   C09D               RJMP    ??ExtRS485Ctl_42
    199                              case 20:
    200                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
   \                     ??ExtRS485Ctl_44:
   \   000003C2   9100....           LDS     R16, (TData + 1478)
   \   000003C6   2300               TST     R16
   \   000003C8   F4B1               BRNE    ??ExtRS485Ctl_46
   \   000003CA   9100....           LDS     R16, (TData + 1531)
   \   000003CE   9110....           LDS     R17, PortPair
   \   000003D2   1701               CP      R16, R17
   \   000003D4   F481               BRNE    ??ExtRS485Ctl_46
    201                                      Uart_BuildReqWISXData(1, 115);            // Request serial no
   \   000003D6   E713               LDI     R17, 115
   \   000003D8   E001               LDI     R16, 1
   \   000003DA   ....               RCALL   Uart_BuildReqWISXData
    202                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
   \   000003DC   ....               LDI     R30, LOW((TData + 1531))
   \   000003DE   ....               LDI     R31, HIGH((TData + 1531))
   \   000003E0   8100               LD      R16, Z
   \   000003E2   9503               INC     R16
   \   000003E4   8300               ST      Z, R16
   \   000003E6   9100....           LDS     R16, (TData + 1531)
   \   000003EA   3004               CPI     R16, 4
   \   000003EC   F048               BRCS    ??ExtRS485Ctl_47
    203                                          TData.RS4.EEPROMPortpair[1] = 0;
   \   000003EE   E000               LDI     R16, 0
   \   000003F0   9300....           STS     (TData + 1531), R16
   \   000003F4   C083               RJMP    ??ExtRS485Ctl_42
    204                                      }
    205                                  } else {
    206                                      Uart_BuildReqWISData(1);                //WIS data
   \                     ??ExtRS485Ctl_46:
   \   000003F6   E001               LDI     R16, 1
   \   000003F8   ....               RCALL   Uart_BuildReqWISData
    207                                  }
    208                                  break;
   \   000003FA   C080               RJMP    ??ExtRS485Ctl_42
    209                              default:
    210                                  Uart_BuildReqWISData(1);                //WIS data
   \                     ??ExtRS485Ctl_45:
   \   000003FC   E001               LDI     R16, 1
   \   000003FE   ....               RCALL   Uart_BuildReqWISData
    211                                  break;
    212                              }
    213                              break;
   \                     ??ExtRS485Ctl_47:
   \   00000400   C07D               RJMP    ??ExtRS485Ctl_42
    214                          case 0x02:    // Radar??
    215                              switch (SeqCnt) {
   \                     ??ExtRS485Ctl_41:
   \   00000402   2F08               MOV     R16, R24
   \   00000404   5000               SUBI    R16, 0
   \   00000406   F0D9               BREQ    ??ExtRS485Ctl_48
   \   00000408   5104               SUBI    R16, 20
   \   0000040A   F4B1               BRNE    ??ExtRS485Ctl_49
    216                              case 20:
    217                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
   \   0000040C   9100....           LDS     R16, (TData + 1478)
   \   00000410   2300               TST     R16
   \   00000412   F491               BRNE    ??ExtRS485Ctl_49
   \   00000414   9100....           LDS     R16, (TData + 1531)
   \   00000418   9110....           LDS     R17, PortPair
   \   0000041C   1701               CP      R16, R17
   \   0000041E   F461               BRNE    ??ExtRS485Ctl_49
    218                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
   \   00000420   ....               LDI     R30, LOW((TData + 1531))
   \   00000422   ....               LDI     R31, HIGH((TData + 1531))
   \   00000424   8100               LD      R16, Z
   \   00000426   9503               INC     R16
   \   00000428   8300               ST      Z, R16
   \   0000042A   9100....           LDS     R16, (TData + 1531)
   \   0000042E   3004               CPI     R16, 4
   \   00000430   F018               BRCS    ??ExtRS485Ctl_49
    219                                          TData.RS4.EEPROMPortpair[1] = 0;
   \   00000432   E000               LDI     R16, 0
   \   00000434   9300....           STS     (TData + 1531), R16
    220                                      }
    221                                  }
    222                                  // Fall through and send the request
    223                              default:
    224                                  Uart_BuildReqRadarData(1);          // Radar data
   \                     ??ExtRS485Ctl_49:
   \   00000438   E001               LDI     R16, 1
   \   0000043A   ....               RCALL   Uart_BuildReqRadarData
    225                                  break;
   \   0000043C   C05F               RJMP    ??ExtRS485Ctl_42
    226                              case 0:
    227                                  Uart_BuildReqRadarInfo(1);          //Radar Information
   \                     ??ExtRS485Ctl_48:
   \   0000043E   E001               LDI     R16, 1
   \   00000440   ....               RCALL   Uart_BuildReqRadarInfo
    228                                  break;
    229                              }
    230                              break;
   \   00000442   C05C               RJMP    ??ExtRS485Ctl_42
    231                          case 0x00:  // AN-SGCNV
    232                              if ((TData.RS4.ToTargetBuffer[1][0] == true) && // Data ready for this AD card
    233                                  (TData.RS4.ToTargetBuffer[1][1] == (PortPair + 4))) {
   \                     ??ExtRS485Ctl_39:
   \   00000444   9100....           LDS     R16, (TData + 1348)
   \   00000448   3001               CPI     R16, 1
   \   0000044A   F491               BRNE    ??ExtRS485Ctl_50
   \   0000044C   9120....           LDS     R18, (TData + 1349)
   \   00000450   E030               LDI     R19, 0
   \   00000452   9100....           LDS     R16, PortPair
   \   00000456   E010               LDI     R17, 0
   \   00000458   5F0C               SUBI    R16, 252
   \   0000045A   4F1F               SBCI    R17, 255
   \   0000045C   1720               CP      R18, R16
   \   0000045E   0731               CPC     R19, R17
   \   00000460   F439               BRNE    ??ExtRS485Ctl_50
    234                                  Uart_BuildSndData(1);                       // add data to AD card package
   \   00000462   E001               LDI     R16, 1
   \   00000464   ....               RCALL   Uart_BuildSndData
    235                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
   \   00000466   E001               LDI     R16, 1
   \   00000468   ....               RCALL   Uart_BuildReqConfig
    236                                  AskMD[1] = false;
   \   0000046A   E000               LDI     R16, 0
   \   0000046C   2FB0               MOV     R27, R16
   \   0000046E   C002               RJMP    ??ExtRS485Ctl_51
    237                              } else {
    238                                  AskMD[1] = true;
   \                     ??ExtRS485Ctl_50:
   \   00000470   E001               LDI     R16, 1
   \   00000472   2FB0               MOV     R27, R16
    239                              }
    240                              if (SeqCnt == 0) {
   \                     ??ExtRS485Ctl_51:
   \   00000474   2388               TST     R24
   \   00000476   F419               BRNE    ??ExtRS485Ctl_52
    241                                  Uart_BuildReqCardStatus(1);             //Card status, cmd 27
   \   00000478   E001               LDI     R16, 1
   \   0000047A   ....               RCALL   Uart_BuildReqCardStatus
   \   0000047C   C03F               RJMP    ??ExtRS485Ctl_42
    242                              } else if (SeqCnt == 5) {
   \                     ??ExtRS485Ctl_52:
   \   0000047E   3085               CPI     R24, 5
   \   00000480   F419               BRNE    ??ExtRS485Ctl_53
    243                                  Uart_BuildReqR16552(1);                 //Raw data cmd, 13
   \   00000482   E001               LDI     R16, 1
   \   00000484   ....               RCALL   Uart_BuildReqR16552
   \   00000486   C03A               RJMP    ??ExtRS485Ctl_42
    244                              } else if (SeqCnt == 10) {
   \                     ??ExtRS485Ctl_53:
   \   00000488   308A               CPI     R24, 10
   \   0000048A   F419               BRNE    ??ExtRS485Ctl_54
    245                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
   \   0000048C   E001               LDI     R16, 1
   \   0000048E   ....               RCALL   Uart_BuildReqConfig
   \   00000490   C035               RJMP    ??ExtRS485Ctl_42
    246                              } else if (SeqCnt == 15) {
   \                     ??ExtRS485Ctl_54:
   \   00000492   308F               CPI     R24, 15
   \   00000494   F419               BRNE    ??ExtRS485Ctl_55
    247                                  Uart_BuildReqC16552(1);                 //Cal data  cmd, 16
   \   00000496   E001               LDI     R16, 1
   \   00000498   ....               RCALL   Uart_BuildReqC16552
   \   0000049A   C030               RJMP    ??ExtRS485Ctl_42
    248                              } else if (SeqCnt == 20) {
   \                     ??ExtRS485Ctl_55:
   \   0000049C   3184               CPI     R24, 20
   \   0000049E   F551               BRNE    ??ExtRS485Ctl_56
    249                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
   \   000004A0   9100....           LDS     R16, (TData + 1478)
   \   000004A4   2300               TST     R16
   \   000004A6   F509               BRNE    ??ExtRS485Ctl_57
   \   000004A8   9100....           LDS     R16, (TData + 1531)
   \   000004AC   9110....           LDS     R17, PortPair
   \   000004B0   1701               CP      R16, R17
   \   000004B2   F4D9               BRNE    ??ExtRS485Ctl_57
    250                                      Uart_BuildReqEEPROMData(1);             //EEpromdata cmd, 24
   \   000004B4   E001               LDI     R16, 1
   \   000004B6   ....               RCALL   Uart_BuildReqEEPROMData
    251                                      if ((TData.RS4.EEPROMADChannel[1] += 2) > 14) { //Next channel
   \   000004B8   ....               LDI     R30, LOW((TData + 1529))
   \   000004BA   ....               LDI     R31, HIGH((TData + 1529))
   \   000004BC   8100               LD      R16, Z
   \   000004BE   5F0E               SUBI    R16, 254
   \   000004C0   8300               ST      Z, R16
   \   000004C2   9100....           LDS     R16, (TData + 1529)
   \   000004C6   300F               CPI     R16, 15
   \   000004C8   F0C8               BRCS    ??ExtRS485Ctl_42
    252                                          TData.RS4.EEPROMADChannel[1] = 0;
   \   000004CA   E000               LDI     R16, 0
   \   000004CC   9300....           STS     (TData + 1529), R16
    253                                          if (++TData.RS4.EEPROMPortpair[1] >= 4) {
   \   000004D0   ....               LDI     R30, LOW((TData + 1531))
   \   000004D2   ....               LDI     R31, HIGH((TData + 1531))
   \   000004D4   8100               LD      R16, Z
   \   000004D6   9503               INC     R16
   \   000004D8   8300               ST      Z, R16
   \   000004DA   9100....           LDS     R16, (TData + 1531)
   \   000004DE   3004               CPI     R16, 4
   \   000004E0   F068               BRCS    ??ExtRS485Ctl_42
    254                                              TData.RS4.EEPROMPortpair[1] = 0;
   \   000004E2   E000               LDI     R16, 0
   \   000004E4   9300....           STS     (TData + 1531), R16
   \   000004E8   C009               RJMP    ??ExtRS485Ctl_42
    255                                          }
    256                                      }
    257                                  } else if (AskMD[1] == true) {
   \                     ??ExtRS485Ctl_57:
   \   000004EA   30B1               CPI     R27, 1
   \   000004EC   F439               BRNE    ??ExtRS485Ctl_42
    258                                      Uart_BuildReqM16552(1);                 //Measure data, cmd 10
   \   000004EE   E001               LDI     R16, 1
   \   000004F0   ....               RCALL   Uart_BuildReqM16552
   \   000004F2   C004               RJMP    ??ExtRS485Ctl_42
    259                                  }
    260                              } else if (AskMD[1] == true) {
   \                     ??ExtRS485Ctl_56:
   \   000004F4   30B1               CPI     R27, 1
   \   000004F6   F411               BRNE    ??ExtRS485Ctl_42
    261                                  Uart_BuildReqM16552(1);                 //Measure data, cmd 10
   \   000004F8   E001               LDI     R16, 1
   \   000004FA   ....               RCALL   Uart_BuildReqM16552
    262                              }
    263                              break;
    264                          }
    265                          Uart_BuildTail16552(1);
   \                     ??ExtRS485Ctl_42:
   \   000004FC   E001               LDI     R16, 1
   \   000004FE   ........           CALL    Uart_BuildTail16552
   \   00000502   C012               RJMP    ??ExtRS485Ctl_58
    266                      } else {
    267                          if (TData.RS4.EEPROMPortpair[1] == PortPair) {
   \                     ??ExtRS485Ctl_38:
   \   00000504   9100....           LDS     R16, (TData + 1531)
   \   00000508   9110....           LDS     R17, PortPair
   \   0000050C   1701               CP      R16, R17
   \   0000050E   F461               BRNE    ??ExtRS485Ctl_58
    268                              if (++TData.RS4.EEPROMPortpair[1] >= 4) {  // make sure that the EEPROM reading is not stopped
   \   00000510   ....               LDI     R30, LOW((TData + 1531))
   \   00000512   ....               LDI     R31, HIGH((TData + 1531))
   \   00000514   8100               LD      R16, Z
   \   00000516   9503               INC     R16
   \   00000518   8300               ST      Z, R16
   \   0000051A   9100....           LDS     R16, (TData + 1531)
   \   0000051E   3004               CPI     R16, 4
   \   00000520   F018               BRCS    ??ExtRS485Ctl_58
    269                                  TData.RS4.EEPROMPortpair[1] = 0;
   \   00000522   E000               LDI     R16, 0
   \   00000524   9300....           STS     (TData + 1531), R16
    270                              }
    271                          }
    272                      }
    273                      EventStatus = OS_WaitEventTimed(1, 1000);              // Wait for ready to send next
   \                     ??ExtRS485Ctl_58:
   \   00000528   EE28               LDI     R18, 232
   \   0000052A   E033               LDI     R19, 3
   \   0000052C   E001               LDI     R16, 1
   \   0000052E   ........           CALL    OS_WaitEventTimed
   \   00000532   2E50               MOV     R5, R16
    274                      if (EventStatus & 0x02) {
   \   00000534   FE51               SBRS    R5, 1
   \   00000536   C003               RJMP    ??ExtRS485Ctl_59
    275                          if (PowerOnTimer >= POWER_ON_CNT) {
   \   00000538   3095               CPI     R25, 5
   \   0000053A   F008               BRCS    ??ExtRS485Ctl_59
    276                              PowerOnTimer = 0;                              // and start over again
   \   0000053C   E090               LDI     R25, 0
    277                          }
    278                      }
    279                  }
   \                     ??ExtRS485Ctl_59:
   \   0000053E   ....               LDI     R30, LOW(PortPair)
   \   00000540   ....               LDI     R31, (PortPair) >> 8
   \   00000542   8100               LD      R16, Z
   \   00000544   9503               INC     R16
   \   00000546   8300               ST      Z, R16
   \   00000548   CDC7               RJMP    ??ExtRS485Ctl_6
    280                  if (++SeqCnt > 20) {              //  all request within 20 x 2 sec.
   \                     ??ExtRS485Ctl_7:
   \   0000054A   9583               INC     R24
   \   0000054C   3185               CPI     R24, 21
   \   0000054E   F408               BRCC    $+2+2
   \   00000550   CDC0               RJMP    ??ExtRS485Ctl_5
    281                      SeqCnt = 0;
   \   00000552   E080               LDI     R24, 0
   \   00000554   CDBE               RJMP    ??ExtRS485Ctl_5
   \   00000556                      REQUIRE _A_PORTC
   \   00000556                      REQUIRE _A_PORTE
    282                  }
    283              }
    284          }
    285          
    286          
    287          /*************************************************************************
    288          *   (This is a task)
    289          *  Usart handler UART receive data
    290          *
    291          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    292          void ExtRS485Rec(void) {
   \                     ExtRS485Rec:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    293          
    294              char portresp;
    295              char temp;
    296          
    297              OS_Delay(UART_START_DELAY + 800);           // Waiting for target startup and power on sequence
   \   00000004   E900               LDI     R16, 144
   \   00000006   E11A               LDI     R17, 26
   \   00000008   ........           CALL    OS_Delay
    298          
    299              while (1) {
    300                  OS_Delay(499);                          // wait for answer and correct the speed (.5 * 4 = 2 sec update)
   \                     ??ExtRS485Rec_0:
   \   0000000C   EF03               LDI     R16, 243
   \   0000000E   E011               LDI     R17, 1
   \   00000010   ........           CALL    OS_Delay
    301                  portresp = OS_WaitEventTimed(3, 1);     // Wait for receive from both channels
   \   00000014   E021               LDI     R18, 1
   \   00000016   E030               LDI     R19, 0
   \   00000018   E003               LDI     R16, 3
   \   0000001A   ........           CALL    OS_WaitEventTimed
   \   0000001E   2F90               MOV     R25, R16
    302                  if (portresp & 0x01) {                  // answer on ch 0
   \   00000020   FF90               SBRS    R25, 0
   \   00000022   C019               RJMP    ??ExtRS485Rec_1
    303                      Usart16552CheckPackage(0);         // handle incomming package
   \   00000024   E000               LDI     R16, 0
   \   00000026   ....               RCALL   Usart16552CheckPackage
    304                      TData.RS4.FailCnt[PortPair][0] = 0; // Reset counter
   \   00000028   E000               LDI     R16, 0
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   9120....           LDS     R18, PortPair
   \   00000030   E034               LDI     R19, 4
   \   00000032   9F23               MUL     R18, R19
   \   00000034   01F0               MOVW    R31:R30, R1:R0
   \   00000036   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000038   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000003A   8703               STD     Z+11, R16
   \   0000003C   8714               STD     Z+12, R17
    305                      TData.RS4.IOUnitStatus[PortPair] &= ~COMFAIL_BIT; // No error
   \   0000003E   91E0....           LDS     R30, PortPair
   \   00000042   E0F0               LDI     R31, 0
   \   00000044   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000048   8103               LDD     R16, Z+3
   \   0000004A   7F0E               ANDI    R16, 0xFE
   \   0000004C   8303               STD     Z+3, R16
    306                      UART16552[0].RxFaultCnt = 0;          // OK package on 16552 channel
   \   0000004E   E000               LDI     R16, 0
   \   00000050   9300....           STS     (UART16552 + 24), R16
   \   00000054   C079               RJMP    ??ExtRS485Rec_2
    307                  } else {
    308                      UART16552[0].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_1:
   \   00000056   ....               LDI     R30, LOW(UART16552)
   \   00000058   ....               LDI     R31, (UART16552) >> 8
   \   0000005A   8D00               LDD     R16, Z+24
   \   0000005C   9503               INC     R16
   \   0000005E   8F00               STD     Z+24, R16
    309                      TData.RS4.FailCnt[PortPair][1]++;      // no answer total counter
   \   00000060   9100....           LDS     R16, PortPair
   \   00000064   E014               LDI     R17, 4
   \   00000066   9F01               MUL     R16, R17
   \   00000068   01F0               MOVW    R31:R30, R1:R0
   \   0000006A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000006E   8505               LDD     R16, Z+13
   \   00000070   8516               LDD     R17, Z+14
   \   00000072   5F0F               SUBI    R16, 255
   \   00000074   4F1F               SBCI    R17, 255
   \   00000076   8705               STD     Z+13, R16
   \   00000078   8716               STD     Z+14, R17
    310                      if (TData.RS4.FailCnt[PortPair][0]++ > FAILCNT_ERROR) {
   \   0000007A   9140....           LDS     R20, PortPair
   \   0000007E   E004               LDI     R16, 4
   \   00000080   9F40               MUL     R20, R16
   \   00000082   01F0               MOVW    R31:R30, R1:R0
   \   00000084   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000086   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000088   8523               LDD     R18, Z+11
   \   0000008A   8534               LDD     R19, Z+12
   \   0000008C   0189               MOVW    R17:R16, R19:R18
   \   0000008E   5F0F               SUBI    R16, 255
   \   00000090   4F1F               SBCI    R17, 255
   \   00000092   E054               LDI     R21, 4
   \   00000094   9F45               MUL     R20, R21
   \   00000096   01F0               MOVW    R31:R30, R1:R0
   \   00000098   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000009A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000009C   8703               STD     Z+11, R16
   \   0000009E   8714               STD     Z+12, R17
   \   000000A0   3026               CPI     R18, 6
   \   000000A2   4030               SBCI    R19, 0
   \   000000A4   F040               BRCS    ??ExtRS485Rec_3
    311                          TData.RS4.IOUnitStatus[PortPair] |= COMFAIL_BIT;      // report fault
   \   000000A6   91E0....           LDS     R30, PortPair
   \   000000AA   E0F0               LDI     R31, 0
   \   000000AC   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000AE   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000B0   8103               LDD     R16, Z+3
   \   000000B2   6001               ORI     R16, 0x01
   \   000000B4   8303               STD     Z+3, R16
    312                      }
    313                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
   \                     ??ExtRS485Rec_3:
   \   000000B6   9100....           LDS     R16, TData
   \   000000BA   E010               LDI     R17, 0
   \   000000BC   9140....           LDS     R20, PortPair
   \   000000C0   ........           CALL    ?SS_SHR_L02
   \   000000C4   7001               ANDI    R16, 0x01
   \   000000C6   2300               TST     R16
   \   000000C8   F1F9               BREQ    ??ExtRS485Rec_2
    314                          if ((TData.RS4.FailCnt[PortPair][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   000000CA   9100....           LDS     R16, PortPair
   \   000000CE   E014               LDI     R17, 4
   \   000000D0   9F01               MUL     R16, R17
   \   000000D2   01F0               MOVW    R31:R30, R1:R0
   \   000000D4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000D8   8503               LDD     R16, Z+11
   \   000000DA   8514               LDD     R17, Z+12
   \   000000DC   7007               ANDI    R16, 0x07
   \   000000DE   3004               CPI     R16, 4
   \   000000E0   F599               BRNE    ??ExtRS485Rec_2
    315                              // volatile undefined behavior
    316                              // ClrBit(PORTC, (0x01 << PortPair));            // Switch off power
    317                              //
    318                              temp = (0x01 << PortPair);
   \   000000E2   9140....           LDS     R20, PortPair
   \   000000E6   E001               LDI     R16, 1
   \   000000E8   E010               LDI     R17, 0
   \   000000EA   ........           CALL    ?S_SHL_L02
   \   000000EE   2F80               MOV     R24, R16
    319                              ClrBit(PORTC, temp);            // Switch off power
   \   000000F0   9100....           LDS     R16, (OS_Global + 1)
   \   000000F4   7F00               ANDI    R16, 0xF0
   \   000000F6   2300               TST     R16
   \   000000F8   F021               BREQ    ??ExtRS485Rec_4
   \   000000FA   E909               LDI     R16, 153
   \   000000FC   E010               LDI     R17, 0
   \   000000FE   ........           CALL    OS_Error
   \                     ??ExtRS485Rec_4:
   \   00000102   94F8               cli
   \   00000104   ....               LDI     R30, LOW(OS_Global)
   \   00000106   ....               LDI     R31, (OS_Global) >> 8
   \   00000108   8101               LDD     R16, Z+1
   \   0000010A   9503               INC     R16
   \   0000010C   8301               STD     Z+1, R16
   \   0000010E   2F08               MOV     R16, R24
   \   00000110   9500               COM     R16
   \   00000112   B118               IN      R17, 0x08
   \   00000114   2310               AND     R17, R16
   \   00000116   B918               OUT     0x08, R17
   \   00000118   9100....           LDS     R16, (OS_Global + 1)
   \   0000011C   7F00               ANDI    R16, 0xF0
   \   0000011E   2300               TST     R16
   \   00000120   F021               BREQ    ??ExtRS485Rec_5
   \   00000122   E909               LDI     R16, 153
   \   00000124   E010               LDI     R17, 0
   \   00000126   ........           CALL    OS_Error
   \                     ??ExtRS485Rec_5:
   \   0000012A   ....               LDI     R30, LOW(OS_Global)
   \   0000012C   ....               LDI     R31, (OS_Global) >> 8
   \   0000012E   8101               LDD     R16, Z+1
   \   00000130   950A               DEC     R16
   \   00000132   8301               STD     Z+1, R16
   \   00000134   9100....           LDS     R16, (OS_Global + 1)
   \   00000138   2300               TST     R16
   \   0000013A   F409               BRNE    ??ExtRS485Rec_6
   \   0000013C   9478               sei
    320                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_6:
   \   0000013E   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   00000140   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   00000142   E002               LDI     R16, 2
   \   00000144   ........           CALL    OS_SignalEvent
    321                          }
    322                      }
    323                  }
    324                  if (portresp & 0x02) {                  // answer on ch 1
   \                     ??ExtRS485Rec_2:
   \   00000148   FF91               SBRS    R25, 1
   \   0000014A   C019               RJMP    ??ExtRS485Rec_7
    325                      Usart16552CheckPackage(1);         // handle incomming package
   \   0000014C   E001               LDI     R16, 1
   \   0000014E   ....               RCALL   Usart16552CheckPackage
    326                      TData.RS4.FailCnt[PortPair + 4][0] = 0; // Reset counter
   \   00000150   E000               LDI     R16, 0
   \   00000152   E010               LDI     R17, 0
   \   00000154   9120....           LDS     R18, PortPair
   \   00000158   E034               LDI     R19, 4
   \   0000015A   9F23               MUL     R18, R19
   \   0000015C   01F0               MOVW    R31:R30, R1:R0
   \   0000015E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000160   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000162   8F03               STD     Z+27, R16
   \   00000164   8F14               STD     Z+28, R17
    327                      TData.RS4.IOUnitStatus[PortPair + 4] &= ~COMFAIL_BIT; // No error
   \   00000166   91E0....           LDS     R30, PortPair
   \   0000016A   E0F0               LDI     R31, 0
   \   0000016C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000016E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000170   8107               LDD     R16, Z+7
   \   00000172   7F0E               ANDI    R16, 0xFE
   \   00000174   8307               STD     Z+7, R16
    328                      UART16552[1].RxFaultCnt = 0;          // OK package on 16552 channel
   \   00000176   E000               LDI     R16, 0
   \   00000178   9300....           STS     (UART16552 + 50), R16
   \   0000017C   C07C               RJMP    ??ExtRS485Rec_8
    329                  } else {
    330                      UART16552[1].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_7:
   \   0000017E   ....               LDI     R30, LOW(UART16552)
   \   00000180   ....               LDI     R31, (UART16552) >> 8
   \   00000182   A902               LDD     R16, Z+50
   \   00000184   9503               INC     R16
   \   00000186   AB02               STD     Z+50, R16
    331                      TData.RS4.FailCnt[PortPair + 4][1]++;      // no answer
   \   00000188   9100....           LDS     R16, PortPair
   \   0000018C   E014               LDI     R17, 4
   \   0000018E   9F01               MUL     R16, R17
   \   00000190   01F0               MOVW    R31:R30, R1:R0
   \   00000192   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000194   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000196   8D05               LDD     R16, Z+29
   \   00000198   8D16               LDD     R17, Z+30
   \   0000019A   5F0F               SUBI    R16, 255
   \   0000019C   4F1F               SBCI    R17, 255
   \   0000019E   8F05               STD     Z+29, R16
   \   000001A0   8F16               STD     Z+30, R17
    332                      if (TData.RS4.FailCnt[PortPair + 4][0]++ > FAILCNT_ERROR) {
   \   000001A2   9140....           LDS     R20, PortPair
   \   000001A6   E004               LDI     R16, 4
   \   000001A8   9F40               MUL     R20, R16
   \   000001AA   01F0               MOVW    R31:R30, R1:R0
   \   000001AC   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001AE   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001B0   8D23               LDD     R18, Z+27
   \   000001B2   8D34               LDD     R19, Z+28
   \   000001B4   0189               MOVW    R17:R16, R19:R18
   \   000001B6   5F0F               SUBI    R16, 255
   \   000001B8   4F1F               SBCI    R17, 255
   \   000001BA   E054               LDI     R21, 4
   \   000001BC   9F45               MUL     R20, R21
   \   000001BE   01F0               MOVW    R31:R30, R1:R0
   \   000001C0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001C2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001C4   8F03               STD     Z+27, R16
   \   000001C6   8F14               STD     Z+28, R17
   \   000001C8   3026               CPI     R18, 6
   \   000001CA   4030               SBCI    R19, 0
   \   000001CC   F040               BRCS    ??ExtRS485Rec_9
    333                          TData.RS4.IOUnitStatus[PortPair + 4] |= COMFAIL_BIT;      // report fault
   \   000001CE   91E0....           LDS     R30, PortPair
   \   000001D2   E0F0               LDI     R31, 0
   \   000001D4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001D6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001D8   8107               LDD     R16, Z+7
   \   000001DA   6001               ORI     R16, 0x01
   \   000001DC   8307               STD     Z+7, R16
    334                      }
    335                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Rec_9:
   \   000001DE   9100....           LDS     R16, TData
   \   000001E2   E010               LDI     R17, 0
   \   000001E4   9140....           LDS     R20, PortPair
   \   000001E8   5F4C               SUBI    R20, 252
   \   000001EA   ........           CALL    ?SS_SHR_L02
   \   000001EE   7001               ANDI    R16, 0x01
   \   000001F0   2300               TST     R16
   \   000001F2   F409               BRNE    $+2+2
   \   000001F4   C040               RJMP    ??ExtRS485Rec_8
    336                          if ((TData.RS4.FailCnt[PortPair + 4][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   000001F6   9100....           LDS     R16, PortPair
   \   000001FA   E014               LDI     R17, 4
   \   000001FC   9F01               MUL     R16, R17
   \   000001FE   01F0               MOVW    R31:R30, R1:R0
   \   00000200   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000202   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000204   8D03               LDD     R16, Z+27
   \   00000206   8D14               LDD     R17, Z+28
   \   00000208   7007               ANDI    R16, 0x07
   \   0000020A   3004               CPI     R16, 4
   \   0000020C   F5A1               BRNE    ??ExtRS485Rec_8
    337                              // volatile undefined behavior
    338                              // ClrBit(PORTC, (0x01 << (PortPair + 4)));            // Switch off power
    339                              //
    340                              temp = (0x01 << (PortPair + 4));
   \   0000020E   9140....           LDS     R20, PortPair
   \   00000212   5F4C               SUBI    R20, 252
   \   00000214   E001               LDI     R16, 1
   \   00000216   E010               LDI     R17, 0
   \   00000218   ........           CALL    ?S_SHL_L02
   \   0000021C   2F80               MOV     R24, R16
    341                              ClrBit(PORTC, temp);            // Switch off power
   \   0000021E   9100....           LDS     R16, (OS_Global + 1)
   \   00000222   7F00               ANDI    R16, 0xF0
   \   00000224   2300               TST     R16
   \   00000226   F021               BREQ    ??ExtRS485Rec_10
   \   00000228   E909               LDI     R16, 153
   \   0000022A   E010               LDI     R17, 0
   \   0000022C   ........           CALL    OS_Error
   \                     ??ExtRS485Rec_10:
   \   00000230   94F8               cli
   \   00000232   ....               LDI     R30, LOW(OS_Global)
   \   00000234   ....               LDI     R31, (OS_Global) >> 8
   \   00000236   8101               LDD     R16, Z+1
   \   00000238   9503               INC     R16
   \   0000023A   8301               STD     Z+1, R16
   \   0000023C   2F08               MOV     R16, R24
   \   0000023E   9500               COM     R16
   \   00000240   B118               IN      R17, 0x08
   \   00000242   2310               AND     R17, R16
   \   00000244   B918               OUT     0x08, R17
   \   00000246   9100....           LDS     R16, (OS_Global + 1)
   \   0000024A   7F00               ANDI    R16, 0xF0
   \   0000024C   2300               TST     R16
   \   0000024E   F021               BREQ    ??ExtRS485Rec_11
   \   00000250   E909               LDI     R16, 153
   \   00000252   E010               LDI     R17, 0
   \   00000254   ........           CALL    OS_Error
   \                     ??ExtRS485Rec_11:
   \   00000258   ....               LDI     R30, LOW(OS_Global)
   \   0000025A   ....               LDI     R31, (OS_Global) >> 8
   \   0000025C   8101               LDD     R16, Z+1
   \   0000025E   950A               DEC     R16
   \   00000260   8301               STD     Z+1, R16
   \   00000262   9100....           LDS     R16, (OS_Global + 1)
   \   00000266   2300               TST     R16
   \   00000268   F409               BRNE    ??ExtRS485Rec_12
   \   0000026A   9478               sei
    342                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_12:
   \   0000026C   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   0000026E   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   00000270   E002               LDI     R16, 2
   \   00000272   ........           CALL    OS_SignalEvent
    343                          }
    344                      }
    345                  }
    346                  OS_SignalEvent(1, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_8:
   \   00000276   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   00000278   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   0000027A   E001               LDI     R16, 1
   \   0000027C   ........           CALL    OS_SignalEvent
   \   00000280   CEC5               RJMP    ??ExtRS485Rec_0
   \   00000282                      REQUIRE _A_PORTC
    347              }
    348          }
    349          
    350          /*************************************************************************
    351          *
    352          *  Set ports on or off
    353          *
    354          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    355          void SetRS4Port(void) {
   \                     SetRS4Port:
    356          
    357              PORTC = TData.RS4.PortUsed;
   \   00000000   9100....           LDS     R16, TData
   \   00000004   B908               OUT     0x08, R16
    358          
    359          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_PORTC
    360          
    361          /*************************************************************************
    362          *
    363          *  Check the incoming packages from AN_SGCNV / WIS
    364          *
    365          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    366          void Usart16552CheckPackage(char ch) {
   \                     Usart16552CheckPackage:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
    367          
    368              unsigned short pointer;
    369              char count_out, more;
    370          
    371              count_out = MAX_PROT_CMD;                  // max command
   \   00000006   EFAF               LDI     R26, 255
    372              more = true;
   \   00000008   E0B1               LDI     R27, 1
    373              pointer = 4;
   \   0000000A   E084               LDI     R24, 4
   \   0000000C   E090               LDI     R25, 0
    374              do {
    375                  if (!CheckActionUart16552(ch, pointer)) {
   \                     ??Usart16552CheckPackage_0:
   \   0000000E   019C               MOVW    R19:R18, R25:R24
   \   00000010   2D04               MOV     R16, R4
   \   00000012   ....               RCALL   CheckActionUart16552
   \   00000014   2300               TST     R16
   \   00000016   F409               BRNE    ??Usart16552CheckPackage_1
    376                      more = false;                          // terminate while loop
   \   00000018   E0B0               LDI     R27, 0
    377                  }
    378                  pointer += UART16552[ch].pRxBuffer[pointer + 1] + 2;            // Point to a command cmd hb/lb
   \                     ??Usart16552CheckPackage_1:
   \   0000001A   E10A               LDI     R16, 26
   \   0000001C   9E40               MUL     R4, R16
   \   0000001E   01F0               MOVW    R31:R30, R1:R0
   \   00000020   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000022   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000024   8502               LDD     R16, Z+10
   \   00000026   8513               LDD     R17, Z+11
   \   00000028   0F08               ADD     R16, R24
   \   0000002A   1F19               ADC     R17, R25
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   8101               LDD     R16, Z+1
   \   00000030   E010               LDI     R17, 0
   \   00000032   5F0E               SUBI    R16, 254
   \   00000034   4F1F               SBCI    R17, 255
   \   00000036   0F80               ADD     R24, R16
   \   00000038   1F91               ADC     R25, R17
    379                  if (!--count_out) {
   \   0000003A   95AA               DEC     R26
   \   0000003C   23AA               TST     R26
   \   0000003E   F409               BRNE    ??Usart16552CheckPackage_2
    380                      more = false;
   \   00000040   E0B0               LDI     R27, 0
    381                  }
    382              } while (more && (pointer < UART16552[ch].RxPacklen - 3));
   \                     ??Usart16552CheckPackage_2:
   \   00000042   23BB               TST     R27
   \   00000044   F061               BREQ    ??Usart16552CheckPackage_3
   \   00000046   E10A               LDI     R16, 26
   \   00000048   9E40               MUL     R4, R16
   \   0000004A   01F0               MOVW    R31:R30, R1:R0
   \   0000004C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000004E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000050   8906               LDD     R16, Z+22
   \   00000052   8917               LDD     R17, Z+23
   \   00000054   5003               SUBI    R16, 3
   \   00000056   4010               SBCI    R17, 0
   \   00000058   1780               CP      R24, R16
   \   0000005A   0791               CPC     R25, R17
   \   0000005C   F2C0               BRCS    ??Usart16552CheckPackage_0
    383              GoToSyncUART16552(ch);
   \                     ??Usart16552CheckPackage_3:
   \   0000005E   2D04               MOV     R16, R4
   \   00000060   ........           CALL    GoToSyncUART16552
    384          }
   \   00000064   E0E5               LDI     R30, 5
   \   00000066   ........           JMP     ?EPILOGUE_B5_L09
    385          
    386          /*************************************************************************
    387          *
    388          *  Check action on received data from AN_SGCNV
    389          *
    390          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    391          char CheckActionUart16552(char ch, unsigned short pointer) {
   \                     CheckActionUart16552:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    392          
    393              char retval = true;
   \   00000008   E0B1               LDI     R27, 1
    394          
    395              switch (UART16552[ch].pRxBuffer[pointer]) {    // check action
   \   0000000A   E10A               LDI     R16, 26
   \   0000000C   9FA0               MUL     R26, R16
   \   0000000E   01F0               MOVW    R31:R30, R1:R0
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8502               LDD     R16, Z+10
   \   00000016   8513               LDD     R17, Z+11
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   0FE8               ADD     R30, R24
   \   0000001C   1FF9               ADC     R31, R25
   \   0000001E   8100               LD      R16, Z
   \   00000020   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart16552>_0`)
   \   00000022   ....               LDI     R31, (`?<Jumptable for CheckActionUart16552>_0`) >> 16
   \   00000024   BFFB               OUT     0x3B, R31
   \   00000026   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart16552>_0`)
   \   00000028   ........           JMP     ?CV_SWITCH_L06
    396          
    397              case ANP1_REP_MP_DATA :                              // Measured pressure data
    398              case ANP1_REP_MT_DATA :                              // Measured temperature data
    399              case ANP1_REP_MO_DATA :                              // Measured "other" data
    400                  ReceivePTOData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_0:
   \   0000002C   019C               MOVW    R19:R18, R25:R24
   \   0000002E   5F2E               SUBI    R18, 254
   \   00000030   4F3F               SBCI    R19, 255
   \   00000032   2F0A               MOV     R16, R26
   \   00000034   ....               RCALL   ReceivePTOData
    401                  break;
   \   00000036   C043               RJMP    ??CheckActionUart16552_1
    402              case ANP1_REP_WH_DATA :                              // Measured "washtrack and high level" data
    403                  ReceiveWHData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_2:
   \   00000038   019C               MOVW    R19:R18, R25:R24
   \   0000003A   5F2E               SUBI    R18, 254
   \   0000003C   4F3F               SBCI    R19, 255
   \   0000003E   2F0A               MOV     R16, R26
   \   00000040   ....               RCALL   ReceiveWHData
    404                  break;
   \   00000042   C03D               RJMP    ??CheckActionUart16552_1
    405              case ANP1_REP_RP_DATA :                              // Raw pressure data
    406              case ANP1_REP_RT_DATA :                              // Raw temp. data
    407              case ANP1_REP_RO_DATA :                              // Raw "other" data
    408                  ReceiveRData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_3:
   \   00000044   019C               MOVW    R19:R18, R25:R24
   \   00000046   5F2E               SUBI    R18, 254
   \   00000048   4F3F               SBCI    R19, 255
   \   0000004A   2F0A               MOV     R16, R26
   \   0000004C   ....               RCALL   ReceiveRData
    409                  break;
   \   0000004E   C037               RJMP    ??CheckActionUart16552_1
    410              case ANP1_REP_CAL_DATA :                             // Raw "other" data
    411                  ReceiveCData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_4:
   \   00000050   019C               MOVW    R19:R18, R25:R24
   \   00000052   5F2E               SUBI    R18, 254
   \   00000054   4F3F               SBCI    R19, 255
   \   00000056   2F0A               MOV     R16, R26
   \   00000058   ....               RCALL   ReceiveCData
    412                  break;
   \   0000005A   C031               RJMP    ??CheckActionUart16552_1
    413          
    414              case ANP1_REP_CARD_STAT :                             // card status package
    415                  ReceiveCardStatus(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_5:
   \   0000005C   019C               MOVW    R19:R18, R25:R24
   \   0000005E   5F2E               SUBI    R18, 254
   \   00000060   4F3F               SBCI    R19, 255
   \   00000062   2F0A               MOV     R16, R26
   \   00000064   ....               RCALL   ReceiveCardStatus
    416                  break;
   \   00000066   C02B               RJMP    ??CheckActionUart16552_1
    417          
    418              case ANP1_REP_CONFIG :                             // config data
    419                  ReceiveConfigData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_6:
   \   00000068   019C               MOVW    R19:R18, R25:R24
   \   0000006A   5F2E               SUBI    R18, 254
   \   0000006C   4F3F               SBCI    R19, 255
   \   0000006E   2F0A               MOV     R16, R26
   \   00000070   ....               RCALL   ReceiveConfigData
    420                  break;
   \   00000072   C025               RJMP    ??CheckActionUart16552_1
    421          
    422              case ANP1_REP_EEP_DATA :                             // card eeprome
    423                  ReceiveCardEEPROMData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_7:
   \   00000074   019C               MOVW    R19:R18, R25:R24
   \   00000076   5F2E               SUBI    R18, 254
   \   00000078   4F3F               SBCI    R19, 255
   \   0000007A   2F0A               MOV     R16, R26
   \   0000007C   ....               RCALL   ReceiveCardEEPROMData
    424                  break;
   \   0000007E   C01F               RJMP    ??CheckActionUart16552_1
    425          
    426              case ANP1_REP_WIS_STAT :                             // Card status from WIS
    427                  ReceiveWISStatus(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_8:
   \   00000080   019C               MOVW    R19:R18, R25:R24
   \   00000082   5F2E               SUBI    R18, 254
   \   00000084   4F3F               SBCI    R19, 255
   \   00000086   2F0A               MOV     R16, R26
   \   00000088   ....               RCALL   ReceiveWISStatus
    428                  break;
   \   0000008A   C019               RJMP    ??CheckActionUart16552_1
    429          
    430              case ANP1_REP_WIS_XDATA :                             // Card WIS protocol
    431                  ReceiveWISXData(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_9:
   \   0000008C   019C               MOVW    R19:R18, R25:R24
   \   0000008E   5F2E               SUBI    R18, 254
   \   00000090   4F3F               SBCI    R19, 255
   \   00000092   2F0A               MOV     R16, R26
   \   00000094   ....               RCALL   ReceiveWISXData
    432                  break;
   \   00000096   C013               RJMP    ??CheckActionUart16552_1
    433          
    434              case ANP1_REP_WIS_DATA :                             // Data from WIS
    435                  ReceiveWISData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_10:
   \   00000098   019C               MOVW    R19:R18, R25:R24
   \   0000009A   5F2E               SUBI    R18, 254
   \   0000009C   4F3F               SBCI    R19, 255
   \   0000009E   2F0A               MOV     R16, R26
   \   000000A0   ....               RCALL   ReceiveWISData
    436                  break;
   \   000000A2   C00D               RJMP    ??CheckActionUart16552_1
    437              case ANP1_REP_GODA_DATA:
    438                  ReceiveRadarData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_11:
   \   000000A4   019C               MOVW    R19:R18, R25:R24
   \   000000A6   5F2E               SUBI    R18, 254
   \   000000A8   4F3F               SBCI    R19, 255
   \   000000AA   2F0A               MOV     R16, R26
   \   000000AC   ....               RCALL   ReceiveRadarData
    439                  break;
   \   000000AE   C007               RJMP    ??CheckActionUart16552_1
    440              case ANP1_REP_GODA_INFO:
    441                  ReceiveRadarInfo(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_12:
   \   000000B0   019C               MOVW    R19:R18, R25:R24
   \   000000B2   5F2E               SUBI    R18, 254
   \   000000B4   4F3F               SBCI    R19, 255
   \   000000B6   2F0A               MOV     R16, R26
   \   000000B8   ....               RCALL   ReceiveRadarInfo
    442                  break;
   \   000000BA   C001               RJMP    ??CheckActionUart16552_1
    443              case ANP1_ECMD_NMDRQACK :                             // No more data, send ack.
    444              case ANP1_ECMD_NMDWOACK :                         // No more data
    445                  retval = false;
   \                     ??CheckActionUart16552_13:
   \   000000BC   E0B0               LDI     R27, 0
    446                  break;
    447              }
    448              return retval;
   \                     ??CheckActionUart16552_1:
   \   000000BE   2F0B               MOV     R16, R27
   \   000000C0   E0E4               LDI     R30, 4
   \   000000C2   ........           JMP     ?EPILOGUE_B4_L09
    449          }
    450          
    451          /*************************************************************************
    452          *
    453          *  Receive card status from WIS
    454          *
    455          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    456          void ReceiveWISStatus(char ch, unsigned short pointer) {
   \                     ReceiveWISStatus:
   \   00000000   2F40               MOV     R20, R16
    457          
    458              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] |= UART16552[ch].pRxBuffer[pointer];
   \   00000002   9150....           LDS     R21, PortPair
   \   00000006   E10A               LDI     R16, 26
   \   00000008   9F40               MUL     R20, R16
   \   0000000A   01F0               MOVW    R31:R30, R1:R0
   \   0000000C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000010   8502               LDD     R16, Z+10
   \   00000012   8513               LDD     R17, Z+11
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   0FE2               ADD     R30, R18
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   8160               LD      R22, Z
   \   0000001C   E004               LDI     R16, 4
   \   0000001E   9F40               MUL     R20, R16
   \   00000020   2F05               MOV     R16, R21
   \   00000022   E010               LDI     R17, 0
   \   00000024   0E00               ADD     R0, R16
   \   00000026   1E11               ADC     R1, R17
   \   00000028   01F0               MOVW    R31:R30, R1:R0
   \   0000002A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000002E   A503               LDD     R16, Z+43
   \   00000030   2B06               OR      R16, R22
   \   00000032   A703               STD     Z+43, R16
    459              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000034   E10A               LDI     R16, 26
   \   00000036   9F40               MUL     R20, R16
   \   00000038   01F0               MOVW    R31:R30, R1:R0
   \   0000003A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000003E   8502               LDD     R16, Z+10
   \   00000040   8513               LDD     R17, Z+11
   \   00000042   0F02               ADD     R16, R18
   \   00000044   1F13               ADC     R17, R19
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   8151               LDD     R21, Z+1
   \   0000004A   E004               LDI     R16, 4
   \   0000004C   9F40               MUL     R20, R16
   \   0000004E   9100....           LDS     R16, PortPair
   \   00000052   E010               LDI     R17, 0
   \   00000054   0E00               ADD     R0, R16
   \   00000056   1E11               ADC     R1, R17
   \   00000058   01F0               MOVW    R31:R30, R1:R0
   \   0000005A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000005C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000005E   AB53               STD     Z+51, R21
    460              if (UART16552[ch].pRxBuffer[pointer + 4]) {
   \   00000060   E10A               LDI     R16, 26
   \   00000062   9F40               MUL     R20, R16
   \   00000064   01F0               MOVW    R31:R30, R1:R0
   \   00000066   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006A   8502               LDD     R16, Z+10
   \   0000006C   8513               LDD     R17, Z+11
   \   0000006E   0F02               ADD     R16, R18
   \   00000070   1F13               ADC     R17, R19
   \   00000072   01F8               MOVW    R31:R30, R17:R16
   \   00000074   8104               LDD     R16, Z+4
   \   00000076   2300               TST     R16
   \   00000078   F069               BREQ    ??ReceiveWISStatus_0
    461                  TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] |= 0x80;
   \   0000007A   9100....           LDS     R16, PortPair
   \   0000007E   E014               LDI     R17, 4
   \   00000080   9F41               MUL     R20, R17
   \   00000082   E010               LDI     R17, 0
   \   00000084   0E00               ADD     R0, R16
   \   00000086   1E11               ADC     R1, R17
   \   00000088   01F0               MOVW    R31:R30, R1:R0
   \   0000008A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000008C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000008E   A903               LDD     R16, Z+51
   \   00000090   6800               ORI     R16, 0x80
   \   00000092   AB03               STD     Z+51, R16
    462              }
    463          }
   \                     ??ReceiveWISStatus_0:
   \   00000094   9508               RET
    464          
    465          /*************************************************************************
    466          *
    467          *  Receive WIS protocol data
    468          *
    469          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    470          void ReceiveWISXData(char ch, unsigned short pointer) {
   \                     ReceiveWISXData:
   \   00000000   2F79               MOV     R23, R25
   \   00000002   2E28               MOV     R2, R24
   \   00000004   2F60               MOV     R22, R16
   \   00000006   01A9               MOVW    R21:R20, R19:R18
    471          
    472              char i;
    473          
    474              switch (UART16552[ch].pRxBuffer[pointer++]) {
   \   00000008   01CA               MOVW    R25:R24, R21:R20
   \   0000000A   9601               ADIW    R25:R24, 1
   \   0000000C   E10A               LDI     R16, 26
   \   0000000E   9F60               MUL     R22, R16
   \   00000010   01F0               MOVW    R31:R30, R1:R0
   \   00000012   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000016   8502               LDD     R16, Z+10
   \   00000018   8513               LDD     R17, Z+11
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   0FE4               ADD     R30, R20
   \   0000001E   1FF5               ADC     R31, R21
   \   00000020   8100               LD      R16, Z
   \   00000022   3703               CPI     R16, 115
   \   00000024   F589               BRNE    ??ReceiveWISXData_0
    475              case 115:                                     // Serial number
    476                  TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000026   E001               LDI     R16, 1
   \   00000028   E312               LDI     R17, 50
   \   0000002A   9F61               MUL     R22, R17
   \   0000002C   01F0               MOVW    R31:R30, R1:R0
   \   0000002E   ....               SUBI    R30, LOW((-(TData + 1428) & 0xFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(TData + 1428) & 0xFFFF))
   \   00000032   8300               ST      Z, R16
    477                  TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   00000034   2F16               MOV     R17, R22
   \   00000036   0F11               LSL     R17
   \   00000038   0F11               LSL     R17
   \   0000003A   9100....           LDS     R16, PortPair
   \   0000003E   0F10               ADD     R17, R16
   \   00000040   E302               LDI     R16, 50
   \   00000042   9F60               MUL     R22, R16
   \   00000044   01F0               MOVW    R31:R30, R1:R0
   \   00000046   ....               SUBI    R30, LOW((-(TData + 1429) & 0xFFFF))
   \   00000048   ....               SBCI    R31, HIGH((-(TData + 1429) & 0xFFFF))
   \   0000004A   8310               ST      Z, R17
    478                  for (i = 2; i < (4 + 2); i++) {
   \   0000004C   E022               LDI     R18, 2
   \                     ??ReceiveWISXData_1:
   \   0000004E   3026               CPI     R18, 6
   \   00000050   F4D8               BRCC    ??ReceiveWISXData_0
    479                      TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \   00000052   E10A               LDI     R16, 26
   \   00000054   9F60               MUL     R22, R16
   \   00000056   01F0               MOVW    R31:R30, R1:R0
   \   00000058   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000005C   8502               LDD     R16, Z+10
   \   0000005E   8513               LDD     R17, Z+11
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   0FE8               ADD     R30, R24
   \   00000064   1FF9               ADC     R31, R25
   \   00000066   8110               LD      R17, Z
   \   00000068   E302               LDI     R16, 50
   \   0000006A   9F60               MUL     R22, R16
   \   0000006C   ....               LDI     R16, LOW(TData)
   \   0000006E   0E00               ADD     R0, R16
   \   00000070   ....               LDI     R16, (TData) >> 8
   \   00000072   1E10               ADC     R1, R16
   \   00000074   E030               LDI     R19, 0
   \   00000076   0E02               ADD     R0, R18
   \   00000078   1E13               ADC     R1, R19
   \   0000007A   01F0               MOVW    R31:R30, R1:R0
   \   0000007C   56EC               SUBI    R30, 108
   \   0000007E   4FFA               SBCI    R31, 250
   \   00000080   8310               ST      Z, R17
   \   00000082   9601               ADIW    R25:R24, 1
    480                  }
   \   00000084   9523               INC     R18
   \   00000086   CFE3               RJMP    ??ReceiveWISXData_1
    481                  break;
    482              default:
    483                  break;
    484              }
    485          }
   \                     ??ReceiveWISXData_0:
   \   00000088   2D82               MOV     R24, R2
   \   0000008A   2F97               MOV     R25, R23
   \   0000008C   9508               RET
    486          
    487          /*************************************************************************
    488          *
    489          *  Receive measured data from WIS
    490          *
    491          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    492          void ReceiveWISData(char ch, unsigned short pointer) {
   \                     ReceiveWISData:
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004   2E60               MOV     R6, R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
    493          
    494              TData.RS4.Result[(ch * 4) + PortPair][0] = (float)UART16552[ch].pRxBuffer[pointer + 0];       // Water detected
   \   00000008   E10A               LDI     R16, 26
   \   0000000A   9E60               MUL     R6, R16
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000012   8502               LDD     R16, Z+10
   \   00000014   8513               LDD     R17, Z+11
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   0DE4               ADD     R30, R4
   \   0000001A   1DF5               ADC     R31, R5
   \   0000001C   8100               LD      R16, Z
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E020               LDI     R18, 0
   \   00000022   E030               LDI     R19, 0
   \   00000024   ........           CALL    ?UL2F_L04
   \   00000028   01C8               MOVW    R25:R24, R17:R16
   \   0000002A   01D9               MOVW    R27:R26, R19:R18
   \   0000002C   E004               LDI     R16, 4
   \   0000002E   9E60               MUL     R6, R16
   \   00000030   9100....           LDS     R16, PortPair
   \   00000034   E010               LDI     R17, 0
   \   00000036   0E00               ADD     R0, R16
   \   00000038   1E11               ADC     R1, R17
   \   0000003A   0180               MOVW    R17:R16, R1:R0
   \   0000003C   E348               LDI     R20, 56
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   00000048   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   0000004A   8380               ST      Z, R24
   \   0000004C   8391               STD     Z+1, R25
   \   0000004E   83A2               STD     Z+2, R26
   \   00000050   83B3               STD     Z+3, R27
    495              TData.RS4.Result[(ch * 4) + PortPair][1] = (float)((UART16552[ch].pRxBuffer[pointer + 1] << 8) // Temperature
    496                                                                 + UART16552[ch].pRxBuffer[pointer + 2]) / 10.0;
   \   00000052   E10A               LDI     R16, 26
   \   00000054   9E60               MUL     R6, R16
   \   00000056   01F0               MOVW    R31:R30, R1:R0
   \   00000058   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000005C   8502               LDD     R16, Z+10
   \   0000005E   8513               LDD     R17, Z+11
   \   00000060   0D04               ADD     R16, R4
   \   00000062   1D15               ADC     R17, R5
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8111               LDD     R17, Z+1
   \   00000068   E000               LDI     R16, 0
   \   0000006A   E12A               LDI     R18, 26
   \   0000006C   9E62               MUL     R6, R18
   \   0000006E   01F0               MOVW    R31:R30, R1:R0
   \   00000070   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000072   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000074   8522               LDD     R18, Z+10
   \   00000076   8533               LDD     R19, Z+11
   \   00000078   0D24               ADD     R18, R4
   \   0000007A   1D35               ADC     R19, R5
   \   0000007C   01F9               MOVW    R31:R30, R19:R18
   \   0000007E   8122               LDD     R18, Z+2
   \   00000080   E030               LDI     R19, 0
   \   00000082   0F02               ADD     R16, R18
   \   00000084   1F13               ADC     R17, R19
   \   00000086   2F21               MOV     R18, R17
   \   00000088   0F22               LSL     R18
   \   0000008A   0B22               SBC     R18, R18
   \   0000008C   2F32               MOV     R19, R18
   \   0000008E   ........           CALL    ?SL2F_L04
   \   00000092   E040               LDI     R20, 0
   \   00000094   E050               LDI     R21, 0
   \   00000096   E260               LDI     R22, 32
   \   00000098   E471               LDI     R23, 65
   \   0000009A   ........           CALL    ?F_DIV_L04
   \   0000009E   01C8               MOVW    R25:R24, R17:R16
   \   000000A0   01D9               MOVW    R27:R26, R19:R18
   \   000000A2   E004               LDI     R16, 4
   \   000000A4   9E60               MUL     R6, R16
   \   000000A6   9100....           LDS     R16, PortPair
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   0E00               ADD     R0, R16
   \   000000AE   1E11               ADC     R1, R17
   \   000000B0   0180               MOVW    R17:R16, R1:R0
   \   000000B2   E348               LDI     R20, 56
   \   000000B4   E050               LDI     R21, 0
   \   000000B6   ........           CALL    ?S_EC_MUL_L02
   \   000000BA   01F8               MOVW    R31:R30, R17:R16
   \   000000BC   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   000000BE   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   000000C0   8380               ST      Z, R24
   \   000000C2   8391               STD     Z+1, R25
   \   000000C4   83A2               STD     Z+2, R26
   \   000000C6   83B3               STD     Z+3, R27
    497              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 3];         // Status
   \   000000C8   E10A               LDI     R16, 26
   \   000000CA   9E60               MUL     R6, R16
   \   000000CC   01F0               MOVW    R31:R30, R1:R0
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8502               LDD     R16, Z+10
   \   000000D4   8513               LDD     R17, Z+11
   \   000000D6   0D04               ADD     R16, R4
   \   000000D8   1D15               ADC     R17, R5
   \   000000DA   01F8               MOVW    R31:R30, R17:R16
   \   000000DC   8123               LDD     R18, Z+3
   \   000000DE   E004               LDI     R16, 4
   \   000000E0   9E60               MUL     R6, R16
   \   000000E2   9100....           LDS     R16, PortPair
   \   000000E6   E010               LDI     R17, 0
   \   000000E8   0E00               ADD     R0, R16
   \   000000EA   1E11               ADC     R1, R17
   \   000000EC   0180               MOVW    R17:R16, R1:R0
   \   000000EE   E04E               LDI     R20, 14
   \   000000F0   E050               LDI     R21, 0
   \   000000F2   ........           CALL    ?S_EC_MUL_L02
   \   000000F6   01F8               MOVW    R31:R30, R17:R16
   \   000000F8   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000FA   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000FC   AF23               STD     Z+59, R18
    498              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = 0;                                            // Unused
   \   000000FE   E004               LDI     R16, 4
   \   00000100   9E60               MUL     R6, R16
   \   00000102   9100....           LDS     R16, PortPair
   \   00000106   E010               LDI     R17, 0
   \   00000108   0E00               ADD     R0, R16
   \   0000010A   1E11               ADC     R1, R17
   \   0000010C   0180               MOVW    R17:R16, R1:R0
   \   0000010E   E04E               LDI     R20, 14
   \   00000110   E050               LDI     R21, 0
   \   00000112   ........           CALL    ?S_EC_MUL_L02
   \   00000116   01F8               MOVW    R31:R30, R17:R16
   \   00000118   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   0000011A   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   0000011C   E000               LDI     R16, 0
   \   0000011E   8300               ST      Z, R16
    499          }
   \   00000120   E0E7               LDI     R30, 7
   \   00000122   ........           JMP     ?EPILOGUE_B7_L09
    500          
    501          
    502          /*************************************************************************
    503          *
    504          *  Receive measured data from Radar
    505          *
    506          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    507          void ReceiveRadarData(char ch, unsigned short pointer) {
   \                     ReceiveRadarData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
    508              float *Data1 = (float *)&UART16552[ch].pRxBuffer[pointer + 0];
   \   00000008   E10A               LDI     R16, 26
   \   0000000A   9E20               MUL     R2, R16
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000012   8522               LDD     R18, Z+10
   \   00000014   8533               LDD     R19, Z+11
   \   00000016   0F26               ADD     R18, R22
   \   00000018   1F37               ADC     R19, R23
    509              float *Data2 = (float *)&UART16552[ch].pRxBuffer[pointer + 4];
   \   0000001A   E10A               LDI     R16, 26
   \   0000001C   9E20               MUL     R2, R16
   \   0000001E   01F0               MOVW    R31:R30, R1:R0
   \   00000020   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000022   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000024   85A2               LDD     R26, Z+10
   \   00000026   85B3               LDD     R27, Z+11
   \   00000028   0FA6               ADD     R26, R22
   \   0000002A   1FB7               ADC     R27, R23
   \   0000002C   9614               ADIW    R27:R26, 4
    510          
    511              TData.RS4.Result[(ch * 4) + PortPair][0] = *Data1;       // Distance
   \   0000002E   01F9               MOVW    R31:R30, R19:R18
   \   00000030   8040               LD      R4, Z
   \   00000032   8051               LDD     R5, Z+1
   \   00000034   8062               LDD     R6, Z+2
   \   00000036   8073               LDD     R7, Z+3
   \   00000038   E004               LDI     R16, 4
   \   0000003A   9E20               MUL     R2, R16
   \   0000003C   9100....           LDS     R16, PortPair
   \   00000040   E010               LDI     R17, 0
   \   00000042   0E00               ADD     R0, R16
   \   00000044   1E11               ADC     R1, R17
   \   00000046   0180               MOVW    R17:R16, R1:R0
   \   00000048   E348               LDI     R20, 56
   \   0000004A   E050               LDI     R21, 0
   \   0000004C   ........           CALL    ?S_EC_MUL_L02
   \   00000050   01F8               MOVW    R31:R30, R17:R16
   \   00000052   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   00000054   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   00000056   8240               ST      Z, R4
   \   00000058   8251               STD     Z+1, R5
   \   0000005A   8262               STD     Z+2, R6
   \   0000005C   8273               STD     Z+3, R7
    512              TData.RS4.Result[(ch * 4) + PortPair][1] = *Data2;      // Level
   \   0000005E   904D               LD      R4, X+
   \   00000060   905D               LD      R5, X+
   \   00000062   906D               LD      R6, X+
   \   00000064   907C               LD      R7, X
   \   00000066   9713               SBIW    R27:R26, 3
   \   00000068   E004               LDI     R16, 4
   \   0000006A   9E20               MUL     R2, R16
   \   0000006C   9100....           LDS     R16, PortPair
   \   00000070   E010               LDI     R17, 0
   \   00000072   0E00               ADD     R0, R16
   \   00000074   1E11               ADC     R1, R17
   \   00000076   0180               MOVW    R17:R16, R1:R0
   \   00000078   E348               LDI     R20, 56
   \   0000007A   E050               LDI     R21, 0
   \   0000007C   ........           CALL    ?S_EC_MUL_L02
   \   00000080   01F8               MOVW    R31:R30, R17:R16
   \   00000082   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   00000084   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   00000086   8240               ST      Z, R4
   \   00000088   8251               STD     Z+1, R5
   \   0000008A   8262               STD     Z+2, R6
   \   0000008C   8273               STD     Z+3, R7
    513              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 8];         // Status
   \   0000008E   E10A               LDI     R16, 26
   \   00000090   9E20               MUL     R2, R16
   \   00000092   01F0               MOVW    R31:R30, R1:R0
   \   00000094   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000096   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000098   8502               LDD     R16, Z+10
   \   0000009A   8513               LDD     R17, Z+11
   \   0000009C   0F06               ADD     R16, R22
   \   0000009E   1F17               ADC     R17, R23
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   8430               LDD     R3, Z+8
   \   000000A4   E004               LDI     R16, 4
   \   000000A6   9E20               MUL     R2, R16
   \   000000A8   9100....           LDS     R16, PortPair
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   0E00               ADD     R0, R16
   \   000000B0   1E11               ADC     R1, R17
   \   000000B2   0180               MOVW    R17:R16, R1:R0
   \   000000B4   E04E               LDI     R20, 14
   \   000000B6   E050               LDI     R21, 0
   \   000000B8   ........           CALL    ?S_EC_MUL_L02
   \   000000BC   01F8               MOVW    R31:R30, R17:R16
   \   000000BE   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000C0   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000C2   AE33               STD     Z+59, R3
    514              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 9];         // Unused???
   \   000000C4   E10A               LDI     R16, 26
   \   000000C6   9E20               MUL     R2, R16
   \   000000C8   01F0               MOVW    R31:R30, R1:R0
   \   000000CA   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000CC   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000CE   8502               LDD     R16, Z+10
   \   000000D0   8513               LDD     R17, Z+11
   \   000000D2   0F06               ADD     R16, R22
   \   000000D4   1F17               ADC     R17, R23
   \   000000D6   01F8               MOVW    R31:R30, R17:R16
   \   000000D8   8431               LDD     R3, Z+9
   \   000000DA   E004               LDI     R16, 4
   \   000000DC   9E20               MUL     R2, R16
   \   000000DE   9100....           LDS     R16, PortPair
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   0E00               ADD     R0, R16
   \   000000E6   1E11               ADC     R1, R17
   \   000000E8   0180               MOVW    R17:R16, R1:R0
   \   000000EA   E04E               LDI     R20, 14
   \   000000EC   E050               LDI     R21, 0
   \   000000EE   ........           CALL    ?S_EC_MUL_L02
   \   000000F2   01F8               MOVW    R31:R30, R17:R16
   \   000000F4   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   000000F6   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   000000F8   8230               ST      Z, R3
    515          }
   \   000000FA   E0E8               LDI     R30, 8
   \   000000FC   ........           JMP     ?EPILOGUE_B8_L09
    516          
    517          
    518          /*************************************************************************
    519          *
    520          *  Receive Serial number and version information from Radar
    521          *
    522          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    523          void ReceiveRadarInfo(char ch, unsigned short pointer) {
   \                     ReceiveRadarInfo:
   \   00000000   011D               MOVW    R3:R2, R27:R26
    524              // TData.RS4.SerialNumber[(ch * 4) + PortPair] = atol((const char *)&UART16552[ch].pRxBuffer[pointer + 0]);
    525              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = *((long *)&UART16552[ch].pRxBuffer[pointer + 10]);
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   01F0               MOVW    R31:R30, R1:R0
   \   00000008   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000C   85A2               LDD     R26, Z+10
   \   0000000E   85B3               LDD     R27, Z+11
   \   00000010   0FA2               ADD     R26, R18
   \   00000012   1FB3               ADC     R27, R19
   \   00000014   961A               ADIW    R27:R26, 10
   \   00000016   914D               LD      R20, X+
   \   00000018   915D               LD      R21, X+
   \   0000001A   916D               LD      R22, X+
   \   0000001C   917C               LD      R23, X
   \   0000001E   971D               SBIW    R27:R26, 13
   \   00000020   2F14               MOV     R17, R20
   \   00000022   E044               LDI     R20, 4
   \   00000024   9F04               MUL     R16, R20
   \   00000026   9140....           LDS     R20, PortPair
   \   0000002A   E050               LDI     R21, 0
   \   0000002C   0E04               ADD     R0, R20
   \   0000002E   1E15               ADC     R1, R21
   \   00000030   01F0               MOVW    R31:R30, R1:R0
   \   00000032   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000034   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000036   A713               STD     Z+43, R17
    526          }
   \   00000038   01D1               MOVW    R27:R26, R3:R2
   \   0000003A   9508               RET
    527          
    528          /*************************************************************************
    529          *
    530          *  Receive pressure measured data from AN_SGCNV
    531          *
    532          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    533          void ReceivePTOData(char ch, unsigned short pointer) {
   \                     ReceivePTOData:
   \   00000000   ........           CALL    ?PROLOGUE13_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004   2EC0               MOV     R12, R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
    534          
    535              unsigned short pnt, ADCh;
    536              short packlen;
    537          
    538              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000008   E10A               LDI     R16, 26
   \   0000000A   9EC0               MUL     R12, R16
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000012   8502               LDD     R16, Z+10
   \   00000014   8513               LDD     R17, Z+11
   \   00000016   0D04               ADD     R16, R4
   \   00000018   1D15               ADC     R17, R5
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   9731               SBIW    R31:R30, 1
   \   0000001E   8060               LD      R6, Z
   \   00000020   2477               CLR     R7
    539          
    540              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000022   ....               LDI     R16, LOW(UARTSEND)
   \   00000024   ....               LDI     R17, (UARTSEND) >> 8
   \   00000026   ........           CALL    OS_Use
    541          
    542              if (packlen > 0) {
   \   0000002A   E001               LDI     R16, 1
   \   0000002C   1660               CP      R6, R16
   \   0000002E   E000               LDI     R16, 0
   \   00000030   0670               CPC     R7, R16
   \   00000032   F40C               BRGE    $+2+2
   \   00000034   C06E               RJMP    ??ReceivePTOData_0
    543                  for (pnt = 0; pnt < packlen; pnt += 6) {
   \   00000036   2488               CLR     R8
   \   00000038   2499               CLR     R9
   \                     ??ReceivePTOData_1:
   \   0000003A   1486               CP      R8, R6
   \   0000003C   0497               CPC     R9, R7
   \   0000003E   F008               BRCS    $+2+2
   \   00000040   C068               RJMP    ??ReceivePTOData_0
    544                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \   00000042   E10A               LDI     R16, 26
   \   00000044   9EC0               MUL     R12, R16
   \   00000046   01F0               MOVW    R31:R30, R1:R0
   \   00000048   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000004A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004C   8502               LDD     R16, Z+10
   \   0000004E   8513               LDD     R17, Z+11
   \   00000050   0192               MOVW    R19:R18, R5:R4
   \   00000052   0D28               ADD     R18, R8
   \   00000054   1D39               ADC     R19, R9
   \   00000056   01F8               MOVW    R31:R30, R17:R16
   \   00000058   0FE2               ADD     R30, R18
   \   0000005A   1FF3               ADC     R31, R19
   \   0000005C   8100               LD      R16, Z
   \   0000005E   E010               LDI     R17, 0
   \   00000060   0158               MOVW    R11:R10, R17:R16
    545                      if (ADCh < 14) {
   \   00000062   E00E               LDI     R16, 14
   \   00000064   16A0               CP      R10, R16
   \   00000066   E000               LDI     R16, 0
   \   00000068   06B0               CPC     R11, R16
   \   0000006A   F008               BRCS    $+2+2
   \   0000006C   C04D               RJMP    ??ReceivePTOData_2
    546                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   0000006E   E10A               LDI     R16, 26
   \   00000070   9EC0               MUL     R12, R16
   \   00000072   01F0               MOVW    R31:R30, R1:R0
   \   00000074   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000076   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000078   8502               LDD     R16, Z+10
   \   0000007A   8513               LDD     R17, Z+11
   \   0000007C   0192               MOVW    R19:R18, R5:R4
   \   0000007E   0D28               ADD     R18, R8
   \   00000080   1D39               ADC     R19, R9
   \   00000082   0F02               ADD     R16, R18
   \   00000084   1F13               ADC     R17, R19
   \   00000086   01F8               MOVW    R31:R30, R17:R16
   \   00000088   8121               LDD     R18, Z+1
   \   0000008A   E004               LDI     R16, 4
   \   0000008C   9EC0               MUL     R12, R16
   \   0000008E   9100....           LDS     R16, PortPair
   \   00000092   E010               LDI     R17, 0
   \   00000094   0E00               ADD     R0, R16
   \   00000096   1E11               ADC     R1, R17
   \   00000098   0180               MOVW    R17:R16, R1:R0
   \   0000009A   E04E               LDI     R20, 14
   \   0000009C   E050               LDI     R21, 0
   \   0000009E   ........           CALL    ?S_EC_MUL_L02
   \   000000A2   01F8               MOVW    R31:R30, R17:R16
   \   000000A4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000A6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000A8   0DEA               ADD     R30, R10
   \   000000AA   1DFB               ADC     R31, R11
   \   000000AC   AF23               STD     Z+59, R18
    547                          *((float *)&TData.RS4.Result[(ch * 4) + PortPair][ADCh]) = *((float *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   000000AE   E10A               LDI     R16, 26
   \   000000B0   9EC0               MUL     R12, R16
   \   000000B2   01F0               MOVW    R31:R30, R1:R0
   \   000000B4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000B8   8502               LDD     R16, Z+10
   \   000000BA   8513               LDD     R17, Z+11
   \   000000BC   0192               MOVW    R19:R18, R5:R4
   \   000000BE   0D28               ADD     R18, R8
   \   000000C0   1D39               ADC     R19, R9
   \   000000C2   0F02               ADD     R16, R18
   \   000000C4   1F13               ADC     R17, R19
   \   000000C6   01F8               MOVW    R31:R30, R17:R16
   \   000000C8   8182               LDD     R24, Z+2
   \   000000CA   8193               LDD     R25, Z+3
   \   000000CC   81A4               LDD     R26, Z+4
   \   000000CE   81B5               LDD     R27, Z+5
   \   000000D0   E004               LDI     R16, 4
   \   000000D2   9EC0               MUL     R12, R16
   \   000000D4   9100....           LDS     R16, PortPair
   \   000000D8   E010               LDI     R17, 0
   \   000000DA   0E00               ADD     R0, R16
   \   000000DC   1E11               ADC     R1, R17
   \   000000DE   0180               MOVW    R17:R16, R1:R0
   \   000000E0   E348               LDI     R20, 56
   \   000000E2   E050               LDI     R21, 0
   \   000000E4   ........           CALL    ?S_EC_MUL_L02
   \   000000E8   01F8               MOVW    R31:R30, R17:R16
   \   000000EA   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000EC   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000EE   0185               MOVW    R17:R16, R11:R10
   \   000000F0   0F00               LSL     R16
   \   000000F2   1F11               ROL     R17
   \   000000F4   0F00               LSL     R16
   \   000000F6   1F11               ROL     R17
   \   000000F8   0FE0               ADD     R30, R16
   \   000000FA   1FF1               ADC     R31, R17
   \   000000FC   52E5               SUBI    R30, 37
   \   000000FE   4FFD               SBCI    R31, 253
   \   00000100   8380               ST      Z, R24
   \   00000102   8391               STD     Z+1, R25
   \   00000104   83A2               STD     Z+2, R26
   \   00000106   83B3               STD     Z+3, R27
    548                      }
    549                  }
   \                     ??ReceivePTOData_2:
   \   00000108   E006               LDI     R16, 6
   \   0000010A   0E80               ADD     R8, R16
   \   0000010C   E000               LDI     R16, 0
   \   0000010E   1E90               ADC     R9, R16
   \   00000110   CF94               RJMP    ??ReceivePTOData_1
    550              }
    551              OS_Unuse(&UARTSEND);
   \                     ??ReceivePTOData_0:
   \   00000112   ....               LDI     R16, LOW(UARTSEND)
   \   00000114   ....               LDI     R17, (UARTSEND) >> 8
   \   00000116   ........           CALL    OS_Unuse
    552          }
   \   0000011A   E0ED               LDI     R30, 13
   \   0000011C   ........           JMP     ?EPILOGUE_B13_L09
    553          /*************************************************************************
    554          *
    555          *  Receive Wash Track and High Level data from AN_SGCNV
    556          *
    557          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    558          void ReceiveWHData(char ch, unsigned short pointer) {
   \                     ReceiveWHData:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    559          
    560              // Fixed packet length
    561              //short packlen;
    562          
    563              //packlen = UART16552[ch].pRxBuffer[pointer - 1];
    564          
    565              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000008   ....               LDI     R16, LOW(UARTSEND)
   \   0000000A   ....               LDI     R17, (UARTSEND) >> 8
   \   0000000C   ........           CALL    OS_Use
    566              short Index = (ch * 4) + PortPair;
   \   00000010   E004               LDI     R16, 4
   \   00000012   9E40               MUL     R4, R16
   \   00000014   9180....           LDS     R24, PortPair
   \   00000018   E090               LDI     R25, 0
   \   0000001A   0D80               ADD     R24, R0
   \   0000001C   1D91               ADC     R25, R1
    567              // Check if we have time information included
    568              if (UART16552[ch].pRxBuffer[pointer -1] == 4 ) {
   \   0000001E   E10A               LDI     R16, 26
   \   00000020   9E40               MUL     R4, R16
   \   00000022   01F0               MOVW    R31:R30, R1:R0
   \   00000024   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000026   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000028   8502               LDD     R16, Z+10
   \   0000002A   8513               LDD     R17, Z+11
   \   0000002C   0F0A               ADD     R16, R26
   \   0000002E   1F1B               ADC     R17, R27
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   9731               SBIW    R31:R30, 1
   \   00000034   8100               LD      R16, Z
   \   00000036   3004               CPI     R16, 4
   \   00000038   F009               BREQ    $+2+2
   \   0000003A   C04B               RJMP    ??ReceiveWHData_0
    569                  for (short pnt = 0; pnt < 3; pnt++) {
   \   0000003C   E020               LDI     R18, 0
   \   0000003E   E030               LDI     R19, 0
   \                     ??ReceiveWHData_1:
   \   00000040   3023               CPI     R18, 3
   \   00000042   E000               LDI     R16, 0
   \   00000044   0730               CPC     R19, R16
   \   00000046   F50C               BRGE    ??ReceiveWHData_2
    570                      TData.RS4.WTrackCnt[Index][pnt] = UART16552[ch].pRxBuffer[pointer+pnt];  // 4 x Wash track
   \   00000048   E10A               LDI     R16, 26
   \   0000004A   9E40               MUL     R4, R16
   \   0000004C   01F0               MOVW    R31:R30, R1:R0
   \   0000004E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000050   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000052   8502               LDD     R16, Z+10
   \   00000054   8513               LDD     R17, Z+11
   \   00000056   01AD               MOVW    R21:R20, R27:R26
   \   00000058   0F42               ADD     R20, R18
   \   0000005A   1F53               ADC     R21, R19
   \   0000005C   01F8               MOVW    R31:R30, R17:R16
   \   0000005E   0FE4               ADD     R30, R20
   \   00000060   1FF5               ADC     R31, R21
   \   00000062   8160               LD      R22, Z
   \   00000064   E070               LDI     R23, 0
   \   00000066   018C               MOVW    R17:R16, R25:R24
   \   00000068   E043               LDI     R20, 3
   \   0000006A   ........           CALL    ?S_SHL_L02
   \   0000006E   01F8               MOVW    R31:R30, R17:R16
   \   00000070   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000072   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000074   0FE2               ADD     R30, R18
   \   00000076   1FF3               ADC     R31, R19
   \   00000078   0FE2               ADD     R30, R18
   \   0000007A   1FF3               ADC     R31, R19
   \   0000007C   56E5               SUBI    R30, 101
   \   0000007E   4FFB               SBCI    R31, 251
   \   00000080   8360               ST      Z, R22
   \   00000082   8371               STD     Z+1, R23
    571                  }
   \   00000084   5F2F               SUBI    R18, 255
   \   00000086   4F3F               SBCI    R19, 255
   \   00000088   CFDB               RJMP    ??ReceiveWHData_1
    572                  // 4th WashTrack dont come
    573                  TData.RS4.WTrackCnt[Index][3] = 0;  // Missing 4th Wash track because of BUG in H8 compiler
   \                     ??ReceiveWHData_2:
   \   0000008A   E020               LDI     R18, 0
   \   0000008C   E030               LDI     R19, 0
   \   0000008E   018C               MOVW    R17:R16, R25:R24
   \   00000090   E043               LDI     R20, 3
   \   00000092   ........           CALL    ?S_SHL_L02
   \   00000096   01F8               MOVW    R31:R30, R17:R16
   \   00000098   ....               SUBI    R30, LOW((-(TData + 1185) & 0xFFFF))
   \   0000009A   ....               SBCI    R31, HIGH((-(TData + 1185) & 0xFFFF))
   \   0000009C   8320               ST      Z, R18
   \   0000009E   8331               STD     Z+1, R19
    574                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer +3]; // Hgh levels in 5th byte
   \   000000A0   E10A               LDI     R16, 26
   \   000000A2   9E40               MUL     R4, R16
   \   000000A4   01F0               MOVW    R31:R30, R1:R0
   \   000000A6   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000A8   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000AA   8502               LDD     R16, Z+10
   \   000000AC   8513               LDD     R17, Z+11
   \   000000AE   0F0A               ADD     R16, R26
   \   000000B0   1F1B               ADC     R17, R27
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   8103               LDD     R16, Z+3
   \   000000B6   01FC               MOVW    R31:R30, R25:R24
   \   000000B8   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   000000BC   8300               ST      Z, R16
    575                  TData.RS4.WTTime[Index] = 0;
   \   000000BE   E000               LDI     R16, 0
   \   000000C0   E010               LDI     R17, 0
   \   000000C2   01FC               MOVW    R31:R30, R25:R24
   \   000000C4   0FEE               LSL     R30
   \   000000C6   1FFF               ROL     R31
   \   000000C8   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   000000CC   8300               ST      Z, R16
   \   000000CE   8311               STD     Z+1, R17
   \   000000D0   C04A               RJMP    ??ReceiveWHData_3
    576              }else{
    577                  for (short pnt = 0; pnt < 4; pnt++) {
   \                     ??ReceiveWHData_0:
   \   000000D2   E020               LDI     R18, 0
   \   000000D4   E030               LDI     R19, 0
   \                     ??ReceiveWHData_4:
   \   000000D6   3024               CPI     R18, 4
   \   000000D8   E000               LDI     R16, 0
   \   000000DA   0730               CPC     R19, R16
   \   000000DC   F514               BRGE    ??ReceiveWHData_5
    578                      TData.RS4.WTrackCnt[Index][pnt] = ((unsigned short *)&UART16552[ch].pRxBuffer[pointer])[pnt];  // 4 x Wash track
   \   000000DE   E10A               LDI     R16, 26
   \   000000E0   9E40               MUL     R4, R16
   \   000000E2   01F0               MOVW    R31:R30, R1:R0
   \   000000E4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000E6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000E8   8502               LDD     R16, Z+10
   \   000000EA   8513               LDD     R17, Z+11
   \   000000EC   0F0A               ADD     R16, R26
   \   000000EE   1F1B               ADC     R17, R27
   \   000000F0   01F8               MOVW    R31:R30, R17:R16
   \   000000F2   0FE2               ADD     R30, R18
   \   000000F4   1FF3               ADC     R31, R19
   \   000000F6   0FE2               ADD     R30, R18
   \   000000F8   1FF3               ADC     R31, R19
   \   000000FA   8160               LD      R22, Z
   \   000000FC   8171               LDD     R23, Z+1
   \   000000FE   018C               MOVW    R17:R16, R25:R24
   \   00000100   E043               LDI     R20, 3
   \   00000102   ........           CALL    ?S_SHL_L02
   \   00000106   01F8               MOVW    R31:R30, R17:R16
   \   00000108   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000010A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000010C   0FE2               ADD     R30, R18
   \   0000010E   1FF3               ADC     R31, R19
   \   00000110   0FE2               ADD     R30, R18
   \   00000112   1FF3               ADC     R31, R19
   \   00000114   56E5               SUBI    R30, 101
   \   00000116   4FFB               SBCI    R31, 251
   \   00000118   8360               ST      Z, R22
   \   0000011A   8371               STD     Z+1, R23
    579                  }
   \   0000011C   5F2F               SUBI    R18, 255
   \   0000011E   4F3F               SBCI    R19, 255
   \   00000120   CFDA               RJMP    ??ReceiveWHData_4
    580                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer + 8]; // Hgh levels in 9th byte
   \                     ??ReceiveWHData_5:
   \   00000122   E10A               LDI     R16, 26
   \   00000124   9E40               MUL     R4, R16
   \   00000126   01F0               MOVW    R31:R30, R1:R0
   \   00000128   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000012A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000012C   8502               LDD     R16, Z+10
   \   0000012E   8513               LDD     R17, Z+11
   \   00000130   0F0A               ADD     R16, R26
   \   00000132   1F1B               ADC     R17, R27
   \   00000134   01F8               MOVW    R31:R30, R17:R16
   \   00000136   8500               LDD     R16, Z+8
   \   00000138   01FC               MOVW    R31:R30, R25:R24
   \   0000013A   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   0000013C   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   0000013E   8300               ST      Z, R16
    581                  TData.RS4.WTTime[Index] = *((unsigned short *)&UART16552[ch].pRxBuffer[pointer + 9]);  // WashTrack time in 10th and 11th bytes
   \   00000140   E10A               LDI     R16, 26
   \   00000142   9E40               MUL     R4, R16
   \   00000144   01F0               MOVW    R31:R30, R1:R0
   \   00000146   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000148   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000014A   8502               LDD     R16, Z+10
   \   0000014C   8513               LDD     R17, Z+11
   \   0000014E   0F0A               ADD     R16, R26
   \   00000150   1F1B               ADC     R17, R27
   \   00000152   01F8               MOVW    R31:R30, R17:R16
   \   00000154   8501               LDD     R16, Z+9
   \   00000156   8512               LDD     R17, Z+10
   \   00000158   01FC               MOVW    R31:R30, R25:R24
   \   0000015A   0FEE               LSL     R30
   \   0000015C   1FFF               ROL     R31
   \   0000015E   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   00000160   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   00000162   8300               ST      Z, R16
   \   00000164   8311               STD     Z+1, R17
    582              }
    583              TData.RS4.WHDataAvailable |= 0x01 << ((ch * 4) + PortPair);
   \                     ??ReceiveWHData_3:
   \   00000166   2D44               MOV     R20, R4
   \   00000168   0F44               LSL     R20
   \   0000016A   0F44               LSL     R20
   \   0000016C   9100....           LDS     R16, PortPair
   \   00000170   0F40               ADD     R20, R16
   \   00000172   E001               LDI     R16, 1
   \   00000174   E010               LDI     R17, 0
   \   00000176   ........           CALL    ?S_SHL_L02
   \   0000017A   ....               LDI     R30, LOW((TData + 1267))
   \   0000017C   ....               LDI     R31, HIGH((TData + 1267))
   \   0000017E   8110               LD      R17, Z
   \   00000180   2B10               OR      R17, R16
   \   00000182   8310               ST      Z, R17
    584              OS_Unuse(&UARTSEND);
   \   00000184   ....               LDI     R16, LOW(UARTSEND)
   \   00000186   ....               LDI     R17, (UARTSEND) >> 8
   \   00000188   ........           CALL    OS_Unuse
    585          }
   \   0000018C   E0E5               LDI     R30, 5
   \   0000018E   ........           JMP     ?EPILOGUE_B5_L09
    586          
    587          
    588          /************************************************************************
    589          *
    590          *  Receive raw data for pressure, temp and other from AN_SGCNV
    591          *
    592          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    593          void ReceiveRData(char ch, unsigned short pointer) {
   \                     ReceiveRData:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
    594          
    595              char pnt, ADCh;
    596              short packlen;
    597          
    598              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000006   E10A               LDI     R16, 26
   \   00000008   9E20               MUL     R2, R16
   \   0000000A   01F0               MOVW    R31:R30, R1:R0
   \   0000000C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000010   8502               LDD     R16, Z+10
   \   00000012   8513               LDD     R17, Z+11
   \   00000014   0F02               ADD     R16, R18
   \   00000016   1F13               ADC     R17, R19
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   9731               SBIW    R31:R30, 1
   \   0000001C   8160               LD      R22, Z
   \   0000001E   E070               LDI     R23, 0
    599          
    600              if (packlen > 0) {
   \   00000020   3061               CPI     R22, 1
   \   00000022   E000               LDI     R16, 0
   \   00000024   0770               CPC     R23, R16
   \   00000026   F40C               BRGE    $+2+2
   \   00000028   C069               RJMP    ??ReceiveRData_0
    601                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   0000002A   E080               LDI     R24, 0
   \                     ??ReceiveRData_1:
   \   0000002C   2F08               MOV     R16, R24
   \   0000002E   E010               LDI     R17, 0
   \   00000030   1706               CP      R16, R22
   \   00000032   0717               CPC     R17, R23
   \   00000034   F00C               BRLT    $+2+2
   \   00000036   C062               RJMP    ??ReceiveRData_0
    602                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \   00000038   E10A               LDI     R16, 26
   \   0000003A   9E20               MUL     R2, R16
   \   0000003C   01F0               MOVW    R31:R30, R1:R0
   \   0000003E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000040   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000042   8502               LDD     R16, Z+10
   \   00000044   8513               LDD     R17, Z+11
   \   00000046   2F48               MOV     R20, R24
   \   00000048   E050               LDI     R21, 0
   \   0000004A   0109               MOVW    R1:R0, R19:R18
   \   0000004C   0E04               ADD     R0, R20
   \   0000004E   1E15               ADC     R1, R21
   \   00000050   01F8               MOVW    R31:R30, R17:R16
   \   00000052   0DE0               ADD     R30, R0
   \   00000054   1DF1               ADC     R31, R1
   \   00000056   8100               LD      R16, Z
   \   00000058   2FA0               MOV     R26, R16
    603                      if (ADCh < 14) {
   \   0000005A   30AE               CPI     R26, 14
   \   0000005C   F008               BRCS    $+2+2
   \   0000005E   C04C               RJMP    ??ReceiveRData_2
    604                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000060   E10A               LDI     R16, 26
   \   00000062   9E20               MUL     R2, R16
   \   00000064   01F0               MOVW    R31:R30, R1:R0
   \   00000066   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006A   8502               LDD     R16, Z+10
   \   0000006C   8513               LDD     R17, Z+11
   \   0000006E   2F48               MOV     R20, R24
   \   00000070   E050               LDI     R21, 0
   \   00000072   0109               MOVW    R1:R0, R19:R18
   \   00000074   0E04               ADD     R0, R20
   \   00000076   1E15               ADC     R1, R21
   \   00000078   0D00               ADD     R16, R0
   \   0000007A   1D11               ADC     R17, R1
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   8031               LDD     R3, Z+1
   \   00000080   E004               LDI     R16, 4
   \   00000082   9E20               MUL     R2, R16
   \   00000084   9100....           LDS     R16, PortPair
   \   00000088   E010               LDI     R17, 0
   \   0000008A   0E00               ADD     R0, R16
   \   0000008C   1E11               ADC     R1, R17
   \   0000008E   0180               MOVW    R17:R16, R1:R0
   \   00000090   E04E               LDI     R20, 14
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000009E   2F0A               MOV     R16, R26
   \   000000A0   E010               LDI     R17, 0
   \   000000A2   0FE0               ADD     R30, R16
   \   000000A4   1FF1               ADC     R31, R17
   \   000000A6   AE33               STD     Z+59, R3
    605                          *((short *)&TData.RS4.Raw[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   000000A8   E10A               LDI     R16, 26
   \   000000AA   9E20               MUL     R2, R16
   \   000000AC   01F0               MOVW    R31:R30, R1:R0
   \   000000AE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000B0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000B2   8502               LDD     R16, Z+10
   \   000000B4   8513               LDD     R17, Z+11
   \   000000B6   2F48               MOV     R20, R24
   \   000000B8   E050               LDI     R21, 0
   \   000000BA   0109               MOVW    R1:R0, R19:R18
   \   000000BC   0E04               ADD     R0, R20
   \   000000BE   1E15               ADC     R1, R21
   \   000000C0   0D00               ADD     R16, R0
   \   000000C2   1D11               ADC     R17, R1
   \   000000C4   01F8               MOVW    R31:R30, R17:R16
   \   000000C6   8042               LDD     R4, Z+2
   \   000000C8   8053               LDD     R5, Z+3
   \   000000CA   E004               LDI     R16, 4
   \   000000CC   9E20               MUL     R2, R16
   \   000000CE   9100....           LDS     R16, PortPair
   \   000000D2   E010               LDI     R17, 0
   \   000000D4   0E00               ADD     R0, R16
   \   000000D6   1E11               ADC     R1, R17
   \   000000D8   0180               MOVW    R17:R16, R1:R0
   \   000000DA   E14C               LDI     R20, 28
   \   000000DC   E050               LDI     R21, 0
   \   000000DE   ........           CALL    ?S_EC_MUL_L02
   \   000000E2   01F8               MOVW    R31:R30, R17:R16
   \   000000E4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000E6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000E8   E002               LDI     R16, 2
   \   000000EA   9FA0               MUL     R26, R16
   \   000000EC   0DE0               ADD     R30, R0
   \   000000EE   1DF1               ADC     R31, R1
   \   000000F0   5EE5               SUBI    R30, 229
   \   000000F2   4FFE               SBCI    R31, 254
   \   000000F4   8240               ST      Z, R4
   \   000000F6   8251               STD     Z+1, R5
    606                      }
    607                  }
   \                     ??ReceiveRData_2:
   \   000000F8   5F8C               SUBI    R24, 252
   \   000000FA   CF98               RJMP    ??ReceiveRData_1
    608              }
    609          }
   \                     ??ReceiveRData_0:
   \   000000FC   E0E6               LDI     R30, 6
   \   000000FE   ........           JMP     ?EPILOGUE_B6_L09
    610          
    611          /*************************************************************************
    612          *
    613          *  Receive cal data  from AN_SGCNV
    614          *
    615          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    616          void ReceiveCData(char ch, unsigned short pointer) {
   \                     ReceiveCData:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
    617          
    618              char pnt, ADCh;
    619              short packlen;
    620          
    621              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000006   E10A               LDI     R16, 26
   \   00000008   9E20               MUL     R2, R16
   \   0000000A   01F0               MOVW    R31:R30, R1:R0
   \   0000000C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000010   8502               LDD     R16, Z+10
   \   00000012   8513               LDD     R17, Z+11
   \   00000014   0F02               ADD     R16, R18
   \   00000016   1F13               ADC     R17, R19
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   9731               SBIW    R31:R30, 1
   \   0000001C   8160               LD      R22, Z
   \   0000001E   E070               LDI     R23, 0
    622          
    623              if (packlen > 0) {
   \   00000020   3061               CPI     R22, 1
   \   00000022   E000               LDI     R16, 0
   \   00000024   0770               CPC     R23, R16
   \   00000026   F40C               BRGE    $+2+2
   \   00000028   C069               RJMP    ??ReceiveCData_0
    624                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   0000002A   E080               LDI     R24, 0
   \                     ??ReceiveCData_1:
   \   0000002C   2F08               MOV     R16, R24
   \   0000002E   E010               LDI     R17, 0
   \   00000030   1706               CP      R16, R22
   \   00000032   0717               CPC     R17, R23
   \   00000034   F00C               BRLT    $+2+2
   \   00000036   C062               RJMP    ??ReceiveCData_0
    625                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \   00000038   E10A               LDI     R16, 26
   \   0000003A   9E20               MUL     R2, R16
   \   0000003C   01F0               MOVW    R31:R30, R1:R0
   \   0000003E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000040   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000042   8502               LDD     R16, Z+10
   \   00000044   8513               LDD     R17, Z+11
   \   00000046   2F48               MOV     R20, R24
   \   00000048   E050               LDI     R21, 0
   \   0000004A   0109               MOVW    R1:R0, R19:R18
   \   0000004C   0E04               ADD     R0, R20
   \   0000004E   1E15               ADC     R1, R21
   \   00000050   01F8               MOVW    R31:R30, R17:R16
   \   00000052   0DE0               ADD     R30, R0
   \   00000054   1DF1               ADC     R31, R1
   \   00000056   8100               LD      R16, Z
   \   00000058   2FA0               MOV     R26, R16
    626                      if (ADCh < 14) {
   \   0000005A   30AE               CPI     R26, 14
   \   0000005C   F008               BRCS    $+2+2
   \   0000005E   C04C               RJMP    ??ReceiveCData_2
    627                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000060   E10A               LDI     R16, 26
   \   00000062   9E20               MUL     R2, R16
   \   00000064   01F0               MOVW    R31:R30, R1:R0
   \   00000066   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006A   8502               LDD     R16, Z+10
   \   0000006C   8513               LDD     R17, Z+11
   \   0000006E   2F48               MOV     R20, R24
   \   00000070   E050               LDI     R21, 0
   \   00000072   0109               MOVW    R1:R0, R19:R18
   \   00000074   0E04               ADD     R0, R20
   \   00000076   1E15               ADC     R1, R21
   \   00000078   0D00               ADD     R16, R0
   \   0000007A   1D11               ADC     R17, R1
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   8031               LDD     R3, Z+1
   \   00000080   E004               LDI     R16, 4
   \   00000082   9E20               MUL     R2, R16
   \   00000084   9100....           LDS     R16, PortPair
   \   00000088   E010               LDI     R17, 0
   \   0000008A   0E00               ADD     R0, R16
   \   0000008C   1E11               ADC     R1, R17
   \   0000008E   0180               MOVW    R17:R16, R1:R0
   \   00000090   E04E               LDI     R20, 14
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000009E   2F0A               MOV     R16, R26
   \   000000A0   E010               LDI     R17, 0
   \   000000A2   0FE0               ADD     R30, R16
   \   000000A4   1FF1               ADC     R31, R17
   \   000000A6   AE33               STD     Z+59, R3
    628                          *((short *)&TData.RS4.Cal[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   000000A8   E10A               LDI     R16, 26
   \   000000AA   9E20               MUL     R2, R16
   \   000000AC   01F0               MOVW    R31:R30, R1:R0
   \   000000AE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000B0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000B2   8502               LDD     R16, Z+10
   \   000000B4   8513               LDD     R17, Z+11
   \   000000B6   2F48               MOV     R20, R24
   \   000000B8   E050               LDI     R21, 0
   \   000000BA   0109               MOVW    R1:R0, R19:R18
   \   000000BC   0E04               ADD     R0, R20
   \   000000BE   1E15               ADC     R1, R21
   \   000000C0   0D00               ADD     R16, R0
   \   000000C2   1D11               ADC     R17, R1
   \   000000C4   01F8               MOVW    R31:R30, R17:R16
   \   000000C6   8042               LDD     R4, Z+2
   \   000000C8   8053               LDD     R5, Z+3
   \   000000CA   E004               LDI     R16, 4
   \   000000CC   9E20               MUL     R2, R16
   \   000000CE   9100....           LDS     R16, PortPair
   \   000000D2   E010               LDI     R17, 0
   \   000000D4   0E00               ADD     R0, R16
   \   000000D6   1E11               ADC     R1, R17
   \   000000D8   0180               MOVW    R17:R16, R1:R0
   \   000000DA   E14C               LDI     R20, 28
   \   000000DC   E050               LDI     R21, 0
   \   000000DE   ........           CALL    ?S_EC_MUL_L02
   \   000000E2   01F8               MOVW    R31:R30, R17:R16
   \   000000E4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000E6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000E8   E002               LDI     R16, 2
   \   000000EA   9FA0               MUL     R26, R16
   \   000000EC   0DE0               ADD     R30, R0
   \   000000EE   1DF1               ADC     R31, R1
   \   000000F0   50E5               SUBI    R30, 5
   \   000000F2   4FFE               SBCI    R31, 254
   \   000000F4   8240               ST      Z, R4
   \   000000F6   8251               STD     Z+1, R5
    629                      }
    630                  }
   \                     ??ReceiveCData_2:
   \   000000F8   5F8C               SUBI    R24, 252
   \   000000FA   CF98               RJMP    ??ReceiveCData_1
    631              }
    632          }
   \                     ??ReceiveCData_0:
   \   000000FC   E0E6               LDI     R30, 6
   \   000000FE   ........           JMP     ?EPILOGUE_B6_L09
    633          
    634          /*************************************************************************
    635          *
    636          *  Receive card status  from AN_SGCNV
    637          *
    638          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    639          void ReceiveCardStatus(char ch, unsigned short pointer) {
   \                     ReceiveCardStatus:
   \   00000000   2F40               MOV     R20, R16
    640          
    641              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer];
   \   00000002   E10A               LDI     R16, 26
   \   00000004   9F40               MUL     R20, R16
   \   00000006   01F0               MOVW    R31:R30, R1:R0
   \   00000008   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000C   8502               LDD     R16, Z+10
   \   0000000E   8513               LDD     R17, Z+11
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   0FE2               ADD     R30, R18
   \   00000014   1FF3               ADC     R31, R19
   \   00000016   8150               LD      R21, Z
   \   00000018   E004               LDI     R16, 4
   \   0000001A   9F40               MUL     R20, R16
   \   0000001C   9100....           LDS     R16, PortPair
   \   00000020   E010               LDI     R17, 0
   \   00000022   0E00               ADD     R0, R16
   \   00000024   1E11               ADC     R1, R17
   \   00000026   01F0               MOVW    R31:R30, R1:R0
   \   00000028   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000002C   A753               STD     Z+43, R21
    642              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000002E   E10A               LDI     R16, 26
   \   00000030   9F40               MUL     R20, R16
   \   00000032   01F0               MOVW    R31:R30, R1:R0
   \   00000034   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000036   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000038   8502               LDD     R16, Z+10
   \   0000003A   8513               LDD     R17, Z+11
   \   0000003C   0F02               ADD     R16, R18
   \   0000003E   1F13               ADC     R17, R19
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   8151               LDD     R21, Z+1
   \   00000044   E004               LDI     R16, 4
   \   00000046   9F40               MUL     R20, R16
   \   00000048   9100....           LDS     R16, PortPair
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   0E00               ADD     R0, R16
   \   00000050   1E11               ADC     R1, R17
   \   00000052   01F0               MOVW    R31:R30, R1:R0
   \   00000054   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000056   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000058   AB53               STD     Z+51, R21
    643          }
   \   0000005A   9508               RET
    644          
    645          /*************************************************************************
    646          *
    647          *  Receive config data from AN_SGCNV
    648          *
    649          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    650          void ReceiveConfigData(char ch, unsigned short pointer) {
   \                     ReceiveConfigData:
   \   00000000   2E38               MOV     R3, R24
   \   00000002   2F60               MOV     R22, R16
    651          
    652              char i, ADCh;
    653          
    654              for (i = 0; i < 14; i++) {
   \   00000004   E070               LDI     R23, 0
   \                     ??ReceiveConfigData_0:
   \   00000006   307E               CPI     R23, 14
   \   00000008   F008               BRCS    $+2+2
   \   0000000A   C055               RJMP    ??ReceiveConfigData_1
    655                  ADCh = UART16552[ch].pRxBuffer[pointer++];
   \   0000000C   E10A               LDI     R16, 26
   \   0000000E   9F60               MUL     R22, R16
   \   00000010   01F0               MOVW    R31:R30, R1:R0
   \   00000012   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000016   8502               LDD     R16, Z+10
   \   00000018   8513               LDD     R17, Z+11
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   0FE2               ADD     R30, R18
   \   0000001E   1FF3               ADC     R31, R19
   \   00000020   8100               LD      R16, Z
   \   00000022   2F80               MOV     R24, R16
   \   00000024   5F2F               SUBI    R18, 255
   \   00000026   4F3F               SBCI    R19, 255
    656                  if (ADCh < 14) {
   \   00000028   308E               CPI     R24, 14
   \   0000002A   F008               BRCS    $+2+2
   \   0000002C   C040               RJMP    ??ReceiveConfigData_2
    657                      TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer];
   \   0000002E   E10A               LDI     R16, 26
   \   00000030   9F60               MUL     R22, R16
   \   00000032   01F0               MOVW    R31:R30, R1:R0
   \   00000034   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000036   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000038   8502               LDD     R16, Z+10
   \   0000003A   8513               LDD     R17, Z+11
   \   0000003C   01F8               MOVW    R31:R30, R17:R16
   \   0000003E   0FE2               ADD     R30, R18
   \   00000040   1FF3               ADC     R31, R19
   \   00000042   8020               LD      R2, Z
   \   00000044   E004               LDI     R16, 4
   \   00000046   9F60               MUL     R22, R16
   \   00000048   9100....           LDS     R16, PortPair
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   0E00               ADD     R0, R16
   \   00000050   1E11               ADC     R1, R17
   \   00000052   0180               MOVW    R17:R16, R1:R0
   \   00000054   E04E               LDI     R20, 14
   \   00000056   E050               LDI     R21, 0
   \   00000058   ........           CALL    ?S_EC_MUL_L02
   \   0000005C   01F8               MOVW    R31:R30, R17:R16
   \   0000005E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000060   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000062   2F08               MOV     R16, R24
   \   00000064   E010               LDI     R17, 0
   \   00000066   0FE0               ADD     R30, R16
   \   00000068   1FF1               ADC     R31, R17
   \   0000006A   AE23               STD     Z+59, R2
    658                      TData.RS4.TargetSetup2[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000006C   E10A               LDI     R16, 26
   \   0000006E   9F60               MUL     R22, R16
   \   00000070   01F0               MOVW    R31:R30, R1:R0
   \   00000072   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000074   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000076   8502               LDD     R16, Z+10
   \   00000078   8513               LDD     R17, Z+11
   \   0000007A   0F02               ADD     R16, R18
   \   0000007C   1F13               ADC     R17, R19
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   8021               LDD     R2, Z+1
   \   00000082   E004               LDI     R16, 4
   \   00000084   9F60               MUL     R22, R16
   \   00000086   9100....           LDS     R16, PortPair
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   0E00               ADD     R0, R16
   \   0000008E   1E11               ADC     R1, R17
   \   00000090   0180               MOVW    R17:R16, R1:R0
   \   00000092   E04E               LDI     R20, 14
   \   00000094   E050               LDI     R21, 0
   \   00000096   ........           CALL    ?S_EC_MUL_L02
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000A0   2F08               MOV     R16, R24
   \   000000A2   E010               LDI     R17, 0
   \   000000A4   0FE0               ADD     R30, R16
   \   000000A6   1FF1               ADC     R31, R17
   \   000000A8   55E5               SUBI    R30, 85
   \   000000AA   4FFF               SBCI    R31, 255
   \   000000AC   8220               ST      Z, R2
    659                  }
    660                  pointer += 2;
   \                     ??ReceiveConfigData_2:
   \   000000AE   5F2E               SUBI    R18, 254
   \   000000B0   4F3F               SBCI    R19, 255
    661              }
   \   000000B2   9573               INC     R23
   \   000000B4   CFA8               RJMP    ??ReceiveConfigData_0
    662          }
   \                     ??ReceiveConfigData_1:
   \   000000B6   2D83               MOV     R24, R3
   \   000000B8   9508               RET
    663          
    664          /*************************************************************************
    665          *
    666          *  Receive eeprom data from AN_SGCNV
    667          *
    668          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    669          void ReceiveCardEEPROMData(char ch, unsigned short pointer) {
   \                     ReceiveCardEEPROMData:
   \   00000000   2F60               MOV     R22, R16
    670          
    671              short i;
    672          
    673              TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000002   E001               LDI     R16, 1
   \   00000004   E312               LDI     R17, 50
   \   00000006   9F61               MUL     R22, R17
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(TData + 1428) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, HIGH((-(TData + 1428) & 0xFFFF))
   \   0000000E   8300               ST      Z, R16
    674              TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   00000010   2F16               MOV     R17, R22
   \   00000012   0F11               LSL     R17
   \   00000014   0F11               LSL     R17
   \   00000016   9100....           LDS     R16, PortPair
   \   0000001A   0F10               ADD     R17, R16
   \   0000001C   E302               LDI     R16, 50
   \   0000001E   9F60               MUL     R22, R16
   \   00000020   01F0               MOVW    R31:R30, R1:R0
   \   00000022   ....               SUBI    R30, LOW((-(TData + 1429) & 0xFFFF))
   \   00000024   ....               SBCI    R31, HIGH((-(TData + 1429) & 0xFFFF))
   \   00000026   8310               ST      Z, R17
    675              for (i = 2; i < (41 + 2); i++) {
   \   00000028   E002               LDI     R16, 2
   \   0000002A   E010               LDI     R17, 0
   \                     ??ReceiveCardEEPROMData_0:
   \   0000002C   320B               CPI     R16, 43
   \   0000002E   E040               LDI     R20, 0
   \   00000030   0714               CPC     R17, R20
   \   00000032   F4E4               BRGE    ??ReceiveCardEEPROMData_1
    676                  TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \   00000034   E14A               LDI     R20, 26
   \   00000036   9F64               MUL     R22, R20
   \   00000038   01F0               MOVW    R31:R30, R1:R0
   \   0000003A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000003E   8542               LDD     R20, Z+10
   \   00000040   8553               LDD     R21, Z+11
   \   00000042   01FA               MOVW    R31:R30, R21:R20
   \   00000044   0FE2               ADD     R30, R18
   \   00000046   1FF3               ADC     R31, R19
   \   00000048   8150               LD      R21, Z
   \   0000004A   E342               LDI     R20, 50
   \   0000004C   9F64               MUL     R22, R20
   \   0000004E   ....               LDI     R20, LOW(TData)
   \   00000050   0E04               ADD     R0, R20
   \   00000052   ....               LDI     R20, (TData) >> 8
   \   00000054   1E14               ADC     R1, R20
   \   00000056   0E00               ADD     R0, R16
   \   00000058   1E11               ADC     R1, R17
   \   0000005A   01F0               MOVW    R31:R30, R1:R0
   \   0000005C   56EC               SUBI    R30, 108
   \   0000005E   4FFA               SBCI    R31, 250
   \   00000060   8350               ST      Z, R21
   \   00000062   5F2F               SUBI    R18, 255
   \   00000064   4F3F               SBCI    R19, 255
    677              }
   \   00000066   5F0F               SUBI    R16, 255
   \   00000068   4F1F               SBCI    R17, 255
   \   0000006A   CFE0               RJMP    ??ReceiveCardEEPROMData_0
    678          }
   \                     ??ReceiveCardEEPROMData_1:
   \   0000006C   9508               RET
    679          
    680          /*************************************************************************
    681          *
    682          * Build send packet header for AN-SGCNV
    683          *
    684          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    685          void Uart_BuildHeader16552(char ch) {
   \                     Uart_BuildHeader16552:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
    686          
    687              UART16552[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   E020               LDI     R18, 0
   \   00000004   E030               LDI     R19, 0
   \   00000006   E11A               LDI     R17, 26
   \   00000008   9F01               MUL     R16, R17
   \   0000000A   01F0               MOVW    R31:R30, R1:R0
   \   0000000C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000010   8724               STD     Z+12, R18
   \   00000012   8735               STD     Z+13, R19
    688              UART16552[ch].RxLast = 0;
   \   00000014   E020               LDI     R18, 0
   \   00000016   E030               LDI     R19, 0
   \   00000018   E11A               LDI     R17, 26
   \   0000001A   9F01               MUL     R16, R17
   \   0000001C   01F0               MOVW    R31:R30, R1:R0
   \   0000001E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000020   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000022   8726               STD     Z+14, R18
   \   00000024   8737               STD     Z+15, R19
    689              UART16552[ch].TxLast = 0;
   \   00000026   E020               LDI     R18, 0
   \   00000028   E030               LDI     R19, 0
   \   0000002A   E11A               LDI     R17, 26
   \   0000002C   9F01               MUL     R16, R17
   \   0000002E   01F0               MOVW    R31:R30, R1:R0
   \   00000030   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000032   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000034   8324               STD     Z+4, R18
   \   00000036   8335               STD     Z+5, R19
    690          
    691              UART16552[ch].pTxBuffer[0] = ANPRO1_SYN;                        /* Sync */
   \   00000038   E012               LDI     R17, 2
   \   0000003A   E12A               LDI     R18, 26
   \   0000003C   9F02               MUL     R16, R18
   \   0000003E   01F0               MOVW    R31:R30, R1:R0
   \   00000040   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000044   81A0               LD      R26, Z
   \   00000046   81B1               LDD     R27, Z+1
   \   00000048   931C               ST      X, R17
    692              UART16552[ch].pTxBuffer[1] = ANPRO1_SYN;                        /* Sync */
   \   0000004A   E012               LDI     R17, 2
   \   0000004C   E12A               LDI     R18, 26
   \   0000004E   9F02               MUL     R16, R18
   \   00000050   01F0               MOVW    R31:R30, R1:R0
   \   00000052   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000054   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000056   81A0               LD      R26, Z
   \   00000058   81B1               LDD     R27, Z+1
   \   0000005A   9611               ADIW    R27:R26, 1
   \   0000005C   931C               ST      X, R17
   \   0000005E   9711               SBIW    R27:R26, 1
    693              UART16552[ch].pTxBuffer[2] = 0;                          /* Rx address */
   \   00000060   E11A               LDI     R17, 26
   \   00000062   9F01               MUL     R16, R17
   \   00000064   01F0               MOVW    R31:R30, R1:R0
   \   00000066   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006A   81A0               LD      R26, Z
   \   0000006C   81B1               LDD     R27, Z+1
   \   0000006E   9612               ADIW    R27:R26, 2
   \   00000070   E010               LDI     R17, 0
   \   00000072   931C               ST      X, R17
   \   00000074   9712               SBIW    R27:R26, 2
    694              UART16552[ch].pTxBuffer[3] = MY_SGCNV_ADDR;              /* My address to AD-SGCNV */
   \   00000076   EF1D               LDI     R17, 253
   \   00000078   E12A               LDI     R18, 26
   \   0000007A   9F02               MUL     R16, R18
   \   0000007C   01F0               MOVW    R31:R30, R1:R0
   \   0000007E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000082   81A0               LD      R26, Z
   \   00000084   81B1               LDD     R27, Z+1
   \   00000086   9613               ADIW    R27:R26, 3
   \   00000088   931C               ST      X, R17
   \   0000008A   9713               SBIW    R27:R26, 3
    695              UART16552[ch].pTxBuffer[4] = 0;                          /* packlen HB, don't know yet */
   \   0000008C   E11A               LDI     R17, 26
   \   0000008E   9F01               MUL     R16, R17
   \   00000090   01F0               MOVW    R31:R30, R1:R0
   \   00000092   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000094   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000096   81A0               LD      R26, Z
   \   00000098   81B1               LDD     R27, Z+1
   \   0000009A   9614               ADIW    R27:R26, 4
   \   0000009C   E010               LDI     R17, 0
   \   0000009E   931C               ST      X, R17
   \   000000A0   9714               SBIW    R27:R26, 4
    696              UART16552[ch].pTxBuffer[5] = 0;                          /* packlen LB, don't know yet */
   \   000000A2   E11A               LDI     R17, 26
   \   000000A4   9F01               MUL     R16, R17
   \   000000A6   01F0               MOVW    R31:R30, R1:R0
   \   000000A8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000AA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000AC   81A0               LD      R26, Z
   \   000000AE   81B1               LDD     R27, Z+1
   \   000000B0   9615               ADIW    R27:R26, 5
   \   000000B2   E010               LDI     R17, 0
   \   000000B4   931C               ST      X, R17
   \   000000B6   9715               SBIW    R27:R26, 5
    697          }
   \   000000B8   01DA               MOVW    R27:R26, R21:R20
   \   000000BA   9508               RET
    698          
    699          /*************************************************************************
    700          *
    701          * Build  packet tail
    702          *
    703          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    704          void Uart_BuildTail16552(char ch) {
   \                     Uart_BuildTail16552:
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    705          
    706              Uart_BuildHeader16552(ch);                                // fist build the header
   \   00000004   2F08               MOV     R16, R24
   \   00000006   ....               RCALL   Uart_BuildHeader16552
    707          
    708              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;         // command, No more data
   \   00000008   E021               LDI     R18, 1
   \   0000000A   E10A               LDI     R16, 26
   \   0000000C   9F80               MUL     R24, R16
   \   0000000E   01F0               MOVW    R31:R30, R1:R0
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8100               LD      R16, Z
   \   00000016   8111               LDD     R17, Z+1
   \   00000018   E13A               LDI     R19, 26
   \   0000001A   9F83               MUL     R24, R19
   \   0000001C   01F0               MOVW    R31:R30, R1:R0
   \   0000001E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000020   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000022   8142               LDD     R20, Z+2
   \   00000024   8153               LDD     R21, Z+3
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   0FE4               ADD     R30, R20
   \   0000002A   1FF5               ADC     R31, R21
   \   0000002C   8320               ST      Z, R18
   \   0000002E   E10A               LDI     R16, 26
   \   00000030   9F80               MUL     R24, R16
   \   00000032   01F0               MOVW    R31:R30, R1:R0
   \   00000034   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000036   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000038   8102               LDD     R16, Z+2
   \   0000003A   8113               LDD     R17, Z+3
   \   0000003C   5F0F               SUBI    R16, 255
   \   0000003E   4F1F               SBCI    R17, 255
   \   00000040   8302               STD     Z+2, R16
   \   00000042   8313               STD     Z+3, R17
    709              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;         // error
   \   00000044   E10A               LDI     R16, 26
   \   00000046   9F80               MUL     R24, R16
   \   00000048   01F0               MOVW    R31:R30, R1:R0
   \   0000004A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000004C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004E   8100               LD      R16, Z
   \   00000050   8111               LDD     R17, Z+1
   \   00000052   E12A               LDI     R18, 26
   \   00000054   9F82               MUL     R24, R18
   \   00000056   01F0               MOVW    R31:R30, R1:R0
   \   00000058   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000005C   8122               LDD     R18, Z+2
   \   0000005E   8133               LDD     R19, Z+3
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   0FE2               ADD     R30, R18
   \   00000064   1FF3               ADC     R31, R19
   \   00000066   E000               LDI     R16, 0
   \   00000068   8300               ST      Z, R16
   \   0000006A   E10A               LDI     R16, 26
   \   0000006C   9F80               MUL     R24, R16
   \   0000006E   01F0               MOVW    R31:R30, R1:R0
   \   00000070   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000072   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000074   8102               LDD     R16, Z+2
   \   00000076   8113               LDD     R17, Z+3
   \   00000078   5F0F               SUBI    R16, 255
   \   0000007A   4F1F               SBCI    R17, 255
   \   0000007C   8302               STD     Z+2, R16
   \   0000007E   8313               STD     Z+3, R17
    710          
    711              UART16552[ch].pTxBuffer[4] = (UART16552[ch].TxFirst) >> 8;           // packet len high
   \   00000080   E10A               LDI     R16, 26
   \   00000082   9F80               MUL     R24, R16
   \   00000084   01F0               MOVW    R31:R30, R1:R0
   \   00000086   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000088   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000008A   8102               LDD     R16, Z+2
   \   0000008C   8113               LDD     R17, Z+3
   \   0000008E   2F01               MOV     R16, R17
   \   00000090   E010               LDI     R17, 0
   \   00000092   2F20               MOV     R18, R16
   \   00000094   E10A               LDI     R16, 26
   \   00000096   9F80               MUL     R24, R16
   \   00000098   01F0               MOVW    R31:R30, R1:R0
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8100               LD      R16, Z
   \   000000A0   8111               LDD     R17, Z+1
   \   000000A2   01F8               MOVW    R31:R30, R17:R16
   \   000000A4   8324               STD     Z+4, R18
    712              UART16552[ch].pTxBuffer[5] = UART16552[ch].TxFirst;                // correct length because stx's
   \   000000A6   E10A               LDI     R16, 26
   \   000000A8   9F80               MUL     R24, R16
   \   000000AA   01F0               MOVW    R31:R30, R1:R0
   \   000000AC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000AE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000B0   8102               LDD     R16, Z+2
   \   000000B2   8113               LDD     R17, Z+3
   \   000000B4   2F20               MOV     R18, R16
   \   000000B6   E10A               LDI     R16, 26
   \   000000B8   9F80               MUL     R24, R16
   \   000000BA   01F0               MOVW    R31:R30, R1:R0
   \   000000BC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000C0   8100               LD      R16, Z
   \   000000C2   8111               LDD     R17, Z+1
   \   000000C4   01F8               MOVW    R31:R30, R17:R16
   \   000000C6   8325               STD     Z+5, R18
    713          
    714          
    715              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst] = CalcDSTxChecksumUART16552(ch, UART16552[ch].TxFirst); // Get checksum
   \   000000C8   E10A               LDI     R16, 26
   \   000000CA   9F80               MUL     R24, R16
   \   000000CC   01F0               MOVW    R31:R30, R1:R0
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8122               LDD     R18, Z+2
   \   000000D4   8133               LDD     R19, Z+3
   \   000000D6   2F08               MOV     R16, R24
   \   000000D8   ....               RCALL   CalcDSTxChecksumUART16552
   \   000000DA   2F20               MOV     R18, R16
   \   000000DC   E10A               LDI     R16, 26
   \   000000DE   9F80               MUL     R24, R16
   \   000000E0   01F0               MOVW    R31:R30, R1:R0
   \   000000E2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000E4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000E6   8100               LD      R16, Z
   \   000000E8   8111               LDD     R17, Z+1
   \   000000EA   E13A               LDI     R19, 26
   \   000000EC   9F83               MUL     R24, R19
   \   000000EE   01F0               MOVW    R31:R30, R1:R0
   \   000000F0   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F2   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F4   8142               LDD     R20, Z+2
   \   000000F6   8153               LDD     R21, Z+3
   \   000000F8   01F8               MOVW    R31:R30, R17:R16
   \   000000FA   0FE4               ADD     R30, R20
   \   000000FC   1FF5               ADC     R31, R21
   \   000000FE   8320               ST      Z, R18
    716              UART16552[ch].TxFirst++;                                     // OBS!! must be inc here due
   \   00000100   E10A               LDI     R16, 26
   \   00000102   9F80               MUL     R24, R16
   \   00000104   01F0               MOVW    R31:R30, R1:R0
   \   00000106   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000108   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000010A   8102               LDD     R16, Z+2
   \   0000010C   8113               LDD     R17, Z+3
   \   0000010E   5F0F               SUBI    R16, 255
   \   00000110   4F1F               SBCI    R17, 255
   \   00000112   8302               STD     Z+2, R16
   \   00000114   8313               STD     Z+3, R17
    717                                                                           // to ANSI standard !!!!
    718          
    719              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANPRO1_EOT;            // End of transmission
   \   00000116   E023               LDI     R18, 3
   \   00000118   E10A               LDI     R16, 26
   \   0000011A   9F80               MUL     R24, R16
   \   0000011C   01F0               MOVW    R31:R30, R1:R0
   \   0000011E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000120   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000122   8100               LD      R16, Z
   \   00000124   8111               LDD     R17, Z+1
   \   00000126   E13A               LDI     R19, 26
   \   00000128   9F83               MUL     R24, R19
   \   0000012A   01F0               MOVW    R31:R30, R1:R0
   \   0000012C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000012E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000130   8142               LDD     R20, Z+2
   \   00000132   8153               LDD     R21, Z+3
   \   00000134   01F8               MOVW    R31:R30, R17:R16
   \   00000136   0FE4               ADD     R30, R20
   \   00000138   1FF5               ADC     R31, R21
   \   0000013A   8320               ST      Z, R18
   \   0000013C   E10A               LDI     R16, 26
   \   0000013E   9F80               MUL     R24, R16
   \   00000140   01F0               MOVW    R31:R30, R1:R0
   \   00000142   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000144   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000146   8102               LDD     R16, Z+2
   \   00000148   8113               LDD     R17, Z+3
   \   0000014A   5F0F               SUBI    R16, 255
   \   0000014C   4F1F               SBCI    R17, 255
   \   0000014E   8302               STD     Z+2, R16
   \   00000150   8313               STD     Z+3, R17
    720              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0x00;            //switch off transmitter delay
   \   00000152   E10A               LDI     R16, 26
   \   00000154   9F80               MUL     R24, R16
   \   00000156   01F0               MOVW    R31:R30, R1:R0
   \   00000158   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000015A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000015C   8100               LD      R16, Z
   \   0000015E   8111               LDD     R17, Z+1
   \   00000160   E12A               LDI     R18, 26
   \   00000162   9F82               MUL     R24, R18
   \   00000164   01F0               MOVW    R31:R30, R1:R0
   \   00000166   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000168   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000016A   8122               LDD     R18, Z+2
   \   0000016C   8133               LDD     R19, Z+3
   \   0000016E   01F8               MOVW    R31:R30, R17:R16
   \   00000170   0FE2               ADD     R30, R18
   \   00000172   1FF3               ADC     R31, R19
   \   00000174   E000               LDI     R16, 0
   \   00000176   8300               ST      Z, R16
   \   00000178   E10A               LDI     R16, 26
   \   0000017A   9F80               MUL     R24, R16
   \   0000017C   01F0               MOVW    R31:R30, R1:R0
   \   0000017E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000180   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000182   8102               LDD     R16, Z+2
   \   00000184   8113               LDD     R17, Z+3
   \   00000186   5F0F               SUBI    R16, 255
   \   00000188   4F1F               SBCI    R17, 255
   \   0000018A   8302               STD     Z+2, R16
   \   0000018C   8313               STD     Z+3, R17
    721          
    722              UART16552[ch].TxCount = UART16552[ch].TxFirst - 1;       //bytes to send (-1 for the start byte)
   \   0000018E   E10A               LDI     R16, 26
   \   00000190   9F80               MUL     R24, R16
   \   00000192   01F0               MOVW    R31:R30, R1:R0
   \   00000194   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000196   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000198   8102               LDD     R16, Z+2
   \   0000019A   8113               LDD     R17, Z+3
   \   0000019C   5001               SUBI    R16, 1
   \   0000019E   4010               SBCI    R17, 0
   \   000001A0   E12A               LDI     R18, 26
   \   000001A2   9F82               MUL     R24, R18
   \   000001A4   01F0               MOVW    R31:R30, R1:R0
   \   000001A6   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001A8   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001AA   8306               STD     Z+6, R16
   \   000001AC   8317               STD     Z+7, R17
    723              UART16552[ch].TxLast = 1;                               // sent 1 byte
   \   000001AE   E001               LDI     R16, 1
   \   000001B0   E010               LDI     R17, 0
   \   000001B2   E12A               LDI     R18, 26
   \   000001B4   9F82               MUL     R24, R18
   \   000001B6   01F0               MOVW    R31:R30, R1:R0
   \   000001B8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001BA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001BC   8304               STD     Z+4, R16
   \   000001BE   8315               STD     Z+5, R17
    724              GoToSyncUART16552(ch);                                 // go to sync modus for recive
   \   000001C0   2F08               MOV     R16, R24
   \   000001C2   ....               RCALL   GoToSyncUART16552
    725              if (ch == 0) {                                           // Turn on TXE for channel
   \   000001C4   2388               TST     R24
   \   000001C6   F4C9               BRNE    ??Uart_BuildTail16552_0
    726                  OS_RetriggerTimer(&TimerUART0);                    // and start timeout timer
   \   000001C8   ....               LDI     R16, LOW(TimerUART0)
   \   000001CA   ....               LDI     R17, (TimerUART0) >> 8
   \   000001CC   ........           CALL    OS_RetriggerTimer
    727                  U0_MCR |= RTS;                                    // set RTS on
   \   000001D0   E0EC               LDI     R30, LOW(8716)
   \   000001D2   E2F2               LDI     R31, (8716) >> 8
   \   000001D4   8100               LD      R16, Z
   \   000001D6   6002               ORI     R16, 0x02
   \   000001D8   8300               ST      Z, R16
    728                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   000001DA   E104               LDI     R16, 20
   \   000001DC   E010               LDI     R17, 0
   \   000001DE   ........           CALL    OS_Delay
    729                  U0_THR = UART16552[ch].pTxBuffer[0];                // Send 1. byte
   \   000001E2   E10A               LDI     R16, 26
   \   000001E4   9F80               MUL     R24, R16
   \   000001E6   01F0               MOVW    R31:R30, R1:R0
   \   000001E8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001EA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001EC   8100               LD      R16, Z
   \   000001EE   8111               LDD     R17, Z+1
   \   000001F0   01F8               MOVW    R31:R30, R17:R16
   \   000001F2   8100               LD      R16, Z
   \   000001F4   93002208           STS     8712, R16
   \   000001F8   C01A               RJMP    ??Uart_BuildTail16552_1
    730              } else if (ch == 1) {
   \                     ??Uart_BuildTail16552_0:
   \   000001FA   3081               CPI     R24, 1
   \   000001FC   F4C1               BRNE    ??Uart_BuildTail16552_1
    731                  OS_RetriggerTimer(&TimerUART1);                    // and start timeout timer
   \   000001FE   ....               LDI     R16, LOW(TimerUART1)
   \   00000200   ....               LDI     R17, (TimerUART1) >> 8
   \   00000202   ........           CALL    OS_RetriggerTimer
    732                  U1_MCR |= RTS;                                      // set RTS on
   \   00000206   E0E4               LDI     R30, LOW(8708)
   \   00000208   E2F2               LDI     R31, (8708) >> 8
   \   0000020A   8100               LD      R16, Z
   \   0000020C   6002               ORI     R16, 0x02
   \   0000020E   8300               ST      Z, R16
    733                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   00000210   E104               LDI     R16, 20
   \   00000212   E010               LDI     R17, 0
   \   00000214   ........           CALL    OS_Delay
    734                  U1_THR = UART16552[ch].pTxBuffer[0];                  // Send 1. byte
   \   00000218   E10A               LDI     R16, 26
   \   0000021A   9F80               MUL     R24, R16
   \   0000021C   01F0               MOVW    R31:R30, R1:R0
   \   0000021E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000220   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000222   8100               LD      R16, Z
   \   00000224   8111               LDD     R17, Z+1
   \   00000226   01F8               MOVW    R31:R30, R17:R16
   \   00000228   8100               LD      R16, Z
   \   0000022A   93002200           STS     8704, R16
    735              }
    736          }
   \                     ??Uart_BuildTail16552_1:
   \   0000022E   9189               LD      R24, Y+
   \   00000230   9508               RET
    737          
    738          /*************************************************************************
    739          *
    740          * Build send request for system status on WIS
    741          *
    742          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    743          void Uart_BuildReqWISCardStatus(char ch) {
   \                     Uart_BuildReqWISCardStatus:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
    744          
    745              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_STAT;       /*command, send data */
   \   00000002   E614               LDI     R17, 100
   \   00000004   E12A               LDI     R18, 26
   \   00000006   9F02               MUL     R16, R18
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   8120               LD      R18, Z
   \   00000010   8131               LDD     R19, Z+1
   \   00000012   E14A               LDI     R20, 26
   \   00000014   9F04               MUL     R16, R20
   \   00000016   01F0               MOVW    R31:R30, R1:R0
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   8142               LDD     R20, Z+2
   \   0000001E   8153               LDD     R21, Z+3
   \   00000020   01F9               MOVW    R31:R30, R19:R18
   \   00000022   0FE4               ADD     R30, R20
   \   00000024   1FF5               ADC     R31, R21
   \   00000026   8310               ST      Z, R17
   \   00000028   E11A               LDI     R17, 26
   \   0000002A   9F01               MUL     R16, R17
   \   0000002C   01F0               MOVW    R31:R30, R1:R0
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000032   8122               LDD     R18, Z+2
   \   00000034   8133               LDD     R19, Z+3
   \   00000036   5F2F               SUBI    R18, 255
   \   00000038   4F3F               SBCI    R19, 255
   \   0000003A   8322               STD     Z+2, R18
   \   0000003C   8333               STD     Z+3, R19
    746              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
   \   0000003E   E11A               LDI     R17, 26
   \   00000040   9F01               MUL     R16, R17
   \   00000042   01F0               MOVW    R31:R30, R1:R0
   \   00000044   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000048   81A0               LD      R26, Z
   \   0000004A   81B1               LDD     R27, Z+1
   \   0000004C   E11A               LDI     R17, 26
   \   0000004E   9F01               MUL     R16, R17
   \   00000050   01F0               MOVW    R31:R30, R1:R0
   \   00000052   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000054   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000056   8122               LDD     R18, Z+2
   \   00000058   8133               LDD     R19, Z+3
   \   0000005A   0FA2               ADD     R26, R18
   \   0000005C   1FB3               ADC     R27, R19
   \   0000005E   E010               LDI     R17, 0
   \   00000060   931C               ST      X, R17
   \   00000062   E11A               LDI     R17, 26
   \   00000064   9F01               MUL     R16, R17
   \   00000066   01F0               MOVW    R31:R30, R1:R0
   \   00000068   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000006A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006C   8122               LDD     R18, Z+2
   \   0000006E   8133               LDD     R19, Z+3
   \   00000070   5F2F               SUBI    R18, 255
   \   00000072   4F3F               SBCI    R19, 255
   \   00000074   8322               STD     Z+2, R18
   \   00000076   8333               STD     Z+3, R19
    747          
    748          }
   \   00000078   01DB               MOVW    R27:R26, R23:R22
   \   0000007A   9508               RET
    749          
    750          /*************************************************************************
    751          *
    752          * Build send request for WIS protocoler on WIS
    753          *
    754          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    755          void Uart_BuildReqWISXData(char ch, char sndcmd) {
   \                     Uart_BuildReqWISXData:
    756          
    757              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_XDATA;       /*command, send data */
   \   00000000   E646               LDI     R20, 102
   \   00000002   E12A               LDI     R18, 26
   \   00000004   9F02               MUL     R16, R18
   \   00000006   01F0               MOVW    R31:R30, R1:R0
   \   00000008   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000C   8120               LD      R18, Z
   \   0000000E   8131               LDD     R19, Z+1
   \   00000010   E15A               LDI     R21, 26
   \   00000012   9F05               MUL     R16, R21
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001A   8162               LDD     R22, Z+2
   \   0000001C   8173               LDD     R23, Z+3
   \   0000001E   01F9               MOVW    R31:R30, R19:R18
   \   00000020   0FE6               ADD     R30, R22
   \   00000022   1FF7               ADC     R31, R23
   \   00000024   8340               ST      Z, R20
   \   00000026   E12A               LDI     R18, 26
   \   00000028   9F02               MUL     R16, R18
   \   0000002A   01F0               MOVW    R31:R30, R1:R0
   \   0000002C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000030   8122               LDD     R18, Z+2
   \   00000032   8133               LDD     R19, Z+3
   \   00000034   5F2F               SUBI    R18, 255
   \   00000036   4F3F               SBCI    R19, 255
   \   00000038   8322               STD     Z+2, R18
   \   0000003A   8333               STD     Z+3, R19
    758              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
   \   0000003C   E041               LDI     R20, 1
   \   0000003E   E12A               LDI     R18, 26
   \   00000040   9F02               MUL     R16, R18
   \   00000042   01F0               MOVW    R31:R30, R1:R0
   \   00000044   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000048   8120               LD      R18, Z
   \   0000004A   8131               LDD     R19, Z+1
   \   0000004C   E15A               LDI     R21, 26
   \   0000004E   9F05               MUL     R16, R21
   \   00000050   01F0               MOVW    R31:R30, R1:R0
   \   00000052   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000054   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000056   8162               LDD     R22, Z+2
   \   00000058   8173               LDD     R23, Z+3
   \   0000005A   01F9               MOVW    R31:R30, R19:R18
   \   0000005C   0FE6               ADD     R30, R22
   \   0000005E   1FF7               ADC     R31, R23
   \   00000060   8340               ST      Z, R20
   \   00000062   E12A               LDI     R18, 26
   \   00000064   9F02               MUL     R16, R18
   \   00000066   01F0               MOVW    R31:R30, R1:R0
   \   00000068   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000006A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006C   8122               LDD     R18, Z+2
   \   0000006E   8133               LDD     R19, Z+3
   \   00000070   5F2F               SUBI    R18, 255
   \   00000072   4F3F               SBCI    R19, 255
   \   00000074   8322               STD     Z+2, R18
   \   00000076   8333               STD     Z+3, R19
    759              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = sndcmd;                 // xdata cmd
   \   00000078   E12A               LDI     R18, 26
   \   0000007A   9F02               MUL     R16, R18
   \   0000007C   01F0               MOVW    R31:R30, R1:R0
   \   0000007E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000082   8120               LD      R18, Z
   \   00000084   8131               LDD     R19, Z+1
   \   00000086   E14A               LDI     R20, 26
   \   00000088   9F04               MUL     R16, R20
   \   0000008A   01F0               MOVW    R31:R30, R1:R0
   \   0000008C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000008E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000090   8142               LDD     R20, Z+2
   \   00000092   8153               LDD     R21, Z+3
   \   00000094   01F9               MOVW    R31:R30, R19:R18
   \   00000096   0FE4               ADD     R30, R20
   \   00000098   1FF5               ADC     R31, R21
   \   0000009A   8310               ST      Z, R17
   \   0000009C   E12A               LDI     R18, 26
   \   0000009E   9F02               MUL     R16, R18
   \   000000A0   01F0               MOVW    R31:R30, R1:R0
   \   000000A2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000A6   8122               LDD     R18, Z+2
   \   000000A8   8133               LDD     R19, Z+3
   \   000000AA   5F2F               SUBI    R18, 255
   \   000000AC   4F3F               SBCI    R19, 255
   \   000000AE   8322               STD     Z+2, R18
   \   000000B0   8333               STD     Z+3, R19
    760          
    761          }
   \   000000B2   9508               RET
    762          
    763          /*************************************************************************
    764          *
    765          * Build send request for measure data to Water ingress
    766          *
    767          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    768          void Uart_BuildReqWISData(char ch) {
   \                     Uart_BuildReqWISData:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
    769          
    770              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_DATA;       /*command, send data */
   \   00000002   E615               LDI     R17, 101
   \   00000004   E12A               LDI     R18, 26
   \   00000006   9F02               MUL     R16, R18
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   8120               LD      R18, Z
   \   00000010   8131               LDD     R19, Z+1
   \   00000012   E14A               LDI     R20, 26
   \   00000014   9F04               MUL     R16, R20
   \   00000016   01F0               MOVW    R31:R30, R1:R0
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   8142               LDD     R20, Z+2
   \   0000001E   8153               LDD     R21, Z+3
   \   00000020   01F9               MOVW    R31:R30, R19:R18
   \   00000022   0FE4               ADD     R30, R20
   \   00000024   1FF5               ADC     R31, R21
   \   00000026   8310               ST      Z, R17
   \   00000028   E11A               LDI     R17, 26
   \   0000002A   9F01               MUL     R16, R17
   \   0000002C   01F0               MOVW    R31:R30, R1:R0
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000032   8122               LDD     R18, Z+2
   \   00000034   8133               LDD     R19, Z+3
   \   00000036   5F2F               SUBI    R18, 255
   \   00000038   4F3F               SBCI    R19, 255
   \   0000003A   8322               STD     Z+2, R18
   \   0000003C   8333               STD     Z+3, R19
    771              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   0000003E   E011               LDI     R17, 1
   \   00000040   E12A               LDI     R18, 26
   \   00000042   9F02               MUL     R16, R18
   \   00000044   01F0               MOVW    R31:R30, R1:R0
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8120               LD      R18, Z
   \   0000004C   8131               LDD     R19, Z+1
   \   0000004E   E14A               LDI     R20, 26
   \   00000050   9F04               MUL     R16, R20
   \   00000052   01F0               MOVW    R31:R30, R1:R0
   \   00000054   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000056   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000058   8142               LDD     R20, Z+2
   \   0000005A   8153               LDD     R21, Z+3
   \   0000005C   01F9               MOVW    R31:R30, R19:R18
   \   0000005E   0FE4               ADD     R30, R20
   \   00000060   1FF5               ADC     R31, R21
   \   00000062   8310               ST      Z, R17
   \   00000064   E11A               LDI     R17, 26
   \   00000066   9F01               MUL     R16, R17
   \   00000068   01F0               MOVW    R31:R30, R1:R0
   \   0000006A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006E   8122               LDD     R18, Z+2
   \   00000070   8133               LDD     R19, Z+3
   \   00000072   5F2F               SUBI    R18, 255
   \   00000074   4F3F               SBCI    R19, 255
   \   00000076   8322               STD     Z+2, R18
   \   00000078   8333               STD     Z+3, R19
    772              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   0000007A   E11A               LDI     R17, 26
   \   0000007C   9F01               MUL     R16, R17
   \   0000007E   01F0               MOVW    R31:R30, R1:R0
   \   00000080   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000084   81A0               LD      R26, Z
   \   00000086   81B1               LDD     R27, Z+1
   \   00000088   E11A               LDI     R17, 26
   \   0000008A   9F01               MUL     R16, R17
   \   0000008C   01F0               MOVW    R31:R30, R1:R0
   \   0000008E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000092   8122               LDD     R18, Z+2
   \   00000094   8133               LDD     R19, Z+3
   \   00000096   0FA2               ADD     R26, R18
   \   00000098   1FB3               ADC     R27, R19
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   931C               ST      X, R17
   \   0000009E   E11A               LDI     R17, 26
   \   000000A0   9F01               MUL     R16, R17
   \   000000A2   01F0               MOVW    R31:R30, R1:R0
   \   000000A4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000A6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000A8   8122               LDD     R18, Z+2
   \   000000AA   8133               LDD     R19, Z+3
   \   000000AC   5F2F               SUBI    R18, 255
   \   000000AE   4F3F               SBCI    R19, 255
   \   000000B0   8322               STD     Z+2, R18
   \   000000B2   8333               STD     Z+3, R19
    773          
    774          }
   \   000000B4   01DB               MOVW    R27:R26, R23:R22
   \   000000B6   9508               RET
    775          
    776          
    777          /*************************************************************************
    778          *
    779          * Build send request for GODA measurement
    780          *
    781          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    782          void Uart_BuildReqRadarData(char ch) {
   \                     Uart_BuildReqRadarData:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
    783          
    784              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_DATA;       /*command, send data */
   \   00000002   EA10               LDI     R17, 160
   \   00000004   E12A               LDI     R18, 26
   \   00000006   9F02               MUL     R16, R18
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   8120               LD      R18, Z
   \   00000010   8131               LDD     R19, Z+1
   \   00000012   E14A               LDI     R20, 26
   \   00000014   9F04               MUL     R16, R20
   \   00000016   01F0               MOVW    R31:R30, R1:R0
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   8142               LDD     R20, Z+2
   \   0000001E   8153               LDD     R21, Z+3
   \   00000020   01F9               MOVW    R31:R30, R19:R18
   \   00000022   0FE4               ADD     R30, R20
   \   00000024   1FF5               ADC     R31, R21
   \   00000026   8310               ST      Z, R17
   \   00000028   E11A               LDI     R17, 26
   \   0000002A   9F01               MUL     R16, R17
   \   0000002C   01F0               MOVW    R31:R30, R1:R0
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000032   8122               LDD     R18, Z+2
   \   00000034   8133               LDD     R19, Z+3
   \   00000036   5F2F               SUBI    R18, 255
   \   00000038   4F3F               SBCI    R19, 255
   \   0000003A   8322               STD     Z+2, R18
   \   0000003C   8333               STD     Z+3, R19
    785              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
   \   0000003E   E011               LDI     R17, 1
   \   00000040   E12A               LDI     R18, 26
   \   00000042   9F02               MUL     R16, R18
   \   00000044   01F0               MOVW    R31:R30, R1:R0
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8120               LD      R18, Z
   \   0000004C   8131               LDD     R19, Z+1
   \   0000004E   E14A               LDI     R20, 26
   \   00000050   9F04               MUL     R16, R20
   \   00000052   01F0               MOVW    R31:R30, R1:R0
   \   00000054   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000056   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000058   8142               LDD     R20, Z+2
   \   0000005A   8153               LDD     R21, Z+3
   \   0000005C   01F9               MOVW    R31:R30, R19:R18
   \   0000005E   0FE4               ADD     R30, R20
   \   00000060   1FF5               ADC     R31, R21
   \   00000062   8310               ST      Z, R17
   \   00000064   E11A               LDI     R17, 26
   \   00000066   9F01               MUL     R16, R17
   \   00000068   01F0               MOVW    R31:R30, R1:R0
   \   0000006A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006E   8122               LDD     R18, Z+2
   \   00000070   8133               LDD     R19, Z+3
   \   00000072   5F2F               SUBI    R18, 255
   \   00000074   4F3F               SBCI    R19, 255
   \   00000076   8322               STD     Z+2, R18
   \   00000078   8333               STD     Z+3, R19
    786              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 // data
   \   0000007A   E11A               LDI     R17, 26
   \   0000007C   9F01               MUL     R16, R17
   \   0000007E   01F0               MOVW    R31:R30, R1:R0
   \   00000080   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000084   81A0               LD      R26, Z
   \   00000086   81B1               LDD     R27, Z+1
   \   00000088   E11A               LDI     R17, 26
   \   0000008A   9F01               MUL     R16, R17
   \   0000008C   01F0               MOVW    R31:R30, R1:R0
   \   0000008E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000092   8122               LDD     R18, Z+2
   \   00000094   8133               LDD     R19, Z+3
   \   00000096   0FA2               ADD     R26, R18
   \   00000098   1FB3               ADC     R27, R19
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   931C               ST      X, R17
   \   0000009E   E11A               LDI     R17, 26
   \   000000A0   9F01               MUL     R16, R17
   \   000000A2   01F0               MOVW    R31:R30, R1:R0
   \   000000A4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000A6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000A8   8122               LDD     R18, Z+2
   \   000000AA   8133               LDD     R19, Z+3
   \   000000AC   5F2F               SUBI    R18, 255
   \   000000AE   4F3F               SBCI    R19, 255
   \   000000B0   8322               STD     Z+2, R18
   \   000000B2   8333               STD     Z+3, R19
    787          
    788          }
   \   000000B4   01DB               MOVW    R27:R26, R23:R22
   \   000000B6   9508               RET
    789          
    790          /*************************************************************************
    791          *
    792          * Build send request for GODA device information
    793          *
    794          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    795          void Uart_BuildReqRadarInfo(char ch) {
   \                     Uart_BuildReqRadarInfo:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
    796          
    797              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_INFO;       /*command, send data */
   \   00000002   EA11               LDI     R17, 161
   \   00000004   E12A               LDI     R18, 26
   \   00000006   9F02               MUL     R16, R18
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   8120               LD      R18, Z
   \   00000010   8131               LDD     R19, Z+1
   \   00000012   E14A               LDI     R20, 26
   \   00000014   9F04               MUL     R16, R20
   \   00000016   01F0               MOVW    R31:R30, R1:R0
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   8142               LDD     R20, Z+2
   \   0000001E   8153               LDD     R21, Z+3
   \   00000020   01F9               MOVW    R31:R30, R19:R18
   \   00000022   0FE4               ADD     R30, R20
   \   00000024   1FF5               ADC     R31, R21
   \   00000026   8310               ST      Z, R17
   \   00000028   E11A               LDI     R17, 26
   \   0000002A   9F01               MUL     R16, R17
   \   0000002C   01F0               MOVW    R31:R30, R1:R0
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000032   8122               LDD     R18, Z+2
   \   00000034   8133               LDD     R19, Z+3
   \   00000036   5F2F               SUBI    R18, 255
   \   00000038   4F3F               SBCI    R19, 255
   \   0000003A   8322               STD     Z+2, R18
   \   0000003C   8333               STD     Z+3, R19
    798              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                        /*nob */
   \   0000003E   E11A               LDI     R17, 26
   \   00000040   9F01               MUL     R16, R17
   \   00000042   01F0               MOVW    R31:R30, R1:R0
   \   00000044   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000048   81A0               LD      R26, Z
   \   0000004A   81B1               LDD     R27, Z+1
   \   0000004C   E11A               LDI     R17, 26
   \   0000004E   9F01               MUL     R16, R17
   \   00000050   01F0               MOVW    R31:R30, R1:R0
   \   00000052   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000054   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000056   8122               LDD     R18, Z+2
   \   00000058   8133               LDD     R19, Z+3
   \   0000005A   0FA2               ADD     R26, R18
   \   0000005C   1FB3               ADC     R27, R19
   \   0000005E   E010               LDI     R17, 0
   \   00000060   931C               ST      X, R17
   \   00000062   E11A               LDI     R17, 26
   \   00000064   9F01               MUL     R16, R17
   \   00000066   01F0               MOVW    R31:R30, R1:R0
   \   00000068   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000006A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006C   8122               LDD     R18, Z+2
   \   0000006E   8133               LDD     R19, Z+3
   \   00000070   5F2F               SUBI    R18, 255
   \   00000072   4F3F               SBCI    R19, 255
   \   00000074   8322               STD     Z+2, R18
   \   00000076   8333               STD     Z+3, R19
    799          }
   \   00000078   01DB               MOVW    R27:R26, R23:R22
   \   0000007A   9508               RET
    800          
    801          /*************************************************************************
    802          *
    803          * Build datablock to AN-SGCNV
    804          *
    805          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    806          void Uart_BuildSndData(char ch) {
   \                     Uart_BuildSndData:
   \   00000000   2F30               MOV     R19, R16
    807          
    808              char i;
    809          
    810              for (i = 3; i < (TData.RS4.ToTargetBuffer[ch][2]) + 3; i++) {
   \   00000002   E023               LDI     R18, 3
   \                     ??Uart_BuildSndData_0:
   \   00000004   2F42               MOV     R20, R18
   \   00000006   E050               LDI     R21, 0
   \   00000008   E500               LDI     R16, 80
   \   0000000A   9F30               MUL     R19, R16
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(TData + 1270) & 0xFFFF))
   \   00000010   ....               SBCI    R31, HIGH((-(TData + 1270) & 0xFFFF))
   \   00000012   8100               LD      R16, Z
   \   00000014   E010               LDI     R17, 0
   \   00000016   5F0D               SUBI    R16, 253
   \   00000018   4F1F               SBCI    R17, 255
   \   0000001A   1740               CP      R20, R16
   \   0000001C   0751               CPC     R21, R17
   \   0000001E   F56C               BRGE    ??Uart_BuildSndData_1
    811                  UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.ToTargetBuffer[ch][i];       /*command, send data */
   \   00000020   E500               LDI     R16, 80
   \   00000022   9F30               MUL     R19, R16
   \   00000024   ....               LDI     R16, LOW(TData)
   \   00000026   0E00               ADD     R0, R16
   \   00000028   ....               LDI     R16, (TData) >> 8
   \   0000002A   1E10               ADC     R1, R16
   \   0000002C   2F02               MOV     R16, R18
   \   0000002E   E010               LDI     R17, 0
   \   00000030   0E00               ADD     R0, R16
   \   00000032   1E11               ADC     R1, R17
   \   00000034   01F0               MOVW    R31:R30, R1:R0
   \   00000036   50EC               SUBI    R30, 12
   \   00000038   4FFB               SBCI    R31, 251
   \   0000003A   8140               LD      R20, Z
   \   0000003C   E10A               LDI     R16, 26
   \   0000003E   9F30               MUL     R19, R16
   \   00000040   01F0               MOVW    R31:R30, R1:R0
   \   00000042   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000046   8100               LD      R16, Z
   \   00000048   8111               LDD     R17, Z+1
   \   0000004A   E15A               LDI     R21, 26
   \   0000004C   9F35               MUL     R19, R21
   \   0000004E   01F0               MOVW    R31:R30, R1:R0
   \   00000050   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000052   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000054   8162               LDD     R22, Z+2
   \   00000056   8173               LDD     R23, Z+3
   \   00000058   01F8               MOVW    R31:R30, R17:R16
   \   0000005A   0FE6               ADD     R30, R22
   \   0000005C   1FF7               ADC     R31, R23
   \   0000005E   8340               ST      Z, R20
   \   00000060   E10A               LDI     R16, 26
   \   00000062   9F30               MUL     R19, R16
   \   00000064   01F0               MOVW    R31:R30, R1:R0
   \   00000066   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006A   8102               LDD     R16, Z+2
   \   0000006C   8113               LDD     R17, Z+3
   \   0000006E   5F0F               SUBI    R16, 255
   \   00000070   4F1F               SBCI    R17, 255
   \   00000072   8302               STD     Z+2, R16
   \   00000074   8313               STD     Z+3, R17
    812              }
   \   00000076   9523               INC     R18
   \   00000078   CFC5               RJMP    ??Uart_BuildSndData_0
    813              TData.RS4.ToTargetBuffer[ch][0] = false;            // data sent
   \                     ??Uart_BuildSndData_1:
   \   0000007A   E500               LDI     R16, 80
   \   0000007C   9F30               MUL     R19, R16
   \   0000007E   01F0               MOVW    R31:R30, R1:R0
   \   00000080   ....               SUBI    R30, LOW((-(TData + 1268) & 0xFFFF))
   \   00000082   ....               SBCI    R31, HIGH((-(TData + 1268) & 0xFFFF))
   \   00000084   E000               LDI     R16, 0
   \   00000086   8300               ST      Z, R16
    814          }
   \   00000088   9508               RET
    815          
    816          /*************************************************************************
    817          *
    818          * Build send request for measure data to AN-SGCNV
    819          *
    820          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    821          void Uart_BuildReqM16552(char ch) {
   \                     Uart_BuildReqM16552:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
    822          
    823              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_M_DATA;       /*command, send data */
   \   00000002   E01A               LDI     R17, 10
   \   00000004   E12A               LDI     R18, 26
   \   00000006   9F02               MUL     R16, R18
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   8120               LD      R18, Z
   \   00000010   8131               LDD     R19, Z+1
   \   00000012   E14A               LDI     R20, 26
   \   00000014   9F04               MUL     R16, R20
   \   00000016   01F0               MOVW    R31:R30, R1:R0
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   8142               LDD     R20, Z+2
   \   0000001E   8153               LDD     R21, Z+3
   \   00000020   01F9               MOVW    R31:R30, R19:R18
   \   00000022   0FE4               ADD     R30, R20
   \   00000024   1FF5               ADC     R31, R21
   \   00000026   8310               ST      Z, R17
   \   00000028   E11A               LDI     R17, 26
   \   0000002A   9F01               MUL     R16, R17
   \   0000002C   01F0               MOVW    R31:R30, R1:R0
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000032   8122               LDD     R18, Z+2
   \   00000034   8133               LDD     R19, Z+3
   \   00000036   5F2F               SUBI    R18, 255
   \   00000038   4F3F               SBCI    R19, 255
   \   0000003A   8322               STD     Z+2, R18
   \   0000003C   8333               STD     Z+3, R19
    824              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   0000003E   E011               LDI     R17, 1
   \   00000040   E12A               LDI     R18, 26
   \   00000042   9F02               MUL     R16, R18
   \   00000044   01F0               MOVW    R31:R30, R1:R0
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8120               LD      R18, Z
   \   0000004C   8131               LDD     R19, Z+1
   \   0000004E   E14A               LDI     R20, 26
   \   00000050   9F04               MUL     R16, R20
   \   00000052   01F0               MOVW    R31:R30, R1:R0
   \   00000054   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000056   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000058   8142               LDD     R20, Z+2
   \   0000005A   8153               LDD     R21, Z+3
   \   0000005C   01F9               MOVW    R31:R30, R19:R18
   \   0000005E   0FE4               ADD     R30, R20
   \   00000060   1FF5               ADC     R31, R21
   \   00000062   8310               ST      Z, R17
   \   00000064   E11A               LDI     R17, 26
   \   00000066   9F01               MUL     R16, R17
   \   00000068   01F0               MOVW    R31:R30, R1:R0
   \   0000006A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006E   8122               LDD     R18, Z+2
   \   00000070   8133               LDD     R19, Z+3
   \   00000072   5F2F               SUBI    R18, 255
   \   00000074   4F3F               SBCI    R19, 255
   \   00000076   8322               STD     Z+2, R18
   \   00000078   8333               STD     Z+3, R19
    825              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   0000007A   E11A               LDI     R17, 26
   \   0000007C   9F01               MUL     R16, R17
   \   0000007E   01F0               MOVW    R31:R30, R1:R0
   \   00000080   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000084   81A0               LD      R26, Z
   \   00000086   81B1               LDD     R27, Z+1
   \   00000088   E11A               LDI     R17, 26
   \   0000008A   9F01               MUL     R16, R17
   \   0000008C   01F0               MOVW    R31:R30, R1:R0
   \   0000008E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000092   8122               LDD     R18, Z+2
   \   00000094   8133               LDD     R19, Z+3
   \   00000096   0FA2               ADD     R26, R18
   \   00000098   1FB3               ADC     R27, R19
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   931C               ST      X, R17
   \   0000009E   E11A               LDI     R17, 26
   \   000000A0   9F01               MUL     R16, R17
   \   000000A2   01F0               MOVW    R31:R30, R1:R0
   \   000000A4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000A6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000A8   8122               LDD     R18, Z+2
   \   000000AA   8133               LDD     R19, Z+3
   \   000000AC   5F2F               SUBI    R18, 255
   \   000000AE   4F3F               SBCI    R19, 255
   \   000000B0   8322               STD     Z+2, R18
   \   000000B2   8333               STD     Z+3, R19
    826          
    827          }
   \   000000B4   01DB               MOVW    R27:R26, R23:R22
   \   000000B6   9508               RET
    828          
    829          /*************************************************************************
    830          *
    831          * Build send request for raw data to AN-SGCNV
    832          *
    833          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    834          void Uart_BuildReqR16552(char ch) {
   \                     Uart_BuildReqR16552:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
    835          
    836              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_R_DATA;       /*command, send data */
   \   00000002   E01D               LDI     R17, 13
   \   00000004   E12A               LDI     R18, 26
   \   00000006   9F02               MUL     R16, R18
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   8120               LD      R18, Z
   \   00000010   8131               LDD     R19, Z+1
   \   00000012   E14A               LDI     R20, 26
   \   00000014   9F04               MUL     R16, R20
   \   00000016   01F0               MOVW    R31:R30, R1:R0
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   8142               LDD     R20, Z+2
   \   0000001E   8153               LDD     R21, Z+3
   \   00000020   01F9               MOVW    R31:R30, R19:R18
   \   00000022   0FE4               ADD     R30, R20
   \   00000024   1FF5               ADC     R31, R21
   \   00000026   8310               ST      Z, R17
   \   00000028   E11A               LDI     R17, 26
   \   0000002A   9F01               MUL     R16, R17
   \   0000002C   01F0               MOVW    R31:R30, R1:R0
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000032   8122               LDD     R18, Z+2
   \   00000034   8133               LDD     R19, Z+3
   \   00000036   5F2F               SUBI    R18, 255
   \   00000038   4F3F               SBCI    R19, 255
   \   0000003A   8322               STD     Z+2, R18
   \   0000003C   8333               STD     Z+3, R19
    837              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   0000003E   E011               LDI     R17, 1
   \   00000040   E12A               LDI     R18, 26
   \   00000042   9F02               MUL     R16, R18
   \   00000044   01F0               MOVW    R31:R30, R1:R0
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8120               LD      R18, Z
   \   0000004C   8131               LDD     R19, Z+1
   \   0000004E   E14A               LDI     R20, 26
   \   00000050   9F04               MUL     R16, R20
   \   00000052   01F0               MOVW    R31:R30, R1:R0
   \   00000054   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000056   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000058   8142               LDD     R20, Z+2
   \   0000005A   8153               LDD     R21, Z+3
   \   0000005C   01F9               MOVW    R31:R30, R19:R18
   \   0000005E   0FE4               ADD     R30, R20
   \   00000060   1FF5               ADC     R31, R21
   \   00000062   8310               ST      Z, R17
   \   00000064   E11A               LDI     R17, 26
   \   00000066   9F01               MUL     R16, R17
   \   00000068   01F0               MOVW    R31:R30, R1:R0
   \   0000006A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006E   8122               LDD     R18, Z+2
   \   00000070   8133               LDD     R19, Z+3
   \   00000072   5F2F               SUBI    R18, 255
   \   00000074   4F3F               SBCI    R19, 255
   \   00000076   8322               STD     Z+2, R18
   \   00000078   8333               STD     Z+3, R19
    838              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   0000007A   E11A               LDI     R17, 26
   \   0000007C   9F01               MUL     R16, R17
   \   0000007E   01F0               MOVW    R31:R30, R1:R0
   \   00000080   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000084   81A0               LD      R26, Z
   \   00000086   81B1               LDD     R27, Z+1
   \   00000088   E11A               LDI     R17, 26
   \   0000008A   9F01               MUL     R16, R17
   \   0000008C   01F0               MOVW    R31:R30, R1:R0
   \   0000008E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000092   8122               LDD     R18, Z+2
   \   00000094   8133               LDD     R19, Z+3
   \   00000096   0FA2               ADD     R26, R18
   \   00000098   1FB3               ADC     R27, R19
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   931C               ST      X, R17
   \   0000009E   E11A               LDI     R17, 26
   \   000000A0   9F01               MUL     R16, R17
   \   000000A2   01F0               MOVW    R31:R30, R1:R0
   \   000000A4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000A6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000A8   8122               LDD     R18, Z+2
   \   000000AA   8133               LDD     R19, Z+3
   \   000000AC   5F2F               SUBI    R18, 255
   \   000000AE   4F3F               SBCI    R19, 255
   \   000000B0   8322               STD     Z+2, R18
   \   000000B2   8333               STD     Z+3, R19
    839          
    840          }
   \   000000B4   01DB               MOVW    R27:R26, R23:R22
   \   000000B6   9508               RET
    841          
    842          /*************************************************************************
    843          *
    844          * Build send request for cal data to AN-SGCNV
    845          *
    846          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    847          void Uart_BuildReqC16552(char ch) {
   \                     Uart_BuildReqC16552:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
    848          
    849              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_C_DATA;       /*command, send data */
   \   00000002   E110               LDI     R17, 16
   \   00000004   E12A               LDI     R18, 26
   \   00000006   9F02               MUL     R16, R18
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   8120               LD      R18, Z
   \   00000010   8131               LDD     R19, Z+1
   \   00000012   E14A               LDI     R20, 26
   \   00000014   9F04               MUL     R16, R20
   \   00000016   01F0               MOVW    R31:R30, R1:R0
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   8142               LDD     R20, Z+2
   \   0000001E   8153               LDD     R21, Z+3
   \   00000020   01F9               MOVW    R31:R30, R19:R18
   \   00000022   0FE4               ADD     R30, R20
   \   00000024   1FF5               ADC     R31, R21
   \   00000026   8310               ST      Z, R17
   \   00000028   E11A               LDI     R17, 26
   \   0000002A   9F01               MUL     R16, R17
   \   0000002C   01F0               MOVW    R31:R30, R1:R0
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000032   8122               LDD     R18, Z+2
   \   00000034   8133               LDD     R19, Z+3
   \   00000036   5F2F               SUBI    R18, 255
   \   00000038   4F3F               SBCI    R19, 255
   \   0000003A   8322               STD     Z+2, R18
   \   0000003C   8333               STD     Z+3, R19
    850              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   0000003E   E011               LDI     R17, 1
   \   00000040   E12A               LDI     R18, 26
   \   00000042   9F02               MUL     R16, R18
   \   00000044   01F0               MOVW    R31:R30, R1:R0
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8120               LD      R18, Z
   \   0000004C   8131               LDD     R19, Z+1
   \   0000004E   E14A               LDI     R20, 26
   \   00000050   9F04               MUL     R16, R20
   \   00000052   01F0               MOVW    R31:R30, R1:R0
   \   00000054   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000056   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000058   8142               LDD     R20, Z+2
   \   0000005A   8153               LDD     R21, Z+3
   \   0000005C   01F9               MOVW    R31:R30, R19:R18
   \   0000005E   0FE4               ADD     R30, R20
   \   00000060   1FF5               ADC     R31, R21
   \   00000062   8310               ST      Z, R17
   \   00000064   E11A               LDI     R17, 26
   \   00000066   9F01               MUL     R16, R17
   \   00000068   01F0               MOVW    R31:R30, R1:R0
   \   0000006A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006E   8122               LDD     R18, Z+2
   \   00000070   8133               LDD     R19, Z+3
   \   00000072   5F2F               SUBI    R18, 255
   \   00000074   4F3F               SBCI    R19, 255
   \   00000076   8322               STD     Z+2, R18
   \   00000078   8333               STD     Z+3, R19
    851              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   0000007A   E11A               LDI     R17, 26
   \   0000007C   9F01               MUL     R16, R17
   \   0000007E   01F0               MOVW    R31:R30, R1:R0
   \   00000080   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000084   81A0               LD      R26, Z
   \   00000086   81B1               LDD     R27, Z+1
   \   00000088   E11A               LDI     R17, 26
   \   0000008A   9F01               MUL     R16, R17
   \   0000008C   01F0               MOVW    R31:R30, R1:R0
   \   0000008E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000092   8122               LDD     R18, Z+2
   \   00000094   8133               LDD     R19, Z+3
   \   00000096   0FA2               ADD     R26, R18
   \   00000098   1FB3               ADC     R27, R19
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   931C               ST      X, R17
   \   0000009E   E11A               LDI     R17, 26
   \   000000A0   9F01               MUL     R16, R17
   \   000000A2   01F0               MOVW    R31:R30, R1:R0
   \   000000A4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000A6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000A8   8122               LDD     R18, Z+2
   \   000000AA   8133               LDD     R19, Z+3
   \   000000AC   5F2F               SUBI    R18, 255
   \   000000AE   4F3F               SBCI    R19, 255
   \   000000B0   8322               STD     Z+2, R18
   \   000000B2   8333               STD     Z+3, R19
    852          
    853          }
   \   000000B4   01DB               MOVW    R27:R26, R23:R22
   \   000000B6   9508               RET
    854          
    855          /*************************************************************************
    856          *
    857          * Build send request for system status on AN_SGCNV
    858          *
    859          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    860          void Uart_BuildReqCardStatus(char ch) {
   \                     Uart_BuildReqCardStatus:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
    861          
    862              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CARD_STAT;       /*command, send data */
   \   00000002   E11B               LDI     R17, 27
   \   00000004   E12A               LDI     R18, 26
   \   00000006   9F02               MUL     R16, R18
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   8120               LD      R18, Z
   \   00000010   8131               LDD     R19, Z+1
   \   00000012   E14A               LDI     R20, 26
   \   00000014   9F04               MUL     R16, R20
   \   00000016   01F0               MOVW    R31:R30, R1:R0
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   8142               LDD     R20, Z+2
   \   0000001E   8153               LDD     R21, Z+3
   \   00000020   01F9               MOVW    R31:R30, R19:R18
   \   00000022   0FE4               ADD     R30, R20
   \   00000024   1FF5               ADC     R31, R21
   \   00000026   8310               ST      Z, R17
   \   00000028   E11A               LDI     R17, 26
   \   0000002A   9F01               MUL     R16, R17
   \   0000002C   01F0               MOVW    R31:R30, R1:R0
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000032   8122               LDD     R18, Z+2
   \   00000034   8133               LDD     R19, Z+3
   \   00000036   5F2F               SUBI    R18, 255
   \   00000038   4F3F               SBCI    R19, 255
   \   0000003A   8322               STD     Z+2, R18
   \   0000003C   8333               STD     Z+3, R19
    863              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   0000003E   E011               LDI     R17, 1
   \   00000040   E12A               LDI     R18, 26
   \   00000042   9F02               MUL     R16, R18
   \   00000044   01F0               MOVW    R31:R30, R1:R0
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8120               LD      R18, Z
   \   0000004C   8131               LDD     R19, Z+1
   \   0000004E   E14A               LDI     R20, 26
   \   00000050   9F04               MUL     R16, R20
   \   00000052   01F0               MOVW    R31:R30, R1:R0
   \   00000054   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000056   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000058   8142               LDD     R20, Z+2
   \   0000005A   8153               LDD     R21, Z+3
   \   0000005C   01F9               MOVW    R31:R30, R19:R18
   \   0000005E   0FE4               ADD     R30, R20
   \   00000060   1FF5               ADC     R31, R21
   \   00000062   8310               ST      Z, R17
   \   00000064   E11A               LDI     R17, 26
   \   00000066   9F01               MUL     R16, R17
   \   00000068   01F0               MOVW    R31:R30, R1:R0
   \   0000006A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006E   8122               LDD     R18, Z+2
   \   00000070   8133               LDD     R19, Z+3
   \   00000072   5F2F               SUBI    R18, 255
   \   00000074   4F3F               SBCI    R19, 255
   \   00000076   8322               STD     Z+2, R18
   \   00000078   8333               STD     Z+3, R19
    864              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   0000007A   E11A               LDI     R17, 26
   \   0000007C   9F01               MUL     R16, R17
   \   0000007E   01F0               MOVW    R31:R30, R1:R0
   \   00000080   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000084   81A0               LD      R26, Z
   \   00000086   81B1               LDD     R27, Z+1
   \   00000088   E11A               LDI     R17, 26
   \   0000008A   9F01               MUL     R16, R17
   \   0000008C   01F0               MOVW    R31:R30, R1:R0
   \   0000008E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000092   8122               LDD     R18, Z+2
   \   00000094   8133               LDD     R19, Z+3
   \   00000096   0FA2               ADD     R26, R18
   \   00000098   1FB3               ADC     R27, R19
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   931C               ST      X, R17
   \   0000009E   E11A               LDI     R17, 26
   \   000000A0   9F01               MUL     R16, R17
   \   000000A2   01F0               MOVW    R31:R30, R1:R0
   \   000000A4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000A6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000A8   8122               LDD     R18, Z+2
   \   000000AA   8133               LDD     R19, Z+3
   \   000000AC   5F2F               SUBI    R18, 255
   \   000000AE   4F3F               SBCI    R19, 255
   \   000000B0   8322               STD     Z+2, R18
   \   000000B2   8333               STD     Z+3, R19
    865          
    866          }
   \   000000B4   01DB               MOVW    R27:R26, R23:R22
   \   000000B6   9508               RET
    867          
    868          /*************************************************************************
    869          *
    870          * Build send request for card config on AN_SGCNV
    871          *
    872          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    873          void Uart_BuildReqConfig(char ch) {
   \                     Uart_BuildReqConfig:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
    874          
    875              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CONFIG;       /*command, send data */
   \   00000002   E111               LDI     R17, 17
   \   00000004   E12A               LDI     R18, 26
   \   00000006   9F02               MUL     R16, R18
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   8120               LD      R18, Z
   \   00000010   8131               LDD     R19, Z+1
   \   00000012   E14A               LDI     R20, 26
   \   00000014   9F04               MUL     R16, R20
   \   00000016   01F0               MOVW    R31:R30, R1:R0
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   8142               LDD     R20, Z+2
   \   0000001E   8153               LDD     R21, Z+3
   \   00000020   01F9               MOVW    R31:R30, R19:R18
   \   00000022   0FE4               ADD     R30, R20
   \   00000024   1FF5               ADC     R31, R21
   \   00000026   8310               ST      Z, R17
   \   00000028   E11A               LDI     R17, 26
   \   0000002A   9F01               MUL     R16, R17
   \   0000002C   01F0               MOVW    R31:R30, R1:R0
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000032   8122               LDD     R18, Z+2
   \   00000034   8133               LDD     R19, Z+3
   \   00000036   5F2F               SUBI    R18, 255
   \   00000038   4F3F               SBCI    R19, 255
   \   0000003A   8322               STD     Z+2, R18
   \   0000003C   8333               STD     Z+3, R19
    876              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
   \   0000003E   E11A               LDI     R17, 26
   \   00000040   9F01               MUL     R16, R17
   \   00000042   01F0               MOVW    R31:R30, R1:R0
   \   00000044   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000048   81A0               LD      R26, Z
   \   0000004A   81B1               LDD     R27, Z+1
   \   0000004C   E11A               LDI     R17, 26
   \   0000004E   9F01               MUL     R16, R17
   \   00000050   01F0               MOVW    R31:R30, R1:R0
   \   00000052   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000054   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000056   8122               LDD     R18, Z+2
   \   00000058   8133               LDD     R19, Z+3
   \   0000005A   0FA2               ADD     R26, R18
   \   0000005C   1FB3               ADC     R27, R19
   \   0000005E   E010               LDI     R17, 0
   \   00000060   931C               ST      X, R17
   \   00000062   E11A               LDI     R17, 26
   \   00000064   9F01               MUL     R16, R17
   \   00000066   01F0               MOVW    R31:R30, R1:R0
   \   00000068   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000006A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006C   8122               LDD     R18, Z+2
   \   0000006E   8133               LDD     R19, Z+3
   \   00000070   5F2F               SUBI    R18, 255
   \   00000072   4F3F               SBCI    R19, 255
   \   00000074   8322               STD     Z+2, R18
   \   00000076   8333               STD     Z+3, R19
    877          
    878          }
   \   00000078   01DB               MOVW    R27:R26, R23:R22
   \   0000007A   9508               RET
    879          
    880          /*************************************************************************
    881          *
    882          * Build send request for EEPROM data on AN_SGCNV
    883          *
    884          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    885          void Uart_BuildReqEEPROMData(char ch) {
   \                     Uart_BuildReqEEPROMData:
    886          
    887              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_EEP_DATA;       /*command, send data */
   \   00000000   E118               LDI     R17, 24
   \   00000002   E12A               LDI     R18, 26
   \   00000004   9F02               MUL     R16, R18
   \   00000006   01F0               MOVW    R31:R30, R1:R0
   \   00000008   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000C   8120               LD      R18, Z
   \   0000000E   8131               LDD     R19, Z+1
   \   00000010   E14A               LDI     R20, 26
   \   00000012   9F04               MUL     R16, R20
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001A   8142               LDD     R20, Z+2
   \   0000001C   8153               LDD     R21, Z+3
   \   0000001E   01F9               MOVW    R31:R30, R19:R18
   \   00000020   0FE4               ADD     R30, R20
   \   00000022   1FF5               ADC     R31, R21
   \   00000024   8310               ST      Z, R17
   \   00000026   E11A               LDI     R17, 26
   \   00000028   9F01               MUL     R16, R17
   \   0000002A   01F0               MOVW    R31:R30, R1:R0
   \   0000002C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000030   8122               LDD     R18, Z+2
   \   00000032   8133               LDD     R19, Z+3
   \   00000034   5F2F               SUBI    R18, 255
   \   00000036   4F3F               SBCI    R19, 255
   \   00000038   8322               STD     Z+2, R18
   \   0000003A   8333               STD     Z+3, R19
    888              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   0000003C   E011               LDI     R17, 1
   \   0000003E   E12A               LDI     R18, 26
   \   00000040   9F02               MUL     R16, R18
   \   00000042   01F0               MOVW    R31:R30, R1:R0
   \   00000044   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000048   8120               LD      R18, Z
   \   0000004A   8131               LDD     R19, Z+1
   \   0000004C   E14A               LDI     R20, 26
   \   0000004E   9F04               MUL     R16, R20
   \   00000050   01F0               MOVW    R31:R30, R1:R0
   \   00000052   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000054   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000056   8142               LDD     R20, Z+2
   \   00000058   8153               LDD     R21, Z+3
   \   0000005A   01F9               MOVW    R31:R30, R19:R18
   \   0000005C   0FE4               ADD     R30, R20
   \   0000005E   1FF5               ADC     R31, R21
   \   00000060   8310               ST      Z, R17
   \   00000062   E11A               LDI     R17, 26
   \   00000064   9F01               MUL     R16, R17
   \   00000066   01F0               MOVW    R31:R30, R1:R0
   \   00000068   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000006A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006C   8122               LDD     R18, Z+2
   \   0000006E   8133               LDD     R19, Z+3
   \   00000070   5F2F               SUBI    R18, 255
   \   00000072   4F3F               SBCI    R19, 255
   \   00000074   8322               STD     Z+2, R18
   \   00000076   8333               STD     Z+3, R19
    889              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.EEPROMADChannel[ch];       /*data */
   \   00000078   2FE0               MOV     R30, R16
   \   0000007A   E0F0               LDI     R31, 0
   \   0000007C   ....               SUBI    R30, LOW((-(TData + 1528) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, HIGH((-(TData + 1528) & 0xFFFF))
   \   00000080   8110               LD      R17, Z
   \   00000082   E12A               LDI     R18, 26
   \   00000084   9F02               MUL     R16, R18
   \   00000086   01F0               MOVW    R31:R30, R1:R0
   \   00000088   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000008A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000008C   8120               LD      R18, Z
   \   0000008E   8131               LDD     R19, Z+1
   \   00000090   E14A               LDI     R20, 26
   \   00000092   9F04               MUL     R16, R20
   \   00000094   01F0               MOVW    R31:R30, R1:R0
   \   00000096   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009A   8142               LDD     R20, Z+2
   \   0000009C   8153               LDD     R21, Z+3
   \   0000009E   01F9               MOVW    R31:R30, R19:R18
   \   000000A0   0FE4               ADD     R30, R20
   \   000000A2   1FF5               ADC     R31, R21
   \   000000A4   8310               ST      Z, R17
   \   000000A6   E11A               LDI     R17, 26
   \   000000A8   9F01               MUL     R16, R17
   \   000000AA   01F0               MOVW    R31:R30, R1:R0
   \   000000AC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000AE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000B0   8122               LDD     R18, Z+2
   \   000000B2   8133               LDD     R19, Z+3
   \   000000B4   5F2F               SUBI    R18, 255
   \   000000B6   4F3F               SBCI    R19, 255
   \   000000B8   8322               STD     Z+2, R18
   \   000000BA   8333               STD     Z+3, R19
    890          
    891          }
   \   000000BC   9508               RET
    892          /*************************************************************************
    893          *
    894          *  Receive data on USARTs
    895          *
    896          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    897          void ReceivePacketUart16552(char ch) {
   \                     ReceivePacketUart16552:
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    898          
    899              switch (UART16552[ch].RxState) {                  // check status
   \   00000004   E10A               LDI     R16, 26
   \   00000006   9F80               MUL     R24, R16
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   8902               LDD     R16, Z+18
   \   00000010   5000               SUBI    R16, 0
   \   00000012   F049               BREQ    ??ReceivePacketUart16552_0
   \   00000014   950A               DEC     R16
   \   00000016   F041               BREQ    ??ReceivePacketUart16552_1
   \   00000018   950A               DEC     R16
   \   0000001A   F409               BRNE    $+2+2
   \   0000001C   C068               RJMP    ??ReceivePacketUart16552_2
   \   0000001E   5008               SUBI    R16, 8
   \   00000020   F409               BRNE    $+2+2
   \   00000022   C0CC               RJMP    ??ReceivePacketUart16552_3
   \   00000024   C0C8               RJMP    ??ReceivePacketUart16552_4
    900              case SYNC :
    901                  // all functionallity in inerrupt routine
    902                  break;
   \                     ??ReceivePacketUart16552_0:
   \   00000026   C0CA               RJMP    ??ReceivePacketUart16552_3
    903              case HEADER :
    904                  if (UART16552[ch].RxLast >= 3) {             // receive header
   \                     ??ReceivePacketUart16552_1:
   \   00000028   E10A               LDI     R16, 26
   \   0000002A   9F80               MUL     R24, R16
   \   0000002C   01F0               MOVW    R31:R30, R1:R0
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000032   8506               LDD     R16, Z+14
   \   00000034   8517               LDD     R17, Z+15
   \   00000036   3003               CPI     R16, 3
   \   00000038   4010               SBCI    R17, 0
   \   0000003A   F408               BRCC    $+2+2
   \   0000003C   C0BF               RJMP    ??ReceivePacketUart16552_3
    905                      UART16552[ch].RxPacklen = ((UART16552[ch].pRxBuffer[2] * 256) +
    906                                                 UART16552[ch].pRxBuffer[3]);    // Find length of package
   \   0000003E   E10A               LDI     R16, 26
   \   00000040   9F80               MUL     R24, R16
   \   00000042   01F0               MOVW    R31:R30, R1:R0
   \   00000044   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000048   8502               LDD     R16, Z+10
   \   0000004A   8513               LDD     R17, Z+11
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   8132               LDD     R19, Z+2
   \   00000050   E020               LDI     R18, 0
   \   00000052   E10A               LDI     R16, 26
   \   00000054   9F80               MUL     R24, R16
   \   00000056   01F0               MOVW    R31:R30, R1:R0
   \   00000058   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000005C   8502               LDD     R16, Z+10
   \   0000005E   8513               LDD     R17, Z+11
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   8103               LDD     R16, Z+3
   \   00000064   E010               LDI     R17, 0
   \   00000066   0F20               ADD     R18, R16
   \   00000068   1F31               ADC     R19, R17
   \   0000006A   E10A               LDI     R16, 26
   \   0000006C   9F80               MUL     R24, R16
   \   0000006E   01F0               MOVW    R31:R30, R1:R0
   \   00000070   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000072   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000074   8B26               STD     Z+22, R18
   \   00000076   8B37               STD     Z+23, R19
    907                      if ((UART16552[ch].RxPacklen < ((short)RXSIZE_UART_16552 - UART16552[ch].RxLast)) &&    /* chk. header */
    908                          (UART16552[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   00000078   E10A               LDI     R16, 26
   \   0000007A   9F80               MUL     R24, R16
   \   0000007C   01F0               MOVW    R31:R30, R1:R0
   \   0000007E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000082   8926               LDD     R18, Z+22
   \   00000084   8937               LDD     R19, Z+23
   \   00000086   E708               LDI     R16, 120
   \   00000088   E010               LDI     R17, 0
   \   0000008A   E14A               LDI     R20, 26
   \   0000008C   9F84               MUL     R24, R20
   \   0000008E   01F0               MOVW    R31:R30, R1:R0
   \   00000090   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000092   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000094   8546               LDD     R20, Z+14
   \   00000096   8557               LDD     R21, Z+15
   \   00000098   1B04               SUB     R16, R20
   \   0000009A   0B15               SBC     R17, R21
   \   0000009C   1720               CP      R18, R16
   \   0000009E   0731               CPC     R19, R17
   \   000000A0   F510               BRCC    ??ReceivePacketUart16552_5
   \   000000A2   E10A               LDI     R16, 26
   \   000000A4   9F80               MUL     R24, R16
   \   000000A6   01F0               MOVW    R31:R30, R1:R0
   \   000000A8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000AA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000AC   8906               LDD     R16, Z+22
   \   000000AE   8917               LDD     R17, Z+23
   \   000000B0   3007               CPI     R16, 7
   \   000000B2   4010               SBCI    R17, 0
   \   000000B4   F0C0               BRCS    ??ReceivePacketUart16552_5
    909                          UART16552[ch].RxState = RECEIVE;       // Header ok og to data receive state
   \   000000B6   E002               LDI     R16, 2
   \   000000B8   E11A               LDI     R17, 26
   \   000000BA   9F81               MUL     R24, R17
   \   000000BC   01F0               MOVW    R31:R30, R1:R0
   \   000000BE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000C0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000C2   8B02               STD     Z+18, R16
    910                          UART16552[ch].RxCount = UART16552[ch].RxLast + 1;    // Set receivcounter
   \   000000C4   E10A               LDI     R16, 26
   \   000000C6   9F80               MUL     R24, R16
   \   000000C8   01F0               MOVW    R31:R30, R1:R0
   \   000000CA   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000CC   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000CE   8506               LDD     R16, Z+14
   \   000000D0   8517               LDD     R17, Z+15
   \   000000D2   5F0F               SUBI    R16, 255
   \   000000D4   4F1F               SBCI    R17, 255
   \   000000D6   E12A               LDI     R18, 26
   \   000000D8   9F82               MUL     R24, R18
   \   000000DA   01F0               MOVW    R31:R30, R1:R0
   \   000000DC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000DE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000E0   8B00               STD     Z+16, R16
   \   000000E2   8B11               STD     Z+17, R17
   \   000000E4   C06B               RJMP    ??ReceivePacketUart16552_3
    911                      } else {
    912                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
   \                     ??ReceivePacketUart16552_5:
   \   000000E6   2F08               MOV     R16, R24
   \   000000E8   ........           CALL    GoToSyncUART16552
    913                      }
    914                  }
    915                  break;
   \   000000EC   C067               RJMP    ??ReceivePacketUart16552_3
    916              case RECEIVE :
    917                  if (++UART16552[ch].RxCount >= UART16552[ch].RxPacklen) {
   \                     ??ReceivePacketUart16552_2:
   \   000000EE   E10A               LDI     R16, 26
   \   000000F0   9F80               MUL     R24, R16
   \   000000F2   01F0               MOVW    R31:R30, R1:R0
   \   000000F4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F8   8900               LDD     R16, Z+16
   \   000000FA   8911               LDD     R17, Z+17
   \   000000FC   5F0F               SUBI    R16, 255
   \   000000FE   4F1F               SBCI    R17, 255
   \   00000100   8B00               STD     Z+16, R16
   \   00000102   8B11               STD     Z+17, R17
   \   00000104   E10A               LDI     R16, 26
   \   00000106   9F80               MUL     R24, R16
   \   00000108   01F0               MOVW    R31:R30, R1:R0
   \   0000010A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000010C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000010E   8900               LDD     R16, Z+16
   \   00000110   8911               LDD     R17, Z+17
   \   00000112   E12A               LDI     R18, 26
   \   00000114   9F82               MUL     R24, R18
   \   00000116   01F0               MOVW    R31:R30, R1:R0
   \   00000118   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000011A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000011C   8926               LDD     R18, Z+22
   \   0000011E   8937               LDD     R19, Z+23
   \   00000120   1702               CP      R16, R18
   \   00000122   0713               CPC     R17, R19
   \   00000124   F408               BRCC    $+2+2
   \   00000126   C04A               RJMP    ??ReceivePacketUart16552_3
    918                      if ((UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 1]) == ANPRO1_EOT) {
   \   00000128   E10A               LDI     R16, 26
   \   0000012A   9F80               MUL     R24, R16
   \   0000012C   01F0               MOVW    R31:R30, R1:R0
   \   0000012E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000130   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000132   8502               LDD     R16, Z+10
   \   00000134   8513               LDD     R17, Z+11
   \   00000136   E12A               LDI     R18, 26
   \   00000138   9F82               MUL     R24, R18
   \   0000013A   01F0               MOVW    R31:R30, R1:R0
   \   0000013C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000013E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000140   8926               LDD     R18, Z+22
   \   00000142   8937               LDD     R19, Z+23
   \   00000144   0F02               ADD     R16, R18
   \   00000146   1F13               ADC     R17, R19
   \   00000148   01F8               MOVW    R31:R30, R17:R16
   \   0000014A   9731               SBIW    R31:R30, 1
   \   0000014C   8100               LD      R16, Z
   \   0000014E   3003               CPI     R16, 3
   \   00000150   F571               BRNE    ??ReceivePacketUart16552_6
    919                          if (CalcDSRxChecksum16552(ch)) {
   \   00000152   2F08               MOV     R16, R24
   \   00000154   ....               RCALL   CalcDSRxChecksum16552
   \   00000156   2B01               OR      R16, R17
   \   00000158   F131               BREQ    ??ReceivePacketUart16552_7
    920                              if (UART16552[ch].pRxBuffer[0] == MY_SGCNV_ADDR) {     // reply from AN_SGCNV
   \   0000015A   E10A               LDI     R16, 26
   \   0000015C   9F80               MUL     R24, R16
   \   0000015E   01F0               MOVW    R31:R30, R1:R0
   \   00000160   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000162   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000164   8502               LDD     R16, Z+10
   \   00000166   8513               LDD     R17, Z+11
   \   00000168   01F8               MOVW    R31:R30, R17:R16
   \   0000016A   8100               LD      R16, Z
   \   0000016C   3F0D               CPI     R16, 253
   \   0000016E   F4B9               BRNE    ??ReceivePacketUart16552_8
    921                                  UART16552[ch].RxState = HANDLE;                   // Package OK
   \   00000170   E00A               LDI     R16, 10
   \   00000172   E11A               LDI     R17, 26
   \   00000174   9F81               MUL     R24, R17
   \   00000176   01F0               MOVW    R31:R30, R1:R0
   \   00000178   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000017A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000017C   8B02               STD     Z+18, R16
    922                                  if (ch == 0) {
   \   0000017E   2388               TST     R24
   \   00000180   F431               BRNE    ??ReceivePacketUart16552_9
    923                                      OS_SignalEvent(1, &TCB_RS485Rec);
   \   00000182   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   00000184   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   00000186   E001               LDI     R16, 1
   \   00000188   ........           CALL    OS_SignalEvent
   \   0000018C   C017               RJMP    ??ReceivePacketUart16552_3
    924                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart16552_9:
   \   0000018E   3081               CPI     R24, 1
   \   00000190   F4A9               BRNE    ??ReceivePacketUart16552_3
    925                                      OS_SignalEvent(2, &TCB_RS485Rec);
   \   00000192   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   00000194   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   00000196   E002               LDI     R16, 2
   \   00000198   ........           CALL    OS_SignalEvent
   \   0000019C   C00F               RJMP    ??ReceivePacketUart16552_3
    926                                  }
    927                              } else {
    928                                  GoToSyncUART16552(ch);                             // go to sync modus for recive
   \                     ??ReceivePacketUart16552_8:
   \   0000019E   2F08               MOV     R16, R24
   \   000001A0   ........           CALL    GoToSyncUART16552
   \   000001A4   C00B               RJMP    ??ReceivePacketUart16552_3
    929                              }
    930                          } else {
    931                              GoToSyncUART16552(ch);                                // go to sync modus for recive
   \                     ??ReceivePacketUart16552_7:
   \   000001A6   2F08               MOV     R16, R24
   \   000001A8   ........           CALL    GoToSyncUART16552
   \   000001AC   C007               RJMP    ??ReceivePacketUart16552_3
    932                          }
    933                      } else {
    934                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
   \                     ??ReceivePacketUart16552_6:
   \   000001AE   2F08               MOV     R16, R24
   \   000001B0   ........           CALL    GoToSyncUART16552
    935                      }
    936                  }
    937                  break;
   \   000001B4   C003               RJMP    ??ReceivePacketUart16552_3
    938              case HANDLE :
    939                  break;
    940              default :
    941                  GoToSyncUART16552(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart16552_4:
   \   000001B6   2F08               MOV     R16, R24
   \   000001B8   ........           CALL    GoToSyncUART16552
    942                  break;
    943              }                                                           // end switch
    944              if (++UART16552[ch].RxLast >= RXSIZE_UART_16552) {                     // check pointer
   \                     ??ReceivePacketUart16552_3:
   \   000001BC   E10A               LDI     R16, 26
   \   000001BE   9F80               MUL     R24, R16
   \   000001C0   01F0               MOVW    R31:R30, R1:R0
   \   000001C2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001C4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001C6   8506               LDD     R16, Z+14
   \   000001C8   8517               LDD     R17, Z+15
   \   000001CA   5F0F               SUBI    R16, 255
   \   000001CC   4F1F               SBCI    R17, 255
   \   000001CE   8706               STD     Z+14, R16
   \   000001D0   8717               STD     Z+15, R17
   \   000001D2   E10A               LDI     R16, 26
   \   000001D4   9F80               MUL     R24, R16
   \   000001D6   01F0               MOVW    R31:R30, R1:R0
   \   000001D8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001DA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001DC   8506               LDD     R16, Z+14
   \   000001DE   8517               LDD     R17, Z+15
   \   000001E0   3708               CPI     R16, 120
   \   000001E2   E020               LDI     R18, 0
   \   000001E4   0712               CPC     R17, R18
   \   000001E6   F048               BRCS    ??ReceivePacketUart16552_10
    945                  UART16552[ch].RxLast = 0;                                     // reset pointer
   \   000001E8   E000               LDI     R16, 0
   \   000001EA   E010               LDI     R17, 0
   \   000001EC   E12A               LDI     R18, 26
   \   000001EE   9F82               MUL     R24, R18
   \   000001F0   01F0               MOVW    R31:R30, R1:R0
   \   000001F2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001F4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001F6   8706               STD     Z+14, R16
   \   000001F8   8717               STD     Z+15, R17
    946              }
    947          }
   \                     ??ReceivePacketUart16552_10:
   \   000001FA   9189               LD      R24, Y+
   \   000001FC   9508               RET
    948          
    949          
    950          /*************************************************************************
    951          *
    952          * Calculate tx checksum for Dallas Semiconductor one-wire CRC
    953          *
    954          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    955          char CalcDSTxChecksumUART16552(char ch, unsigned short len) {
   \                     CalcDSTxChecksumUART16552:
   \   00000000   2E20               MOV     R2, R16
   \   00000002   01A9               MOVW    R21:R20, R19:R18
    956          
    957              unsigned short cnt;
    958              unsigned char csum;
    959          
    960              csum = 0;
   \   00000004   E000               LDI     R16, 0
    961              for (cnt = 2; cnt < len; cnt++) {
   \   00000006   E062               LDI     R22, 2
   \   00000008   E070               LDI     R23, 0
   \                     ??CalcDSTxChecksumUART16552_0:
   \   0000000A   1764               CP      R22, R20
   \   0000000C   0775               CPC     R23, R21
   \   0000000E   F4C8               BRCC    ??CalcDSTxChecksumUART16552_1
    962                  csum = crc[csum ^ UART16552[ch].pTxBuffer[cnt]];
   \   00000010   2F20               MOV     R18, R16
   \   00000012   E030               LDI     R19, 0
   \   00000014   E10A               LDI     R16, 26
   \   00000016   9E20               MUL     R2, R16
   \   00000018   01F0               MOVW    R31:R30, R1:R0
   \   0000001A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001E   8100               LD      R16, Z
   \   00000020   8111               LDD     R17, Z+1
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   0FE6               ADD     R30, R22
   \   00000026   1FF7               ADC     R31, R23
   \   00000028   8100               LD      R16, Z
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   2720               EOR     R18, R16
   \   0000002E   2731               EOR     R19, R17
   \   00000030   01F9               MOVW    R31:R30, R19:R18
   \   00000032   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000034   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000036   ....               LDI     R19, (crc) >> 16
   \   00000038   BF3B               OUT     0x3B, R19
   \   0000003A   9106               ELPM    R16, Z
    963              }
   \   0000003C   5F6F               SUBI    R22, 255
   \   0000003E   4F7F               SBCI    R23, 255
   \   00000040   CFE4               RJMP    ??CalcDSTxChecksumUART16552_0
    964              return csum;
   \                     ??CalcDSTxChecksumUART16552_1:
   \   00000042   9508               RET
    965          }
    966          
    967          /*************************************************************************
    968          *
    969          * Calculate rx checksum for Dallas Semiconductor one-wire CRC
    970          *
    971          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    972          short CalcDSRxChecksum16552(char ch) {
   \                     CalcDSRxChecksum16552:
   \   00000000   2F20               MOV     R18, R16
    973          
    974              short cnt;
    975              unsigned char csum;
    976          
    977              csum = 0;
   \   00000002   E060               LDI     R22, 0
    978              for (cnt = 0; cnt < (UART16552[ch].RxPacklen - 2); cnt++) {
   \   00000004   E040               LDI     R20, 0
   \   00000006   E050               LDI     R21, 0
   \                     ??CalcDSRxChecksum16552_0:
   \   00000008   E10A               LDI     R16, 26
   \   0000000A   9F20               MUL     R18, R16
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000012   8906               LDD     R16, Z+22
   \   00000014   8917               LDD     R17, Z+23
   \   00000016   5002               SUBI    R16, 2
   \   00000018   4010               SBCI    R17, 0
   \   0000001A   1740               CP      R20, R16
   \   0000001C   0751               CPC     R21, R17
   \   0000001E   F4C0               BRCC    ??CalcDSRxChecksum16552_1
    979                  csum = crc[csum ^ UART16552[ch].pRxBuffer[cnt]];
   \   00000020   E070               LDI     R23, 0
   \   00000022   E10A               LDI     R16, 26
   \   00000024   9F20               MUL     R18, R16
   \   00000026   01F0               MOVW    R31:R30, R1:R0
   \   00000028   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002C   8502               LDD     R16, Z+10
   \   0000002E   8513               LDD     R17, Z+11
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   0FE4               ADD     R30, R20
   \   00000034   1FF5               ADC     R31, R21
   \   00000036   8100               LD      R16, Z
   \   00000038   E010               LDI     R17, 0
   \   0000003A   2760               EOR     R22, R16
   \   0000003C   2771               EOR     R23, R17
   \   0000003E   01FB               MOVW    R31:R30, R23:R22
   \   00000040   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000042   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000044   ....               LDI     R19, (crc) >> 16
   \   00000046   BF3B               OUT     0x3B, R19
   \   00000048   9166               ELPM    R22, Z
    980              }
   \   0000004A   5F4F               SUBI    R20, 255
   \   0000004C   4F5F               SBCI    R21, 255
   \   0000004E   CFDC               RJMP    ??CalcDSRxChecksum16552_0
    981              if (csum == UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 2]) {
   \                     ??CalcDSRxChecksum16552_1:
   \   00000050   E10A               LDI     R16, 26
   \   00000052   9F20               MUL     R18, R16
   \   00000054   01F0               MOVW    R31:R30, R1:R0
   \   00000056   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000058   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000005A   8502               LDD     R16, Z+10
   \   0000005C   8513               LDD     R17, Z+11
   \   0000005E   E13A               LDI     R19, 26
   \   00000060   9F23               MUL     R18, R19
   \   00000062   01F0               MOVW    R31:R30, R1:R0
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8806               LDD     R0, Z+22
   \   0000006A   8817               LDD     R1, Z+23
   \   0000006C   0D00               ADD     R16, R0
   \   0000006E   1D11               ADC     R17, R1
   \   00000070   01F8               MOVW    R31:R30, R17:R16
   \   00000072   9732               SBIW    R31:R30, 2
   \   00000074   8100               LD      R16, Z
   \   00000076   1760               CP      R22, R16
   \   00000078   F419               BRNE    ??CalcDSRxChecksum16552_2
    982                  return true;
   \   0000007A   E001               LDI     R16, 1
   \   0000007C   E010               LDI     R17, 0
   \   0000007E   9508               RET
    983              } else {
    984                  return false;
   \                     ??CalcDSRxChecksum16552_2:
   \   00000080   E000               LDI     R16, 0
   \   00000082   E010               LDI     R17, 0
   \   00000084   9508               RET
    985              }
    986          }
    987          
    988          /*************************************************************************
    989          *
    990          * Goes to sync mode
    991          *
    992          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    993          void GoToSyncUART16552(char ch) {
   \                     GoToSyncUART16552:
    994          
    995              if (ch < 2) {
   \   00000000   3002               CPI     R16, 2
   \   00000002   F500               BRCC    ??GoToSyncUART16552_0
    996                  UART16552[ch].SyncCnt = 0;                        // ready for sync
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   E010               LDI     R17, 0
   \   00000010   8B13               STD     Z+19, R17
    997                  UART16552[ch].RxState = SYNC;
   \   00000012   E11A               LDI     R17, 26
   \   00000014   9F01               MUL     R16, R17
   \   00000016   01F0               MOVW    R31:R30, R1:R0
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   8B12               STD     Z+18, R17
    998                  UART16552[ch].RxFirst = 0;
   \   00000020   E020               LDI     R18, 0
   \   00000022   E030               LDI     R19, 0
   \   00000024   E11A               LDI     R17, 26
   \   00000026   9F01               MUL     R16, R17
   \   00000028   01F0               MOVW    R31:R30, R1:R0
   \   0000002A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002E   8724               STD     Z+12, R18
   \   00000030   8735               STD     Z+13, R19
    999                  UART16552[ch].RxPacklen = 0;
   \   00000032   E020               LDI     R18, 0
   \   00000034   E030               LDI     R19, 0
   \   00000036   E11A               LDI     R17, 26
   \   00000038   9F01               MUL     R16, R17
   \   0000003A   01F0               MOVW    R31:R30, R1:R0
   \   0000003C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000003E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000040   8B26               STD     Z+22, R18
   \   00000042   8B37               STD     Z+23, R19
   1000              }
   1001          }
   \                     ??GoToSyncUART16552_0:
   \   00000044   9508               RET
   1002          
   1003          /*************************************************************************
   1004          *
   1005          *  Empty rx buffer on PC16552 UART
   1006          *
   1007          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1008          void EmptyRxBuf16552(char uartno) {
   \                     EmptyRxBuf16552:
   1009          
   1010              switch (uartno) {
   \   00000000   2F10               MOV     R17, R16
   \   00000002   5010               SUBI    R17, 0
   \   00000004   F019               BREQ    ??EmptyRxBuf16552_0
   \   00000006   951A               DEC     R17
   \   00000008   F049               BREQ    ??EmptyRxBuf16552_1
   \   0000000A   9508               RET
   1011              case 0:
   1012                  do {
   1013                      U0_RBR;
   \                     ??EmptyRxBuf16552_0:
   \   0000000C   91102208           LDS     R17, 8712
   1014                  } while (U0_LSR & DATA_READY);
   \   00000010   E0ED               LDI     R30, LOW(8717)
   \   00000012   E2F2               LDI     R31, (8717) >> 8
   \   00000014   8110               LD      R17, Z
   \   00000016   FD10               SBRC    R17, 0
   \   00000018   CFF9               RJMP    ??EmptyRxBuf16552_0
   1015                  break;
   \   0000001A   9508               RET
   1016              case 1:
   1017                  do {
   1018                      U1_RBR;
   \                     ??EmptyRxBuf16552_1:
   \   0000001C   91102200           LDS     R17, 8704
   1019                  } while (U1_LSR & DATA_READY);
   \   00000020   E0E5               LDI     R30, LOW(8709)
   \   00000022   E2F2               LDI     R31, (8709) >> 8
   \   00000024   8110               LD      R17, Z
   \   00000026   FD10               SBRC    R17, 0
   \   00000028   CFF9               RJMP    ??EmptyRxBuf16552_1
   1020                  break;
   1021              }
   1022          }
   \   0000002A   9508               RET
   1023          
   1024          /*************************************************************************
   1025          *
   1026          *  Init the PC16552 UART
   1027          *
   1028          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1029          void Init16552(char channel, unsigned long baud) {
   \                     Init16552:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01CA               MOVW    R25:R24, R21:R20
   \   00000008   01DB               MOVW    R27:R26, R23:R22
   1030          
   1031              /*--- Configure UART data block ---*/
   1032              UART16552[channel].TxFirst = 0x00;
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E12A               LDI     R18, 26
   \   00000010   9E42               MUL     R4, R18
   \   00000012   01F0               MOVW    R31:R30, R1:R0
   \   00000014   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000018   8302               STD     Z+2, R16
   \   0000001A   8313               STD     Z+3, R17
   1033              UART16552[channel].TxLast = 0x00;
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E12A               LDI     R18, 26
   \   00000022   9E42               MUL     R4, R18
   \   00000024   01F0               MOVW    R31:R30, R1:R0
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8304               STD     Z+4, R16
   \   0000002C   8315               STD     Z+5, R17
   1034              UART16552[channel].TxCount = 0x00;
   \   0000002E   E000               LDI     R16, 0
   \   00000030   E010               LDI     R17, 0
   \   00000032   E12A               LDI     R18, 26
   \   00000034   9E42               MUL     R4, R18
   \   00000036   01F0               MOVW    R31:R30, R1:R0
   \   00000038   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000003C   8306               STD     Z+6, R16
   \   0000003E   8317               STD     Z+7, R17
   1035              UART16552[channel].RxFirst = 0x00;
   \   00000040   E000               LDI     R16, 0
   \   00000042   E010               LDI     R17, 0
   \   00000044   E12A               LDI     R18, 26
   \   00000046   9E42               MUL     R4, R18
   \   00000048   01F0               MOVW    R31:R30, R1:R0
   \   0000004A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000004C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004E   8704               STD     Z+12, R16
   \   00000050   8715               STD     Z+13, R17
   1036              UART16552[channel].RxLast = 0x00;
   \   00000052   E000               LDI     R16, 0
   \   00000054   E010               LDI     R17, 0
   \   00000056   E12A               LDI     R18, 26
   \   00000058   9E42               MUL     R4, R18
   \   0000005A   01F0               MOVW    R31:R30, R1:R0
   \   0000005C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000060   8706               STD     Z+14, R16
   \   00000062   8717               STD     Z+15, R17
   1037              UART16552[channel].RxCount = 0x00;
   \   00000064   E000               LDI     R16, 0
   \   00000066   E010               LDI     R17, 0
   \   00000068   E12A               LDI     R18, 26
   \   0000006A   9E42               MUL     R4, R18
   \   0000006C   01F0               MOVW    R31:R30, R1:R0
   \   0000006E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000070   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000072   8B00               STD     Z+16, R16
   \   00000074   8B11               STD     Z+17, R17
   1038              UART16552[channel].RxState = SYNC;
   \   00000076   E10A               LDI     R16, 26
   \   00000078   9E40               MUL     R4, R16
   \   0000007A   01F0               MOVW    R31:R30, R1:R0
   \   0000007C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000080   E000               LDI     R16, 0
   \   00000082   8B02               STD     Z+18, R16
   1039              UART16552[channel].SyncCnt = 0;
   \   00000084   E10A               LDI     R16, 26
   \   00000086   9E40               MUL     R4, R16
   \   00000088   01F0               MOVW    R31:R30, R1:R0
   \   0000008A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000008C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000008E   E000               LDI     R16, 0
   \   00000090   8B03               STD     Z+19, R16
   1040              UART16552[channel].TxStatus = 0x00;
   \   00000092   E10A               LDI     R16, 26
   \   00000094   9E40               MUL     R4, R16
   \   00000096   01F0               MOVW    R31:R30, R1:R0
   \   00000098   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009C   E000               LDI     R16, 0
   \   0000009E   8700               STD     Z+8, R16
   1041          
   1042              switch (channel) {
   \   000000A0   2D04               MOV     R16, R4
   \   000000A2   5000               SUBI    R16, 0
   \   000000A4   F021               BREQ    ??Init16552_0
   \   000000A6   950A               DEC     R16
   \   000000A8   F409               BRNE    $+2+2
   \   000000AA   C045               RJMP    ??Init16552_1
   \   000000AC   C087               RJMP    ??Init16552_2
   1043              case 0x00 :
   1044                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_0:
   \   000000AE   EF0A               LDI     R16, 250
   \   000000B0   E010               LDI     R17, 0
   \   000000B2   E12A               LDI     R18, 26
   \   000000B4   9E42               MUL     R4, R18
   \   000000B6   01F0               MOVW    R31:R30, R1:R0
   \   000000B8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BC   8B04               STD     Z+20, R16
   \   000000BE   8B15               STD     Z+21, R17
   1045                  UART16552[channel].pTxBuffer = TxBuf16552Ch0;
   \   000000C0   ....               LDI     R16, LOW(TxBuf16552Ch0)
   \   000000C2   ....               LDI     R17, (TxBuf16552Ch0) >> 8
   \   000000C4   E12A               LDI     R18, 26
   \   000000C6   9E42               MUL     R4, R18
   \   000000C8   01F0               MOVW    R31:R30, R1:R0
   \   000000CA   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000CC   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000CE   8300               ST      Z, R16
   \   000000D0   8311               STD     Z+1, R17
   1046                  UART16552[channel].pRxBuffer = RxBuf16552Ch0;
   \   000000D2   ....               LDI     R16, LOW(RxBuf16552Ch0)
   \   000000D4   ....               LDI     R17, (RxBuf16552Ch0) >> 8
   \   000000D6   E12A               LDI     R18, 26
   \   000000D8   9E42               MUL     R4, R18
   \   000000DA   01F0               MOVW    R31:R30, R1:R0
   \   000000DC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000DE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000E0   8702               STD     Z+10, R16
   \   000000E2   8713               STD     Z+11, R17
   1047                  U0_LCR = 0x80;          // set DLAB
   \   000000E4   E800               LDI     R16, 128
   \   000000E6   9300220B           STS     8715, R16
   1048                  U0_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   000000EA   01AC               MOVW    R21:R20, R25:R24
   \   000000EC   01BD               MOVW    R23:R22, R27:R26
   \   000000EE   E408               LDI     R16, 72
   \   000000F0   EE18               LDI     R17, 232
   \   000000F2   E021               LDI     R18, 1
   \   000000F4   E030               LDI     R19, 0
   \   000000F6   ........           CALL    ?UL_DIVMOD_L03
   \   000000FA   93002208           STS     8712, R16
   1049                  U0_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   000000FE   01AC               MOVW    R21:R20, R25:R24
   \   00000100   01BD               MOVW    R23:R22, R27:R26
   \   00000102   E408               LDI     R16, 72
   \   00000104   EE18               LDI     R17, 232
   \   00000106   E021               LDI     R18, 1
   \   00000108   E030               LDI     R19, 0
   \   0000010A   ........           CALL    ?UL_DIVMOD_L03
   \   0000010E   2F01               MOV     R16, R17
   \   00000110   E010               LDI     R17, 0
   \   00000112   93002209           STS     8713, R16
   1050                  U0_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   00000116   E003               LDI     R16, 3
   \   00000118   9300220B           STS     8715, R16
   1051                  U0_FCR = 0x01;          // enable FIFO ..
   \   0000011C   E001               LDI     R16, 1
   \   0000011E   9300220A           STS     8714, R16
   1052                  U0_FCR = 0xC1;          // and set RXLevel to 14
   \   00000122   EC01               LDI     R16, 193
   \   00000124   9300220A           STS     8714, R16
   1053                  U0_IER = 0x03;          // enable TX and RX int.
   \   00000128   E003               LDI     R16, 3
   \   0000012A   93002209           STS     8713, R16
   1054                  U0_MCR = 0x00;          // RTS off
   \   0000012E   E000               LDI     R16, 0
   \   00000130   9300220C           STS     8716, R16
   1055                  break;
   \   00000134   C043               RJMP    ??Init16552_2
   1056              case 0x01 :
   1057                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_1:
   \   00000136   EF0A               LDI     R16, 250
   \   00000138   E010               LDI     R17, 0
   \   0000013A   E12A               LDI     R18, 26
   \   0000013C   9E42               MUL     R4, R18
   \   0000013E   01F0               MOVW    R31:R30, R1:R0
   \   00000140   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000142   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000144   8B04               STD     Z+20, R16
   \   00000146   8B15               STD     Z+21, R17
   1058                  UART16552[channel].pTxBuffer = TxBuf16552Ch1;
   \   00000148   ....               LDI     R16, LOW(TxBuf16552Ch1)
   \   0000014A   ....               LDI     R17, (TxBuf16552Ch1) >> 8
   \   0000014C   E12A               LDI     R18, 26
   \   0000014E   9E42               MUL     R4, R18
   \   00000150   01F0               MOVW    R31:R30, R1:R0
   \   00000152   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000154   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000156   8300               ST      Z, R16
   \   00000158   8311               STD     Z+1, R17
   1059                  UART16552[channel].pRxBuffer = RxBuf16552Ch1;
   \   0000015A   ....               LDI     R16, LOW(RxBuf16552Ch1)
   \   0000015C   ....               LDI     R17, (RxBuf16552Ch1) >> 8
   \   0000015E   E12A               LDI     R18, 26
   \   00000160   9E42               MUL     R4, R18
   \   00000162   01F0               MOVW    R31:R30, R1:R0
   \   00000164   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000166   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000168   8702               STD     Z+10, R16
   \   0000016A   8713               STD     Z+11, R17
   1060                  U1_LCR = 0x80;          // set DLAB
   \   0000016C   E800               LDI     R16, 128
   \   0000016E   93002203           STS     8707, R16
   1061                  U1_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   00000172   01AC               MOVW    R21:R20, R25:R24
   \   00000174   01BD               MOVW    R23:R22, R27:R26
   \   00000176   E408               LDI     R16, 72
   \   00000178   EE18               LDI     R17, 232
   \   0000017A   E021               LDI     R18, 1
   \   0000017C   E030               LDI     R19, 0
   \   0000017E   ........           CALL    ?UL_DIVMOD_L03
   \   00000182   93002200           STS     8704, R16
   1062                  U1_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   00000186   01AC               MOVW    R21:R20, R25:R24
   \   00000188   01BD               MOVW    R23:R22, R27:R26
   \   0000018A   E408               LDI     R16, 72
   \   0000018C   EE18               LDI     R17, 232
   \   0000018E   E021               LDI     R18, 1
   \   00000190   E030               LDI     R19, 0
   \   00000192   ........           CALL    ?UL_DIVMOD_L03
   \   00000196   2F01               MOV     R16, R17
   \   00000198   E010               LDI     R17, 0
   \   0000019A   93002201           STS     8705, R16
   1063                  U1_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   0000019E   E003               LDI     R16, 3
   \   000001A0   93002203           STS     8707, R16
   1064                  U1_FCR = 0x01;          // enable FIFO ..
   \   000001A4   E001               LDI     R16, 1
   \   000001A6   93002202           STS     8706, R16
   1065                  U1_FCR = 0xC1;          // and set RXLevel to 14
   \   000001AA   EC01               LDI     R16, 193
   \   000001AC   93002202           STS     8706, R16
   1066                  U1_IER = 0x03;          // enable TX and RX int.
   \   000001B0   E003               LDI     R16, 3
   \   000001B2   93002201           STS     8705, R16
   1067                  U1_MCR = 0x00;          // RTS off
   \   000001B6   E000               LDI     R16, 0
   \   000001B8   93002204           STS     8708, R16
   1068                  break;
   1069              default:
   1070                  break;
   1071              }
   1072          }
   \                     ??Init16552_2:
   \   000001BC   E0E5               LDI     R30, 5
   \   000001BE   ........           JMP     ?EPILOGUE_B5_L09

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart16552>_0`:
   \   00000000   00                 DB      0
   \   00000001   01                 DB      1
   \   00000002   ....               DW      (??CheckActionUart16552_1) /2
   \   00000004   ....               DW      (??CheckActionUart16552_13) /2
   \   00000006   01                 DB      0x1
   \   00000007   ....               DW      (??CheckActionUart16552_13) /2
   \   00000009   1D                 DB      0x1d
   \   0000000A   ....               DW      (??CheckActionUart16552_0) /2
   \   0000000C   01                 DB      0x1
   \   0000000D   ....               DW      (??CheckActionUart16552_0) /2
   \   0000000F   01                 DB      0x1
   \   00000010   ....               DW      (??CheckActionUart16552_0) /2
   \   00000012   01                 DB      0x1
   \   00000013   ....               DW      (??CheckActionUart16552_3) /2
   \   00000015   01                 DB      0x1
   \   00000016   ....               DW      (??CheckActionUart16552_3) /2
   \   00000018   01                 DB      0x1
   \   00000019   ....               DW      (??CheckActionUart16552_3) /2
   \   0000001B   01                 DB      0x1
   \   0000001C   ....               DW      (??CheckActionUart16552_4) /2
   \   0000001E   01                 DB      0x1
   \   0000001F   ....               DW      (??CheckActionUart16552_6) /2
   \   00000021   07                 DB      0x7
   \   00000022   ....               DW      (??CheckActionUart16552_7) /2
   \   00000024   03                 DB      0x3
   \   00000025   ....               DW      (??CheckActionUart16552_5) /2
   \   00000027   02                 DB      0x2
   \   00000028   ....               DW      (??CheckActionUart16552_2) /2
   \   0000002A   4D                 DB      0x4d
   \   0000002B   ....               DW      (??CheckActionUart16552_8) /2
   \   0000002D   01                 DB      0x1
   \   0000002E   ....               DW      (??CheckActionUart16552_10) /2
   \   00000030   01                 DB      0x1
   \   00000031   ....               DW      (??CheckActionUart16552_9) /2
   \   00000033   34                 DB      0x34
   \   00000034   ....               DW      (??CheckActionUart16552_11) /2
   \   00000036   01                 DB      0x1
   \   00000037   ....               DW      (??CheckActionUart16552_12) /2
   \   00000039   FB                 DB      251
   1073          
   1074          #if USE_MODBUS_PROTOCOL == 1
   1075          static unsigned short  Rsp_Delay[2];       // response delay
   1076          
   1077          static void
   1078          load_eeprom_misc_485(void)
   1079          {
   1080            char ch;
   1081            uint16_t temp;
   1082          
   1083            for (ch = 0; ch < 2; ch++)
   1084            {
   1085              ReadEEPROMBuffer(EEPROM_PORTSETUP + 3 + ch * 2, sizeof(uint16_t), (char*)&temp);
   1086          
   1087              if (temp > 0 && temp <= 5000)
   1088              {
   1089                Rsp_Delay[ch] = temp;
   1090              }
   1091              else
   1092              {
   1093                Rsp_Delay[ch] = 0;
   1094              }
   1095            }
   1096          }
   1097          
   1098          static void
   1099          __rs485_task_set_power(uint8_t ch, uint8_t on)
   1100          {
   1101            uint8_t current;
   1102          
   1103            current = (TData.RS4.PortUsed >> ch) & 0x01;
   1104          
   1105            if(current == on)
   1106            {
   1107              // no need to waste time
   1108              return;
   1109            }
   1110          
   1111            if(on)
   1112            {
   1113              TData.RS4.PortUsed |= (1 << ch);
   1114            }
   1115            else
   1116            {
   1117              TData.RS4.PortUsed &= ~(1 << ch);
   1118            }
   1119            PORTC = TData.RS4.PortUsed;
   1120          
   1121            WriteEEPROMByte(EEPROM_PORTSETUP, TData.RS4.PortUsed);
   1122          }
   1123          
   1124          void
   1125          rs485_task_set_power(uint8_t ch, uint8_t on)
   1126          {
   1127            OS_Use(&UARTSEND); 
   1128            __rs485_task_set_power(ch, on);
   1129            OS_Unuse(&UARTSEND); 
   1130          }
   1131          
   1132          uint8_t
   1133          rs485_task_get_power(uint8_t ch)
   1134          {
   1135            uint8_t status;
   1136          
   1137            OS_Use(&UARTSEND); 
   1138            status = (TData.RS4.PortUsed >> ch) & 0x01;
   1139            OS_Unuse(&UARTSEND); 
   1140          
   1141            return status;
   1142          }
   1143          
   1144          uint8_t
   1145          rs485_task_get_sensor_type(uint8_t ch)
   1146          {
   1147            uint8_t sensor_type;
   1148          
   1149            OS_Use(&UARTSEND); 
   1150            sensor_type = (TData.RS4.SensorType[ch / 4] >> (2 * (ch % 4))) & 0x03;
   1151            OS_Unuse(&UARTSEND); 
   1152          
   1153            return sensor_type;
   1154          }
   1155          
   1156          void
   1157          rs485_task_set_sensor_type(uint8_t ch, uint8_t sensor_type)
   1158          {
   1159            OS_Use(&UARTSEND); 
   1160          
   1161            // clear first
   1162            TData.RS4.SensorType[ch / 4] &= ~(0x03 << ((ch % 4)*2));
   1163          
   1164            // set
   1165            TData.RS4.SensorType[ch / 4] |= ((sensor_type & 0x03)<< ((ch % 4)*2));
   1166          
   1167            WriteEEPROMByte(EEPROM_PORTSETUP + 1, TData.RS4.SensorType[0]);
   1168            WriteEEPROMByte(EEPROM_PORTSETUP + 2, TData.RS4.SensorType[1]);
   1169          
   1170            OS_Unuse(&UARTSEND); 
   1171          }
   1172          
   1173          static void
   1174          __rs485_task_set_rsp_delay(uint8_t port, uint16_t delay)
   1175          {
   1176            uint16_t cur_delay = Rsp_Delay[port];
   1177          
   1178            if(cur_delay == delay)
   1179            {
   1180              return;
   1181            }
   1182          
   1183            if (delay > 5000)
   1184            {
   1185              return;
   1186            }
   1187          
   1188            Rsp_Delay[port] = delay;
   1189          
   1190            WriteEEPROMBufferSync(EEPROM_PORTSETUP + 3 + port * 2, sizeof(uint16_t), (char*)&delay);
   1191          }
   1192          
   1193          void
   1194          rs485_task_set_rsp_delay(uint8_t port, uint16_t delay)
   1195          {
   1196            OS_Use(&UARTSEND); 
   1197            __rs485_task_set_rsp_delay(port, delay);
   1198            OS_Unuse(&UARTSEND); 
   1199          }
   1200          
   1201          uint16_t
   1202          rs485_task_get_rsp_delay(uint8_t port)
   1203          {
   1204            uint16_t    ret;
   1205          
   1206            OS_Use(&UARTSEND); 
   1207            ret = Rsp_Delay[port];
   1208            OS_Unuse(&UARTSEND); 
   1209          
   1210            return ret;
   1211          }
   1212          
   1213          uint8_t
   1214          rs485_task_get_comm_status(uint8_t port)
   1215          {
   1216            uint16_t    ret;
   1217          
   1218            // XXX no need for lock
   1219            ret = (TData.RS4.IOUnitStatus[port] & COMFAIL_BIT) ? 0 : 1;
   1220          
   1221            return ret;
   1222          }
   1223          
   1224          uint8_t
   1225          rs485_task_get_channel_status(uint8_t port, uint8_t ch)
   1226          {
   1227            uint8_t ret;
   1228          
   1229            OS_Use(&UARTSEND); 
   1230            ret = (uint8_t)TData.RS4.TargetSetup1[port][ch];
   1231            OS_Unuse(&UARTSEND);
   1232          
   1233            return ret;
   1234          }
   1235          
   1236          int16_t
   1237          rs485_task_get_channel_value(uint8_t port, uint8_t ch)
   1238          {
   1239            float f;
   1240            int16_t  ret;
   1241          
   1242            OS_Use(&UARTSEND); 
   1243            f = TData.RS4.Result[port][ch];
   1244            OS_Unuse(&UARTSEND);
   1245          
   1246            ret = (int16_t)(f * 100);
   1247            return ret;
   1248          }
   1249          
   1250          int16_t
   1251          rs485_task_get_channel_raw_value(uint8_t port, uint8_t ch)
   1252          {
   1253            int16_t ret;
   1254          
   1255            OS_Use(&UARTSEND); 
   1256            ret = TData.RS4.Raw[port][ch];
   1257            OS_Unuse(&UARTSEND);
   1258          
   1259            return ret;
   1260          }
   1261          
   1262          int16_t
   1263          rs485_task_get_channel_cal_value(uint8_t port, uint8_t ch)
   1264          {
   1265            int16_t ret;
   1266          
   1267            OS_Use(&UARTSEND); 
   1268            ret = TData.RS4.Cal[port][ch];
   1269            OS_Unuse(&UARTSEND);
   1270          
   1271            return ret;
   1272          }
   1273          #endif /* USE_MODBUS_PROTOCOL == 1 */

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   CalcDSRxChecksum16552
      0      2   CalcDSTxChecksumUART16552
      4      2   CheckActionUart16552
        4      2   -> ReceiveCData
        4      2   -> ReceiveCardEEPROMData
        4      2   -> ReceiveCardStatus
        4      2   -> ReceiveConfigData
        4      2   -> ReceivePTOData
        4      2   -> ReceiveRData
        4      2   -> ReceiveRadarData
        4      2   -> ReceiveRadarInfo
        4      2   -> ReceiveWHData
        4      2   -> ReceiveWISData
        4      2   -> ReceiveWISStatus
        4      2   -> ReceiveWISXData
        4      2 ?CV_SWITCH_L06
      0      2   EmptyRxBuf16552
      7      2   ExtRS485Ctl
        7      2   -> EmptyRxBuf16552
        7      2   -> Init16552
        7      2   -> OS_Delay
        7      2   -> OS_Error
        7      2   -> OS_WaitEventTimed
        7      2   -> ReadEEPROMByte
        7      2   -> SetRS4Port
        7      2   -> Uart_BuildReqC16552
        7      2   -> Uart_BuildReqCardStatus
        7      2   -> Uart_BuildReqConfig
        7      2   -> Uart_BuildReqEEPROMData
        7      2   -> Uart_BuildReqM16552
        7      2   -> Uart_BuildReqR16552
        7      2   -> Uart_BuildReqRadarData
        7      2   -> Uart_BuildReqRadarInfo
        7      2   -> Uart_BuildReqWISCardStatus
        7      2   -> Uart_BuildReqWISData
        7      2   -> Uart_BuildReqWISXData
        7      2   -> Uart_BuildSndData
        7      2   -> Uart_BuildTail16552
        7      2 ?SS_SHR_L02
        7      2 ?S_SHL_L02
      2      2   ExtRS485Rec
        2      2   -> OS_Delay
        2      2   -> OS_Error
        2      2   -> OS_SignalEvent
        2      2   -> OS_WaitEventTimed
        2      2   -> Usart16552CheckPackage
        2      2 ?SS_SHR_L02
        2      2 ?S_SHL_L02
      0      2   GoToSyncUART16552
      5      2   Init16552
        5      2 ?UL_DIVMOD_L03
      6      2   ReceiveCData
        6      2 ?S_EC_MUL_L02
      0      2   ReceiveCardEEPROMData
      0      2   ReceiveCardStatus
      0      2   ReceiveConfigData
        0      2 ?S_EC_MUL_L02
     13      2   ReceivePTOData
       13      2   -> OS_Unuse
       13      2   -> OS_Use
       13      2 ?S_EC_MUL_L02
      1      2   ReceivePacketUart16552
        1      2   -> CalcDSRxChecksum16552
        1      2   -> GoToSyncUART16552
        1      2   -> OS_SignalEvent
      6      2   ReceiveRData
        6      2 ?S_EC_MUL_L02
      8      2   ReceiveRadarData
        8      2 ?S_EC_MUL_L02
      0      2   ReceiveRadarInfo
      5      2   ReceiveWHData
        5      2   -> OS_Unuse
        5      2   -> OS_Use
        5      2 ?S_SHL_L02
      7      2   ReceiveWISData
        7      2 ?F_DIV_L04
        7      2 ?SL2F_L04
        7      2 ?S_EC_MUL_L02
        7      2 ?UL2F_L04
      0      2   ReceiveWISStatus
      0      2   ReceiveWISXData
      0      2   SetRS4Port
      0      2   TimoutUART0
      0      2   TimoutUART1
      0      2   Uart_BuildHeader16552
      0      2   Uart_BuildReqC16552
      0      2   Uart_BuildReqCardStatus
      0      2   Uart_BuildReqConfig
      0      2   Uart_BuildReqEEPROMData
      0      2   Uart_BuildReqM16552
      0      2   Uart_BuildReqR16552
      0      2   Uart_BuildReqRadarData
      0      2   Uart_BuildReqRadarInfo
      0      2   Uart_BuildReqWISCardStatus
      0      2   Uart_BuildReqWISData
      0      2   Uart_BuildReqWISXData
      0      2   Uart_BuildSndData
      1      2   Uart_BuildTail16552
        1      2   -> CalcDSTxChecksumUART16552
        1      2   -> GoToSyncUART16552
        1      2   -> OS_Delay
        1      2   -> OS_RetriggerTimer
        1      2   -> Uart_BuildHeader16552
      5      2   Usart16552CheckPackage
        5      2   -> CheckActionUart16552
        5      2   -> GoToSyncUART16552


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      58  ?<Jumptable for CheckActionUart16552>_0
     134  CalcDSRxChecksum16552
      68  CalcDSTxChecksumUART16552
     198  CheckActionUart16552
      44  EmptyRxBuf16552
   1'366  ExtRS485Ctl
     642  ExtRS485Rec
      70  GoToSyncUART16552
     450  Init16552
     258  ReceiveCData
     110  ReceiveCardEEPROMData
      92  ReceiveCardStatus
     186  ReceiveConfigData
     288  ReceivePTOData
     510  ReceivePacketUart16552
     258  ReceiveRData
     256  ReceiveRadarData
      60  ReceiveRadarInfo
     402  ReceiveWHData
     294  ReceiveWISData
     150  ReceiveWISStatus
     142  ReceiveWISXData
       8  SetRS4Port
      12  TimoutUART0
      12  TimoutUART1
     188  Uart_BuildHeader16552
     184  Uart_BuildReqC16552
     184  Uart_BuildReqCardStatus
     124  Uart_BuildReqConfig
     190  Uart_BuildReqEEPROMData
     184  Uart_BuildReqM16552
     184  Uart_BuildReqR16552
     184  Uart_BuildReqRadarData
     124  Uart_BuildReqRadarInfo
     124  Uart_BuildReqWISCardStatus
     184  Uart_BuildReqWISData
     180  Uart_BuildReqWISXData
     138  Uart_BuildSndData
     562  Uart_BuildTail16552
     106  Usart16552CheckPackage
       1  _A_PORTC
       1  _A_PORTE

 
     2 bytes in segment ABSOLUTE
 8'850 bytes in segment CODE
    58 bytes in segment SWITCH
 
 8'908 bytes of CODE memory
     0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
