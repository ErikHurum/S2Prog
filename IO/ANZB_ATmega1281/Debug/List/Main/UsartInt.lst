###############################################################################
#
# IAR C/C++ Compiler V8.10.1.1784/W64 for Microchip AVR   02/May/2023  12:58:18
# Copyright 1996-2023 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file           =  D:\S2Prog\IO\ANZB_ATmega1281\Src\UsartInt.c
#    Command line          =
#        -f D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\UsartInt.r90.rsp
#        (D:\S2Prog\IO\ANZB_ATmega1281\Src\UsartInt.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main -D OS_LIBMODE_D -D
#        OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D USE_MODBUS_PROTOCOL=0 -lCN
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\List\Main -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB_ATmega1281\INC\ -I
#        D:\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\ --eeprom_size 4096
#        --clib -On) --dependencies=n
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\UsartInt.r90.iar_deps
#    Locale                =  C
#    List file             =
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\List\Main\UsartInt.lst
#    Object file           =
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main\UsartInt.r90
#    Runtime model:           
#      __64bit_doubles     =  disabled
#      __SystemLibrary     =  CLib
#      __architecture      =  *
#      __cpu               =  3
#      __cpu_name          =  ATmega1281
#      __dlib_version      =  clib
#      __enhanced_core     =  enabled
#      __enhanced_core_mul =  enabled
#      __has_elpm          =  true
#      __memory_model      =  2
#      __mex               =  disabled
#      __no_rampd          =  enabled
#      __rt_version        =  3
#      __vtable_memory     =  __nearflash
#
###############################################################################

D:\S2Prog\IO\ANZB_ATmega1281\Src\UsartInt.c
      1          /****************************************************************************************
      2          / USART1 functions and interrupt
      3          /   This routines sync and check the ANPRO10
      4          /   Uart1Pro.c handle the package
      5          /
      6          ***************************************************************************************/
      7          
      8          #if USE_MODBUS_PROTOCOL == 0
      9          
     10          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xce
   \   __no_init union <unnamed>#40 volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   __no_init union <unnamed>#53 volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   __no_init union <unnamed>#56 volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc6
   \   __no_init union <unnamed>#59 volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   __no_init union <unnamed>#72 volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   __no_init union <unnamed>#75 volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   __no_init union <unnamed>#436 volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
     11          #include "stdio.h"
     12          #include "math.h"
     13          #include "externals.h"
     14          #include "version.h"
     15          
     16          #if (OS_UART != 0)
     17          
     18          // USART0

   \                                 In  segment CODE, align 2, keep-with-next
     19          void Int_Handler_RX_USART0( void ){   
   \                     Int_Handler_RX_USART0:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
     20          
     21              if ( UCSR0A & __BIT_MASK( DOR0 ) ) {                // Overrun error? 
   \   00000004   910000C0           LDS     R16, 192
     22              }
     23          
     24              if ( UCSR0A & __BIT_MASK( FE0 ) ) {                 // Framing error? 
   \   00000008   910000C0           LDS     R16, 192
     25              }
     26          
     27              while ( UCSR0A & __BIT_MASK( RXC0)  ) {                // New byte avaiable?
   \                     ??Int_Handler_RX_USART0_0:
   \   0000000C   910000C0           LDS     R16, 192
   \   00000010   FF07               SBRS    R16, 7
   \   00000012   C070               RJMP    ??Int_Handler_RX_USART0_1
     28                  UART[0].pRxBuffer[ UART[0].RxFirst ] = UDR0;    // Read the character 
   \   00000014   912000C6           LDS     R18, 198
   \   00000018   ....               LDI     R30, LOW(UART)
   \   0000001A   ....               LDI     R31, (UART) >> 8
   \   0000001C   8502               LDD     R16, Z+10
   \   0000001E   8513               LDD     R17, Z+11
   \   00000020   ....               LDI     R30, LOW(UART)
   \   00000022   ....               LDI     R31, (UART) >> 8
   \   00000024   8544               LDD     R20, Z+12
   \   00000026   8555               LDD     R21, Z+13
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   0FE4               ADD     R30, R20
   \   0000002C   1FF5               ADC     R31, R21
   \   0000002E   8320               ST      Z, R18
     29          
     30                  if (UART[0].RxState != HANDLE) {                // ok to receive? 
   \   00000030   9100....           LDS     R16, (UART + 18)
   \   00000034   300A               CPI     R16, 10
   \   00000036   F351               BREQ    ??Int_Handler_RX_USART0_0
     31                      switch (UART[0].RxState) {                   // Yes, check state
   \   00000038   9100....           LDS     R16, (UART + 18)
   \   0000003C   2300               TST     R16
   \   0000003E   F009               BREQ    $+2+2
   \   00000040   C041               RJMP    ??Int_Handler_RX_USART0_2
     32                      case SYNC :
     33                          if ( UART[0].pRxBuffer[ UART[0].RxFirst ] == ANPRO10_SYN) {
   \   00000042   ....               LDI     R30, LOW(UART)
   \   00000044   ....               LDI     R31, (UART) >> 8
   \   00000046   85A2               LDD     R26, Z+10
   \   00000048   85B3               LDD     R27, Z+11
   \   0000004A   ....               LDI     R30, LOW(UART)
   \   0000004C   ....               LDI     R31, (UART) >> 8
   \   0000004E   8504               LDD     R16, Z+12
   \   00000050   8515               LDD     R17, Z+13
   \   00000052   0FA0               ADD     R26, R16
   \   00000054   1FB1               ADC     R27, R17
   \   00000056   910C               LD      R16, X
   \   00000058   3106               CPI     R16, 22
   \   0000005A   F461               BRNE    ??Int_Handler_RX_USART0_3
     34                              UART[0].SyncCnt ++ ;                 // count sync
   \   0000005C   ....               LDI     R30, LOW(UART)
   \   0000005E   ....               LDI     R31, (UART) >> 8
   \   00000060   8903               LDD     R16, Z+19
   \   00000062   9503               INC     R16
   \   00000064   8B03               STD     Z+19, R16
     35                              UART[0].RxFirst = 0;                 // start at start of buff
   \   00000066   E000               LDI     R16, 0
   \   00000068   E010               LDI     R17, 0
   \   0000006A   ....               LDI     R30, LOW(UART)
   \   0000006C   ....               LDI     R31, (UART) >> 8
   \   0000006E   8704               STD     Z+12, R16
   \   00000070   8715               STD     Z+13, R17
   \   00000072   CFCC               RJMP    ??Int_Handler_RX_USART0_0
     36                          } else if ((UART[0].SyncCnt >= 2) && 
     37                                     (UART[0].pRxBuffer[ UART[0].RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \                     ??Int_Handler_RX_USART0_3:
   \   00000074   9100....           LDS     R16, (UART + 19)
   \   00000078   3002               CPI     R16, 2
   \   0000007A   F100               BRCS    ??Int_Handler_RX_USART0_4
   \   0000007C   ....               LDI     R30, LOW(UART)
   \   0000007E   ....               LDI     R31, (UART) >> 8
   \   00000080   85A2               LDD     R26, Z+10
   \   00000082   85B3               LDD     R27, Z+11
   \   00000084   ....               LDI     R30, LOW(UART)
   \   00000086   ....               LDI     R31, (UART) >> 8
   \   00000088   8504               LDD     R16, Z+12
   \   0000008A   8515               LDD     R17, Z+13
   \   0000008C   0FA0               ADD     R26, R16
   \   0000008E   1FB1               ADC     R27, R17
   \   00000090   910C               LD      R16, X
   \   00000092   3001               CPI     R16, 1
   \   00000094   F499               BRNE    ??Int_Handler_RX_USART0_4
     38                              UART[0].SyncCnt = 0 ;                // reset counter
   \   00000096   E000               LDI     R16, 0
   \   00000098   9300....           STS     (UART + 19), R16
     39                              UART[0].RxState = HEADER ;
   \   0000009C   E001               LDI     R16, 1
   \   0000009E   9300....           STS     (UART + 18), R16
     40                              UART[0].RxLast = 0 ;
   \   000000A2   E000               LDI     R16, 0
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   ....               LDI     R30, LOW(UART)
   \   000000A8   ....               LDI     R31, (UART) >> 8
   \   000000AA   8706               STD     Z+14, R16
   \   000000AC   8717               STD     Z+15, R17
     41                              UART[0].RxTimeout = RX_TO_TIME ;    // reset timeout
   \   000000AE   EF0A               LDI     R16, 250
   \   000000B0   E010               LDI     R17, 0
   \   000000B2   ....               LDI     R30, LOW(UART)
   \   000000B4   ....               LDI     R31, (UART) >> 8
   \   000000B6   8B04               STD     Z+20, R16
   \   000000B8   8B15               STD     Z+21, R17
   \   000000BA   CFA8               RJMP    ??Int_Handler_RX_USART0_0
     42                          } else {
     43                              UART[0].SyncCnt = 0 ;                // start over once more
   \                     ??Int_Handler_RX_USART0_4:
   \   000000BC   E000               LDI     R16, 0
   \   000000BE   9300....           STS     (UART + 19), R16
     44                          }
     45                          break;
   \   000000C2   CFA4               RJMP    ??Int_Handler_RX_USART0_0
     46                      default :
     47                          if ((++UART[0].RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??Int_Handler_RX_USART0_2:
   \   000000C4   ....               LDI     R30, LOW(UART)
   \   000000C6   ....               LDI     R31, (UART) >> 8
   \   000000C8   8504               LDD     R16, Z+12
   \   000000CA   8515               LDD     R17, Z+13
   \   000000CC   5F0F               SUBI    R16, 255
   \   000000CE   4F1F               SBCI    R17, 255
   \   000000D0   8704               STD     Z+12, R16
   \   000000D2   8715               STD     Z+13, R17
   \   000000D4   ....               LDI     R30, LOW(UART)
   \   000000D6   ....               LDI     R31, (UART) >> 8
   \   000000D8   8504               LDD     R16, Z+12
   \   000000DA   8515               LDD     R17, Z+13
   \   000000DC   3907               CPI     R16, 151
   \   000000DE   E020               LDI     R18, 0
   \   000000E0   0712               CPC     R17, R18
   \   000000E2   F020               BRCS    ??Int_Handler_RX_USART0_5
     48                              GoToSyncUART(0) ;                       // go to sync mode
   \   000000E4   E000               LDI     R16, 0
   \   000000E6   ........           CALL    GoToSyncUART
   \   000000EA   CF90               RJMP    ??Int_Handler_RX_USART0_0
     49                          } else {
     50                              ReceivePacketUart(0) ;              // Check package
   \                     ??Int_Handler_RX_USART0_5:
   \   000000EC   E000               LDI     R16, 0
   \   000000EE   ........           CALL    ReceivePacketUart
     51                          }
     52                          break ;   
   \   000000F2   CF8C               RJMP    ??Int_Handler_RX_USART0_0
     53                      }
     54                  }
     55              }
     56          } 
   \                     ??Int_Handler_RX_USART0_1:
   \   000000F4   91A9               LD      R26, Y+
   \   000000F6   91B9               LD      R27, Y+
   \   000000F8   9508               RET
   \   000000FA                      REQUIRE _A_UCSR0A
   \   000000FA                      REQUIRE _A_UDR0
     57          
     58          
     59          #pragma vector=USART0_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
     60          __interrupt void IntHandler_RX_USART0( void ){   
   \                     IntHandler_RX_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     61              OS_CallISR(Int_Handler_RX_USART0);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_RX_USART0/2)
   \   00000026   ....               LDI     R17, (Int_Handler_RX_USART0/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
     62          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
     63          

   \                                 In  segment CODE, align 2, keep-with-next
     64          void Int_Handler_TX_USART0( void ){   
   \                     Int_Handler_TX_USART0:
     65          
     66              UCSR0B &= ~(__BIT_MASK( TXCIE0)) ;            // transmission end, disable int.
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   7B0F               ANDI    R16, 0xBF
   \   00000006   930000C1           STS     193, R16
     67              PORTE &= ~0x04 ;                              // TXE0 off
   \   0000000A   9872               CBI     0x0E, 0x02
     68              OS_StopTimer(&TimerUSART0);                    // and stop timer
   \   0000000C   ....               LDI     R16, LOW(TimerUSART0)
   \   0000000E   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000010   ........           CALL    OS_StopTimer
     69              GoToSyncUART(0) ;                                    // go to sync modus for recive
   \   00000014   E000               LDI     R16, 0
   \   00000016   ........           CALL    GoToSyncUART
     70              
     71          }
   \   0000001A   9508               RET
   \   0000001C                      REQUIRE _A_UCSR0B
   \   0000001C                      REQUIRE _A_PORTE
     72          
     73          #pragma vector=USART0_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
     74          __interrupt void IntHandler_TX_USART0( void ){   
   \                     IntHandler_TX_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     75              OS_CallISR(Int_Handler_TX_USART0);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_TX_USART0/2)
   \   00000026   ....               LDI     R17, (Int_Handler_TX_USART0/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
     76          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
     77          

   \                                 In  segment CODE, align 2, keep-with-next
     78          void Int_Handler_UDRE_USART0( void ){   
   \                     Int_Handler_UDRE_USART0:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
     79              if ( UART[0].TxCount-- > 0 ) {
   \   00000002   ....               LDI     R30, LOW(UART)
   \   00000004   ....               LDI     R31, (UART) >> 8
   \   00000006   8126               LDD     R18, Z+6
   \   00000008   8137               LDD     R19, Z+7
   \   0000000A   0189               MOVW    R17:R16, R19:R18
   \   0000000C   5001               SUBI    R16, 1
   \   0000000E   4010               SBCI    R17, 0
   \   00000010   ....               LDI     R30, LOW(UART)
   \   00000012   ....               LDI     R31, (UART) >> 8
   \   00000014   8306               STD     Z+6, R16
   \   00000016   8317               STD     Z+7, R17
   \   00000018   2B23               OR      R18, R19
   \   0000001A   F0B1               BREQ    ??Int_Handler_UDRE_USART0_0
     80                  UDR0 = UART[0].pTxBuffer[ UART[0].TxLast ];     // Send a character
   \   0000001C   ....               LDI     R30, LOW(UART)
   \   0000001E   ....               LDI     R31, (UART) >> 8
   \   00000020   81A0               LD      R26, Z
   \   00000022   81B1               LDD     R27, Z+1
   \   00000024   ....               LDI     R30, LOW(UART)
   \   00000026   ....               LDI     R31, (UART) >> 8
   \   00000028   8104               LDD     R16, Z+4
   \   0000002A   8115               LDD     R17, Z+5
   \   0000002C   0FA0               ADD     R26, R16
   \   0000002E   1FB1               ADC     R27, R17
   \   00000030   910C               LD      R16, X
   \   00000032   930000C6           STS     198, R16
     81                  UART[0].TxLast++;
   \   00000036   ....               LDI     R30, LOW(UART)
   \   00000038   ....               LDI     R31, (UART) >> 8
   \   0000003A   8104               LDD     R16, Z+4
   \   0000003C   8115               LDD     R17, Z+5
   \   0000003E   5F0F               SUBI    R16, 255
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   8304               STD     Z+4, R16
   \   00000044   8315               STD     Z+5, R17
   \   00000046   C00F               RJMP    ??Int_Handler_UDRE_USART0_1
     82              } else{                                             // Last byte sent?
     83                    UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \                     ??Int_Handler_UDRE_USART0_0:
   \   00000048   910000C1           LDS     R16, 193
   \   0000004C   7D0F               ANDI    R16, 0xDF
   \   0000004E   930000C1           STS     193, R16
     84                    UCSR0A |= (__BIT_MASK( TXC0)) ;               // Clear int bit in TXC.
   \   00000052   910000C0           LDS     R16, 192
   \   00000056   6400               ORI     R16, 0x40
   \   00000058   930000C0           STS     192, R16
     85                    UCSR0B |= __BIT_MASK( TXCIE0) ;               // Enable TXC int.
   \   0000005C   910000C1           LDS     R16, 193
   \   00000060   6400               ORI     R16, 0x40
   \   00000062   930000C1           STS     193, R16
     86              }           
     87          } 
   \                     ??Int_Handler_UDRE_USART0_1:
   \   00000066   01DA               MOVW    R27:R26, R21:R20
   \   00000068   9508               RET
   \   0000006A                      REQUIRE _A_UDR0
   \   0000006A                      REQUIRE _A_UCSR0B
   \   0000006A                      REQUIRE _A_UCSR0A
     88          #endif
     89          
     90          #pragma vector=USART0_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
     91          __interrupt void IntHandler_UDRE_USART0( void ){   
   \                     IntHandler_UDRE_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     92              OS_CallISR(Int_Handler_UDRE_USART0);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_UDRE_USART0/2)
   \   00000026   ....               LDI     R17, (Int_Handler_UDRE_USART0/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
     93          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
     94          // USART1

   \                                 In  segment CODE, align 2, keep-with-next
     95           void Int_Handler_RX_USART1( void ){   
   \                     Int_Handler_RX_USART1:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
     96              if ( UCSR1A & __BIT_MASK( DOR1 ) ) {                // Overrun error? 
   \   00000004   910000C8           LDS     R16, 200
     97              }
     98          
     99              if ( UCSR1A & __BIT_MASK( FE1 ) ) {                 // Framing error? 
   \   00000008   910000C8           LDS     R16, 200
    100              }
    101          
    102              while ( UCSR1A & __BIT_MASK( RXC1)  ) {                // New byte avaiable?
   \                     ??Int_Handler_RX_USART1_0:
   \   0000000C   910000C8           LDS     R16, 200
   \   00000010   FF07               SBRS    R16, 7
   \   00000012   C070               RJMP    ??Int_Handler_RX_USART1_1
    103                  UART[1].pRxBuffer[ UART[1].RxFirst ] = UDR1;    // Read the character 
   \   00000014   912000CE           LDS     R18, 206
   \   00000018   ....               LDI     R30, LOW(UART)
   \   0000001A   ....               LDI     R31, (UART) >> 8
   \   0000001C   A104               LDD     R16, Z+36
   \   0000001E   A115               LDD     R17, Z+37
   \   00000020   ....               LDI     R30, LOW(UART)
   \   00000022   ....               LDI     R31, (UART) >> 8
   \   00000024   A146               LDD     R20, Z+38
   \   00000026   A157               LDD     R21, Z+39
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   0FE4               ADD     R30, R20
   \   0000002C   1FF5               ADC     R31, R21
   \   0000002E   8320               ST      Z, R18
    104          
    105                  if (UART[1].RxState != HANDLE) {                // ok to receive? 
   \   00000030   9100....           LDS     R16, (UART + 44)
   \   00000034   300A               CPI     R16, 10
   \   00000036   F351               BREQ    ??Int_Handler_RX_USART1_0
    106                      switch (UART[1].RxState) {                   // Yes, check state
   \   00000038   9100....           LDS     R16, (UART + 44)
   \   0000003C   2300               TST     R16
   \   0000003E   F009               BREQ    $+2+2
   \   00000040   C041               RJMP    ??Int_Handler_RX_USART1_2
    107                      case SYNC :
    108                          if ( UART[1].pRxBuffer[ UART[1].RxFirst ] == ANPRO10_SYN) {
   \   00000042   ....               LDI     R30, LOW(UART)
   \   00000044   ....               LDI     R31, (UART) >> 8
   \   00000046   A1A4               LDD     R26, Z+36
   \   00000048   A1B5               LDD     R27, Z+37
   \   0000004A   ....               LDI     R30, LOW(UART)
   \   0000004C   ....               LDI     R31, (UART) >> 8
   \   0000004E   A106               LDD     R16, Z+38
   \   00000050   A117               LDD     R17, Z+39
   \   00000052   0FA0               ADD     R26, R16
   \   00000054   1FB1               ADC     R27, R17
   \   00000056   910C               LD      R16, X
   \   00000058   3106               CPI     R16, 22
   \   0000005A   F461               BRNE    ??Int_Handler_RX_USART1_3
    109                              UART[1].SyncCnt ++ ;                 // count sync
   \   0000005C   ....               LDI     R30, LOW(UART)
   \   0000005E   ....               LDI     R31, (UART) >> 8
   \   00000060   A505               LDD     R16, Z+45
   \   00000062   9503               INC     R16
   \   00000064   A705               STD     Z+45, R16
    110                              UART[1].RxFirst = 0;                 // start at start of buff
   \   00000066   E000               LDI     R16, 0
   \   00000068   E010               LDI     R17, 0
   \   0000006A   ....               LDI     R30, LOW(UART)
   \   0000006C   ....               LDI     R31, (UART) >> 8
   \   0000006E   A306               STD     Z+38, R16
   \   00000070   A317               STD     Z+39, R17
   \   00000072   CFCC               RJMP    ??Int_Handler_RX_USART1_0
    111                          } else if ((UART[1].SyncCnt >= 2) && 
    112                                     (UART[1].pRxBuffer[ UART[1].RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \                     ??Int_Handler_RX_USART1_3:
   \   00000074   9100....           LDS     R16, (UART + 45)
   \   00000078   3002               CPI     R16, 2
   \   0000007A   F100               BRCS    ??Int_Handler_RX_USART1_4
   \   0000007C   ....               LDI     R30, LOW(UART)
   \   0000007E   ....               LDI     R31, (UART) >> 8
   \   00000080   A1A4               LDD     R26, Z+36
   \   00000082   A1B5               LDD     R27, Z+37
   \   00000084   ....               LDI     R30, LOW(UART)
   \   00000086   ....               LDI     R31, (UART) >> 8
   \   00000088   A106               LDD     R16, Z+38
   \   0000008A   A117               LDD     R17, Z+39
   \   0000008C   0FA0               ADD     R26, R16
   \   0000008E   1FB1               ADC     R27, R17
   \   00000090   910C               LD      R16, X
   \   00000092   3001               CPI     R16, 1
   \   00000094   F499               BRNE    ??Int_Handler_RX_USART1_4
    113                              UART[1].SyncCnt = 0 ;                // reset counter
   \   00000096   E000               LDI     R16, 0
   \   00000098   9300....           STS     (UART + 45), R16
    114                              UART[1].RxState = HEADER ;
   \   0000009C   E001               LDI     R16, 1
   \   0000009E   9300....           STS     (UART + 44), R16
    115                              UART[1].RxLast = 0 ;
   \   000000A2   E000               LDI     R16, 0
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   ....               LDI     R30, LOW(UART)
   \   000000A8   ....               LDI     R31, (UART) >> 8
   \   000000AA   A700               STD     Z+40, R16
   \   000000AC   A711               STD     Z+41, R17
    116                              UART[1].RxTimeout = RX_TO_TIME ;      // reset timeout
   \   000000AE   EF0A               LDI     R16, 250
   \   000000B0   E010               LDI     R17, 0
   \   000000B2   ....               LDI     R30, LOW(UART)
   \   000000B4   ....               LDI     R31, (UART) >> 8
   \   000000B6   A706               STD     Z+46, R16
   \   000000B8   A717               STD     Z+47, R17
   \   000000BA   CFA8               RJMP    ??Int_Handler_RX_USART1_0
    117                          } else {
    118                              UART[1].SyncCnt = 0 ;                // start over once more
   \                     ??Int_Handler_RX_USART1_4:
   \   000000BC   E000               LDI     R16, 0
   \   000000BE   9300....           STS     (UART + 45), R16
    119                          }
    120                          break;
   \   000000C2   CFA4               RJMP    ??Int_Handler_RX_USART1_0
    121                      default :
    122                          if ((++UART[1].RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??Int_Handler_RX_USART1_2:
   \   000000C4   ....               LDI     R30, LOW(UART)
   \   000000C6   ....               LDI     R31, (UART) >> 8
   \   000000C8   A106               LDD     R16, Z+38
   \   000000CA   A117               LDD     R17, Z+39
   \   000000CC   5F0F               SUBI    R16, 255
   \   000000CE   4F1F               SBCI    R17, 255
   \   000000D0   A306               STD     Z+38, R16
   \   000000D2   A317               STD     Z+39, R17
   \   000000D4   ....               LDI     R30, LOW(UART)
   \   000000D6   ....               LDI     R31, (UART) >> 8
   \   000000D8   A106               LDD     R16, Z+38
   \   000000DA   A117               LDD     R17, Z+39
   \   000000DC   3907               CPI     R16, 151
   \   000000DE   E020               LDI     R18, 0
   \   000000E0   0712               CPC     R17, R18
   \   000000E2   F020               BRCS    ??Int_Handler_RX_USART1_5
    123                              GoToSyncUART(1) ;                    // go to sync mode
   \   000000E4   E001               LDI     R16, 1
   \   000000E6   ........           CALL    GoToSyncUART
   \   000000EA   CF90               RJMP    ??Int_Handler_RX_USART1_0
    124                          } else {
    125                              ReceivePacketUart(1) ;              // Check package
   \                     ??Int_Handler_RX_USART1_5:
   \   000000EC   E001               LDI     R16, 1
   \   000000EE   ........           CALL    ReceivePacketUart
    126                          }
    127                          break ;   
   \   000000F2   CF8C               RJMP    ??Int_Handler_RX_USART1_0
    128                      }
    129                  }
    130              }
    131          } 
   \                     ??Int_Handler_RX_USART1_1:
   \   000000F4   91A9               LD      R26, Y+
   \   000000F6   91B9               LD      R27, Y+
   \   000000F8   9508               RET
   \   000000FA                      REQUIRE _A_UCSR1A
   \   000000FA                      REQUIRE _A_UDR1
    132          
    133          #pragma vector=USART1_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    134          __interrupt void IntHandler_RX_USART1( void ){   
   \                     IntHandler_RX_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    135              OS_CallISR(Int_Handler_RX_USART1);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_RX_USART1/2)
   \   00000026   ....               LDI     R17, (Int_Handler_RX_USART1/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
    136          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
    137          

   \                                 In  segment CODE, align 2, keep-with-next
    138          void Int_Handler_TX_USART1( void ){   
   \                     Int_Handler_TX_USART1:
    139          
    140              UCSR1B &= ~(__BIT_MASK( TXCIE1)) ;            // transmission end, disable int.
   \   00000000   910000C9           LDS     R16, 201
   \   00000004   7B0F               ANDI    R16, 0xBF
   \   00000006   930000C9           STS     201, R16
    141              PORTE &= ~0x08 ;                              // TXE1 off
   \   0000000A   9873               CBI     0x0E, 0x03
    142              OS_StopTimer(&TimerUSART1);                    // and stop timer
   \   0000000C   ....               LDI     R16, LOW(TimerUSART1)
   \   0000000E   ....               LDI     R17, (TimerUSART1) >> 8
   \   00000010   ........           CALL    OS_StopTimer
    143              GoToSyncUART(1) ;                                    // go to sync modus for recive
   \   00000014   E001               LDI     R16, 1
   \   00000016   ........           CALL    GoToSyncUART
    144          }
   \   0000001A   9508               RET
   \   0000001C                      REQUIRE _A_UCSR1B
   \   0000001C                      REQUIRE _A_PORTE
    145          
    146          #pragma vector=USART1_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    147          __interrupt void IntHandler_TX_USART1( void ){   
   \                     IntHandler_TX_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    148              OS_CallISR(Int_Handler_TX_USART1);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_TX_USART1/2)
   \   00000026   ....               LDI     R17, (Int_Handler_TX_USART1/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
    149          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
    150          

   \                                 In  segment CODE, align 2, keep-with-next
    151          void Int_Handler_UDRE_USART1( void ){   
   \                     Int_Handler_UDRE_USART1:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
    152          
    153               if ( UART[1].TxCount-- > 0 ) {
   \   00000002   ....               LDI     R30, LOW(UART)
   \   00000004   ....               LDI     R31, (UART) >> 8
   \   00000006   A120               LDD     R18, Z+32
   \   00000008   A131               LDD     R19, Z+33
   \   0000000A   0189               MOVW    R17:R16, R19:R18
   \   0000000C   5001               SUBI    R16, 1
   \   0000000E   4010               SBCI    R17, 0
   \   00000010   ....               LDI     R30, LOW(UART)
   \   00000012   ....               LDI     R31, (UART) >> 8
   \   00000014   A300               STD     Z+32, R16
   \   00000016   A311               STD     Z+33, R17
   \   00000018   2B23               OR      R18, R19
   \   0000001A   F0B1               BREQ    ??Int_Handler_UDRE_USART1_0
    154                  UDR1 = UART[1].pTxBuffer[ UART[1].TxLast ];  // Send a character
   \   0000001C   ....               LDI     R30, LOW(UART)
   \   0000001E   ....               LDI     R31, (UART) >> 8
   \   00000020   8DA2               LDD     R26, Z+26
   \   00000022   8DB3               LDD     R27, Z+27
   \   00000024   ....               LDI     R30, LOW(UART)
   \   00000026   ....               LDI     R31, (UART) >> 8
   \   00000028   8D06               LDD     R16, Z+30
   \   0000002A   8D17               LDD     R17, Z+31
   \   0000002C   0FA0               ADD     R26, R16
   \   0000002E   1FB1               ADC     R27, R17
   \   00000030   910C               LD      R16, X
   \   00000032   930000CE           STS     206, R16
    155                  UART[1].TxLast++;
   \   00000036   ....               LDI     R30, LOW(UART)
   \   00000038   ....               LDI     R31, (UART) >> 8
   \   0000003A   8D06               LDD     R16, Z+30
   \   0000003C   8D17               LDD     R17, Z+31
   \   0000003E   5F0F               SUBI    R16, 255
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   8F06               STD     Z+30, R16
   \   00000044   8F17               STD     Z+31, R17
   \   00000046   C00F               RJMP    ??Int_Handler_UDRE_USART1_1
    156               } else {
    157                  UCSR1B &= ~(__BIT_MASK( UDRIE1)) ;            // transmission end, disable int.
   \                     ??Int_Handler_UDRE_USART1_0:
   \   00000048   910000C9           LDS     R16, 201
   \   0000004C   7D0F               ANDI    R16, 0xDF
   \   0000004E   930000C9           STS     201, R16
    158                  UCSR1A |= (__BIT_MASK( TXC1)) ;               // Clear int bit in TXC.
   \   00000052   910000C8           LDS     R16, 200
   \   00000056   6400               ORI     R16, 0x40
   \   00000058   930000C8           STS     200, R16
    159                  UCSR1B |= __BIT_MASK( TXCIE1) ;               // Enable TXC int.
   \   0000005C   910000C9           LDS     R16, 201
   \   00000060   6400               ORI     R16, 0x40
   \   00000062   930000C9           STS     201, R16
    160               }
    161          } 
   \                     ??Int_Handler_UDRE_USART1_1:
   \   00000066   01DA               MOVW    R27:R26, R21:R20
   \   00000068   9508               RET
   \   0000006A                      REQUIRE _A_UDR1
   \   0000006A                      REQUIRE _A_UCSR1B
   \   0000006A                      REQUIRE _A_UCSR1A
    162          
    163          #pragma vector=USART1_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    164          __interrupt void IntHandler_UDRE_USART1( void ){   
   \                     IntHandler_UDRE_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    165              OS_CallISR(Int_Handler_UDRE_USART1);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_UDRE_USART1/2)
   \   00000026   ....               LDI     R17, (Int_Handler_UDRE_USART1/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
    166          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI

   \                                 In  segment INTVEC, offset 0x64, root
   \                     `??IntHandler_RX_USART0::??INTVEC 100`:
   \   00000064   ........           JMP     IntHandler_RX_USART0

   \                                 In  segment INTVEC, offset 0x68, root
   \                     `??IntHandler_UDRE_USART0::??INTVEC 104`:
   \   00000068   ........           JMP     IntHandler_UDRE_USART0

   \                                 In  segment INTVEC, offset 0x6c, root
   \                     `??IntHandler_TX_USART0::??INTVEC 108`:
   \   0000006C   ........           JMP     IntHandler_TX_USART0

   \                                 In  segment INTVEC, offset 0x90, root
   \                     `??IntHandler_RX_USART1::??INTVEC 144`:
   \   00000090   ........           JMP     IntHandler_RX_USART1

   \                                 In  segment INTVEC, offset 0x94, root
   \                     `??IntHandler_UDRE_USART1::??INTVEC 148`:
   \   00000094   ........           JMP     IntHandler_UDRE_USART1

   \                                 In  segment INTVEC, offset 0x98, root
   \                     `??IntHandler_TX_USART1::??INTVEC 152`:
   \   00000098   ........           JMP     IntHandler_TX_USART1
    167          #endif /* USE_MODBUS_PROTOCOL == 0 */

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     16      2   IntHandler_RX_USART0
       16      2   -> OS_CallISR_Debug
     16      2   IntHandler_RX_USART1
       16      2   -> OS_CallISR_Debug
     16      2   IntHandler_TX_USART0
       16      2   -> OS_CallISR_Debug
     16      2   IntHandler_TX_USART1
       16      2   -> OS_CallISR_Debug
     16      2   IntHandler_UDRE_USART0
       16      2   -> OS_CallISR_Debug
     16      2   IntHandler_UDRE_USART1
       16      2   -> OS_CallISR_Debug
      2      2   Int_Handler_RX_USART0
        2      2   -> GoToSyncUART
        2      2   -> ReceivePacketUart
      2      2   Int_Handler_RX_USART1
        2      2   -> GoToSyncUART
        2      2   -> ReceivePacketUart
      0      2   Int_Handler_TX_USART0
        0      2   -> GoToSyncUART
        0      2   -> OS_StopTimer
      0      2   Int_Handler_TX_USART1
        0      2   -> GoToSyncUART
        0      2   -> OS_StopTimer
      0      2   Int_Handler_UDRE_USART0
      0      2   Int_Handler_UDRE_USART1


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      82  IntHandler_RX_USART0
       4  IntHandler_RX_USART0::??INTVEC 100
      82  IntHandler_RX_USART1
       4  IntHandler_RX_USART1::??INTVEC 144
      82  IntHandler_TX_USART0
       4  IntHandler_TX_USART0::??INTVEC 108
      82  IntHandler_TX_USART1
       4  IntHandler_TX_USART1::??INTVEC 152
      82  IntHandler_UDRE_USART0
       4  IntHandler_UDRE_USART0::??INTVEC 104
      82  IntHandler_UDRE_USART1
       4  IntHandler_UDRE_USART1::??INTVEC 148
     250  Int_Handler_RX_USART0
     250  Int_Handler_RX_USART1
      28  Int_Handler_TX_USART0
      28  Int_Handler_TX_USART1
     106  Int_Handler_UDRE_USART0
     106  Int_Handler_UDRE_USART1
       1  _A_PORTE
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UDR0
       1  _A_UDR1

 
     7 bytes in segment ABSOLUTE
 1'260 bytes in segment CODE
    24 bytes in segment INTVEC
 
 1'260 bytes of CODE memory (+ 24 bytes shared)
     0 bytes of DATA memory (+  7 bytes shared)

Errors: none
Warnings: none
