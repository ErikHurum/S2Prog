###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       26/Feb/2024  10:49:10
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\Misc.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWD382.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\Misc.c"
#        --cpu=m1281 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\Obj" -D
#        OS_LIBMODE_D -D OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D
#        USE_1281_RX_INT_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=0 -D
#        __ATMEGA_1281__ -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\List" -y
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\List\Misc.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Misc.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\Misc.c
      1          /****************************************************************************************
      2          /  Misc. routines
      3          /
      4          ***************************************************************************************/
      5          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUSR
   \                     _A_MCUSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          

   \                                 In  segment CODE, align 2, keep-with-next
     14          void WDT_off(void)
   \                     WDT_off:
     15          {
     16              __disable_interrupt();
   \   00000000   94F8               CLI
     17              __watchdog_reset();
   \   00000002   95A8               WDR
     18              /* Clear WDRF in MCUSR */
     19              MCUSR &= ~(1<<WDRF);
   \   00000004   B704               IN      R16, 0x34
   \   00000006   7F07               ANDI    R16, 0xF7
   \   00000008   BF04               OUT     0x34, R16
     20              /* Write logical one to WDCE and WDE */
     21              /* Keep old prescaler setting to prevent unintentional time-out
     22              */
     23              WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
   \   0000000A   E00F               LDI     R16, 15
   \   0000000C   9300....           STS     _A_WDTCSR, R16
     24              /* Turn off WDT */
     25              WDTCSR = 0x00;
   \   00000010   E000               LDI     R16, 0
   \   00000012   9300....           STS     _A_WDTCSR, R16
     26              __enable_interrupt();
   \   00000016   9478               SEI
     27          }
   \   00000018   9508               RET
   \   0000001A                      REQUIRE _A_MCUSR
   \   0000001A                      REQUIRE _A_WDTCSR
     28          

   \                                 In  segment CODE, align 2, keep-with-next
     29          void WDT_Prescaler_Change(void)
   \                     WDT_Prescaler_Change:
     30          {
     31              __disable_interrupt();
   \   00000000   94F8               CLI
     32              __watchdog_reset();
   \   00000002   95A8               WDR
     33              /* Start timed equence */
     34              WDTCSR |= (1<<WDCE) | (1<<WDE);
   \   00000004   9100....           LDS     R16, _A_WDTCSR
   \   00000008   6108               ORI     R16, 0x18
   \   0000000A   9300....           STS     _A_WDTCSR, R16
     35              /* Set new prescaler(time-out) value = 64K cycles (~0.5 s) */
     36              //WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
     37              /* Set new prescaler(time-out) value = 256K cycles (~2.0 s) */
     38              WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
   \   0000000E   E00F               LDI     R16, 15
   \   00000010   9300....           STS     _A_WDTCSR, R16
     39          
     40          
     41          __enable_interrupt();
   \   00000014   9478               SEI
     42          }
   \   00000016   9508               RET
   \   00000018                      REQUIRE _A_WDTCSR
     43          
     44          
     45          /*************************************************************************
     46          *   (This is a task)
     47          *  Watchdog handler
     48          *
     49          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     50          void WatchDogHandler(void) {
   \                     WatchDogHandler:
     51          
     52              //OS_Delay(100);                         // wait 1 seconds for other tasks to start and set TaskStatus
     53              //__watchdog_reset();               //kick the dog
     54              //WDTCSR = 0x1f;
     55              //WDTCSR = 0x0f;
     56              __watchdog_reset();               //kick the dog
   \   00000000   95A8               WDR
     57              WDT_Prescaler_Change();
   \   00000002   ....               RCALL   WDT_Prescaler_Change
     58              while (1) {
     59                  OS_Delay(500);
   \                     ??WatchDogHandler_0:
   \   00000004   EF04               LDI     R16, 244
   \   00000006   E011               LDI     R17, 1
   \   00000008   ........           CALL    OS_Delay
     60                  __watchdog_reset();               //kick the dog
   \   0000000C   95A8               WDR
   \   0000000E   CFFA               RJMP    ??WatchDogHandler_0
     61              }
     62          }
     63          
     64          
     65          /*************************************************************************
     66          *
     67          *  Get my address
     68          *
     69          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     70          char MyAddress(void) {
   \                     MyAddress:
     71          
     72          #if (OS_UART == 0)
     73              return 0;                   // Debug only
     74          #else
     75              return(~(PIND>>4) & 0x0f) ;
   \   00000000   B109               IN      R16, 0x09
   \   00000002   9502               SWAP    R16
   \   00000004   700F               ANDI    R16, 0x0F
   \   00000006   9500               COM     R16
   \   00000008   700F               ANDI    R16, 0x0F
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_PIND
     76          #endif
     77          }
     78          
     79          /*************************************************************************
     80          *
     81          *  Check for legal float
     82          *
     83          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     84          char IsFloat(float A){
   \                     IsFloat:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01A8               MOVW    R21:R20, R17:R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
     85            long exp;
     86          	// A NAN has an exponent of 255 (shifted left 23 positions) and
     87          	// Denormalized has an exponent set to 0
     88          	exp = *(long*)&A & 0x7F800000L;
   \   00000008   018A               MOVW    R17:R16, R21:R20
   \   0000000A   019B               MOVW    R19:R18, R23:R22
   \   0000000C   7000               ANDI    R16, 0x00
   \   0000000E   7010               ANDI    R17, 0x00
   \   00000010   7820               ANDI    R18, 0x80
   \   00000012   773F               ANDI    R19, 0x7F
   \   00000014   01C8               MOVW    R25:R24, R17:R16
   \   00000016   01D9               MOVW    R27:R26, R19:R18
     89          	//int mantissa = *(int*)&A & 0x007FFFFF;
     90          	if ( exp && (exp != 0x7F800000L)  ) {
   \   00000018   2F08               MOV     R16, R24
   \   0000001A   2B09               OR      R16, R25
   \   0000001C   2B0A               OR      R16, R26
   \   0000001E   2B0B               OR      R16, R27
   \   00000020   F051               BREQ    ??IsFloat_0
   \   00000022   3080               CPI     R24, 0
   \   00000024   E000               LDI     R16, 0
   \   00000026   0790               CPC     R25, R16
   \   00000028   E800               LDI     R16, 128
   \   0000002A   07A0               CPC     R26, R16
   \   0000002C   E70F               LDI     R16, 127
   \   0000002E   07B0               CPC     R27, R16
   \   00000030   F011               BREQ    ??IsFloat_0
     91          		return(true);
   \   00000032   E001               LDI     R16, 1
   \   00000034   C001               RJMP    ??IsFloat_1
     92            }
     93          	return(false);
   \                     ??IsFloat_0:
   \   00000036   E000               LDI     R16, 0
   \                     ??IsFloat_1:
   \   00000038   E0E4               LDI     R30, 4
   \   0000003A   ........           JMP     ?EPILOGUE_B4_L09
     94          }

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   IsFloat
      0      2   MyAddress
      0      2   WDT_Prescaler_Change
      0      2   WDT_off
      0      2   WatchDogHandler
        0      2   -> OS_Delay
        0      2   -> WDT_Prescaler_Change


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      62  IsFloat
      12  MyAddress
      24  WDT_Prescaler_Change
      26  WDT_off
      16  WatchDogHandler
       1  _A_MCUSR
       1  _A_PIND
       1  _A_WDTCSR

 
   3 bytes in segment ABSOLUTE
 140 bytes in segment CODE
 
 140 bytes of CODE memory
   0 bytes of DATA memory (+ 3 bytes shared)

Errors: none
Warnings: none
