###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       05/Jan/2024  14:33:20
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\init.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW57B.tmp ("C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\init.c"
#        --cpu=m1281 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\Obj" -D
#        OS_LIBMODE_D -D OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D
#        USE_1281_RX_INT_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=0 -D
#        __ATMEGA_1281__ -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\List" -y
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\List\init.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\init.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #ifdef __ATMEGA_1280__
      6          #include	"iom1280.h"
      7          #endif
      8          
      9          #ifdef __ATMEGA_1281__
     10          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xcc
   \   union <unnamed> volatile __io _A_UBRR1
   \                     _A_UBRR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xca
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc4
   \   union <unnamed> volatile __io _A_UBRR0
   \                     _A_UBRR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xc2
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb3
   \   union <unnamed> volatile __io _A_OCR2A
   \                     _A_OCR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb1
   \   union <unnamed> volatile __io _A_TCCR2B
   \                     _A_TCCR2B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb0
   \   union <unnamed> volatile __io _A_TCCR2A
   \                     _A_TCCR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7c
   \   union <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a
   \   union <unnamed> volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x75
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x74
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x69
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUSR
   \                     _A_MCUSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4d
   \   union <unnamed> volatile __io _A_SPSR
   \                     _A_SPSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4c
   \   union <unnamed> volatile __io _A_SPCR
   \                     _A_SPCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x33
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2d
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x25
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x24
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x21
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1
     11          #endif
     12          #include "stdio.h"
     13          #include "math.h"
     14          #include "externals.h"
     15          #include "version.h"
     16          #include "inavr.h"
     17          #include "string.h"
     18          
     19          /*
     20          **===========================================================================
     21          ** Init the system according to board type
     22          **===========================================================================
     23          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     24          void InitSystem(void) {
   \                     InitSystem:
     25          #if ANZBANA_V8 == 1
     26              DDRA    =  0x00 ;      // Port B data direction, bit 0, 4-7 out
     27              PORTA   =  0x3;
     28              UnitID  = PINA & 0x03;       //get the unit ID
     29          #else
     30              DDRB    =  0x00 ;      // Port B data direction, bit 0, 4-7 out
   \   00000000   E000               LDI     R16, 0
   \   00000002   B904               OUT     0x04, R16
     31          //    PORTB   =  0xc;
     32              UnitID  = (PINB >> 2)& 0x03;       //get the unit ID
   \   00000004   B103               IN      R16, 0x03
   \   00000006   9506               LSR     R16
   \   00000008   9506               LSR     R16
   \   0000000A   7003               ANDI    R16, 0x03
   \   0000000C   9300....           STS     UnitID, R16
     33          #endif
     34          #if (OS_UART == 0)
     35              UnitID = 0x00; //AStmark  for test
     36          #endif
     37          
     38              Init_CPU();                         // init all processes
   \   00000010   ....               RCALL   Init_CPU
     39              Init_IO();
   \   00000012   ....               RCALL   Init_IO
     40              Init_TMR() ;
   \   00000014   ....               RCALL   Init_TMR
     41              Init_AD();
   \   00000016   ....               RCALL   Init_AD
     42              Init_Values();                      // init the values in the system
   \   00000018   ....               RCALL   Init_Values
     43          
     44              // 128 -> 1281
     45              // ADCSR |= 0x40 ;                     //start the AD convertion
     46              ADCSRA |= 0x40 ;
   \   0000001A   9100007A           LDS     R16, 122
   \   0000001E   6400               ORI     R16, 0x40
   \   00000020   9300007A           STS     122, R16
     47          }
   \   00000024   9508               RET
   \   00000026                      REQUIRE _A_DDRB
   \   00000026                      REQUIRE _A_PINB
   \   00000026                      REQUIRE _A_ADCSRA
     48          
     49          /*
     50          **===========================================================================
     51          ** Init the CPU related registers
     52          **===========================================================================
     53          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     54          void Init_CPU( void ) {
   \                     Init_CPU:
     55          
     56              __disable_interrupt();
   \   00000000   94F8               CLI
     57          
     58              /*--- Configure CPU and interrupts ---*/
     59              switch (UnitID) {
   \   00000002   9100....           LDS     R16, UnitID
   \   00000006   5000               SUBI    R16, 0
   \   00000008   F019               BREQ    ??Init_CPU_0
   \   0000000A   950A               DEC     R16
   \   0000000C   F089               BREQ    ??Init_CPU_1
   \   0000000E   C01F               RJMP    ??Init_CPU_2
     60              case AN_ZB485:                  // AN-ZB485 
     61                  MCUCR = 0xc0 ;        // MCU control register  External Ram + wait state
   \                     ??Init_CPU_0:
   \   00000010   EC00               LDI     R16, 192
   \   00000012   BF05               OUT     0x35, R16
     62                  EIMSK = 0x00 ;        // External interrupt mask register, all off
   \   00000014   E000               LDI     R16, 0
   \   00000016   BB0D               OUT     0x1D, R16
     63                  EICRA = 0xAf ;        // External interrupt control register, 0,1 raising, rest faling
   \   00000018   EA0F               LDI     R16, 175
   \   0000001A   9300....           STS     _A_EICRA, R16
     64                  EICRB = 0xAA ;        // External interrupt control register 
   \   0000001E   EA0A               LDI     R16, 170
   \   00000020   9300....           STS     _A_EICRB, R16
     65                  EIMSK = 0x03 ;        // External interrupt mask register, int 0 and 1 on 
   \   00000024   E003               LDI     R16, 3
   \   00000026   BB0D               OUT     0x1D, R16
     66                  XMCRA = 0x80;         // maximum wait states
   \   00000028   E800               LDI     R16, 128
   \   0000002A   9300....           STS     _A_XMCRA, R16
     67                  break;
   \   0000002E   C00F               RJMP    ??Init_CPU_2
     68              case AN_ZBANA:                  // AN-ZBANA
     69                  MCUCR = 0x00 ;        // MCU control register wait state
   \                     ??Init_CPU_1:
   \   00000030   E000               LDI     R16, 0
   \   00000032   BF05               OUT     0x35, R16
     70                  EIMSK = 0x00 ;        // External interrupt mask register , all off
   \   00000034   E000               LDI     R16, 0
   \   00000036   BB0D               OUT     0x1D, R16
     71                  EICRA = 0xAA ;        // External interrupt control register, o on faling edge
   \   00000038   EA0A               LDI     R16, 170
   \   0000003A   9300....           STS     _A_EICRA, R16
     72                  EICRB = 0xAA ;        // External interrupt control register 
   \   0000003E   EA0A               LDI     R16, 170
   \   00000040   9300....           STS     _A_EICRB, R16
     73                  EIMSK = 0x01 ;        // External interrupt mask register, int 0 on
   \   00000044   E001               LDI     R16, 1
   \   00000046   BB0D               OUT     0x1D, R16
     74                  XMCRA = 0x00 ;        // maximum wait states
   \   00000048   E000               LDI     R16, 0
   \   0000004A   9300....           STS     _A_XMCRA, R16
     75                  break;
     76              }
     77              // XMCRA = 0x00; // maximum wait states
     78              XMCRB = 0x07 ;       // Full portC + bus keeper
   \                     ??Init_CPU_2:
   \   0000004E   E007               LDI     R16, 7
   \   00000050   9300....           STS     _A_XMCRB, R16
     79              //
     80              // hkim
     81              // are you fucking out of mind?
     82              // why do you enable global interrupt here?
     83              //
     84              // SREG = 0x80;  // global interrupt
     85          
     86              //
     87              // 128 -> 1281
     88              // No XDIV in 1281. CLKPR instead.
     89              // Anyway No need to do this.
     90              //XDIV  = 0x00 ;     // Init valuse used 0x00
     91          
     92              // 128 -> 1281
     93              // register name change
     94              // RestartStatus = MCUCSR;       // Remember reset source
     95              RestartStatus = MCUSR;
   \   00000054   B704               IN      R16, 0x34
   \   00000056   9300....           STS     RestartStatus, R16
     96              MCUSR = 0x00; // and reset
   \   0000005A   E000               LDI     R16, 0
   \   0000005C   BF04               OUT     0x34, R16
     97              /*--- Initialize buffer ---*/
     98              WriteCount = 0;
   \   0000005E   E000               LDI     R16, 0
   \   00000060   9300....           STS     WriteCount, R16
     99          
    100          }
   \   00000064   9508               RET
   \   00000066                      REQUIRE _A_MCUCR
   \   00000066                      REQUIRE _A_EIMSK
   \   00000066                      REQUIRE _A_EICRA
   \   00000066                      REQUIRE _A_EICRB
   \   00000066                      REQUIRE _A_XMCRA
   \   00000066                      REQUIRE _A_XMCRB
   \   00000066                      REQUIRE _A_MCUSR
    101          
    102          /*
    103          **===========================================================================
    104          ** Init the watchdog registers
    105          **===========================================================================
    106          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    107          __monitor void Init_Watchdog( void ) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
    108          
    109              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
    110              // 128 -> 1281
    111              // WDTCR = 0x0f;
    112              WDTCSR = 0x0f;
   \   00000006   E00F               LDI     R16, 15
   \   00000008   9300....           STS     _A_WDTCSR, R16
    113              asm("WDR");                             // kick the dog!!
   \   0000000C   95A8               WDR
    114          
    115          }
   \   0000000E   BF1F               OUT     0x3F, R17
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_WDTCSR
    116          
    117          /*
    118          **===========================================================================
    119          ** Init the IO related registers
    120          **===========================================================================
    121          */ 
    122          
    123          

   \                                 In  segment CODE, align 2, keep-with-next
    124          void SPI_Init()					/* SPI Initialize function */
   \                     SPI_Init:
    125          {
    126          
    127              // SPI initialization
    128              // SPI Type: Master
    129              // SPI Clock Rate: 125,000 kHz
    130              // SPI Clock Phase: Cycle Half
    131              // SPI Clock Polarity: High
    132              // SPI Data Order: MSB First
    133              //SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	/* Enable SPI in master mode with Fosc/16 */
    134              SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA) | (1<<SPR1) | (1<<SPR0);
   \   00000000   E50F               LDI     R16, 95
   \   00000002   BD0C               OUT     0x2C, R16
    135              //SPSR=(0<<SPI2X);
    136              SPSR &= ~(1<<SPI2X);			/* Disable speed doubler */
   \   00000004   B50D               IN      R16, 0x2D
   \   00000006   7F0E               ANDI    R16, 0xFE
   \   00000008   BD0D               OUT     0x2D, R16
    137          }
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_SPCR
   \   0000000C                      REQUIRE _A_SPSR
    138          

   \                                 In  segment CODE, align 2, keep-with-next
    139          void Init_IO( void ) {
   \                     Init_IO:
    140          
    141              /*--- Initialize the data registers, output value and input pullup ---*/
    142              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   5000               SUBI    R16, 0
   \   00000006   F019               BREQ    ??Init_IO_0
   \   00000008   950A               DEC     R16
   \   0000000A   F0F1               BREQ    ??Init_IO_1
   \   0000000C   9508               RET
    143              case AN_ZB485:                  // AN-ZB485  
    144                  DDRA   =  0xff ;      // Port A data direction (out), external bus
   \                     ??Init_IO_0:
   \   0000000E   EF0F               LDI     R16, 255
   \   00000010   B901               OUT     0x01, R16
    145                  PORTA  =  0x00 ;      // Port A data
   \   00000012   E000               LDI     R16, 0
   \   00000014   B902               OUT     0x02, R16
    146                  DDRB   =  0x10 ;      // Port B data direction, bit 0, 4-7 out
   \   00000016   E100               LDI     R16, 16
   \   00000018   B904               OUT     0x04, R16
    147                  PORTB  =  0x00 ;      // Port B data   
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   B905               OUT     0x05, R16
    148                  DDRC   =  0xff ;      // Port C data direction, all out
   \   0000001E   EF0F               LDI     R16, 255
   \   00000020   B907               OUT     0x07, R16
    149                  PORTC  =  0x00 ;      // Port C data
   \   00000022   E000               LDI     R16, 0
   \   00000024   B908               OUT     0x08, R16
    150                  DDRD   =  0x00 ;      // Port D data direction, all in except output to osc and txd
   \   00000026   E000               LDI     R16, 0
   \   00000028   B90A               OUT     0x0A, R16
    151                  PORTD  =  0xff ;      // Port D data pullup on int fro AD
   \   0000002A   EF0F               LDI     R16, 255
   \   0000002C   B90B               OUT     0x0B, R16
    152                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   0000002E   EF0E               LDI     R16, 254
   \   00000030   B90D               OUT     0x0D, R16
    153                  PORTE  =  0xf0 ;      // Port E data 
   \   00000032   EF00               LDI     R16, 240
   \   00000034   B90E               OUT     0x0E, R16
    154                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000036   E000               LDI     R16, 0
   \   00000038   BB00               OUT     0x10, R16
    155                  PORTF  =  0x00 ;      // Port F data 
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   BB01               OUT     0x11, R16
    156                  DDRG   =  0x07 ;      // Port G data direction, port 1,2,3 out
   \   0000003E   E007               LDI     R16, 7
   \   00000040   BB03               OUT     0x13, R16
    157                  PORTG  =  0x03 ;      // Port G data 
   \   00000042   E003               LDI     R16, 3
   \   00000044   BB04               OUT     0x14, R16
    158                  break;
   \   00000046   9508               RET
    159              case AN_ZBANA:                  // AN-ZBANA
    160          #if ANZBANA_V8 == 1
    161                  DDRA   =  0x00 ;      // Port A data direction in ID0, ID1
    162                  PORTA  =  0x03 ;      // Port A data
    163                  DDRB   =  0xF7 ;      // Port B data direction, bit 2 in, bit 0-1 and 3-7 out
    164                  PORTB  =  0x08 ;      // Port B data  Pin 3 pull-up 
    165                  DDRC   =  0xFF ;      // Port C data direction, all out
    166                  PORTC  =  0x00 ;      // Port C data
    167                  DDRD   =  0x02 ;      // Port D data direction, all in except output to ADC CLC
    168                  PORTD  =  0xf1 ;      // Port D data pullup on int fro AD and ADC CLC
    169                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
    170                  PORTE  =  0x00 ;      // Port E data 
    171                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
    172                  PORTF  =  0x00 ;      // Port F data 
    173                  DDRG   =  0x08 ;      // Port G data direction, bit 3 out
    174                  PORTG  =  0x30 ;      // Port G data pullup PG4, PG5 
    175                  SPI_Init();
    176          #else
    177                  DDRA   =  0x00 ;      // Port A data direction in (not used)
   \                     ??Init_IO_1:
   \   00000048   E000               LDI     R16, 0
   \   0000004A   B901               OUT     0x01, R16
    178                  PORTA  =  0x00 ;      // Port A data
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   B902               OUT     0x02, R16
    179                  DDRB   =  0xF1 ;      // Port B data direction, bit 0, 4-7 out
   \   00000050   EF01               LDI     R16, 241
   \   00000052   B904               OUT     0x04, R16
    180                  PORTB  =  0x00 ;      // Port B data   
   \   00000054   E000               LDI     R16, 0
   \   00000056   B905               OUT     0x05, R16
    181                  DDRC   =  0xFF ;      // Port C data direction, all out
   \   00000058   EF0F               LDI     R16, 255
   \   0000005A   B907               OUT     0x07, R16
    182                  PORTC  =  0x00 ;      // Port C data
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   B908               OUT     0x08, R16
    183                  DDRD   =  0x02 ;      // Port D data direction, all in except output to osc and txd
   \   00000060   E002               LDI     R16, 2
   \   00000062   B90A               OUT     0x0A, R16
    184                  PORTD  =  0xf1 ;      // Port D data pullup on int fro AD
   \   00000064   EF01               LDI     R16, 241
   \   00000066   B90B               OUT     0x0B, R16
    185                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   00000068   EF0E               LDI     R16, 254
   \   0000006A   B90D               OUT     0x0D, R16
    186                  PORTE  =  0x00 ;      // Port E data 
   \   0000006C   E000               LDI     R16, 0
   \   0000006E   B90E               OUT     0x0E, R16
    187                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000070   E000               LDI     R16, 0
   \   00000072   BB00               OUT     0x10, R16
    188                  PORTF  =  0x00 ;      // Port F data 
   \   00000074   E000               LDI     R16, 0
   \   00000076   BB01               OUT     0x11, R16
    189                  DDRG   =  0x10 ;      // Port G data direction, bit 5 out
   \   00000078   E100               LDI     R16, 16
   \   0000007A   BB03               OUT     0x13, R16
    190                  PORTG  =  0x00 ;      // Port G data 
   \   0000007C   E000               LDI     R16, 0
   \   0000007E   BB04               OUT     0x14, R16
    191          #endif
    192                  break;
    193              default:
    194                  break;
    195              }    
    196          }
   \   00000080   9508               RET
   \   00000082                      REQUIRE _A_DDRA
   \   00000082                      REQUIRE _A_PORTA
   \   00000082                      REQUIRE _A_DDRB
   \   00000082                      REQUIRE _A_PORTB
   \   00000082                      REQUIRE _A_DDRC
   \   00000082                      REQUIRE _A_PORTC
   \   00000082                      REQUIRE _A_DDRD
   \   00000082                      REQUIRE _A_PORTD
   \   00000082                      REQUIRE _A_DDRE
   \   00000082                      REQUIRE _A_PORTE
   \   00000082                      REQUIRE _A_DDRF
   \   00000082                      REQUIRE _A_PORTF
   \   00000082                      REQUIRE _A_DDRG
   \   00000082                      REQUIRE _A_PORTG
    197          
    198          /*
    199          **===========================================================================
    200          ** Init the timer related registers
    201          **===========================================================================
    202          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    203          void Init_TMR( void ) {
   \                     Init_TMR:
    204              /*--- Timer control (disable clock inputs) ---*/
    205          
    206              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   5000               SUBI    R16, 0
   \   00000006   F019               BREQ    ??Init_TMR_0
   \   00000008   950A               DEC     R16
   \   0000000A   F059               BREQ    ??Init_TMR_1
   \   0000000C   9508               RET
    207              case AN_ZB485:                  // AN-ZB485
    208                  // 128 -> 1281
    209                  // TIM0 and TIM2 are swapped in 1281.
    210                  // Registers are completely changed.
    211                  // TCCR0   =  0x99 ;      // Timer control register 0
    212                  // OCR0    =  3;         // Timer output compare register 0, 2MHZ //16MHz xtal
    213                  //
    214                  // TCCR2A : 0 1 0 0 - - 1 0
    215                  // TCCR2B : 1 0 - - 0 0 0 1
    216                  //
    217                  // COM2A1 COM2A0 : 0 1
    218                  // COM2B1 COM2B0 : 0 0
    219                  // WGM21 WGM20   : 1 0
    220                  // FOC2A : 1, FOR2B : 0, WGM22 : 0, CS2/1/0 : 0 0 1
    221                  //
    222                  // COM2A : Toggle
    223                  // WGM : CTC
    224                  // Clock Scale: 1
    225          
    226                  TCCR2A = 0x42;
   \                     ??Init_TMR_0:
   \   0000000E   E402               LDI     R16, 66
   \   00000010   9300....           STS     _A_TCCR2A, R16
    227                  TCCR2B = 0x81;
   \   00000014   E801               LDI     R16, 129
   \   00000016   9300....           STS     _A_TCCR2B, R16
    228                  OCR2A = 3;
   \   0000001A   E003               LDI     R16, 3
   \   0000001C   9300....           STS     _A_OCR2A, R16
    229                  break;
   \   00000020   9508               RET
    230              case AN_ZBANA:                  // AN-ZBANA
    231                  // 128 -> 1281
    232                  // TCCR0   =  0x99 ;      // Timer control register 0
    233                  // OCR0    =  7 ;         // Timer output compare register 0, 1MHZ //16MHz xtal
    234                  TCCR2A = 0x42;
   \                     ??Init_TMR_1:
   \   00000022   E402               LDI     R16, 66
   \   00000024   9300....           STS     _A_TCCR2A, R16
    235                  TCCR2B = 0x81;
   \   00000028   E801               LDI     R16, 129
   \   0000002A   9300....           STS     _A_TCCR2B, R16
    236                  OCR2A = 7;
   \   0000002E   E007               LDI     R16, 7
   \   00000030   9300....           STS     _A_OCR2A, R16
    237                  break;
    238              default:
    239                  break;
    240              }
    241          
    242          } 
   \   00000034   9508               RET
   \   00000036                      REQUIRE _A_TCCR2A
   \   00000036                      REQUIRE _A_TCCR2B
   \   00000036                      REQUIRE _A_OCR2A
    243          
    244          /*
    245          **===========================================================================
    246          ** Init the USARTs registers
    247          **===========================================================================
    248          */ 
    249          
    250          

   \                                 In  segment CODE, align 2, keep-with-next
    251          void Init_USART( char channel, unsigned long baud ) {
   \                     Init_USART:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01CA               MOVW    R25:R24, R21:R20
   \   00000008   01DB               MOVW    R27:R26, R23:R22
    252          
    253              OS_CREATEMB(&UART[channel].RxMailBox,1, sizeof(UART[channel].RxMailBoxBuf),&UART[channel].RxMailBoxBuf);
   \   0000000A   ....               LDI     R22, LOW((UART + 448))
   \   0000000C   ....               LDI     R23, HIGH((UART + 448))
   \   0000000E   2D04               MOV     R16, R4
   \   00000010   E010               LDI     R17, 0
   \   00000012   2F10               MOV     R17, R16
   \   00000014   E000               LDI     R16, 0
   \   00000016   0F11               LSL     R17
   \   00000018   0F60               ADD     R22, R16
   \   0000001A   1F71               ADC     R23, R17
   \   0000001C   E342               LDI     R20, 50
   \   0000001E   E050               LDI     R21, 0
   \   00000020   E021               LDI     R18, 1
   \   00000022   ....               LDI     R16, LOW((UART + 498))
   \   00000024   ....               LDI     R17, HIGH((UART + 498))
   \   00000026   2DE4               MOV     R30, R4
   \   00000028   E0F0               LDI     R31, 0
   \   0000002A   2FFE               MOV     R31, R30
   \   0000002C   E0E0               LDI     R30, 0
   \   0000002E   0FFF               LSL     R31
   \   00000030   0F0E               ADD     R16, R30
   \   00000032   1F1F               ADC     R17, R31
   \   00000034   ........           CALL    OS_CreateMB
    254              
    255              /*--- Configure UART data block ---*/
    256              UART[channel].TxFirst   = 0x00;
   \   00000038   2D04               MOV     R16, R4
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   2F10               MOV     R17, R16
   \   0000003E   E000               LDI     R16, 0
   \   00000040   0F11               LSL     R17
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000046   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000048   E000               LDI     R16, 0
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   8300               ST      Z, R16
   \   0000004E   8311               STD     Z+1, R17
    257              UART[channel].TxLast    = 0x00;
   \   00000050   2D04               MOV     R16, R4
   \   00000052   E010               LDI     R17, 0
   \   00000054   2F10               MOV     R17, R16
   \   00000056   E000               LDI     R16, 0
   \   00000058   0F11               LSL     R17
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   ....               SUBI    R30, LOW((-(UART + 277) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, HIGH((-(UART + 277) & 0xFFFF))
   \   00000060   E000               LDI     R16, 0
   \   00000062   E010               LDI     R17, 0
   \   00000064   8300               ST      Z, R16
   \   00000066   8311               STD     Z+1, R17
    258              UART[channel].TxCount   = 0x00;
   \   00000068   2D04               MOV     R16, R4
   \   0000006A   E010               LDI     R17, 0
   \   0000006C   2F10               MOV     R17, R16
   \   0000006E   E000               LDI     R16, 0
   \   00000070   0F11               LSL     R17
   \   00000072   01F8               MOVW    R31:R30, R17:R16
   \   00000074   ....               SUBI    R30, LOW((-(UART + 279) & 0xFFFF))
   \   00000076   ....               SBCI    R31, HIGH((-(UART + 279) & 0xFFFF))
   \   00000078   E000               LDI     R16, 0
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   8300               ST      Z, R16
   \   0000007E   8311               STD     Z+1, R17
    259              UART[channel].RxFirst   = 0x00;
   \   00000080   2D04               MOV     R16, R4
   \   00000082   E010               LDI     R17, 0
   \   00000084   2F10               MOV     R17, R16
   \   00000086   E000               LDI     R16, 0
   \   00000088   0F11               LSL     R17
   \   0000008A   01F8               MOVW    R31:R30, R17:R16
   \   0000008C   ....               SUBI    R30, LOW((-(UART + 433) & 0xFFFF))
   \   0000008E   ....               SBCI    R31, HIGH((-(UART + 433) & 0xFFFF))
   \   00000090   E000               LDI     R16, 0
   \   00000092   E010               LDI     R17, 0
   \   00000094   8300               ST      Z, R16
   \   00000096   8311               STD     Z+1, R17
    260              UART[channel].RxLast    = 0x00;
   \   00000098   2D04               MOV     R16, R4
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   2F10               MOV     R17, R16
   \   0000009E   E000               LDI     R16, 0
   \   000000A0   0F11               LSL     R17
   \   000000A2   01F8               MOVW    R31:R30, R17:R16
   \   000000A4   ....               SUBI    R30, LOW((-(UART + 435) & 0xFFFF))
   \   000000A6   ....               SBCI    R31, HIGH((-(UART + 435) & 0xFFFF))
   \   000000A8   E000               LDI     R16, 0
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   8300               ST      Z, R16
   \   000000AE   8311               STD     Z+1, R17
    261              UART[channel].RxCount   = 0x00;
   \   000000B0   2D04               MOV     R16, R4
   \   000000B2   E010               LDI     R17, 0
   \   000000B4   2F10               MOV     R17, R16
   \   000000B6   E000               LDI     R16, 0
   \   000000B8   0F11               LSL     R17
   \   000000BA   01F8               MOVW    R31:R30, R17:R16
   \   000000BC   ....               SUBI    R30, LOW((-(UART + 437) & 0xFFFF))
   \   000000BE   ....               SBCI    R31, HIGH((-(UART + 437) & 0xFFFF))
   \   000000C0   E000               LDI     R16, 0
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   8300               ST      Z, R16
   \   000000C6   8311               STD     Z+1, R17
    262              UART[channel].RxState   = SYNC;
   \   000000C8   2D04               MOV     R16, R4
   \   000000CA   E010               LDI     R17, 0
   \   000000CC   2F10               MOV     R17, R16
   \   000000CE   E000               LDI     R16, 0
   \   000000D0   0F11               LSL     R17
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(UART + 439) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, HIGH((-(UART + 439) & 0xFFFF))
   \   000000D8   E000               LDI     R16, 0
   \   000000DA   8300               ST      Z, R16
    263              UART[channel].SyncCnt   = 0 ;
   \   000000DC   2D04               MOV     R16, R4
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   2F10               MOV     R17, R16
   \   000000E2   E000               LDI     R16, 0
   \   000000E4   0F11               LSL     R17
   \   000000E6   01F8               MOVW    R31:R30, R17:R16
   \   000000E8   ....               SUBI    R30, LOW((-(UART + 440) & 0xFFFF))
   \   000000EA   ....               SBCI    R31, HIGH((-(UART + 440) & 0xFFFF))
   \   000000EC   E000               LDI     R16, 0
   \   000000EE   8300               ST      Z, R16
    264              UART[channel].TxStatus  = 0x00;
   \   000000F0   2D04               MOV     R16, R4
   \   000000F2   E010               LDI     R17, 0
   \   000000F4   2F10               MOV     R17, R16
   \   000000F6   E000               LDI     R16, 0
   \   000000F8   0F11               LSL     R17
   \   000000FA   01F8               MOVW    R31:R30, R17:R16
   \   000000FC   ....               SUBI    R30, LOW((-(UART + 281) & 0xFFFF))
   \   000000FE   ....               SBCI    R31, HIGH((-(UART + 281) & 0xFFFF))
   \   00000100   E000               LDI     R16, 0
   \   00000102   8300               ST      Z, R16
    265          
    266              switch (channel) {
   \   00000104   2D04               MOV     R16, R4
   \   00000106   5000               SUBI    R16, 0
   \   00000108   F019               BREQ    ??Init_USART_0
   \   0000010A   950A               DEC     R16
   \   0000010C   F179               BREQ    ??Init_USART_1
   \   0000010E   C05B               RJMP    ??Init_USART_2
    267              case 0x00 :          
    268                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_0:
   \   00000110   2D04               MOV     R16, R4
   \   00000112   E010               LDI     R17, 0
   \   00000114   2F10               MOV     R17, R16
   \   00000116   E000               LDI     R16, 0
   \   00000118   0F11               LSL     R17
   \   0000011A   01F8               MOVW    R31:R30, R17:R16
   \   0000011C   ....               SUBI    R30, LOW((-(UART + 441) & 0xFFFF))
   \   0000011E   ....               SBCI    R31, HIGH((-(UART + 441) & 0xFFFF))
   \   00000120   EF0A               LDI     R16, 250
   \   00000122   E010               LDI     R17, 0
   \   00000124   8300               ST      Z, R16
   \   00000126   8311               STD     Z+1, R17
    269                  UCSR0A  = 0x00; 
   \   00000128   E000               LDI     R16, 0
   \   0000012A   9300....           STS     _A_UCSR0A, R16
    270                  //UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
    271                  //UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
    272                  UBRR0   = (unsigned)(((float)XTAL_CPU / 16.0 / ((float)baud) )-0.5); 
   \   0000012E   018C               MOVW    R17:R16, R25:R24
   \   00000130   019D               MOVW    R19:R18, R27:R26
   \   00000132   ........           CALL    ?UL2F_L04
   \   00000136   01A8               MOVW    R21:R20, R17:R16
   \   00000138   01B9               MOVW    R23:R22, R19:R18
   \   0000013A   E000               LDI     R16, 0
   \   0000013C   E214               LDI     R17, 36
   \   0000013E   E724               LDI     R18, 116
   \   00000140   E439               LDI     R19, 73
   \   00000142   ........           CALL    ?F_DIV_L04
   \   00000146   E040               LDI     R20, 0
   \   00000148   E050               LDI     R21, 0
   \   0000014A   E060               LDI     R22, 0
   \   0000014C   EB7F               LDI     R23, 191
   \   0000014E   ........           CALL    ?F_ADD_L04
   \   00000152   ........           CALL    ?F2SL_L04
   \   00000156   9310....           STS     (_A_UBRR0 + 1), R17
   \   0000015A   9300....           STS     _A_UBRR0, R16
    273                  // why the fuck do you enalbe UDRE here you stupid fucktard!!! -hkim
    274                  // UCSR0B = 0xb8; /* tx/ rx enable, int udre/rxon */
    275                  UCSR0B  = 0x98;       /* tx/ rx enable, int udre/rxon */
   \   0000015E   E908               LDI     R16, 152
   \   00000160   9300....           STS     _A_UCSR0B, R16
    276                  UCSR0C  = 0x06;       /* n,8,1 */
   \   00000164   E006               LDI     R16, 6
   \   00000166   9300....           STS     _A_UCSR0C, R16
    277                  break;
   \   0000016A   C02D               RJMP    ??Init_USART_2
    278              case 0x01 :
    279                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_1:
   \   0000016C   2D04               MOV     R16, R4
   \   0000016E   E010               LDI     R17, 0
   \   00000170   2F10               MOV     R17, R16
   \   00000172   E000               LDI     R16, 0
   \   00000174   0F11               LSL     R17
   \   00000176   01F8               MOVW    R31:R30, R17:R16
   \   00000178   ....               SUBI    R30, LOW((-(UART + 441) & 0xFFFF))
   \   0000017A   ....               SBCI    R31, HIGH((-(UART + 441) & 0xFFFF))
   \   0000017C   EF0A               LDI     R16, 250
   \   0000017E   E010               LDI     R17, 0
   \   00000180   8300               ST      Z, R16
   \   00000182   8311               STD     Z+1, R17
    280                  UCSR1A  = 0x00; 
   \   00000184   E000               LDI     R16, 0
   \   00000186   9300....           STS     _A_UCSR1A, R16
    281                  //UBRR1L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
    282                  //UBRR1H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
    283                  UBRR1   = (unsigned)(((float)XTAL_CPU / 16.0 / ((float)baud) )-0.5); 
   \   0000018A   018C               MOVW    R17:R16, R25:R24
   \   0000018C   019D               MOVW    R19:R18, R27:R26
   \   0000018E   ........           CALL    ?UL2F_L04
   \   00000192   01A8               MOVW    R21:R20, R17:R16
   \   00000194   01B9               MOVW    R23:R22, R19:R18
   \   00000196   E000               LDI     R16, 0
   \   00000198   E214               LDI     R17, 36
   \   0000019A   E724               LDI     R18, 116
   \   0000019C   E439               LDI     R19, 73
   \   0000019E   ........           CALL    ?F_DIV_L04
   \   000001A2   E040               LDI     R20, 0
   \   000001A4   E050               LDI     R21, 0
   \   000001A6   E060               LDI     R22, 0
   \   000001A8   EB7F               LDI     R23, 191
   \   000001AA   ........           CALL    ?F_ADD_L04
   \   000001AE   ........           CALL    ?F2SL_L04
   \   000001B2   9310....           STS     (_A_UBRR1 + 1), R17
   \   000001B6   9300....           STS     _A_UBRR1, R16
    284                  // why the fuck do you enalbe UDRE here you stupid fucktard!!! -hkim
    285                  // UCSR1B = 0xb8; /* tx/ rx enable, int udre/rxon */
    286                  UCSR1B = 0x98;       /* tx/ rx enable, int udre/rxon */
   \   000001BA   E908               LDI     R16, 152
   \   000001BC   9300....           STS     _A_UCSR1B, R16
    287                  UCSR1C  = 0x06;       /* n,8,1 */
   \   000001C0   E006               LDI     R16, 6
   \   000001C2   9300....           STS     _A_UCSR1C, R16
    288                  break;
    289              default:
    290                  break ;
    291              }    
    292          }
   \                     ??Init_USART_2:
   \   000001C6   E0E5               LDI     R30, 5
   \   000001C8   ........           JMP     ?EPILOGUE_B5_L09
   \   000001CC                      REQUIRE _A_UCSR0A
   \   000001CC                      REQUIRE _A_UBRR0
   \   000001CC                      REQUIRE _A_UCSR0B
   \   000001CC                      REQUIRE _A_UCSR0C
   \   000001CC                      REQUIRE _A_UCSR1A
   \   000001CC                      REQUIRE _A_UBRR1
   \   000001CC                      REQUIRE _A_UCSR1B
   \   000001CC                      REQUIRE _A_UCSR1C
    293          
    294          
    295          /*
    296          **===========================================================================
    297          ** Init the AD converter registers
    298          **===========================================================================
    299          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    300          void Init_AD( void ) {
   \                     Init_AD:
    301          
    302              char i;     
    303              for (i = 0; i<8; i++) {                 // Init variables
   \   00000000   E000               LDI     R16, 0
   \                     ??Init_AD_0:
   \   00000002   3008               CPI     R16, 8
   \   00000004   F468               BRCC    ??Init_AD_1
    304                  ADInt.Result[i] = 0;                   // convertion resluts
   \   00000006   2F20               MOV     R18, R16
   \   00000008   E030               LDI     R19, 0
   \   0000000A   0F22               LSL     R18
   \   0000000C   1F33               ROL     R19
   \   0000000E   01F9               MOVW    R31:R30, R19:R18
   \   00000010   ....               SUBI    R30, LOW((-(ADInt) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(ADInt) & 0xFFFF) >> 8
   \   00000014   E010               LDI     R17, 0
   \   00000016   8310               ST      Z, R17
   \   00000018   E010               LDI     R17, 0
   \   0000001A   8311               STD     Z+1, R17
    305              }
   \   0000001C   9503               INC     R16
   \   0000001E   CFF1               RJMP    ??Init_AD_0
    306              ADChannel = 0x00 ;                      // AD channel to be converted
   \                     ??Init_AD_1:
   \   00000020   E010               LDI     R17, 0
   \   00000022   9310....           STS     ADChannel, R17
    307              ADMUX   = 0xc0 ;                        // Ref = 2,56V, right adjust
   \   00000026   EC10               LDI     R17, 192
   \   00000028   9310....           STS     _A_ADMUX, R17
    308              // 128 -> 1281
    309              // ADCSR   = 0x8f ;                        // AD enabled, int enabled, xtal / 128
    310              ADCSRA = 0x8f;
   \   0000002C   E81F               LDI     R17, 143
   \   0000002E   9310....           STS     _A_ADCSRA, R17
    311          }
   \   00000032   9508               RET
   \   00000034                      REQUIRE _A_ADMUX
   \   00000034                      REQUIRE _A_ADCSRA
    312          
    313          /*
    314          **===========================================================================
    315          ** Init values  in the system
    316          **===========================================================================
    317          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    318          void Init_Values(void) {
   \                     Init_Values:
    319          
    320          
    321          }
   \   00000000   9508               RET

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   InitSystem
        0      2   -> Init_AD
        0      2   -> Init_CPU
        0      2   -> Init_IO
        0      2   -> Init_TMR
        0      2   -> Init_Values
      0      2   Init_AD
      0      2   Init_CPU
      0      2   Init_IO
      0      2   Init_TMR
      5      2   Init_USART
        5      2   -> OS_CreateMB
        5      2 ?F2SL_L04
        5      2 ?F_ADD_L04
        5      2 ?F_DIV_L04
        5      2 ?UL2F_L04
      0      2   Init_Values
      0      2   Init_Watchdog
      0      2   SPI_Init


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      38  InitSystem
      52  Init_AD
     102  Init_CPU
     130  Init_IO
      54  Init_TMR
     460  Init_USART
       2  Init_Values
      18  Init_Watchdog
      12  SPI_Init
       1  _A_ADCSRA
       1  _A_ADMUX
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_MCUCR
       1  _A_MCUSR
       1  _A_OCR2A
       1  _A_PINB
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_SPCR
       1  _A_SPSR
       1  _A_TCCR2A
       1  _A_TCCR2B
       2  _A_UBRR0
       2  _A_UBRR1
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_WDTCSR
       1  _A_XMCRA
       1  _A_XMCRB

 
  40 bytes in segment ABSOLUTE
 868 bytes in segment CODE
 
 868 bytes of CODE memory
   0 bytes of DATA memory (+ 40 bytes shared)

Errors: none
Warnings: none
