###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       05/Jan/2024  14:33:20
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\AD7715.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW57C.tmp ("C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\AD7715.c"
#        --cpu=m1281 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\Obj" -D
#        OS_LIBMODE_D -D OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D
#        USE_1281_RX_INT_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=0 -D
#        __ATMEGA_1281__ -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\List" -y
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\List\AD7715.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\AD7715.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\AD7715.c
      1          /****************************************************************************************
      2          / AD converter handling , AD7715
      3          /
      4          ***************************************************************************************/
      5          
      6          #ifdef __ATMEGA_1280__
      7          #include	"iom1280.h"
      8          #endif
      9          
     10          #ifdef __ATMEGA_1281__
     11          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_SPDR
   \                     _A_SPDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4d
   \   union <unnamed> volatile __io _A_SPSR
   \                     _A_SPSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PING
   \                     _A_PING:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x25
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1
     12          #endif
     13          #include "stdio.h"
     14          #include "math.h"
     15          #include "string.h"
     16          #include "externals.h"
     17          #include "version.h"
     18          
     19          
     20          #if USE_MODBUS_PROTOCOL == 1
     21              #include "common_def.h"
     22          
     23              #define EEPROM_OFFSET_ADDR(ch)    ((0x80 | ch) * sizeof(float) * 2)
     24              #define EEPROM_GAIN_ADDR(ch)      (((0x80 | ch) * sizeof(float) * 2) + sizeof(float))
     25          
     26              #define EEPROM_RSP_DELAY_ADDR(port)   (EEPROM_OFFGAIN + 1024 + port * sizeof(uint16_t))
     27          
     28              #define ADC_OFFSET_MIN        -2.0f
     29              #define ADC_OFFSET_MAX        2.0f
     30          
     31              #define ADC_GAIN_MIN          0.98f
     32              #define ADC_GAIN_MAX          1.02f
     33          
     34              #define ADC_FILTER_MIN        0.0f
     35              #define ADC_FILTER_MAX        2.0f
     36          
     37          static void load_eeprom_misc(void);
     38          #endif
     39          

   \                                 In  segment CODE, align 2, keep-with-next
     40          static inline signed char
     41          fcompare(float a, float b) {
   \                     fcompare:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   0128               MOVW    R5:R4, R17:R16
   \   00000006   0139               MOVW    R7:R6, R19:R18
   \   00000008   01CA               MOVW    R25:R24, R21:R20
   \   0000000A   01DB               MOVW    R27:R26, R23:R22
     42              //
     43              // returns -1 when a < b
     44              //          1 when a > b
     45              //          0 when equal
     46              //
     47          #define FLT_EPSILON 0.000001f
     48          
     49              float d = a - b;
   \   0000000C   0182               MOVW    R17:R16, R5:R4
   \   0000000E   0193               MOVW    R19:R18, R7:R6
   \   00000010   01AC               MOVW    R21:R20, R25:R24
   \   00000012   01BD               MOVW    R23:R22, R27:R26
   \   00000014   ........           CALL    ?F_SUB_L04
   \   00000018   0108               MOVW    R1:R0, R17:R16
   \   0000001A   0119               MOVW    R3:R2, R19:R18
     50          
     51              if (d >= -FLT_EPSILON && d <= FLT_EPSILON) {
   \   0000001C   0180               MOVW    R17:R16, R1:R0
   \   0000001E   0191               MOVW    R19:R18, R3:R2
   \   00000020   EB4D               LDI     R20, 189
   \   00000022   E357               LDI     R21, 55
   \   00000024   E866               LDI     R22, 134
   \   00000026   EB75               LDI     R23, 181
   \   00000028   ........           CALL    ?F_CMP_GE_L04
   \   0000002C   F458               BRCC    ??fcompare_0
   \   0000002E   0180               MOVW    R17:R16, R1:R0
   \   00000030   0191               MOVW    R19:R18, R3:R2
   \   00000032   EB4E               LDI     R20, 190
   \   00000034   E357               LDI     R21, 55
   \   00000036   E866               LDI     R22, 134
   \   00000038   E375               LDI     R23, 53
   \   0000003A   ........           CALL    ?F_CMP_LT_L04
   \   0000003E   F410               BRCC    ??fcompare_0
     52                  return 0;
   \   00000040   E000               LDI     R16, 0
   \   00000042   C00C               RJMP    ??fcompare_1
     53              }
     54          
     55              if (d < -FLT_EPSILON) {
   \                     ??fcompare_0:
   \   00000044   0180               MOVW    R17:R16, R1:R0
   \   00000046   0191               MOVW    R19:R18, R3:R2
   \   00000048   EB4D               LDI     R20, 189
   \   0000004A   E357               LDI     R21, 55
   \   0000004C   E866               LDI     R22, 134
   \   0000004E   EB75               LDI     R23, 181
   \   00000050   ........           CALL    ?F_CMP_LT_L04
   \   00000054   F410               BRCC    ??fcompare_2
     56                  // a is less than b
     57                  return -1;
   \   00000056   EF0F               LDI     R16, 255
   \   00000058   C001               RJMP    ??fcompare_1
     58              }
     59          
     60              // a is bigger than b
     61              return 1;
   \                     ??fcompare_2:
   \   0000005A   E001               LDI     R16, 1
   \                     ??fcompare_1:
   \   0000005C   E0E8               LDI     R30, 8
   \   0000005E   ........           JMP     ?EPILOGUE_B8_L09
     62          }
     63          
     64          /*************************************************************************
     65          *   (This is a task)
     66          *  AD7715 task 
     67          *
     68          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     69          void AD7715(void) {
   \                     AD7715:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   9724               SBIW    R29:R28, 4
     70              char ch;
     71              float Tempfloat;
     72          
     73              for (ch = 0; ch<12; ch++) {
   \   00000006   2444               CLR     R4
   \                     ??AD7715_0:
   \   00000008   E00C               LDI     R16, 12
   \   0000000A   1640               CP      R4, R16
   \   0000000C   F440               BRCC    ??AD7715_1
     74                  TData.Ana.Filter[ch] = 1.0;
   \   0000000E   2455               CLR     R5
   \   00000010   01F2               MOVW    R31:R30, R5:R4
   \   00000012   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000016   E001               LDI     R16, 1
   \   00000018   8302               STD     Z+2, R16
     75              }
   \   0000001A   9443               INC     R4
   \   0000001C   CFF5               RJMP    ??AD7715_0
     76              TData.Ana.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP) + (ReadEEPROMByte(EEPROM_PORTSETUP + 1) << 8); // Get setup from EEPROM
   \                     ??AD7715_1:
   \   0000001E   E002               LDI     R16, 2
   \   00000020   E010               LDI     R17, 0
   \   00000022   ........           CALL    ReadEEPROMByte
   \   00000026   2F80               MOV     R24, R16
   \   00000028   E003               LDI     R16, 3
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   ........           CALL    ReadEEPROMByte
   \   00000030   2F90               MOV     R25, R16
   \   00000032   ....               LDI     R30, LOW(TData)
   \   00000034   ....               LDI     R31, (TData) >> 8
   \   00000036   8380               ST      Z, R24
   \   00000038   8391               STD     Z+1, R25
     77              SetAnaPort();
   \   0000003A   ....               RCALL   SetAnaPort
     78          
     79              WriteAdByte(0xff);             // Write 32 1's to reset
   \   0000003C   EF0F               LDI     R16, 255
   \   0000003E   ....               RCALL   WriteAdByte
     80              WriteAdByte(0xff);
   \   00000040   EF0F               LDI     R16, 255
   \   00000042   ....               RCALL   WriteAdByte
     81              WriteAdByte(0xff);
   \   00000044   EF0F               LDI     R16, 255
   \   00000046   ....               RCALL   WriteAdByte
     82              WriteAdByte(0xff);
   \   00000048   EF0F               LDI     R16, 255
   \   0000004A   ....               RCALL   WriteAdByte
     83          
     84              // Calibrate and check if the card is layout rev 1?
     85              WriteAdByte(0x10);             // Next write setup reg
   \   0000004C   E100               LDI     R16, 16
   \   0000004E   ....               RCALL   WriteAdByte
     86              WriteAdByte(0x4e);             //  Ad setup data, unipolar, calibrate
   \   00000050   E40E               LDI     R16, 78
   \   00000052   ....               RCALL   WriteAdByte
     87              OS_Delay(250);
   \   00000054   EF0A               LDI     R16, 250
   \   00000056   E010               LDI     R17, 0
   \   00000058   ........           CALL    OS_Delay
     88              OS_ClearEvents(&TCB_AD7715);
   \   0000005C   ....               LDI     R16, LOW(TCB_AD7715)
   \   0000005E   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000060   ........           CALL    OS_ClearEvents
     89              OS_WaitEventTimed(1, 1000);
   \   00000064   EE28               LDI     R18, 232
   \   00000066   E033               LDI     R19, 3
   \   00000068   E001               LDI     R16, 1
   \   0000006A   ........           CALL    OS_WaitEventTimed
     90          
     91              ClrBit(PORTE, 0xf0);                 // check channel 14 for 2.5 V
   \   0000006E   9100....           LDS     R16, (OS_Global + 1)
   \   00000072   7F00               ANDI    R16, 0xF0
   \   00000074   2300               TST     R16
   \   00000076   F021               BREQ    ??AD7715_2
   \   00000078   E909               LDI     R16, 153
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   ........           CALL    OS_Error
   \                     ??AD7715_2:
   \   00000080   94F8               cli
   \   00000082   9100....           LDS     R16, (OS_Global + 1)
   \   00000086   9503               INC     R16
   \   00000088   9300....           STS     (OS_Global + 1), R16
   \   0000008C   B10E               IN      R16, 0x0E
   \   0000008E   700F               ANDI    R16, 0x0F
   \   00000090   B90E               OUT     0x0E, R16
   \   00000092   9100....           LDS     R16, (OS_Global + 1)
   \   00000096   7F00               ANDI    R16, 0xF0
   \   00000098   2300               TST     R16
   \   0000009A   F021               BREQ    ??AD7715_3
   \   0000009C   E909               LDI     R16, 153
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   ........           CALL    OS_Error
   \                     ??AD7715_3:
   \   000000A4   9100....           LDS     R16, (OS_Global + 1)
   \   000000A8   950A               DEC     R16
   \   000000AA   9300....           STS     (OS_Global + 1), R16
   \   000000AE   9100....           LDS     R16, (OS_Global + 1)
   \   000000B2   2300               TST     R16
   \   000000B4   F409               BRNE    ??AD7715_4
   \   000000B6   9478               sei
     92              SetBit(PORTE, (14 << 4) & 0xf0);    // check
   \                     ??AD7715_4:
   \   000000B8   9100....           LDS     R16, (OS_Global + 1)
   \   000000BC   7F00               ANDI    R16, 0xF0
   \   000000BE   2300               TST     R16
   \   000000C0   F021               BREQ    ??AD7715_5
   \   000000C2   E909               LDI     R16, 153
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   ........           CALL    OS_Error
   \                     ??AD7715_5:
   \   000000CA   94F8               cli
   \   000000CC   9100....           LDS     R16, (OS_Global + 1)
   \   000000D0   9503               INC     R16
   \   000000D2   9300....           STS     (OS_Global + 1), R16
   \   000000D6   B10E               IN      R16, 0x0E
   \   000000D8   6E00               ORI     R16, 0xE0
   \   000000DA   B90E               OUT     0x0E, R16
   \   000000DC   9100....           LDS     R16, (OS_Global + 1)
   \   000000E0   7F00               ANDI    R16, 0xF0
   \   000000E2   2300               TST     R16
   \   000000E4   F021               BREQ    ??AD7715_6
   \   000000E6   E909               LDI     R16, 153
   \   000000E8   E010               LDI     R17, 0
   \   000000EA   ........           CALL    OS_Error
   \                     ??AD7715_6:
   \   000000EE   9100....           LDS     R16, (OS_Global + 1)
   \   000000F2   950A               DEC     R16
   \   000000F4   9300....           STS     (OS_Global + 1), R16
   \   000000F8   9100....           LDS     R16, (OS_Global + 1)
   \   000000FC   2300               TST     R16
   \   000000FE   F409               BRNE    ??AD7715_7
   \   00000100   9478               sei
     93              WriteAdByte(0x10);                 // Next write data
   \                     ??AD7715_7:
   \   00000102   E100               LDI     R16, 16
   \   00000104   ....               RCALL   WriteAdByte
     94              WriteAdByte(0x0e);                 // Ad setup data, unipolar
   \   00000106   E00E               LDI     R16, 14
   \   00000108   ....               RCALL   WriteAdByte
     95              OS_Delay(85);
   \   0000010A   E505               LDI     R16, 85
   \   0000010C   E010               LDI     R17, 0
   \   0000010E   ........           CALL    OS_Delay
     96              OS_ClearEvents(&TCB_AD7715);
   \   00000112   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000114   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000116   ........           CALL    OS_ClearEvents
     97              OS_WaitEventTimed(1, 250);
   \   0000011A   EF2A               LDI     R18, 250
   \   0000011C   E030               LDI     R19, 0
   \   0000011E   E001               LDI     R16, 1
   \   00000120   ........           CALL    OS_WaitEventTimed
     98              WriteAdByte(0x38);                 // Next read data
   \   00000124   E308               LDI     R16, 56
   \   00000126   ....               RCALL   WriteAdByte
     99              for (ch = 0; ch < 12; ch++) {       // Get the gain and offset from the EEPROM
   \   00000128   2444               CLR     R4
   \                     ??AD7715_8:
   \   0000012A   E00C               LDI     R16, 12
   \   0000012C   1640               CP      R4, R16
   \   0000012E   F520               BRCC    ??AD7715_9
    100                  TData.Ana.Offset[ch] = 0.0;
   \   00000130   2D04               MOV     R16, R4
   \   00000132   E010               LDI     R17, 0
   \   00000134   0F00               LSL     R16
   \   00000136   1F11               ROL     R17
   \   00000138   0F00               LSL     R16
   \   0000013A   1F11               ROL     R17
   \   0000013C   01F8               MOVW    R31:R30, R17:R16
   \   0000013E   ....               SUBI    R30, LOW((-(TData + 98) & 0xFFFF))
   \   00000140   ....               SBCI    R31, HIGH((-(TData + 98) & 0xFFFF))
   \   00000142   E000               LDI     R16, 0
   \   00000144   8300               ST      Z, R16
   \   00000146   E000               LDI     R16, 0
   \   00000148   8301               STD     Z+1, R16
   \   0000014A   E000               LDI     R16, 0
   \   0000014C   8302               STD     Z+2, R16
   \   0000014E   E000               LDI     R16, 0
   \   00000150   8303               STD     Z+3, R16
    101                  TData.Ana.Gain[ch] = 1.00175; //0.9985;
   \   00000152   2D04               MOV     R16, R4
   \   00000154   E010               LDI     R17, 0
   \   00000156   0F00               LSL     R16
   \   00000158   1F11               ROL     R17
   \   0000015A   0F00               LSL     R16
   \   0000015C   1F11               ROL     R17
   \   0000015E   01F8               MOVW    R31:R30, R17:R16
   \   00000160   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   00000162   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   00000164   E508               LDI     R16, 88
   \   00000166   E319               LDI     R17, 57
   \   00000168   E820               LDI     R18, 128
   \   0000016A   E33F               LDI     R19, 63
   \   0000016C   8300               ST      Z, R16
   \   0000016E   8311               STD     Z+1, R17
   \   00000170   8322               STD     Z+2, R18
   \   00000172   8333               STD     Z+3, R19
    102              }
   \   00000174   9443               INC     R4
   \   00000176   CFD9               RJMP    ??AD7715_8
    103              for (ch = 0; ch < 12; ch++) {       // Get the gain and offset from the EEPROM
   \                     ??AD7715_9:
   \   00000178   2444               CLR     R4
   \                     ??AD7715_10:
   \   0000017A   E00C               LDI     R16, 12
   \   0000017C   1640               CP      R4, R16
   \   0000017E   F008               BRCS    $+2+2
   \   00000180   C07E               RJMP    ??AD7715_11
    104                  ReadEEPROMBuffer((ch | 0x80) * sizeof(float) * 2, sizeof(float), (char *)&Tempfloat);
   \   00000182   01AE               MOVW    R21:R20, R29:R28
   \   00000184   E024               LDI     R18, 4
   \   00000186   01BA               MOVW    R23:R22, R21:R20
   \   00000188   2D04               MOV     R16, R4
   \   0000018A   E010               LDI     R17, 0
   \   0000018C   6800               ORI     R16, 0x80
   \   0000018E   6010               ORI     R17, 0x00
   \   00000190   E048               LDI     R20, 8
   \   00000192   E050               LDI     R21, 0
   \   00000194   ........           CALL    ?S_EC_MUL_L02
   \   00000198   01AB               MOVW    R21:R20, R23:R22
   \   0000019A   ........           CALL    ReadEEPROMBuffer
    105          
    106          #if 0 // hkim. you shouldn't do floating point comparison like this
    107                  if (IsFloat(Tempfloat) && Tempfloat > -2.0 && Tempfloat < 2.0 ) {
    108                      *((float*)&TData.Ana.Offset[ch]) = *((float*)&Tempfloat);  //offset
    109                  }
    110          
    111                  ReadEEPROMBuffer( ((ch | 0x80) * sizeof(float)*2) + sizeof(float), sizeof(float), (char*)&Tempfloat );
    112          
    113                  if (IsFloat(Tempfloat) && Tempfloat > 0.98 && Tempfloat < 1.02){
    114                      *((float *)&TData.Ana.Gain[ch]) = *((float *)&Tempfloat); //gain
    115                  }
    116          #else
    117                  if (IsFloat(Tempfloat) && fcompare(Tempfloat, -2.0) > 0 && fcompare(Tempfloat, 2.0) < 0) {
   \   0000019E   8108               LD      R16, Y
   \   000001A0   8119               LDD     R17, Y+1
   \   000001A2   812A               LDD     R18, Y+2
   \   000001A4   813B               LDD     R19, Y+3
   \   000001A6   ........           CALL    IsFloat
   \   000001AA   2300               TST     R16
   \   000001AC   F139               BREQ    ??AD7715_12
   \   000001AE   E040               LDI     R20, 0
   \   000001B0   E050               LDI     R21, 0
   \   000001B2   E060               LDI     R22, 0
   \   000001B4   EC70               LDI     R23, 192
   \   000001B6   8108               LD      R16, Y
   \   000001B8   8119               LDD     R17, Y+1
   \   000001BA   812A               LDD     R18, Y+2
   \   000001BC   813B               LDD     R19, Y+3
   \   000001BE   ....               RCALL   fcompare
   \   000001C0   3001               CPI     R16, 1
   \   000001C2   F0E4               BRLT    ??AD7715_12
   \   000001C4   E040               LDI     R20, 0
   \   000001C6   E050               LDI     R21, 0
   \   000001C8   E060               LDI     R22, 0
   \   000001CA   E470               LDI     R23, 64
   \   000001CC   8108               LD      R16, Y
   \   000001CE   8119               LDD     R17, Y+1
   \   000001D0   812A               LDD     R18, Y+2
   \   000001D2   813B               LDD     R19, Y+3
   \   000001D4   ....               RCALL   fcompare
   \   000001D6   2300               TST     R16
   \   000001D8   F48A               BRPL    ??AD7715_12
    118                      *((float *)&TData.Ana.Offset[ch]) = *((float *)&Tempfloat); //offset
   \   000001DA   8148               LD      R20, Y
   \   000001DC   8159               LDD     R21, Y+1
   \   000001DE   816A               LDD     R22, Y+2
   \   000001E0   817B               LDD     R23, Y+3
   \   000001E2   2D04               MOV     R16, R4
   \   000001E4   E010               LDI     R17, 0
   \   000001E6   0F00               LSL     R16
   \   000001E8   1F11               ROL     R17
   \   000001EA   0F00               LSL     R16
   \   000001EC   1F11               ROL     R17
   \   000001EE   01F8               MOVW    R31:R30, R17:R16
   \   000001F0   ....               SUBI    R30, LOW((-(TData + 98) & 0xFFFF))
   \   000001F2   ....               SBCI    R31, HIGH((-(TData + 98) & 0xFFFF))
   \   000001F4   8340               ST      Z, R20
   \   000001F6   8351               STD     Z+1, R21
   \   000001F8   8362               STD     Z+2, R22
   \   000001FA   8373               STD     Z+3, R23
    119                  }
    120          
    121                  ReadEEPROMBuffer(((ch | 0x80) * sizeof(float) * 2) + sizeof(float), sizeof(float), (char *)&Tempfloat);
   \                     ??AD7715_12:
   \   000001FC   01AE               MOVW    R21:R20, R29:R28
   \   000001FE   E024               LDI     R18, 4
   \   00000200   01BA               MOVW    R23:R22, R21:R20
   \   00000202   2D04               MOV     R16, R4
   \   00000204   E010               LDI     R17, 0
   \   00000206   6800               ORI     R16, 0x80
   \   00000208   6010               ORI     R17, 0x00
   \   0000020A   E048               LDI     R20, 8
   \   0000020C   E050               LDI     R21, 0
   \   0000020E   ........           CALL    ?S_EC_MUL_L02
   \   00000212   5F0C               SUBI    R16, 252
   \   00000214   4F1F               SBCI    R17, 255
   \   00000216   01AB               MOVW    R21:R20, R23:R22
   \   00000218   ........           CALL    ReadEEPROMBuffer
    122          
    123                  if (IsFloat(Tempfloat) && fcompare(Tempfloat, 0.98) > 0 && fcompare(Tempfloat, 1.02) < 0) {
   \   0000021C   8108               LD      R16, Y
   \   0000021E   8119               LDD     R17, Y+1
   \   00000220   812A               LDD     R18, Y+2
   \   00000222   813B               LDD     R19, Y+3
   \   00000224   ........           CALL    IsFloat
   \   00000228   2300               TST     R16
   \   0000022A   F139               BREQ    ??AD7715_13
   \   0000022C   E448               LDI     R20, 72
   \   0000022E   EE51               LDI     R21, 225
   \   00000230   E76A               LDI     R22, 122
   \   00000232   E37F               LDI     R23, 63
   \   00000234   8108               LD      R16, Y
   \   00000236   8119               LDD     R17, Y+1
   \   00000238   812A               LDD     R18, Y+2
   \   0000023A   813B               LDD     R19, Y+3
   \   0000023C   ....               RCALL   fcompare
   \   0000023E   3001               CPI     R16, 1
   \   00000240   F0E4               BRLT    ??AD7715_13
   \   00000242   E54C               LDI     R20, 92
   \   00000244   E85F               LDI     R21, 143
   \   00000246   E862               LDI     R22, 130
   \   00000248   E37F               LDI     R23, 63
   \   0000024A   8108               LD      R16, Y
   \   0000024C   8119               LDD     R17, Y+1
   \   0000024E   812A               LDD     R18, Y+2
   \   00000250   813B               LDD     R19, Y+3
   \   00000252   ....               RCALL   fcompare
   \   00000254   2300               TST     R16
   \   00000256   F48A               BRPL    ??AD7715_13
    124                      *((float *)&TData.Ana.Gain[ch]) = *((float *)&Tempfloat);  //gain
   \   00000258   8148               LD      R20, Y
   \   0000025A   8159               LDD     R21, Y+1
   \   0000025C   816A               LDD     R22, Y+2
   \   0000025E   817B               LDD     R23, Y+3
   \   00000260   2D04               MOV     R16, R4
   \   00000262   E010               LDI     R17, 0
   \   00000264   0F00               LSL     R16
   \   00000266   1F11               ROL     R17
   \   00000268   0F00               LSL     R16
   \   0000026A   1F11               ROL     R17
   \   0000026C   01F8               MOVW    R31:R30, R17:R16
   \   0000026E   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   00000270   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   00000272   8340               ST      Z, R20
   \   00000274   8351               STD     Z+1, R21
   \   00000276   8362               STD     Z+2, R22
   \   00000278   8373               STD     Z+3, R23
    125                  }
    126          #endif
    127              }
   \                     ??AD7715_13:
   \   0000027A   9443               INC     R4
   \   0000027C   CF7E               RJMP    ??AD7715_10
    128          
    129              //
    130              // let modbus task that I'm done initializing
    131              //
    132          #if USE_MODBUS_PROTOCOL == 1
    133              load_eeprom_misc();
    134          
    135              {
    136                  extern void modbus_rtu_notify_go(void);
    137                  modbus_rtu_notify_go();
    138              }
    139          #endif
    140          
    141              while (1) {
    142                  ClrBit(PORTE, 0xf0);
   \                     ??AD7715_11:
   \   0000027E   9100....           LDS     R16, (OS_Global + 1)
   \   00000282   7F00               ANDI    R16, 0xF0
   \   00000284   2300               TST     R16
   \   00000286   F021               BREQ    ??AD7715_14
   \   00000288   E909               LDI     R16, 153
   \   0000028A   E010               LDI     R17, 0
   \   0000028C   ........           CALL    OS_Error
   \                     ??AD7715_14:
   \   00000290   94F8               cli
   \   00000292   9100....           LDS     R16, (OS_Global + 1)
   \   00000296   9503               INC     R16
   \   00000298   9300....           STS     (OS_Global + 1), R16
   \   0000029C   B10E               IN      R16, 0x0E
   \   0000029E   700F               ANDI    R16, 0x0F
   \   000002A0   B90E               OUT     0x0E, R16
   \   000002A2   9100....           LDS     R16, (OS_Global + 1)
   \   000002A6   7F00               ANDI    R16, 0xF0
   \   000002A8   2300               TST     R16
   \   000002AA   F021               BREQ    ??AD7715_15
   \   000002AC   E909               LDI     R16, 153
   \   000002AE   E010               LDI     R17, 0
   \   000002B0   ........           CALL    OS_Error
   \                     ??AD7715_15:
   \   000002B4   9100....           LDS     R16, (OS_Global + 1)
   \   000002B8   950A               DEC     R16
   \   000002BA   9300....           STS     (OS_Global + 1), R16
   \   000002BE   9100....           LDS     R16, (OS_Global + 1)
   \   000002C2   2300               TST     R16
   \   000002C4   F409               BRNE    ??AD7715_16
   \   000002C6   9478               sei
    143                  SetBit(PORTE, (15 << 4) & 0xf0); // 0V at ch 16
   \                     ??AD7715_16:
   \   000002C8   9100....           LDS     R16, (OS_Global + 1)
   \   000002CC   7F00               ANDI    R16, 0xF0
   \   000002CE   2300               TST     R16
   \   000002D0   F021               BREQ    ??AD7715_17
   \   000002D2   E909               LDI     R16, 153
   \   000002D4   E010               LDI     R17, 0
   \   000002D6   ........           CALL    OS_Error
   \                     ??AD7715_17:
   \   000002DA   94F8               cli
   \   000002DC   9100....           LDS     R16, (OS_Global + 1)
   \   000002E0   9503               INC     R16
   \   000002E2   9300....           STS     (OS_Global + 1), R16
   \   000002E6   B10E               IN      R16, 0x0E
   \   000002E8   6F00               ORI     R16, 0xF0
   \   000002EA   B90E               OUT     0x0E, R16
   \   000002EC   9100....           LDS     R16, (OS_Global + 1)
   \   000002F0   7F00               ANDI    R16, 0xF0
   \   000002F2   2300               TST     R16
   \   000002F4   F021               BREQ    ??AD7715_18
   \   000002F6   E909               LDI     R16, 153
   \   000002F8   E010               LDI     R17, 0
   \   000002FA   ........           CALL    OS_Error
   \                     ??AD7715_18:
   \   000002FE   9100....           LDS     R16, (OS_Global + 1)
   \   00000302   950A               DEC     R16
   \   00000304   9300....           STS     (OS_Global + 1), R16
   \   00000308   9100....           LDS     R16, (OS_Global + 1)
   \   0000030C   2300               TST     R16
   \   0000030E   F409               BRNE    ??AD7715_19
   \   00000310   9478               sei
    144                  WriteAdByte(0x10);             // Next write setup reg
   \                     ??AD7715_19:
   \   00000312   E100               LDI     R16, 16
   \   00000314   ....               RCALL   WriteAdByte
    145                  WriteAdByte(0x8e);             //  AStark test zero scale calibrate
   \   00000316   E80E               LDI     R16, 142
   \   00000318   ....               RCALL   WriteAdByte
    146                  OS_Delay(250);
   \   0000031A   EF0A               LDI     R16, 250
   \   0000031C   E010               LDI     R17, 0
   \   0000031E   ........           CALL    OS_Delay
    147                  OS_ClearEvents(&TCB_AD7715);
   \   00000322   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000324   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000326   ........           CALL    OS_ClearEvents
    148                  OS_WaitEventTimed(1, 1000);
   \   0000032A   EE28               LDI     R18, 232
   \   0000032C   E033               LDI     R19, 3
   \   0000032E   E001               LDI     R16, 1
   \   00000330   ........           CALL    OS_WaitEventTimed
    149          
    150                  ClrBit(PORTE, 0xf0);
   \   00000334   9100....           LDS     R16, (OS_Global + 1)
   \   00000338   7F00               ANDI    R16, 0xF0
   \   0000033A   2300               TST     R16
   \   0000033C   F021               BREQ    ??AD7715_20
   \   0000033E   E909               LDI     R16, 153
   \   00000340   E010               LDI     R17, 0
   \   00000342   ........           CALL    OS_Error
   \                     ??AD7715_20:
   \   00000346   94F8               cli
   \   00000348   9100....           LDS     R16, (OS_Global + 1)
   \   0000034C   9503               INC     R16
   \   0000034E   9300....           STS     (OS_Global + 1), R16
   \   00000352   B10E               IN      R16, 0x0E
   \   00000354   700F               ANDI    R16, 0x0F
   \   00000356   B90E               OUT     0x0E, R16
   \   00000358   9100....           LDS     R16, (OS_Global + 1)
   \   0000035C   7F00               ANDI    R16, 0xF0
   \   0000035E   2300               TST     R16
   \   00000360   F021               BREQ    ??AD7715_21
   \   00000362   E909               LDI     R16, 153
   \   00000364   E010               LDI     R17, 0
   \   00000366   ........           CALL    OS_Error
   \                     ??AD7715_21:
   \   0000036A   9100....           LDS     R16, (OS_Global + 1)
   \   0000036E   950A               DEC     R16
   \   00000370   9300....           STS     (OS_Global + 1), R16
   \   00000374   9100....           LDS     R16, (OS_Global + 1)
   \   00000378   2300               TST     R16
   \   0000037A   F409               BRNE    ??AD7715_22
   \   0000037C   9478               sei
    151                  SetBit(PORTE, (14 << 4) & 0xf0); // 2.5V at ch 15
   \                     ??AD7715_22:
   \   0000037E   9100....           LDS     R16, (OS_Global + 1)
   \   00000382   7F00               ANDI    R16, 0xF0
   \   00000384   2300               TST     R16
   \   00000386   F021               BREQ    ??AD7715_23
   \   00000388   E909               LDI     R16, 153
   \   0000038A   E010               LDI     R17, 0
   \   0000038C   ........           CALL    OS_Error
   \                     ??AD7715_23:
   \   00000390   94F8               cli
   \   00000392   9100....           LDS     R16, (OS_Global + 1)
   \   00000396   9503               INC     R16
   \   00000398   9300....           STS     (OS_Global + 1), R16
   \   0000039C   B10E               IN      R16, 0x0E
   \   0000039E   6E00               ORI     R16, 0xE0
   \   000003A0   B90E               OUT     0x0E, R16
   \   000003A2   9100....           LDS     R16, (OS_Global + 1)
   \   000003A6   7F00               ANDI    R16, 0xF0
   \   000003A8   2300               TST     R16
   \   000003AA   F021               BREQ    ??AD7715_24
   \   000003AC   E909               LDI     R16, 153
   \   000003AE   E010               LDI     R17, 0
   \   000003B0   ........           CALL    OS_Error
   \                     ??AD7715_24:
   \   000003B4   9100....           LDS     R16, (OS_Global + 1)
   \   000003B8   950A               DEC     R16
   \   000003BA   9300....           STS     (OS_Global + 1), R16
   \   000003BE   9100....           LDS     R16, (OS_Global + 1)
   \   000003C2   2300               TST     R16
   \   000003C4   F409               BRNE    ??AD7715_25
   \   000003C6   9478               sei
    152                  WriteAdByte(0x10);             // Next write setup reg
   \                     ??AD7715_25:
   \   000003C8   E100               LDI     R16, 16
   \   000003CA   ....               RCALL   WriteAdByte
    153                  WriteAdByte(0xce);             //  AStark test full scale calibrate
   \   000003CC   EC0E               LDI     R16, 206
   \   000003CE   ....               RCALL   WriteAdByte
    154                  OS_Delay(250);
   \   000003D0   EF0A               LDI     R16, 250
   \   000003D2   E010               LDI     R17, 0
   \   000003D4   ........           CALL    OS_Delay
    155                  OS_ClearEvents(&TCB_AD7715);
   \   000003D8   ....               LDI     R16, LOW(TCB_AD7715)
   \   000003DA   ....               LDI     R17, (TCB_AD7715) >> 8
   \   000003DC   ........           CALL    OS_ClearEvents
    156                  OS_WaitEventTimed(1, 1000);
   \   000003E0   EE28               LDI     R18, 232
   \   000003E2   E033               LDI     R19, 3
   \   000003E4   E001               LDI     R16, 1
   \   000003E6   ........           CALL    OS_WaitEventTimed
    157          
    158          
    159                  for (ch = 0; ch < 12; ch++) {
   \   000003EA   2444               CLR     R4
   \                     ??AD7715_26:
   \   000003EC   E00C               LDI     R16, 12
   \   000003EE   1640               CP      R4, R16
   \   000003F0   F008               BRCS    $+2+2
   \   000003F2   CF45               RJMP    ??AD7715_11
    160                      ClrBit(PORTE, 0xf0);
   \   000003F4   9100....           LDS     R16, (OS_Global + 1)
   \   000003F8   7F00               ANDI    R16, 0xF0
   \   000003FA   2300               TST     R16
   \   000003FC   F021               BREQ    ??AD7715_27
   \   000003FE   E909               LDI     R16, 153
   \   00000400   E010               LDI     R17, 0
   \   00000402   ........           CALL    OS_Error
   \                     ??AD7715_27:
   \   00000406   94F8               cli
   \   00000408   9100....           LDS     R16, (OS_Global + 1)
   \   0000040C   9503               INC     R16
   \   0000040E   9300....           STS     (OS_Global + 1), R16
   \   00000412   B10E               IN      R16, 0x0E
   \   00000414   700F               ANDI    R16, 0x0F
   \   00000416   B90E               OUT     0x0E, R16
   \   00000418   9100....           LDS     R16, (OS_Global + 1)
   \   0000041C   7F00               ANDI    R16, 0xF0
   \   0000041E   2300               TST     R16
   \   00000420   F021               BREQ    ??AD7715_28
   \   00000422   E909               LDI     R16, 153
   \   00000424   E010               LDI     R17, 0
   \   00000426   ........           CALL    OS_Error
   \                     ??AD7715_28:
   \   0000042A   9100....           LDS     R16, (OS_Global + 1)
   \   0000042E   950A               DEC     R16
   \   00000430   9300....           STS     (OS_Global + 1), R16
   \   00000434   9100....           LDS     R16, (OS_Global + 1)
   \   00000438   2300               TST     R16
   \   0000043A   F409               BRNE    ??AD7715_29
   \   0000043C   9478               sei
    161                      SetBit(PORTE, (ch << 4) & 0xf0);
   \                     ??AD7715_29:
   \   0000043E   9100....           LDS     R16, (OS_Global + 1)
   \   00000442   7F00               ANDI    R16, 0xF0
   \   00000444   2300               TST     R16
   \   00000446   F021               BREQ    ??AD7715_30
   \   00000448   E909               LDI     R16, 153
   \   0000044A   E010               LDI     R17, 0
   \   0000044C   ........           CALL    OS_Error
   \                     ??AD7715_30:
   \   00000450   94F8               cli
   \   00000452   9100....           LDS     R16, (OS_Global + 1)
   \   00000456   9503               INC     R16
   \   00000458   9300....           STS     (OS_Global + 1), R16
   \   0000045C   2D04               MOV     R16, R4
   \   0000045E   9502               SWAP    R16
   \   00000460   7F00               ANDI    R16, 0xF0
   \   00000462   B11E               IN      R17, 0x0E
   \   00000464   2B10               OR      R17, R16
   \   00000466   B91E               OUT     0x0E, R17
   \   00000468   9100....           LDS     R16, (OS_Global + 1)
   \   0000046C   7F00               ANDI    R16, 0xF0
   \   0000046E   2300               TST     R16
   \   00000470   F021               BREQ    ??AD7715_31
   \   00000472   E909               LDI     R16, 153
   \   00000474   E010               LDI     R17, 0
   \   00000476   ........           CALL    OS_Error
   \                     ??AD7715_31:
   \   0000047A   9100....           LDS     R16, (OS_Global + 1)
   \   0000047E   950A               DEC     R16
   \   00000480   9300....           STS     (OS_Global + 1), R16
   \   00000484   9100....           LDS     R16, (OS_Global + 1)
   \   00000488   2300               TST     R16
   \   0000048A   F409               BRNE    ??AD7715_32
   \   0000048C   9478               sei
    162                      WriteAdByte(0x10);                 // Next write data
   \                     ??AD7715_32:
   \   0000048E   E100               LDI     R16, 16
   \   00000490   ....               RCALL   WriteAdByte
    163                      WriteAdByte(0x0e);                          // Ad setup data, unipolar
   \   00000492   E00E               LDI     R16, 14
   \   00000494   ....               RCALL   WriteAdByte
    164                      OS_Delay(85);
   \   00000496   E505               LDI     R16, 85
   \   00000498   E010               LDI     R17, 0
   \   0000049A   ........           CALL    OS_Delay
    165                      OS_ClearEvents(&TCB_AD7715);
   \   0000049E   ....               LDI     R16, LOW(TCB_AD7715)
   \   000004A0   ....               LDI     R17, (TCB_AD7715) >> 8
   \   000004A2   ........           CALL    OS_ClearEvents
    166                      OS_WaitEventTimed(1, 250);
   \   000004A6   EF2A               LDI     R18, 250
   \   000004A8   E030               LDI     R19, 0
   \   000004AA   E001               LDI     R16, 1
   \   000004AC   ........           CALL    OS_WaitEventTimed
    167                      WriteAdByte(0x38);             // Next read data
   \   000004B0   E308               LDI     R16, 56
   \   000004B2   ....               RCALL   WriteAdByte
    168          
    169                      unsigned int addata;
    170                      addata = ReadAdByte() * 256;        // read data 16 bit data from ad
   \   000004B4   ....               RCALL   ReadAdByte
   \   000004B6   E010               LDI     R17, 0
   \   000004B8   2F10               MOV     R17, R16
   \   000004BA   E000               LDI     R16, 0
   \   000004BC   01C8               MOVW    R25:R24, R17:R16
    171                      addata += ReadAdByte();
   \   000004BE   ....               RCALL   ReadAdByte
   \   000004C0   E010               LDI     R17, 0
   \   000004C2   0F80               ADD     R24, R16
   \   000004C4   1F91               ADC     R25, R17
    172          
    173          #if USE_MODBUS_PROTOCOL == 1
    174                      OS_Use(&adc_lock);
    175          #endif
    176          
    177                      TData.Ana.Status[ch] = 0;                   // Result ok
   \   000004C6   2455               CLR     R5
   \   000004C8   01F2               MOVW    R31:R30, R5:R4
   \   000004CA   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000004CC   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000004CE   E000               LDI     R16, 0
   \   000004D0   8706               STD     Z+14, R16
    178                      TData.Ana.Result[ch] += ((((((float)addata / 65535.0) * 25.0) * TData.Ana.Gain[ch]) - TData.Ana.Offset[ch] - TData.Ana.Result[ch])
    179                                               / (TData.Ana.Filter[ch] + 1.0));             // readed value / 16bit * 2.5 volt range
   \   000004D2   018C               MOVW    R17:R16, R25:R24
   \   000004D4   E020               LDI     R18, 0
   \   000004D6   E030               LDI     R19, 0
   \   000004D8   ........           CALL    ?UL2F_L04
   \   000004DC   E040               LDI     R20, 0
   \   000004DE   EF5F               LDI     R21, 255
   \   000004E0   E76F               LDI     R22, 127
   \   000004E2   E477               LDI     R23, 71
   \   000004E4   ........           CALL    ?F_DIV_L04
   \   000004E8   E040               LDI     R20, 0
   \   000004EA   E050               LDI     R21, 0
   \   000004EC   EC68               LDI     R22, 200
   \   000004EE   E471               LDI     R23, 65
   \   000004F0   ........           CALL    ?F_MUL_L04
   \   000004F4   2D44               MOV     R20, R4
   \   000004F6   E050               LDI     R21, 0
   \   000004F8   0F44               LSL     R20
   \   000004FA   1F55               ROL     R21
   \   000004FC   0F44               LSL     R20
   \   000004FE   1F55               ROL     R21
   \   00000500   01FA               MOVW    R31:R30, R21:R20
   \   00000502   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   00000504   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   00000506   8140               LD      R20, Z
   \   00000508   8151               LDD     R21, Z+1
   \   0000050A   8162               LDD     R22, Z+2
   \   0000050C   8173               LDD     R23, Z+3
   \   0000050E   ........           CALL    ?F_MUL_L04
   \   00000512   2D44               MOV     R20, R4
   \   00000514   E050               LDI     R21, 0
   \   00000516   0F44               LSL     R20
   \   00000518   1F55               ROL     R21
   \   0000051A   0F44               LSL     R20
   \   0000051C   1F55               ROL     R21
   \   0000051E   01FA               MOVW    R31:R30, R21:R20
   \   00000520   ....               SUBI    R30, LOW((-(TData + 98) & 0xFFFF))
   \   00000522   ....               SBCI    R31, HIGH((-(TData + 98) & 0xFFFF))
   \   00000524   8140               LD      R20, Z
   \   00000526   8151               LDD     R21, Z+1
   \   00000528   8162               LDD     R22, Z+2
   \   0000052A   8173               LDD     R23, Z+3
   \   0000052C   ........           CALL    ?F_SUB_L04
   \   00000530   2D44               MOV     R20, R4
   \   00000532   E050               LDI     R21, 0
   \   00000534   0F44               LSL     R20
   \   00000536   1F55               ROL     R21
   \   00000538   0F44               LSL     R20
   \   0000053A   1F55               ROL     R21
   \   0000053C   01FA               MOVW    R31:R30, R21:R20
   \   0000053E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000540   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000542   8D42               LDD     R20, Z+26
   \   00000544   8D53               LDD     R21, Z+27
   \   00000546   8D64               LDD     R22, Z+28
   \   00000548   8D75               LDD     R23, Z+29
   \   0000054A   ........           CALL    ?F_SUB_L04
   \   0000054E   01C8               MOVW    R25:R24, R17:R16
   \   00000550   01D9               MOVW    R27:R26, R19:R18
   \   00000552   2455               CLR     R5
   \   00000554   01F2               MOVW    R31:R30, R5:R4
   \   00000556   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000558   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000055A   8102               LDD     R16, Z+2
   \   0000055C   E010               LDI     R17, 0
   \   0000055E   E020               LDI     R18, 0
   \   00000560   E030               LDI     R19, 0
   \   00000562   ........           CALL    ?UL2F_L04
   \   00000566   E040               LDI     R20, 0
   \   00000568   E050               LDI     R21, 0
   \   0000056A   E860               LDI     R22, 128
   \   0000056C   E37F               LDI     R23, 63
   \   0000056E   ........           CALL    ?F_ADD_L04
   \   00000572   01A8               MOVW    R21:R20, R17:R16
   \   00000574   01B9               MOVW    R23:R22, R19:R18
   \   00000576   018C               MOVW    R17:R16, R25:R24
   \   00000578   019D               MOVW    R19:R18, R27:R26
   \   0000057A   ........           CALL    ?F_DIV_L04
   \   0000057E   2D44               MOV     R20, R4
   \   00000580   E050               LDI     R21, 0
   \   00000582   0F44               LSL     R20
   \   00000584   1F55               ROL     R21
   \   00000586   0F44               LSL     R20
   \   00000588   1F55               ROL     R21
   \   0000058A   01FA               MOVW    R31:R30, R21:R20
   \   0000058C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000058E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000590   8D42               LDD     R20, Z+26
   \   00000592   8D53               LDD     R21, Z+27
   \   00000594   8D64               LDD     R22, Z+28
   \   00000596   8D75               LDD     R23, Z+29
   \   00000598   ........           CALL    ?F_ADD_L04
   \   0000059C   2D44               MOV     R20, R4
   \   0000059E   E050               LDI     R21, 0
   \   000005A0   0F44               LSL     R20
   \   000005A2   1F55               ROL     R21
   \   000005A4   0F44               LSL     R20
   \   000005A6   1F55               ROL     R21
   \   000005A8   01FA               MOVW    R31:R30, R21:R20
   \   000005AA   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000005AC   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000005AE   8F02               STD     Z+26, R16
   \   000005B0   8F13               STD     Z+27, R17
   \   000005B2   8F24               STD     Z+28, R18
   \   000005B4   8F35               STD     Z+29, R19
    180          
    181          #if USE_MODBUS_PROTOCOL == 1
    182                      OS_Unuse(&adc_lock);
    183          #endif
    184                  }
   \   000005B6   9443               INC     R4
   \   000005B8   CF19               RJMP    ??AD7715_26
   \   000005BA                      REQUIRE _A_PORTE
    185              }
    186          }
    187          /*************************************************************************
    188          *
    189          *  Set ports on or off
    190          *
    191          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    192              void SetAnaPort(void) {
   \                     SetAnaPort:
    193          
    194                  PORTC = (TData.Ana.PortUsed & 0xff);         // Set power on ports 0-7
   \   00000000   ....               LDI     R30, LOW(TData)
   \   00000002   ....               LDI     R31, (TData) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   8111               LDD     R17, Z+1
   \   00000008   B908               OUT     0x08, R16
    195                  ClrBit(PORTB, 0xe1);                            // Set power on ports 8-11 off
   \   0000000A   9100....           LDS     R16, (OS_Global + 1)
   \   0000000E   7F00               ANDI    R16, 0xF0
   \   00000010   2300               TST     R16
   \   00000012   F021               BREQ    ??SetAnaPort_0
   \   00000014   E909               LDI     R16, 153
   \   00000016   E010               LDI     R17, 0
   \   00000018   ........           CALL    OS_Error
   \                     ??SetAnaPort_0:
   \   0000001C   94F8               cli
   \   0000001E   9100....           LDS     R16, (OS_Global + 1)
   \   00000022   9503               INC     R16
   \   00000024   9300....           STS     (OS_Global + 1), R16
   \   00000028   B105               IN      R16, 0x05
   \   0000002A   710E               ANDI    R16, 0x1E
   \   0000002C   B905               OUT     0x05, R16
   \   0000002E   9100....           LDS     R16, (OS_Global + 1)
   \   00000032   7F00               ANDI    R16, 0xF0
   \   00000034   2300               TST     R16
   \   00000036   F021               BREQ    ??SetAnaPort_1
   \   00000038   E909               LDI     R16, 153
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ........           CALL    OS_Error
   \                     ??SetAnaPort_1:
   \   00000040   9100....           LDS     R16, (OS_Global + 1)
   \   00000044   950A               DEC     R16
   \   00000046   9300....           STS     (OS_Global + 1), R16
   \   0000004A   9100....           LDS     R16, (OS_Global + 1)
   \   0000004E   2300               TST     R16
   \   00000050   F409               BRNE    ??SetAnaPort_2
   \   00000052   9478               sei
    196                  SetBit(PORTB, TData.Ana.PortUsed >> 8 & 0x01);    // Set power on port 8
   \                     ??SetAnaPort_2:
   \   00000054   9100....           LDS     R16, (OS_Global + 1)
   \   00000058   7F00               ANDI    R16, 0xF0
   \   0000005A   2300               TST     R16
   \   0000005C   F021               BREQ    ??SetAnaPort_3
   \   0000005E   E909               LDI     R16, 153
   \   00000060   E010               LDI     R17, 0
   \   00000062   ........           CALL    OS_Error
   \                     ??SetAnaPort_3:
   \   00000066   94F8               cli
   \   00000068   9100....           LDS     R16, (OS_Global + 1)
   \   0000006C   9503               INC     R16
   \   0000006E   9300....           STS     (OS_Global + 1), R16
   \   00000072   ....               LDI     R30, LOW(TData)
   \   00000074   ....               LDI     R31, (TData) >> 8
   \   00000076   8101               LDD     R16, Z+1
   \   00000078   7001               ANDI    R16, 0x01
   \   0000007A   7001               ANDI    R16, 0x01
   \   0000007C   B115               IN      R17, 0x05
   \   0000007E   2B10               OR      R17, R16
   \   00000080   B915               OUT     0x05, R17
   \   00000082   9100....           LDS     R16, (OS_Global + 1)
   \   00000086   7F00               ANDI    R16, 0xF0
   \   00000088   2300               TST     R16
   \   0000008A   F021               BREQ    ??SetAnaPort_4
   \   0000008C   E909               LDI     R16, 153
   \   0000008E   E010               LDI     R17, 0
   \   00000090   ........           CALL    OS_Error
   \                     ??SetAnaPort_4:
   \   00000094   9100....           LDS     R16, (OS_Global + 1)
   \   00000098   950A               DEC     R16
   \   0000009A   9300....           STS     (OS_Global + 1), R16
   \   0000009E   9100....           LDS     R16, (OS_Global + 1)
   \   000000A2   2300               TST     R16
   \   000000A4   F409               BRNE    ??SetAnaPort_5
   \   000000A6   9478               sei
    197                  SetBit(PORTB, TData.Ana.PortUsed >> 4 & 0xe0);      // Set power on ports 9-11
   \                     ??SetAnaPort_5:
   \   000000A8   9100....           LDS     R16, (OS_Global + 1)
   \   000000AC   7F00               ANDI    R16, 0xF0
   \   000000AE   2300               TST     R16
   \   000000B0   F021               BREQ    ??SetAnaPort_6
   \   000000B2   E909               LDI     R16, 153
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   ........           CALL    OS_Error
   \                     ??SetAnaPort_6:
   \   000000BA   94F8               cli
   \   000000BC   9100....           LDS     R16, (OS_Global + 1)
   \   000000C0   9503               INC     R16
   \   000000C2   9300....           STS     (OS_Global + 1), R16
   \   000000C6   E044               LDI     R20, 4
   \   000000C8   ....               LDI     R30, LOW(TData)
   \   000000CA   ....               LDI     R31, (TData) >> 8
   \   000000CC   8100               LD      R16, Z
   \   000000CE   8111               LDD     R17, Z+1
   \   000000D0   ........           CALL    ?US_SHR_L02
   \   000000D4   7E00               ANDI    R16, 0xE0
   \   000000D6   B115               IN      R17, 0x05
   \   000000D8   2B10               OR      R17, R16
   \   000000DA   B915               OUT     0x05, R17
   \   000000DC   9100....           LDS     R16, (OS_Global + 1)
   \   000000E0   7F00               ANDI    R16, 0xF0
   \   000000E2   2300               TST     R16
   \   000000E4   F021               BREQ    ??SetAnaPort_7
   \   000000E6   E909               LDI     R16, 153
   \   000000E8   E010               LDI     R17, 0
   \   000000EA   ........           CALL    OS_Error
   \                     ??SetAnaPort_7:
   \   000000EE   9100....           LDS     R16, (OS_Global + 1)
   \   000000F2   950A               DEC     R16
   \   000000F4   9300....           STS     (OS_Global + 1), R16
   \   000000F8   9100....           LDS     R16, (OS_Global + 1)
   \   000000FC   2300               TST     R16
   \   000000FE   F409               BRNE    ??SetAnaPort_8
   \   00000100   9478               sei
    198          
    199              }
   \                     ??SetAnaPort_8:
   \   00000102   9508               RET
   \   00000104                      REQUIRE _A_PORTC
   \   00000104                      REQUIRE _A_PORTB
    200          
    201          /*************************************************************************
    202          *
    203          *  Read from AD-converter
    204          *
    205          *************************************************************************/
    206          #pragma diag_suppress=Pe550

   \                                 In  segment CODE, align 2, keep-with-next
    207              void SPI_Write(char data) {       /* SPI write data function */
   \                     SPI_Write:
    208                  char flush_buffer;
    209                  SPDR = data;            /* Write data to SPI data register */
   \   00000000   BD0E               OUT     0x2E, R16
    210                  while (!(SPSR & (1 << SPIF))); /* Wait till transmission complete */
   \                     ??SPI_Write_0:
   \   00000002   B52D               IN      R18, 0x2D
   \   00000004   2F32               MOV     R19, R18
   \   00000006   FF37               SBRS    R19, 7
   \   00000008   CFFC               RJMP    ??SPI_Write_0
    211                  flush_buffer = SPDR;        /* Flush received data */
   \   0000000A   B52E               IN      R18, 0x2E
   \   0000000C   2F12               MOV     R17, R18
    212          /* Note: SPIF flag is cleared by first reading SPSR (with SPIF set) and then accessing SPDR hence flush buffer used here to access SPDR after SPSR read */
    213              }
   \   0000000E   9508               RET
   \   00000010                      REQUIRE _A_SPDR
   \   00000010                      REQUIRE _A_SPSR
    214          

   \                                 In  segment CODE, align 2, keep-with-next
    215              char SPI_Read() {             /* SPI read data function */
   \                     SPI_Read:
    216                  SPDR = 0xFF;
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   BD0E               OUT     0x2E, R16
    217                  while (!(SPSR & (1 << SPIF)));  /* Wait till reception complete */
   \                     ??SPI_Read_0:
   \   00000004   B50D               IN      R16, 0x2D
   \   00000006   2F10               MOV     R17, R16
   \   00000008   FF17               SBRS    R17, 7
   \   0000000A   CFFC               RJMP    ??SPI_Read_0
    218                  return (SPDR);                  /* Return received data         */
   \   0000000C   B50E               IN      R16, 0x2E
   \   0000000E   9508               RET
   \   00000010                      REQUIRE _A_SPDR
   \   00000010                      REQUIRE _A_SPSR
    219              }
    220          

   \                                 In  segment CODE, align 2, keep-with-next
    221              char ReadAdByte(void) {
   \                     ReadAdByte:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    222          #if ANZBANA_V8 == 1
    223                  return SPI_Read();
    224          #else
    225                  char readbyte = 0;
   \   00000004   E090               LDI     R25, 0
    226          
    227                  for (char i = 0; i <  8; i++) {
   \   00000006   E080               LDI     R24, 0
   \                     ??ReadAdByte_0:
   \   00000008   3088               CPI     R24, 8
   \   0000000A   F008               BRCS    $+2+2
   \   0000000C   C04E               RJMP    ??ReadAdByte_1
    228                      readbyte <<= 1;                    // shift to next bit
   \   0000000E   0F99               LSL     R25
    229                      ClrBit(PORTD, ADCLK);
   \   00000010   9100....           LDS     R16, (OS_Global + 1)
   \   00000014   7F00               ANDI    R16, 0xF0
   \   00000016   2300               TST     R16
   \   00000018   F021               BREQ    ??ReadAdByte_2
   \   0000001A   E909               LDI     R16, 153
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   ........           CALL    OS_Error
   \                     ??ReadAdByte_2:
   \   00000022   94F8               cli
   \   00000024   9100....           LDS     R16, (OS_Global + 1)
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     (OS_Global + 1), R16
   \   0000002E   9859               CBI     0x0B, 0x01
   \   00000030   9100....           LDS     R16, (OS_Global + 1)
   \   00000034   7F00               ANDI    R16, 0xF0
   \   00000036   2300               TST     R16
   \   00000038   F021               BREQ    ??ReadAdByte_3
   \   0000003A   E909               LDI     R16, 153
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   ........           CALL    OS_Error
   \                     ??ReadAdByte_3:
   \   00000042   9100....           LDS     R16, (OS_Global + 1)
   \   00000046   950A               DEC     R16
   \   00000048   9300....           STS     (OS_Global + 1), R16
   \   0000004C   9100....           LDS     R16, (OS_Global + 1)
   \   00000050   2300               TST     R16
   \   00000052   F409               BRNE    ??ReadAdByte_4
   \   00000054   9478               sei
    230                      SetBit(PORTD, ADCLK);                  // set clock line high
   \                     ??ReadAdByte_4:
   \   00000056   9100....           LDS     R16, (OS_Global + 1)
   \   0000005A   7F00               ANDI    R16, 0xF0
   \   0000005C   2300               TST     R16
   \   0000005E   F021               BREQ    ??ReadAdByte_5
   \   00000060   E909               LDI     R16, 153
   \   00000062   E010               LDI     R17, 0
   \   00000064   ........           CALL    OS_Error
   \                     ??ReadAdByte_5:
   \   00000068   94F8               cli
   \   0000006A   9100....           LDS     R16, (OS_Global + 1)
   \   0000006E   9503               INC     R16
   \   00000070   9300....           STS     (OS_Global + 1), R16
   \   00000074   9A59               SBI     0x0B, 0x01
   \   00000076   9100....           LDS     R16, (OS_Global + 1)
   \   0000007A   7F00               ANDI    R16, 0xF0
   \   0000007C   2300               TST     R16
   \   0000007E   F021               BREQ    ??ReadAdByte_6
   \   00000080   E909               LDI     R16, 153
   \   00000082   E010               LDI     R17, 0
   \   00000084   ........           CALL    OS_Error
   \                     ??ReadAdByte_6:
   \   00000088   9100....           LDS     R16, (OS_Global + 1)
   \   0000008C   950A               DEC     R16
   \   0000008E   9300....           STS     (OS_Global + 1), R16
   \   00000092   9100....           LDS     R16, (OS_Global + 1)
   \   00000096   2300               TST     R16
   \   00000098   F409               BRNE    ??ReadAdByte_7
   \   0000009A   9478               sei
    231                      if (PING & ADDO) {                  // data  = 1?
   \                     ??ReadAdByte_7:
   \   0000009C   9B93               SBIS    0x12, 0x03
   \   0000009E   C002               RJMP    ??ReadAdByte_8
    232                          readbyte |= 0x01;                    // set bit high
   \   000000A0   6091               ORI     R25, 0x01
   \   000000A2   C001               RJMP    ??ReadAdByte_9
    233                      } else {
    234                          readbyte &= ~0x01;                   // set bit low
   \                     ??ReadAdByte_8:
   \   000000A4   7F9E               ANDI    R25, 0xFE
    235                      }
    236                  }
   \                     ??ReadAdByte_9:
   \   000000A6   9583               INC     R24
   \   000000A8   CFAF               RJMP    ??ReadAdByte_0
    237                  return readbyte;
   \                     ??ReadAdByte_1:
   \   000000AA   2F09               MOV     R16, R25
   \   000000AC   9189               LD      R24, Y+
   \   000000AE   9199               LD      R25, Y+
   \   000000B0   9508               RET
   \   000000B2                      REQUIRE _A_PORTD
   \   000000B2                      REQUIRE _A_PING
    238          #endif
    239              }
    240          
    241          /*************************************************************************
    242          *
    243          *  Write to AD-converter
    244          *
    245          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    246              void WriteAdByte(char data) {
   \                     WriteAdByte:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   2F90               MOV     R25, R16
    247          #if ANZBANA_V8 == 1
    248                  SPI_Write(data);
    249          #else
    250          
    251                  for (char i = 0; i <  8; i++) {
   \   00000006   E080               LDI     R24, 0
   \                     ??WriteAdByte_0:
   \   00000008   3088               CPI     R24, 8
   \   0000000A   F008               BRCS    $+2+2
   \   0000000C   C092               RJMP    ??WriteAdByte_1
    252                      ClrBit(PORTD, ADCLK);                  // set clock line low
   \   0000000E   9100....           LDS     R16, (OS_Global + 1)
   \   00000012   7F00               ANDI    R16, 0xF0
   \   00000014   2300               TST     R16
   \   00000016   F021               BREQ    ??WriteAdByte_2
   \   00000018   E909               LDI     R16, 153
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   ........           CALL    OS_Error
   \                     ??WriteAdByte_2:
   \   00000020   94F8               cli
   \   00000022   9100....           LDS     R16, (OS_Global + 1)
   \   00000026   9503               INC     R16
   \   00000028   9300....           STS     (OS_Global + 1), R16
   \   0000002C   9859               CBI     0x0B, 0x01
   \   0000002E   9100....           LDS     R16, (OS_Global + 1)
   \   00000032   7F00               ANDI    R16, 0xF0
   \   00000034   2300               TST     R16
   \   00000036   F021               BREQ    ??WriteAdByte_3
   \   00000038   E909               LDI     R16, 153
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ........           CALL    OS_Error
   \                     ??WriteAdByte_3:
   \   00000040   9100....           LDS     R16, (OS_Global + 1)
   \   00000044   950A               DEC     R16
   \   00000046   9300....           STS     (OS_Global + 1), R16
   \   0000004A   9100....           LDS     R16, (OS_Global + 1)
   \   0000004E   2300               TST     R16
   \   00000050   F409               BRNE    ??WriteAdByte_4
   \   00000052   9478               sei
    253                      if (data & 0x80) {                  // data bit = 1?
   \                     ??WriteAdByte_4:
   \   00000054   FB97               BST     R25, 7
   \   00000056   F526               BRTC    ??WriteAdByte_5
    254                          SetBit(PORTG, ADDI);                  // set data high
   \   00000058   9100....           LDS     R16, (OS_Global + 1)
   \   0000005C   7F00               ANDI    R16, 0xF0
   \   0000005E   2300               TST     R16
   \   00000060   F021               BREQ    ??WriteAdByte_6
   \   00000062   E909               LDI     R16, 153
   \   00000064   E010               LDI     R17, 0
   \   00000066   ........           CALL    OS_Error
   \                     ??WriteAdByte_6:
   \   0000006A   94F8               cli
   \   0000006C   9100....           LDS     R16, (OS_Global + 1)
   \   00000070   9503               INC     R16
   \   00000072   9300....           STS     (OS_Global + 1), R16
   \   00000076   9AA4               SBI     0x14, 0x04
   \   00000078   9100....           LDS     R16, (OS_Global + 1)
   \   0000007C   7F00               ANDI    R16, 0xF0
   \   0000007E   2300               TST     R16
   \   00000080   F021               BREQ    ??WriteAdByte_7
   \   00000082   E909               LDI     R16, 153
   \   00000084   E010               LDI     R17, 0
   \   00000086   ........           CALL    OS_Error
   \                     ??WriteAdByte_7:
   \   0000008A   9100....           LDS     R16, (OS_Global + 1)
   \   0000008E   950A               DEC     R16
   \   00000090   9300....           STS     (OS_Global + 1), R16
   \   00000094   9100....           LDS     R16, (OS_Global + 1)
   \   00000098   2300               TST     R16
   \   0000009A   F529               BRNE    ??WriteAdByte_8
   \   0000009C   9478               sei
   \   0000009E   C023               RJMP    ??WriteAdByte_8
    255                      } else {
    256                          ClrBit(PORTG, ADDI);                 // set data low
   \                     ??WriteAdByte_5:
   \   000000A0   9100....           LDS     R16, (OS_Global + 1)
   \   000000A4   7F00               ANDI    R16, 0xF0
   \   000000A6   2300               TST     R16
   \   000000A8   F021               BREQ    ??WriteAdByte_9
   \   000000AA   E909               LDI     R16, 153
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   ........           CALL    OS_Error
   \                     ??WriteAdByte_9:
   \   000000B2   94F8               cli
   \   000000B4   9100....           LDS     R16, (OS_Global + 1)
   \   000000B8   9503               INC     R16
   \   000000BA   9300....           STS     (OS_Global + 1), R16
   \   000000BE   98A4               CBI     0x14, 0x04
   \   000000C0   9100....           LDS     R16, (OS_Global + 1)
   \   000000C4   7F00               ANDI    R16, 0xF0
   \   000000C6   2300               TST     R16
   \   000000C8   F021               BREQ    ??WriteAdByte_10
   \   000000CA   E909               LDI     R16, 153
   \   000000CC   E010               LDI     R17, 0
   \   000000CE   ........           CALL    OS_Error
   \                     ??WriteAdByte_10:
   \   000000D2   9100....           LDS     R16, (OS_Global + 1)
   \   000000D6   950A               DEC     R16
   \   000000D8   9300....           STS     (OS_Global + 1), R16
   \   000000DC   9100....           LDS     R16, (OS_Global + 1)
   \   000000E0   2300               TST     R16
   \   000000E2   F409               BRNE    ??WriteAdByte_8
   \   000000E4   9478               sei
    257                      }
    258                      data <<= 1;                        // shift to next bit
   \                     ??WriteAdByte_8:
   \   000000E6   0F99               LSL     R25
    259                      SetBit(PORTD, ADCLK);                  // set clock line high
   \   000000E8   9100....           LDS     R16, (OS_Global + 1)
   \   000000EC   7F00               ANDI    R16, 0xF0
   \   000000EE   2300               TST     R16
   \   000000F0   F021               BREQ    ??WriteAdByte_11
   \   000000F2   E909               LDI     R16, 153
   \   000000F4   E010               LDI     R17, 0
   \   000000F6   ........           CALL    OS_Error
   \                     ??WriteAdByte_11:
   \   000000FA   94F8               cli
   \   000000FC   9100....           LDS     R16, (OS_Global + 1)
   \   00000100   9503               INC     R16
   \   00000102   9300....           STS     (OS_Global + 1), R16
   \   00000106   9A59               SBI     0x0B, 0x01
   \   00000108   9100....           LDS     R16, (OS_Global + 1)
   \   0000010C   7F00               ANDI    R16, 0xF0
   \   0000010E   2300               TST     R16
   \   00000110   F021               BREQ    ??WriteAdByte_12
   \   00000112   E909               LDI     R16, 153
   \   00000114   E010               LDI     R17, 0
   \   00000116   ........           CALL    OS_Error
   \                     ??WriteAdByte_12:
   \   0000011A   9100....           LDS     R16, (OS_Global + 1)
   \   0000011E   950A               DEC     R16
   \   00000120   9300....           STS     (OS_Global + 1), R16
   \   00000124   9100....           LDS     R16, (OS_Global + 1)
   \   00000128   2300               TST     R16
   \   0000012A   F409               BRNE    ??WriteAdByte_13
   \   0000012C   9478               sei
    260                  }
   \                     ??WriteAdByte_13:
   \   0000012E   9583               INC     R24
   \   00000130   CF6B               RJMP    ??WriteAdByte_0
    261          #endif
    262              }
   \                     ??WriteAdByte_1:
   \   00000132   9189               LD      R24, Y+
   \   00000134   9199               LD      R25, Y+
   \   00000136   9508               RET
   \   00000138                      REQUIRE _A_PORTD
   \   00000138                      REQUIRE _A_PORTG
    263          
    264          /*************************************************************************
    265          *  
    266          * public utilities
    267          *
    268          *************************************************************************/
    269          #if USE_MODBUS_PROTOCOL == 1
    270              static inline float
    271                  u16_to_float_offset(uint16_t offset) {
    272                  return ((float)offset - 20000.0f) / 10000.0f;
    273              }
    274          
    275              static inline uint16_t
    276                  float_offset_to_u16(float offset) {
    277                  return (uint16_t)(floor(offset * 10000 + 0.5f)) + 20000;
    278              }
    279          
    280              static inline float
    281                  u16_to_float_gain(uint16_t gain) {
    282                  return ((float)gain) / 10000.0f;
    283              }
    284          
    285              static inline uint16_t
    286                  float_gain_to_u16(float gain) {
    287                  return (uint16_t)(floor(gain * 10000.0f + 0.5f));
    288              }
    289          
    290              static inline float
    291                  u16_to_float_filter(uint16_t filter) {
    292                  return filter / 10000.0f;
    293              }
    294          
    295              static inline uint16_t
    296                  float_filter_to_u16(float filter) {
    297                  return (uint16_t)(floor(filter * 10000 + 0.5f));
    298              }
    299          
    300              static inline uint16_t
    301                  float_ma_to_u16(float ma) {
    302                  return (uint16_t)(floor(ma * 1000.0f + 0.5f));
    303              }
    304          
    305              static void
    306                  load_eeprom_misc(void) {
    307                  char ch;
    308                  uint16_t temp;
    309          
    310                  for (ch = 0; ch < 2; ch++) {
    311                      ReadEEPROMBuffer(EEPROM_RSP_DELAY_ADDR(ch), sizeof(uint16_t), (char *)&temp);
    312          
    313                      if (temp > 0 && temp <= 5000) {
    314                          TData.Ana.Rsp_Delay[ch] = temp;
    315                      } else {
    316                          TData.Ana.Rsp_Delay[ch] = 0;
    317                      }
    318                  }
    319              }
    320          
    321          //
    322          // gain
    323          //
    324              static inline void
    325                  __adc_task_set_gain(uint8_t ch, uint16_t gain) {
    326                  float gain_f;
    327                  uint16_t gain_cur = float_gain_to_u16(TData.Ana.Gain[ch]);
    328          
    329                  if (gain == gain_cur) {
    330                      return;
    331                  }
    332          
    333                  gain_f = u16_to_float_gain(gain);
    334                  if (fcompare(gain_f, ADC_GAIN_MIN) <= 0 || fcompare(gain_f, ADC_GAIN_MAX) >= 0) {
    335                      // invalid value just silently ignore
    336                      return;
    337                  }
    338          
    339                  TData.Ana.Gain[ch] = gain_f;
    340                  WriteEEPROMBufferSync(EEPROM_GAIN_ADDR(ch), sizeof(float), (char *)&gain_f);
    341              }
    342          
    343              void
    344                  adc_task_set_gain(uint8_t ch, uint16_t gain) {
    345                  OS_Use(&adc_lock);
    346                  __adc_task_set_gain(ch, gain);
    347                  OS_Unuse(&adc_lock);
    348              }
    349          
    350              uint16_t
    351                  adc_task_get_gain(uint8_t ch) {
    352                  uint16_t ret;
    353          
    354                  OS_Use(&adc_lock);
    355                  ret = float_gain_to_u16(TData.Ana.Gain[ch]);
    356                  OS_Unuse(&adc_lock);
    357          
    358                  return ret;
    359              }
    360          
    361          //
    362          // offset
    363          //
    364              static void
    365                  __adc_task_set_offset(uint8_t ch, uint16_t offset) {
    366                  float offset_f;
    367                  uint16_t offset_cur = float_offset_to_u16(TData.Ana.Offset[ch]);
    368          
    369                  if (offset == offset_cur) {
    370                      return;
    371                  }
    372          
    373                  offset_f = u16_to_float_offset(offset);
    374                  if (fcompare(offset_f, ADC_OFFSET_MIN) <= 0 || fcompare(offset_f, ADC_OFFSET_MAX) >= 0) {
    375                      // invalid value just silently ignore
    376                      return;
    377                  }
    378          
    379                  TData.Ana.Offset[ch] = offset_f;
    380          
    381                  WriteEEPROMBufferSync(EEPROM_OFFSET_ADDR(ch), sizeof(float), (char *)&offset_f);
    382              }
    383          
    384              void
    385                  adc_task_set_offset(uint8_t ch, uint16_t offset) {
    386                  OS_Use(&adc_lock);
    387                  __adc_task_set_offset(ch, offset);
    388                  OS_Unuse(&adc_lock);
    389              }
    390          
    391              uint16_t
    392                  adc_task_get_offset(uint8_t ch) {
    393                  uint16_t ret;
    394          
    395                  OS_Use(&adc_lock);
    396                  ret =  float_offset_to_u16(TData.Ana.Offset[ch]);
    397                  OS_Unuse(&adc_lock);
    398          
    399                  return ret;
    400              }
    401          
    402          //
    403          // filter
    404          //
    405              static void
    406                  __adc_task_set_filter(uint8_t ch, uint16_t filter) {
    407                  float filter_f;
    408                  uint16_t filter_cur = float_filter_to_u16(TData.Ana.Filter[ch]);
    409          
    410                  if (filter_cur == filter) {
    411                      return;
    412                  }
    413          
    414                  filter_f = u16_to_float_filter(filter);
    415                  if (fcompare(filter_f, ADC_FILTER_MIN) <= 0 || fcompare(filter_f, ADC_FILTER_MAX) >= 0) {
    416                      // invalid value just silently ignore
    417                      return;
    418                  }
    419          
    420                  TData.Ana.Filter[ch] = filter_f;
    421              }
    422          
    423              void
    424                  adc_task_set_filter(uint8_t ch, uint16_t filter) {
    425                  OS_Use(&adc_lock);
    426                  __adc_task_set_filter(ch, filter);
    427                  OS_Unuse(&adc_lock);
    428              }
    429          
    430              uint16_t
    431                  adc_task_get_filter(uint8_t ch) {
    432                  uint16_t ret;
    433          
    434                  OS_Use(&adc_lock);
    435                  ret = float_filter_to_u16(TData.Ana.Filter[ch]);
    436                  OS_Unuse(&adc_lock);
    437          
    438                  return ret;
    439              }
    440          
    441          //
    442          // power
    443          //
    444              static void
    445                  adc_task_control_port_power(uint8_t ch, uint8_t on) {
    446                  switch (ch) {
    447                  case 0:
    448                  case 1:
    449                  case 2:
    450                  case 3:
    451                  case 4:
    452                  case 5:
    453                  case 6:
    454                  case 7:
    455                      // PORTC 0-7
    456                      if (on) {
    457                          SetBit(PORTC, _BV(ch));
    458                      } else {
    459                          ClrBit(PORTC, _BV(ch));
    460                      }
    461                      break;
    462          
    463                  case 8:
    464                      // PORTB 0
    465                      if (on) {
    466                          SetBit(PORTB, _BV(0));
    467                      } else {
    468                          ClrBit(PORTB, _BV(0));
    469                      }
    470                      break;
    471          
    472                  case 9:
    473                  case 10:
    474                  case 11:
    475                      // PORTB 5-7
    476                      if (on) {
    477                          SetBit(PORTB, _BV(ch - 4));
    478                      } else {
    479                          ClrBit(PORTB, _BV(ch - 4));
    480                      }
    481                      break;
    482                  }
    483              }
    484          
    485              static void
    486                  __adc_task_set_power(uint8_t ch, uint8_t on) {
    487                  uint8_t current;
    488          
    489                  current = (TData.Ana.PortUsed >> ch) & 0x01;
    490          
    491                  if (current == on) {
    492                      // no need to waste time
    493                      return;
    494                  }
    495          
    496                  adc_task_control_port_power(ch, on);
    497          
    498                  // save to eeprom
    499                  if (on) {
    500                      TData.Ana.PortUsed |= (1 << ch);
    501                  } else {
    502                      TData.Ana.PortUsed &= ~(1 << ch);
    503                  }
    504          
    505                  WriteEEPROMByte(EEPROM_PORTSETUP + 0, (TData.Ana.PortUsed & 0xff));
    506                  WriteEEPROMByte(EEPROM_PORTSETUP + 1, (TData.Ana.PortUsed >> 8) & 0xff);
    507              }
    508          
    509              void
    510                  adc_task_set_power(uint8_t ch, uint8_t on) {
    511                  OS_Use(&adc_lock);
    512                  __adc_task_set_power(ch, on);
    513                  OS_Unuse(&adc_lock);
    514              }
    515          
    516              uint8_t
    517                  adc_task_get_power(uint8_t ch) {
    518                  uint8_t status;
    519          
    520                  OS_Use(&adc_lock);
    521                  status = (TData.Ana.PortUsed >> ch) & 0x01;
    522                  OS_Unuse(&adc_lock);
    523          
    524                  return status;
    525              }
    526          
    527          //
    528          // status
    529          //
    530              uint8_t
    531                  adc_task_get_status(uint8_t ch) {
    532                  uint8_t status;
    533          
    534                  OS_Use(&adc_lock);
    535                  status = TData.Ana.Status[ch];
    536                  OS_Unuse(&adc_lock);
    537          
    538                  return status;
    539              }
    540          
    541          //
    542          // ma
    543          //
    544              uint16_t
    545                  adc_task_get_ma(uint8_t ch) {
    546                  float ma_f;
    547          
    548                  OS_Use(&adc_lock);
    549                  ma_f = TData.Ana.Result[ch];
    550                  OS_Unuse(&adc_lock);
    551          
    552                  return float_ma_to_u16(ma_f);
    553              }
    554          
    555              static void
    556                  __adc_task_set_rsp_delay(char port, uint16_t delay) {
    557                  uint16_t cur_delay = TData.Ana.Rsp_Delay[port];
    558          
    559                  if (cur_delay == delay) {
    560                      return;
    561                  }
    562          
    563                  if (delay > 5000) {
    564                      return;
    565                  }
    566          
    567                  TData.Ana.Rsp_Delay[port] = delay;
    568          
    569                  WriteEEPROMBufferSync(EEPROM_RSP_DELAY_ADDR(port), sizeof(uint16_t), (char *)&delay);
    570              }
    571          
    572              void
    573                  adc_task_set_rsp_delay(char port, uint16_t delay) {
    574                  OS_Use(&adc_lock);
    575                  __adc_task_set_rsp_delay(port, delay);
    576                  OS_Unuse(&adc_lock);
    577              }
    578          
    579              uint16_t
    580                  adc_task_get_rsp_delay(char port) {
    581                  uint16_t    ret;
    582          
    583                  OS_Use(&adc_lock);
    584                  ret = TData.Ana.Rsp_Delay[port];
    585                  OS_Unuse(&adc_lock);
    586          
    587                  return ret;
    588              }
    589          
    590          #endif /* USE_MODBUS_PROTOCOL == 1 */
    591          
    592          
    593              

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     10      2   AD7715
       10      2   -> IsFloat
       10      2   -> OS_ClearEvents
       10      2   -> OS_Delay
       10      2   -> OS_Error
       10      2   -> OS_WaitEventTimed
       10      2   -> ReadAdByte
       10      2   -> ReadEEPROMBuffer
       10      2   -> ReadEEPROMByte
       10      2   -> SetAnaPort
       10      2   -> WriteAdByte
       10      2   -> fcompare
       10      2 ?F_ADD_L04
       10      2 ?F_DIV_L04
       10      2 ?F_MUL_L04
       10      2 ?F_SUB_L04
       10      2 ?S_EC_MUL_L02
       10      2 ?UL2F_L04
      2      2   ReadAdByte
        2      2   -> OS_Error
      0      2   SPI_Read
      0      2   SPI_Write
      0      2   SetAnaPort
        0      2   -> OS_Error
        0      2 ?US_SHR_L02
      2      2   WriteAdByte
        2      2   -> OS_Error
      8      2   fcompare
        8      2 ?F_CMP_GE_L04
        8      2 ?F_CMP_LT_L04
        8      2 ?F_SUB_L04


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
    1466  AD7715
     178  ReadAdByte
      16  SPI_Read
      16  SPI_Write
     260  SetAnaPort
     312  WriteAdByte
       1  _A_PING
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTG
       1  _A_SPDR
       1  _A_SPSR
      98  fcompare

 
     8 bytes in segment ABSOLUTE
 2 346 bytes in segment CODE
 
 2 346 bytes of CODE memory
     0 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
