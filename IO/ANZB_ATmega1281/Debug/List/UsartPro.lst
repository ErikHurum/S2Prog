###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       26/Feb/2024  10:49:10
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\UsartPro.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWD38B.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\UsartPro.c"
#        --cpu=m1281 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\Obj" -D
#        OS_LIBMODE_D -D OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D
#        USE_1281_RX_INT_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=0 -D
#        __ATMEGA_1281__ -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\List" -y
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\List\UsartPro.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\UsartPro.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\UsartPro.c
      1          /****************************************************************************************
      2          / Com protocol for USART0&1
      3          /
      4          ***************************************************************************************/
      5          
      6          #ifdef __ATMEGA_1280__
      7              #include	"iom1280.h"
      8          #endif
      9          
     10          #ifdef __ATMEGA_1281__
     11              #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3f
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
     12          #endif
     13          #include "stdio.h"
     14          #include "math.h"
     15          #include "string.h"
     16          #include "externals.h"
     17          #include "version.h"

   \                                 In  segment ABSOLUTE, at 0x21fd
     18          __no_init int RestartCnt             @0x21FD;
   \                     RestartCnt:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x21ff
     19          __no_init char BootloaderRevision    @0x21FF;
   \                     BootloaderRevision:
   \   00000000                      DS8 1
     20          
     21          
     22          /*************************************************************************
     23          *   (This is a timer calback)
     24          *  Timout timer USART 0
     25          *
     26          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     27          void TimoutUSART0(void) {
   \                     TimoutUSART0:
     28          
     29              UCSR0B &= ~(__BIT_MASK(UDRIE0));            // transmission end, disable int.
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   7D0F               ANDI    R16, 0xDF
   \   00000006   930000C1           STS     193, R16
     30              ClrBit(PORTE, 0x04);                              // TXE0 off
   \   0000000A   9100....           LDS     R16, (OS_Global + 1)
   \   0000000E   7F00               ANDI    R16, 0xF0
   \   00000010   2300               TST     R16
   \   00000012   F021               BREQ    ??TimoutUSART0_0
   \   00000014   E909               LDI     R16, 153
   \   00000016   E010               LDI     R17, 0
   \   00000018   ........           CALL    OS_Error
   \                     ??TimoutUSART0_0:
   \   0000001C   94F8               cli
   \   0000001E   9100....           LDS     R16, (OS_Global + 1)
   \   00000022   9503               INC     R16
   \   00000024   9300....           STS     (OS_Global + 1), R16
   \   00000028   9872               CBI     0x0E, 0x02
   \   0000002A   9100....           LDS     R16, (OS_Global + 1)
   \   0000002E   7F00               ANDI    R16, 0xF0
   \   00000030   2300               TST     R16
   \   00000032   F021               BREQ    ??TimoutUSART0_1
   \   00000034   E909               LDI     R16, 153
   \   00000036   E010               LDI     R17, 0
   \   00000038   ........           CALL    OS_Error
   \                     ??TimoutUSART0_1:
   \   0000003C   9100....           LDS     R16, (OS_Global + 1)
   \   00000040   950A               DEC     R16
   \   00000042   9300....           STS     (OS_Global + 1), R16
   \   00000046   9100....           LDS     R16, (OS_Global + 1)
   \   0000004A   2300               TST     R16
   \   0000004C   F409               BRNE    ??TimoutUSART0_2
   \   0000004E   9478               sei
     31          #if USE_1281_RX_INT_TASK == 0
     32              OS_StopTimer(&TimerUSART0);                    // and stop timer
     33          #endif
     34              GoToSyncUART(0);                                    // go to sync modus for recive
   \                     ??TimoutUSART0_2:
   \   00000050   E000               LDI     R16, 0
   \   00000052   ....               RCALL   GoToSyncUART
     35          }
   \   00000054   9508               RET
   \   00000056                      REQUIRE _A_UCSR0B
   \   00000056                      REQUIRE _A_PORTE
     36          
     37          /*************************************************************************
     38          *   (This is a timer calback)
     39          *  Timer USART 0 on before TX
     40          *
     41          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     42          void TimoutUSART0On(void) {
   \                     TimoutUSART0On:
     43          
     44              UCSR0B |= __BIT_MASK(UDRIE0);                     // start sending by enableing interrupt
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   6200               ORI     R16, 0x20
   \   00000006   930000C1           STS     193, R16
     45          #if USE_1281_RX_INT_TASK == 0
     46              OS_StopTimer(&TimerUSART0On);                    // and stop timer
     47          #endif
     48          }
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_UCSR0B
     49          
     50          /*************************************************************************
     51          *   (This is a timer calback)
     52          *  Timout timer USART 1
     53          *
     54          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     55          void TimoutUSART1(void) {
   \                     TimoutUSART1:
     56          
     57              UCSR1B &= ~(__BIT_MASK(UDRIE1));            // transmission end, disable int.
   \   00000000   910000C9           LDS     R16, 201
   \   00000004   7D0F               ANDI    R16, 0xDF
   \   00000006   930000C9           STS     201, R16
     58              ClrBit(PORTE, 0x08);                              // TXE1 off
   \   0000000A   9100....           LDS     R16, (OS_Global + 1)
   \   0000000E   7F00               ANDI    R16, 0xF0
   \   00000010   2300               TST     R16
   \   00000012   F021               BREQ    ??TimoutUSART1_0
   \   00000014   E909               LDI     R16, 153
   \   00000016   E010               LDI     R17, 0
   \   00000018   ........           CALL    OS_Error
   \                     ??TimoutUSART1_0:
   \   0000001C   94F8               cli
   \   0000001E   9100....           LDS     R16, (OS_Global + 1)
   \   00000022   9503               INC     R16
   \   00000024   9300....           STS     (OS_Global + 1), R16
   \   00000028   9873               CBI     0x0E, 0x03
   \   0000002A   9100....           LDS     R16, (OS_Global + 1)
   \   0000002E   7F00               ANDI    R16, 0xF0
   \   00000030   2300               TST     R16
   \   00000032   F021               BREQ    ??TimoutUSART1_1
   \   00000034   E909               LDI     R16, 153
   \   00000036   E010               LDI     R17, 0
   \   00000038   ........           CALL    OS_Error
   \                     ??TimoutUSART1_1:
   \   0000003C   9100....           LDS     R16, (OS_Global + 1)
   \   00000040   950A               DEC     R16
   \   00000042   9300....           STS     (OS_Global + 1), R16
   \   00000046   9100....           LDS     R16, (OS_Global + 1)
   \   0000004A   2300               TST     R16
   \   0000004C   F409               BRNE    ??TimoutUSART1_2
   \   0000004E   9478               sei
     59          #if USE_1281_RX_INT_TASK == 0
     60              OS_StopTimer(&TimerUSART1);                    // and stop timer
     61          #endif
     62              GoToSyncUART(1);                                    // go to sync modus for recive
   \                     ??TimoutUSART1_2:
   \   00000050   E001               LDI     R16, 1
   \   00000052   ....               RCALL   GoToSyncUART
     63          }
   \   00000054   9508               RET
   \   00000056                      REQUIRE _A_UCSR1B
   \   00000056                      REQUIRE _A_PORTE
     64          
     65          
     66          /*************************************************************************
     67          *   (This is a timer calback)
     68          *  Timer USART 1 on before TX
     69          *
     70          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     71          void TimoutUSART1On(void) {
   \                     TimoutUSART1On:
     72          
     73              UCSR1B |= __BIT_MASK(UDRIE1);                     // start sending by enableing interrupt
   \   00000000   910000C9           LDS     R16, 201
   \   00000004   6200               ORI     R16, 0x20
   \   00000006   930000C9           STS     201, R16
     74          #if USE_1281_RX_INT_TASK == 0
     75              OS_StopTimer(&TimerUSART1On);                    // and stop timer
     76          #endif
     77          }
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_UCSR1B
     78          
     79          
     80          #if USE_1281_RX_INT_TASK==0
     81          /*************************************************************************
     82          *   (This is a task)
     83          *  Usart0 handler
     84          *
     85          *************************************************************************/
     86          void Usart0Handler(void) {
     87          
     88              while (1) {
     89                  OS_WaitEvent(1);
     90                  OS_Use(&UARTSEND);
     91                  UsartCheckPackage(0);
     92                  OS_Unuse(&UARTSEND);
     93              }
     94          }
     95          
     96          /*************************************************************************
     97          *   (This is a task)
     98          *  Usart1 handler
     99          *
    100          *************************************************************************/
    101          void Usart1Handler(void) {
    102          
    103              while (1) {
    104                  OS_WaitEvent(1);
    105                  OS_Use(&UARTSEND);
    106                  UsartCheckPackage(1);
    107                  OS_Unuse(&UARTSEND);
    108              }
    109          }
    110          #endif
    111          /*************************************************************************
    112          *
    113          *  Check the incoming packages
    114          *
    115          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    116          void UsartCheckPackage(char ch) {
   \                     UsartCheckPackage:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2FA0               MOV     R26, R16
    117          
    118              unsigned short pointer;
    119              char    retval;
    120          
    121              UART[ch].RxSendReply = false;                              // flag for answering set to fault
   \   00000006   2F0A               MOV     R16, R26
   \   00000008   E010               LDI     R17, 0
   \   0000000A   2F10               MOV     R17, R16
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   0F11               LSL     R17
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   ....               SUBI    R30, LOW((-(UART + 446) & 0xFFFF))
   \   00000014   ....               SBCI    R31, HIGH((-(UART + 446) & 0xFFFF))
   \   00000016   E000               LDI     R16, 0
   \   00000018   8300               ST      Z, R16
    122              UART[ch].TxFirst = 11;                                     // Start pos for first TX command
   \   0000001A   2F0A               MOV     R16, R26
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   2F10               MOV     R17, R16
   \   00000020   E000               LDI     R16, 0
   \   00000022   0F11               LSL     R17
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000028   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000002A   E00B               LDI     R16, 11
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   8300               ST      Z, R16
   \   00000030   8311               STD     Z+1, R17
    123              pointer = 7;
   \   00000032   E087               LDI     R24, 7
   \   00000034   E090               LDI     R25, 0
    124              do {
    125                  retval = CheckActionUart(ch, pointer);
   \                     ??UsartCheckPackage_0:
   \   00000036   019C               MOVW    R19:R18, R25:R24
   \   00000038   2F0A               MOV     R16, R26
   \   0000003A   ....               RCALL   CheckActionUart
   \   0000003C   2FB0               MOV     R27, R16
    126                  pointer = pointer + UART[ch].pRxBuffer[pointer + 2]
    127                      + (UART[ch].pRxBuffer[pointer + 3] * 256) + 4;      // Point to a command cmd hb/lb
   \   0000003E   ....               LDI     R30, LOW((UART + 285))
   \   00000040   ....               LDI     R31, HIGH((UART + 285))
   \   00000042   0FE8               ADD     R30, R24
   \   00000044   1FF9               ADC     R31, R25
   \   00000046   2F0A               MOV     R16, R26
   \   00000048   E010               LDI     R17, 0
   \   0000004A   2F10               MOV     R17, R16
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   0F11               LSL     R17
   \   00000050   0FE0               ADD     R30, R16
   \   00000052   1FF1               ADC     R31, R17
   \   00000054   8100               LD      R16, Z
   \   00000056   E010               LDI     R17, 0
   \   00000058   ....               LDI     R30, LOW((UART + 286))
   \   0000005A   ....               LDI     R31, HIGH((UART + 286))
   \   0000005C   0FE8               ADD     R30, R24
   \   0000005E   1FF9               ADC     R31, R25
   \   00000060   2F2A               MOV     R18, R26
   \   00000062   E030               LDI     R19, 0
   \   00000064   2F32               MOV     R19, R18
   \   00000066   E020               LDI     R18, 0
   \   00000068   0F33               LSL     R19
   \   0000006A   0FE2               ADD     R30, R18
   \   0000006C   1FF3               ADC     R31, R19
   \   0000006E   8120               LD      R18, Z
   \   00000070   E030               LDI     R19, 0
   \   00000072   2F32               MOV     R19, R18
   \   00000074   E020               LDI     R18, 0
   \   00000076   0F02               ADD     R16, R18
   \   00000078   1F13               ADC     R17, R19
   \   0000007A   5F0C               SUBI    R16, 252
   \   0000007C   4F1F               SBCI    R17, 255
   \   0000007E   0F80               ADD     R24, R16
   \   00000080   1F91               ADC     R25, R17
    128              } while (retval && (pointer < (UART[ch].RxPacklen - 4)));
   \   00000082   23BB               TST     R27
   \   00000084   F079               BREQ    ??UsartCheckPackage_1
   \   00000086   2F0A               MOV     R16, R26
   \   00000088   E010               LDI     R17, 0
   \   0000008A   2F10               MOV     R17, R16
   \   0000008C   E000               LDI     R16, 0
   \   0000008E   0F11               LSL     R17
   \   00000090   01F8               MOVW    R31:R30, R17:R16
   \   00000092   ....               SUBI    R30, LOW((-(UART + 443) & 0xFFFF))
   \   00000094   ....               SBCI    R31, HIGH((-(UART + 443) & 0xFFFF))
   \   00000096   8100               LD      R16, Z
   \   00000098   8111               LDD     R17, Z+1
   \   0000009A   5004               SUBI    R16, 4
   \   0000009C   4010               SBCI    R17, 0
   \   0000009E   1780               CP      R24, R16
   \   000000A0   0791               CPC     R25, R17
   \   000000A2   F248               BRCS    ??UsartCheckPackage_0
    129              if (UART[ch].RxSendReply) {                                   //send answer?
   \                     ??UsartCheckPackage_1:
   \   000000A4   2F0A               MOV     R16, R26
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   2F10               MOV     R17, R16
   \   000000AA   E000               LDI     R16, 0
   \   000000AC   0F11               LSL     R17
   \   000000AE   01F8               MOVW    R31:R30, R17:R16
   \   000000B0   ....               SUBI    R30, LOW((-(UART + 446) & 0xFFFF))
   \   000000B2   ....               SBCI    R31, HIGH((-(UART + 446) & 0xFFFF))
   \   000000B4   8100               LD      R16, Z
   \   000000B6   2300               TST     R16
   \   000000B8   F021               BREQ    ??UsartCheckPackage_2
    130                  Uart_BuildTail(ch);                                       // yes, build tail (and header) and start sending
   \   000000BA   2F0A               MOV     R16, R26
   \   000000BC   ........           CALL    Uart_BuildTail
   \   000000C0   C003               RJMP    ??UsartCheckPackage_3
    131              } else {
    132                  GoToSyncUART(ch);                                        // go to sync modus here if not reply
   \                     ??UsartCheckPackage_2:
   \   000000C2   2F0A               MOV     R16, R26
   \   000000C4   ........           CALL    GoToSyncUART
    133              }
    134          }
   \                     ??UsartCheckPackage_3:
   \   000000C8   E0E4               LDI     R30, 4
   \   000000CA   ........           JMP     ?EPILOGUE_B4_L09
    135          
    136          
    137          /*************************************************************************
    138          *
    139          *  Check action on received data
    140          *
    141          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    142          char CheckActionUart(char ch, unsigned short pointer) {
   \                     CheckActionUart:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    143          
    144              unsigned short   command;
    145              char    retval = true;
   \   00000008   E0B1               LDI     R27, 1
    146          
    147              command = UART[ch].pRxBuffer[pointer] | (UART[ch].pRxBuffer[pointer + 1] << 8);
   \   0000000A   ....               LDI     R30, LOW((UART + 283))
   \   0000000C   ....               LDI     R31, HIGH((UART + 283))
   \   0000000E   0FE8               ADD     R30, R24
   \   00000010   1FF9               ADC     R31, R25
   \   00000012   2F0A               MOV     R16, R26
   \   00000014   E010               LDI     R17, 0
   \   00000016   2F10               MOV     R17, R16
   \   00000018   E000               LDI     R16, 0
   \   0000001A   0F11               LSL     R17
   \   0000001C   0FE0               ADD     R30, R16
   \   0000001E   1FF1               ADC     R31, R17
   \   00000020   8100               LD      R16, Z
   \   00000022   ....               LDI     R30, LOW((UART + 284))
   \   00000024   ....               LDI     R31, HIGH((UART + 284))
   \   00000026   0FE8               ADD     R30, R24
   \   00000028   1FF9               ADC     R31, R25
   \   0000002A   2F2A               MOV     R18, R26
   \   0000002C   E030               LDI     R19, 0
   \   0000002E   2F32               MOV     R19, R18
   \   00000030   E020               LDI     R18, 0
   \   00000032   0F33               LSL     R19
   \   00000034   0FE2               ADD     R30, R18
   \   00000036   1FF3               ADC     R31, R19
   \   00000038   8110               LD      R17, Z
   \   0000003A   0128               MOVW    R5:R4, R17:R16
    148              switch (command) {                                  // check action
   \   0000003C   0182               MOVW    R17:R16, R5:R4
   \   0000003E   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart>_0`)
   \   00000040   ....               LDI     R31, (`?<Jumptable for CheckActionUart>_0`) >> 16
   \   00000042   BFFB               OUT     0x3B, R31
   \   00000044   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart>_0`)
   \   00000046   ........           JMP     ?SV_SWITCH_L06
    149              case CMD_REQ_STATUS :                           // Regusest status for target
    150                  BuildStatusData(ch);                         // make package
   \                     ??CheckActionUart_0:
   \   0000004A   2F0A               MOV     R16, R26
   \   0000004C   ....               RCALL   BuildStatusData
    151                  break;
   \   0000004E   C0D7               RJMP    ??CheckActionUart_1
    152          
    153              case CMD_GET_STACKSTATUS :                        // Request stck status
    154                  BuildStackStatus(ch, pointer + 4);                     // receive package
   \                     ??CheckActionUart_2:
   \   00000050   019C               MOVW    R19:R18, R25:R24
   \   00000052   5F2C               SUBI    R18, 252
   \   00000054   4F3F               SBCI    R19, 255
   \   00000056   2F0A               MOV     R16, R26
   \   00000058   ....               RCALL   BuildStackStatus
    155                  break;
   \   0000005A   C0D1               RJMP    ??CheckActionUart_1
    156          
    157              case CMD_EEPROM_RESET :                        // Reset EEPROM??
    158                  GetResetEEPROM(ch, pointer + 4);                     // receive package
   \                     ??CheckActionUart_3:
   \   0000005C   019C               MOVW    R19:R18, R25:R24
   \   0000005E   5F2C               SUBI    R18, 252
   \   00000060   4F3F               SBCI    R19, 255
   \   00000062   2F0A               MOV     R16, R26
   \   00000064   ....               RCALL   GetResetEEPROM
    159                  break;
   \   00000066   C0CB               RJMP    ??CheckActionUart_1
    160          
    161              case CMD_GOTO_BOOTLOADER :                        // Goto bootlaoder??
    162                  GetGotoBootloader(ch, pointer + 4);                     // receive package
   \                     ??CheckActionUart_4:
   \   00000068   019C               MOVW    R19:R18, R25:R24
   \   0000006A   5F2C               SUBI    R18, 252
   \   0000006C   4F3F               SBCI    R19, 255
   \   0000006E   2F0A               MOV     R16, R26
   \   00000070   ....               RCALL   GetGotoBootloader
    163                  break;
   \   00000072   C0C5               RJMP    ??CheckActionUart_1
    164          
    165              case CMD_SND_EEPROM_DATA :                              // Receive EEPROM data
    166                  GetEEPROMData(ch, pointer + 4);                     // receive package
   \                     ??CheckActionUart_5:
   \   00000074   019C               MOVW    R19:R18, R25:R24
   \   00000076   5F2C               SUBI    R18, 252
   \   00000078   4F3F               SBCI    R19, 255
   \   0000007A   2F0A               MOV     R16, R26
   \   0000007C   ....               RCALL   GetEEPROMData
    167                  break;
   \   0000007E   C0BF               RJMP    ??CheckActionUart_1
    168          
    169              case CMD_REQ_EEPROM_DATA :                              // Request to send EEPROM data
    170                  BuildEEPROMData(ch, pointer + 4);                     // receive package
   \                     ??CheckActionUart_6:
   \   00000080   019C               MOVW    R19:R18, R25:R24
   \   00000082   5F2C               SUBI    R18, 252
   \   00000084   4F3F               SBCI    R19, 255
   \   00000086   2F0A               MOV     R16, R26
   \   00000088   ....               RCALL   BuildEEPROMData
    171                  break;
   \   0000008A   C0B9               RJMP    ??CheckActionUart_1
    172          
    173              case CMD_REQ_INT_DATA :                              // Request external data
    174                  BuildADInt(ch, pointer + 4);                     // receive package
   \                     ??CheckActionUart_7:
   \   0000008C   019C               MOVW    R19:R18, R25:R24
   \   0000008E   5F2C               SUBI    R18, 252
   \   00000090   4F3F               SBCI    R19, 255
   \   00000092   2F0A               MOV     R16, R26
   \   00000094   ........           CALL    BuildADInt
    175                  break;
   \   00000098   C0B2               RJMP    ??CheckActionUart_1
    176          
    177              case CMD_SND_RS4_SETUP :                              // Receive sertup of AN-RS485
    178                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_8:
   \   0000009A   9100....           LDS     R16, UnitID
   \   0000009E   2300               TST     R16
   \   000000A0   F431               BRNE    ??CheckActionUart_9
    179                      GetRS4Setup(ch, pointer + 4);                     // receive package
   \   000000A2   019C               MOVW    R19:R18, R25:R24
   \   000000A4   5F2C               SUBI    R18, 252
   \   000000A6   4F3F               SBCI    R19, 255
   \   000000A8   2F0A               MOV     R16, R26
   \   000000AA   ........           CALL    GetRS4Setup
    180                  }
    181                  break;
   \                     ??CheckActionUart_9:
   \   000000AE   C0A7               RJMP    ??CheckActionUart_1
    182          
    183              case CMD_REQ_RS4_SETUP :                              // Request for sertup of AN-RS485
    184                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_10:
   \   000000B0   9100....           LDS     R16, UnitID
   \   000000B4   2300               TST     R16
   \   000000B6   F431               BRNE    ??CheckActionUart_11
    185                      BuildRS4Setup(ch, pointer + 4);                     // receive package
   \   000000B8   019C               MOVW    R19:R18, R25:R24
   \   000000BA   5F2C               SUBI    R18, 252
   \   000000BC   4F3F               SBCI    R19, 255
   \   000000BE   2F0A               MOV     R16, R26
   \   000000C0   ........           CALL    BuildRS4Setup
    186                  }
    187                  break;
   \                     ??CheckActionUart_11:
   \   000000C4   C09C               RJMP    ??CheckActionUart_1
    188          
    189              case CMD_SND_RS4_ADBUF :                              // Request external AD data
    190                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_12:
   \   000000C6   9100....           LDS     R16, UnitID
   \   000000CA   2300               TST     R16
   \   000000CC   F431               BRNE    ??CheckActionUart_13
    191                      GetADData(ch, pointer + 4);                     // receive package
   \   000000CE   019C               MOVW    R19:R18, R25:R24
   \   000000D0   5F2C               SUBI    R18, 252
   \   000000D2   4F3F               SBCI    R19, 255
   \   000000D4   2F0A               MOV     R16, R26
   \   000000D6   ........           CALL    GetADData
    192                  }
    193                  break;
   \                     ??CheckActionUart_13:
   \   000000DA   C091               RJMP    ??CheckActionUart_1
    194          
    195              case CMD_REQ_RS4_DATA :                              // Request external AD eeprom data
    196                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_14:
   \   000000DC   9100....           LDS     R16, UnitID
   \   000000E0   2300               TST     R16
   \   000000E2   F009               BREQ    $+2+2
   \   000000E4   C08C               RJMP    ??CheckActionUart_1
    197                      switch (UART[ch].pRxBuffer[pointer + 4]) {
   \   000000E6   ....               LDI     R30, LOW((UART + 287))
   \   000000E8   ....               LDI     R31, HIGH((UART + 287))
   \   000000EA   0FE8               ADD     R30, R24
   \   000000EC   1FF9               ADC     R31, R25
   \   000000EE   2F0A               MOV     R16, R26
   \   000000F0   E010               LDI     R17, 0
   \   000000F2   2F10               MOV     R17, R16
   \   000000F4   E000               LDI     R16, 0
   \   000000F6   0F11               LSL     R17
   \   000000F8   0FE0               ADD     R30, R16
   \   000000FA   1FF1               ADC     R31, R17
   \   000000FC   8100               LD      R16, Z
   \   000000FE   5000               SUBI    R16, 0
   \   00000100   F019               BREQ    ??CheckActionUart_15
   \   00000102   950A               DEC     R16
   \   00000104   F1C1               BREQ    ??CheckActionUart_16
   \   00000106   C07B               RJMP    ??CheckActionUart_1
    198                      case 0:                                         // Measure data
    199                          BuildMData485(ch, pointer + 5);              // receive package
   \                     ??CheckActionUart_15:
   \   00000108   019C               MOVW    R19:R18, R25:R24
   \   0000010A   5F2B               SUBI    R18, 251
   \   0000010C   4F3F               SBCI    R19, 255
   \   0000010E   2F0A               MOV     R16, R26
   \   00000110   ........           CALL    BuildMData485
    200                          if (TData.RS4.FromTargetBuffer[0][0] == true) {     // send eepromdata ch 0?
   \   00000114   9100....           LDS     R16, (TData + 1428)
   \   00000118   3001               CPI     R16, 1
   \   0000011A   F439               BRNE    ??CheckActionUart_17
    201                              BuildADEpromdata(ch, 0);
   \   0000011C   E010               LDI     R17, 0
   \   0000011E   2F0A               MOV     R16, R26
   \   00000120   ........           CALL    BuildADEpromdata
    202                              TData.RS4.FromTargetBuffer[0][0] = false;  // Marked as sent
   \   00000124   E000               LDI     R16, 0
   \   00000126   9300....           STS     (TData + 1428), R16
    203                          }
    204                          if (TData.RS4.FromTargetBuffer[1][0] == true) {     // send eepromdata ch 1?
   \                     ??CheckActionUart_17:
   \   0000012A   9100....           LDS     R16, (TData + 1478)
   \   0000012E   3001               CPI     R16, 1
   \   00000130   F439               BRNE    ??CheckActionUart_18
    205                              BuildADEpromdata(ch, 1);                  // channel 1
   \   00000132   E011               LDI     R17, 1
   \   00000134   2F0A               MOV     R16, R26
   \   00000136   ........           CALL    BuildADEpromdata
    206                              TData.RS4.FromTargetBuffer[1][0] = false;  // Marked as sent
   \   0000013A   E000               LDI     R16, 0
   \   0000013C   9300....           STS     (TData + 1478), R16
    207                          }
    208                          if ((TData.RS4.WHDataAvailable >> UART[ch].pRxBuffer[pointer + 5]) & 0x01) {
   \                     ??CheckActionUart_18:
   \   00000140   9100....           LDS     R16, (TData + 1267)
   \   00000144   E010               LDI     R17, 0
   \   00000146   ....               LDI     R30, LOW((UART + 288))
   \   00000148   ....               LDI     R31, HIGH((UART + 288))
   \   0000014A   0FE8               ADD     R30, R24
   \   0000014C   1FF9               ADC     R31, R25
   \   0000014E   2F2A               MOV     R18, R26
   \   00000150   E030               LDI     R19, 0
   \   00000152   2F32               MOV     R19, R18
   \   00000154   E020               LDI     R18, 0
   \   00000156   0F33               LSL     R19
   \   00000158   0FE2               ADD     R30, R18
   \   0000015A   1FF3               ADC     R31, R19
   \   0000015C   8140               LD      R20, Z
   \   0000015E   ........           CALL    ?SS_SHR_L02
   \   00000162   7001               ANDI    R16, 0x01
   \   00000164   2300               TST     R16
   \   00000166   F069               BREQ    ??CheckActionUart_19
    209                              BuildWHdata(ch, pointer + 5);
   \   00000168   019C               MOVW    R19:R18, R25:R24
   \   0000016A   5F2B               SUBI    R18, 251
   \   0000016C   4F3F               SBCI    R19, 255
   \   0000016E   2F0A               MOV     R16, R26
   \   00000170   ........           CALL    BuildWHdata
    210                              //TData.RS4.WHDataAvailable &= ~(0x01 << UART[ch].pRxBuffer[pointer+5]);
    211                          }
    212                          break;
   \   00000174   C044               RJMP    ??CheckActionUart_1
    213                      case 1:                                         // Raw and cal data
    214                          BuildRData485(ch, pointer + 5);                     // receive package
   \                     ??CheckActionUart_16:
   \   00000176   019C               MOVW    R19:R18, R25:R24
   \   00000178   5F2B               SUBI    R18, 251
   \   0000017A   4F3F               SBCI    R19, 255
   \   0000017C   2F0A               MOV     R16, R26
   \   0000017E   ........           CALL    BuildRData485
    215                          break;
    216                      }
    217                  }
    218                  break;
   \                     ??CheckActionUart_19:
   \   00000182   C03D               RJMP    ??CheckActionUart_1
    219          
    220              case CMD_SND_ANA_SETUP :                              // Receive sertup of AN-RSANA
    221                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_20:
   \   00000184   9100....           LDS     R16, UnitID
   \   00000188   3001               CPI     R16, 1
   \   0000018A   F5C9               BRNE    ??CheckActionUart_1
    222                      GetANASetup(ch, pointer + 4);                     // receive package
   \   0000018C   019C               MOVW    R19:R18, R25:R24
   \   0000018E   5F2C               SUBI    R18, 252
   \   00000190   4F3F               SBCI    R19, 255
   \   00000192   2F0A               MOV     R16, R26
   \   00000194   ........           CALL    GetANASetup
    223                  }
    224                  break;
   \   00000198   C032               RJMP    ??CheckActionUart_1
    225          
    226              case CMD_REQ_ANA_SETUP :                              // Request for sertup of AN-RSANA
    227                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_21:
   \   0000019A   9100....           LDS     R16, UnitID
   \   0000019E   3001               CPI     R16, 1
   \   000001A0   F571               BRNE    ??CheckActionUart_1
    228                      BuildANASetup(ch, pointer + 4);                     // receive package
   \   000001A2   019C               MOVW    R19:R18, R25:R24
   \   000001A4   5F2C               SUBI    R18, 252
   \   000001A6   4F3F               SBCI    R19, 255
   \   000001A8   2F0A               MOV     R16, R26
   \   000001AA   ........           CALL    BuildANASetup
    229                  }
    230                  break;
   \   000001AE   C027               RJMP    ??CheckActionUart_1
    231          
    232              case CMD_SND_ANA_FILTER :                              // Receive filter of AN-RSANA
    233                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_22:
   \   000001B0   9100....           LDS     R16, UnitID
   \   000001B4   3001               CPI     R16, 1
   \   000001B6   F519               BRNE    ??CheckActionUart_1
    234                      GetANAFilter(ch, pointer + 4);                     // receive package
   \   000001B8   019C               MOVW    R19:R18, R25:R24
   \   000001BA   5F2C               SUBI    R18, 252
   \   000001BC   4F3F               SBCI    R19, 255
   \   000001BE   2F0A               MOV     R16, R26
   \   000001C0   ........           CALL    GetANAFilter
    235                  }
    236                  break;
   \   000001C4   C01C               RJMP    ??CheckActionUart_1
    237          
    238              case CMD_REQ_ANA_FILTER :                              // Request filter of AN-RSANA
    239                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_23:
   \   000001C6   9100....           LDS     R16, UnitID
   \   000001CA   3001               CPI     R16, 1
   \   000001CC   F4C1               BRNE    ??CheckActionUart_1
    240                      BuildANAFilter(ch, pointer + 4);                     // receive package
   \   000001CE   019C               MOVW    R19:R18, R25:R24
   \   000001D0   5F2C               SUBI    R18, 252
   \   000001D2   4F3F               SBCI    R19, 255
   \   000001D4   2F0A               MOV     R16, R26
   \   000001D6   ........           CALL    BuildANAFilter
    241                  }
    242                  break;
   \   000001DA   C011               RJMP    ??CheckActionUart_1
    243          
    244              case CMD_REQ_ANA_DATA :                              // Request ANA data(4-20ma)
    245                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_24:
   \   000001DC   9100....           LDS     R16, UnitID
   \   000001E0   3001               CPI     R16, 1
   \   000001E2   F469               BRNE    ??CheckActionUart_1
    246                      BuildMDataANA(ch, pointer + 4);                     // receive
   \   000001E4   019C               MOVW    R19:R18, R25:R24
   \   000001E6   5F2C               SUBI    R18, 252
   \   000001E8   4F3F               SBCI    R19, 255
   \   000001EA   2F0A               MOV     R16, R26
   \   000001EC   ........           CALL    BuildMDataANA
    247                  }
    248                  break;
   \   000001F0   C006               RJMP    ??CheckActionUart_1
    249          
    250              default:
    251                  if (command < MAX_ECMD) {                   // handle end commands
   \                     ??CheckActionUart_25:
   \   000001F2   E604               LDI     R16, 100
   \   000001F4   1640               CP      R4, R16
   \   000001F6   E000               LDI     R16, 0
   \   000001F8   0650               CPC     R5, R16
   \   000001FA   F408               BRCC    ??CheckActionUart_1
    252                      retval = false;
   \   000001FC   E0B0               LDI     R27, 0
    253                  }
    254                  break;
    255          
    256              }
    257              return retval;
   \                     ??CheckActionUart_1:
   \   000001FE   2F0B               MOV     R16, R27
   \   00000200   E0E6               LDI     R30, 6
   \   00000202   ........           JMP     ?EPILOGUE_B6_L09
    258          }
    259          
    260          /*************************************************************************
    261          *
    262          * Build send packet header
    263          *
    264          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    265          void Uart_BuildHeader(char ch) {
   \                     Uart_BuildHeader:
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    266          
    267              UART[ch].RxFirst = 0;                                // Reset pointers
   \   00000004   2F08               MOV     R16, R24
   \   00000006   E010               LDI     R17, 0
   \   00000008   2F10               MOV     R17, R16
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   0F11               LSL     R17
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART + 433) & 0xFFFF))
   \   00000012   ....               SBCI    R31, HIGH((-(UART + 433) & 0xFFFF))
   \   00000014   E000               LDI     R16, 0
   \   00000016   E010               LDI     R17, 0
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
    268              UART[ch].RxLast  = 0;
   \   0000001C   2F08               MOV     R16, R24
   \   0000001E   E010               LDI     R17, 0
   \   00000020   2F10               MOV     R17, R16
   \   00000022   E000               LDI     R16, 0
   \   00000024   0F11               LSL     R17
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   ....               SUBI    R30, LOW((-(UART + 435) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, HIGH((-(UART + 435) & 0xFFFF))
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   E010               LDI     R17, 0
   \   00000030   8300               ST      Z, R16
   \   00000032   8311               STD     Z+1, R17
    269              UART[ch].TxLast  = 0;
   \   00000034   2F08               MOV     R16, R24
   \   00000036   E010               LDI     R17, 0
   \   00000038   2F10               MOV     R17, R16
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   0F11               LSL     R17
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(UART + 277) & 0xFFFF))
   \   00000042   ....               SBCI    R31, HIGH((-(UART + 277) & 0xFFFF))
   \   00000044   E000               LDI     R16, 0
   \   00000046   E010               LDI     R17, 0
   \   00000048   8300               ST      Z, R16
   \   0000004A   8311               STD     Z+1, R17
    270          
    271              UART[ch].pTxBuffer[0] = ANPRO10_SYN;                        /* Sync */
   \   0000004C   2F08               MOV     R16, R24
   \   0000004E   E010               LDI     R17, 0
   \   00000050   2F10               MOV     R17, R16
   \   00000052   E000               LDI     R16, 0
   \   00000054   0F11               LSL     R17
   \   00000056   01F8               MOVW    R31:R30, R17:R16
   \   00000058   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005C   E106               LDI     R16, 22
   \   0000005E   8300               ST      Z, R16
    272              UART[ch].pTxBuffer[1] = ANPRO10_SYN;                        /* Sync */
   \   00000060   2F08               MOV     R16, R24
   \   00000062   E010               LDI     R17, 0
   \   00000064   2F10               MOV     R17, R16
   \   00000066   E000               LDI     R16, 0
   \   00000068   0F11               LSL     R17
   \   0000006A   01F8               MOVW    R31:R30, R17:R16
   \   0000006C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000070   E106               LDI     R16, 22
   \   00000072   8301               STD     Z+1, R16
    273              UART[ch].pTxBuffer[2] = ANPRO10_SYN;                        /* Sync */
   \   00000074   2F08               MOV     R16, R24
   \   00000076   E010               LDI     R17, 0
   \   00000078   2F10               MOV     R17, R16
   \   0000007A   E000               LDI     R16, 0
   \   0000007C   0F11               LSL     R17
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   E106               LDI     R16, 22
   \   00000086   8302               STD     Z+2, R16
    274              UART[ch].pTxBuffer[3] = ANPRO10_SOH;                        /* Start of header */
   \   00000088   2F08               MOV     R16, R24
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   2F10               MOV     R17, R16
   \   0000008E   E000               LDI     R16, 0
   \   00000090   0F11               LSL     R17
   \   00000092   01F8               MOVW    R31:R30, R17:R16
   \   00000094   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000096   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000098   E001               LDI     R16, 1
   \   0000009A   8303               STD     Z+3, R16
    275              UART[ch].pTxBuffer[4] = UART[ch].pRxBuffer[2];      /* RXID */
   \   0000009C   2F08               MOV     R16, R24
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   2F10               MOV     R17, R16
   \   000000A2   E000               LDI     R16, 0
   \   000000A4   0F11               LSL     R17
   \   000000A6   01F8               MOVW    R31:R30, R17:R16
   \   000000A8   ....               SUBI    R30, LOW((-(UART + 285) & 0xFFFF))
   \   000000AA   ....               SBCI    R31, HIGH((-(UART + 285) & 0xFFFF))
   \   000000AC   8120               LD      R18, Z
   \   000000AE   2F08               MOV     R16, R24
   \   000000B0   E010               LDI     R17, 0
   \   000000B2   2F10               MOV     R17, R16
   \   000000B4   E000               LDI     R16, 0
   \   000000B6   0F11               LSL     R17
   \   000000B8   01F8               MOVW    R31:R30, R17:R16
   \   000000BA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000BC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BE   8324               STD     Z+4, R18
    276              UART[ch].pTxBuffer[5] = UART[ch].pRxBuffer[3];      /* Rx address */
   \   000000C0   2F08               MOV     R16, R24
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   2F10               MOV     R17, R16
   \   000000C6   E000               LDI     R16, 0
   \   000000C8   0F11               LSL     R17
   \   000000CA   01F8               MOVW    R31:R30, R17:R16
   \   000000CC   ....               SUBI    R30, LOW((-(UART + 286) & 0xFFFF))
   \   000000CE   ....               SBCI    R31, HIGH((-(UART + 286) & 0xFFFF))
   \   000000D0   8120               LD      R18, Z
   \   000000D2   2F08               MOV     R16, R24
   \   000000D4   E010               LDI     R17, 0
   \   000000D6   2F10               MOV     R17, R16
   \   000000D8   E000               LDI     R16, 0
   \   000000DA   0F11               LSL     R17
   \   000000DC   01F8               MOVW    R31:R30, R17:R16
   \   000000DE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000E0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000E2   8325               STD     Z+5, R18
    277              UART[ch].pTxBuffer[6] = 0x10 + UnitID;              /* Unit ID */
   \   000000E4   9100....           LDS     R16, UnitID
   \   000000E8   5F00               SUBI    R16, 240
   \   000000EA   2F28               MOV     R18, R24
   \   000000EC   E030               LDI     R19, 0
   \   000000EE   2F32               MOV     R19, R18
   \   000000F0   E020               LDI     R18, 0
   \   000000F2   0F33               LSL     R19
   \   000000F4   01F9               MOVW    R31:R30, R19:R18
   \   000000F6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000FA   8306               STD     Z+6, R16
    278              UART[ch].pTxBuffer[7] = MyAddress();                 /* Tx address */
   \   000000FC   ........           CALL    MyAddress
   \   00000100   2F20               MOV     R18, R16
   \   00000102   2F08               MOV     R16, R24
   \   00000104   E010               LDI     R17, 0
   \   00000106   2F10               MOV     R17, R16
   \   00000108   E000               LDI     R16, 0
   \   0000010A   0F11               LSL     R17
   \   0000010C   01F8               MOVW    R31:R30, R17:R16
   \   0000010E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000110   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000112   8327               STD     Z+7, R18
    279              UART[ch].pTxBuffer[8] = 0;                          /* packlen HB, don't know yet */
   \   00000114   2F08               MOV     R16, R24
   \   00000116   E010               LDI     R17, 0
   \   00000118   2F10               MOV     R17, R16
   \   0000011A   E000               LDI     R16, 0
   \   0000011C   0F11               LSL     R17
   \   0000011E   01F8               MOVW    R31:R30, R17:R16
   \   00000120   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000122   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000124   E000               LDI     R16, 0
   \   00000126   8700               STD     Z+8, R16
    280              UART[ch].pTxBuffer[9] = 0;                          /* packlen LB, don't know yet */
   \   00000128   2F08               MOV     R16, R24
   \   0000012A   E010               LDI     R17, 0
   \   0000012C   2F10               MOV     R17, R16
   \   0000012E   E000               LDI     R16, 0
   \   00000130   0F11               LSL     R17
   \   00000132   01F8               MOVW    R31:R30, R17:R16
   \   00000134   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000136   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000138   E000               LDI     R16, 0
   \   0000013A   8701               STD     Z+9, R16
    281              UART[ch].pTxBuffer[10] = 0;                         /* Header checksum, don't know yet */
   \   0000013C   2F08               MOV     R16, R24
   \   0000013E   E010               LDI     R17, 0
   \   00000140   2F10               MOV     R17, R16
   \   00000142   E000               LDI     R16, 0
   \   00000144   0F11               LSL     R17
   \   00000146   01F8               MOVW    R31:R30, R17:R16
   \   00000148   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000014A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000014C   E000               LDI     R16, 0
   \   0000014E   8702               STD     Z+10, R16
    282          }
   \   00000150   9189               LD      R24, Y+
   \   00000152   9508               RET
    283          
    284          /*************************************************************************
    285          *
    286          * Build  packet tail
    287          *
    288          *************************************************************************/
    289          #pragma diag_suppress=Pa082

   \                                 In  segment CODE, align 2, keep-with-next
    290          void Uart_BuildTail(char ch) {
   \                     Uart_BuildTail:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F80               MOV     R24, R16
    291          
    292              Uart_BuildHeader(ch);                                    // fist build the header
   \   00000006   2F08               MOV     R16, R24
   \   00000008   ....               RCALL   Uart_BuildHeader
    293          
    294              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK & 0xff;  // End command lb
   \   0000000A   2F08               MOV     R16, R24
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   2F10               MOV     R17, R16
   \   00000010   E000               LDI     R16, 0
   \   00000012   0F11               LSL     R17
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000018   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000001A   8120               LD      R18, Z
   \   0000001C   8131               LDD     R19, Z+1
   \   0000001E   01D9               MOVW    R27:R26, R19:R18
   \   00000020   9611               ADIW    R27:R26, 1
   \   00000022   2F08               MOV     R16, R24
   \   00000024   E010               LDI     R17, 0
   \   00000026   2F10               MOV     R17, R16
   \   00000028   E000               LDI     R16, 0
   \   0000002A   0F11               LSL     R17
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000032   83A0               ST      Z, R26
   \   00000034   83B1               STD     Z+1, R27
   \   00000036   2F08               MOV     R16, R24
   \   00000038   E010               LDI     R17, 0
   \   0000003A   2F10               MOV     R17, R16
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   0F11               LSL     R17
   \   00000040   ....               LDI     R30, LOW(UART)
   \   00000042   ....               LDI     R31, (UART) >> 8
   \   00000044   0FE0               ADD     R30, R16
   \   00000046   1FF1               ADC     R31, R17
   \   00000048   0FE2               ADD     R30, R18
   \   0000004A   1FF3               ADC     R31, R19
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   8300               ST      Z, R16
    295              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK >> 8;    // End command hb
   \   00000050   2F08               MOV     R16, R24
   \   00000052   E010               LDI     R17, 0
   \   00000054   2F10               MOV     R17, R16
   \   00000056   E000               LDI     R16, 0
   \   00000058   0F11               LSL     R17
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000060   8120               LD      R18, Z
   \   00000062   8131               LDD     R19, Z+1
   \   00000064   01D9               MOVW    R27:R26, R19:R18
   \   00000066   9611               ADIW    R27:R26, 1
   \   00000068   2F08               MOV     R16, R24
   \   0000006A   E010               LDI     R17, 0
   \   0000006C   2F10               MOV     R17, R16
   \   0000006E   E000               LDI     R16, 0
   \   00000070   0F11               LSL     R17
   \   00000072   01F8               MOVW    R31:R30, R17:R16
   \   00000074   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000076   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000078   83A0               ST      Z, R26
   \   0000007A   83B1               STD     Z+1, R27
   \   0000007C   2F08               MOV     R16, R24
   \   0000007E   E010               LDI     R17, 0
   \   00000080   2F10               MOV     R17, R16
   \   00000082   E000               LDI     R16, 0
   \   00000084   0F11               LSL     R17
   \   00000086   ....               LDI     R30, LOW(UART)
   \   00000088   ....               LDI     R31, (UART) >> 8
   \   0000008A   0FE0               ADD     R30, R16
   \   0000008C   1FF1               ADC     R31, R17
   \   0000008E   0FE2               ADD     R30, R18
   \   00000090   1FF3               ADC     R31, R19
   \   00000092   E000               LDI     R16, 0
   \   00000094   8300               ST      Z, R16
    296              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0x00;                  // End data
   \   00000096   2F08               MOV     R16, R24
   \   00000098   E010               LDI     R17, 0
   \   0000009A   2F10               MOV     R17, R16
   \   0000009C   E000               LDI     R16, 0
   \   0000009E   0F11               LSL     R17
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000A6   8120               LD      R18, Z
   \   000000A8   8131               LDD     R19, Z+1
   \   000000AA   01D9               MOVW    R27:R26, R19:R18
   \   000000AC   9611               ADIW    R27:R26, 1
   \   000000AE   2F08               MOV     R16, R24
   \   000000B0   E010               LDI     R17, 0
   \   000000B2   2F10               MOV     R17, R16
   \   000000B4   E000               LDI     R16, 0
   \   000000B6   0F11               LSL     R17
   \   000000B8   01F8               MOVW    R31:R30, R17:R16
   \   000000BA   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000BC   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000BE   83A0               ST      Z, R26
   \   000000C0   83B1               STD     Z+1, R27
   \   000000C2   2F08               MOV     R16, R24
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   2F10               MOV     R17, R16
   \   000000C8   E000               LDI     R16, 0
   \   000000CA   0F11               LSL     R17
   \   000000CC   ....               LDI     R30, LOW(UART)
   \   000000CE   ....               LDI     R31, (UART) >> 8
   \   000000D0   0FE0               ADD     R30, R16
   \   000000D2   1FF1               ADC     R31, R17
   \   000000D4   0FE2               ADD     R30, R18
   \   000000D6   1FF3               ADC     R31, R19
   \   000000D8   E000               LDI     R16, 0
   \   000000DA   8300               ST      Z, R16
    297          
    298              UART[ch].pTxBuffer[UART[ch].TxFirst] = UART[ch].TxSeqCnt;   // Sequence counter
   \   000000DC   2F08               MOV     R16, R24
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   2F10               MOV     R17, R16
   \   000000E2   E000               LDI     R16, 0
   \   000000E4   0F11               LSL     R17
   \   000000E6   01F8               MOVW    R31:R30, R17:R16
   \   000000E8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000EA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000EC   8120               LD      R18, Z
   \   000000EE   8131               LDD     R19, Z+1
   \   000000F0   2F08               MOV     R16, R24
   \   000000F2   E010               LDI     R17, 0
   \   000000F4   2F10               MOV     R17, R16
   \   000000F6   E000               LDI     R16, 0
   \   000000F8   0F11               LSL     R17
   \   000000FA   01F8               MOVW    R31:R30, R17:R16
   \   000000FC   ....               SUBI    R30, LOW((-(UART + 282) & 0xFFFF))
   \   000000FE   ....               SBCI    R31, HIGH((-(UART + 282) & 0xFFFF))
   \   00000100   8140               LD      R20, Z
   \   00000102   2F08               MOV     R16, R24
   \   00000104   E010               LDI     R17, 0
   \   00000106   2F10               MOV     R17, R16
   \   00000108   E000               LDI     R16, 0
   \   0000010A   0F11               LSL     R17
   \   0000010C   ....               LDI     R30, LOW(UART)
   \   0000010E   ....               LDI     R31, (UART) >> 8
   \   00000110   0FE0               ADD     R30, R16
   \   00000112   1FF1               ADC     R31, R17
   \   00000114   0FE2               ADD     R30, R18
   \   00000116   1FF3               ADC     R31, R19
   \   00000118   8340               ST      Z, R20
    299              UART[ch].TxFirst++;
   \   0000011A   2F08               MOV     R16, R24
   \   0000011C   E010               LDI     R17, 0
   \   0000011E   2F10               MOV     R17, R16
   \   00000120   E000               LDI     R16, 0
   \   00000122   0F11               LSL     R17
   \   00000124   01F8               MOVW    R31:R30, R17:R16
   \   00000126   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000128   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000012A   8100               LD      R16, Z
   \   0000012C   8111               LDD     R17, Z+1
   \   0000012E   5F0F               SUBI    R16, 255
   \   00000130   4F1F               SBCI    R17, 255
   \   00000132   8300               ST      Z, R16
   \   00000134   8311               STD     Z+1, R17
    300              UART[ch].TxSeqCnt++;
   \   00000136   2F08               MOV     R16, R24
   \   00000138   E010               LDI     R17, 0
   \   0000013A   2F10               MOV     R17, R16
   \   0000013C   E000               LDI     R16, 0
   \   0000013E   0F11               LSL     R17
   \   00000140   01F8               MOVW    R31:R30, R17:R16
   \   00000142   ....               SUBI    R30, LOW((-(UART + 282) & 0xFFFF))
   \   00000144   ....               SBCI    R31, HIGH((-(UART + 282) & 0xFFFF))
   \   00000146   8100               LD      R16, Z
   \   00000148   9503               INC     R16
   \   0000014A   8300               ST      Z, R16
    301          
    302              UART[ch].pTxBuffer[8] = UART[ch].TxFirst - 2;                    // correct length because stx's
   \   0000014C   2F08               MOV     R16, R24
   \   0000014E   E010               LDI     R17, 0
   \   00000150   2F10               MOV     R17, R16
   \   00000152   E000               LDI     R16, 0
   \   00000154   0F11               LSL     R17
   \   00000156   01F8               MOVW    R31:R30, R17:R16
   \   00000158   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000015A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000015C   8100               LD      R16, Z
   \   0000015E   8111               LDD     R17, Z+1
   \   00000160   5002               SUBI    R16, 2
   \   00000162   2F28               MOV     R18, R24
   \   00000164   E030               LDI     R19, 0
   \   00000166   2F32               MOV     R19, R18
   \   00000168   E020               LDI     R18, 0
   \   0000016A   0F33               LSL     R19
   \   0000016C   01F9               MOVW    R31:R30, R19:R18
   \   0000016E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000170   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000172   8700               STD     Z+8, R16
    303              UART[ch].pTxBuffer[9] = (UART[ch].TxFirst - 2) >> 8;             // packet len high
   \   00000174   2F08               MOV     R16, R24
   \   00000176   E010               LDI     R17, 0
   \   00000178   2F10               MOV     R17, R16
   \   0000017A   E000               LDI     R16, 0
   \   0000017C   0F11               LSL     R17
   \   0000017E   01F8               MOVW    R31:R30, R17:R16
   \   00000180   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000182   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000184   81A0               LD      R26, Z
   \   00000186   81B1               LDD     R27, Z+1
   \   00000188   9712               SBIW    R27:R26, 2
   \   0000018A   2FAB               MOV     R26, R27
   \   0000018C   E0B0               LDI     R27, 0
   \   0000018E   2F08               MOV     R16, R24
   \   00000190   E010               LDI     R17, 0
   \   00000192   2F10               MOV     R17, R16
   \   00000194   E000               LDI     R16, 0
   \   00000196   0F11               LSL     R17
   \   00000198   01F8               MOVW    R31:R30, R17:R16
   \   0000019A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000019C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000019E   87A1               STD     Z+9, R26
    304          
    305              UART[ch].pTxBuffer[10] = CalcDSTxChecksum(ch, 10);         // Get header checksum
   \   000001A0   E02A               LDI     R18, 10
   \   000001A2   E030               LDI     R19, 0
   \   000001A4   2F08               MOV     R16, R24
   \   000001A6   ....               RCALL   CalcDSTxChecksum
   \   000001A8   2F20               MOV     R18, R16
   \   000001AA   2F08               MOV     R16, R24
   \   000001AC   E010               LDI     R17, 0
   \   000001AE   2F10               MOV     R17, R16
   \   000001B0   E000               LDI     R16, 0
   \   000001B2   0F11               LSL     R17
   \   000001B4   01F8               MOVW    R31:R30, R17:R16
   \   000001B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001BA   8722               STD     Z+10, R18
    306          
    307              UART[ch].pTxBuffer[UART[ch].TxFirst] = CalcDSTxChecksum(ch, UART[ch].TxFirst); // Get checksum
   \   000001BC   2F08               MOV     R16, R24
   \   000001BE   E010               LDI     R17, 0
   \   000001C0   2F10               MOV     R17, R16
   \   000001C2   E000               LDI     R16, 0
   \   000001C4   0F11               LSL     R17
   \   000001C6   01F8               MOVW    R31:R30, R17:R16
   \   000001C8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001CA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001CC   8020               LD      R2, Z
   \   000001CE   8031               LDD     R3, Z+1
   \   000001D0   2F08               MOV     R16, R24
   \   000001D2   E010               LDI     R17, 0
   \   000001D4   2F10               MOV     R17, R16
   \   000001D6   E000               LDI     R16, 0
   \   000001D8   0F11               LSL     R17
   \   000001DA   01F8               MOVW    R31:R30, R17:R16
   \   000001DC   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001DE   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001E0   8120               LD      R18, Z
   \   000001E2   8131               LDD     R19, Z+1
   \   000001E4   2F08               MOV     R16, R24
   \   000001E6   ....               RCALL   CalcDSTxChecksum
   \   000001E8   2F20               MOV     R18, R16
   \   000001EA   2F08               MOV     R16, R24
   \   000001EC   E010               LDI     R17, 0
   \   000001EE   2F10               MOV     R17, R16
   \   000001F0   E000               LDI     R16, 0
   \   000001F2   0F11               LSL     R17
   \   000001F4   ....               LDI     R30, LOW(UART)
   \   000001F6   ....               LDI     R31, (UART) >> 8
   \   000001F8   0FE0               ADD     R30, R16
   \   000001FA   1FF1               ADC     R31, R17
   \   000001FC   0DE2               ADD     R30, R2
   \   000001FE   1DF3               ADC     R31, R3
   \   00000200   8320               ST      Z, R18
    308              UART[ch].TxFirst++;                                        // OBS!! must be inc here due to ANSI standard !!!!
   \   00000202   2F08               MOV     R16, R24
   \   00000204   E010               LDI     R17, 0
   \   00000206   2F10               MOV     R17, R16
   \   00000208   E000               LDI     R16, 0
   \   0000020A   0F11               LSL     R17
   \   0000020C   01F8               MOVW    R31:R30, R17:R16
   \   0000020E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000210   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000212   8100               LD      R16, Z
   \   00000214   8111               LDD     R17, Z+1
   \   00000216   5F0F               SUBI    R16, 255
   \   00000218   4F1F               SBCI    R17, 255
   \   0000021A   8300               ST      Z, R16
   \   0000021C   8311               STD     Z+1, R17
    309          
    310              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANPRO10_EOT;            // End of transmission
   \   0000021E   2F08               MOV     R16, R24
   \   00000220   E010               LDI     R17, 0
   \   00000222   2F10               MOV     R17, R16
   \   00000224   E000               LDI     R16, 0
   \   00000226   0F11               LSL     R17
   \   00000228   01F8               MOVW    R31:R30, R17:R16
   \   0000022A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000022C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000022E   8120               LD      R18, Z
   \   00000230   8131               LDD     R19, Z+1
   \   00000232   01D9               MOVW    R27:R26, R19:R18
   \   00000234   9611               ADIW    R27:R26, 1
   \   00000236   2F08               MOV     R16, R24
   \   00000238   E010               LDI     R17, 0
   \   0000023A   2F10               MOV     R17, R16
   \   0000023C   E000               LDI     R16, 0
   \   0000023E   0F11               LSL     R17
   \   00000240   01F8               MOVW    R31:R30, R17:R16
   \   00000242   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000244   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000246   83A0               ST      Z, R26
   \   00000248   83B1               STD     Z+1, R27
   \   0000024A   2F08               MOV     R16, R24
   \   0000024C   E010               LDI     R17, 0
   \   0000024E   2F10               MOV     R17, R16
   \   00000250   E000               LDI     R16, 0
   \   00000252   0F11               LSL     R17
   \   00000254   ....               LDI     R30, LOW(UART)
   \   00000256   ....               LDI     R31, (UART) >> 8
   \   00000258   0FE0               ADD     R30, R16
   \   0000025A   1FF1               ADC     R31, R17
   \   0000025C   0FE2               ADD     R30, R18
   \   0000025E   1FF3               ADC     R31, R19
   \   00000260   E004               LDI     R16, 4
   \   00000262   8300               ST      Z, R16
    311              UART[ch].TxCount = UART[ch].TxFirst;                      //bytes to send
   \   00000264   2F08               MOV     R16, R24
   \   00000266   E010               LDI     R17, 0
   \   00000268   2F10               MOV     R17, R16
   \   0000026A   E000               LDI     R16, 0
   \   0000026C   0F11               LSL     R17
   \   0000026E   01F8               MOVW    R31:R30, R17:R16
   \   00000270   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000272   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000274   8120               LD      R18, Z
   \   00000276   8131               LDD     R19, Z+1
   \   00000278   2F08               MOV     R16, R24
   \   0000027A   E010               LDI     R17, 0
   \   0000027C   2F10               MOV     R17, R16
   \   0000027E   E000               LDI     R16, 0
   \   00000280   0F11               LSL     R17
   \   00000282   01F8               MOVW    R31:R30, R17:R16
   \   00000284   ....               SUBI    R30, LOW((-(UART + 279) & 0xFFFF))
   \   00000286   ....               SBCI    R31, HIGH((-(UART + 279) & 0xFFFF))
   \   00000288   8320               ST      Z, R18
   \   0000028A   8331               STD     Z+1, R19
    312              UART[ch].TxLast = 0;                                     // reset cunter
   \   0000028C   2F08               MOV     R16, R24
   \   0000028E   E010               LDI     R17, 0
   \   00000290   2F10               MOV     R17, R16
   \   00000292   E000               LDI     R16, 0
   \   00000294   0F11               LSL     R17
   \   00000296   01F8               MOVW    R31:R30, R17:R16
   \   00000298   ....               SUBI    R30, LOW((-(UART + 277) & 0xFFFF))
   \   0000029A   ....               SBCI    R31, HIGH((-(UART + 277) & 0xFFFF))
   \   0000029C   E000               LDI     R16, 0
   \   0000029E   E010               LDI     R17, 0
   \   000002A0   8300               ST      Z, R16
   \   000002A2   8311               STD     Z+1, R17
    313              UART[ch].RxState = SEND;
   \   000002A4   2F08               MOV     R16, R24
   \   000002A6   E010               LDI     R17, 0
   \   000002A8   2F10               MOV     R17, R16
   \   000002AA   E000               LDI     R16, 0
   \   000002AC   0F11               LSL     R17
   \   000002AE   01F8               MOVW    R31:R30, R17:R16
   \   000002B0   ....               SUBI    R30, LOW((-(UART + 439) & 0xFFFF))
   \   000002B2   ....               SBCI    R31, HIGH((-(UART + 439) & 0xFFFF))
   \   000002B4   E003               LDI     R16, 3
   \   000002B6   8300               ST      Z, R16
    314              if (ch == 0) {                                           // Turn on TXE for channel
   \   000002B8   2388               TST     R24
   \   000002BA   F541               BRNE    ??Uart_BuildTail_0
    315          #if USE_1281_RX_INT_TASK == 0
    316                  OS_RetriggerTimer(&TimerUSART0);                     // and start timeout TX timer
    317          #endif
    318                  SetBit(PORTE, 0x04);                                 // TXE0 on
   \   000002BC   9100....           LDS     R16, (OS_Global + 1)
   \   000002C0   7F00               ANDI    R16, 0xF0
   \   000002C2   2300               TST     R16
   \   000002C4   F021               BREQ    ??Uart_BuildTail_1
   \   000002C6   E909               LDI     R16, 153
   \   000002C8   E010               LDI     R17, 0
   \   000002CA   ........           CALL    OS_Error
   \                     ??Uart_BuildTail_1:
   \   000002CE   94F8               cli
   \   000002D0   9100....           LDS     R16, (OS_Global + 1)
   \   000002D4   9503               INC     R16
   \   000002D6   9300....           STS     (OS_Global + 1), R16
   \   000002DA   9A72               SBI     0x0E, 0x02
   \   000002DC   9100....           LDS     R16, (OS_Global + 1)
   \   000002E0   7F00               ANDI    R16, 0xF0
   \   000002E2   2300               TST     R16
   \   000002E4   F021               BREQ    ??Uart_BuildTail_2
   \   000002E6   E909               LDI     R16, 153
   \   000002E8   E010               LDI     R17, 0
   \   000002EA   ........           CALL    OS_Error
   \                     ??Uart_BuildTail_2:
   \   000002EE   9100....           LDS     R16, (OS_Global + 1)
   \   000002F2   950A               DEC     R16
   \   000002F4   9300....           STS     (OS_Global + 1), R16
   \   000002F8   9100....           LDS     R16, (OS_Global + 1)
   \   000002FC   2300               TST     R16
   \   000002FE   F409               BRNE    ??Uart_BuildTail_3
   \   00000300   9478               sei
    319                  OS_RetriggerTimer(&TimerUSART0On);                           // and start timer for on before TX
   \                     ??Uart_BuildTail_3:
   \   00000302   ....               LDI     R16, LOW(TimerUSART0On)
   \   00000304   ....               LDI     R17, (TimerUSART0On) >> 8
   \   00000306   ........           CALL    OS_RetriggerTimer
   \   0000030A   C029               RJMP    ??Uart_BuildTail_4
    320              } else if (ch == 1) {
   \                     ??Uart_BuildTail_0:
   \   0000030C   3081               CPI     R24, 1
   \   0000030E   F539               BRNE    ??Uart_BuildTail_4
    321                  //       OS_RetriggerTimer(&TimerUSART1);                     // and start timeout TX timer
    322                  SetBit(PORTE, 0x08);                                // TXE1 on
   \   00000310   9100....           LDS     R16, (OS_Global + 1)
   \   00000314   7F00               ANDI    R16, 0xF0
   \   00000316   2300               TST     R16
   \   00000318   F021               BREQ    ??Uart_BuildTail_5
   \   0000031A   E909               LDI     R16, 153
   \   0000031C   E010               LDI     R17, 0
   \   0000031E   ........           CALL    OS_Error
   \                     ??Uart_BuildTail_5:
   \   00000322   94F8               cli
   \   00000324   9100....           LDS     R16, (OS_Global + 1)
   \   00000328   9503               INC     R16
   \   0000032A   9300....           STS     (OS_Global + 1), R16
   \   0000032E   9A73               SBI     0x0E, 0x03
   \   00000330   9100....           LDS     R16, (OS_Global + 1)
   \   00000334   7F00               ANDI    R16, 0xF0
   \   00000336   2300               TST     R16
   \   00000338   F021               BREQ    ??Uart_BuildTail_6
   \   0000033A   E909               LDI     R16, 153
   \   0000033C   E010               LDI     R17, 0
   \   0000033E   ........           CALL    OS_Error
   \                     ??Uart_BuildTail_6:
   \   00000342   9100....           LDS     R16, (OS_Global + 1)
   \   00000346   950A               DEC     R16
   \   00000348   9300....           STS     (OS_Global + 1), R16
   \   0000034C   9100....           LDS     R16, (OS_Global + 1)
   \   00000350   2300               TST     R16
   \   00000352   F409               BRNE    ??Uart_BuildTail_7
   \   00000354   9478               sei
    323                  OS_RetriggerTimer(&TimerUSART1On);                     // and start timer for on before TX
   \                     ??Uart_BuildTail_7:
   \   00000356   ....               LDI     R16, LOW(TimerUSART1On)
   \   00000358   ....               LDI     R17, (TimerUSART1On) >> 8
   \   0000035A   ........           CALL    OS_RetriggerTimer
    324              }
    325          }
   \                     ??Uart_BuildTail_4:
   \   0000035E   E0E4               LDI     R30, 4
   \   00000360   ........           JMP     ?EPILOGUE_B4_L09
   \   00000364                      REQUIRE _A_PORTE
    326          
    327          /*************************************************************************
    328          *
    329          * Build datablock for card status
    330          *
    331          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    332          void BuildStatusData(char ch) {
   \                     BuildStatusData:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
    333          
    334              short ntna;
    335              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000006   2F0A               MOV     R16, R26
   \   00000008   E010               LDI     R17, 0
   \   0000000A   2F10               MOV     R17, R16
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   0F11               LSL     R17
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   ....               SUBI    R30, LOW((-(UART + 446) & 0xFFFF))
   \   00000014   ....               SBCI    R31, HIGH((-(UART + 446) & 0xFFFF))
   \   00000016   E001               LDI     R16, 1
   \   00000018   8300               ST      Z, R16
    336          
    337              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS & 0xff;
   \   0000001A   2F0A               MOV     R16, R26
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   2F10               MOV     R17, R16
   \   00000020   E000               LDI     R16, 0
   \   00000022   0F11               LSL     R17
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000028   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000002A   8120               LD      R18, Z
   \   0000002C   8131               LDD     R19, Z+1
   \   0000002E   01C9               MOVW    R25:R24, R19:R18
   \   00000030   9601               ADIW    R25:R24, 1
   \   00000032   2F0A               MOV     R16, R26
   \   00000034   E010               LDI     R17, 0
   \   00000036   2F10               MOV     R17, R16
   \   00000038   E000               LDI     R16, 0
   \   0000003A   0F11               LSL     R17
   \   0000003C   01F8               MOVW    R31:R30, R17:R16
   \   0000003E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000040   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000042   8380               ST      Z, R24
   \   00000044   8391               STD     Z+1, R25
   \   00000046   2F0A               MOV     R16, R26
   \   00000048   E010               LDI     R17, 0
   \   0000004A   2F10               MOV     R17, R16
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   0F11               LSL     R17
   \   00000050   ....               LDI     R30, LOW(UART)
   \   00000052   ....               LDI     R31, (UART) >> 8
   \   00000054   0FE0               ADD     R30, R16
   \   00000056   1FF1               ADC     R31, R17
   \   00000058   0FE2               ADD     R30, R18
   \   0000005A   1FF3               ADC     R31, R19
   \   0000005C   EE09               LDI     R16, 233
   \   0000005E   8300               ST      Z, R16
    338              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS >> 8;
   \   00000060   2F0A               MOV     R16, R26
   \   00000062   E010               LDI     R17, 0
   \   00000064   2F10               MOV     R17, R16
   \   00000066   E000               LDI     R16, 0
   \   00000068   0F11               LSL     R17
   \   0000006A   01F8               MOVW    R31:R30, R17:R16
   \   0000006C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000070   8120               LD      R18, Z
   \   00000072   8131               LDD     R19, Z+1
   \   00000074   01C9               MOVW    R25:R24, R19:R18
   \   00000076   9601               ADIW    R25:R24, 1
   \   00000078   2F0A               MOV     R16, R26
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   2F10               MOV     R17, R16
   \   0000007E   E000               LDI     R16, 0
   \   00000080   0F11               LSL     R17
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000086   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000088   8380               ST      Z, R24
   \   0000008A   8391               STD     Z+1, R25
   \   0000008C   2F0A               MOV     R16, R26
   \   0000008E   E010               LDI     R17, 0
   \   00000090   2F10               MOV     R17, R16
   \   00000092   E000               LDI     R16, 0
   \   00000094   0F11               LSL     R17
   \   00000096   ....               LDI     R30, LOW(UART)
   \   00000098   ....               LDI     R31, (UART) >> 8
   \   0000009A   0FE0               ADD     R30, R16
   \   0000009C   1FF1               ADC     R31, R17
   \   0000009E   0FE2               ADD     R30, R18
   \   000000A0   1FF3               ADC     R31, R19
   \   000000A2   E003               LDI     R16, 3
   \   000000A4   8300               ST      Z, R16
    339              ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000A6   2F0A               MOV     R16, R26
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   2F10               MOV     R17, R16
   \   000000AC   E000               LDI     R16, 0
   \   000000AE   0F11               LSL     R17
   \   000000B0   01F8               MOVW    R31:R30, R17:R16
   \   000000B2   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000B6   8100               LD      R16, Z
   \   000000B8   8111               LDD     R17, Z+1
   \   000000BA   0128               MOVW    R5:R4, R17:R16
    340              UART[ch].TxFirst += 2;                                      // two byte length
   \   000000BC   2F0A               MOV     R16, R26
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   2F10               MOV     R17, R16
   \   000000C2   E000               LDI     R16, 0
   \   000000C4   0F11               LSL     R17
   \   000000C6   01F8               MOVW    R31:R30, R17:R16
   \   000000C8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000CC   8100               LD      R16, Z
   \   000000CE   8111               LDD     R17, Z+1
   \   000000D0   5F0E               SUBI    R16, 254
   \   000000D2   4F1F               SBCI    R17, 255
   \   000000D4   8300               ST      Z, R16
   \   000000D6   8311               STD     Z+1, R17
    341              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ch;                // channel
   \   000000D8   2F0A               MOV     R16, R26
   \   000000DA   E010               LDI     R17, 0
   \   000000DC   2F10               MOV     R17, R16
   \   000000DE   E000               LDI     R16, 0
   \   000000E0   0F11               LSL     R17
   \   000000E2   01F8               MOVW    R31:R30, R17:R16
   \   000000E4   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000E6   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000E8   8120               LD      R18, Z
   \   000000EA   8131               LDD     R19, Z+1
   \   000000EC   01C9               MOVW    R25:R24, R19:R18
   \   000000EE   9601               ADIW    R25:R24, 1
   \   000000F0   2F0A               MOV     R16, R26
   \   000000F2   E010               LDI     R17, 0
   \   000000F4   2F10               MOV     R17, R16
   \   000000F6   E000               LDI     R16, 0
   \   000000F8   0F11               LSL     R17
   \   000000FA   01F8               MOVW    R31:R30, R17:R16
   \   000000FC   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000FE   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000100   8380               ST      Z, R24
   \   00000102   8391               STD     Z+1, R25
   \   00000104   2F0A               MOV     R16, R26
   \   00000106   E010               LDI     R17, 0
   \   00000108   2F10               MOV     R17, R16
   \   0000010A   E000               LDI     R16, 0
   \   0000010C   0F11               LSL     R17
   \   0000010E   ....               LDI     R30, LOW(UART)
   \   00000110   ....               LDI     R31, (UART) >> 8
   \   00000112   0FE0               ADD     R30, R16
   \   00000114   1FF1               ADC     R31, R17
   \   00000116   0FE2               ADD     R30, R18
   \   00000118   1FF3               ADC     R31, R19
   \   0000011A   83A0               ST      Z, R26
    342              UART[ch].pTxBuffer[UART[ch].TxFirst++] = DEVICE_IO + UnitID;          // Product ID
   \   0000011C   2F0A               MOV     R16, R26
   \   0000011E   E010               LDI     R17, 0
   \   00000120   2F10               MOV     R17, R16
   \   00000122   E000               LDI     R16, 0
   \   00000124   0F11               LSL     R17
   \   00000126   01F8               MOVW    R31:R30, R17:R16
   \   00000128   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000012A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000012C   8140               LD      R20, Z
   \   0000012E   8151               LDD     R21, Z+1
   \   00000130   01CA               MOVW    R25:R24, R21:R20
   \   00000132   9601               ADIW    R25:R24, 1
   \   00000134   2F0A               MOV     R16, R26
   \   00000136   E010               LDI     R17, 0
   \   00000138   2F10               MOV     R17, R16
   \   0000013A   E000               LDI     R16, 0
   \   0000013C   0F11               LSL     R17
   \   0000013E   01F8               MOVW    R31:R30, R17:R16
   \   00000140   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000142   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000144   8380               ST      Z, R24
   \   00000146   8391               STD     Z+1, R25
   \   00000148   9100....           LDS     R16, UnitID
   \   0000014C   5F00               SUBI    R16, 240
   \   0000014E   2F2A               MOV     R18, R26
   \   00000150   E030               LDI     R19, 0
   \   00000152   2F32               MOV     R19, R18
   \   00000154   E020               LDI     R18, 0
   \   00000156   0F33               LSL     R19
   \   00000158   ....               LDI     R30, LOW(UART)
   \   0000015A   ....               LDI     R31, (UART) >> 8
   \   0000015C   0FE2               ADD     R30, R18
   \   0000015E   1FF3               ADC     R31, R19
   \   00000160   0FE4               ADD     R30, R20
   \   00000162   1FF5               ADC     R31, R21
   \   00000164   8300               ST      Z, R16
    343              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MyAddress();                 // unit adddress
   \   00000166   2F0A               MOV     R16, R26
   \   00000168   E010               LDI     R17, 0
   \   0000016A   2F10               MOV     R17, R16
   \   0000016C   E000               LDI     R16, 0
   \   0000016E   0F11               LSL     R17
   \   00000170   01F8               MOVW    R31:R30, R17:R16
   \   00000172   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000174   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000176   8180               LD      R24, Z
   \   00000178   8191               LDD     R25, Z+1
   \   0000017A   018C               MOVW    R17:R16, R25:R24
   \   0000017C   5F0F               SUBI    R16, 255
   \   0000017E   4F1F               SBCI    R17, 255
   \   00000180   2F2A               MOV     R18, R26
   \   00000182   E030               LDI     R19, 0
   \   00000184   2F32               MOV     R19, R18
   \   00000186   E020               LDI     R18, 0
   \   00000188   0F33               LSL     R19
   \   0000018A   01F9               MOVW    R31:R30, R19:R18
   \   0000018C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000018E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000190   8300               ST      Z, R16
   \   00000192   8311               STD     Z+1, R17
   \   00000194   ........           CALL    MyAddress
   \   00000198   2F20               MOV     R18, R16
   \   0000019A   2F0A               MOV     R16, R26
   \   0000019C   E010               LDI     R17, 0
   \   0000019E   2F10               MOV     R17, R16
   \   000001A0   E000               LDI     R16, 0
   \   000001A2   0F11               LSL     R17
   \   000001A4   ....               LDI     R30, LOW(UART)
   \   000001A6   ....               LDI     R31, (UART) >> 8
   \   000001A8   0FE0               ADD     R30, R16
   \   000001AA   1FF1               ADC     R31, R17
   \   000001AC   0FE8               ADD     R30, R24
   \   000001AE   1FF9               ADC     R31, R25
   \   000001B0   8320               ST      Z, R18
    344              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROG_VERSION;                // software version */
   \   000001B2   2F0A               MOV     R16, R26
   \   000001B4   E010               LDI     R17, 0
   \   000001B6   2F10               MOV     R17, R16
   \   000001B8   E000               LDI     R16, 0
   \   000001BA   0F11               LSL     R17
   \   000001BC   01F8               MOVW    R31:R30, R17:R16
   \   000001BE   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001C0   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001C2   8120               LD      R18, Z
   \   000001C4   8131               LDD     R19, Z+1
   \   000001C6   01C9               MOVW    R25:R24, R19:R18
   \   000001C8   9601               ADIW    R25:R24, 1
   \   000001CA   2F0A               MOV     R16, R26
   \   000001CC   E010               LDI     R17, 0
   \   000001CE   2F10               MOV     R17, R16
   \   000001D0   E000               LDI     R16, 0
   \   000001D2   0F11               LSL     R17
   \   000001D4   01F8               MOVW    R31:R30, R17:R16
   \   000001D6   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001D8   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001DA   8380               ST      Z, R24
   \   000001DC   8391               STD     Z+1, R25
   \   000001DE   2F0A               MOV     R16, R26
   \   000001E0   E010               LDI     R17, 0
   \   000001E2   2F10               MOV     R17, R16
   \   000001E4   E000               LDI     R16, 0
   \   000001E6   0F11               LSL     R17
   \   000001E8   ....               LDI     R30, LOW(UART)
   \   000001EA   ....               LDI     R31, (UART) >> 8
   \   000001EC   0FE0               ADD     R30, R16
   \   000001EE   1FF1               ADC     R31, R17
   \   000001F0   0FE2               ADD     R30, R18
   \   000001F2   1FF3               ADC     R31, R19
   \   000001F4   E605               LDI     R16, 101
   \   000001F6   8300               ST      Z, R16
    345              UART[ch].pTxBuffer[UART[ch].TxFirst++] = COMP_VERSION;                // cpmpability version
   \   000001F8   2F0A               MOV     R16, R26
   \   000001FA   E010               LDI     R17, 0
   \   000001FC   2F10               MOV     R17, R16
   \   000001FE   E000               LDI     R16, 0
   \   00000200   0F11               LSL     R17
   \   00000202   01F8               MOVW    R31:R30, R17:R16
   \   00000204   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000206   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000208   8120               LD      R18, Z
   \   0000020A   8131               LDD     R19, Z+1
   \   0000020C   01C9               MOVW    R25:R24, R19:R18
   \   0000020E   9601               ADIW    R25:R24, 1
   \   00000210   2F0A               MOV     R16, R26
   \   00000212   E010               LDI     R17, 0
   \   00000214   2F10               MOV     R17, R16
   \   00000216   E000               LDI     R16, 0
   \   00000218   0F11               LSL     R17
   \   0000021A   01F8               MOVW    R31:R30, R17:R16
   \   0000021C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000021E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000220   8380               ST      Z, R24
   \   00000222   8391               STD     Z+1, R25
   \   00000224   2F0A               MOV     R16, R26
   \   00000226   E010               LDI     R17, 0
   \   00000228   2F10               MOV     R17, R16
   \   0000022A   E000               LDI     R16, 0
   \   0000022C   0F11               LSL     R17
   \   0000022E   ....               LDI     R30, LOW(UART)
   \   00000230   ....               LDI     R31, (UART) >> 8
   \   00000232   0FE0               ADD     R30, R16
   \   00000234   1FF1               ADC     R31, R17
   \   00000236   0FE2               ADD     R30, R18
   \   00000238   1FF3               ADC     R31, R19
   \   0000023A   E001               LDI     R16, 1
   \   0000023C   8300               ST      Z, R16
    346              UART[ch].pTxBuffer[UART[ch].TxFirst++] = STORE_VERSION;               // cpmpability version
   \   0000023E   2F0A               MOV     R16, R26
   \   00000240   E010               LDI     R17, 0
   \   00000242   2F10               MOV     R17, R16
   \   00000244   E000               LDI     R16, 0
   \   00000246   0F11               LSL     R17
   \   00000248   01F8               MOVW    R31:R30, R17:R16
   \   0000024A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000024C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000024E   8120               LD      R18, Z
   \   00000250   8131               LDD     R19, Z+1
   \   00000252   01C9               MOVW    R25:R24, R19:R18
   \   00000254   9601               ADIW    R25:R24, 1
   \   00000256   2F0A               MOV     R16, R26
   \   00000258   E010               LDI     R17, 0
   \   0000025A   2F10               MOV     R17, R16
   \   0000025C   E000               LDI     R16, 0
   \   0000025E   0F11               LSL     R17
   \   00000260   01F8               MOVW    R31:R30, R17:R16
   \   00000262   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000264   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000266   8380               ST      Z, R24
   \   00000268   8391               STD     Z+1, R25
   \   0000026A   2F0A               MOV     R16, R26
   \   0000026C   E010               LDI     R17, 0
   \   0000026E   2F10               MOV     R17, R16
   \   00000270   E000               LDI     R16, 0
   \   00000272   0F11               LSL     R17
   \   00000274   ....               LDI     R30, LOW(UART)
   \   00000276   ....               LDI     R31, (UART) >> 8
   \   00000278   0FE0               ADD     R30, R16
   \   0000027A   1FF1               ADC     R31, R17
   \   0000027C   0FE2               ADD     R30, R18
   \   0000027E   1FF3               ADC     R31, R19
   \   00000280   E002               LDI     R16, 2
   \   00000282   8300               ST      Z, R16
    347              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RXSIZE_UART & 0xff);        // rx buffer size
   \   00000284   2F0A               MOV     R16, R26
   \   00000286   E010               LDI     R17, 0
   \   00000288   2F10               MOV     R17, R16
   \   0000028A   E000               LDI     R16, 0
   \   0000028C   0F11               LSL     R17
   \   0000028E   01F8               MOVW    R31:R30, R17:R16
   \   00000290   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000292   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000294   8120               LD      R18, Z
   \   00000296   8131               LDD     R19, Z+1
   \   00000298   01C9               MOVW    R25:R24, R19:R18
   \   0000029A   9601               ADIW    R25:R24, 1
   \   0000029C   2F0A               MOV     R16, R26
   \   0000029E   E010               LDI     R17, 0
   \   000002A0   2F10               MOV     R17, R16
   \   000002A2   E000               LDI     R16, 0
   \   000002A4   0F11               LSL     R17
   \   000002A6   01F8               MOVW    R31:R30, R17:R16
   \   000002A8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000002AA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000002AC   8380               ST      Z, R24
   \   000002AE   8391               STD     Z+1, R25
   \   000002B0   2F0A               MOV     R16, R26
   \   000002B2   E010               LDI     R17, 0
   \   000002B4   2F10               MOV     R17, R16
   \   000002B6   E000               LDI     R16, 0
   \   000002B8   0F11               LSL     R17
   \   000002BA   ....               LDI     R30, LOW(UART)
   \   000002BC   ....               LDI     R31, (UART) >> 8
   \   000002BE   0FE0               ADD     R30, R16
   \   000002C0   1FF1               ADC     R31, R17
   \   000002C2   0FE2               ADD     R30, R18
   \   000002C4   1FF3               ADC     R31, R19
   \   000002C6   E906               LDI     R16, 150
   \   000002C8   8300               ST      Z, R16
    348              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((RXSIZE_UART >> 8) & 0xff); // rx buffer size
   \   000002CA   2F0A               MOV     R16, R26
   \   000002CC   E010               LDI     R17, 0
   \   000002CE   2F10               MOV     R17, R16
   \   000002D0   E000               LDI     R16, 0
   \   000002D2   0F11               LSL     R17
   \   000002D4   01F8               MOVW    R31:R30, R17:R16
   \   000002D6   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000002D8   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000002DA   8120               LD      R18, Z
   \   000002DC   8131               LDD     R19, Z+1
   \   000002DE   01C9               MOVW    R25:R24, R19:R18
   \   000002E0   9601               ADIW    R25:R24, 1
   \   000002E2   2F0A               MOV     R16, R26
   \   000002E4   E010               LDI     R17, 0
   \   000002E6   2F10               MOV     R17, R16
   \   000002E8   E000               LDI     R16, 0
   \   000002EA   0F11               LSL     R17
   \   000002EC   01F8               MOVW    R31:R30, R17:R16
   \   000002EE   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000002F0   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000002F2   8380               ST      Z, R24
   \   000002F4   8391               STD     Z+1, R25
   \   000002F6   2F0A               MOV     R16, R26
   \   000002F8   E010               LDI     R17, 0
   \   000002FA   2F10               MOV     R17, R16
   \   000002FC   E000               LDI     R16, 0
   \   000002FE   0F11               LSL     R17
   \   00000300   ....               LDI     R30, LOW(UART)
   \   00000302   ....               LDI     R31, (UART) >> 8
   \   00000304   0FE0               ADD     R30, R16
   \   00000306   1FF1               ADC     R31, R17
   \   00000308   0FE2               ADD     R30, R18
   \   0000030A   1FF3               ADC     R31, R19
   \   0000030C   E000               LDI     R16, 0
   \   0000030E   8300               ST      Z, R16
    349              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TXSIZE_UART & 0xff);        // tx buffer size
   \   00000310   2F0A               MOV     R16, R26
   \   00000312   E010               LDI     R17, 0
   \   00000314   2F10               MOV     R17, R16
   \   00000316   E000               LDI     R16, 0
   \   00000318   0F11               LSL     R17
   \   0000031A   01F8               MOVW    R31:R30, R17:R16
   \   0000031C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000031E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000320   8120               LD      R18, Z
   \   00000322   8131               LDD     R19, Z+1
   \   00000324   01C9               MOVW    R25:R24, R19:R18
   \   00000326   9601               ADIW    R25:R24, 1
   \   00000328   2F0A               MOV     R16, R26
   \   0000032A   E010               LDI     R17, 0
   \   0000032C   2F10               MOV     R17, R16
   \   0000032E   E000               LDI     R16, 0
   \   00000330   0F11               LSL     R17
   \   00000332   01F8               MOVW    R31:R30, R17:R16
   \   00000334   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000336   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000338   8380               ST      Z, R24
   \   0000033A   8391               STD     Z+1, R25
   \   0000033C   2F0A               MOV     R16, R26
   \   0000033E   E010               LDI     R17, 0
   \   00000340   2F10               MOV     R17, R16
   \   00000342   E000               LDI     R16, 0
   \   00000344   0F11               LSL     R17
   \   00000346   ....               LDI     R30, LOW(UART)
   \   00000348   ....               LDI     R31, (UART) >> 8
   \   0000034A   0FE0               ADD     R30, R16
   \   0000034C   1FF1               ADC     R31, R17
   \   0000034E   0FE2               ADD     R30, R18
   \   00000350   1FF3               ADC     R31, R19
   \   00000352   E103               LDI     R16, 19
   \   00000354   8300               ST      Z, R16
    350              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((TXSIZE_UART >> 8) & 0xff); // tx buffer size
   \   00000356   2F0A               MOV     R16, R26
   \   00000358   E010               LDI     R17, 0
   \   0000035A   2F10               MOV     R17, R16
   \   0000035C   E000               LDI     R16, 0
   \   0000035E   0F11               LSL     R17
   \   00000360   01F8               MOVW    R31:R30, R17:R16
   \   00000362   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000364   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000366   8120               LD      R18, Z
   \   00000368   8131               LDD     R19, Z+1
   \   0000036A   01C9               MOVW    R25:R24, R19:R18
   \   0000036C   9601               ADIW    R25:R24, 1
   \   0000036E   2F0A               MOV     R16, R26
   \   00000370   E010               LDI     R17, 0
   \   00000372   2F10               MOV     R17, R16
   \   00000374   E000               LDI     R16, 0
   \   00000376   0F11               LSL     R17
   \   00000378   01F8               MOVW    R31:R30, R17:R16
   \   0000037A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000037C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000037E   8380               ST      Z, R24
   \   00000380   8391               STD     Z+1, R25
   \   00000382   2F0A               MOV     R16, R26
   \   00000384   E010               LDI     R17, 0
   \   00000386   2F10               MOV     R17, R16
   \   00000388   E000               LDI     R16, 0
   \   0000038A   0F11               LSL     R17
   \   0000038C   ....               LDI     R30, LOW(UART)
   \   0000038E   ....               LDI     R31, (UART) >> 8
   \   00000390   0FE0               ADD     R30, R16
   \   00000392   1FF1               ADC     R31, R17
   \   00000394   0FE2               ADD     R30, R18
   \   00000396   1FF3               ADC     R31, R19
   \   00000398   E001               LDI     R16, 1
   \   0000039A   8300               ST      Z, R16
    351              UART[ch].pTxBuffer[UART[ch].TxFirst++] = RestartStatus;               // restart flag
   \   0000039C   2F0A               MOV     R16, R26
   \   0000039E   E010               LDI     R17, 0
   \   000003A0   2F10               MOV     R17, R16
   \   000003A2   E000               LDI     R16, 0
   \   000003A4   0F11               LSL     R17
   \   000003A6   01F8               MOVW    R31:R30, R17:R16
   \   000003A8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000003AA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000003AC   8120               LD      R18, Z
   \   000003AE   8131               LDD     R19, Z+1
   \   000003B0   01C9               MOVW    R25:R24, R19:R18
   \   000003B2   9601               ADIW    R25:R24, 1
   \   000003B4   2F0A               MOV     R16, R26
   \   000003B6   E010               LDI     R17, 0
   \   000003B8   2F10               MOV     R17, R16
   \   000003BA   E000               LDI     R16, 0
   \   000003BC   0F11               LSL     R17
   \   000003BE   01F8               MOVW    R31:R30, R17:R16
   \   000003C0   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000003C2   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000003C4   8380               ST      Z, R24
   \   000003C6   8391               STD     Z+1, R25
   \   000003C8   9140....           LDS     R20, RestartStatus
   \   000003CC   2F0A               MOV     R16, R26
   \   000003CE   E010               LDI     R17, 0
   \   000003D0   2F10               MOV     R17, R16
   \   000003D2   E000               LDI     R16, 0
   \   000003D4   0F11               LSL     R17
   \   000003D6   ....               LDI     R30, LOW(UART)
   \   000003D8   ....               LDI     R31, (UART) >> 8
   \   000003DA   0FE0               ADD     R30, R16
   \   000003DC   1FF1               ADC     R31, R17
   \   000003DE   0FE2               ADD     R30, R18
   \   000003E0   1FF3               ADC     R31, R19
   \   000003E2   8340               ST      Z, R20
    352              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROGTYPE_APP;                // Application program
   \   000003E4   2F0A               MOV     R16, R26
   \   000003E6   E010               LDI     R17, 0
   \   000003E8   2F10               MOV     R17, R16
   \   000003EA   E000               LDI     R16, 0
   \   000003EC   0F11               LSL     R17
   \   000003EE   01F8               MOVW    R31:R30, R17:R16
   \   000003F0   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000003F2   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000003F4   8120               LD      R18, Z
   \   000003F6   8131               LDD     R19, Z+1
   \   000003F8   01C9               MOVW    R25:R24, R19:R18
   \   000003FA   9601               ADIW    R25:R24, 1
   \   000003FC   2F0A               MOV     R16, R26
   \   000003FE   E010               LDI     R17, 0
   \   00000400   2F10               MOV     R17, R16
   \   00000402   E000               LDI     R16, 0
   \   00000404   0F11               LSL     R17
   \   00000406   01F8               MOVW    R31:R30, R17:R16
   \   00000408   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000040A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000040C   8380               ST      Z, R24
   \   0000040E   8391               STD     Z+1, R25
   \   00000410   2F0A               MOV     R16, R26
   \   00000412   E010               LDI     R17, 0
   \   00000414   2F10               MOV     R17, R16
   \   00000416   E000               LDI     R16, 0
   \   00000418   0F11               LSL     R17
   \   0000041A   ....               LDI     R30, LOW(UART)
   \   0000041C   ....               LDI     R31, (UART) >> 8
   \   0000041E   0FE0               ADD     R30, R16
   \   00000420   1FF1               ADC     R31, R17
   \   00000422   0FE2               ADD     R30, R18
   \   00000424   1FF3               ADC     R31, R19
   \   00000426   E001               LDI     R16, 1
   \   00000428   8300               ST      Z, R16
    353              UART[ch].pTxBuffer[UART[ch].TxFirst++] = RestartCnt & 0xff;           // Unit restart count
   \   0000042A   2F0A               MOV     R16, R26
   \   0000042C   E010               LDI     R17, 0
   \   0000042E   2F10               MOV     R17, R16
   \   00000430   E000               LDI     R16, 0
   \   00000432   0F11               LSL     R17
   \   00000434   01F8               MOVW    R31:R30, R17:R16
   \   00000436   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000438   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000043A   8120               LD      R18, Z
   \   0000043C   8131               LDD     R19, Z+1
   \   0000043E   01C9               MOVW    R25:R24, R19:R18
   \   00000440   9601               ADIW    R25:R24, 1
   \   00000442   2F0A               MOV     R16, R26
   \   00000444   E010               LDI     R17, 0
   \   00000446   2F10               MOV     R17, R16
   \   00000448   E000               LDI     R16, 0
   \   0000044A   0F11               LSL     R17
   \   0000044C   01F8               MOVW    R31:R30, R17:R16
   \   0000044E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000450   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000452   8380               ST      Z, R24
   \   00000454   8391               STD     Z+1, R25
   \   00000456   ....               LDI     R30, LOW(RestartCnt)
   \   00000458   ....               LDI     R31, (RestartCnt) >> 8
   \   0000045A   8100               LD      R16, Z
   \   0000045C   8111               LDD     R17, Z+1
   \   0000045E   2F40               MOV     R20, R16
   \   00000460   2F0A               MOV     R16, R26
   \   00000462   E010               LDI     R17, 0
   \   00000464   2F10               MOV     R17, R16
   \   00000466   E000               LDI     R16, 0
   \   00000468   0F11               LSL     R17
   \   0000046A   ....               LDI     R30, LOW(UART)
   \   0000046C   ....               LDI     R31, (UART) >> 8
   \   0000046E   0FE0               ADD     R30, R16
   \   00000470   1FF1               ADC     R31, R17
   \   00000472   0FE2               ADD     R30, R18
   \   00000474   1FF3               ADC     R31, R19
   \   00000476   8340               ST      Z, R20
    354              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RestartCnt >> 8 ) & 0xff;   // Unit restart count
   \   00000478   2F0A               MOV     R16, R26
   \   0000047A   E010               LDI     R17, 0
   \   0000047C   2F10               MOV     R17, R16
   \   0000047E   E000               LDI     R16, 0
   \   00000480   0F11               LSL     R17
   \   00000482   01F8               MOVW    R31:R30, R17:R16
   \   00000484   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000486   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000488   8120               LD      R18, Z
   \   0000048A   8131               LDD     R19, Z+1
   \   0000048C   01C9               MOVW    R25:R24, R19:R18
   \   0000048E   9601               ADIW    R25:R24, 1
   \   00000490   2F0A               MOV     R16, R26
   \   00000492   E010               LDI     R17, 0
   \   00000494   2F10               MOV     R17, R16
   \   00000496   E000               LDI     R16, 0
   \   00000498   0F11               LSL     R17
   \   0000049A   01F8               MOVW    R31:R30, R17:R16
   \   0000049C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000049E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000004A0   8380               ST      Z, R24
   \   000004A2   8391               STD     Z+1, R25
   \   000004A4   ....               LDI     R30, LOW(RestartCnt)
   \   000004A6   ....               LDI     R31, (RestartCnt) >> 8
   \   000004A8   8100               LD      R16, Z
   \   000004AA   8111               LDD     R17, Z+1
   \   000004AC   2F01               MOV     R16, R17
   \   000004AE   0F11               LSL     R17
   \   000004B0   0B11               SBC     R17, R17
   \   000004B2   2F40               MOV     R20, R16
   \   000004B4   2F0A               MOV     R16, R26
   \   000004B6   E010               LDI     R17, 0
   \   000004B8   2F10               MOV     R17, R16
   \   000004BA   E000               LDI     R16, 0
   \   000004BC   0F11               LSL     R17
   \   000004BE   ....               LDI     R30, LOW(UART)
   \   000004C0   ....               LDI     R31, (UART) >> 8
   \   000004C2   0FE0               ADD     R30, R16
   \   000004C4   1FF1               ADC     R31, R17
   \   000004C6   0FE2               ADD     R30, R18
   \   000004C8   1FF3               ADC     R31, R19
   \   000004CA   8340               ST      Z, R20
    355              UART[ch].pTxBuffer[UART[ch].TxFirst++] = BootloaderRevision;          // Bootloader version
   \   000004CC   2F0A               MOV     R16, R26
   \   000004CE   E010               LDI     R17, 0
   \   000004D0   2F10               MOV     R17, R16
   \   000004D2   E000               LDI     R16, 0
   \   000004D4   0F11               LSL     R17
   \   000004D6   01F8               MOVW    R31:R30, R17:R16
   \   000004D8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000004DA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000004DC   8120               LD      R18, Z
   \   000004DE   8131               LDD     R19, Z+1
   \   000004E0   01C9               MOVW    R25:R24, R19:R18
   \   000004E2   9601               ADIW    R25:R24, 1
   \   000004E4   2F0A               MOV     R16, R26
   \   000004E6   E010               LDI     R17, 0
   \   000004E8   2F10               MOV     R17, R16
   \   000004EA   E000               LDI     R16, 0
   \   000004EC   0F11               LSL     R17
   \   000004EE   01F8               MOVW    R31:R30, R17:R16
   \   000004F0   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000004F2   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000004F4   8380               ST      Z, R24
   \   000004F6   8391               STD     Z+1, R25
   \   000004F8   9140....           LDS     R20, BootloaderRevision
   \   000004FC   2F0A               MOV     R16, R26
   \   000004FE   E010               LDI     R17, 0
   \   00000500   2F10               MOV     R17, R16
   \   00000502   E000               LDI     R16, 0
   \   00000504   0F11               LSL     R17
   \   00000506   ....               LDI     R30, LOW(UART)
   \   00000508   ....               LDI     R31, (UART) >> 8
   \   0000050A   0FE0               ADD     R30, R16
   \   0000050C   1FF1               ADC     R31, R17
   \   0000050E   0FE2               ADD     R30, R18
   \   00000510   1FF3               ADC     R31, R19
   \   00000512   8340               ST      Z, R20
    356          
    357              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   00000514   2F0A               MOV     R16, R26
   \   00000516   E010               LDI     R17, 0
   \   00000518   2F10               MOV     R17, R16
   \   0000051A   E000               LDI     R16, 0
   \   0000051C   0F11               LSL     R17
   \   0000051E   01F8               MOVW    R31:R30, R17:R16
   \   00000520   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000522   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000524   8100               LD      R16, Z
   \   00000526   8111               LDD     R17, Z+1
   \   00000528   2D14               MOV     R17, R4
   \   0000052A   1B01               SUB     R16, R17
   \   0000052C   5002               SUBI    R16, 2
   \   0000052E   2F2A               MOV     R18, R26
   \   00000530   E030               LDI     R19, 0
   \   00000532   2F32               MOV     R19, R18
   \   00000534   E020               LDI     R18, 0
   \   00000536   0F33               LSL     R19
   \   00000538   ....               LDI     R30, LOW(UART)
   \   0000053A   ....               LDI     R31, (UART) >> 8
   \   0000053C   0FE2               ADD     R30, R18
   \   0000053E   1FF3               ADC     R31, R19
   \   00000540   0DE4               ADD     R30, R4
   \   00000542   1DF5               ADC     R31, R5
   \   00000544   8300               ST      Z, R16
    358              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   00000546   2F0A               MOV     R16, R26
   \   00000548   E010               LDI     R17, 0
   \   0000054A   2F10               MOV     R17, R16
   \   0000054C   E000               LDI     R16, 0
   \   0000054E   0F11               LSL     R17
   \   00000550   01F8               MOVW    R31:R30, R17:R16
   \   00000552   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000554   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000556   8180               LD      R24, Z
   \   00000558   8191               LDD     R25, Z+1
   \   0000055A   1984               SUB     R24, R4
   \   0000055C   0995               SBC     R25, R5
   \   0000055E   9702               SBIW    R25:R24, 2
   \   00000560   2F89               MOV     R24, R25
   \   00000562   E090               LDI     R25, 0
   \   00000564   ....               LDI     R30, LOW((UART + 1))
   \   00000566   ....               LDI     R31, HIGH((UART + 1))
   \   00000568   0DE4               ADD     R30, R4
   \   0000056A   1DF5               ADC     R31, R5
   \   0000056C   2F0A               MOV     R16, R26
   \   0000056E   E010               LDI     R17, 0
   \   00000570   2F10               MOV     R17, R16
   \   00000572   E000               LDI     R16, 0
   \   00000574   0F11               LSL     R17
   \   00000576   0FE0               ADD     R30, R16
   \   00000578   1FF1               ADC     R31, R17
   \   0000057A   8380               ST      Z, R24
    359          
    360              RestartStatus = 0;                                                       // set reset stat to 0 = read
   \   0000057C   E000               LDI     R16, 0
   \   0000057E   9300....           STS     RestartStatus, R16
    361          }
   \   00000582   E0E6               LDI     R30, 6
   \   00000584   ........           JMP     ?EPILOGUE_B6_L09
   \   00000588                      REQUIRE RestartCnt
   \   00000588                      REQUIRE BootloaderRevision
    362          
    363          /*************************************************************************
    364          *
    365          * Build EEPROM data package
    366          *
    367          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    368          void BuildEEPROMData(char ch, short pointer) {
   \                     BuildEEPROMData:
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004   2F80               MOV     R24, R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    369          
    370              short ntna;
    371              char channel;
    372              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000008   2F08               MOV     R16, R24
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   2F10               MOV     R17, R16
   \   0000000E   E000               LDI     R16, 0
   \   00000010   0F11               LSL     R17
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART + 446) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART + 446) & 0xFFFF))
   \   00000018   E001               LDI     R16, 1
   \   0000001A   8300               ST      Z, R16
    373          
    374              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA & 0xff;
   \   0000001C   2F08               MOV     R16, R24
   \   0000001E   E010               LDI     R17, 0
   \   00000020   2F10               MOV     R17, R16
   \   00000022   E000               LDI     R16, 0
   \   00000024   0F11               LSL     R17
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000002C   8140               LD      R20, Z
   \   0000002E   8151               LDD     R21, Z+1
   \   00000030   018A               MOVW    R17:R16, R21:R20
   \   00000032   5F0F               SUBI    R16, 255
   \   00000034   4F1F               SBCI    R17, 255
   \   00000036   2F28               MOV     R18, R24
   \   00000038   E030               LDI     R19, 0
   \   0000003A   2F32               MOV     R19, R18
   \   0000003C   E020               LDI     R18, 0
   \   0000003E   0F33               LSL     R19
   \   00000040   01F9               MOVW    R31:R30, R19:R18
   \   00000042   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000044   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000046   8300               ST      Z, R16
   \   00000048   8311               STD     Z+1, R17
   \   0000004A   2F08               MOV     R16, R24
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   2F10               MOV     R17, R16
   \   00000050   E000               LDI     R16, 0
   \   00000052   0F11               LSL     R17
   \   00000054   ....               LDI     R30, LOW(UART)
   \   00000056   ....               LDI     R31, (UART) >> 8
   \   00000058   0FE0               ADD     R30, R16
   \   0000005A   1FF1               ADC     R31, R17
   \   0000005C   0FE4               ADD     R30, R20
   \   0000005E   1FF5               ADC     R31, R21
   \   00000060   E309               LDI     R16, 57
   \   00000062   8300               ST      Z, R16
    375              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA >> 8;
   \   00000064   2F08               MOV     R16, R24
   \   00000066   E010               LDI     R17, 0
   \   00000068   2F10               MOV     R17, R16
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   0F11               LSL     R17
   \   0000006E   01F8               MOVW    R31:R30, R17:R16
   \   00000070   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000072   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000074   8140               LD      R20, Z
   \   00000076   8151               LDD     R21, Z+1
   \   00000078   018A               MOVW    R17:R16, R21:R20
   \   0000007A   5F0F               SUBI    R16, 255
   \   0000007C   4F1F               SBCI    R17, 255
   \   0000007E   2F28               MOV     R18, R24
   \   00000080   E030               LDI     R19, 0
   \   00000082   2F32               MOV     R19, R18
   \   00000084   E020               LDI     R18, 0
   \   00000086   0F33               LSL     R19
   \   00000088   01F9               MOVW    R31:R30, R19:R18
   \   0000008A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000008C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000008E   8300               ST      Z, R16
   \   00000090   8311               STD     Z+1, R17
   \   00000092   2F08               MOV     R16, R24
   \   00000094   E010               LDI     R17, 0
   \   00000096   2F10               MOV     R17, R16
   \   00000098   E000               LDI     R16, 0
   \   0000009A   0F11               LSL     R17
   \   0000009C   ....               LDI     R30, LOW(UART)
   \   0000009E   ....               LDI     R31, (UART) >> 8
   \   000000A0   0FE0               ADD     R30, R16
   \   000000A2   1FF1               ADC     R31, R17
   \   000000A4   0FE4               ADD     R30, R20
   \   000000A6   1FF5               ADC     R31, R21
   \   000000A8   E004               LDI     R16, 4
   \   000000AA   8300               ST      Z, R16
    376              ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000AC   2F08               MOV     R16, R24
   \   000000AE   E010               LDI     R17, 0
   \   000000B0   2F10               MOV     R17, R16
   \   000000B2   E000               LDI     R16, 0
   \   000000B4   0F11               LSL     R17
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000BC   8100               LD      R16, Z
   \   000000BE   8111               LDD     R17, Z+1
   \   000000C0   0128               MOVW    R5:R4, R17:R16
    377              UART[ch].TxFirst += 2;                                      // two byte length
   \   000000C2   2F08               MOV     R16, R24
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   2F10               MOV     R17, R16
   \   000000C8   E000               LDI     R16, 0
   \   000000CA   0F11               LSL     R17
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000D2   8100               LD      R16, Z
   \   000000D4   8111               LDD     R17, Z+1
   \   000000D6   5F0E               SUBI    R16, 254
   \   000000D8   4F1F               SBCI    R17, 255
   \   000000DA   8300               ST      Z, R16
   \   000000DC   8311               STD     Z+1, R17
    378          
    379              channel = UART[ch].pRxBuffer[pointer];
   \   000000DE   ....               LDI     R30, LOW((UART + 283))
   \   000000E0   ....               LDI     R31, HIGH((UART + 283))
   \   000000E2   0FEA               ADD     R30, R26
   \   000000E4   1FFB               ADC     R31, R27
   \   000000E6   2F08               MOV     R16, R24
   \   000000E8   E010               LDI     R17, 0
   \   000000EA   2F10               MOV     R17, R16
   \   000000EC   E000               LDI     R16, 0
   \   000000EE   0F11               LSL     R17
   \   000000F0   0FE0               ADD     R30, R16
   \   000000F2   1FF1               ADC     R31, R17
   \   000000F4   8100               LD      R16, Z
   \   000000F6   2E60               MOV     R6, R16
    380              UART[ch].pTxBuffer[UART[ch].TxFirst++] = channel; //channel
   \   000000F8   2F08               MOV     R16, R24
   \   000000FA   E010               LDI     R17, 0
   \   000000FC   2F10               MOV     R17, R16
   \   000000FE   E000               LDI     R16, 0
   \   00000100   0F11               LSL     R17
   \   00000102   01F8               MOVW    R31:R30, R17:R16
   \   00000104   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000106   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000108   8140               LD      R20, Z
   \   0000010A   8151               LDD     R21, Z+1
   \   0000010C   018A               MOVW    R17:R16, R21:R20
   \   0000010E   5F0F               SUBI    R16, 255
   \   00000110   4F1F               SBCI    R17, 255
   \   00000112   2F28               MOV     R18, R24
   \   00000114   E030               LDI     R19, 0
   \   00000116   2F32               MOV     R19, R18
   \   00000118   E020               LDI     R18, 0
   \   0000011A   0F33               LSL     R19
   \   0000011C   01F9               MOVW    R31:R30, R19:R18
   \   0000011E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000120   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000122   8300               ST      Z, R16
   \   00000124   8311               STD     Z+1, R17
   \   00000126   2F08               MOV     R16, R24
   \   00000128   E010               LDI     R17, 0
   \   0000012A   2F10               MOV     R17, R16
   \   0000012C   E000               LDI     R16, 0
   \   0000012E   0F11               LSL     R17
   \   00000130   ....               LDI     R30, LOW(UART)
   \   00000132   ....               LDI     R31, (UART) >> 8
   \   00000134   0FE0               ADD     R30, R16
   \   00000136   1FF1               ADC     R31, R17
   \   00000138   0FE4               ADD     R30, R20
   \   0000013A   1FF5               ADC     R31, R21
   \   0000013C   8260               ST      Z, R6
    381          
    382              ReadEEPROMBuffer((channel * sizeof(float) * 2), sizeof(float), (char *)&UART[ch].pTxBuffer[UART[ch].TxFirst]);
   \   0000013E   2F08               MOV     R16, R24
   \   00000140   E010               LDI     R17, 0
   \   00000142   2F10               MOV     R17, R16
   \   00000144   E000               LDI     R16, 0
   \   00000146   0F11               LSL     R17
   \   00000148   ....               LDI     R20, LOW(UART)
   \   0000014A   ....               LDI     R21, (UART) >> 8
   \   0000014C   0F40               ADD     R20, R16
   \   0000014E   1F51               ADC     R21, R17
   \   00000150   2F08               MOV     R16, R24
   \   00000152   E010               LDI     R17, 0
   \   00000154   2F10               MOV     R17, R16
   \   00000156   E000               LDI     R16, 0
   \   00000158   0F11               LSL     R17
   \   0000015A   01F8               MOVW    R31:R30, R17:R16
   \   0000015C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000015E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000160   8100               LD      R16, Z
   \   00000162   8111               LDD     R17, Z+1
   \   00000164   0F40               ADD     R20, R16
   \   00000166   1F51               ADC     R21, R17
   \   00000168   E024               LDI     R18, 4
   \   0000016A   01BA               MOVW    R23:R22, R21:R20
   \   0000016C   2D06               MOV     R16, R6
   \   0000016E   E010               LDI     R17, 0
   \   00000170   E048               LDI     R20, 8
   \   00000172   E050               LDI     R21, 0
   \   00000174   ........           CALL    ?S_EC_MUL_L02
   \   00000178   01AB               MOVW    R21:R20, R23:R22
   \   0000017A   ........           CALL    ReadEEPROMBuffer
    383              UART[ch].TxFirst += sizeof(float);
   \   0000017E   2F08               MOV     R16, R24
   \   00000180   E010               LDI     R17, 0
   \   00000182   2F10               MOV     R17, R16
   \   00000184   E000               LDI     R16, 0
   \   00000186   0F11               LSL     R17
   \   00000188   01F8               MOVW    R31:R30, R17:R16
   \   0000018A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000018C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000018E   8100               LD      R16, Z
   \   00000190   8111               LDD     R17, Z+1
   \   00000192   5F0C               SUBI    R16, 252
   \   00000194   4F1F               SBCI    R17, 255
   \   00000196   8300               ST      Z, R16
   \   00000198   8311               STD     Z+1, R17
    384              ReadEEPROMBuffer((channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char *)&UART[ch].pTxBuffer[UART[ch].TxFirst]);
   \   0000019A   2F08               MOV     R16, R24
   \   0000019C   E010               LDI     R17, 0
   \   0000019E   2F10               MOV     R17, R16
   \   000001A0   E000               LDI     R16, 0
   \   000001A2   0F11               LSL     R17
   \   000001A4   ....               LDI     R20, LOW(UART)
   \   000001A6   ....               LDI     R21, (UART) >> 8
   \   000001A8   0F40               ADD     R20, R16
   \   000001AA   1F51               ADC     R21, R17
   \   000001AC   2F08               MOV     R16, R24
   \   000001AE   E010               LDI     R17, 0
   \   000001B0   2F10               MOV     R17, R16
   \   000001B2   E000               LDI     R16, 0
   \   000001B4   0F11               LSL     R17
   \   000001B6   01F8               MOVW    R31:R30, R17:R16
   \   000001B8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001BA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001BC   8100               LD      R16, Z
   \   000001BE   8111               LDD     R17, Z+1
   \   000001C0   0F40               ADD     R20, R16
   \   000001C2   1F51               ADC     R21, R17
   \   000001C4   E024               LDI     R18, 4
   \   000001C6   01BA               MOVW    R23:R22, R21:R20
   \   000001C8   2D06               MOV     R16, R6
   \   000001CA   E010               LDI     R17, 0
   \   000001CC   E048               LDI     R20, 8
   \   000001CE   E050               LDI     R21, 0
   \   000001D0   ........           CALL    ?S_EC_MUL_L02
   \   000001D4   5F0C               SUBI    R16, 252
   \   000001D6   4F1F               SBCI    R17, 255
   \   000001D8   01AB               MOVW    R21:R20, R23:R22
   \   000001DA   ........           CALL    ReadEEPROMBuffer
    385              UART[ch].TxFirst += sizeof(float);
   \   000001DE   2F08               MOV     R16, R24
   \   000001E0   E010               LDI     R17, 0
   \   000001E2   2F10               MOV     R17, R16
   \   000001E4   E000               LDI     R16, 0
   \   000001E6   0F11               LSL     R17
   \   000001E8   01F8               MOVW    R31:R30, R17:R16
   \   000001EA   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001EC   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001EE   8100               LD      R16, Z
   \   000001F0   8111               LDD     R17, Z+1
   \   000001F2   5F0C               SUBI    R16, 252
   \   000001F4   4F1F               SBCI    R17, 255
   \   000001F6   8300               ST      Z, R16
   \   000001F8   8311               STD     Z+1, R17
    386          
    387              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   000001FA   2F08               MOV     R16, R24
   \   000001FC   E010               LDI     R17, 0
   \   000001FE   2F10               MOV     R17, R16
   \   00000200   E000               LDI     R16, 0
   \   00000202   0F11               LSL     R17
   \   00000204   01F8               MOVW    R31:R30, R17:R16
   \   00000206   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000208   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000020A   8100               LD      R16, Z
   \   0000020C   8111               LDD     R17, Z+1
   \   0000020E   2D14               MOV     R17, R4
   \   00000210   1B01               SUB     R16, R17
   \   00000212   5002               SUBI    R16, 2
   \   00000214   2F28               MOV     R18, R24
   \   00000216   E030               LDI     R19, 0
   \   00000218   2F32               MOV     R19, R18
   \   0000021A   E020               LDI     R18, 0
   \   0000021C   0F33               LSL     R19
   \   0000021E   ....               LDI     R30, LOW(UART)
   \   00000220   ....               LDI     R31, (UART) >> 8
   \   00000222   0FE2               ADD     R30, R18
   \   00000224   1FF3               ADC     R31, R19
   \   00000226   0DE4               ADD     R30, R4
   \   00000228   1DF5               ADC     R31, R5
   \   0000022A   8300               ST      Z, R16
    388              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   0000022C   2F08               MOV     R16, R24
   \   0000022E   E010               LDI     R17, 0
   \   00000230   2F10               MOV     R17, R16
   \   00000232   E000               LDI     R16, 0
   \   00000234   0F11               LSL     R17
   \   00000236   01F8               MOVW    R31:R30, R17:R16
   \   00000238   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000023A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000023C   8100               LD      R16, Z
   \   0000023E   8111               LDD     R17, Z+1
   \   00000240   1904               SUB     R16, R4
   \   00000242   0915               SBC     R17, R5
   \   00000244   5002               SUBI    R16, 2
   \   00000246   4010               SBCI    R17, 0
   \   00000248   2F01               MOV     R16, R17
   \   0000024A   E010               LDI     R17, 0
   \   0000024C   2F20               MOV     R18, R16
   \   0000024E   ....               LDI     R30, LOW((UART + 1))
   \   00000250   ....               LDI     R31, HIGH((UART + 1))
   \   00000252   0DE4               ADD     R30, R4
   \   00000254   1DF5               ADC     R31, R5
   \   00000256   2F08               MOV     R16, R24
   \   00000258   E010               LDI     R17, 0
   \   0000025A   2F10               MOV     R17, R16
   \   0000025C   E000               LDI     R16, 0
   \   0000025E   0F11               LSL     R17
   \   00000260   0FE0               ADD     R30, R16
   \   00000262   1FF1               ADC     R31, R17
   \   00000264   8320               ST      Z, R18
    389          }
   \   00000266   E0E7               LDI     R30, 7
   \   00000268   ........           JMP     ?EPILOGUE_B7_L09
    390          
    391          
    392          /*************************************************************************
    393          *
    394          * Build datablock for Internal AD
    395          *
    396          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    397          void BuildADInt(char ch, short pointer) {
   \                     BuildADInt:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01A9               MOVW    R21:R20, R19:R18
    398          
    399              short ntna, i;
    400              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000006   2F60               MOV     R22, R16
   \   00000008   E070               LDI     R23, 0
   \   0000000A   2F76               MOV     R23, R22
   \   0000000C   E060               LDI     R22, 0
   \   0000000E   0F77               LSL     R23
   \   00000010   01FB               MOVW    R31:R30, R23:R22
   \   00000012   ....               SUBI    R30, LOW((-(UART + 446) & 0xFFFF))
   \   00000014   ....               SBCI    R31, HIGH((-(UART + 446) & 0xFFFF))
   \   00000016   E011               LDI     R17, 1
   \   00000018   8310               ST      Z, R17
    401          
    402              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA & 0xff;
   \   0000001A   2F60               MOV     R22, R16
   \   0000001C   E070               LDI     R23, 0
   \   0000001E   2F76               MOV     R23, R22
   \   00000020   E060               LDI     R22, 0
   \   00000022   0F77               LSL     R23
   \   00000024   01FB               MOVW    R31:R30, R23:R22
   \   00000026   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000028   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000002A   8000               LD      R0, Z
   \   0000002C   8011               LDD     R1, Z+1
   \   0000002E   01D0               MOVW    R27:R26, R1:R0
   \   00000030   9611               ADIW    R27:R26, 1
   \   00000032   2F60               MOV     R22, R16
   \   00000034   E070               LDI     R23, 0
   \   00000036   2F76               MOV     R23, R22
   \   00000038   E060               LDI     R22, 0
   \   0000003A   0F77               LSL     R23
   \   0000003C   01FB               MOVW    R31:R30, R23:R22
   \   0000003E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000040   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000042   83A0               ST      Z, R26
   \   00000044   83B1               STD     Z+1, R27
   \   00000046   2F60               MOV     R22, R16
   \   00000048   E070               LDI     R23, 0
   \   0000004A   2F76               MOV     R23, R22
   \   0000004C   E060               LDI     R22, 0
   \   0000004E   0F77               LSL     R23
   \   00000050   ....               LDI     R30, LOW(UART)
   \   00000052   ....               LDI     R31, (UART) >> 8
   \   00000054   0FE6               ADD     R30, R22
   \   00000056   1FF7               ADC     R31, R23
   \   00000058   0DE0               ADD     R30, R0
   \   0000005A   1DF1               ADC     R31, R1
   \   0000005C   E413               LDI     R17, 67
   \   0000005E   8310               ST      Z, R17
    403              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA >> 8;
   \   00000060   2F60               MOV     R22, R16
   \   00000062   E070               LDI     R23, 0
   \   00000064   2F76               MOV     R23, R22
   \   00000066   E060               LDI     R22, 0
   \   00000068   0F77               LSL     R23
   \   0000006A   01FB               MOVW    R31:R30, R23:R22
   \   0000006C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000070   8000               LD      R0, Z
   \   00000072   8011               LDD     R1, Z+1
   \   00000074   01D0               MOVW    R27:R26, R1:R0
   \   00000076   9611               ADIW    R27:R26, 1
   \   00000078   2F60               MOV     R22, R16
   \   0000007A   E070               LDI     R23, 0
   \   0000007C   2F76               MOV     R23, R22
   \   0000007E   E060               LDI     R22, 0
   \   00000080   0F77               LSL     R23
   \   00000082   01FB               MOVW    R31:R30, R23:R22
   \   00000084   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000086   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000088   83A0               ST      Z, R26
   \   0000008A   83B1               STD     Z+1, R27
   \   0000008C   2F60               MOV     R22, R16
   \   0000008E   E070               LDI     R23, 0
   \   00000090   2F76               MOV     R23, R22
   \   00000092   E060               LDI     R22, 0
   \   00000094   0F77               LSL     R23
   \   00000096   ....               LDI     R30, LOW(UART)
   \   00000098   ....               LDI     R31, (UART) >> 8
   \   0000009A   0FE6               ADD     R30, R22
   \   0000009C   1FF7               ADC     R31, R23
   \   0000009E   0DE0               ADD     R30, R0
   \   000000A0   1DF1               ADC     R31, R1
   \   000000A2   E014               LDI     R17, 4
   \   000000A4   8310               ST      Z, R17
    404              ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000A6   2F60               MOV     R22, R16
   \   000000A8   E070               LDI     R23, 0
   \   000000AA   2F76               MOV     R23, R22
   \   000000AC   E060               LDI     R22, 0
   \   000000AE   0F77               LSL     R23
   \   000000B0   01FB               MOVW    R31:R30, R23:R22
   \   000000B2   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000B6   8160               LD      R22, Z
   \   000000B8   8171               LDD     R23, Z+1
   \   000000BA   019B               MOVW    R19:R18, R23:R22
    405              UART[ch].TxFirst += 2;                                      // two byte length
   \   000000BC   2F60               MOV     R22, R16
   \   000000BE   E070               LDI     R23, 0
   \   000000C0   2F76               MOV     R23, R22
   \   000000C2   E060               LDI     R22, 0
   \   000000C4   0F77               LSL     R23
   \   000000C6   01FB               MOVW    R31:R30, R23:R22
   \   000000C8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000CC   8160               LD      R22, Z
   \   000000CE   8171               LDD     R23, Z+1
   \   000000D0   5F6E               SUBI    R22, 254
   \   000000D2   4F7F               SBCI    R23, 255
   \   000000D4   8360               ST      Z, R22
   \   000000D6   8371               STD     Z+1, R23
    406          
    407              for (i = 0; i < 3; i++) {
   \   000000D8   E080               LDI     R24, 0
   \   000000DA   E090               LDI     R25, 0
   \                     ??BuildADInt_0:
   \   000000DC   3083               CPI     R24, 3
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   0791               CPC     R25, R17
   \   000000E2   F00C               BRLT    $+2+2
   \   000000E4   C05B               RJMP    ??BuildADInt_1
    408                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i];
   \   000000E6   2F60               MOV     R22, R16
   \   000000E8   E070               LDI     R23, 0
   \   000000EA   2F76               MOV     R23, R22
   \   000000EC   E060               LDI     R22, 0
   \   000000EE   0F77               LSL     R23
   \   000000F0   01FB               MOVW    R31:R30, R23:R22
   \   000000F2   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000F4   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000F6   8000               LD      R0, Z
   \   000000F8   8011               LDD     R1, Z+1
   \   000000FA   01D0               MOVW    R27:R26, R1:R0
   \   000000FC   9611               ADIW    R27:R26, 1
   \   000000FE   2F60               MOV     R22, R16
   \   00000100   E070               LDI     R23, 0
   \   00000102   2F76               MOV     R23, R22
   \   00000104   E060               LDI     R22, 0
   \   00000106   0F77               LSL     R23
   \   00000108   01FB               MOVW    R31:R30, R23:R22
   \   0000010A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000010C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000010E   83A0               ST      Z, R26
   \   00000110   83B1               STD     Z+1, R27
   \   00000112   01BC               MOVW    R23:R22, R25:R24
   \   00000114   0F66               LSL     R22
   \   00000116   1F77               ROL     R23
   \   00000118   01FB               MOVW    R31:R30, R23:R22
   \   0000011A   ....               SUBI    R30, LOW((-(ADInt) & 0xFFFF))
   \   0000011C   ....               SBCI    R31, (-(ADInt) & 0xFFFF) >> 8
   \   0000011E   8160               LD      R22, Z
   \   00000120   8171               LDD     R23, Z+1
   \   00000122   2F16               MOV     R17, R22
   \   00000124   2F60               MOV     R22, R16
   \   00000126   E070               LDI     R23, 0
   \   00000128   2F76               MOV     R23, R22
   \   0000012A   E060               LDI     R22, 0
   \   0000012C   0F77               LSL     R23
   \   0000012E   ....               LDI     R30, LOW(UART)
   \   00000130   ....               LDI     R31, (UART) >> 8
   \   00000132   0FE6               ADD     R30, R22
   \   00000134   1FF7               ADC     R31, R23
   \   00000136   0DE0               ADD     R30, R0
   \   00000138   1DF1               ADC     R31, R1
   \   0000013A   8310               ST      Z, R17
    409                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] >> 8;   // ADresult
   \   0000013C   2F60               MOV     R22, R16
   \   0000013E   E070               LDI     R23, 0
   \   00000140   2F76               MOV     R23, R22
   \   00000142   E060               LDI     R22, 0
   \   00000144   0F77               LSL     R23
   \   00000146   01FB               MOVW    R31:R30, R23:R22
   \   00000148   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000014A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000014C   8000               LD      R0, Z
   \   0000014E   8011               LDD     R1, Z+1
   \   00000150   01D0               MOVW    R27:R26, R1:R0
   \   00000152   9611               ADIW    R27:R26, 1
   \   00000154   2F60               MOV     R22, R16
   \   00000156   E070               LDI     R23, 0
   \   00000158   2F76               MOV     R23, R22
   \   0000015A   E060               LDI     R22, 0
   \   0000015C   0F77               LSL     R23
   \   0000015E   01FB               MOVW    R31:R30, R23:R22
   \   00000160   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000162   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000164   83A0               ST      Z, R26
   \   00000166   83B1               STD     Z+1, R27
   \   00000168   01BC               MOVW    R23:R22, R25:R24
   \   0000016A   0F66               LSL     R22
   \   0000016C   1F77               ROL     R23
   \   0000016E   01FB               MOVW    R31:R30, R23:R22
   \   00000170   ....               SUBI    R30, LOW((-(ADInt) & 0xFFFF))
   \   00000172   ....               SBCI    R31, (-(ADInt) & 0xFFFF) >> 8
   \   00000174   8160               LD      R22, Z
   \   00000176   8171               LDD     R23, Z+1
   \   00000178   2F67               MOV     R22, R23
   \   0000017A   0F77               LSL     R23
   \   0000017C   0B77               SBC     R23, R23
   \   0000017E   2F16               MOV     R17, R22
   \   00000180   2F60               MOV     R22, R16
   \   00000182   E070               LDI     R23, 0
   \   00000184   2F76               MOV     R23, R22
   \   00000186   E060               LDI     R22, 0
   \   00000188   0F77               LSL     R23
   \   0000018A   ....               LDI     R30, LOW(UART)
   \   0000018C   ....               LDI     R31, (UART) >> 8
   \   0000018E   0FE6               ADD     R30, R22
   \   00000190   1FF7               ADC     R31, R23
   \   00000192   0DE0               ADD     R30, R0
   \   00000194   1DF1               ADC     R31, R1
   \   00000196   8310               ST      Z, R17
    410              }
   \   00000198   9601               ADIW    R25:R24, 1
   \   0000019A   CFA0               RJMP    ??BuildADInt_0
    411          
    412              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??BuildADInt_1:
   \   0000019C   2F60               MOV     R22, R16
   \   0000019E   E070               LDI     R23, 0
   \   000001A0   2F76               MOV     R23, R22
   \   000001A2   E060               LDI     R22, 0
   \   000001A4   0F77               LSL     R23
   \   000001A6   01FB               MOVW    R31:R30, R23:R22
   \   000001A8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001AA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001AC   8160               LD      R22, Z
   \   000001AE   8171               LDD     R23, Z+1
   \   000001B0   2F12               MOV     R17, R18
   \   000001B2   1B61               SUB     R22, R17
   \   000001B4   5062               SUBI    R22, 2
   \   000001B6   2E00               MOV     R0, R16
   \   000001B8   2411               CLR     R1
   \   000001BA   2C10               MOV     R1, R0
   \   000001BC   2400               CLR     R0
   \   000001BE   0C11               LSL     R1
   \   000001C0   ....               LDI     R30, LOW(UART)
   \   000001C2   ....               LDI     R31, (UART) >> 8
   \   000001C4   0DE0               ADD     R30, R0
   \   000001C6   1DF1               ADC     R31, R1
   \   000001C8   0FE2               ADD     R30, R18
   \   000001CA   1FF3               ADC     R31, R19
   \   000001CC   8360               ST      Z, R22
    413              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   000001CE   2F60               MOV     R22, R16
   \   000001D0   E070               LDI     R23, 0
   \   000001D2   2F76               MOV     R23, R22
   \   000001D4   E060               LDI     R22, 0
   \   000001D6   0F77               LSL     R23
   \   000001D8   01FB               MOVW    R31:R30, R23:R22
   \   000001DA   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001DC   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001DE   81A0               LD      R26, Z
   \   000001E0   81B1               LDD     R27, Z+1
   \   000001E2   1BA2               SUB     R26, R18
   \   000001E4   0BB3               SBC     R27, R19
   \   000001E6   9712               SBIW    R27:R26, 2
   \   000001E8   2FAB               MOV     R26, R27
   \   000001EA   E0B0               LDI     R27, 0
   \   000001EC   ....               LDI     R30, LOW((UART + 1))
   \   000001EE   ....               LDI     R31, HIGH((UART + 1))
   \   000001F0   0FE2               ADD     R30, R18
   \   000001F2   1FF3               ADC     R31, R19
   \   000001F4   2F60               MOV     R22, R16
   \   000001F6   E070               LDI     R23, 0
   \   000001F8   2F76               MOV     R23, R22
   \   000001FA   E060               LDI     R22, 0
   \   000001FC   0F77               LSL     R23
   \   000001FE   0FE6               ADD     R30, R22
   \   00000200   1FF7               ADC     R31, R23
   \   00000202   83A0               ST      Z, R26
    414          
    415          }
   \   00000204   E0E4               LDI     R30, 4
   \   00000206   ........           JMP     ?EPILOGUE_B4_L09
    416          
    417          
    418          /*************************************************************************
    419          *
    420          * Build datablock for eeprom on ADcard
    421          *
    422          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    423          void BuildADEpromdata(char ch, char portch) {
   \                     BuildADEpromdata:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F20               MOV     R18, R16
   \   00000006   2E21               MOV     R2, R17
    424          
    425              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000008   2F02               MOV     R16, R18
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   2F10               MOV     R17, R16
   \   0000000E   E000               LDI     R16, 0
   \   00000010   0F11               LSL     R17
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART + 446) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART + 446) & 0xFFFF))
   \   00000018   E001               LDI     R16, 1
   \   0000001A   8300               ST      Z, R16
    426          
    427              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF & 0xff;
   \   0000001C   2F02               MOV     R16, R18
   \   0000001E   E010               LDI     R17, 0
   \   00000020   2F10               MOV     R17, R16
   \   00000022   E000               LDI     R16, 0
   \   00000024   0F11               LSL     R17
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000002C   8140               LD      R20, Z
   \   0000002E   8151               LDD     R21, Z+1
   \   00000030   01CA               MOVW    R25:R24, R21:R20
   \   00000032   9601               ADIW    R25:R24, 1
   \   00000034   2F02               MOV     R16, R18
   \   00000036   E010               LDI     R17, 0
   \   00000038   2F10               MOV     R17, R16
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   0F11               LSL     R17
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000042   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000044   8380               ST      Z, R24
   \   00000046   8391               STD     Z+1, R25
   \   00000048   2F02               MOV     R16, R18
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   2F10               MOV     R17, R16
   \   0000004E   E000               LDI     R16, 0
   \   00000050   0F11               LSL     R17
   \   00000052   ....               LDI     R30, LOW(UART)
   \   00000054   ....               LDI     R31, (UART) >> 8
   \   00000056   0FE0               ADD     R30, R16
   \   00000058   1FF1               ADC     R31, R17
   \   0000005A   0FE4               ADD     R30, R20
   \   0000005C   1FF5               ADC     R31, R21
   \   0000005E   E809               LDI     R16, 137
   \   00000060   8300               ST      Z, R16
    428              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF >> 8;
   \   00000062   2F02               MOV     R16, R18
   \   00000064   E010               LDI     R17, 0
   \   00000066   2F10               MOV     R17, R16
   \   00000068   E000               LDI     R16, 0
   \   0000006A   0F11               LSL     R17
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000070   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000072   8140               LD      R20, Z
   \   00000074   8151               LDD     R21, Z+1
   \   00000076   01CA               MOVW    R25:R24, R21:R20
   \   00000078   9601               ADIW    R25:R24, 1
   \   0000007A   2F02               MOV     R16, R18
   \   0000007C   E010               LDI     R17, 0
   \   0000007E   2F10               MOV     R17, R16
   \   00000080   E000               LDI     R16, 0
   \   00000082   0F11               LSL     R17
   \   00000084   01F8               MOVW    R31:R30, R17:R16
   \   00000086   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000088   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000008A   8380               ST      Z, R24
   \   0000008C   8391               STD     Z+1, R25
   \   0000008E   2F02               MOV     R16, R18
   \   00000090   E010               LDI     R17, 0
   \   00000092   2F10               MOV     R17, R16
   \   00000094   E000               LDI     R16, 0
   \   00000096   0F11               LSL     R17
   \   00000098   ....               LDI     R30, LOW(UART)
   \   0000009A   ....               LDI     R31, (UART) >> 8
   \   0000009C   0FE0               ADD     R30, R16
   \   0000009E   1FF1               ADC     R31, R17
   \   000000A0   0FE4               ADD     R30, R20
   \   000000A2   1FF5               ADC     R31, R21
   \   000000A4   E004               LDI     R16, 4
   \   000000A6   8300               ST      Z, R16
    429              short ntna = UART[ch].TxFirst;                                    // remember index
   \   000000A8   2F02               MOV     R16, R18
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   2F10               MOV     R17, R16
   \   000000AE   E000               LDI     R16, 0
   \   000000B0   0F11               LSL     R17
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000B8   8160               LD      R22, Z
   \   000000BA   8171               LDD     R23, Z+1
    430              UART[ch].TxFirst += 2;                                      // two byte length
   \   000000BC   2F02               MOV     R16, R18
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   2F10               MOV     R17, R16
   \   000000C2   E000               LDI     R16, 0
   \   000000C4   0F11               LSL     R17
   \   000000C6   01F8               MOVW    R31:R30, R17:R16
   \   000000C8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000CC   8100               LD      R16, Z
   \   000000CE   8111               LDD     R17, Z+1
   \   000000D0   5F0E               SUBI    R16, 254
   \   000000D2   4F1F               SBCI    R17, 255
   \   000000D4   8300               ST      Z, R16
   \   000000D6   8311               STD     Z+1, R17
    431          
    432              for (short i = 0; i < 44; i++) {
   \   000000D8   E080               LDI     R24, 0
   \   000000DA   E090               LDI     R25, 0
   \                     ??BuildADEpromdata_0:
   \   000000DC   328C               CPI     R24, 44
   \   000000DE   E000               LDI     R16, 0
   \   000000E0   0790               CPC     R25, R16
   \   000000E2   F594               BRGE    ??BuildADEpromdata_1
    433                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FromTargetBuffer[portch][i];
   \   000000E4   2F02               MOV     R16, R18
   \   000000E6   E010               LDI     R17, 0
   \   000000E8   2F10               MOV     R17, R16
   \   000000EA   E000               LDI     R16, 0
   \   000000EC   0F11               LSL     R17
   \   000000EE   01F8               MOVW    R31:R30, R17:R16
   \   000000F0   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000F2   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000F4   81A0               LD      R26, Z
   \   000000F6   81B1               LDD     R27, Z+1
   \   000000F8   018D               MOVW    R17:R16, R27:R26
   \   000000FA   5F0F               SUBI    R16, 255
   \   000000FC   4F1F               SBCI    R17, 255
   \   000000FE   2F42               MOV     R20, R18
   \   00000100   E050               LDI     R21, 0
   \   00000102   2F54               MOV     R21, R20
   \   00000104   E040               LDI     R20, 0
   \   00000106   0F55               LSL     R21
   \   00000108   01FA               MOVW    R31:R30, R21:R20
   \   0000010A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000010C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000010E   8300               ST      Z, R16
   \   00000110   8311               STD     Z+1, R17
   \   00000112   ....               LDI     R30, LOW((TData + 1428))
   \   00000114   ....               LDI     R31, HIGH((TData + 1428))
   \   00000116   0FE8               ADD     R30, R24
   \   00000118   1FF9               ADC     R31, R25
   \   0000011A   2D02               MOV     R16, R2
   \   0000011C   E010               LDI     R17, 0
   \   0000011E   E342               LDI     R20, 50
   \   00000120   E050               LDI     R21, 0
   \   00000122   ........           CALL    ?S_EC_MUL_L02
   \   00000126   0FE0               ADD     R30, R16
   \   00000128   1FF1               ADC     R31, R17
   \   0000012A   8130               LD      R19, Z
   \   0000012C   2F02               MOV     R16, R18
   \   0000012E   E010               LDI     R17, 0
   \   00000130   2F10               MOV     R17, R16
   \   00000132   E000               LDI     R16, 0
   \   00000134   0F11               LSL     R17
   \   00000136   ....               LDI     R30, LOW(UART)
   \   00000138   ....               LDI     R31, (UART) >> 8
   \   0000013A   0FE0               ADD     R30, R16
   \   0000013C   1FF1               ADC     R31, R17
   \   0000013E   0FEA               ADD     R30, R26
   \   00000140   1FFB               ADC     R31, R27
   \   00000142   8330               ST      Z, R19
    434              }
   \   00000144   9601               ADIW    R25:R24, 1
   \   00000146   CFCA               RJMP    ??BuildADEpromdata_0
    435              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??BuildADEpromdata_1:
   \   00000148   2F02               MOV     R16, R18
   \   0000014A   E010               LDI     R17, 0
   \   0000014C   2F10               MOV     R17, R16
   \   0000014E   E000               LDI     R16, 0
   \   00000150   0F11               LSL     R17
   \   00000152   01F8               MOVW    R31:R30, R17:R16
   \   00000154   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000156   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000158   8100               LD      R16, Z
   \   0000015A   8111               LDD     R17, Z+1
   \   0000015C   2F16               MOV     R17, R22
   \   0000015E   1B01               SUB     R16, R17
   \   00000160   5002               SUBI    R16, 2
   \   00000162   2F42               MOV     R20, R18
   \   00000164   E050               LDI     R21, 0
   \   00000166   2F54               MOV     R21, R20
   \   00000168   E040               LDI     R20, 0
   \   0000016A   0F55               LSL     R21
   \   0000016C   ....               LDI     R30, LOW(UART)
   \   0000016E   ....               LDI     R31, (UART) >> 8
   \   00000170   0FE4               ADD     R30, R20
   \   00000172   1FF5               ADC     R31, R21
   \   00000174   0FE6               ADD     R30, R22
   \   00000176   1FF7               ADC     R31, R23
   \   00000178   8300               ST      Z, R16
    436              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   0000017A   2F02               MOV     R16, R18
   \   0000017C   E010               LDI     R17, 0
   \   0000017E   2F10               MOV     R17, R16
   \   00000180   E000               LDI     R16, 0
   \   00000182   0F11               LSL     R17
   \   00000184   01F8               MOVW    R31:R30, R17:R16
   \   00000186   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000188   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000018A   8180               LD      R24, Z
   \   0000018C   8191               LDD     R25, Z+1
   \   0000018E   1B86               SUB     R24, R22
   \   00000190   0B97               SBC     R25, R23
   \   00000192   9702               SBIW    R25:R24, 2
   \   00000194   2F89               MOV     R24, R25
   \   00000196   E090               LDI     R25, 0
   \   00000198   ....               LDI     R30, LOW((UART + 1))
   \   0000019A   ....               LDI     R31, HIGH((UART + 1))
   \   0000019C   0FE6               ADD     R30, R22
   \   0000019E   1FF7               ADC     R31, R23
   \   000001A0   2F02               MOV     R16, R18
   \   000001A2   E010               LDI     R17, 0
   \   000001A4   2F10               MOV     R17, R16
   \   000001A6   E000               LDI     R16, 0
   \   000001A8   0F11               LSL     R17
   \   000001AA   0FE0               ADD     R30, R16
   \   000001AC   1FF1               ADC     R31, R17
   \   000001AE   8380               ST      Z, R24
    437          
    438          }
   \   000001B0   E0E4               LDI     R30, 4
   \   000001B2   ........           JMP     ?EPILOGUE_B4_L09
    439          
    440          /*************************************************************************
    441          *
    442          * Build datablock for WHData on ADcard
    443          *
    444          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    445          void BuildWHdata(char ch, short pointer) {
   \                     BuildWHdata:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    446          
    447              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000008   2D04               MOV     R16, R4
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   2F10               MOV     R17, R16
   \   0000000E   E000               LDI     R16, 0
   \   00000010   0F11               LSL     R17
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART + 446) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART + 446) & 0xFFFF))
   \   00000018   E001               LDI     R16, 1
   \   0000001A   8300               ST      Z, R16
    448          
    449              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF & 0xff;
   \   0000001C   2D04               MOV     R16, R4
   \   0000001E   E010               LDI     R17, 0
   \   00000020   2F10               MOV     R17, R16
   \   00000022   E000               LDI     R16, 0
   \   00000024   0F11               LSL     R17
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000002C   8120               LD      R18, Z
   \   0000002E   8131               LDD     R19, Z+1
   \   00000030   01C9               MOVW    R25:R24, R19:R18
   \   00000032   9601               ADIW    R25:R24, 1
   \   00000034   2D04               MOV     R16, R4
   \   00000036   E010               LDI     R17, 0
   \   00000038   2F10               MOV     R17, R16
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   0F11               LSL     R17
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000042   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000044   8380               ST      Z, R24
   \   00000046   8391               STD     Z+1, R25
   \   00000048   2D04               MOV     R16, R4
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   2F10               MOV     R17, R16
   \   0000004E   E000               LDI     R16, 0
   \   00000050   0F11               LSL     R17
   \   00000052   ....               LDI     R30, LOW(UART)
   \   00000054   ....               LDI     R31, (UART) >> 8
   \   00000056   0FE0               ADD     R30, R16
   \   00000058   1FF1               ADC     R31, R17
   \   0000005A   0FE2               ADD     R30, R18
   \   0000005C   1FF3               ADC     R31, R19
   \   0000005E   E90C               LDI     R16, 156
   \   00000060   8300               ST      Z, R16
    450              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF >> 8;
   \   00000062   2D04               MOV     R16, R4
   \   00000064   E010               LDI     R17, 0
   \   00000066   2F10               MOV     R17, R16
   \   00000068   E000               LDI     R16, 0
   \   0000006A   0F11               LSL     R17
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000070   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000072   8120               LD      R18, Z
   \   00000074   8131               LDD     R19, Z+1
   \   00000076   01C9               MOVW    R25:R24, R19:R18
   \   00000078   9601               ADIW    R25:R24, 1
   \   0000007A   2D04               MOV     R16, R4
   \   0000007C   E010               LDI     R17, 0
   \   0000007E   2F10               MOV     R17, R16
   \   00000080   E000               LDI     R16, 0
   \   00000082   0F11               LSL     R17
   \   00000084   01F8               MOVW    R31:R30, R17:R16
   \   00000086   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000088   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000008A   8380               ST      Z, R24
   \   0000008C   8391               STD     Z+1, R25
   \   0000008E   2D04               MOV     R16, R4
   \   00000090   E010               LDI     R17, 0
   \   00000092   2F10               MOV     R17, R16
   \   00000094   E000               LDI     R16, 0
   \   00000096   0F11               LSL     R17
   \   00000098   ....               LDI     R30, LOW(UART)
   \   0000009A   ....               LDI     R31, (UART) >> 8
   \   0000009C   0FE0               ADD     R30, R16
   \   0000009E   1FF1               ADC     R31, R17
   \   000000A0   0FE2               ADD     R30, R18
   \   000000A2   1FF3               ADC     R31, R19
   \   000000A4   E004               LDI     R16, 4
   \   000000A6   8300               ST      Z, R16
    451              short ntna = UART[ch].TxFirst;                          // remember index
   \   000000A8   2D04               MOV     R16, R4
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   2F10               MOV     R17, R16
   \   000000AE   E000               LDI     R16, 0
   \   000000B0   0F11               LSL     R17
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000B8   8060               LD      R6, Z
   \   000000BA   8071               LDD     R7, Z+1
    452              UART[ch].TxFirst += 2;                                  // two byte length
   \   000000BC   2D04               MOV     R16, R4
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   2F10               MOV     R17, R16
   \   000000C2   E000               LDI     R16, 0
   \   000000C4   0F11               LSL     R17
   \   000000C6   01F8               MOVW    R31:R30, R17:R16
   \   000000C8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000CC   8100               LD      R16, Z
   \   000000CE   8111               LDD     R17, Z+1
   \   000000D0   5F0E               SUBI    R16, 254
   \   000000D2   4F1F               SBCI    R17, 255
   \   000000D4   8300               ST      Z, R16
   \   000000D6   8311               STD     Z+1, R17
    453          
    454              OS_EnterRegion();
   \   000000D8   9100....           LDS     R16, OS_Global
   \   000000DC   9503               INC     R16
   \   000000DE   9300....           STS     OS_Global, R16
    455              for (short i = 0; i < 4; i++) {
   \   000000E2   E080               LDI     R24, 0
   \   000000E4   E090               LDI     R25, 0
   \                     ??BuildWHdata_0:
   \   000000E6   3084               CPI     R24, 4
   \   000000E8   E000               LDI     R16, 0
   \   000000EA   0790               CPC     R25, R16
   \   000000EC   F00C               BRLT    $+2+2
   \   000000EE   C086               RJMP    ??BuildWHdata_1
    456                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] & 0xff; // WashTrackcnt
   \   000000F0   2D04               MOV     R16, R4
   \   000000F2   E010               LDI     R17, 0
   \   000000F4   2F10               MOV     R17, R16
   \   000000F6   E000               LDI     R16, 0
   \   000000F8   0F11               LSL     R17
   \   000000FA   01F8               MOVW    R31:R30, R17:R16
   \   000000FC   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000FE   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000100   8160               LD      R22, Z
   \   00000102   8171               LDD     R23, Z+1
   \   00000104   018B               MOVW    R17:R16, R23:R22
   \   00000106   5F0F               SUBI    R16, 255
   \   00000108   4F1F               SBCI    R17, 255
   \   0000010A   2D24               MOV     R18, R4
   \   0000010C   E030               LDI     R19, 0
   \   0000010E   2F32               MOV     R19, R18
   \   00000110   E020               LDI     R18, 0
   \   00000112   0F33               LSL     R19
   \   00000114   01F9               MOVW    R31:R30, R19:R18
   \   00000116   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000118   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000011A   8300               ST      Z, R16
   \   0000011C   8311               STD     Z+1, R17
   \   0000011E   ....               LDI     R18, LOW((TData + 1179))
   \   00000120   ....               LDI     R19, HIGH((TData + 1179))
   \   00000122   018C               MOVW    R17:R16, R25:R24
   \   00000124   0F00               LSL     R16
   \   00000126   1F11               ROL     R17
   \   00000128   0F20               ADD     R18, R16
   \   0000012A   1F31               ADC     R19, R17
   \   0000012C   ....               LDI     R30, LOW((UART + 283))
   \   0000012E   ....               LDI     R31, HIGH((UART + 283))
   \   00000130   0FEA               ADD     R30, R26
   \   00000132   1FFB               ADC     R31, R27
   \   00000134   2D04               MOV     R16, R4
   \   00000136   E010               LDI     R17, 0
   \   00000138   2F10               MOV     R17, R16
   \   0000013A   E000               LDI     R16, 0
   \   0000013C   0F11               LSL     R17
   \   0000013E   0FE0               ADD     R30, R16
   \   00000140   1FF1               ADC     R31, R17
   \   00000142   8100               LD      R16, Z
   \   00000144   E010               LDI     R17, 0
   \   00000146   E048               LDI     R20, 8
   \   00000148   E050               LDI     R21, 0
   \   0000014A   ........           CALL    ?S_EC_MUL_L02
   \   0000014E   0F20               ADD     R18, R16
   \   00000150   1F31               ADC     R19, R17
   \   00000152   01F9               MOVW    R31:R30, R19:R18
   \   00000154   8100               LD      R16, Z
   \   00000156   8111               LDD     R17, Z+1
   \   00000158   2F20               MOV     R18, R16
   \   0000015A   2D04               MOV     R16, R4
   \   0000015C   E010               LDI     R17, 0
   \   0000015E   2F10               MOV     R17, R16
   \   00000160   E000               LDI     R16, 0
   \   00000162   0F11               LSL     R17
   \   00000164   ....               LDI     R30, LOW(UART)
   \   00000166   ....               LDI     R31, (UART) >> 8
   \   00000168   0FE0               ADD     R30, R16
   \   0000016A   1FF1               ADC     R31, R17
   \   0000016C   0FE6               ADD     R30, R22
   \   0000016E   1FF7               ADC     R31, R23
   \   00000170   8320               ST      Z, R18
    457                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] >> 8) & 0xff; // WashTrackcnt
   \   00000172   2D04               MOV     R16, R4
   \   00000174   E010               LDI     R17, 0
   \   00000176   2F10               MOV     R17, R16
   \   00000178   E000               LDI     R16, 0
   \   0000017A   0F11               LSL     R17
   \   0000017C   01F8               MOVW    R31:R30, R17:R16
   \   0000017E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000180   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000182   8160               LD      R22, Z
   \   00000184   8171               LDD     R23, Z+1
   \   00000186   018B               MOVW    R17:R16, R23:R22
   \   00000188   5F0F               SUBI    R16, 255
   \   0000018A   4F1F               SBCI    R17, 255
   \   0000018C   2D24               MOV     R18, R4
   \   0000018E   E030               LDI     R19, 0
   \   00000190   2F32               MOV     R19, R18
   \   00000192   E020               LDI     R18, 0
   \   00000194   0F33               LSL     R19
   \   00000196   01F9               MOVW    R31:R30, R19:R18
   \   00000198   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000019A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000019C   8300               ST      Z, R16
   \   0000019E   8311               STD     Z+1, R17
   \   000001A0   ....               LDI     R18, LOW((TData + 1179))
   \   000001A2   ....               LDI     R19, HIGH((TData + 1179))
   \   000001A4   018C               MOVW    R17:R16, R25:R24
   \   000001A6   0F00               LSL     R16
   \   000001A8   1F11               ROL     R17
   \   000001AA   0F20               ADD     R18, R16
   \   000001AC   1F31               ADC     R19, R17
   \   000001AE   ....               LDI     R30, LOW((UART + 283))
   \   000001B0   ....               LDI     R31, HIGH((UART + 283))
   \   000001B2   0FEA               ADD     R30, R26
   \   000001B4   1FFB               ADC     R31, R27
   \   000001B6   2D04               MOV     R16, R4
   \   000001B8   E010               LDI     R17, 0
   \   000001BA   2F10               MOV     R17, R16
   \   000001BC   E000               LDI     R16, 0
   \   000001BE   0F11               LSL     R17
   \   000001C0   0FE0               ADD     R30, R16
   \   000001C2   1FF1               ADC     R31, R17
   \   000001C4   8100               LD      R16, Z
   \   000001C6   E010               LDI     R17, 0
   \   000001C8   E048               LDI     R20, 8
   \   000001CA   E050               LDI     R21, 0
   \   000001CC   ........           CALL    ?S_EC_MUL_L02
   \   000001D0   0F20               ADD     R18, R16
   \   000001D2   1F31               ADC     R19, R17
   \   000001D4   01F9               MOVW    R31:R30, R19:R18
   \   000001D6   8100               LD      R16, Z
   \   000001D8   8111               LDD     R17, Z+1
   \   000001DA   2F01               MOV     R16, R17
   \   000001DC   E010               LDI     R17, 0
   \   000001DE   2F20               MOV     R18, R16
   \   000001E0   2D04               MOV     R16, R4
   \   000001E2   E010               LDI     R17, 0
   \   000001E4   2F10               MOV     R17, R16
   \   000001E6   E000               LDI     R16, 0
   \   000001E8   0F11               LSL     R17
   \   000001EA   ....               LDI     R30, LOW(UART)
   \   000001EC   ....               LDI     R31, (UART) >> 8
   \   000001EE   0FE0               ADD     R30, R16
   \   000001F0   1FF1               ADC     R31, R17
   \   000001F2   0FE6               ADD     R30, R22
   \   000001F4   1FF7               ADC     R31, R23
   \   000001F6   8320               ST      Z, R18
    458              }
   \   000001F8   9601               ADIW    R25:R24, 1
   \   000001FA   CF75               RJMP    ??BuildWHdata_0
    459              UART[ch].pTxBuffer[UART[ch].TxFirst++] =  TData.RS4.LevelSwitch[UART[ch].pRxBuffer[pointer]];
   \                     ??BuildWHdata_1:
   \   000001FC   2D04               MOV     R16, R4
   \   000001FE   E010               LDI     R17, 0
   \   00000200   2F10               MOV     R17, R16
   \   00000202   E000               LDI     R16, 0
   \   00000204   0F11               LSL     R17
   \   00000206   01F8               MOVW    R31:R30, R17:R16
   \   00000208   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000020A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000020C   8120               LD      R18, Z
   \   0000020E   8131               LDD     R19, Z+1
   \   00000210   01C9               MOVW    R25:R24, R19:R18
   \   00000212   9601               ADIW    R25:R24, 1
   \   00000214   2D04               MOV     R16, R4
   \   00000216   E010               LDI     R17, 0
   \   00000218   2F10               MOV     R17, R16
   \   0000021A   E000               LDI     R16, 0
   \   0000021C   0F11               LSL     R17
   \   0000021E   01F8               MOVW    R31:R30, R17:R16
   \   00000220   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000222   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000224   8380               ST      Z, R24
   \   00000226   8391               STD     Z+1, R25
   \   00000228   ....               LDI     R30, LOW((UART + 283))
   \   0000022A   ....               LDI     R31, HIGH((UART + 283))
   \   0000022C   0FEA               ADD     R30, R26
   \   0000022E   1FFB               ADC     R31, R27
   \   00000230   2D04               MOV     R16, R4
   \   00000232   E010               LDI     R17, 0
   \   00000234   2F10               MOV     R17, R16
   \   00000236   E000               LDI     R16, 0
   \   00000238   0F11               LSL     R17
   \   0000023A   0FE0               ADD     R30, R16
   \   0000023C   1FF1               ADC     R31, R17
   \   0000023E   8100               LD      R16, Z
   \   00000240   E010               LDI     R17, 0
   \   00000242   01F8               MOVW    R31:R30, R17:R16
   \   00000244   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   00000246   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   00000248   8140               LD      R20, Z
   \   0000024A   2D04               MOV     R16, R4
   \   0000024C   E010               LDI     R17, 0
   \   0000024E   2F10               MOV     R17, R16
   \   00000250   E000               LDI     R16, 0
   \   00000252   0F11               LSL     R17
   \   00000254   ....               LDI     R30, LOW(UART)
   \   00000256   ....               LDI     R31, (UART) >> 8
   \   00000258   0FE0               ADD     R30, R16
   \   0000025A   1FF1               ADC     R31, R17
   \   0000025C   0FE2               ADD     R30, R18
   \   0000025E   1FF3               ADC     R31, R19
   \   00000260   8340               ST      Z, R20
    460              UART[ch].pTxBuffer[UART[ch].TxFirst++] =  TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] & 0xff; // WashTrackcnt
   \   00000262   2D04               MOV     R16, R4
   \   00000264   E010               LDI     R17, 0
   \   00000266   2F10               MOV     R17, R16
   \   00000268   E000               LDI     R16, 0
   \   0000026A   0F11               LSL     R17
   \   0000026C   01F8               MOVW    R31:R30, R17:R16
   \   0000026E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000270   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000272   8120               LD      R18, Z
   \   00000274   8131               LDD     R19, Z+1
   \   00000276   01C9               MOVW    R25:R24, R19:R18
   \   00000278   9601               ADIW    R25:R24, 1
   \   0000027A   2D04               MOV     R16, R4
   \   0000027C   E010               LDI     R17, 0
   \   0000027E   2F10               MOV     R17, R16
   \   00000280   E000               LDI     R16, 0
   \   00000282   0F11               LSL     R17
   \   00000284   01F8               MOVW    R31:R30, R17:R16
   \   00000286   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000288   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000028A   8380               ST      Z, R24
   \   0000028C   8391               STD     Z+1, R25
   \   0000028E   ....               LDI     R30, LOW((UART + 283))
   \   00000290   ....               LDI     R31, HIGH((UART + 283))
   \   00000292   0FEA               ADD     R30, R26
   \   00000294   1FFB               ADC     R31, R27
   \   00000296   2D04               MOV     R16, R4
   \   00000298   E010               LDI     R17, 0
   \   0000029A   2F10               MOV     R17, R16
   \   0000029C   E000               LDI     R16, 0
   \   0000029E   0F11               LSL     R17
   \   000002A0   0FE0               ADD     R30, R16
   \   000002A2   1FF1               ADC     R31, R17
   \   000002A4   8100               LD      R16, Z
   \   000002A6   E010               LDI     R17, 0
   \   000002A8   0F00               LSL     R16
   \   000002AA   1F11               ROL     R17
   \   000002AC   01F8               MOVW    R31:R30, R17:R16
   \   000002AE   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   000002B0   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   000002B2   8100               LD      R16, Z
   \   000002B4   8111               LDD     R17, Z+1
   \   000002B6   2F40               MOV     R20, R16
   \   000002B8   2D04               MOV     R16, R4
   \   000002BA   E010               LDI     R17, 0
   \   000002BC   2F10               MOV     R17, R16
   \   000002BE   E000               LDI     R16, 0
   \   000002C0   0F11               LSL     R17
   \   000002C2   ....               LDI     R30, LOW(UART)
   \   000002C4   ....               LDI     R31, (UART) >> 8
   \   000002C6   0FE0               ADD     R30, R16
   \   000002C8   1FF1               ADC     R31, R17
   \   000002CA   0FE2               ADD     R30, R18
   \   000002CC   1FF3               ADC     R31, R19
   \   000002CE   8340               ST      Z, R20
    461              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] >> 8) & 0xff; // WashTrackcnt
   \   000002D0   2D04               MOV     R16, R4
   \   000002D2   E010               LDI     R17, 0
   \   000002D4   2F10               MOV     R17, R16
   \   000002D6   E000               LDI     R16, 0
   \   000002D8   0F11               LSL     R17
   \   000002DA   01F8               MOVW    R31:R30, R17:R16
   \   000002DC   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000002DE   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000002E0   8120               LD      R18, Z
   \   000002E2   8131               LDD     R19, Z+1
   \   000002E4   01C9               MOVW    R25:R24, R19:R18
   \   000002E6   9601               ADIW    R25:R24, 1
   \   000002E8   2D04               MOV     R16, R4
   \   000002EA   E010               LDI     R17, 0
   \   000002EC   2F10               MOV     R17, R16
   \   000002EE   E000               LDI     R16, 0
   \   000002F0   0F11               LSL     R17
   \   000002F2   01F8               MOVW    R31:R30, R17:R16
   \   000002F4   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000002F6   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000002F8   8380               ST      Z, R24
   \   000002FA   8391               STD     Z+1, R25
   \   000002FC   ....               LDI     R30, LOW((UART + 283))
   \   000002FE   ....               LDI     R31, HIGH((UART + 283))
   \   00000300   0FEA               ADD     R30, R26
   \   00000302   1FFB               ADC     R31, R27
   \   00000304   2D04               MOV     R16, R4
   \   00000306   E010               LDI     R17, 0
   \   00000308   2F10               MOV     R17, R16
   \   0000030A   E000               LDI     R16, 0
   \   0000030C   0F11               LSL     R17
   \   0000030E   0FE0               ADD     R30, R16
   \   00000310   1FF1               ADC     R31, R17
   \   00000312   8100               LD      R16, Z
   \   00000314   E010               LDI     R17, 0
   \   00000316   0F00               LSL     R16
   \   00000318   1F11               ROL     R17
   \   0000031A   01F8               MOVW    R31:R30, R17:R16
   \   0000031C   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   0000031E   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   00000320   8100               LD      R16, Z
   \   00000322   8111               LDD     R17, Z+1
   \   00000324   2F01               MOV     R16, R17
   \   00000326   E010               LDI     R17, 0
   \   00000328   2F40               MOV     R20, R16
   \   0000032A   2D04               MOV     R16, R4
   \   0000032C   E010               LDI     R17, 0
   \   0000032E   2F10               MOV     R17, R16
   \   00000330   E000               LDI     R16, 0
   \   00000332   0F11               LSL     R17
   \   00000334   ....               LDI     R30, LOW(UART)
   \   00000336   ....               LDI     R31, (UART) >> 8
   \   00000338   0FE0               ADD     R30, R16
   \   0000033A   1FF1               ADC     R31, R17
   \   0000033C   0FE2               ADD     R30, R18
   \   0000033E   1FF3               ADC     R31, R19
   \   00000340   8340               ST      Z, R20
    462              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   00000342   2D04               MOV     R16, R4
   \   00000344   E010               LDI     R17, 0
   \   00000346   2F10               MOV     R17, R16
   \   00000348   E000               LDI     R16, 0
   \   0000034A   0F11               LSL     R17
   \   0000034C   01F8               MOVW    R31:R30, R17:R16
   \   0000034E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000350   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000352   8100               LD      R16, Z
   \   00000354   8111               LDD     R17, Z+1
   \   00000356   2D16               MOV     R17, R6
   \   00000358   1B01               SUB     R16, R17
   \   0000035A   5002               SUBI    R16, 2
   \   0000035C   2D24               MOV     R18, R4
   \   0000035E   E030               LDI     R19, 0
   \   00000360   2F32               MOV     R19, R18
   \   00000362   E020               LDI     R18, 0
   \   00000364   0F33               LSL     R19
   \   00000366   ....               LDI     R30, LOW(UART)
   \   00000368   ....               LDI     R31, (UART) >> 8
   \   0000036A   0FE2               ADD     R30, R18
   \   0000036C   1FF3               ADC     R31, R19
   \   0000036E   0DE6               ADD     R30, R6
   \   00000370   1DF7               ADC     R31, R7
   \   00000372   8300               ST      Z, R16
    463              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   00000374   2D04               MOV     R16, R4
   \   00000376   E010               LDI     R17, 0
   \   00000378   2F10               MOV     R17, R16
   \   0000037A   E000               LDI     R16, 0
   \   0000037C   0F11               LSL     R17
   \   0000037E   01F8               MOVW    R31:R30, R17:R16
   \   00000380   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000382   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000384   8180               LD      R24, Z
   \   00000386   8191               LDD     R25, Z+1
   \   00000388   1986               SUB     R24, R6
   \   0000038A   0997               SBC     R25, R7
   \   0000038C   9702               SBIW    R25:R24, 2
   \   0000038E   2F89               MOV     R24, R25
   \   00000390   E090               LDI     R25, 0
   \   00000392   ....               LDI     R30, LOW((UART + 1))
   \   00000394   ....               LDI     R31, HIGH((UART + 1))
   \   00000396   0DE6               ADD     R30, R6
   \   00000398   1DF7               ADC     R31, R7
   \   0000039A   2D04               MOV     R16, R4
   \   0000039C   E010               LDI     R17, 0
   \   0000039E   2F10               MOV     R17, R16
   \   000003A0   E000               LDI     R16, 0
   \   000003A2   0F11               LSL     R17
   \   000003A4   0FE0               ADD     R30, R16
   \   000003A6   1FF1               ADC     R31, R17
   \   000003A8   8380               ST      Z, R24
    464              OS_LeaveRegion();
   \   000003AA   ........           CALL    OS_LeaveRegion
    465          }
   \   000003AE   E0E8               LDI     R30, 8
   \   000003B0   ........           JMP     ?EPILOGUE_B8_L09
    466          
    467          
    468          
    469          /*************************************************************************
    470          *
    471          * Build setup dat package for AN-ZB485
    472          *
    473          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    474          void BuildRS4Setup(char ch, short pointer) {
   \                     BuildRS4Setup:
   \   00000000   011C               MOVW    R3:R2, R25:R24
   \   00000002   2F40               MOV     R20, R16
    475          
    476              short ntna;
    477              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000004   2F64               MOV     R22, R20
   \   00000006   E070               LDI     R23, 0
   \   00000008   2F76               MOV     R23, R22
   \   0000000A   E060               LDI     R22, 0
   \   0000000C   0F77               LSL     R23
   \   0000000E   01FB               MOVW    R31:R30, R23:R22
   \   00000010   ....               SUBI    R30, LOW((-(UART + 446) & 0xFFFF))
   \   00000012   ....               SBCI    R31, HIGH((-(UART + 446) & 0xFFFF))
   \   00000014   E051               LDI     R21, 1
   \   00000016   8350               ST      Z, R21
    478          
    479              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP & 0xff;
   \   00000018   2F64               MOV     R22, R20
   \   0000001A   E070               LDI     R23, 0
   \   0000001C   2F76               MOV     R23, R22
   \   0000001E   E060               LDI     R22, 0
   \   00000020   0F77               LSL     R23
   \   00000022   01FB               MOVW    R31:R30, R23:R22
   \   00000024   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000026   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000028   8000               LD      R0, Z
   \   0000002A   8011               LDD     R1, Z+1
   \   0000002C   01C0               MOVW    R25:R24, R1:R0
   \   0000002E   9601               ADIW    R25:R24, 1
   \   00000030   2F64               MOV     R22, R20
   \   00000032   E070               LDI     R23, 0
   \   00000034   2F76               MOV     R23, R22
   \   00000036   E060               LDI     R22, 0
   \   00000038   0F77               LSL     R23
   \   0000003A   01FB               MOVW    R31:R30, R23:R22
   \   0000003C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000003E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000040   8380               ST      Z, R24
   \   00000042   8391               STD     Z+1, R25
   \   00000044   2F64               MOV     R22, R20
   \   00000046   E070               LDI     R23, 0
   \   00000048   2F76               MOV     R23, R22
   \   0000004A   E060               LDI     R22, 0
   \   0000004C   0F77               LSL     R23
   \   0000004E   ....               LDI     R30, LOW(UART)
   \   00000050   ....               LDI     R31, (UART) >> 8
   \   00000052   0FE6               ADD     R30, R22
   \   00000054   1FF7               ADC     R31, R23
   \   00000056   0DE0               ADD     R30, R0
   \   00000058   1DF1               ADC     R31, R1
   \   0000005A   E557               LDI     R21, 87
   \   0000005C   8350               ST      Z, R21
    480              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP >> 8;
   \   0000005E   2F64               MOV     R22, R20
   \   00000060   E070               LDI     R23, 0
   \   00000062   2F76               MOV     R23, R22
   \   00000064   E060               LDI     R22, 0
   \   00000066   0F77               LSL     R23
   \   00000068   01FB               MOVW    R31:R30, R23:R22
   \   0000006A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000006E   8000               LD      R0, Z
   \   00000070   8011               LDD     R1, Z+1
   \   00000072   01C0               MOVW    R25:R24, R1:R0
   \   00000074   9601               ADIW    R25:R24, 1
   \   00000076   2F64               MOV     R22, R20
   \   00000078   E070               LDI     R23, 0
   \   0000007A   2F76               MOV     R23, R22
   \   0000007C   E060               LDI     R22, 0
   \   0000007E   0F77               LSL     R23
   \   00000080   01FB               MOVW    R31:R30, R23:R22
   \   00000082   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000084   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000086   8380               ST      Z, R24
   \   00000088   8391               STD     Z+1, R25
   \   0000008A   2F64               MOV     R22, R20
   \   0000008C   E070               LDI     R23, 0
   \   0000008E   2F76               MOV     R23, R22
   \   00000090   E060               LDI     R22, 0
   \   00000092   0F77               LSL     R23
   \   00000094   ....               LDI     R30, LOW(UART)
   \   00000096   ....               LDI     R31, (UART) >> 8
   \   00000098   0FE6               ADD     R30, R22
   \   0000009A   1FF7               ADC     R31, R23
   \   0000009C   0DE0               ADD     R30, R0
   \   0000009E   1DF1               ADC     R31, R1
   \   000000A0   E054               LDI     R21, 4
   \   000000A2   8350               ST      Z, R21
    481              ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000A4   2F64               MOV     R22, R20
   \   000000A6   E070               LDI     R23, 0
   \   000000A8   2F76               MOV     R23, R22
   \   000000AA   E060               LDI     R22, 0
   \   000000AC   0F77               LSL     R23
   \   000000AE   01FB               MOVW    R31:R30, R23:R22
   \   000000B0   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000B2   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000B4   8160               LD      R22, Z
   \   000000B6   8171               LDD     R23, Z+1
   \   000000B8   018B               MOVW    R17:R16, R23:R22
    482              UART[ch].TxFirst += 2;                                      // two byte length
   \   000000BA   2F64               MOV     R22, R20
   \   000000BC   E070               LDI     R23, 0
   \   000000BE   2F76               MOV     R23, R22
   \   000000C0   E060               LDI     R22, 0
   \   000000C2   0F77               LSL     R23
   \   000000C4   01FB               MOVW    R31:R30, R23:R22
   \   000000C6   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000C8   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000CA   8160               LD      R22, Z
   \   000000CC   8171               LDD     R23, Z+1
   \   000000CE   5F6E               SUBI    R22, 254
   \   000000D0   4F7F               SBCI    R23, 255
   \   000000D2   8360               ST      Z, R22
   \   000000D4   8371               STD     Z+1, R23
    483          
    484              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.PortUsed;  // send the setup
   \   000000D6   2F64               MOV     R22, R20
   \   000000D8   E070               LDI     R23, 0
   \   000000DA   2F76               MOV     R23, R22
   \   000000DC   E060               LDI     R22, 0
   \   000000DE   0F77               LSL     R23
   \   000000E0   01FB               MOVW    R31:R30, R23:R22
   \   000000E2   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000E4   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000E6   8000               LD      R0, Z
   \   000000E8   8011               LDD     R1, Z+1
   \   000000EA   01C0               MOVW    R25:R24, R1:R0
   \   000000EC   9601               ADIW    R25:R24, 1
   \   000000EE   2F64               MOV     R22, R20
   \   000000F0   E070               LDI     R23, 0
   \   000000F2   2F76               MOV     R23, R22
   \   000000F4   E060               LDI     R22, 0
   \   000000F6   0F77               LSL     R23
   \   000000F8   01FB               MOVW    R31:R30, R23:R22
   \   000000FA   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000FC   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000FE   8380               ST      Z, R24
   \   00000100   8391               STD     Z+1, R25
   \   00000102   9150....           LDS     R21, TData
   \   00000106   2F64               MOV     R22, R20
   \   00000108   E070               LDI     R23, 0
   \   0000010A   2F76               MOV     R23, R22
   \   0000010C   E060               LDI     R22, 0
   \   0000010E   0F77               LSL     R23
   \   00000110   ....               LDI     R30, LOW(UART)
   \   00000112   ....               LDI     R31, (UART) >> 8
   \   00000114   0FE6               ADD     R30, R22
   \   00000116   1FF7               ADC     R31, R23
   \   00000118   0DE0               ADD     R30, R0
   \   0000011A   1DF1               ADC     R31, R1
   \   0000011C   8350               ST      Z, R21
    485              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[0];  // send the sensor type
   \   0000011E   2F64               MOV     R22, R20
   \   00000120   E070               LDI     R23, 0
   \   00000122   2F76               MOV     R23, R22
   \   00000124   E060               LDI     R22, 0
   \   00000126   0F77               LSL     R23
   \   00000128   01FB               MOVW    R31:R30, R23:R22
   \   0000012A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000012C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000012E   8000               LD      R0, Z
   \   00000130   8011               LDD     R1, Z+1
   \   00000132   01C0               MOVW    R25:R24, R1:R0
   \   00000134   9601               ADIW    R25:R24, 1
   \   00000136   2F64               MOV     R22, R20
   \   00000138   E070               LDI     R23, 0
   \   0000013A   2F76               MOV     R23, R22
   \   0000013C   E060               LDI     R22, 0
   \   0000013E   0F77               LSL     R23
   \   00000140   01FB               MOVW    R31:R30, R23:R22
   \   00000142   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000144   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000146   8380               ST      Z, R24
   \   00000148   8391               STD     Z+1, R25
   \   0000014A   9150....           LDS     R21, (TData + 1)
   \   0000014E   2F64               MOV     R22, R20
   \   00000150   E070               LDI     R23, 0
   \   00000152   2F76               MOV     R23, R22
   \   00000154   E060               LDI     R22, 0
   \   00000156   0F77               LSL     R23
   \   00000158   ....               LDI     R30, LOW(UART)
   \   0000015A   ....               LDI     R31, (UART) >> 8
   \   0000015C   0FE6               ADD     R30, R22
   \   0000015E   1FF7               ADC     R31, R23
   \   00000160   0DE0               ADD     R30, R0
   \   00000162   1DF1               ADC     R31, R1
   \   00000164   8350               ST      Z, R21
    486              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[1];  // send the sensor type
   \   00000166   2F64               MOV     R22, R20
   \   00000168   E070               LDI     R23, 0
   \   0000016A   2F76               MOV     R23, R22
   \   0000016C   E060               LDI     R22, 0
   \   0000016E   0F77               LSL     R23
   \   00000170   01FB               MOVW    R31:R30, R23:R22
   \   00000172   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000174   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000176   8000               LD      R0, Z
   \   00000178   8011               LDD     R1, Z+1
   \   0000017A   01C0               MOVW    R25:R24, R1:R0
   \   0000017C   9601               ADIW    R25:R24, 1
   \   0000017E   2F64               MOV     R22, R20
   \   00000180   E070               LDI     R23, 0
   \   00000182   2F76               MOV     R23, R22
   \   00000184   E060               LDI     R22, 0
   \   00000186   0F77               LSL     R23
   \   00000188   01FB               MOVW    R31:R30, R23:R22
   \   0000018A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000018C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000018E   8380               ST      Z, R24
   \   00000190   8391               STD     Z+1, R25
   \   00000192   9150....           LDS     R21, (TData + 2)
   \   00000196   2F64               MOV     R22, R20
   \   00000198   E070               LDI     R23, 0
   \   0000019A   2F76               MOV     R23, R22
   \   0000019C   E060               LDI     R22, 0
   \   0000019E   0F77               LSL     R23
   \   000001A0   ....               LDI     R30, LOW(UART)
   \   000001A2   ....               LDI     R31, (UART) >> 8
   \   000001A4   0FE6               ADD     R30, R22
   \   000001A6   1FF7               ADC     R31, R23
   \   000001A8   0DE0               ADD     R30, R0
   \   000001AA   1DF1               ADC     R31, R1
   \   000001AC   8350               ST      Z, R21
    487          
    488              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   000001AE   2F64               MOV     R22, R20
   \   000001B0   E070               LDI     R23, 0
   \   000001B2   2F76               MOV     R23, R22
   \   000001B4   E060               LDI     R22, 0
   \   000001B6   0F77               LSL     R23
   \   000001B8   01FB               MOVW    R31:R30, R23:R22
   \   000001BA   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001BC   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001BE   8160               LD      R22, Z
   \   000001C0   8171               LDD     R23, Z+1
   \   000001C2   2F50               MOV     R21, R16
   \   000001C4   1B65               SUB     R22, R21
   \   000001C6   5062               SUBI    R22, 2
   \   000001C8   2E04               MOV     R0, R20
   \   000001CA   2411               CLR     R1
   \   000001CC   2C10               MOV     R1, R0
   \   000001CE   2400               CLR     R0
   \   000001D0   0C11               LSL     R1
   \   000001D2   ....               LDI     R30, LOW(UART)
   \   000001D4   ....               LDI     R31, (UART) >> 8
   \   000001D6   0DE0               ADD     R30, R0
   \   000001D8   1DF1               ADC     R31, R1
   \   000001DA   0FE0               ADD     R30, R16
   \   000001DC   1FF1               ADC     R31, R17
   \   000001DE   8360               ST      Z, R22
    489              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   000001E0   2F64               MOV     R22, R20
   \   000001E2   E070               LDI     R23, 0
   \   000001E4   2F76               MOV     R23, R22
   \   000001E6   E060               LDI     R22, 0
   \   000001E8   0F77               LSL     R23
   \   000001EA   01FB               MOVW    R31:R30, R23:R22
   \   000001EC   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001EE   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001F0   8180               LD      R24, Z
   \   000001F2   8191               LDD     R25, Z+1
   \   000001F4   1B80               SUB     R24, R16
   \   000001F6   0B91               SBC     R25, R17
   \   000001F8   9702               SBIW    R25:R24, 2
   \   000001FA   2F89               MOV     R24, R25
   \   000001FC   E090               LDI     R25, 0
   \   000001FE   ....               LDI     R30, LOW((UART + 1))
   \   00000200   ....               LDI     R31, HIGH((UART + 1))
   \   00000202   0FE0               ADD     R30, R16
   \   00000204   1FF1               ADC     R31, R17
   \   00000206   2F64               MOV     R22, R20
   \   00000208   E070               LDI     R23, 0
   \   0000020A   2F76               MOV     R23, R22
   \   0000020C   E060               LDI     R22, 0
   \   0000020E   0F77               LSL     R23
   \   00000210   0FE6               ADD     R30, R22
   \   00000212   1FF7               ADC     R31, R23
   \   00000214   8380               ST      Z, R24
    490          }
   \   00000216   01C1               MOVW    R25:R24, R3:R2
   \   00000218   9508               RET
    491          
    492          /*************************************************************************
    493          *
    494          * Build datablock of measured data for ADcard
    495          *
    496          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    497          void BuildMData485(char ch, short pointer) {
   \                     BuildMData485:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2F60               MOV     R22, R16
    498              short ntna, i;
    499              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000006   2F06               MOV     R16, R22
   \   00000008   E010               LDI     R17, 0
   \   0000000A   2F10               MOV     R17, R16
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   0F11               LSL     R17
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   ....               SUBI    R30, LOW((-(UART + 446) & 0xFFFF))
   \   00000014   ....               SBCI    R31, HIGH((-(UART + 446) & 0xFFFF))
   \   00000016   E001               LDI     R16, 1
   \   00000018   8300               ST      Z, R16
    500          
    501              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA & 0xff;
   \   0000001A   2F06               MOV     R16, R22
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   2F10               MOV     R17, R16
   \   00000020   E000               LDI     R16, 0
   \   00000022   0F11               LSL     R17
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000028   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000002A   8140               LD      R20, Z
   \   0000002C   8151               LDD     R21, Z+1
   \   0000002E   01DA               MOVW    R27:R26, R21:R20
   \   00000030   9611               ADIW    R27:R26, 1
   \   00000032   2F06               MOV     R16, R22
   \   00000034   E010               LDI     R17, 0
   \   00000036   2F10               MOV     R17, R16
   \   00000038   E000               LDI     R16, 0
   \   0000003A   0F11               LSL     R17
   \   0000003C   01F8               MOVW    R31:R30, R17:R16
   \   0000003E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000040   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000042   83A0               ST      Z, R26
   \   00000044   83B1               STD     Z+1, R27
   \   00000046   2F06               MOV     R16, R22
   \   00000048   E010               LDI     R17, 0
   \   0000004A   2F10               MOV     R17, R16
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   0F11               LSL     R17
   \   00000050   ....               LDI     R30, LOW(UART)
   \   00000052   ....               LDI     R31, (UART) >> 8
   \   00000054   0FE0               ADD     R30, R16
   \   00000056   1FF1               ADC     R31, R17
   \   00000058   0FE4               ADD     R30, R20
   \   0000005A   1FF5               ADC     R31, R21
   \   0000005C   E705               LDI     R16, 117
   \   0000005E   8300               ST      Z, R16
    502              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA >> 8;
   \   00000060   2F06               MOV     R16, R22
   \   00000062   E010               LDI     R17, 0
   \   00000064   2F10               MOV     R17, R16
   \   00000066   E000               LDI     R16, 0
   \   00000068   0F11               LSL     R17
   \   0000006A   01F8               MOVW    R31:R30, R17:R16
   \   0000006C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000070   8140               LD      R20, Z
   \   00000072   8151               LDD     R21, Z+1
   \   00000074   01DA               MOVW    R27:R26, R21:R20
   \   00000076   9611               ADIW    R27:R26, 1
   \   00000078   2F06               MOV     R16, R22
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   2F10               MOV     R17, R16
   \   0000007E   E000               LDI     R16, 0
   \   00000080   0F11               LSL     R17
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000086   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000088   83A0               ST      Z, R26
   \   0000008A   83B1               STD     Z+1, R27
   \   0000008C   2F06               MOV     R16, R22
   \   0000008E   E010               LDI     R17, 0
   \   00000090   2F10               MOV     R17, R16
   \   00000092   E000               LDI     R16, 0
   \   00000094   0F11               LSL     R17
   \   00000096   ....               LDI     R30, LOW(UART)
   \   00000098   ....               LDI     R31, (UART) >> 8
   \   0000009A   0FE0               ADD     R30, R16
   \   0000009C   1FF1               ADC     R31, R17
   \   0000009E   0FE4               ADD     R30, R20
   \   000000A0   1FF5               ADC     R31, R21
   \   000000A2   E004               LDI     R16, 4
   \   000000A4   8300               ST      Z, R16
    503              ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000A6   2F06               MOV     R16, R22
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   2F10               MOV     R17, R16
   \   000000AC   E000               LDI     R16, 0
   \   000000AE   0F11               LSL     R17
   \   000000B0   01F8               MOVW    R31:R30, R17:R16
   \   000000B2   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000B6   8100               LD      R16, Z
   \   000000B8   8111               LDD     R17, Z+1
   \   000000BA   0118               MOVW    R3:R2, R17:R16
    504              UART[ch].TxFirst += 2;                                      // two byte length
   \   000000BC   2F06               MOV     R16, R22
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   2F10               MOV     R17, R16
   \   000000C2   E000               LDI     R16, 0
   \   000000C4   0F11               LSL     R17
   \   000000C6   01F8               MOVW    R31:R30, R17:R16
   \   000000C8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000CC   8100               LD      R16, Z
   \   000000CE   8111               LDD     R17, Z+1
   \   000000D0   5F0E               SUBI    R16, 254
   \   000000D2   4F1F               SBCI    R17, 255
   \   000000D4   8300               ST      Z, R16
   \   000000D6   8311               STD     Z+1, R17
    505          
    506              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer];
   \   000000D8   2F06               MOV     R16, R22
   \   000000DA   E010               LDI     R17, 0
   \   000000DC   2F10               MOV     R17, R16
   \   000000DE   E000               LDI     R16, 0
   \   000000E0   0F11               LSL     R17
   \   000000E2   01F8               MOVW    R31:R30, R17:R16
   \   000000E4   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000E6   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000E8   8140               LD      R20, Z
   \   000000EA   8151               LDD     R21, Z+1
   \   000000EC   01DA               MOVW    R27:R26, R21:R20
   \   000000EE   9611               ADIW    R27:R26, 1
   \   000000F0   2F06               MOV     R16, R22
   \   000000F2   E010               LDI     R17, 0
   \   000000F4   2F10               MOV     R17, R16
   \   000000F6   E000               LDI     R16, 0
   \   000000F8   0F11               LSL     R17
   \   000000FA   01F8               MOVW    R31:R30, R17:R16
   \   000000FC   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000FE   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000100   83A0               ST      Z, R26
   \   00000102   83B1               STD     Z+1, R27
   \   00000104   ....               LDI     R30, LOW((UART + 283))
   \   00000106   ....               LDI     R31, HIGH((UART + 283))
   \   00000108   0FE2               ADD     R30, R18
   \   0000010A   1FF3               ADC     R31, R19
   \   0000010C   2F06               MOV     R16, R22
   \   0000010E   E010               LDI     R17, 0
   \   00000110   2F10               MOV     R17, R16
   \   00000112   E000               LDI     R16, 0
   \   00000114   0F11               LSL     R17
   \   00000116   0FE0               ADD     R30, R16
   \   00000118   1FF1               ADC     R31, R17
   \   0000011A   8170               LD      R23, Z
   \   0000011C   2F06               MOV     R16, R22
   \   0000011E   E010               LDI     R17, 0
   \   00000120   2F10               MOV     R17, R16
   \   00000122   E000               LDI     R16, 0
   \   00000124   0F11               LSL     R17
   \   00000126   ....               LDI     R30, LOW(UART)
   \   00000128   ....               LDI     R31, (UART) >> 8
   \   0000012A   0FE0               ADD     R30, R16
   \   0000012C   1FF1               ADC     R31, R17
   \   0000012E   0FE4               ADD     R30, R20
   \   00000130   1FF5               ADC     R31, R21
   \   00000132   8370               ST      Z, R23
    507              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.IOUnitStatus[UART[ch].pRxBuffer[pointer]] | (RestartStatus << 4); // IOUnit status +  restart status
   \   00000134   2F06               MOV     R16, R22
   \   00000136   E010               LDI     R17, 0
   \   00000138   2F10               MOV     R17, R16
   \   0000013A   E000               LDI     R16, 0
   \   0000013C   0F11               LSL     R17
   \   0000013E   01F8               MOVW    R31:R30, R17:R16
   \   00000140   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000142   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000144   8100               LD      R16, Z
   \   00000146   8111               LDD     R17, Z+1
   \   00000148   01D8               MOVW    R27:R26, R17:R16
   \   0000014A   9611               ADIW    R27:R26, 1
   \   0000014C   2F46               MOV     R20, R22
   \   0000014E   E050               LDI     R21, 0
   \   00000150   2F54               MOV     R21, R20
   \   00000152   E040               LDI     R20, 0
   \   00000154   0F55               LSL     R21
   \   00000156   01FA               MOVW    R31:R30, R21:R20
   \   00000158   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000015A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000015C   83A0               ST      Z, R26
   \   0000015E   83B1               STD     Z+1, R27
   \   00000160   ....               LDI     R30, LOW((UART + 283))
   \   00000162   ....               LDI     R31, HIGH((UART + 283))
   \   00000164   0FE2               ADD     R30, R18
   \   00000166   1FF3               ADC     R31, R19
   \   00000168   2F46               MOV     R20, R22
   \   0000016A   E050               LDI     R21, 0
   \   0000016C   2F54               MOV     R21, R20
   \   0000016E   E040               LDI     R20, 0
   \   00000170   0F55               LSL     R21
   \   00000172   0FE4               ADD     R30, R20
   \   00000174   1FF5               ADC     R31, R21
   \   00000176   8140               LD      R20, Z
   \   00000178   E050               LDI     R21, 0
   \   0000017A   01FA               MOVW    R31:R30, R21:R20
   \   0000017C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000017E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000180   8173               LDD     R23, Z+3
   \   00000182   9140....           LDS     R20, RestartStatus
   \   00000186   9542               SWAP    R20
   \   00000188   7F40               ANDI    R20, 0xF0
   \   0000018A   2B74               OR      R23, R20
   \   0000018C   2F46               MOV     R20, R22
   \   0000018E   E050               LDI     R21, 0
   \   00000190   2F54               MOV     R21, R20
   \   00000192   E040               LDI     R20, 0
   \   00000194   0F55               LSL     R21
   \   00000196   ....               LDI     R30, LOW(UART)
   \   00000198   ....               LDI     R31, (UART) >> 8
   \   0000019A   0FE4               ADD     R30, R20
   \   0000019C   1FF5               ADC     R31, R21
   \   0000019E   0FE0               ADD     R30, R16
   \   000001A0   1FF1               ADC     R31, R17
   \   000001A2   8370               ST      Z, R23
    508              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] & 0xff; // Failcnt error
   \   000001A4   2F06               MOV     R16, R22
   \   000001A6   E010               LDI     R17, 0
   \   000001A8   2F10               MOV     R17, R16
   \   000001AA   E000               LDI     R16, 0
   \   000001AC   0F11               LSL     R17
   \   000001AE   01F8               MOVW    R31:R30, R17:R16
   \   000001B0   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001B2   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001B4   8100               LD      R16, Z
   \   000001B6   8111               LDD     R17, Z+1
   \   000001B8   01D8               MOVW    R27:R26, R17:R16
   \   000001BA   9611               ADIW    R27:R26, 1
   \   000001BC   2F46               MOV     R20, R22
   \   000001BE   E050               LDI     R21, 0
   \   000001C0   2F54               MOV     R21, R20
   \   000001C2   E040               LDI     R20, 0
   \   000001C4   0F55               LSL     R21
   \   000001C6   01FA               MOVW    R31:R30, R21:R20
   \   000001C8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001CA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001CC   83A0               ST      Z, R26
   \   000001CE   83B1               STD     Z+1, R27
   \   000001D0   ....               LDI     R30, LOW((UART + 283))
   \   000001D2   ....               LDI     R31, HIGH((UART + 283))
   \   000001D4   0FE2               ADD     R30, R18
   \   000001D6   1FF3               ADC     R31, R19
   \   000001D8   2F46               MOV     R20, R22
   \   000001DA   E050               LDI     R21, 0
   \   000001DC   2F54               MOV     R21, R20
   \   000001DE   E040               LDI     R20, 0
   \   000001E0   0F55               LSL     R21
   \   000001E2   0FE4               ADD     R30, R20
   \   000001E4   1FF5               ADC     R31, R21
   \   000001E6   8140               LD      R20, Z
   \   000001E8   E050               LDI     R21, 0
   \   000001EA   0F44               LSL     R20
   \   000001EC   1F55               ROL     R21
   \   000001EE   0F44               LSL     R20
   \   000001F0   1F55               ROL     R21
   \   000001F2   01FA               MOVW    R31:R30, R21:R20
   \   000001F4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001F6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001F8   8543               LDD     R20, Z+11
   \   000001FA   8554               LDD     R21, Z+12
   \   000001FC   2F74               MOV     R23, R20
   \   000001FE   2F46               MOV     R20, R22
   \   00000200   E050               LDI     R21, 0
   \   00000202   2F54               MOV     R21, R20
   \   00000204   E040               LDI     R20, 0
   \   00000206   0F55               LSL     R21
   \   00000208   ....               LDI     R30, LOW(UART)
   \   0000020A   ....               LDI     R31, (UART) >> 8
   \   0000020C   0FE4               ADD     R30, R20
   \   0000020E   1FF5               ADC     R31, R21
   \   00000210   0FE0               ADD     R30, R16
   \   00000212   1FF1               ADC     R31, R17
   \   00000214   8370               ST      Z, R23
    509              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] >> 8) & 0xff; // Failcnt error
   \   00000216   2F06               MOV     R16, R22
   \   00000218   E010               LDI     R17, 0
   \   0000021A   2F10               MOV     R17, R16
   \   0000021C   E000               LDI     R16, 0
   \   0000021E   0F11               LSL     R17
   \   00000220   01F8               MOVW    R31:R30, R17:R16
   \   00000222   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000224   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000226   8100               LD      R16, Z
   \   00000228   8111               LDD     R17, Z+1
   \   0000022A   01D8               MOVW    R27:R26, R17:R16
   \   0000022C   9611               ADIW    R27:R26, 1
   \   0000022E   2F46               MOV     R20, R22
   \   00000230   E050               LDI     R21, 0
   \   00000232   2F54               MOV     R21, R20
   \   00000234   E040               LDI     R20, 0
   \   00000236   0F55               LSL     R21
   \   00000238   01FA               MOVW    R31:R30, R21:R20
   \   0000023A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000023C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000023E   83A0               ST      Z, R26
   \   00000240   83B1               STD     Z+1, R27
   \   00000242   ....               LDI     R30, LOW((UART + 283))
   \   00000244   ....               LDI     R31, HIGH((UART + 283))
   \   00000246   0FE2               ADD     R30, R18
   \   00000248   1FF3               ADC     R31, R19
   \   0000024A   2F46               MOV     R20, R22
   \   0000024C   E050               LDI     R21, 0
   \   0000024E   2F54               MOV     R21, R20
   \   00000250   E040               LDI     R20, 0
   \   00000252   0F55               LSL     R21
   \   00000254   0FE4               ADD     R30, R20
   \   00000256   1FF5               ADC     R31, R21
   \   00000258   8140               LD      R20, Z
   \   0000025A   E050               LDI     R21, 0
   \   0000025C   0F44               LSL     R20
   \   0000025E   1F55               ROL     R21
   \   00000260   0F44               LSL     R20
   \   00000262   1F55               ROL     R21
   \   00000264   01FA               MOVW    R31:R30, R21:R20
   \   00000266   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000268   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000026A   8543               LDD     R20, Z+11
   \   0000026C   8554               LDD     R21, Z+12
   \   0000026E   2F45               MOV     R20, R21
   \   00000270   E050               LDI     R21, 0
   \   00000272   2F74               MOV     R23, R20
   \   00000274   2F46               MOV     R20, R22
   \   00000276   E050               LDI     R21, 0
   \   00000278   2F54               MOV     R21, R20
   \   0000027A   E040               LDI     R20, 0
   \   0000027C   0F55               LSL     R21
   \   0000027E   ....               LDI     R30, LOW(UART)
   \   00000280   ....               LDI     R31, (UART) >> 8
   \   00000282   0FE4               ADD     R30, R20
   \   00000284   1FF5               ADC     R31, R21
   \   00000286   0FE0               ADD     R30, R16
   \   00000288   1FF1               ADC     R31, R17
   \   0000028A   8370               ST      Z, R23
    510              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] & 0xff; // Failcnt total
   \   0000028C   2F06               MOV     R16, R22
   \   0000028E   E010               LDI     R17, 0
   \   00000290   2F10               MOV     R17, R16
   \   00000292   E000               LDI     R16, 0
   \   00000294   0F11               LSL     R17
   \   00000296   01F8               MOVW    R31:R30, R17:R16
   \   00000298   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000029A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000029C   8100               LD      R16, Z
   \   0000029E   8111               LDD     R17, Z+1
   \   000002A0   01D8               MOVW    R27:R26, R17:R16
   \   000002A2   9611               ADIW    R27:R26, 1
   \   000002A4   2F46               MOV     R20, R22
   \   000002A6   E050               LDI     R21, 0
   \   000002A8   2F54               MOV     R21, R20
   \   000002AA   E040               LDI     R20, 0
   \   000002AC   0F55               LSL     R21
   \   000002AE   01FA               MOVW    R31:R30, R21:R20
   \   000002B0   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000002B2   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000002B4   83A0               ST      Z, R26
   \   000002B6   83B1               STD     Z+1, R27
   \   000002B8   ....               LDI     R30, LOW((UART + 283))
   \   000002BA   ....               LDI     R31, HIGH((UART + 283))
   \   000002BC   0FE2               ADD     R30, R18
   \   000002BE   1FF3               ADC     R31, R19
   \   000002C0   2F46               MOV     R20, R22
   \   000002C2   E050               LDI     R21, 0
   \   000002C4   2F54               MOV     R21, R20
   \   000002C6   E040               LDI     R20, 0
   \   000002C8   0F55               LSL     R21
   \   000002CA   0FE4               ADD     R30, R20
   \   000002CC   1FF5               ADC     R31, R21
   \   000002CE   8140               LD      R20, Z
   \   000002D0   E050               LDI     R21, 0
   \   000002D2   0F44               LSL     R20
   \   000002D4   1F55               ROL     R21
   \   000002D6   0F44               LSL     R20
   \   000002D8   1F55               ROL     R21
   \   000002DA   01FA               MOVW    R31:R30, R21:R20
   \   000002DC   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000002DE   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000002E0   8545               LDD     R20, Z+13
   \   000002E2   8556               LDD     R21, Z+14
   \   000002E4   2F74               MOV     R23, R20
   \   000002E6   2F46               MOV     R20, R22
   \   000002E8   E050               LDI     R21, 0
   \   000002EA   2F54               MOV     R21, R20
   \   000002EC   E040               LDI     R20, 0
   \   000002EE   0F55               LSL     R21
   \   000002F0   ....               LDI     R30, LOW(UART)
   \   000002F2   ....               LDI     R31, (UART) >> 8
   \   000002F4   0FE4               ADD     R30, R20
   \   000002F6   1FF5               ADC     R31, R21
   \   000002F8   0FE0               ADD     R30, R16
   \   000002FA   1FF1               ADC     R31, R17
   \   000002FC   8370               ST      Z, R23
    511              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] >> 8) & 0xff; // Failcnt total
   \   000002FE   2F06               MOV     R16, R22
   \   00000300   E010               LDI     R17, 0
   \   00000302   2F10               MOV     R17, R16
   \   00000304   E000               LDI     R16, 0
   \   00000306   0F11               LSL     R17
   \   00000308   01F8               MOVW    R31:R30, R17:R16
   \   0000030A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000030C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000030E   8100               LD      R16, Z
   \   00000310   8111               LDD     R17, Z+1
   \   00000312   01D8               MOVW    R27:R26, R17:R16
   \   00000314   9611               ADIW    R27:R26, 1
   \   00000316   2F46               MOV     R20, R22
   \   00000318   E050               LDI     R21, 0
   \   0000031A   2F54               MOV     R21, R20
   \   0000031C   E040               LDI     R20, 0
   \   0000031E   0F55               LSL     R21
   \   00000320   01FA               MOVW    R31:R30, R21:R20
   \   00000322   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000324   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000326   83A0               ST      Z, R26
   \   00000328   83B1               STD     Z+1, R27
   \   0000032A   ....               LDI     R30, LOW((UART + 283))
   \   0000032C   ....               LDI     R31, HIGH((UART + 283))
   \   0000032E   0FE2               ADD     R30, R18
   \   00000330   1FF3               ADC     R31, R19
   \   00000332   2F46               MOV     R20, R22
   \   00000334   E050               LDI     R21, 0
   \   00000336   2F54               MOV     R21, R20
   \   00000338   E040               LDI     R20, 0
   \   0000033A   0F55               LSL     R21
   \   0000033C   0FE4               ADD     R30, R20
   \   0000033E   1FF5               ADC     R31, R21
   \   00000340   8140               LD      R20, Z
   \   00000342   E050               LDI     R21, 0
   \   00000344   0F44               LSL     R20
   \   00000346   1F55               ROL     R21
   \   00000348   0F44               LSL     R20
   \   0000034A   1F55               ROL     R21
   \   0000034C   01FA               MOVW    R31:R30, R21:R20
   \   0000034E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000350   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000352   8545               LDD     R20, Z+13
   \   00000354   8556               LDD     R21, Z+14
   \   00000356   2F45               MOV     R20, R21
   \   00000358   E050               LDI     R21, 0
   \   0000035A   2F74               MOV     R23, R20
   \   0000035C   2F46               MOV     R20, R22
   \   0000035E   E050               LDI     R21, 0
   \   00000360   2F54               MOV     R21, R20
   \   00000362   E040               LDI     R20, 0
   \   00000364   0F55               LSL     R21
   \   00000366   ....               LDI     R30, LOW(UART)
   \   00000368   ....               LDI     R31, (UART) >> 8
   \   0000036A   0FE4               ADD     R30, R20
   \   0000036C   1FF5               ADC     R31, R21
   \   0000036E   0FE0               ADD     R30, R16
   \   00000370   1FF1               ADC     R31, R17
   \   00000372   8370               ST      Z, R23
    512              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusSWVer[UART[ch].pRxBuffer[pointer]]; // Target status byte 1
   \   00000374   2F06               MOV     R16, R22
   \   00000376   E010               LDI     R17, 0
   \   00000378   2F10               MOV     R17, R16
   \   0000037A   E000               LDI     R16, 0
   \   0000037C   0F11               LSL     R17
   \   0000037E   01F8               MOVW    R31:R30, R17:R16
   \   00000380   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000382   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000384   8100               LD      R16, Z
   \   00000386   8111               LDD     R17, Z+1
   \   00000388   01D8               MOVW    R27:R26, R17:R16
   \   0000038A   9611               ADIW    R27:R26, 1
   \   0000038C   2F46               MOV     R20, R22
   \   0000038E   E050               LDI     R21, 0
   \   00000390   2F54               MOV     R21, R20
   \   00000392   E040               LDI     R20, 0
   \   00000394   0F55               LSL     R21
   \   00000396   01FA               MOVW    R31:R30, R21:R20
   \   00000398   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000039A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000039C   83A0               ST      Z, R26
   \   0000039E   83B1               STD     Z+1, R27
   \   000003A0   ....               LDI     R30, LOW((UART + 283))
   \   000003A2   ....               LDI     R31, HIGH((UART + 283))
   \   000003A4   0FE2               ADD     R30, R18
   \   000003A6   1FF3               ADC     R31, R19
   \   000003A8   2F46               MOV     R20, R22
   \   000003AA   E050               LDI     R21, 0
   \   000003AC   2F54               MOV     R21, R20
   \   000003AE   E040               LDI     R20, 0
   \   000003B0   0F55               LSL     R21
   \   000003B2   0FE4               ADD     R30, R20
   \   000003B4   1FF5               ADC     R31, R21
   \   000003B6   8140               LD      R20, Z
   \   000003B8   E050               LDI     R21, 0
   \   000003BA   01FA               MOVW    R31:R30, R21:R20
   \   000003BC   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000003BE   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000003C0   A573               LDD     R23, Z+43
   \   000003C2   2F46               MOV     R20, R22
   \   000003C4   E050               LDI     R21, 0
   \   000003C6   2F54               MOV     R21, R20
   \   000003C8   E040               LDI     R20, 0
   \   000003CA   0F55               LSL     R21
   \   000003CC   ....               LDI     R30, LOW(UART)
   \   000003CE   ....               LDI     R31, (UART) >> 8
   \   000003D0   0FE4               ADD     R30, R20
   \   000003D2   1FF5               ADC     R31, R21
   \   000003D4   0FE0               ADD     R30, R16
   \   000003D6   1FF1               ADC     R31, R17
   \   000003D8   8370               ST      Z, R23
    513              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]]; // Target status byte 2
   \   000003DA   2F06               MOV     R16, R22
   \   000003DC   E010               LDI     R17, 0
   \   000003DE   2F10               MOV     R17, R16
   \   000003E0   E000               LDI     R16, 0
   \   000003E2   0F11               LSL     R17
   \   000003E4   01F8               MOVW    R31:R30, R17:R16
   \   000003E6   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000003E8   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000003EA   8100               LD      R16, Z
   \   000003EC   8111               LDD     R17, Z+1
   \   000003EE   01D8               MOVW    R27:R26, R17:R16
   \   000003F0   9611               ADIW    R27:R26, 1
   \   000003F2   2F46               MOV     R20, R22
   \   000003F4   E050               LDI     R21, 0
   \   000003F6   2F54               MOV     R21, R20
   \   000003F8   E040               LDI     R20, 0
   \   000003FA   0F55               LSL     R21
   \   000003FC   01FA               MOVW    R31:R30, R21:R20
   \   000003FE   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000400   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000402   83A0               ST      Z, R26
   \   00000404   83B1               STD     Z+1, R27
   \   00000406   ....               LDI     R30, LOW((UART + 283))
   \   00000408   ....               LDI     R31, HIGH((UART + 283))
   \   0000040A   0FE2               ADD     R30, R18
   \   0000040C   1FF3               ADC     R31, R19
   \   0000040E   2F46               MOV     R20, R22
   \   00000410   E050               LDI     R21, 0
   \   00000412   2F54               MOV     R21, R20
   \   00000414   E040               LDI     R20, 0
   \   00000416   0F55               LSL     R21
   \   00000418   0FE4               ADD     R30, R20
   \   0000041A   1FF5               ADC     R31, R21
   \   0000041C   8140               LD      R20, Z
   \   0000041E   E050               LDI     R21, 0
   \   00000420   01FA               MOVW    R31:R30, R21:R20
   \   00000422   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000424   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000426   A973               LDD     R23, Z+51
   \   00000428   2F46               MOV     R20, R22
   \   0000042A   E050               LDI     R21, 0
   \   0000042C   2F54               MOV     R21, R20
   \   0000042E   E040               LDI     R20, 0
   \   00000430   0F55               LSL     R21
   \   00000432   ....               LDI     R30, LOW(UART)
   \   00000434   ....               LDI     R31, (UART) >> 8
   \   00000436   0FE4               ADD     R30, R20
   \   00000438   1FF5               ADC     R31, R21
   \   0000043A   0FE0               ADD     R30, R16
   \   0000043C   1FF1               ADC     R31, R17
   \   0000043E   8370               ST      Z, R23
    514          
    515              TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]] &= ~0x80;                                  //reset restart flag for adcard
   \   00000440   ....               LDI     R30, LOW((UART + 283))
   \   00000442   ....               LDI     R31, HIGH((UART + 283))
   \   00000444   0FE2               ADD     R30, R18
   \   00000446   1FF3               ADC     R31, R19
   \   00000448   2F06               MOV     R16, R22
   \   0000044A   E010               LDI     R17, 0
   \   0000044C   2F10               MOV     R17, R16
   \   0000044E   E000               LDI     R16, 0
   \   00000450   0F11               LSL     R17
   \   00000452   0FE0               ADD     R30, R16
   \   00000454   1FF1               ADC     R31, R17
   \   00000456   8100               LD      R16, Z
   \   00000458   E010               LDI     R17, 0
   \   0000045A   01F8               MOVW    R31:R30, R17:R16
   \   0000045C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000045E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000460   A903               LDD     R16, Z+51
   \   00000462   770F               ANDI    R16, 0x7F
   \   00000464   AB03               STD     Z+51, R16
    516          
    517              for (i = 0; i < 14; i++) {
   \   00000466   E080               LDI     R24, 0
   \   00000468   E090               LDI     R25, 0
   \                     ??BuildMData485_0:
   \   0000046A   308E               CPI     R24, 14
   \   0000046C   E000               LDI     R16, 0
   \   0000046E   0790               CPC     R25, R16
   \   00000470   F00C               BRLT    $+2+2
   \   00000472   C0C1               RJMP    ??BuildMData485_1
    518                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup1[UART[ch].pRxBuffer[pointer]][i];
   \   00000474   2F06               MOV     R16, R22
   \   00000476   E010               LDI     R17, 0
   \   00000478   2F10               MOV     R17, R16
   \   0000047A   E000               LDI     R16, 0
   \   0000047C   0F11               LSL     R17
   \   0000047E   01F8               MOVW    R31:R30, R17:R16
   \   00000480   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000482   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000484   8040               LD      R4, Z
   \   00000486   8051               LDD     R5, Z+1
   \   00000488   01D2               MOVW    R27:R26, R5:R4
   \   0000048A   9611               ADIW    R27:R26, 1
   \   0000048C   2F06               MOV     R16, R22
   \   0000048E   E010               LDI     R17, 0
   \   00000490   2F10               MOV     R17, R16
   \   00000492   E000               LDI     R16, 0
   \   00000494   0F11               LSL     R17
   \   00000496   01F8               MOVW    R31:R30, R17:R16
   \   00000498   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000049A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000049C   83A0               ST      Z, R26
   \   0000049E   83B1               STD     Z+1, R27
   \   000004A0   ....               LDI     R26, LOW((TData + 59))
   \   000004A2   ....               LDI     R27, HIGH((TData + 59))
   \   000004A4   0FA8               ADD     R26, R24
   \   000004A6   1FB9               ADC     R27, R25
   \   000004A8   ....               LDI     R30, LOW((UART + 283))
   \   000004AA   ....               LDI     R31, HIGH((UART + 283))
   \   000004AC   0FE2               ADD     R30, R18
   \   000004AE   1FF3               ADC     R31, R19
   \   000004B0   2F06               MOV     R16, R22
   \   000004B2   E010               LDI     R17, 0
   \   000004B4   2F10               MOV     R17, R16
   \   000004B6   E000               LDI     R16, 0
   \   000004B8   0F11               LSL     R17
   \   000004BA   0FE0               ADD     R30, R16
   \   000004BC   1FF1               ADC     R31, R17
   \   000004BE   8100               LD      R16, Z
   \   000004C0   E010               LDI     R17, 0
   \   000004C2   E04E               LDI     R20, 14
   \   000004C4   E050               LDI     R21, 0
   \   000004C6   ........           CALL    ?S_EC_MUL_L02
   \   000004CA   0FA0               ADD     R26, R16
   \   000004CC   1FB1               ADC     R27, R17
   \   000004CE   01FD               MOVW    R31:R30, R27:R26
   \   000004D0   8140               LD      R20, Z
   \   000004D2   2F06               MOV     R16, R22
   \   000004D4   E010               LDI     R17, 0
   \   000004D6   2F10               MOV     R17, R16
   \   000004D8   E000               LDI     R16, 0
   \   000004DA   0F11               LSL     R17
   \   000004DC   ....               LDI     R30, LOW(UART)
   \   000004DE   ....               LDI     R31, (UART) >> 8
   \   000004E0   0FE0               ADD     R30, R16
   \   000004E2   1FF1               ADC     R31, R17
   \   000004E4   0DE4               ADD     R30, R4
   \   000004E6   1DF5               ADC     R31, R5
   \   000004E8   8340               ST      Z, R20
    519                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup2[UART[ch].pRxBuffer[pointer]][i];
   \   000004EA   2F06               MOV     R16, R22
   \   000004EC   E010               LDI     R17, 0
   \   000004EE   2F10               MOV     R17, R16
   \   000004F0   E000               LDI     R16, 0
   \   000004F2   0F11               LSL     R17
   \   000004F4   01F8               MOVW    R31:R30, R17:R16
   \   000004F6   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000004F8   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000004FA   8040               LD      R4, Z
   \   000004FC   8051               LDD     R5, Z+1
   \   000004FE   01D2               MOVW    R27:R26, R5:R4
   \   00000500   9611               ADIW    R27:R26, 1
   \   00000502   2F06               MOV     R16, R22
   \   00000504   E010               LDI     R17, 0
   \   00000506   2F10               MOV     R17, R16
   \   00000508   E000               LDI     R16, 0
   \   0000050A   0F11               LSL     R17
   \   0000050C   01F8               MOVW    R31:R30, R17:R16
   \   0000050E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000510   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000512   83A0               ST      Z, R26
   \   00000514   83B1               STD     Z+1, R27
   \   00000516   ....               LDI     R26, LOW((TData + 171))
   \   00000518   ....               LDI     R27, HIGH((TData + 171))
   \   0000051A   0FA8               ADD     R26, R24
   \   0000051C   1FB9               ADC     R27, R25
   \   0000051E   ....               LDI     R30, LOW((UART + 283))
   \   00000520   ....               LDI     R31, HIGH((UART + 283))
   \   00000522   0FE2               ADD     R30, R18
   \   00000524   1FF3               ADC     R31, R19
   \   00000526   2F06               MOV     R16, R22
   \   00000528   E010               LDI     R17, 0
   \   0000052A   2F10               MOV     R17, R16
   \   0000052C   E000               LDI     R16, 0
   \   0000052E   0F11               LSL     R17
   \   00000530   0FE0               ADD     R30, R16
   \   00000532   1FF1               ADC     R31, R17
   \   00000534   8100               LD      R16, Z
   \   00000536   E010               LDI     R17, 0
   \   00000538   E04E               LDI     R20, 14
   \   0000053A   E050               LDI     R21, 0
   \   0000053C   ........           CALL    ?S_EC_MUL_L02
   \   00000540   0FA0               ADD     R26, R16
   \   00000542   1FB1               ADC     R27, R17
   \   00000544   01FD               MOVW    R31:R30, R27:R26
   \   00000546   8140               LD      R20, Z
   \   00000548   2F06               MOV     R16, R22
   \   0000054A   E010               LDI     R17, 0
   \   0000054C   2F10               MOV     R17, R16
   \   0000054E   E000               LDI     R16, 0
   \   00000550   0F11               LSL     R17
   \   00000552   ....               LDI     R30, LOW(UART)
   \   00000554   ....               LDI     R31, (UART) >> 8
   \   00000556   0FE0               ADD     R30, R16
   \   00000558   1FF1               ADC     R31, R17
   \   0000055A   0DE4               ADD     R30, R4
   \   0000055C   1DF5               ADC     R31, R5
   \   0000055E   8340               ST      Z, R20
    520                  *((float *)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float *)&TData.RS4.Result[UART[ch].pRxBuffer[pointer]][i]);   // ADresult
   \   00000560   ....               LDI     R26, LOW((TData + 731))
   \   00000562   ....               LDI     R27, HIGH((TData + 731))
   \   00000564   018C               MOVW    R17:R16, R25:R24
   \   00000566   0F00               LSL     R16
   \   00000568   1F11               ROL     R17
   \   0000056A   0F00               LSL     R16
   \   0000056C   1F11               ROL     R17
   \   0000056E   0FA0               ADD     R26, R16
   \   00000570   1FB1               ADC     R27, R17
   \   00000572   ....               LDI     R30, LOW((UART + 283))
   \   00000574   ....               LDI     R31, HIGH((UART + 283))
   \   00000576   0FE2               ADD     R30, R18
   \   00000578   1FF3               ADC     R31, R19
   \   0000057A   2F06               MOV     R16, R22
   \   0000057C   E010               LDI     R17, 0
   \   0000057E   2F10               MOV     R17, R16
   \   00000580   E000               LDI     R16, 0
   \   00000582   0F11               LSL     R17
   \   00000584   0FE0               ADD     R30, R16
   \   00000586   1FF1               ADC     R31, R17
   \   00000588   8100               LD      R16, Z
   \   0000058A   E010               LDI     R17, 0
   \   0000058C   E348               LDI     R20, 56
   \   0000058E   E050               LDI     R21, 0
   \   00000590   ........           CALL    ?S_EC_MUL_L02
   \   00000594   0FA0               ADD     R26, R16
   \   00000596   1FB1               ADC     R27, R17
   \   00000598   01FD               MOVW    R31:R30, R27:R26
   \   0000059A   8040               LD      R4, Z
   \   0000059C   8051               LDD     R5, Z+1
   \   0000059E   8062               LDD     R6, Z+2
   \   000005A0   8073               LDD     R7, Z+3
   \   000005A2   2F46               MOV     R20, R22
   \   000005A4   E050               LDI     R21, 0
   \   000005A6   2F54               MOV     R21, R20
   \   000005A8   E040               LDI     R20, 0
   \   000005AA   0F55               LSL     R21
   \   000005AC   ....               LDI     R16, LOW(UART)
   \   000005AE   ....               LDI     R17, (UART) >> 8
   \   000005B0   0F04               ADD     R16, R20
   \   000005B2   1F15               ADC     R17, R21
   \   000005B4   2F46               MOV     R20, R22
   \   000005B6   E050               LDI     R21, 0
   \   000005B8   2F54               MOV     R21, R20
   \   000005BA   E040               LDI     R20, 0
   \   000005BC   0F55               LSL     R21
   \   000005BE   01FA               MOVW    R31:R30, R21:R20
   \   000005C0   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000005C2   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000005C4   8140               LD      R20, Z
   \   000005C6   8151               LDD     R21, Z+1
   \   000005C8   0F04               ADD     R16, R20
   \   000005CA   1F15               ADC     R17, R21
   \   000005CC   01F8               MOVW    R31:R30, R17:R16
   \   000005CE   8240               ST      Z, R4
   \   000005D0   8251               STD     Z+1, R5
   \   000005D2   8262               STD     Z+2, R6
   \   000005D4   8273               STD     Z+3, R7
    521                  UART[ch].TxFirst += sizeof(float);
   \   000005D6   2F06               MOV     R16, R22
   \   000005D8   E010               LDI     R17, 0
   \   000005DA   2F10               MOV     R17, R16
   \   000005DC   E000               LDI     R16, 0
   \   000005DE   0F11               LSL     R17
   \   000005E0   01F8               MOVW    R31:R30, R17:R16
   \   000005E2   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000005E4   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000005E6   8100               LD      R16, Z
   \   000005E8   8111               LDD     R17, Z+1
   \   000005EA   5F0C               SUBI    R16, 252
   \   000005EC   4F1F               SBCI    R17, 255
   \   000005EE   8300               ST      Z, R16
   \   000005F0   8311               STD     Z+1, R17
    522              }
   \   000005F2   9601               ADIW    R25:R24, 1
   \   000005F4   CF3A               RJMP    ??BuildMData485_0
    523          
    524              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??BuildMData485_1:
   \   000005F6   2F06               MOV     R16, R22
   \   000005F8   E010               LDI     R17, 0
   \   000005FA   2F10               MOV     R17, R16
   \   000005FC   E000               LDI     R16, 0
   \   000005FE   0F11               LSL     R17
   \   00000600   01F8               MOVW    R31:R30, R17:R16
   \   00000602   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000604   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000606   8100               LD      R16, Z
   \   00000608   8111               LDD     R17, Z+1
   \   0000060A   2D12               MOV     R17, R2
   \   0000060C   1B01               SUB     R16, R17
   \   0000060E   5002               SUBI    R16, 2
   \   00000610   2F46               MOV     R20, R22
   \   00000612   E050               LDI     R21, 0
   \   00000614   2F54               MOV     R21, R20
   \   00000616   E040               LDI     R20, 0
   \   00000618   0F55               LSL     R21
   \   0000061A   ....               LDI     R30, LOW(UART)
   \   0000061C   ....               LDI     R31, (UART) >> 8
   \   0000061E   0FE4               ADD     R30, R20
   \   00000620   1FF5               ADC     R31, R21
   \   00000622   0DE2               ADD     R30, R2
   \   00000624   1DF3               ADC     R31, R3
   \   00000626   8300               ST      Z, R16
    525              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   00000628   2F06               MOV     R16, R22
   \   0000062A   E010               LDI     R17, 0
   \   0000062C   2F10               MOV     R17, R16
   \   0000062E   E000               LDI     R16, 0
   \   00000630   0F11               LSL     R17
   \   00000632   01F8               MOVW    R31:R30, R17:R16
   \   00000634   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000636   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000638   81A0               LD      R26, Z
   \   0000063A   81B1               LDD     R27, Z+1
   \   0000063C   19A2               SUB     R26, R2
   \   0000063E   09B3               SBC     R27, R3
   \   00000640   9712               SBIW    R27:R26, 2
   \   00000642   2FAB               MOV     R26, R27
   \   00000644   E0B0               LDI     R27, 0
   \   00000646   ....               LDI     R30, LOW((UART + 1))
   \   00000648   ....               LDI     R31, HIGH((UART + 1))
   \   0000064A   0DE2               ADD     R30, R2
   \   0000064C   1DF3               ADC     R31, R3
   \   0000064E   2F06               MOV     R16, R22
   \   00000650   E010               LDI     R17, 0
   \   00000652   2F10               MOV     R17, R16
   \   00000654   E000               LDI     R16, 0
   \   00000656   0F11               LSL     R17
   \   00000658   0FE0               ADD     R30, R16
   \   0000065A   1FF1               ADC     R31, R17
   \   0000065C   83A0               ST      Z, R26
    526          
    527          }
   \   0000065E   E0E8               LDI     R30, 8
   \   00000660   ........           JMP     ?EPILOGUE_B8_L09
    528          
    529          /*************************************************************************
    530          *
    531          * Build datablock of raw and cal data for ADcard
    532          *
    533          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    534          void BuildRData485(char ch, short pointer) {
   \                     BuildRData485:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F60               MOV     R22, R16
    535              short ntna, i;
    536              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000006   2F06               MOV     R16, R22
   \   00000008   E010               LDI     R17, 0
   \   0000000A   2F10               MOV     R17, R16
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   0F11               LSL     R17
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   ....               SUBI    R30, LOW((-(UART + 446) & 0xFFFF))
   \   00000014   ....               SBCI    R31, HIGH((-(UART + 446) & 0xFFFF))
   \   00000016   E001               LDI     R16, 1
   \   00000018   8300               ST      Z, R16
    537          
    538              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA & 0xff;
   \   0000001A   2F06               MOV     R16, R22
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   2F10               MOV     R17, R16
   \   00000020   E000               LDI     R16, 0
   \   00000022   0F11               LSL     R17
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000028   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000002A   8140               LD      R20, Z
   \   0000002C   8151               LDD     R21, Z+1
   \   0000002E   01DA               MOVW    R27:R26, R21:R20
   \   00000030   9611               ADIW    R27:R26, 1
   \   00000032   2F06               MOV     R16, R22
   \   00000034   E010               LDI     R17, 0
   \   00000036   2F10               MOV     R17, R16
   \   00000038   E000               LDI     R16, 0
   \   0000003A   0F11               LSL     R17
   \   0000003C   01F8               MOVW    R31:R30, R17:R16
   \   0000003E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000040   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000042   83A0               ST      Z, R26
   \   00000044   83B1               STD     Z+1, R27
   \   00000046   2F06               MOV     R16, R22
   \   00000048   E010               LDI     R17, 0
   \   0000004A   2F10               MOV     R17, R16
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   0F11               LSL     R17
   \   00000050   ....               LDI     R30, LOW(UART)
   \   00000052   ....               LDI     R31, (UART) >> 8
   \   00000054   0FE0               ADD     R30, R16
   \   00000056   1FF1               ADC     R31, R17
   \   00000058   0FE4               ADD     R30, R20
   \   0000005A   1FF5               ADC     R31, R21
   \   0000005C   E706               LDI     R16, 118
   \   0000005E   8300               ST      Z, R16
    539              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA >> 8;
   \   00000060   2F06               MOV     R16, R22
   \   00000062   E010               LDI     R17, 0
   \   00000064   2F10               MOV     R17, R16
   \   00000066   E000               LDI     R16, 0
   \   00000068   0F11               LSL     R17
   \   0000006A   01F8               MOVW    R31:R30, R17:R16
   \   0000006C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000070   8140               LD      R20, Z
   \   00000072   8151               LDD     R21, Z+1
   \   00000074   01DA               MOVW    R27:R26, R21:R20
   \   00000076   9611               ADIW    R27:R26, 1
   \   00000078   2F06               MOV     R16, R22
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   2F10               MOV     R17, R16
   \   0000007E   E000               LDI     R16, 0
   \   00000080   0F11               LSL     R17
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000086   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000088   83A0               ST      Z, R26
   \   0000008A   83B1               STD     Z+1, R27
   \   0000008C   2F06               MOV     R16, R22
   \   0000008E   E010               LDI     R17, 0
   \   00000090   2F10               MOV     R17, R16
   \   00000092   E000               LDI     R16, 0
   \   00000094   0F11               LSL     R17
   \   00000096   ....               LDI     R30, LOW(UART)
   \   00000098   ....               LDI     R31, (UART) >> 8
   \   0000009A   0FE0               ADD     R30, R16
   \   0000009C   1FF1               ADC     R31, R17
   \   0000009E   0FE4               ADD     R30, R20
   \   000000A0   1FF5               ADC     R31, R21
   \   000000A2   E004               LDI     R16, 4
   \   000000A4   8300               ST      Z, R16
    540              ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000A6   2F06               MOV     R16, R22
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   2F10               MOV     R17, R16
   \   000000AC   E000               LDI     R16, 0
   \   000000AE   0F11               LSL     R17
   \   000000B0   01F8               MOVW    R31:R30, R17:R16
   \   000000B2   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000B6   8100               LD      R16, Z
   \   000000B8   8111               LDD     R17, Z+1
   \   000000BA   0118               MOVW    R3:R2, R17:R16
    541              UART[ch].TxFirst += 2;                                      // two byte length
   \   000000BC   2F06               MOV     R16, R22
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   2F10               MOV     R17, R16
   \   000000C2   E000               LDI     R16, 0
   \   000000C4   0F11               LSL     R17
   \   000000C6   01F8               MOVW    R31:R30, R17:R16
   \   000000C8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000CC   8100               LD      R16, Z
   \   000000CE   8111               LDD     R17, Z+1
   \   000000D0   5F0E               SUBI    R16, 254
   \   000000D2   4F1F               SBCI    R17, 255
   \   000000D4   8300               ST      Z, R16
   \   000000D6   8311               STD     Z+1, R17
    542          
    543              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer];
   \   000000D8   2F06               MOV     R16, R22
   \   000000DA   E010               LDI     R17, 0
   \   000000DC   2F10               MOV     R17, R16
   \   000000DE   E000               LDI     R16, 0
   \   000000E0   0F11               LSL     R17
   \   000000E2   01F8               MOVW    R31:R30, R17:R16
   \   000000E4   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000E6   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000E8   8140               LD      R20, Z
   \   000000EA   8151               LDD     R21, Z+1
   \   000000EC   01DA               MOVW    R27:R26, R21:R20
   \   000000EE   9611               ADIW    R27:R26, 1
   \   000000F0   2F06               MOV     R16, R22
   \   000000F2   E010               LDI     R17, 0
   \   000000F4   2F10               MOV     R17, R16
   \   000000F6   E000               LDI     R16, 0
   \   000000F8   0F11               LSL     R17
   \   000000FA   01F8               MOVW    R31:R30, R17:R16
   \   000000FC   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000FE   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000100   83A0               ST      Z, R26
   \   00000102   83B1               STD     Z+1, R27
   \   00000104   ....               LDI     R30, LOW((UART + 283))
   \   00000106   ....               LDI     R31, HIGH((UART + 283))
   \   00000108   0FE2               ADD     R30, R18
   \   0000010A   1FF3               ADC     R31, R19
   \   0000010C   2F06               MOV     R16, R22
   \   0000010E   E010               LDI     R17, 0
   \   00000110   2F10               MOV     R17, R16
   \   00000112   E000               LDI     R16, 0
   \   00000114   0F11               LSL     R17
   \   00000116   0FE0               ADD     R30, R16
   \   00000118   1FF1               ADC     R31, R17
   \   0000011A   8170               LD      R23, Z
   \   0000011C   2F06               MOV     R16, R22
   \   0000011E   E010               LDI     R17, 0
   \   00000120   2F10               MOV     R17, R16
   \   00000122   E000               LDI     R16, 0
   \   00000124   0F11               LSL     R17
   \   00000126   ....               LDI     R30, LOW(UART)
   \   00000128   ....               LDI     R31, (UART) >> 8
   \   0000012A   0FE0               ADD     R30, R16
   \   0000012C   1FF1               ADC     R31, R17
   \   0000012E   0FE4               ADD     R30, R20
   \   00000130   1FF5               ADC     R31, R21
   \   00000132   8370               ST      Z, R23
    544              for (i = 0; i < 14; i++) {
   \   00000134   E080               LDI     R24, 0
   \   00000136   E090               LDI     R25, 0
   \                     ??BuildRData485_0:
   \   00000138   308E               CPI     R24, 14
   \   0000013A   E000               LDI     R16, 0
   \   0000013C   0790               CPC     R25, R16
   \   0000013E   F00C               BRLT    $+2+2
   \   00000140   C088               RJMP    ??BuildRData485_1
    545                  *((short *)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short *)&TData.RS4.Raw[UART[ch].pRxBuffer[pointer]][i]);   // Raw data
   \   00000142   ....               LDI     R26, LOW((TData + 283))
   \   00000144   ....               LDI     R27, HIGH((TData + 283))
   \   00000146   018C               MOVW    R17:R16, R25:R24
   \   00000148   0F00               LSL     R16
   \   0000014A   1F11               ROL     R17
   \   0000014C   0FA0               ADD     R26, R16
   \   0000014E   1FB1               ADC     R27, R17
   \   00000150   ....               LDI     R30, LOW((UART + 283))
   \   00000152   ....               LDI     R31, HIGH((UART + 283))
   \   00000154   0FE2               ADD     R30, R18
   \   00000156   1FF3               ADC     R31, R19
   \   00000158   2F06               MOV     R16, R22
   \   0000015A   E010               LDI     R17, 0
   \   0000015C   2F10               MOV     R17, R16
   \   0000015E   E000               LDI     R16, 0
   \   00000160   0F11               LSL     R17
   \   00000162   0FE0               ADD     R30, R16
   \   00000164   1FF1               ADC     R31, R17
   \   00000166   8100               LD      R16, Z
   \   00000168   E010               LDI     R17, 0
   \   0000016A   E14C               LDI     R20, 28
   \   0000016C   E050               LDI     R21, 0
   \   0000016E   ........           CALL    ?S_EC_MUL_L02
   \   00000172   0FA0               ADD     R26, R16
   \   00000174   1FB1               ADC     R27, R17
   \   00000176   01FD               MOVW    R31:R30, R27:R26
   \   00000178   8000               LD      R0, Z
   \   0000017A   8011               LDD     R1, Z+1
   \   0000017C   2F46               MOV     R20, R22
   \   0000017E   E050               LDI     R21, 0
   \   00000180   2F54               MOV     R21, R20
   \   00000182   E040               LDI     R20, 0
   \   00000184   0F55               LSL     R21
   \   00000186   ....               LDI     R16, LOW(UART)
   \   00000188   ....               LDI     R17, (UART) >> 8
   \   0000018A   0F04               ADD     R16, R20
   \   0000018C   1F15               ADC     R17, R21
   \   0000018E   2F46               MOV     R20, R22
   \   00000190   E050               LDI     R21, 0
   \   00000192   2F54               MOV     R21, R20
   \   00000194   E040               LDI     R20, 0
   \   00000196   0F55               LSL     R21
   \   00000198   01FA               MOVW    R31:R30, R21:R20
   \   0000019A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000019C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000019E   8140               LD      R20, Z
   \   000001A0   8151               LDD     R21, Z+1
   \   000001A2   0F04               ADD     R16, R20
   \   000001A4   1F15               ADC     R17, R21
   \   000001A6   01F8               MOVW    R31:R30, R17:R16
   \   000001A8   8200               ST      Z, R0
   \   000001AA   8211               STD     Z+1, R1
    546                  UART[ch].TxFirst += sizeof(short);
   \   000001AC   2F06               MOV     R16, R22
   \   000001AE   E010               LDI     R17, 0
   \   000001B0   2F10               MOV     R17, R16
   \   000001B2   E000               LDI     R16, 0
   \   000001B4   0F11               LSL     R17
   \   000001B6   01F8               MOVW    R31:R30, R17:R16
   \   000001B8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001BA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001BC   8100               LD      R16, Z
   \   000001BE   8111               LDD     R17, Z+1
   \   000001C0   5F0E               SUBI    R16, 254
   \   000001C2   4F1F               SBCI    R17, 255
   \   000001C4   8300               ST      Z, R16
   \   000001C6   8311               STD     Z+1, R17
    547                  *((short *)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short *)&TData.RS4.Cal[UART[ch].pRxBuffer[pointer]][i]);   // Cal data
   \   000001C8   ....               LDI     R26, LOW((TData + 507))
   \   000001CA   ....               LDI     R27, HIGH((TData + 507))
   \   000001CC   018C               MOVW    R17:R16, R25:R24
   \   000001CE   0F00               LSL     R16
   \   000001D0   1F11               ROL     R17
   \   000001D2   0FA0               ADD     R26, R16
   \   000001D4   1FB1               ADC     R27, R17
   \   000001D6   ....               LDI     R30, LOW((UART + 283))
   \   000001D8   ....               LDI     R31, HIGH((UART + 283))
   \   000001DA   0FE2               ADD     R30, R18
   \   000001DC   1FF3               ADC     R31, R19
   \   000001DE   2F06               MOV     R16, R22
   \   000001E0   E010               LDI     R17, 0
   \   000001E2   2F10               MOV     R17, R16
   \   000001E4   E000               LDI     R16, 0
   \   000001E6   0F11               LSL     R17
   \   000001E8   0FE0               ADD     R30, R16
   \   000001EA   1FF1               ADC     R31, R17
   \   000001EC   8100               LD      R16, Z
   \   000001EE   E010               LDI     R17, 0
   \   000001F0   E14C               LDI     R20, 28
   \   000001F2   E050               LDI     R21, 0
   \   000001F4   ........           CALL    ?S_EC_MUL_L02
   \   000001F8   0FA0               ADD     R26, R16
   \   000001FA   1FB1               ADC     R27, R17
   \   000001FC   01FD               MOVW    R31:R30, R27:R26
   \   000001FE   8000               LD      R0, Z
   \   00000200   8011               LDD     R1, Z+1
   \   00000202   2F46               MOV     R20, R22
   \   00000204   E050               LDI     R21, 0
   \   00000206   2F54               MOV     R21, R20
   \   00000208   E040               LDI     R20, 0
   \   0000020A   0F55               LSL     R21
   \   0000020C   ....               LDI     R16, LOW(UART)
   \   0000020E   ....               LDI     R17, (UART) >> 8
   \   00000210   0F04               ADD     R16, R20
   \   00000212   1F15               ADC     R17, R21
   \   00000214   2F46               MOV     R20, R22
   \   00000216   E050               LDI     R21, 0
   \   00000218   2F54               MOV     R21, R20
   \   0000021A   E040               LDI     R20, 0
   \   0000021C   0F55               LSL     R21
   \   0000021E   01FA               MOVW    R31:R30, R21:R20
   \   00000220   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000222   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000224   8140               LD      R20, Z
   \   00000226   8151               LDD     R21, Z+1
   \   00000228   0F04               ADD     R16, R20
   \   0000022A   1F15               ADC     R17, R21
   \   0000022C   01F8               MOVW    R31:R30, R17:R16
   \   0000022E   8200               ST      Z, R0
   \   00000230   8211               STD     Z+1, R1
    548                  UART[ch].TxFirst += sizeof(short);
   \   00000232   2F06               MOV     R16, R22
   \   00000234   E010               LDI     R17, 0
   \   00000236   2F10               MOV     R17, R16
   \   00000238   E000               LDI     R16, 0
   \   0000023A   0F11               LSL     R17
   \   0000023C   01F8               MOVW    R31:R30, R17:R16
   \   0000023E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000240   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000242   8100               LD      R16, Z
   \   00000244   8111               LDD     R17, Z+1
   \   00000246   5F0E               SUBI    R16, 254
   \   00000248   4F1F               SBCI    R17, 255
   \   0000024A   8300               ST      Z, R16
   \   0000024C   8311               STD     Z+1, R17
    549              }
   \   0000024E   9601               ADIW    R25:R24, 1
   \   00000250   CF73               RJMP    ??BuildRData485_0
    550          
    551              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??BuildRData485_1:
   \   00000252   2F06               MOV     R16, R22
   \   00000254   E010               LDI     R17, 0
   \   00000256   2F10               MOV     R17, R16
   \   00000258   E000               LDI     R16, 0
   \   0000025A   0F11               LSL     R17
   \   0000025C   01F8               MOVW    R31:R30, R17:R16
   \   0000025E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000260   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000262   8100               LD      R16, Z
   \   00000264   8111               LDD     R17, Z+1
   \   00000266   2D12               MOV     R17, R2
   \   00000268   1B01               SUB     R16, R17
   \   0000026A   5002               SUBI    R16, 2
   \   0000026C   2F46               MOV     R20, R22
   \   0000026E   E050               LDI     R21, 0
   \   00000270   2F54               MOV     R21, R20
   \   00000272   E040               LDI     R20, 0
   \   00000274   0F55               LSL     R21
   \   00000276   ....               LDI     R30, LOW(UART)
   \   00000278   ....               LDI     R31, (UART) >> 8
   \   0000027A   0FE4               ADD     R30, R20
   \   0000027C   1FF5               ADC     R31, R21
   \   0000027E   0DE2               ADD     R30, R2
   \   00000280   1DF3               ADC     R31, R3
   \   00000282   8300               ST      Z, R16
    552              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   00000284   2F06               MOV     R16, R22
   \   00000286   E010               LDI     R17, 0
   \   00000288   2F10               MOV     R17, R16
   \   0000028A   E000               LDI     R16, 0
   \   0000028C   0F11               LSL     R17
   \   0000028E   01F8               MOVW    R31:R30, R17:R16
   \   00000290   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000292   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000294   81A0               LD      R26, Z
   \   00000296   81B1               LDD     R27, Z+1
   \   00000298   19A2               SUB     R26, R2
   \   0000029A   09B3               SBC     R27, R3
   \   0000029C   9712               SBIW    R27:R26, 2
   \   0000029E   2FAB               MOV     R26, R27
   \   000002A0   E0B0               LDI     R27, 0
   \   000002A2   ....               LDI     R30, LOW((UART + 1))
   \   000002A4   ....               LDI     R31, HIGH((UART + 1))
   \   000002A6   0DE2               ADD     R30, R2
   \   000002A8   1DF3               ADC     R31, R3
   \   000002AA   2F06               MOV     R16, R22
   \   000002AC   E010               LDI     R17, 0
   \   000002AE   2F10               MOV     R17, R16
   \   000002B0   E000               LDI     R16, 0
   \   000002B2   0F11               LSL     R17
   \   000002B4   0FE0               ADD     R30, R16
   \   000002B6   1FF1               ADC     R31, R17
   \   000002B8   83A0               ST      Z, R26
    553          
    554          }
   \   000002BA   E0E4               LDI     R30, 4
   \   000002BC   ........           JMP     ?EPILOGUE_B4_L09
    555          
    556          /*************************************************************************
    557          *
    558          * Build setup data package for AN-ZBANA
    559          *
    560          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    561          void BuildANASetup(char ch, short pointer) {
   \                     BuildANASetup:
   \   00000000   011C               MOVW    R3:R2, R25:R24
   \   00000002   2F40               MOV     R20, R16
    562          
    563              short ntna;
    564              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000004   2F64               MOV     R22, R20
   \   00000006   E070               LDI     R23, 0
   \   00000008   2F76               MOV     R23, R22
   \   0000000A   E060               LDI     R22, 0
   \   0000000C   0F77               LSL     R23
   \   0000000E   01FB               MOVW    R31:R30, R23:R22
   \   00000010   ....               SUBI    R30, LOW((-(UART + 446) & 0xFFFF))
   \   00000012   ....               SBCI    R31, HIGH((-(UART + 446) & 0xFFFF))
   \   00000014   E051               LDI     R21, 1
   \   00000016   8350               ST      Z, R21
    565          
    566              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP & 0xff;
   \   00000018   2F64               MOV     R22, R20
   \   0000001A   E070               LDI     R23, 0
   \   0000001C   2F76               MOV     R23, R22
   \   0000001E   E060               LDI     R22, 0
   \   00000020   0F77               LSL     R23
   \   00000022   01FB               MOVW    R31:R30, R23:R22
   \   00000024   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000026   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000028   8000               LD      R0, Z
   \   0000002A   8011               LDD     R1, Z+1
   \   0000002C   01C0               MOVW    R25:R24, R1:R0
   \   0000002E   9601               ADIW    R25:R24, 1
   \   00000030   2F64               MOV     R22, R20
   \   00000032   E070               LDI     R23, 0
   \   00000034   2F76               MOV     R23, R22
   \   00000036   E060               LDI     R22, 0
   \   00000038   0F77               LSL     R23
   \   0000003A   01FB               MOVW    R31:R30, R23:R22
   \   0000003C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000003E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000040   8380               ST      Z, R24
   \   00000042   8391               STD     Z+1, R25
   \   00000044   2F64               MOV     R22, R20
   \   00000046   E070               LDI     R23, 0
   \   00000048   2F76               MOV     R23, R22
   \   0000004A   E060               LDI     R22, 0
   \   0000004C   0F77               LSL     R23
   \   0000004E   ....               LDI     R30, LOW(UART)
   \   00000050   ....               LDI     R31, (UART) >> 8
   \   00000052   0FE6               ADD     R30, R22
   \   00000054   1FF7               ADC     R31, R23
   \   00000056   0DE0               ADD     R30, R0
   \   00000058   1DF1               ADC     R31, R1
   \   0000005A   EB5B               LDI     R21, 187
   \   0000005C   8350               ST      Z, R21
    567              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP >> 8;
   \   0000005E   2F64               MOV     R22, R20
   \   00000060   E070               LDI     R23, 0
   \   00000062   2F76               MOV     R23, R22
   \   00000064   E060               LDI     R22, 0
   \   00000066   0F77               LSL     R23
   \   00000068   01FB               MOVW    R31:R30, R23:R22
   \   0000006A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000006E   8000               LD      R0, Z
   \   00000070   8011               LDD     R1, Z+1
   \   00000072   01C0               MOVW    R25:R24, R1:R0
   \   00000074   9601               ADIW    R25:R24, 1
   \   00000076   2F64               MOV     R22, R20
   \   00000078   E070               LDI     R23, 0
   \   0000007A   2F76               MOV     R23, R22
   \   0000007C   E060               LDI     R22, 0
   \   0000007E   0F77               LSL     R23
   \   00000080   01FB               MOVW    R31:R30, R23:R22
   \   00000082   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000084   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000086   8380               ST      Z, R24
   \   00000088   8391               STD     Z+1, R25
   \   0000008A   2F64               MOV     R22, R20
   \   0000008C   E070               LDI     R23, 0
   \   0000008E   2F76               MOV     R23, R22
   \   00000090   E060               LDI     R22, 0
   \   00000092   0F77               LSL     R23
   \   00000094   ....               LDI     R30, LOW(UART)
   \   00000096   ....               LDI     R31, (UART) >> 8
   \   00000098   0FE6               ADD     R30, R22
   \   0000009A   1FF7               ADC     R31, R23
   \   0000009C   0DE0               ADD     R30, R0
   \   0000009E   1DF1               ADC     R31, R1
   \   000000A0   E054               LDI     R21, 4
   \   000000A2   8350               ST      Z, R21
    568              ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000A4   2F64               MOV     R22, R20
   \   000000A6   E070               LDI     R23, 0
   \   000000A8   2F76               MOV     R23, R22
   \   000000AA   E060               LDI     R22, 0
   \   000000AC   0F77               LSL     R23
   \   000000AE   01FB               MOVW    R31:R30, R23:R22
   \   000000B0   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000B2   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000B4   8160               LD      R22, Z
   \   000000B6   8171               LDD     R23, Z+1
   \   000000B8   018B               MOVW    R17:R16, R23:R22
    569              UART[ch].TxFirst += 2;                                      // two byte length
   \   000000BA   2F64               MOV     R22, R20
   \   000000BC   E070               LDI     R23, 0
   \   000000BE   2F76               MOV     R23, R22
   \   000000C0   E060               LDI     R22, 0
   \   000000C2   0F77               LSL     R23
   \   000000C4   01FB               MOVW    R31:R30, R23:R22
   \   000000C6   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000C8   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000CA   8160               LD      R22, Z
   \   000000CC   8171               LDD     R23, Z+1
   \   000000CE   5F6E               SUBI    R22, 254
   \   000000D0   4F7F               SBCI    R23, 255
   \   000000D2   8360               ST      Z, R22
   \   000000D4   8371               STD     Z+1, R23
    570          
    571              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.PortUsed & 0xff;
   \   000000D6   2F64               MOV     R22, R20
   \   000000D8   E070               LDI     R23, 0
   \   000000DA   2F76               MOV     R23, R22
   \   000000DC   E060               LDI     R22, 0
   \   000000DE   0F77               LSL     R23
   \   000000E0   01FB               MOVW    R31:R30, R23:R22
   \   000000E2   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000E4   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000E6   8000               LD      R0, Z
   \   000000E8   8011               LDD     R1, Z+1
   \   000000EA   01C0               MOVW    R25:R24, R1:R0
   \   000000EC   9601               ADIW    R25:R24, 1
   \   000000EE   2F64               MOV     R22, R20
   \   000000F0   E070               LDI     R23, 0
   \   000000F2   2F76               MOV     R23, R22
   \   000000F4   E060               LDI     R22, 0
   \   000000F6   0F77               LSL     R23
   \   000000F8   01FB               MOVW    R31:R30, R23:R22
   \   000000FA   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000FC   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000FE   8380               ST      Z, R24
   \   00000100   8391               STD     Z+1, R25
   \   00000102   ....               LDI     R30, LOW(TData)
   \   00000104   ....               LDI     R31, (TData) >> 8
   \   00000106   8160               LD      R22, Z
   \   00000108   8171               LDD     R23, Z+1
   \   0000010A   2F56               MOV     R21, R22
   \   0000010C   2F64               MOV     R22, R20
   \   0000010E   E070               LDI     R23, 0
   \   00000110   2F76               MOV     R23, R22
   \   00000112   E060               LDI     R22, 0
   \   00000114   0F77               LSL     R23
   \   00000116   ....               LDI     R30, LOW(UART)
   \   00000118   ....               LDI     R31, (UART) >> 8
   \   0000011A   0FE6               ADD     R30, R22
   \   0000011C   1FF7               ADC     R31, R23
   \   0000011E   0DE0               ADD     R30, R0
   \   00000120   1DF1               ADC     R31, R1
   \   00000122   8350               ST      Z, R21
    572              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.Ana.PortUsed >> 8) & 0xff;
   \   00000124   2F64               MOV     R22, R20
   \   00000126   E070               LDI     R23, 0
   \   00000128   2F76               MOV     R23, R22
   \   0000012A   E060               LDI     R22, 0
   \   0000012C   0F77               LSL     R23
   \   0000012E   01FB               MOVW    R31:R30, R23:R22
   \   00000130   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000132   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000134   8000               LD      R0, Z
   \   00000136   8011               LDD     R1, Z+1
   \   00000138   01C0               MOVW    R25:R24, R1:R0
   \   0000013A   9601               ADIW    R25:R24, 1
   \   0000013C   2F64               MOV     R22, R20
   \   0000013E   E070               LDI     R23, 0
   \   00000140   2F76               MOV     R23, R22
   \   00000142   E060               LDI     R22, 0
   \   00000144   0F77               LSL     R23
   \   00000146   01FB               MOVW    R31:R30, R23:R22
   \   00000148   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000014A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000014C   8380               ST      Z, R24
   \   0000014E   8391               STD     Z+1, R25
   \   00000150   ....               LDI     R30, LOW(TData)
   \   00000152   ....               LDI     R31, (TData) >> 8
   \   00000154   8160               LD      R22, Z
   \   00000156   8171               LDD     R23, Z+1
   \   00000158   2F67               MOV     R22, R23
   \   0000015A   E070               LDI     R23, 0
   \   0000015C   2F56               MOV     R21, R22
   \   0000015E   2F64               MOV     R22, R20
   \   00000160   E070               LDI     R23, 0
   \   00000162   2F76               MOV     R23, R22
   \   00000164   E060               LDI     R22, 0
   \   00000166   0F77               LSL     R23
   \   00000168   ....               LDI     R30, LOW(UART)
   \   0000016A   ....               LDI     R31, (UART) >> 8
   \   0000016C   0FE6               ADD     R30, R22
   \   0000016E   1FF7               ADC     R31, R23
   \   00000170   0DE0               ADD     R30, R0
   \   00000172   1DF1               ADC     R31, R1
   \   00000174   8350               ST      Z, R21
    573          
    574              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   00000176   2F64               MOV     R22, R20
   \   00000178   E070               LDI     R23, 0
   \   0000017A   2F76               MOV     R23, R22
   \   0000017C   E060               LDI     R22, 0
   \   0000017E   0F77               LSL     R23
   \   00000180   01FB               MOVW    R31:R30, R23:R22
   \   00000182   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000184   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000186   8160               LD      R22, Z
   \   00000188   8171               LDD     R23, Z+1
   \   0000018A   2F50               MOV     R21, R16
   \   0000018C   1B65               SUB     R22, R21
   \   0000018E   5062               SUBI    R22, 2
   \   00000190   2E04               MOV     R0, R20
   \   00000192   2411               CLR     R1
   \   00000194   2C10               MOV     R1, R0
   \   00000196   2400               CLR     R0
   \   00000198   0C11               LSL     R1
   \   0000019A   ....               LDI     R30, LOW(UART)
   \   0000019C   ....               LDI     R31, (UART) >> 8
   \   0000019E   0DE0               ADD     R30, R0
   \   000001A0   1DF1               ADC     R31, R1
   \   000001A2   0FE0               ADD     R30, R16
   \   000001A4   1FF1               ADC     R31, R17
   \   000001A6   8360               ST      Z, R22
    575              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   000001A8   2F64               MOV     R22, R20
   \   000001AA   E070               LDI     R23, 0
   \   000001AC   2F76               MOV     R23, R22
   \   000001AE   E060               LDI     R22, 0
   \   000001B0   0F77               LSL     R23
   \   000001B2   01FB               MOVW    R31:R30, R23:R22
   \   000001B4   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001B6   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001B8   8180               LD      R24, Z
   \   000001BA   8191               LDD     R25, Z+1
   \   000001BC   1B80               SUB     R24, R16
   \   000001BE   0B91               SBC     R25, R17
   \   000001C0   9702               SBIW    R25:R24, 2
   \   000001C2   2F89               MOV     R24, R25
   \   000001C4   E090               LDI     R25, 0
   \   000001C6   ....               LDI     R30, LOW((UART + 1))
   \   000001C8   ....               LDI     R31, HIGH((UART + 1))
   \   000001CA   0FE0               ADD     R30, R16
   \   000001CC   1FF1               ADC     R31, R17
   \   000001CE   2F64               MOV     R22, R20
   \   000001D0   E070               LDI     R23, 0
   \   000001D2   2F76               MOV     R23, R22
   \   000001D4   E060               LDI     R22, 0
   \   000001D6   0F77               LSL     R23
   \   000001D8   0FE6               ADD     R30, R22
   \   000001DA   1FF7               ADC     R31, R23
   \   000001DC   8380               ST      Z, R24
    576          }
   \   000001DE   01C1               MOVW    R25:R24, R3:R2
   \   000001E0   9508               RET
    577          
    578          /*************************************************************************
    579          *
    580          * Build filter data package for AN-ZBANA
    581          *
    582          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    583          void BuildANAFilter(char ch, short pointer) {
   \                     BuildANAFilter:
   \   00000000   939A               ST      -Y, R25
   \   00000002   2F58               MOV     R21, R24
   \   00000004   2F40               MOV     R20, R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
    584          
    585              char port;
    586              short ntna;
    587              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000008   2E04               MOV     R0, R20
   \   0000000A   2411               CLR     R1
   \   0000000C   2C10               MOV     R1, R0
   \   0000000E   2400               CLR     R0
   \   00000010   0C11               LSL     R1
   \   00000012   01F0               MOVW    R31:R30, R1:R0
   \   00000014   ....               SUBI    R30, LOW((-(UART + 446) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART + 446) & 0xFFFF))
   \   00000018   E011               LDI     R17, 1
   \   0000001A   8310               ST      Z, R17
    588          
    589              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER & 0xff;
   \   0000001C   2E04               MOV     R0, R20
   \   0000001E   2411               CLR     R1
   \   00000020   2C10               MOV     R1, R0
   \   00000022   2400               CLR     R0
   \   00000024   0C11               LSL     R1
   \   00000026   01F0               MOVW    R31:R30, R1:R0
   \   00000028   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000002C   8020               LD      R2, Z
   \   0000002E   8031               LDD     R3, Z+1
   \   00000030   01C1               MOVW    R25:R24, R3:R2
   \   00000032   9601               ADIW    R25:R24, 1
   \   00000034   2E04               MOV     R0, R20
   \   00000036   2411               CLR     R1
   \   00000038   2C10               MOV     R1, R0
   \   0000003A   2400               CLR     R0
   \   0000003C   0C11               LSL     R1
   \   0000003E   01F0               MOVW    R31:R30, R1:R0
   \   00000040   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000042   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000044   8380               ST      Z, R24
   \   00000046   8391               STD     Z+1, R25
   \   00000048   2E04               MOV     R0, R20
   \   0000004A   2411               CLR     R1
   \   0000004C   2C10               MOV     R1, R0
   \   0000004E   2400               CLR     R0
   \   00000050   0C11               LSL     R1
   \   00000052   ....               LDI     R30, LOW(UART)
   \   00000054   ....               LDI     R31, (UART) >> 8
   \   00000056   0DE0               ADD     R30, R0
   \   00000058   1DF1               ADC     R31, R1
   \   0000005A   0DE2               ADD     R30, R2
   \   0000005C   1DF3               ADC     R31, R3
   \   0000005E   EC1F               LDI     R17, 207
   \   00000060   8310               ST      Z, R17
    590              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER >> 8;
   \   00000062   2E04               MOV     R0, R20
   \   00000064   2411               CLR     R1
   \   00000066   2C10               MOV     R1, R0
   \   00000068   2400               CLR     R0
   \   0000006A   0C11               LSL     R1
   \   0000006C   01F0               MOVW    R31:R30, R1:R0
   \   0000006E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000070   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000072   8020               LD      R2, Z
   \   00000074   8031               LDD     R3, Z+1
   \   00000076   01C1               MOVW    R25:R24, R3:R2
   \   00000078   9601               ADIW    R25:R24, 1
   \   0000007A   2E04               MOV     R0, R20
   \   0000007C   2411               CLR     R1
   \   0000007E   2C10               MOV     R1, R0
   \   00000080   2400               CLR     R0
   \   00000082   0C11               LSL     R1
   \   00000084   01F0               MOVW    R31:R30, R1:R0
   \   00000086   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000088   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000008A   8380               ST      Z, R24
   \   0000008C   8391               STD     Z+1, R25
   \   0000008E   2E04               MOV     R0, R20
   \   00000090   2411               CLR     R1
   \   00000092   2C10               MOV     R1, R0
   \   00000094   2400               CLR     R0
   \   00000096   0C11               LSL     R1
   \   00000098   ....               LDI     R30, LOW(UART)
   \   0000009A   ....               LDI     R31, (UART) >> 8
   \   0000009C   0DE0               ADD     R30, R0
   \   0000009E   1DF1               ADC     R31, R1
   \   000000A0   0DE2               ADD     R30, R2
   \   000000A2   1DF3               ADC     R31, R3
   \   000000A4   E014               LDI     R17, 4
   \   000000A6   8310               ST      Z, R17
    591              ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000A8   2E04               MOV     R0, R20
   \   000000AA   2411               CLR     R1
   \   000000AC   2C10               MOV     R1, R0
   \   000000AE   2400               CLR     R0
   \   000000B0   0C11               LSL     R1
   \   000000B2   01F0               MOVW    R31:R30, R1:R0
   \   000000B4   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000B8   8000               LD      R0, Z
   \   000000BA   8011               LDD     R1, Z+1
   \   000000BC   0190               MOVW    R19:R18, R1:R0
    592              UART[ch].TxFirst += 2;                                      // two byte length
   \   000000BE   2E04               MOV     R0, R20
   \   000000C0   2411               CLR     R1
   \   000000C2   2C10               MOV     R1, R0
   \   000000C4   2400               CLR     R0
   \   000000C6   0C11               LSL     R1
   \   000000C8   01F0               MOVW    R31:R30, R1:R0
   \   000000CA   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000CC   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000CE   8180               LD      R24, Z
   \   000000D0   8191               LDD     R25, Z+1
   \   000000D2   9602               ADIW    R25:R24, 2
   \   000000D4   8380               ST      Z, R24
   \   000000D6   8391               STD     Z+1, R25
    593          
    594              for (port = 0; port < 12; port++) {
   \   000000D8   E000               LDI     R16, 0
   \                     ??BuildANAFilter_0:
   \   000000DA   300C               CPI     R16, 12
   \   000000DC   F548               BRCC    ??BuildANAFilter_1
    595          #if USE_MODBUS_PROTOCOL == 1
    596                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (char)TData.Ana.Filter[port];
    597          #else
    598                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Filter[port];
   \   000000DE   2E04               MOV     R0, R20
   \   000000E0   2411               CLR     R1
   \   000000E2   2C10               MOV     R1, R0
   \   000000E4   2400               CLR     R0
   \   000000E6   0C11               LSL     R1
   \   000000E8   01F0               MOVW    R31:R30, R1:R0
   \   000000EA   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000EC   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000EE   8020               LD      R2, Z
   \   000000F0   8031               LDD     R3, Z+1
   \   000000F2   01C1               MOVW    R25:R24, R3:R2
   \   000000F4   9601               ADIW    R25:R24, 1
   \   000000F6   2E04               MOV     R0, R20
   \   000000F8   2411               CLR     R1
   \   000000FA   2C10               MOV     R1, R0
   \   000000FC   2400               CLR     R0
   \   000000FE   0C11               LSL     R1
   \   00000100   01F0               MOVW    R31:R30, R1:R0
   \   00000102   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000104   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000106   8380               ST      Z, R24
   \   00000108   8391               STD     Z+1, R25
   \   0000010A   E010               LDI     R17, 0
   \   0000010C   01F8               MOVW    R31:R30, R17:R16
   \   0000010E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000110   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000112   8112               LDD     R17, Z+2
   \   00000114   2E04               MOV     R0, R20
   \   00000116   2411               CLR     R1
   \   00000118   2C10               MOV     R1, R0
   \   0000011A   2400               CLR     R0
   \   0000011C   0C11               LSL     R1
   \   0000011E   ....               LDI     R30, LOW(UART)
   \   00000120   ....               LDI     R31, (UART) >> 8
   \   00000122   0DE0               ADD     R30, R0
   \   00000124   1DF1               ADC     R31, R1
   \   00000126   0DE2               ADD     R30, R2
   \   00000128   1DF3               ADC     R31, R3
   \   0000012A   8310               ST      Z, R17
    599          #endif
    600              }
   \   0000012C   9503               INC     R16
   \   0000012E   CFD5               RJMP    ??BuildANAFilter_0
    601          
    602              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??BuildANAFilter_1:
   \   00000130   2E04               MOV     R0, R20
   \   00000132   2411               CLR     R1
   \   00000134   2C10               MOV     R1, R0
   \   00000136   2400               CLR     R0
   \   00000138   0C11               LSL     R1
   \   0000013A   01F0               MOVW    R31:R30, R1:R0
   \   0000013C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000013E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000140   8180               LD      R24, Z
   \   00000142   8191               LDD     R25, Z+1
   \   00000144   2F12               MOV     R17, R18
   \   00000146   1B81               SUB     R24, R17
   \   00000148   5082               SUBI    R24, 2
   \   0000014A   2E04               MOV     R0, R20
   \   0000014C   2411               CLR     R1
   \   0000014E   2C10               MOV     R1, R0
   \   00000150   2400               CLR     R0
   \   00000152   0C11               LSL     R1
   \   00000154   ....               LDI     R30, LOW(UART)
   \   00000156   ....               LDI     R31, (UART) >> 8
   \   00000158   0DE0               ADD     R30, R0
   \   0000015A   1DF1               ADC     R31, R1
   \   0000015C   0FE2               ADD     R30, R18
   \   0000015E   1FF3               ADC     R31, R19
   \   00000160   8380               ST      Z, R24
    603              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   00000162   2E04               MOV     R0, R20
   \   00000164   2411               CLR     R1
   \   00000166   2C10               MOV     R1, R0
   \   00000168   2400               CLR     R0
   \   0000016A   0C11               LSL     R1
   \   0000016C   01F0               MOVW    R31:R30, R1:R0
   \   0000016E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000170   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000172   8180               LD      R24, Z
   \   00000174   8191               LDD     R25, Z+1
   \   00000176   1B82               SUB     R24, R18
   \   00000178   0B93               SBC     R25, R19
   \   0000017A   9702               SBIW    R25:R24, 2
   \   0000017C   2F89               MOV     R24, R25
   \   0000017E   E090               LDI     R25, 0
   \   00000180   2F18               MOV     R17, R24
   \   00000182   ....               LDI     R30, LOW((UART + 1))
   \   00000184   ....               LDI     R31, HIGH((UART + 1))
   \   00000186   0FE2               ADD     R30, R18
   \   00000188   1FF3               ADC     R31, R19
   \   0000018A   2F84               MOV     R24, R20
   \   0000018C   E090               LDI     R25, 0
   \   0000018E   2F98               MOV     R25, R24
   \   00000190   E080               LDI     R24, 0
   \   00000192   0F99               LSL     R25
   \   00000194   0FE8               ADD     R30, R24
   \   00000196   1FF9               ADC     R31, R25
   \   00000198   8310               ST      Z, R17
    604          }
   \   0000019A   2F85               MOV     R24, R21
   \   0000019C   9199               LD      R25, Y+
   \   0000019E   9508               RET
    605          
    606          /*************************************************************************
    607          *
    608          * Build datablock for External AD (ANA)
    609          *
    610          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    611          void BuildMDataANA(char ch, short pointer) {
   \                     BuildMDataANA:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01A9               MOVW    R21:R20, R19:R18
    612          
    613              short ntna, i;
    614              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000006   2F60               MOV     R22, R16
   \   00000008   E070               LDI     R23, 0
   \   0000000A   2F76               MOV     R23, R22
   \   0000000C   E060               LDI     R22, 0
   \   0000000E   0F77               LSL     R23
   \   00000010   01FB               MOVW    R31:R30, R23:R22
   \   00000012   ....               SUBI    R30, LOW((-(UART + 446) & 0xFFFF))
   \   00000014   ....               SBCI    R31, HIGH((-(UART + 446) & 0xFFFF))
   \   00000016   E011               LDI     R17, 1
   \   00000018   8310               ST      Z, R17
    615          
    616              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA & 0xff;
   \   0000001A   2F60               MOV     R22, R16
   \   0000001C   E070               LDI     R23, 0
   \   0000001E   2F76               MOV     R23, R22
   \   00000020   E060               LDI     R22, 0
   \   00000022   0F77               LSL     R23
   \   00000024   01FB               MOVW    R31:R30, R23:R22
   \   00000026   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000028   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000002A   8000               LD      R0, Z
   \   0000002C   8011               LDD     R1, Z+1
   \   0000002E   01D0               MOVW    R27:R26, R1:R0
   \   00000030   9611               ADIW    R27:R26, 1
   \   00000032   2F60               MOV     R22, R16
   \   00000034   E070               LDI     R23, 0
   \   00000036   2F76               MOV     R23, R22
   \   00000038   E060               LDI     R22, 0
   \   0000003A   0F77               LSL     R23
   \   0000003C   01FB               MOVW    R31:R30, R23:R22
   \   0000003E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000040   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000042   83A0               ST      Z, R26
   \   00000044   83B1               STD     Z+1, R27
   \   00000046   2F60               MOV     R22, R16
   \   00000048   E070               LDI     R23, 0
   \   0000004A   2F76               MOV     R23, R22
   \   0000004C   E060               LDI     R22, 0
   \   0000004E   0F77               LSL     R23
   \   00000050   ....               LDI     R30, LOW(UART)
   \   00000052   ....               LDI     R31, (UART) >> 8
   \   00000054   0FE6               ADD     R30, R22
   \   00000056   1FF7               ADC     R31, R23
   \   00000058   0DE0               ADD     R30, R0
   \   0000005A   1DF1               ADC     R31, R1
   \   0000005C   ED19               LDI     R17, 217
   \   0000005E   8310               ST      Z, R17
    617              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA >> 8;
   \   00000060   2F60               MOV     R22, R16
   \   00000062   E070               LDI     R23, 0
   \   00000064   2F76               MOV     R23, R22
   \   00000066   E060               LDI     R22, 0
   \   00000068   0F77               LSL     R23
   \   0000006A   01FB               MOVW    R31:R30, R23:R22
   \   0000006C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000070   8000               LD      R0, Z
   \   00000072   8011               LDD     R1, Z+1
   \   00000074   01D0               MOVW    R27:R26, R1:R0
   \   00000076   9611               ADIW    R27:R26, 1
   \   00000078   2F60               MOV     R22, R16
   \   0000007A   E070               LDI     R23, 0
   \   0000007C   2F76               MOV     R23, R22
   \   0000007E   E060               LDI     R22, 0
   \   00000080   0F77               LSL     R23
   \   00000082   01FB               MOVW    R31:R30, R23:R22
   \   00000084   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000086   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000088   83A0               ST      Z, R26
   \   0000008A   83B1               STD     Z+1, R27
   \   0000008C   2F60               MOV     R22, R16
   \   0000008E   E070               LDI     R23, 0
   \   00000090   2F76               MOV     R23, R22
   \   00000092   E060               LDI     R22, 0
   \   00000094   0F77               LSL     R23
   \   00000096   ....               LDI     R30, LOW(UART)
   \   00000098   ....               LDI     R31, (UART) >> 8
   \   0000009A   0FE6               ADD     R30, R22
   \   0000009C   1FF7               ADC     R31, R23
   \   0000009E   0DE0               ADD     R30, R0
   \   000000A0   1DF1               ADC     R31, R1
   \   000000A2   E014               LDI     R17, 4
   \   000000A4   8310               ST      Z, R17
    618              ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000A6   2F60               MOV     R22, R16
   \   000000A8   E070               LDI     R23, 0
   \   000000AA   2F76               MOV     R23, R22
   \   000000AC   E060               LDI     R22, 0
   \   000000AE   0F77               LSL     R23
   \   000000B0   01FB               MOVW    R31:R30, R23:R22
   \   000000B2   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000B6   8160               LD      R22, Z
   \   000000B8   8171               LDD     R23, Z+1
   \   000000BA   019B               MOVW    R19:R18, R23:R22
    619              UART[ch].TxFirst += 2;                                      // two byte length
   \   000000BC   2F60               MOV     R22, R16
   \   000000BE   E070               LDI     R23, 0
   \   000000C0   2F76               MOV     R23, R22
   \   000000C2   E060               LDI     R22, 0
   \   000000C4   0F77               LSL     R23
   \   000000C6   01FB               MOVW    R31:R30, R23:R22
   \   000000C8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000CC   8160               LD      R22, Z
   \   000000CE   8171               LDD     R23, Z+1
   \   000000D0   5F6E               SUBI    R22, 254
   \   000000D2   4F7F               SBCI    R23, 255
   \   000000D4   8360               ST      Z, R22
   \   000000D6   8371               STD     Z+1, R23
    620          
    621              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RestartStatus << 4);    // Add restart status
   \   000000D8   2F60               MOV     R22, R16
   \   000000DA   E070               LDI     R23, 0
   \   000000DC   2F76               MOV     R23, R22
   \   000000DE   E060               LDI     R22, 0
   \   000000E0   0F77               LSL     R23
   \   000000E2   01FB               MOVW    R31:R30, R23:R22
   \   000000E4   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000E6   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000E8   8000               LD      R0, Z
   \   000000EA   8011               LDD     R1, Z+1
   \   000000EC   01D0               MOVW    R27:R26, R1:R0
   \   000000EE   9611               ADIW    R27:R26, 1
   \   000000F0   2F60               MOV     R22, R16
   \   000000F2   E070               LDI     R23, 0
   \   000000F4   2F76               MOV     R23, R22
   \   000000F6   E060               LDI     R22, 0
   \   000000F8   0F77               LSL     R23
   \   000000FA   01FB               MOVW    R31:R30, R23:R22
   \   000000FC   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000FE   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000100   83A0               ST      Z, R26
   \   00000102   83B1               STD     Z+1, R27
   \   00000104   9110....           LDS     R17, RestartStatus
   \   00000108   9512               SWAP    R17
   \   0000010A   7F10               ANDI    R17, 0xF0
   \   0000010C   2F60               MOV     R22, R16
   \   0000010E   E070               LDI     R23, 0
   \   00000110   2F76               MOV     R23, R22
   \   00000112   E060               LDI     R22, 0
   \   00000114   0F77               LSL     R23
   \   00000116   ....               LDI     R30, LOW(UART)
   \   00000118   ....               LDI     R31, (UART) >> 8
   \   0000011A   0FE6               ADD     R30, R22
   \   0000011C   1FF7               ADC     R31, R23
   \   0000011E   0DE0               ADD     R30, R0
   \   00000120   1DF1               ADC     R31, R1
   \   00000122   8310               ST      Z, R17
    622              for (i = 0; i < 12; i++) {
   \   00000124   E080               LDI     R24, 0
   \   00000126   E090               LDI     R25, 0
   \                     ??BuildMDataANA_0:
   \   00000128   308C               CPI     R24, 12
   \   0000012A   E010               LDI     R17, 0
   \   0000012C   0791               CPC     R25, R17
   \   0000012E   F00C               BRLT    $+2+2
   \   00000130   C05C               RJMP    ??BuildMDataANA_1
    623                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Status[i];
   \   00000132   2F60               MOV     R22, R16
   \   00000134   E070               LDI     R23, 0
   \   00000136   2F76               MOV     R23, R22
   \   00000138   E060               LDI     R22, 0
   \   0000013A   0F77               LSL     R23
   \   0000013C   01FB               MOVW    R31:R30, R23:R22
   \   0000013E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000140   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000142   8000               LD      R0, Z
   \   00000144   8011               LDD     R1, Z+1
   \   00000146   01D0               MOVW    R27:R26, R1:R0
   \   00000148   9611               ADIW    R27:R26, 1
   \   0000014A   2F60               MOV     R22, R16
   \   0000014C   E070               LDI     R23, 0
   \   0000014E   2F76               MOV     R23, R22
   \   00000150   E060               LDI     R22, 0
   \   00000152   0F77               LSL     R23
   \   00000154   01FB               MOVW    R31:R30, R23:R22
   \   00000156   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000158   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000015A   83A0               ST      Z, R26
   \   0000015C   83B1               STD     Z+1, R27
   \   0000015E   01FC               MOVW    R31:R30, R25:R24
   \   00000160   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000162   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000164   8516               LDD     R17, Z+14
   \   00000166   2F60               MOV     R22, R16
   \   00000168   E070               LDI     R23, 0
   \   0000016A   2F76               MOV     R23, R22
   \   0000016C   E060               LDI     R22, 0
   \   0000016E   0F77               LSL     R23
   \   00000170   ....               LDI     R30, LOW(UART)
   \   00000172   ....               LDI     R31, (UART) >> 8
   \   00000174   0FE6               ADD     R30, R22
   \   00000176   1FF7               ADC     R31, R23
   \   00000178   0DE0               ADD     R30, R0
   \   0000017A   1DF1               ADC     R31, R1
   \   0000017C   8310               ST      Z, R17
    624                  *((float *)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float *)&TData.Ana.Result[i]);   // ADresult
   \   0000017E   01BC               MOVW    R23:R22, R25:R24
   \   00000180   0F66               LSL     R22
   \   00000182   1F77               ROL     R23
   \   00000184   0F66               LSL     R22
   \   00000186   1F77               ROL     R23
   \   00000188   01FB               MOVW    R31:R30, R23:R22
   \   0000018A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000018C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000018E   8C02               LDD     R0, Z+26
   \   00000190   8C13               LDD     R1, Z+27
   \   00000192   8C24               LDD     R2, Z+28
   \   00000194   8C35               LDD     R3, Z+29
   \   00000196   2FE0               MOV     R30, R16
   \   00000198   E0F0               LDI     R31, 0
   \   0000019A   2FFE               MOV     R31, R30
   \   0000019C   E0E0               LDI     R30, 0
   \   0000019E   0FFF               LSL     R31
   \   000001A0   ....               LDI     R22, LOW(UART)
   \   000001A2   ....               LDI     R23, (UART) >> 8
   \   000001A4   0F6E               ADD     R22, R30
   \   000001A6   1F7F               ADC     R23, R31
   \   000001A8   2FA0               MOV     R26, R16
   \   000001AA   E0B0               LDI     R27, 0
   \   000001AC   2FBA               MOV     R27, R26
   \   000001AE   E0A0               LDI     R26, 0
   \   000001B0   0FBB               LSL     R27
   \   000001B2   01FD               MOVW    R31:R30, R27:R26
   \   000001B4   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001B6   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001B8   81A0               LD      R26, Z
   \   000001BA   81B1               LDD     R27, Z+1
   \   000001BC   0F6A               ADD     R22, R26
   \   000001BE   1F7B               ADC     R23, R27
   \   000001C0   01FB               MOVW    R31:R30, R23:R22
   \   000001C2   8200               ST      Z, R0
   \   000001C4   8211               STD     Z+1, R1
   \   000001C6   8222               STD     Z+2, R2
   \   000001C8   8233               STD     Z+3, R3
    625                  UART[ch].TxFirst += sizeof(float);
   \   000001CA   2F60               MOV     R22, R16
   \   000001CC   E070               LDI     R23, 0
   \   000001CE   2F76               MOV     R23, R22
   \   000001D0   E060               LDI     R22, 0
   \   000001D2   0F77               LSL     R23
   \   000001D4   01FB               MOVW    R31:R30, R23:R22
   \   000001D6   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001D8   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001DA   8160               LD      R22, Z
   \   000001DC   8171               LDD     R23, Z+1
   \   000001DE   5F6C               SUBI    R22, 252
   \   000001E0   4F7F               SBCI    R23, 255
   \   000001E2   8360               ST      Z, R22
   \   000001E4   8371               STD     Z+1, R23
    626              }
   \   000001E6   9601               ADIW    R25:R24, 1
   \   000001E8   CF9F               RJMP    ??BuildMDataANA_0
    627          
    628              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??BuildMDataANA_1:
   \   000001EA   2F60               MOV     R22, R16
   \   000001EC   E070               LDI     R23, 0
   \   000001EE   2F76               MOV     R23, R22
   \   000001F0   E060               LDI     R22, 0
   \   000001F2   0F77               LSL     R23
   \   000001F4   01FB               MOVW    R31:R30, R23:R22
   \   000001F6   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001F8   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001FA   8160               LD      R22, Z
   \   000001FC   8171               LDD     R23, Z+1
   \   000001FE   2F12               MOV     R17, R18
   \   00000200   1B61               SUB     R22, R17
   \   00000202   5062               SUBI    R22, 2
   \   00000204   2E00               MOV     R0, R16
   \   00000206   2411               CLR     R1
   \   00000208   2C10               MOV     R1, R0
   \   0000020A   2400               CLR     R0
   \   0000020C   0C11               LSL     R1
   \   0000020E   ....               LDI     R30, LOW(UART)
   \   00000210   ....               LDI     R31, (UART) >> 8
   \   00000212   0DE0               ADD     R30, R0
   \   00000214   1DF1               ADC     R31, R1
   \   00000216   0FE2               ADD     R30, R18
   \   00000218   1FF3               ADC     R31, R19
   \   0000021A   8360               ST      Z, R22
    629              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   0000021C   2F60               MOV     R22, R16
   \   0000021E   E070               LDI     R23, 0
   \   00000220   2F76               MOV     R23, R22
   \   00000222   E060               LDI     R22, 0
   \   00000224   0F77               LSL     R23
   \   00000226   01FB               MOVW    R31:R30, R23:R22
   \   00000228   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000022A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000022C   81A0               LD      R26, Z
   \   0000022E   81B1               LDD     R27, Z+1
   \   00000230   1BA2               SUB     R26, R18
   \   00000232   0BB3               SBC     R27, R19
   \   00000234   9712               SBIW    R27:R26, 2
   \   00000236   2FAB               MOV     R26, R27
   \   00000238   E0B0               LDI     R27, 0
   \   0000023A   ....               LDI     R30, LOW((UART + 1))
   \   0000023C   ....               LDI     R31, HIGH((UART + 1))
   \   0000023E   0FE2               ADD     R30, R18
   \   00000240   1FF3               ADC     R31, R19
   \   00000242   2F60               MOV     R22, R16
   \   00000244   E070               LDI     R23, 0
   \   00000246   2F76               MOV     R23, R22
   \   00000248   E060               LDI     R22, 0
   \   0000024A   0F77               LSL     R23
   \   0000024C   0FE6               ADD     R30, R22
   \   0000024E   1FF7               ADC     R31, R23
   \   00000250   83A0               ST      Z, R26
    630          
    631          }
   \   00000252   E0E4               LDI     R30, 4
   \   00000254   ........           JMP     ?EPILOGUE_B4_L09
    632          
    633          /*************************************************************************
    634          *
    635          * Build datablock for Stack status
    636          *
    637          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    638          void BuildStackStatus(char ch, short pointer) {
   \                     BuildStackStatus:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   0139               MOVW    R7:R6, R19:R18
    639          
    640              short ntna, stack;
    641              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000008   2F0A               MOV     R16, R26
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   2F10               MOV     R17, R16
   \   0000000E   E000               LDI     R16, 0
   \   00000010   0F11               LSL     R17
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART + 446) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART + 446) & 0xFFFF))
   \   00000018   E001               LDI     R16, 1
   \   0000001A   8300               ST      Z, R16
    642          
    643              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS & 0xff;
   \   0000001C   2F0A               MOV     R16, R26
   \   0000001E   E010               LDI     R17, 0
   \   00000020   2F10               MOV     R17, R16
   \   00000022   E000               LDI     R16, 0
   \   00000024   0F11               LSL     R17
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000002C   8140               LD      R20, Z
   \   0000002E   8151               LDD     R21, Z+1
   \   00000030   018A               MOVW    R17:R16, R21:R20
   \   00000032   5F0F               SUBI    R16, 255
   \   00000034   4F1F               SBCI    R17, 255
   \   00000036   2F2A               MOV     R18, R26
   \   00000038   E030               LDI     R19, 0
   \   0000003A   2F32               MOV     R19, R18
   \   0000003C   E020               LDI     R18, 0
   \   0000003E   0F33               LSL     R19
   \   00000040   01F9               MOVW    R31:R30, R19:R18
   \   00000042   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000044   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000046   8300               ST      Z, R16
   \   00000048   8311               STD     Z+1, R17
   \   0000004A   2F0A               MOV     R16, R26
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   2F10               MOV     R17, R16
   \   00000050   E000               LDI     R16, 0
   \   00000052   0F11               LSL     R17
   \   00000054   ....               LDI     R30, LOW(UART)
   \   00000056   ....               LDI     R31, (UART) >> 8
   \   00000058   0FE0               ADD     R30, R16
   \   0000005A   1FF1               ADC     R31, R17
   \   0000005C   0FE4               ADD     R30, R20
   \   0000005E   1FF5               ADC     R31, R21
   \   00000060   E707               LDI     R16, 119
   \   00000062   8300               ST      Z, R16
    644              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS >> 8;
   \   00000064   2F0A               MOV     R16, R26
   \   00000066   E010               LDI     R17, 0
   \   00000068   2F10               MOV     R17, R16
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   0F11               LSL     R17
   \   0000006E   01F8               MOVW    R31:R30, R17:R16
   \   00000070   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000072   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000074   8140               LD      R20, Z
   \   00000076   8151               LDD     R21, Z+1
   \   00000078   018A               MOVW    R17:R16, R21:R20
   \   0000007A   5F0F               SUBI    R16, 255
   \   0000007C   4F1F               SBCI    R17, 255
   \   0000007E   2F2A               MOV     R18, R26
   \   00000080   E030               LDI     R19, 0
   \   00000082   2F32               MOV     R19, R18
   \   00000084   E020               LDI     R18, 0
   \   00000086   0F33               LSL     R19
   \   00000088   01F9               MOVW    R31:R30, R19:R18
   \   0000008A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000008C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000008E   8300               ST      Z, R16
   \   00000090   8311               STD     Z+1, R17
   \   00000092   2F0A               MOV     R16, R26
   \   00000094   E010               LDI     R17, 0
   \   00000096   2F10               MOV     R17, R16
   \   00000098   E000               LDI     R16, 0
   \   0000009A   0F11               LSL     R17
   \   0000009C   ....               LDI     R30, LOW(UART)
   \   0000009E   ....               LDI     R31, (UART) >> 8
   \   000000A0   0FE0               ADD     R30, R16
   \   000000A2   1FF1               ADC     R31, R17
   \   000000A4   0FE4               ADD     R30, R20
   \   000000A6   1FF5               ADC     R31, R21
   \   000000A8   E007               LDI     R16, 7
   \   000000AA   8300               ST      Z, R16
    645              ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000AC   2F0A               MOV     R16, R26
   \   000000AE   E010               LDI     R17, 0
   \   000000B0   2F10               MOV     R17, R16
   \   000000B2   E000               LDI     R16, 0
   \   000000B4   0F11               LSL     R17
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000BC   8100               LD      R16, Z
   \   000000BE   8111               LDD     R17, Z+1
   \   000000C0   0128               MOVW    R5:R4, R17:R16
    646              UART[ch].TxFirst += 2;                                      // two byte length
   \   000000C2   2F0A               MOV     R16, R26
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   2F10               MOV     R17, R16
   \   000000C8   E000               LDI     R16, 0
   \   000000CA   0F11               LSL     R17
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000D2   8100               LD      R16, Z
   \   000000D4   8111               LDD     R17, Z+1
   \   000000D6   5F0E               SUBI    R16, 254
   \   000000D8   4F1F               SBCI    R17, 255
   \   000000DA   8300               ST      Z, R16
   \   000000DC   8311               STD     Z+1, R17
    647          #if USE_1281_RX_INT_TASK == 0
    648              stack = OS_GetStackSpace(&TCB_USART0);                            // USART 0
    649              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
    650              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
    651              stack = OS_GetStackSpace(&TCB_USART1);                            // USART 1
    652              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
    653              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
    654          #else
    655              stack = OS_GetStackSpace(&TCB_ATMega1281RX_Driver0);                // TCB_ATMega1281RX_Driver0
   \   000000DE   ....               LDI     R16, LOW(TCB_ATMega1281RX_Driver0)
   \   000000E0   ....               LDI     R17, (TCB_ATMega1281RX_Driver0) >> 8
   \   000000E2   ........           CALL    OS_GetStackSpace
   \   000000E6   01C8               MOVW    R25:R24, R17:R16
    656              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
   \   000000E8   2F0A               MOV     R16, R26
   \   000000EA   E010               LDI     R17, 0
   \   000000EC   2F10               MOV     R17, R16
   \   000000EE   E000               LDI     R16, 0
   \   000000F0   0F11               LSL     R17
   \   000000F2   01F8               MOVW    R31:R30, R17:R16
   \   000000F4   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000000F6   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000000F8   8140               LD      R20, Z
   \   000000FA   8151               LDD     R21, Z+1
   \   000000FC   018A               MOVW    R17:R16, R21:R20
   \   000000FE   5F0F               SUBI    R16, 255
   \   00000100   4F1F               SBCI    R17, 255
   \   00000102   2F2A               MOV     R18, R26
   \   00000104   E030               LDI     R19, 0
   \   00000106   2F32               MOV     R19, R18
   \   00000108   E020               LDI     R18, 0
   \   0000010A   0F33               LSL     R19
   \   0000010C   01F9               MOVW    R31:R30, R19:R18
   \   0000010E   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000110   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000112   8300               ST      Z, R16
   \   00000114   8311               STD     Z+1, R17
   \   00000116   2F28               MOV     R18, R24
   \   00000118   2F0A               MOV     R16, R26
   \   0000011A   E010               LDI     R17, 0
   \   0000011C   2F10               MOV     R17, R16
   \   0000011E   E000               LDI     R16, 0
   \   00000120   0F11               LSL     R17
   \   00000122   ....               LDI     R30, LOW(UART)
   \   00000124   ....               LDI     R31, (UART) >> 8
   \   00000126   0FE0               ADD     R30, R16
   \   00000128   1FF1               ADC     R31, R17
   \   0000012A   0FE4               ADD     R30, R20
   \   0000012C   1FF5               ADC     R31, R21
   \   0000012E   8320               ST      Z, R18
    657              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
   \   00000130   2F0A               MOV     R16, R26
   \   00000132   E010               LDI     R17, 0
   \   00000134   2F10               MOV     R17, R16
   \   00000136   E000               LDI     R16, 0
   \   00000138   0F11               LSL     R17
   \   0000013A   01F8               MOVW    R31:R30, R17:R16
   \   0000013C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000013E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000140   8140               LD      R20, Z
   \   00000142   8151               LDD     R21, Z+1
   \   00000144   018A               MOVW    R17:R16, R21:R20
   \   00000146   5F0F               SUBI    R16, 255
   \   00000148   4F1F               SBCI    R17, 255
   \   0000014A   2F2A               MOV     R18, R26
   \   0000014C   E030               LDI     R19, 0
   \   0000014E   2F32               MOV     R19, R18
   \   00000150   E020               LDI     R18, 0
   \   00000152   0F33               LSL     R19
   \   00000154   01F9               MOVW    R31:R30, R19:R18
   \   00000156   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000158   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000015A   8300               ST      Z, R16
   \   0000015C   8311               STD     Z+1, R17
   \   0000015E   018C               MOVW    R17:R16, R25:R24
   \   00000160   2F01               MOV     R16, R17
   \   00000162   0F11               LSL     R17
   \   00000164   0B11               SBC     R17, R17
   \   00000166   2F20               MOV     R18, R16
   \   00000168   2F0A               MOV     R16, R26
   \   0000016A   E010               LDI     R17, 0
   \   0000016C   2F10               MOV     R17, R16
   \   0000016E   E000               LDI     R16, 0
   \   00000170   0F11               LSL     R17
   \   00000172   ....               LDI     R30, LOW(UART)
   \   00000174   ....               LDI     R31, (UART) >> 8
   \   00000176   0FE0               ADD     R30, R16
   \   00000178   1FF1               ADC     R31, R17
   \   0000017A   0FE4               ADD     R30, R20
   \   0000017C   1FF5               ADC     R31, R21
   \   0000017E   8320               ST      Z, R18
    658              stack = OS_GetStackSpace(&TCB_ATMega1281RX_Driver1);                // TCB_ATMega1281RX_Driver1
   \   00000180   ....               LDI     R16, LOW(TCB_ATMega1281RX_Driver1)
   \   00000182   ....               LDI     R17, (TCB_ATMega1281RX_Driver1) >> 8
   \   00000184   ........           CALL    OS_GetStackSpace
   \   00000188   01C8               MOVW    R25:R24, R17:R16
    659              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
   \   0000018A   2F0A               MOV     R16, R26
   \   0000018C   E010               LDI     R17, 0
   \   0000018E   2F10               MOV     R17, R16
   \   00000190   E000               LDI     R16, 0
   \   00000192   0F11               LSL     R17
   \   00000194   01F8               MOVW    R31:R30, R17:R16
   \   00000196   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000198   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000019A   8140               LD      R20, Z
   \   0000019C   8151               LDD     R21, Z+1
   \   0000019E   018A               MOVW    R17:R16, R21:R20
   \   000001A0   5F0F               SUBI    R16, 255
   \   000001A2   4F1F               SBCI    R17, 255
   \   000001A4   2F2A               MOV     R18, R26
   \   000001A6   E030               LDI     R19, 0
   \   000001A8   2F32               MOV     R19, R18
   \   000001AA   E020               LDI     R18, 0
   \   000001AC   0F33               LSL     R19
   \   000001AE   01F9               MOVW    R31:R30, R19:R18
   \   000001B0   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001B2   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001B4   8300               ST      Z, R16
   \   000001B6   8311               STD     Z+1, R17
   \   000001B8   2F28               MOV     R18, R24
   \   000001BA   2F0A               MOV     R16, R26
   \   000001BC   E010               LDI     R17, 0
   \   000001BE   2F10               MOV     R17, R16
   \   000001C0   E000               LDI     R16, 0
   \   000001C2   0F11               LSL     R17
   \   000001C4   ....               LDI     R30, LOW(UART)
   \   000001C6   ....               LDI     R31, (UART) >> 8
   \   000001C8   0FE0               ADD     R30, R16
   \   000001CA   1FF1               ADC     R31, R17
   \   000001CC   0FE4               ADD     R30, R20
   \   000001CE   1FF5               ADC     R31, R21
   \   000001D0   8320               ST      Z, R18
    660              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
   \   000001D2   2F0A               MOV     R16, R26
   \   000001D4   E010               LDI     R17, 0
   \   000001D6   2F10               MOV     R17, R16
   \   000001D8   E000               LDI     R16, 0
   \   000001DA   0F11               LSL     R17
   \   000001DC   01F8               MOVW    R31:R30, R17:R16
   \   000001DE   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001E0   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001E2   8140               LD      R20, Z
   \   000001E4   8151               LDD     R21, Z+1
   \   000001E6   018A               MOVW    R17:R16, R21:R20
   \   000001E8   5F0F               SUBI    R16, 255
   \   000001EA   4F1F               SBCI    R17, 255
   \   000001EC   2F2A               MOV     R18, R26
   \   000001EE   E030               LDI     R19, 0
   \   000001F0   2F32               MOV     R19, R18
   \   000001F2   E020               LDI     R18, 0
   \   000001F4   0F33               LSL     R19
   \   000001F6   01F9               MOVW    R31:R30, R19:R18
   \   000001F8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000001FA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000001FC   8300               ST      Z, R16
   \   000001FE   8311               STD     Z+1, R17
   \   00000200   018C               MOVW    R17:R16, R25:R24
   \   00000202   2F01               MOV     R16, R17
   \   00000204   0F11               LSL     R17
   \   00000206   0B11               SBC     R17, R17
   \   00000208   2F20               MOV     R18, R16
   \   0000020A   2F0A               MOV     R16, R26
   \   0000020C   E010               LDI     R17, 0
   \   0000020E   2F10               MOV     R17, R16
   \   00000210   E000               LDI     R16, 0
   \   00000212   0F11               LSL     R17
   \   00000214   ....               LDI     R30, LOW(UART)
   \   00000216   ....               LDI     R31, (UART) >> 8
   \   00000218   0FE0               ADD     R30, R16
   \   0000021A   1FF1               ADC     R31, R17
   \   0000021C   0FE4               ADD     R30, R20
   \   0000021E   1FF5               ADC     R31, R21
   \   00000220   8320               ST      Z, R18
    661          #endif
    662              stack = OS_GetStackSpace(&TCB_WATCHDOG);                            // watchdog
   \   00000222   ....               LDI     R16, LOW(TCB_WATCHDOG)
   \   00000224   ....               LDI     R17, (TCB_WATCHDOG) >> 8
   \   00000226   ........           CALL    OS_GetStackSpace
   \   0000022A   01C8               MOVW    R25:R24, R17:R16
    663              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
   \   0000022C   2F0A               MOV     R16, R26
   \   0000022E   E010               LDI     R17, 0
   \   00000230   2F10               MOV     R17, R16
   \   00000232   E000               LDI     R16, 0
   \   00000234   0F11               LSL     R17
   \   00000236   01F8               MOVW    R31:R30, R17:R16
   \   00000238   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000023A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000023C   8140               LD      R20, Z
   \   0000023E   8151               LDD     R21, Z+1
   \   00000240   018A               MOVW    R17:R16, R21:R20
   \   00000242   5F0F               SUBI    R16, 255
   \   00000244   4F1F               SBCI    R17, 255
   \   00000246   2F2A               MOV     R18, R26
   \   00000248   E030               LDI     R19, 0
   \   0000024A   2F32               MOV     R19, R18
   \   0000024C   E020               LDI     R18, 0
   \   0000024E   0F33               LSL     R19
   \   00000250   01F9               MOVW    R31:R30, R19:R18
   \   00000252   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000254   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000256   8300               ST      Z, R16
   \   00000258   8311               STD     Z+1, R17
   \   0000025A   2F28               MOV     R18, R24
   \   0000025C   2F0A               MOV     R16, R26
   \   0000025E   E010               LDI     R17, 0
   \   00000260   2F10               MOV     R17, R16
   \   00000262   E000               LDI     R16, 0
   \   00000264   0F11               LSL     R17
   \   00000266   ....               LDI     R30, LOW(UART)
   \   00000268   ....               LDI     R31, (UART) >> 8
   \   0000026A   0FE0               ADD     R30, R16
   \   0000026C   1FF1               ADC     R31, R17
   \   0000026E   0FE4               ADD     R30, R20
   \   00000270   1FF5               ADC     R31, R21
   \   00000272   8320               ST      Z, R18
    664              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
   \   00000274   2F0A               MOV     R16, R26
   \   00000276   E010               LDI     R17, 0
   \   00000278   2F10               MOV     R17, R16
   \   0000027A   E000               LDI     R16, 0
   \   0000027C   0F11               LSL     R17
   \   0000027E   01F8               MOVW    R31:R30, R17:R16
   \   00000280   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000282   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000284   8140               LD      R20, Z
   \   00000286   8151               LDD     R21, Z+1
   \   00000288   018A               MOVW    R17:R16, R21:R20
   \   0000028A   5F0F               SUBI    R16, 255
   \   0000028C   4F1F               SBCI    R17, 255
   \   0000028E   2F2A               MOV     R18, R26
   \   00000290   E030               LDI     R19, 0
   \   00000292   2F32               MOV     R19, R18
   \   00000294   E020               LDI     R18, 0
   \   00000296   0F33               LSL     R19
   \   00000298   01F9               MOVW    R31:R30, R19:R18
   \   0000029A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000029C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000029E   8300               ST      Z, R16
   \   000002A0   8311               STD     Z+1, R17
   \   000002A2   018C               MOVW    R17:R16, R25:R24
   \   000002A4   2F01               MOV     R16, R17
   \   000002A6   0F11               LSL     R17
   \   000002A8   0B11               SBC     R17, R17
   \   000002AA   2F20               MOV     R18, R16
   \   000002AC   2F0A               MOV     R16, R26
   \   000002AE   E010               LDI     R17, 0
   \   000002B0   2F10               MOV     R17, R16
   \   000002B2   E000               LDI     R16, 0
   \   000002B4   0F11               LSL     R17
   \   000002B6   ....               LDI     R30, LOW(UART)
   \   000002B8   ....               LDI     R31, (UART) >> 8
   \   000002BA   0FE0               ADD     R30, R16
   \   000002BC   1FF1               ADC     R31, R17
   \   000002BE   0FE4               ADD     R30, R20
   \   000002C0   1FF5               ADC     R31, R21
   \   000002C2   8320               ST      Z, R18
    665              switch (UnitID) {
   \   000002C4   9100....           LDS     R16, UnitID
   \   000002C8   5000               SUBI    R16, 0
   \   000002CA   F021               BREQ    ??BuildStackStatus_0
   \   000002CC   950A               DEC     R16
   \   000002CE   F409               BRNE    $+2+2
   \   000002D0   C0A4               RJMP    ??BuildStackStatus_1
   \   000002D2   C13C               RJMP    ??BuildStackStatus_2
    666              case AN_ZB485 :
    667                  stack = OS_GetStackSpace(&TCB_RS485Ctl);                            // RS485 Control
   \                     ??BuildStackStatus_0:
   \   000002D4   ....               LDI     R16, LOW(TCB_RS485Ctl)
   \   000002D6   ....               LDI     R17, (TCB_RS485Ctl) >> 8
   \   000002D8   ........           CALL    OS_GetStackSpace
   \   000002DC   01C8               MOVW    R25:R24, R17:R16
    668                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
   \   000002DE   2F0A               MOV     R16, R26
   \   000002E0   E010               LDI     R17, 0
   \   000002E2   2F10               MOV     R17, R16
   \   000002E4   E000               LDI     R16, 0
   \   000002E6   0F11               LSL     R17
   \   000002E8   01F8               MOVW    R31:R30, R17:R16
   \   000002EA   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000002EC   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000002EE   8140               LD      R20, Z
   \   000002F0   8151               LDD     R21, Z+1
   \   000002F2   018A               MOVW    R17:R16, R21:R20
   \   000002F4   5F0F               SUBI    R16, 255
   \   000002F6   4F1F               SBCI    R17, 255
   \   000002F8   2F2A               MOV     R18, R26
   \   000002FA   E030               LDI     R19, 0
   \   000002FC   2F32               MOV     R19, R18
   \   000002FE   E020               LDI     R18, 0
   \   00000300   0F33               LSL     R19
   \   00000302   01F9               MOVW    R31:R30, R19:R18
   \   00000304   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000306   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000308   8300               ST      Z, R16
   \   0000030A   8311               STD     Z+1, R17
   \   0000030C   2F28               MOV     R18, R24
   \   0000030E   2F0A               MOV     R16, R26
   \   00000310   E010               LDI     R17, 0
   \   00000312   2F10               MOV     R17, R16
   \   00000314   E000               LDI     R16, 0
   \   00000316   0F11               LSL     R17
   \   00000318   ....               LDI     R30, LOW(UART)
   \   0000031A   ....               LDI     R31, (UART) >> 8
   \   0000031C   0FE0               ADD     R30, R16
   \   0000031E   1FF1               ADC     R31, R17
   \   00000320   0FE4               ADD     R30, R20
   \   00000322   1FF5               ADC     R31, R21
   \   00000324   8320               ST      Z, R18
    669                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
   \   00000326   2F0A               MOV     R16, R26
   \   00000328   E010               LDI     R17, 0
   \   0000032A   2F10               MOV     R17, R16
   \   0000032C   E000               LDI     R16, 0
   \   0000032E   0F11               LSL     R17
   \   00000330   01F8               MOVW    R31:R30, R17:R16
   \   00000332   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000334   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000336   8140               LD      R20, Z
   \   00000338   8151               LDD     R21, Z+1
   \   0000033A   018A               MOVW    R17:R16, R21:R20
   \   0000033C   5F0F               SUBI    R16, 255
   \   0000033E   4F1F               SBCI    R17, 255
   \   00000340   2F2A               MOV     R18, R26
   \   00000342   E030               LDI     R19, 0
   \   00000344   2F32               MOV     R19, R18
   \   00000346   E020               LDI     R18, 0
   \   00000348   0F33               LSL     R19
   \   0000034A   01F9               MOVW    R31:R30, R19:R18
   \   0000034C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000034E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000350   8300               ST      Z, R16
   \   00000352   8311               STD     Z+1, R17
   \   00000354   018C               MOVW    R17:R16, R25:R24
   \   00000356   2F01               MOV     R16, R17
   \   00000358   0F11               LSL     R17
   \   0000035A   0B11               SBC     R17, R17
   \   0000035C   2F20               MOV     R18, R16
   \   0000035E   2F0A               MOV     R16, R26
   \   00000360   E010               LDI     R17, 0
   \   00000362   2F10               MOV     R17, R16
   \   00000364   E000               LDI     R16, 0
   \   00000366   0F11               LSL     R17
   \   00000368   ....               LDI     R30, LOW(UART)
   \   0000036A   ....               LDI     R31, (UART) >> 8
   \   0000036C   0FE0               ADD     R30, R16
   \   0000036E   1FF1               ADC     R31, R17
   \   00000370   0FE4               ADD     R30, R20
   \   00000372   1FF5               ADC     R31, R21
   \   00000374   8320               ST      Z, R18
    670                  stack = OS_GetStackSpace(&TCB_RS485Rec);                            // RS485 receive
   \   00000376   ....               LDI     R16, LOW(TCB_RS485Rec)
   \   00000378   ....               LDI     R17, (TCB_RS485Rec) >> 8
   \   0000037A   ........           CALL    OS_GetStackSpace
   \   0000037E   01C8               MOVW    R25:R24, R17:R16
    671                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
   \   00000380   2F0A               MOV     R16, R26
   \   00000382   E010               LDI     R17, 0
   \   00000384   2F10               MOV     R17, R16
   \   00000386   E000               LDI     R16, 0
   \   00000388   0F11               LSL     R17
   \   0000038A   01F8               MOVW    R31:R30, R17:R16
   \   0000038C   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000038E   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000390   8140               LD      R20, Z
   \   00000392   8151               LDD     R21, Z+1
   \   00000394   018A               MOVW    R17:R16, R21:R20
   \   00000396   5F0F               SUBI    R16, 255
   \   00000398   4F1F               SBCI    R17, 255
   \   0000039A   2F2A               MOV     R18, R26
   \   0000039C   E030               LDI     R19, 0
   \   0000039E   2F32               MOV     R19, R18
   \   000003A0   E020               LDI     R18, 0
   \   000003A2   0F33               LSL     R19
   \   000003A4   01F9               MOVW    R31:R30, R19:R18
   \   000003A6   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000003A8   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000003AA   8300               ST      Z, R16
   \   000003AC   8311               STD     Z+1, R17
   \   000003AE   2F28               MOV     R18, R24
   \   000003B0   2F0A               MOV     R16, R26
   \   000003B2   E010               LDI     R17, 0
   \   000003B4   2F10               MOV     R17, R16
   \   000003B6   E000               LDI     R16, 0
   \   000003B8   0F11               LSL     R17
   \   000003BA   ....               LDI     R30, LOW(UART)
   \   000003BC   ....               LDI     R31, (UART) >> 8
   \   000003BE   0FE0               ADD     R30, R16
   \   000003C0   1FF1               ADC     R31, R17
   \   000003C2   0FE4               ADD     R30, R20
   \   000003C4   1FF5               ADC     R31, R21
   \   000003C6   8320               ST      Z, R18
    672                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
   \   000003C8   2F0A               MOV     R16, R26
   \   000003CA   E010               LDI     R17, 0
   \   000003CC   2F10               MOV     R17, R16
   \   000003CE   E000               LDI     R16, 0
   \   000003D0   0F11               LSL     R17
   \   000003D2   01F8               MOVW    R31:R30, R17:R16
   \   000003D4   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000003D6   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000003D8   8140               LD      R20, Z
   \   000003DA   8151               LDD     R21, Z+1
   \   000003DC   018A               MOVW    R17:R16, R21:R20
   \   000003DE   5F0F               SUBI    R16, 255
   \   000003E0   4F1F               SBCI    R17, 255
   \   000003E2   2F2A               MOV     R18, R26
   \   000003E4   E030               LDI     R19, 0
   \   000003E6   2F32               MOV     R19, R18
   \   000003E8   E020               LDI     R18, 0
   \   000003EA   0F33               LSL     R19
   \   000003EC   01F9               MOVW    R31:R30, R19:R18
   \   000003EE   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000003F0   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000003F2   8300               ST      Z, R16
   \   000003F4   8311               STD     Z+1, R17
   \   000003F6   018C               MOVW    R17:R16, R25:R24
   \   000003F8   2F01               MOV     R16, R17
   \   000003FA   0F11               LSL     R17
   \   000003FC   0B11               SBC     R17, R17
   \   000003FE   2F20               MOV     R18, R16
   \   00000400   2F0A               MOV     R16, R26
   \   00000402   E010               LDI     R17, 0
   \   00000404   2F10               MOV     R17, R16
   \   00000406   E000               LDI     R16, 0
   \   00000408   0F11               LSL     R17
   \   0000040A   ....               LDI     R30, LOW(UART)
   \   0000040C   ....               LDI     R31, (UART) >> 8
   \   0000040E   0FE0               ADD     R30, R16
   \   00000410   1FF1               ADC     R31, R17
   \   00000412   0FE4               ADD     R30, R20
   \   00000414   1FF5               ADC     R31, R21
   \   00000416   8320               ST      Z, R18
    673                  break;
   \   00000418   C099               RJMP    ??BuildStackStatus_2
    674              case AN_ZBANA :
    675                  stack = OS_GetStackSpace(&TCB_AD7715);                            // AD handling
   \                     ??BuildStackStatus_1:
   \   0000041A   ....               LDI     R16, LOW(TCB_AD7715)
   \   0000041C   ....               LDI     R17, (TCB_AD7715) >> 8
   \   0000041E   ........           CALL    OS_GetStackSpace
   \   00000422   01C8               MOVW    R25:R24, R17:R16
    676                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
   \   00000424   2F0A               MOV     R16, R26
   \   00000426   E010               LDI     R17, 0
   \   00000428   2F10               MOV     R17, R16
   \   0000042A   E000               LDI     R16, 0
   \   0000042C   0F11               LSL     R17
   \   0000042E   01F8               MOVW    R31:R30, R17:R16
   \   00000430   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000432   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000434   8140               LD      R20, Z
   \   00000436   8151               LDD     R21, Z+1
   \   00000438   018A               MOVW    R17:R16, R21:R20
   \   0000043A   5F0F               SUBI    R16, 255
   \   0000043C   4F1F               SBCI    R17, 255
   \   0000043E   2F2A               MOV     R18, R26
   \   00000440   E030               LDI     R19, 0
   \   00000442   2F32               MOV     R19, R18
   \   00000444   E020               LDI     R18, 0
   \   00000446   0F33               LSL     R19
   \   00000448   01F9               MOVW    R31:R30, R19:R18
   \   0000044A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000044C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000044E   8300               ST      Z, R16
   \   00000450   8311               STD     Z+1, R17
   \   00000452   2F28               MOV     R18, R24
   \   00000454   2F0A               MOV     R16, R26
   \   00000456   E010               LDI     R17, 0
   \   00000458   2F10               MOV     R17, R16
   \   0000045A   E000               LDI     R16, 0
   \   0000045C   0F11               LSL     R17
   \   0000045E   ....               LDI     R30, LOW(UART)
   \   00000460   ....               LDI     R31, (UART) >> 8
   \   00000462   0FE0               ADD     R30, R16
   \   00000464   1FF1               ADC     R31, R17
   \   00000466   0FE4               ADD     R30, R20
   \   00000468   1FF5               ADC     R31, R21
   \   0000046A   8320               ST      Z, R18
    677                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
   \   0000046C   2F0A               MOV     R16, R26
   \   0000046E   E010               LDI     R17, 0
   \   00000470   2F10               MOV     R17, R16
   \   00000472   E000               LDI     R16, 0
   \   00000474   0F11               LSL     R17
   \   00000476   01F8               MOVW    R31:R30, R17:R16
   \   00000478   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000047A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000047C   8140               LD      R20, Z
   \   0000047E   8151               LDD     R21, Z+1
   \   00000480   018A               MOVW    R17:R16, R21:R20
   \   00000482   5F0F               SUBI    R16, 255
   \   00000484   4F1F               SBCI    R17, 255
   \   00000486   2F2A               MOV     R18, R26
   \   00000488   E030               LDI     R19, 0
   \   0000048A   2F32               MOV     R19, R18
   \   0000048C   E020               LDI     R18, 0
   \   0000048E   0F33               LSL     R19
   \   00000490   01F9               MOVW    R31:R30, R19:R18
   \   00000492   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000494   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000496   8300               ST      Z, R16
   \   00000498   8311               STD     Z+1, R17
   \   0000049A   018C               MOVW    R17:R16, R25:R24
   \   0000049C   2F01               MOV     R16, R17
   \   0000049E   0F11               LSL     R17
   \   000004A0   0B11               SBC     R17, R17
   \   000004A2   2F20               MOV     R18, R16
   \   000004A4   2F0A               MOV     R16, R26
   \   000004A6   E010               LDI     R17, 0
   \   000004A8   2F10               MOV     R17, R16
   \   000004AA   E000               LDI     R16, 0
   \   000004AC   0F11               LSL     R17
   \   000004AE   ....               LDI     R30, LOW(UART)
   \   000004B0   ....               LDI     R31, (UART) >> 8
   \   000004B2   0FE0               ADD     R30, R16
   \   000004B4   1FF1               ADC     R31, R17
   \   000004B6   0FE4               ADD     R30, R20
   \   000004B8   1FF5               ADC     R31, R21
   \   000004BA   8320               ST      Z, R18
    678                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0;
   \   000004BC   2F0A               MOV     R16, R26
   \   000004BE   E010               LDI     R17, 0
   \   000004C0   2F10               MOV     R17, R16
   \   000004C2   E000               LDI     R16, 0
   \   000004C4   0F11               LSL     R17
   \   000004C6   01F8               MOVW    R31:R30, R17:R16
   \   000004C8   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000004CA   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000004CC   8140               LD      R20, Z
   \   000004CE   8151               LDD     R21, Z+1
   \   000004D0   018A               MOVW    R17:R16, R21:R20
   \   000004D2   5F0F               SUBI    R16, 255
   \   000004D4   4F1F               SBCI    R17, 255
   \   000004D6   2F2A               MOV     R18, R26
   \   000004D8   E030               LDI     R19, 0
   \   000004DA   2F32               MOV     R19, R18
   \   000004DC   E020               LDI     R18, 0
   \   000004DE   0F33               LSL     R19
   \   000004E0   01F9               MOVW    R31:R30, R19:R18
   \   000004E2   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   000004E4   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   000004E6   8300               ST      Z, R16
   \   000004E8   8311               STD     Z+1, R17
   \   000004EA   2F0A               MOV     R16, R26
   \   000004EC   E010               LDI     R17, 0
   \   000004EE   2F10               MOV     R17, R16
   \   000004F0   E000               LDI     R16, 0
   \   000004F2   0F11               LSL     R17
   \   000004F4   ....               LDI     R30, LOW(UART)
   \   000004F6   ....               LDI     R31, (UART) >> 8
   \   000004F8   0FE0               ADD     R30, R16
   \   000004FA   1FF1               ADC     R31, R17
   \   000004FC   0FE4               ADD     R30, R20
   \   000004FE   1FF5               ADC     R31, R21
   \   00000500   E000               LDI     R16, 0
   \   00000502   8300               ST      Z, R16
    679                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0;
   \   00000504   2F0A               MOV     R16, R26
   \   00000506   E010               LDI     R17, 0
   \   00000508   2F10               MOV     R17, R16
   \   0000050A   E000               LDI     R16, 0
   \   0000050C   0F11               LSL     R17
   \   0000050E   01F8               MOVW    R31:R30, R17:R16
   \   00000510   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   00000512   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   00000514   8140               LD      R20, Z
   \   00000516   8151               LDD     R21, Z+1
   \   00000518   018A               MOVW    R17:R16, R21:R20
   \   0000051A   5F0F               SUBI    R16, 255
   \   0000051C   4F1F               SBCI    R17, 255
   \   0000051E   2F2A               MOV     R18, R26
   \   00000520   E030               LDI     R19, 0
   \   00000522   2F32               MOV     R19, R18
   \   00000524   E020               LDI     R18, 0
   \   00000526   0F33               LSL     R19
   \   00000528   01F9               MOVW    R31:R30, R19:R18
   \   0000052A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000052C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000052E   8300               ST      Z, R16
   \   00000530   8311               STD     Z+1, R17
   \   00000532   2F0A               MOV     R16, R26
   \   00000534   E010               LDI     R17, 0
   \   00000536   2F10               MOV     R17, R16
   \   00000538   E000               LDI     R16, 0
   \   0000053A   0F11               LSL     R17
   \   0000053C   ....               LDI     R30, LOW(UART)
   \   0000053E   ....               LDI     R31, (UART) >> 8
   \   00000540   0FE0               ADD     R30, R16
   \   00000542   1FF1               ADC     R31, R17
   \   00000544   0FE4               ADD     R30, R20
   \   00000546   1FF5               ADC     R31, R21
   \   00000548   E000               LDI     R16, 0
   \   0000054A   8300               ST      Z, R16
    680                  break;
    681              }
    682          
    683              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??BuildStackStatus_2:
   \   0000054C   2F0A               MOV     R16, R26
   \   0000054E   E010               LDI     R17, 0
   \   00000550   2F10               MOV     R17, R16
   \   00000552   E000               LDI     R16, 0
   \   00000554   0F11               LSL     R17
   \   00000556   01F8               MOVW    R31:R30, R17:R16
   \   00000558   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000055A   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000055C   8100               LD      R16, Z
   \   0000055E   8111               LDD     R17, Z+1
   \   00000560   2D14               MOV     R17, R4
   \   00000562   1B01               SUB     R16, R17
   \   00000564   5002               SUBI    R16, 2
   \   00000566   2F2A               MOV     R18, R26
   \   00000568   E030               LDI     R19, 0
   \   0000056A   2F32               MOV     R19, R18
   \   0000056C   E020               LDI     R18, 0
   \   0000056E   0F33               LSL     R19
   \   00000570   ....               LDI     R30, LOW(UART)
   \   00000572   ....               LDI     R31, (UART) >> 8
   \   00000574   0FE2               ADD     R30, R18
   \   00000576   1FF3               ADC     R31, R19
   \   00000578   0DE4               ADD     R30, R4
   \   0000057A   1DF5               ADC     R31, R5
   \   0000057C   8300               ST      Z, R16
    684              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   0000057E   2F0A               MOV     R16, R26
   \   00000580   E010               LDI     R17, 0
   \   00000582   2F10               MOV     R17, R16
   \   00000584   E000               LDI     R16, 0
   \   00000586   0F11               LSL     R17
   \   00000588   01F8               MOVW    R31:R30, R17:R16
   \   0000058A   ....               SUBI    R30, LOW((-(UART + 275) & 0xFFFF))
   \   0000058C   ....               SBCI    R31, HIGH((-(UART + 275) & 0xFFFF))
   \   0000058E   8100               LD      R16, Z
   \   00000590   8111               LDD     R17, Z+1
   \   00000592   1904               SUB     R16, R4
   \   00000594   0915               SBC     R17, R5
   \   00000596   5002               SUBI    R16, 2
   \   00000598   4010               SBCI    R17, 0
   \   0000059A   2F01               MOV     R16, R17
   \   0000059C   E010               LDI     R17, 0
   \   0000059E   2F20               MOV     R18, R16
   \   000005A0   ....               LDI     R30, LOW((UART + 1))
   \   000005A2   ....               LDI     R31, HIGH((UART + 1))
   \   000005A4   0DE4               ADD     R30, R4
   \   000005A6   1DF5               ADC     R31, R5
   \   000005A8   2F0A               MOV     R16, R26
   \   000005AA   E010               LDI     R17, 0
   \   000005AC   2F10               MOV     R17, R16
   \   000005AE   E000               LDI     R16, 0
   \   000005B0   0F11               LSL     R17
   \   000005B2   0FE0               ADD     R30, R16
   \   000005B4   1FF1               ADC     R31, R17
   \   000005B6   8320               ST      Z, R18
    685          
    686          }
   \   000005B8   E0E8               LDI     R30, 8
   \   000005BA   ........           JMP     ?EPILOGUE_B8_L09
    687          
    688          //////////////////////////////////////////////////////////////////////////////
    689          // Receiving data to IO module here
    690          /////////////////////////////////////////////////////////////////////////////
    691          
    692          /*************************************************************************
    693          *
    694          * Receive Command to Reset the EEPROM
    695          *
    696          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    697          void GetResetEEPROM(char ch, short pointer) {
   \                     GetResetEEPROM:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    698          
    699              EEPROMReset();
   \   00000008   ........           CALL    EEPROMReset
    700          }
   \   0000000C   E0E3               LDI     R30, 3
   \   0000000E   ........           JMP     ?EPILOGUE_B3_L09
    701          
    702          
    703          /*************************************************************************
    704          *
    705          * Receive Command to go to the bootloader program
    706          *
    707          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    708          void GetGotoBootloader(char ch, short pointer) {
   \                     GetGotoBootloader:
    709          
    710          //    void (*BootApp)(void) = (void(*)())0xF000;
    711          
    712              // 128 -> 1281
    713              /*
    714              while ( (EECR & 1<<EEWE) != 0 ) //chech if EEPROM is ready
    715                  ;
    716              EEARL = (0x0fff & 0xff);
    717              EEARH = (0x0fff >> 8);
    718              EEDR = 0xff;
    719              EECR |= (1<<EEMWE);
    720              EECR |= (1<<EEWE);
    721              while (EECR & (1<<EEWE))
    722                  ;
    723              */
    724              while ((EECR & 1 << EEPE) != 0) //chech if EEPROM is ready
   \                     ??GetGotoBootloader_0:
   \   00000000   99F9               SBIC    0x1F, 0x01
   \   00000002   CFFE               RJMP    ??GetGotoBootloader_0
    725              ;
    726              EEARL = (0x0fff & 0xff);
   \   00000004   EF1F               LDI     R17, 255
   \   00000006   BD11               OUT     0x21, R17
    727              EEARH = (0x0fff >> 8);
   \   00000008   E01F               LDI     R17, 15
   \   0000000A   BD12               OUT     0x22, R17
    728              EEDR = 0xff;
   \   0000000C   EF1F               LDI     R17, 255
   \   0000000E   BD10               OUT     0x20, R17
    729              EECR |= (1 << EEMPE);
   \   00000010   9AFA               SBI     0x1F, 0x02
    730              EECR |= (1 << EEPE);
   \   00000012   9AF9               SBI     0x1F, 0x01
    731              while (EECR & (1 << EEPE))
   \                     ??GetGotoBootloader_1:
   \   00000014   9BF9               SBIS    0x1F, 0x01
   \   00000016   C004               RJMP    ??GetGotoBootloader_2
    732          
    733                  // 128 -> 1281
    734                  // WDTCR = 0x18;               //Start watchdog to genetate restart
    735                  // WDTCR = 0x08;               //Start watchdog to genetate restart
    736              //WDTCSR = 0x18;               //Start watchdog to genetate restart
    737              WDTCSR = 0x08;               //Start watchdog to genetate restart
   \   00000018   E018               LDI     R17, 8
   \   0000001A   9310....           STS     _A_WDTCSR, R17
   \   0000001E   CFFA               RJMP    ??GetGotoBootloader_1
    738          }
   \                     ??GetGotoBootloader_2:
   \   00000020   9508               RET
   \   00000022                      REQUIRE _A_EECR
   \   00000022                      REQUIRE _A_EEAR
   \   00000022                      REQUIRE _A_EEDR
   \   00000022                      REQUIRE _A_WDTCSR
    739          
    740          /*************************************************************************
    741          *
    742          * Receive EEPROM data
    743          *
    744          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    745          void GetEEPROMData(char ch, short pointer) {
   \                     GetEEPROMData:
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    746          
    747              char channel;
    748              int t0;
    749          
    750              channel = UART[ch].pRxBuffer[pointer];
   \   00000008   ....               LDI     R30, LOW((UART + 283))
   \   0000000A   ....               LDI     R31, HIGH((UART + 283))
   \   0000000C   0FEA               ADD     R30, R26
   \   0000000E   1FFB               ADC     R31, R27
   \   00000010   2D04               MOV     R16, R4
   \   00000012   E010               LDI     R17, 0
   \   00000014   2F10               MOV     R17, R16
   \   00000016   E000               LDI     R16, 0
   \   00000018   0F11               LSL     R17
   \   0000001A   0FE0               ADD     R30, R16
   \   0000001C   1FF1               ADC     R31, R17
   \   0000001E   8100               LD      R16, Z
   \   00000020   2E60               MOV     R6, R16
    751              if ((channel >= 0x80) && (UnitID == 0x01)) { // AN-ZBANA
   \   00000022   E800               LDI     R16, 128
   \   00000024   1660               CP      R6, R16
   \   00000026   F408               BRCC    $+2+2
   \   00000028   C040               RJMP    ??GetEEPROMData_0
   \   0000002A   9100....           LDS     R16, UnitID
   \   0000002E   3001               CPI     R16, 1
   \   00000030   F5E1               BRNE    ??GetEEPROMData_0
    752                  *((float *)&TData.Ana.Offset[channel & 0x0f]) = *((float *)&UART[ch].pRxBuffer[pointer + 1]);  //offset
   \   00000032   ....               LDI     R30, LOW((UART + 284))
   \   00000034   ....               LDI     R31, HIGH((UART + 284))
   \   00000036   0FEA               ADD     R30, R26
   \   00000038   1FFB               ADC     R31, R27
   \   0000003A   2D04               MOV     R16, R4
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   2F10               MOV     R17, R16
   \   00000040   E000               LDI     R16, 0
   \   00000042   0F11               LSL     R17
   \   00000044   0FE0               ADD     R30, R16
   \   00000046   1FF1               ADC     R31, R17
   \   00000048   8100               LD      R16, Z
   \   0000004A   8111               LDD     R17, Z+1
   \   0000004C   8122               LDD     R18, Z+2
   \   0000004E   8133               LDD     R19, Z+3
   \   00000050   2D46               MOV     R20, R6
   \   00000052   E050               LDI     R21, 0
   \   00000054   704F               ANDI    R20, 0x0F
   \   00000056   7050               ANDI    R21, 0x00
   \   00000058   0F44               LSL     R20
   \   0000005A   1F55               ROL     R21
   \   0000005C   0F44               LSL     R20
   \   0000005E   1F55               ROL     R21
   \   00000060   01FA               MOVW    R31:R30, R21:R20
   \   00000062   ....               SUBI    R30, LOW((-(TData + 98) & 0xFFFF))
   \   00000064   ....               SBCI    R31, HIGH((-(TData + 98) & 0xFFFF))
   \   00000066   8300               ST      Z, R16
   \   00000068   8311               STD     Z+1, R17
   \   0000006A   8322               STD     Z+2, R18
   \   0000006C   8333               STD     Z+3, R19
    753                  *((float *)&TData.Ana.Gain[channel & 0x0f]) = *((float *)&UART[ch].pRxBuffer[pointer + 5]);  //gain
   \   0000006E   ....               LDI     R30, LOW((UART + 288))
   \   00000070   ....               LDI     R31, HIGH((UART + 288))
   \   00000072   0FEA               ADD     R30, R26
   \   00000074   1FFB               ADC     R31, R27
   \   00000076   2D04               MOV     R16, R4
   \   00000078   E010               LDI     R17, 0
   \   0000007A   2F10               MOV     R17, R16
   \   0000007C   E000               LDI     R16, 0
   \   0000007E   0F11               LSL     R17
   \   00000080   0FE0               ADD     R30, R16
   \   00000082   1FF1               ADC     R31, R17
   \   00000084   8100               LD      R16, Z
   \   00000086   8111               LDD     R17, Z+1
   \   00000088   8122               LDD     R18, Z+2
   \   0000008A   8133               LDD     R19, Z+3
   \   0000008C   2D46               MOV     R20, R6
   \   0000008E   E050               LDI     R21, 0
   \   00000090   704F               ANDI    R20, 0x0F
   \   00000092   7050               ANDI    R21, 0x00
   \   00000094   0F44               LSL     R20
   \   00000096   1F55               ROL     R21
   \   00000098   0F44               LSL     R20
   \   0000009A   1F55               ROL     R21
   \   0000009C   01FA               MOVW    R31:R30, R21:R20
   \   0000009E   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   000000A0   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   000000A2   8300               ST      Z, R16
   \   000000A4   8311               STD     Z+1, R17
   \   000000A6   8322               STD     Z+2, R18
   \   000000A8   8333               STD     Z+3, R19
    754              }
    755              WriteEEPROMBuffer((channel * sizeof(float) * 2), sizeof(float), (char *)&UART[ch].pRxBuffer[pointer + 1]);
   \                     ??GetEEPROMData_0:
   \   000000AA   ....               LDI     R20, LOW((UART + 284))
   \   000000AC   ....               LDI     R21, HIGH((UART + 284))
   \   000000AE   0F4A               ADD     R20, R26
   \   000000B0   1F5B               ADC     R21, R27
   \   000000B2   2D04               MOV     R16, R4
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   2F10               MOV     R17, R16
   \   000000B8   E000               LDI     R16, 0
   \   000000BA   0F11               LSL     R17
   \   000000BC   0F40               ADD     R20, R16
   \   000000BE   1F51               ADC     R21, R17
   \   000000C0   E024               LDI     R18, 4
   \   000000C2   01BA               MOVW    R23:R22, R21:R20
   \   000000C4   2D06               MOV     R16, R6
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   E048               LDI     R20, 8
   \   000000CA   E050               LDI     R21, 0
   \   000000CC   ........           CALL    ?S_EC_MUL_L02
   \   000000D0   01AB               MOVW    R21:R20, R23:R22
   \   000000D2   ........           CALL    WriteEEPROMBuffer
    756              t0 = OS_GetTime();
   \   000000D6   ........           CALL    OS__Gettime
   \   000000DA   01C8               MOVW    R25:R24, R17:R16
    757              do {
    758                  OS_Delay(1);
   \                     ??GetEEPROMData_1:
   \   000000DC   E001               LDI     R16, 1
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   ........           CALL    OS_Delay
    759              }while ((OS_GetTime() - t0) < (sizeof(float) * 9) && !EEPWriteOK);  //8.5 ms programming time
   \   000000E4   ........           CALL    OS__Gettime
   \   000000E8   1B08               SUB     R16, R24
   \   000000EA   0B19               SBC     R17, R25
   \   000000EC   3204               CPI     R16, 36
   \   000000EE   4010               SBCI    R17, 0
   \   000000F0   F420               BRCC    ??GetEEPROMData_2
   \   000000F2   9100....           LDS     R16, EEPWriteOK
   \   000000F6   2300               TST     R16
   \   000000F8   F389               BREQ    ??GetEEPROMData_1
    760              WriteEEPROMBuffer((channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char *)&UART[ch].pRxBuffer[pointer + 5]);
   \                     ??GetEEPROMData_2:
   \   000000FA   ....               LDI     R20, LOW((UART + 288))
   \   000000FC   ....               LDI     R21, HIGH((UART + 288))
   \   000000FE   0F4A               ADD     R20, R26
   \   00000100   1F5B               ADC     R21, R27
   \   00000102   2D04               MOV     R16, R4
   \   00000104   E010               LDI     R17, 0
   \   00000106   2F10               MOV     R17, R16
   \   00000108   E000               LDI     R16, 0
   \   0000010A   0F11               LSL     R17
   \   0000010C   0F40               ADD     R20, R16
   \   0000010E   1F51               ADC     R21, R17
   \   00000110   E024               LDI     R18, 4
   \   00000112   01BA               MOVW    R23:R22, R21:R20
   \   00000114   2D06               MOV     R16, R6
   \   00000116   E010               LDI     R17, 0
   \   00000118   E048               LDI     R20, 8
   \   0000011A   E050               LDI     R21, 0
   \   0000011C   ........           CALL    ?S_EC_MUL_L02
   \   00000120   5F0C               SUBI    R16, 252
   \   00000122   4F1F               SBCI    R17, 255
   \   00000124   01AB               MOVW    R21:R20, R23:R22
   \   00000126   ........           CALL    WriteEEPROMBuffer
    761              t0 = OS_GetTime();
   \   0000012A   ........           CALL    OS__Gettime
   \   0000012E   01C8               MOVW    R25:R24, R17:R16
    762              do {
    763                  OS_Delay(1);
   \                     ??GetEEPROMData_3:
   \   00000130   E001               LDI     R16, 1
   \   00000132   E010               LDI     R17, 0
   \   00000134   ........           CALL    OS_Delay
    764              }while ((OS_GetTime() - t0) < (sizeof(float) * 9) && !EEPWriteOK);
   \   00000138   ........           CALL    OS__Gettime
   \   0000013C   1B08               SUB     R16, R24
   \   0000013E   0B19               SBC     R17, R25
   \   00000140   3204               CPI     R16, 36
   \   00000142   4010               SBCI    R17, 0
   \   00000144   F420               BRCC    ??GetEEPROMData_4
   \   00000146   9100....           LDS     R16, EEPWriteOK
   \   0000014A   2300               TST     R16
   \   0000014C   F389               BREQ    ??GetEEPROMData_3
    765          }
   \                     ??GetEEPROMData_4:
   \   0000014E   E0E7               LDI     R30, 7
   \   00000150   ........           JMP     ?EPILOGUE_B7_L09
    766          
    767          /*************************************************************************
    768          *
    769          * Receive AN-ZB485 setup
    770          *
    771          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    772          void GetRS4Setup(char ch, short pointer) {
   \                     GetRS4Setup:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    773          
    774              TData.RS4.PortUsed = UART[ch].pRxBuffer[pointer];           // Get the setup
   \   00000008   ....               LDI     R30, LOW((UART + 283))
   \   0000000A   ....               LDI     R31, HIGH((UART + 283))
   \   0000000C   0FE8               ADD     R30, R24
   \   0000000E   1FF9               ADC     R31, R25
   \   00000010   2F0A               MOV     R16, R26
   \   00000012   E010               LDI     R17, 0
   \   00000014   2F10               MOV     R17, R16
   \   00000016   E000               LDI     R16, 0
   \   00000018   0F11               LSL     R17
   \   0000001A   0FE0               ADD     R30, R16
   \   0000001C   1FF1               ADC     R31, R17
   \   0000001E   8100               LD      R16, Z
   \   00000020   9300....           STS     TData, R16
    775              TData.RS4.SensorType[0] = UART[ch].pRxBuffer[pointer + 1];       // Get the sensor type
   \   00000024   ....               LDI     R30, LOW((UART + 284))
   \   00000026   ....               LDI     R31, HIGH((UART + 284))
   \   00000028   0FE8               ADD     R30, R24
   \   0000002A   1FF9               ADC     R31, R25
   \   0000002C   2F0A               MOV     R16, R26
   \   0000002E   E010               LDI     R17, 0
   \   00000030   2F10               MOV     R17, R16
   \   00000032   E000               LDI     R16, 0
   \   00000034   0F11               LSL     R17
   \   00000036   0FE0               ADD     R30, R16
   \   00000038   1FF1               ADC     R31, R17
   \   0000003A   8100               LD      R16, Z
   \   0000003C   9300....           STS     (TData + 1), R16
    776              TData.RS4.SensorType[1] = UART[ch].pRxBuffer[pointer + 2];       // Get the sensor type
   \   00000040   ....               LDI     R30, LOW((UART + 285))
   \   00000042   ....               LDI     R31, HIGH((UART + 285))
   \   00000044   0FE8               ADD     R30, R24
   \   00000046   1FF9               ADC     R31, R25
   \   00000048   2F0A               MOV     R16, R26
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   2F10               MOV     R17, R16
   \   0000004E   E000               LDI     R16, 0
   \   00000050   0F11               LSL     R17
   \   00000052   0FE0               ADD     R30, R16
   \   00000054   1FF1               ADC     R31, R17
   \   00000056   8100               LD      R16, Z
   \   00000058   9300....           STS     (TData + 2), R16
    777              WriteEEPROMByte(EEPROM_PORTSETUP, TData.RS4.PortUsed);      // store in EEPROM
   \   0000005C   9120....           LDS     R18, TData
   \   00000060   E002               LDI     R16, 2
   \   00000062   E010               LDI     R17, 0
   \   00000064   ........           CALL    WriteEEPROMByte
    778              WriteEEPROMByte(EEPROM_PORTSETUP + 1, TData.RS4.SensorType[0]);
   \   00000068   9120....           LDS     R18, (TData + 1)
   \   0000006C   E003               LDI     R16, 3
   \   0000006E   E010               LDI     R17, 0
   \   00000070   ........           CALL    WriteEEPROMByte
    779              WriteEEPROMByte(EEPROM_PORTSETUP + 2, TData.RS4.SensorType[1]);
   \   00000074   9120....           LDS     R18, (TData + 2)
   \   00000078   E004               LDI     R16, 4
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   ........           CALL    WriteEEPROMByte
    780              RestartCnt  = 0;
   \   00000080   ....               LDI     R30, LOW(RestartCnt)
   \   00000082   ....               LDI     R31, (RestartCnt) >> 8
   \   00000084   E000               LDI     R16, 0
   \   00000086   8300               ST      Z, R16
   \   00000088   E000               LDI     R16, 0
   \   0000008A   8301               STD     Z+1, R16
    781              SetRS4Port();                                               // Set power on ports
   \   0000008C   ........           CALL    SetRS4Port
    782          }
   \   00000090   E0E3               LDI     R30, 3
   \   00000092   ........           JMP     ?EPILOGUE_B3_L09
   \   00000096                      REQUIRE RestartCnt
    783          
    784          /*************************************************************************
    785          *
    786          * Rceive data fo AD card
    787          *
    788          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    789          void GetADData(char ch, short pointer) {
   \                     GetADData:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01F9               MOVW    R31:R30, R19:R18
    790          
    791              char i, pair;
    792          
    793              if (UART[ch].pRxBuffer[pointer] <= 3) {
   \   00000008   ....               LDI     R26, LOW((UART + 283))
   \   0000000A   ....               LDI     R27, HIGH((UART + 283))
   \   0000000C   0FAE               ADD     R26, R30
   \   0000000E   1FBF               ADC     R27, R31
   \   00000010   2D02               MOV     R16, R2
   \   00000012   E010               LDI     R17, 0
   \   00000014   2F10               MOV     R17, R16
   \   00000016   E000               LDI     R16, 0
   \   00000018   0F11               LSL     R17
   \   0000001A   0FA0               ADD     R26, R16
   \   0000001C   1FB1               ADC     R27, R17
   \   0000001E   910C               LD      R16, X
   \   00000020   3004               CPI     R16, 4
   \   00000022   F410               BRCC    ??GetADData_0
    794                  pair = 0;
   \   00000024   E060               LDI     R22, 0
   \   00000026   C001               RJMP    ??GetADData_1
    795              } else {
    796                  pair = 1;
   \                     ??GetADData_0:
   \   00000028   E061               LDI     R22, 1
    797              }
    798              if (!TData.RS4.ToTargetBuffer[pair][0]) {                                // buffer empty?
   \                     ??GetADData_1:
   \   0000002A   2F06               MOV     R16, R22
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   E540               LDI     R20, 80
   \   00000030   E050               LDI     R21, 0
   \   00000032   ........           CALL    ?S_EC_MUL_L02
   \   00000036   01D8               MOVW    R27:R26, R17:R16
   \   00000038   ....               SUBI    R26, LOW((-(TData + 1268) & 0xFFFF))
   \   0000003A   ....               SBCI    R27, HIGH((-(TData + 1268) & 0xFFFF))
   \   0000003C   910C               LD      R16, X
   \   0000003E   2300               TST     R16
   \   00000040   F009               BREQ    $+2+2
   \   00000042   C067               RJMP    ??GetADData_2
    799                  TData.RS4.ToTargetBuffer[pair][0] = true;                            //  Availible data for AD card
   \   00000044   2F06               MOV     R16, R22
   \   00000046   E010               LDI     R17, 0
   \   00000048   E540               LDI     R20, 80
   \   0000004A   E050               LDI     R21, 0
   \   0000004C   ........           CALL    ?S_EC_MUL_L02
   \   00000050   01D8               MOVW    R27:R26, R17:R16
   \   00000052   ....               SUBI    R26, LOW((-(TData + 1268) & 0xFFFF))
   \   00000054   ....               SBCI    R27, HIGH((-(TData + 1268) & 0xFFFF))
   \   00000056   E001               LDI     R16, 1
   \   00000058   930C               ST      X, R16
    800                  TData.RS4.ToTargetBuffer[pair][1] = UART[ch].pRxBuffer[pointer++];   //  Channel to AD card
   \   0000005A   ....               LDI     R26, LOW((UART + 283))
   \   0000005C   ....               LDI     R27, HIGH((UART + 283))
   \   0000005E   0FAE               ADD     R26, R30
   \   00000060   1FBF               ADC     R27, R31
   \   00000062   2D02               MOV     R16, R2
   \   00000064   E010               LDI     R17, 0
   \   00000066   2F10               MOV     R17, R16
   \   00000068   E000               LDI     R16, 0
   \   0000006A   0F11               LSL     R17
   \   0000006C   0FA0               ADD     R26, R16
   \   0000006E   1FB1               ADC     R27, R17
   \   00000070   913C               LD      R19, X
   \   00000072   2F06               MOV     R16, R22
   \   00000074   E010               LDI     R17, 0
   \   00000076   E540               LDI     R20, 80
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01D8               MOVW    R27:R26, R17:R16
   \   00000080   ....               SUBI    R26, LOW((-(TData + 1269) & 0xFFFF))
   \   00000082   ....               SBCI    R27, HIGH((-(TData + 1269) & 0xFFFF))
   \   00000084   933C               ST      X, R19
   \   00000086   9631               ADIW    R31:R30, 1
    801                  TData.RS4.ToTargetBuffer[pair][2] = UART[ch].pRxBuffer[pointer++];   // nob in datablock
   \   00000088   ....               LDI     R26, LOW((UART + 283))
   \   0000008A   ....               LDI     R27, HIGH((UART + 283))
   \   0000008C   0FAE               ADD     R26, R30
   \   0000008E   1FBF               ADC     R27, R31
   \   00000090   2D02               MOV     R16, R2
   \   00000092   E010               LDI     R17, 0
   \   00000094   2F10               MOV     R17, R16
   \   00000096   E000               LDI     R16, 0
   \   00000098   0F11               LSL     R17
   \   0000009A   0FA0               ADD     R26, R16
   \   0000009C   1FB1               ADC     R27, R17
   \   0000009E   913C               LD      R19, X
   \   000000A0   2F06               MOV     R16, R22
   \   000000A2   E010               LDI     R17, 0
   \   000000A4   E540               LDI     R20, 80
   \   000000A6   E050               LDI     R21, 0
   \   000000A8   ........           CALL    ?S_EC_MUL_L02
   \   000000AC   01D8               MOVW    R27:R26, R17:R16
   \   000000AE   ....               SUBI    R26, LOW((-(TData + 1270) & 0xFFFF))
   \   000000B0   ....               SBCI    R27, HIGH((-(TData + 1270) & 0xFFFF))
   \   000000B2   933C               ST      X, R19
   \   000000B4   9631               ADIW    R31:R30, 1
    802                  for (i = 3; i < TData.RS4.ToTargetBuffer[pair][2] + 3; i++) {
   \   000000B6   E023               LDI     R18, 3
   \                     ??GetADData_3:
   \   000000B8   E030               LDI     R19, 0
   \   000000BA   2F06               MOV     R16, R22
   \   000000BC   E010               LDI     R17, 0
   \   000000BE   E540               LDI     R20, 80
   \   000000C0   E050               LDI     R21, 0
   \   000000C2   ........           CALL    ?S_EC_MUL_L02
   \   000000C6   01D8               MOVW    R27:R26, R17:R16
   \   000000C8   ....               SUBI    R26, LOW((-(TData + 1270) & 0xFFFF))
   \   000000CA   ....               SBCI    R27, HIGH((-(TData + 1270) & 0xFFFF))
   \   000000CC   918C               LD      R24, X
   \   000000CE   E090               LDI     R25, 0
   \   000000D0   9603               ADIW    R25:R24, 3
   \   000000D2   1728               CP      R18, R24
   \   000000D4   0739               CPC     R19, R25
   \   000000D6   F4EC               BRGE    ??GetADData_2
    803                      TData.RS4.ToTargetBuffer[pair][i] = UART[ch].pRxBuffer[pointer++];  //Get the buffer
   \   000000D8   ....               LDI     R26, LOW((UART + 283))
   \   000000DA   ....               LDI     R27, HIGH((UART + 283))
   \   000000DC   0FAE               ADD     R26, R30
   \   000000DE   1FBF               ADC     R27, R31
   \   000000E0   2D02               MOV     R16, R2
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   2F10               MOV     R17, R16
   \   000000E6   E000               LDI     R16, 0
   \   000000E8   0F11               LSL     R17
   \   000000EA   0FA0               ADD     R26, R16
   \   000000EC   1FB1               ADC     R27, R17
   \   000000EE   917C               LD      R23, X
   \   000000F0   ....               LDI     R26, LOW((TData + 1268))
   \   000000F2   ....               LDI     R27, HIGH((TData + 1268))
   \   000000F4   E030               LDI     R19, 0
   \   000000F6   0FA2               ADD     R26, R18
   \   000000F8   1FB3               ADC     R27, R19
   \   000000FA   2F06               MOV     R16, R22
   \   000000FC   E010               LDI     R17, 0
   \   000000FE   E540               LDI     R20, 80
   \   00000100   E050               LDI     R21, 0
   \   00000102   ........           CALL    ?S_EC_MUL_L02
   \   00000106   0FA0               ADD     R26, R16
   \   00000108   1FB1               ADC     R27, R17
   \   0000010A   937C               ST      X, R23
   \   0000010C   9631               ADIW    R31:R30, 1
    804                  }
   \   0000010E   9523               INC     R18
   \   00000110   CFD3               RJMP    ??GetADData_3
    805              }
    806          }
   \                     ??GetADData_2:
   \   00000112   E0E4               LDI     R30, 4
   \   00000114   ........           JMP     ?EPILOGUE_B4_L09
    807          
    808          /*************************************************************************
    809          *
    810          * Receive AN-ZBANA setup
    811          *
    812          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    813          void GetANASetup(char ch, short pointer) {
   \                     GetANASetup:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    814          
    815              TData.Ana.PortUsed = UART[ch].pRxBuffer[pointer] + (UART[ch].pRxBuffer[pointer + 1] << 8);  //Get the setup
   \   00000008   ....               LDI     R30, LOW((UART + 283))
   \   0000000A   ....               LDI     R31, HIGH((UART + 283))
   \   0000000C   0FE8               ADD     R30, R24
   \   0000000E   1FF9               ADC     R31, R25
   \   00000010   2F0A               MOV     R16, R26
   \   00000012   E010               LDI     R17, 0
   \   00000014   2F10               MOV     R17, R16
   \   00000016   E000               LDI     R16, 0
   \   00000018   0F11               LSL     R17
   \   0000001A   0FE0               ADD     R30, R16
   \   0000001C   1FF1               ADC     R31, R17
   \   0000001E   8100               LD      R16, Z
   \   00000020   ....               LDI     R30, LOW((UART + 284))
   \   00000022   ....               LDI     R31, HIGH((UART + 284))
   \   00000024   0FE8               ADD     R30, R24
   \   00000026   1FF9               ADC     R31, R25
   \   00000028   2F2A               MOV     R18, R26
   \   0000002A   E030               LDI     R19, 0
   \   0000002C   2F32               MOV     R19, R18
   \   0000002E   E020               LDI     R18, 0
   \   00000030   0F33               LSL     R19
   \   00000032   0FE2               ADD     R30, R18
   \   00000034   1FF3               ADC     R31, R19
   \   00000036   8110               LD      R17, Z
   \   00000038   ....               LDI     R30, LOW(TData)
   \   0000003A   ....               LDI     R31, (TData) >> 8
   \   0000003C   8300               ST      Z, R16
   \   0000003E   8311               STD     Z+1, R17
    816              WriteEEPROMByte(EEPROM_PORTSETUP, UART[ch].pRxBuffer[pointer]);   // store in EEPROM
   \   00000040   ....               LDI     R30, LOW((UART + 283))
   \   00000042   ....               LDI     R31, HIGH((UART + 283))
   \   00000044   0FE8               ADD     R30, R24
   \   00000046   1FF9               ADC     R31, R25
   \   00000048   2F0A               MOV     R16, R26
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   2F10               MOV     R17, R16
   \   0000004E   E000               LDI     R16, 0
   \   00000050   0F11               LSL     R17
   \   00000052   0FE0               ADD     R30, R16
   \   00000054   1FF1               ADC     R31, R17
   \   00000056   8120               LD      R18, Z
   \   00000058   E002               LDI     R16, 2
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   ........           CALL    WriteEEPROMByte
    817              WriteEEPROMByte(EEPROM_PORTSETUP + 1, UART[ch].pRxBuffer[pointer + 1]);
   \   00000060   ....               LDI     R30, LOW((UART + 284))
   \   00000062   ....               LDI     R31, HIGH((UART + 284))
   \   00000064   0FE8               ADD     R30, R24
   \   00000066   1FF9               ADC     R31, R25
   \   00000068   2F0A               MOV     R16, R26
   \   0000006A   E010               LDI     R17, 0
   \   0000006C   2F10               MOV     R17, R16
   \   0000006E   E000               LDI     R16, 0
   \   00000070   0F11               LSL     R17
   \   00000072   0FE0               ADD     R30, R16
   \   00000074   1FF1               ADC     R31, R17
   \   00000076   8120               LD      R18, Z
   \   00000078   E003               LDI     R16, 3
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   ........           CALL    WriteEEPROMByte
    818              SetAnaPort();                           // set the port on or off
   \   00000080   ........           CALL    SetAnaPort
    819          }
   \   00000084   E0E3               LDI     R30, 3
   \   00000086   ........           JMP     ?EPILOGUE_B3_L09
    820          
    821          /*************************************************************************
    822          *
    823          * Receive AN-ZBANA filter
    824          *
    825          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    826          void GetANAFilter(char ch, short pointer) {
   \                     GetANAFilter:
    827              char port;
    828          
    829              for (port = 0; port < 12; port++) {
   \   00000000   E040               LDI     R20, 0
   \                     ??GetANAFilter_0:
   \   00000002   304C               CPI     R20, 12
   \   00000004   F4A8               BRCC    ??GetANAFilter_1
    830                  TData.Ana.Filter[port] = UART[ch].pRxBuffer[pointer++];  //Get the filter
   \   00000006   ....               LDI     R30, LOW((UART + 283))
   \   00000008   ....               LDI     R31, HIGH((UART + 283))
   \   0000000A   0FE2               ADD     R30, R18
   \   0000000C   1FF3               ADC     R31, R19
   \   0000000E   2F60               MOV     R22, R16
   \   00000010   E070               LDI     R23, 0
   \   00000012   2F76               MOV     R23, R22
   \   00000014   E060               LDI     R22, 0
   \   00000016   0F77               LSL     R23
   \   00000018   0FE6               ADD     R30, R22
   \   0000001A   1FF7               ADC     R31, R23
   \   0000001C   8110               LD      R17, Z
   \   0000001E   E050               LDI     R21, 0
   \   00000020   01FA               MOVW    R31:R30, R21:R20
   \   00000022   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000024   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000026   8312               STD     Z+2, R17
   \   00000028   5F2F               SUBI    R18, 255
   \   0000002A   4F3F               SBCI    R19, 255
    831              }
   \   0000002C   9543               INC     R20
   \   0000002E   CFE9               RJMP    ??GetANAFilter_0
    832          }
   \                     ??GetANAFilter_1:
   \   00000030   9508               RET
    833          
    834          
    835          /*************************************************************************
    836          *
    837          *  Receive data on USARTs
    838          *
    839          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    840          void ReceivePacketUart(char ch) {
   \                     ReceivePacketUart:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F80               MOV     R24, R16
    841          
    842              switch (UART[ch].RxState) {                  // check status
   \   00000006   2F08               MOV     R16, R24
   \   00000008   E010               LDI     R17, 0
   \   0000000A   2F10               MOV     R17, R16
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   0F11               LSL     R17
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   ....               SUBI    R30, LOW((-(UART + 439) & 0xFFFF))
   \   00000014   ....               SBCI    R31, HIGH((-(UART + 439) & 0xFFFF))
   \   00000016   8100               LD      R16, Z
   \   00000018   5000               SUBI    R16, 0
   \   0000001A   F049               BREQ    ??ReceivePacketUart_0
   \   0000001C   950A               DEC     R16
   \   0000001E   F041               BREQ    ??ReceivePacketUart_1
   \   00000020   950A               DEC     R16
   \   00000022   F409               BRNE    $+2+2
   \   00000024   C09C               RJMP    ??ReceivePacketUart_2
   \   00000026   5008               SUBI    R16, 8
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C143               RJMP    ??ReceivePacketUart_3
   \   0000002C   C13F               RJMP    ??ReceivePacketUart_4
    843              case SYNC :
    844                  // all functionallity in inerrupt routine
    845                  break;
   \                     ??ReceivePacketUart_0:
   \   0000002E   C141               RJMP    ??ReceivePacketUart_3
    846              case HEADER :
    847                  if (UART[ch].RxLast >= 6) {             // receive header
   \                     ??ReceivePacketUart_1:
   \   00000030   2F08               MOV     R16, R24
   \   00000032   E010               LDI     R17, 0
   \   00000034   2F10               MOV     R17, R16
   \   00000036   E000               LDI     R16, 0
   \   00000038   0F11               LSL     R17
   \   0000003A   01F8               MOVW    R31:R30, R17:R16
   \   0000003C   ....               SUBI    R30, LOW((-(UART + 435) & 0xFFFF))
   \   0000003E   ....               SBCI    R31, HIGH((-(UART + 435) & 0xFFFF))
   \   00000040   81A0               LD      R26, Z
   \   00000042   81B1               LDD     R27, Z+1
   \   00000044   9716               SBIW    R27:R26, 6
   \   00000046   F408               BRCC    $+2+2
   \   00000048   C134               RJMP    ??ReceivePacketUart_3
    848                      UART[ch].RxPacklen = (UART[ch].pRxBuffer[4] + (UART[ch].pRxBuffer[5] * 256)); // Find length of package
   \   0000004A   2F08               MOV     R16, R24
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   2F10               MOV     R17, R16
   \   00000050   E000               LDI     R16, 0
   \   00000052   0F11               LSL     R17
   \   00000054   01F8               MOVW    R31:R30, R17:R16
   \   00000056   ....               SUBI    R30, LOW((-(UART + 287) & 0xFFFF))
   \   00000058   ....               SBCI    R31, HIGH((-(UART + 287) & 0xFFFF))
   \   0000005A   8120               LD      R18, Z
   \   0000005C   E030               LDI     R19, 0
   \   0000005E   2F08               MOV     R16, R24
   \   00000060   E010               LDI     R17, 0
   \   00000062   2F10               MOV     R17, R16
   \   00000064   E000               LDI     R16, 0
   \   00000066   0F11               LSL     R17
   \   00000068   01F8               MOVW    R31:R30, R17:R16
   \   0000006A   ....               SUBI    R30, LOW((-(UART + 288) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, HIGH((-(UART + 288) & 0xFFFF))
   \   0000006E   8100               LD      R16, Z
   \   00000070   E010               LDI     R17, 0
   \   00000072   2F10               MOV     R17, R16
   \   00000074   E000               LDI     R16, 0
   \   00000076   0F20               ADD     R18, R16
   \   00000078   1F31               ADC     R19, R17
   \   0000007A   2F08               MOV     R16, R24
   \   0000007C   E010               LDI     R17, 0
   \   0000007E   2F10               MOV     R17, R16
   \   00000080   E000               LDI     R16, 0
   \   00000082   0F11               LSL     R17
   \   00000084   01F8               MOVW    R31:R30, R17:R16
   \   00000086   ....               SUBI    R30, LOW((-(UART + 443) & 0xFFFF))
   \   00000088   ....               SBCI    R31, HIGH((-(UART + 443) & 0xFFFF))
   \   0000008A   8320               ST      Z, R18
   \   0000008C   8331               STD     Z+1, R19
    849                      if (CalcDSRxChecksum(ch, 6) && (UART[ch].pRxBuffer[0] == (DEVICE_IO + UnitID))) {
   \   0000008E   E026               LDI     R18, 6
   \   00000090   E030               LDI     R19, 0
   \   00000092   2F08               MOV     R16, R24
   \   00000094   ....               RCALL   CalcDSRxChecksum
   \   00000096   2B01               OR      R16, R17
   \   00000098   F409               BRNE    $+2+2
   \   0000009A   C05D               RJMP    ??ReceivePacketUart_5
   \   0000009C   2F08               MOV     R16, R24
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   2F10               MOV     R17, R16
   \   000000A2   E000               LDI     R16, 0
   \   000000A4   0F11               LSL     R17
   \   000000A6   01F8               MOVW    R31:R30, R17:R16
   \   000000A8   ....               SUBI    R30, LOW((-(UART + 283) & 0xFFFF))
   \   000000AA   ....               SBCI    R31, HIGH((-(UART + 283) & 0xFFFF))
   \   000000AC   8100               LD      R16, Z
   \   000000AE   E010               LDI     R17, 0
   \   000000B0   91E0....           LDS     R30, UnitID
   \   000000B4   E0F0               LDI     R31, 0
   \   000000B6   9670               ADIW    R31:R30, 16
   \   000000B8   170E               CP      R16, R30
   \   000000BA   071F               CPC     R17, R31
   \   000000BC   F009               BREQ    $+2+2
   \   000000BE   C04B               RJMP    ??ReceivePacketUart_5
    850                          // header checksum OK and to me
    851                          if ((UART[ch].RxPacklen < ((short)RXSIZE_UART - UART[ch].RxLast)) && (UART[ch].RxPacklen >= MIN_PACK_LEN)) {    /* chk. header */
   \   000000C0   2F08               MOV     R16, R24
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   2F10               MOV     R17, R16
   \   000000C6   E000               LDI     R16, 0
   \   000000C8   0F11               LSL     R17
   \   000000CA   01F8               MOVW    R31:R30, R17:R16
   \   000000CC   ....               SUBI    R30, LOW((-(UART + 443) & 0xFFFF))
   \   000000CE   ....               SBCI    R31, HIGH((-(UART + 443) & 0xFFFF))
   \   000000D0   8140               LD      R20, Z
   \   000000D2   8151               LDD     R21, Z+1
   \   000000D4   E906               LDI     R16, 150
   \   000000D6   E010               LDI     R17, 0
   \   000000D8   2F28               MOV     R18, R24
   \   000000DA   E030               LDI     R19, 0
   \   000000DC   2F32               MOV     R19, R18
   \   000000DE   E020               LDI     R18, 0
   \   000000E0   0F33               LSL     R19
   \   000000E2   01F9               MOVW    R31:R30, R19:R18
   \   000000E4   ....               SUBI    R30, LOW((-(UART + 435) & 0xFFFF))
   \   000000E6   ....               SBCI    R31, HIGH((-(UART + 435) & 0xFFFF))
   \   000000E8   8120               LD      R18, Z
   \   000000EA   8131               LDD     R19, Z+1
   \   000000EC   1B02               SUB     R16, R18
   \   000000EE   0B13               SBC     R17, R19
   \   000000F0   1740               CP      R20, R16
   \   000000F2   0751               CPC     R21, R17
   \   000000F4   F560               BRCC    ??ReceivePacketUart_6
   \   000000F6   2F08               MOV     R16, R24
   \   000000F8   E010               LDI     R17, 0
   \   000000FA   2F10               MOV     R17, R16
   \   000000FC   E000               LDI     R16, 0
   \   000000FE   0F11               LSL     R17
   \   00000100   01F8               MOVW    R31:R30, R17:R16
   \   00000102   ....               SUBI    R30, LOW((-(UART + 443) & 0xFFFF))
   \   00000104   ....               SBCI    R31, HIGH((-(UART + 443) & 0xFFFF))
   \   00000106   81A0               LD      R26, Z
   \   00000108   81B1               LDD     R27, Z+1
   \   0000010A   9717               SBIW    R27:R26, 7
   \   0000010C   F100               BRCS    ??ReceivePacketUart_6
    852                              UART[ch].RxState = RECEIVE;       // Header ok go to data receive state
   \   0000010E   2F08               MOV     R16, R24
   \   00000110   E010               LDI     R17, 0
   \   00000112   2F10               MOV     R17, R16
   \   00000114   E000               LDI     R16, 0
   \   00000116   0F11               LSL     R17
   \   00000118   01F8               MOVW    R31:R30, R17:R16
   \   0000011A   ....               SUBI    R30, LOW((-(UART + 439) & 0xFFFF))
   \   0000011C   ....               SBCI    R31, HIGH((-(UART + 439) & 0xFFFF))
   \   0000011E   E002               LDI     R16, 2
   \   00000120   8300               ST      Z, R16
    853                              UART[ch].RxCount = UART[ch].RxLast + 1;                     // Set receive counter
   \   00000122   2F08               MOV     R16, R24
   \   00000124   E010               LDI     R17, 0
   \   00000126   2F10               MOV     R17, R16
   \   00000128   E000               LDI     R16, 0
   \   0000012A   0F11               LSL     R17
   \   0000012C   01F8               MOVW    R31:R30, R17:R16
   \   0000012E   ....               SUBI    R30, LOW((-(UART + 435) & 0xFFFF))
   \   00000130   ....               SBCI    R31, HIGH((-(UART + 435) & 0xFFFF))
   \   00000132   81A0               LD      R26, Z
   \   00000134   81B1               LDD     R27, Z+1
   \   00000136   9611               ADIW    R27:R26, 1
   \   00000138   2F08               MOV     R16, R24
   \   0000013A   E010               LDI     R17, 0
   \   0000013C   2F10               MOV     R17, R16
   \   0000013E   E000               LDI     R16, 0
   \   00000140   0F11               LSL     R17
   \   00000142   01F8               MOVW    R31:R30, R17:R16
   \   00000144   ....               SUBI    R30, LOW((-(UART + 437) & 0xFFFF))
   \   00000146   ....               SBCI    R31, HIGH((-(UART + 437) & 0xFFFF))
   \   00000148   83A0               ST      Z, R26
   \   0000014A   83B1               STD     Z+1, R27
   \   0000014C   C0B2               RJMP    ??ReceivePacketUart_3
    854                          } else {
    855                              GoToSyncUART(ch);                     // go to sync modus for recive
   \                     ??ReceivePacketUart_6:
   \   0000014E   2F08               MOV     R16, R24
   \   00000150   ........           CALL    GoToSyncUART
   \   00000154   C0AE               RJMP    ??ReceivePacketUart_3
    856                          }
    857                      } else {
    858                          GoToSyncUART(ch);                     // go to sync modus for recive
   \                     ??ReceivePacketUart_5:
   \   00000156   2F08               MOV     R16, R24
   \   00000158   ........           CALL    GoToSyncUART
    859                      }
    860                  }
    861                  break;
   \   0000015C   C0AA               RJMP    ??ReceivePacketUart_3
    862          
    863              case RECEIVE :
    864                  ++UART[ch].RxCount;
   \                     ??ReceivePacketUart_2:
   \   0000015E   2F08               MOV     R16, R24
   \   00000160   E010               LDI     R17, 0
   \   00000162   2F10               MOV     R17, R16
   \   00000164   E000               LDI     R16, 0
   \   00000166   0F11               LSL     R17
   \   00000168   01F8               MOVW    R31:R30, R17:R16
   \   0000016A   ....               SUBI    R30, LOW((-(UART + 437) & 0xFFFF))
   \   0000016C   ....               SBCI    R31, HIGH((-(UART + 437) & 0xFFFF))
   \   0000016E   8100               LD      R16, Z
   \   00000170   8111               LDD     R17, Z+1
   \   00000172   5F0F               SUBI    R16, 255
   \   00000174   4F1F               SBCI    R17, 255
   \   00000176   8300               ST      Z, R16
   \   00000178   8311               STD     Z+1, R17
    865                  if (UART[ch].RxCount >= UART[ch].RxPacklen) {
   \   0000017A   2F08               MOV     R16, R24
   \   0000017C   E010               LDI     R17, 0
   \   0000017E   2F10               MOV     R17, R16
   \   00000180   E000               LDI     R16, 0
   \   00000182   0F11               LSL     R17
   \   00000184   01F8               MOVW    R31:R30, R17:R16
   \   00000186   ....               SUBI    R30, LOW((-(UART + 437) & 0xFFFF))
   \   00000188   ....               SBCI    R31, HIGH((-(UART + 437) & 0xFFFF))
   \   0000018A   8120               LD      R18, Z
   \   0000018C   8131               LDD     R19, Z+1
   \   0000018E   2F08               MOV     R16, R24
   \   00000190   E010               LDI     R17, 0
   \   00000192   2F10               MOV     R17, R16
   \   00000194   E000               LDI     R16, 0
   \   00000196   0F11               LSL     R17
   \   00000198   01F8               MOVW    R31:R30, R17:R16
   \   0000019A   ....               SUBI    R30, LOW((-(UART + 443) & 0xFFFF))
   \   0000019C   ....               SBCI    R31, HIGH((-(UART + 443) & 0xFFFF))
   \   0000019E   8100               LD      R16, Z
   \   000001A0   8111               LDD     R17, Z+1
   \   000001A2   1720               CP      R18, R16
   \   000001A4   0731               CPC     R19, R17
   \   000001A6   F408               BRCC    $+2+2
   \   000001A8   C084               RJMP    ??ReceivePacketUart_3
    866                      if ((UART[ch].pRxBuffer[UART[ch].RxPacklen - 1]) == ANPRO10_EOT) {
   \   000001AA   ....               LDI     R16, LOW((UART + 282))
   \   000001AC   ....               LDI     R17, HIGH((UART + 282))
   \   000001AE   2F28               MOV     R18, R24
   \   000001B0   E030               LDI     R19, 0
   \   000001B2   2F32               MOV     R19, R18
   \   000001B4   E020               LDI     R18, 0
   \   000001B6   0F33               LSL     R19
   \   000001B8   01F9               MOVW    R31:R30, R19:R18
   \   000001BA   ....               SUBI    R30, LOW((-(UART + 443) & 0xFFFF))
   \   000001BC   ....               SBCI    R31, HIGH((-(UART + 443) & 0xFFFF))
   \   000001BE   8120               LD      R18, Z
   \   000001C0   8131               LDD     R19, Z+1
   \   000001C2   0F02               ADD     R16, R18
   \   000001C4   1F13               ADC     R17, R19
   \   000001C6   2F28               MOV     R18, R24
   \   000001C8   E030               LDI     R19, 0
   \   000001CA   2F32               MOV     R19, R18
   \   000001CC   E020               LDI     R18, 0
   \   000001CE   0F33               LSL     R19
   \   000001D0   0F02               ADD     R16, R18
   \   000001D2   1F13               ADC     R17, R19
   \   000001D4   01F8               MOVW    R31:R30, R17:R16
   \   000001D6   8100               LD      R16, Z
   \   000001D8   3004               CPI     R16, 4
   \   000001DA   F009               BREQ    $+2+2
   \   000001DC   C063               RJMP    ??ReceivePacketUart_7
    867                          if (CalcDSRxChecksum(ch, UART[ch].RxPacklen - 2)) {
   \   000001DE   2F08               MOV     R16, R24
   \   000001E0   E010               LDI     R17, 0
   \   000001E2   2F10               MOV     R17, R16
   \   000001E4   E000               LDI     R16, 0
   \   000001E6   0F11               LSL     R17
   \   000001E8   01F8               MOVW    R31:R30, R17:R16
   \   000001EA   ....               SUBI    R30, LOW((-(UART + 443) & 0xFFFF))
   \   000001EC   ....               SBCI    R31, HIGH((-(UART + 443) & 0xFFFF))
   \   000001EE   8120               LD      R18, Z
   \   000001F0   8131               LDD     R19, Z+1
   \   000001F2   5022               SUBI    R18, 2
   \   000001F4   4030               SBCI    R19, 0
   \   000001F6   2F08               MOV     R16, R24
   \   000001F8   ....               RCALL   CalcDSRxChecksum
   \   000001FA   2B01               OR      R16, R17
   \   000001FC   F409               BRNE    $+2+2
   \   000001FE   C04E               RJMP    ??ReceivePacketUart_8
    868                              if ((UART[ch].pRxBuffer[1] == MyAddress()) ||      // message to me? or
    869                                  (UART[ch].pRxBuffer[1] == 0xff)) {            // broadcast
   \   00000200   ........           CALL    MyAddress
   \   00000204   2F20               MOV     R18, R16
   \   00000206   2F08               MOV     R16, R24
   \   00000208   E010               LDI     R17, 0
   \   0000020A   2F10               MOV     R17, R16
   \   0000020C   E000               LDI     R16, 0
   \   0000020E   0F11               LSL     R17
   \   00000210   01F8               MOVW    R31:R30, R17:R16
   \   00000212   ....               SUBI    R30, LOW((-(UART + 284) & 0xFFFF))
   \   00000214   ....               SBCI    R31, HIGH((-(UART + 284) & 0xFFFF))
   \   00000216   8100               LD      R16, Z
   \   00000218   1702               CP      R16, R18
   \   0000021A   F059               BREQ    ??ReceivePacketUart_9
   \   0000021C   2F08               MOV     R16, R24
   \   0000021E   E010               LDI     R17, 0
   \   00000220   2F10               MOV     R17, R16
   \   00000222   E000               LDI     R16, 0
   \   00000224   0F11               LSL     R17
   \   00000226   01F8               MOVW    R31:R30, R17:R16
   \   00000228   ....               SUBI    R30, LOW((-(UART + 284) & 0xFFFF))
   \   0000022A   ....               SBCI    R31, HIGH((-(UART + 284) & 0xFFFF))
   \   0000022C   8100               LD      R16, Z
   \   0000022E   3F0F               CPI     R16, 255
   \   00000230   F589               BRNE    ??ReceivePacketUart_10
    870                                  hostAddress = UART[ch].pRxBuffer[3];                     // address to sender (host)
   \                     ??ReceivePacketUart_9:
   \   00000232   2F08               MOV     R16, R24
   \   00000234   E010               LDI     R17, 0
   \   00000236   2F10               MOV     R17, R16
   \   00000238   E000               LDI     R16, 0
   \   0000023A   0F11               LSL     R17
   \   0000023C   01F8               MOVW    R31:R30, R17:R16
   \   0000023E   ....               SUBI    R30, LOW((-(UART + 286) & 0xFFFF))
   \   00000240   ....               SBCI    R31, HIGH((-(UART + 286) & 0xFFFF))
   \   00000242   8100               LD      R16, Z
   \   00000244   9300....           STS     hostAddress, R16
    871                                  UART[ch].RxState = HANDLE;                     // Package OK
   \   00000248   2F08               MOV     R16, R24
   \   0000024A   E010               LDI     R17, 0
   \   0000024C   2F10               MOV     R17, R16
   \   0000024E   E000               LDI     R16, 0
   \   00000250   0F11               LSL     R17
   \   00000252   01F8               MOVW    R31:R30, R17:R16
   \   00000254   ....               SUBI    R30, LOW((-(UART + 439) & 0xFFFF))
   \   00000256   ....               SBCI    R31, HIGH((-(UART + 439) & 0xFFFF))
   \   00000258   E00A               LDI     R16, 10
   \   0000025A   8300               ST      Z, R16
    872                                  switch (ch) {
   \   0000025C   2F08               MOV     R16, R24
   \   0000025E   5000               SUBI    R16, 0
   \   00000260   F019               BREQ    ??ReceivePacketUart_11
   \   00000262   950A               DEC     R16
   \   00000264   F061               BREQ    ??ReceivePacketUart_12
   \   00000266   C025               RJMP    ??ReceivePacketUart_3
    873                                  case 0:
    874                                      OS_Use(&UARTSEND);
   \                     ??ReceivePacketUart_11:
   \   00000268   ....               LDI     R16, LOW(UARTSEND)
   \   0000026A   ....               LDI     R17, (UARTSEND) >> 8
   \   0000026C   ........           CALL    OS_Use
    875                                      UsartCheckPackage(0);
   \   00000270   E000               LDI     R16, 0
   \   00000272   ....               RCALL   UsartCheckPackage
    876                                      OS_Unuse(&UARTSEND);
   \   00000274   ....               LDI     R16, LOW(UARTSEND)
   \   00000276   ....               LDI     R17, (UARTSEND) >> 8
   \   00000278   ........           CALL    OS_Unuse
    877                                      break;
   \   0000027C   C01A               RJMP    ??ReceivePacketUart_3
    878                                  case 1:
    879                                      OS_Use(&UARTSEND);
   \                     ??ReceivePacketUart_12:
   \   0000027E   ....               LDI     R16, LOW(UARTSEND)
   \   00000280   ....               LDI     R17, (UARTSEND) >> 8
   \   00000282   ........           CALL    OS_Use
    880                                      UsartCheckPackage(1);
   \   00000286   E001               LDI     R16, 1
   \   00000288   ....               RCALL   UsartCheckPackage
    881                                      OS_Unuse(&UARTSEND);
   \   0000028A   ....               LDI     R16, LOW(UARTSEND)
   \   0000028C   ....               LDI     R17, (UARTSEND) >> 8
   \   0000028E   ........           CALL    OS_Unuse
    882                                      break;
   \   00000292   C00F               RJMP    ??ReceivePacketUart_3
    883                                  }
    884                              } else {
    885                                  GoToSyncUART(ch);                     // go to sync modus for recive
   \                     ??ReceivePacketUart_10:
   \   00000294   2F08               MOV     R16, R24
   \   00000296   ........           CALL    GoToSyncUART
   \   0000029A   C00B               RJMP    ??ReceivePacketUart_3
    886                              }
    887                          } else {
    888                              GoToSyncUART(ch);                     // go to sync modus for recive
   \                     ??ReceivePacketUart_8:
   \   0000029C   2F08               MOV     R16, R24
   \   0000029E   ........           CALL    GoToSyncUART
   \   000002A2   C007               RJMP    ??ReceivePacketUart_3
    889                          }
    890                      } else {
    891                          GoToSyncUART(ch);                     // go to sync modus for recive
   \                     ??ReceivePacketUart_7:
   \   000002A4   2F08               MOV     R16, R24
   \   000002A6   ........           CALL    GoToSyncUART
    892                      }
    893                  }
    894                  break;
   \   000002AA   C003               RJMP    ??ReceivePacketUart_3
    895              case HANDLE :
    896                  break;
    897              default:
    898                  GoToSyncUART(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart_4:
   \   000002AC   2F08               MOV     R16, R24
   \   000002AE   ........           CALL    GoToSyncUART
    899                  break;
    900              }                                                           // end switch
    901              if (++UART[ch].RxLast >= RXSIZE_UART) {                     // check pointer
   \                     ??ReceivePacketUart_3:
   \   000002B2   2F08               MOV     R16, R24
   \   000002B4   E010               LDI     R17, 0
   \   000002B6   2F10               MOV     R17, R16
   \   000002B8   E000               LDI     R16, 0
   \   000002BA   0F11               LSL     R17
   \   000002BC   01F8               MOVW    R31:R30, R17:R16
   \   000002BE   ....               SUBI    R30, LOW((-(UART + 435) & 0xFFFF))
   \   000002C0   ....               SBCI    R31, HIGH((-(UART + 435) & 0xFFFF))
   \   000002C2   81A0               LD      R26, Z
   \   000002C4   81B1               LDD     R27, Z+1
   \   000002C6   9611               ADIW    R27:R26, 1
   \   000002C8   2F08               MOV     R16, R24
   \   000002CA   E010               LDI     R17, 0
   \   000002CC   2F10               MOV     R17, R16
   \   000002CE   E000               LDI     R16, 0
   \   000002D0   0F11               LSL     R17
   \   000002D2   01F8               MOVW    R31:R30, R17:R16
   \   000002D4   ....               SUBI    R30, LOW((-(UART + 435) & 0xFFFF))
   \   000002D6   ....               SBCI    R31, HIGH((-(UART + 435) & 0xFFFF))
   \   000002D8   83A0               ST      Z, R26
   \   000002DA   83B1               STD     Z+1, R27
   \   000002DC   39A6               CPI     R26, 150
   \   000002DE   E000               LDI     R16, 0
   \   000002E0   07B0               CPC     R27, R16
   \   000002E2   F060               BRCS    ??ReceivePacketUart_13
    902                  UART[ch].RxLast = 0;                                     // reset pointer
   \   000002E4   2F08               MOV     R16, R24
   \   000002E6   E010               LDI     R17, 0
   \   000002E8   2F10               MOV     R17, R16
   \   000002EA   E000               LDI     R16, 0
   \   000002EC   0F11               LSL     R17
   \   000002EE   01F8               MOVW    R31:R30, R17:R16
   \   000002F0   ....               SUBI    R30, LOW((-(UART + 435) & 0xFFFF))
   \   000002F2   ....               SBCI    R31, HIGH((-(UART + 435) & 0xFFFF))
   \   000002F4   E000               LDI     R16, 0
   \   000002F6   E010               LDI     R17, 0
   \   000002F8   8300               ST      Z, R16
   \   000002FA   8311               STD     Z+1, R17
    903              }
    904          }
   \                     ??ReceivePacketUart_13:
   \   000002FC   E0E4               LDI     R30, 4
   \   000002FE   ........           JMP     ?EPILOGUE_B4_L09
    905          
    906          
    907          /*************************************************************************
    908          *
    909          * Calculate tx checksum (header and package) using Dallas Semiconductor one-wire CRC
    910          *
    911          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    912          char CalcDSTxChecksum(char ch, unsigned short len) {
   \                     CalcDSTxChecksum:
   \   00000000   2F59               MOV     R21, R25
   \   00000002   2E08               MOV     R0, R24
   \   00000004   2F40               MOV     R20, R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
    913              unsigned short  cnt;
    914              unsigned char   csum;
    915          
    916              csum = 0;
   \   00000008   E000               LDI     R16, 0
    917              for (cnt = 4; cnt < len; cnt++) {
   \   0000000A   E084               LDI     R24, 4
   \   0000000C   E090               LDI     R25, 0
   \                     ??CalcDSTxChecksum_0:
   \   0000000E   1786               CP      R24, R22
   \   00000010   0797               CPC     R25, R23
   \   00000012   F4C0               BRCC    ??CalcDSTxChecksum_1
    918                  csum = crc[csum ^ UART[ch].pTxBuffer[cnt]];
   \   00000014   E010               LDI     R17, 0
   \   00000016   2F24               MOV     R18, R20
   \   00000018   E030               LDI     R19, 0
   \   0000001A   2F32               MOV     R19, R18
   \   0000001C   E020               LDI     R18, 0
   \   0000001E   0F33               LSL     R19
   \   00000020   ....               LDI     R30, LOW(UART)
   \   00000022   ....               LDI     R31, (UART) >> 8
   \   00000024   0FE2               ADD     R30, R18
   \   00000026   1FF3               ADC     R31, R19
   \   00000028   0FE8               ADD     R30, R24
   \   0000002A   1FF9               ADC     R31, R25
   \   0000002C   8120               LD      R18, Z
   \   0000002E   E030               LDI     R19, 0
   \   00000030   2702               EOR     R16, R18
   \   00000032   2713               EOR     R17, R19
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000038   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   0000003A   ....               LDI     R19, (crc) >> 16
   \   0000003C   BF3B               OUT     0x3B, R19
   \   0000003E   9106               ELPM    R16, Z
    919              }
   \   00000040   9601               ADIW    R25:R24, 1
   \   00000042   CFE5               RJMP    ??CalcDSTxChecksum_0
    920              return csum;
   \                     ??CalcDSTxChecksum_1:
   \   00000044   2D80               MOV     R24, R0
   \   00000046   2F95               MOV     R25, R21
   \   00000048   9508               RET
    921          }
    922          
    923          /*************************************************************************
    924          *
    925          * Calculate rx packet checksum (header and package) using Dallas Semiconductor one-wire CRC
    926          *
    927          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    928          short CalcDSRxChecksum(char ch, unsigned short len) {
   \                     CalcDSRxChecksum:
   \   00000000   2F59               MOV     R21, R25
   \   00000002   2E08               MOV     R0, R24
   \   00000004   2F40               MOV     R20, R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
    929          
    930              unsigned short  cnt;
    931              unsigned char   csum;
    932          
    933              csum = 0;
   \   00000008   E020               LDI     R18, 0
    934          
    935              for (cnt = 0; cnt < len; cnt++) {
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
   \                     ??CalcDSRxChecksum_0:
   \   0000000E   1786               CP      R24, R22
   \   00000010   0797               CPC     R25, R23
   \   00000012   F4C8               BRCC    ??CalcDSRxChecksum_1
    936                  csum = crc[csum ^ UART[ch].pRxBuffer[cnt]];
   \   00000014   2F02               MOV     R16, R18
   \   00000016   E010               LDI     R17, 0
   \   00000018   ....               LDI     R30, LOW((UART + 283))
   \   0000001A   ....               LDI     R31, HIGH((UART + 283))
   \   0000001C   0FE8               ADD     R30, R24
   \   0000001E   1FF9               ADC     R31, R25
   \   00000020   2F24               MOV     R18, R20
   \   00000022   E030               LDI     R19, 0
   \   00000024   2F32               MOV     R19, R18
   \   00000026   E020               LDI     R18, 0
   \   00000028   0F33               LSL     R19
   \   0000002A   0FE2               ADD     R30, R18
   \   0000002C   1FF3               ADC     R31, R19
   \   0000002E   8120               LD      R18, Z
   \   00000030   E030               LDI     R19, 0
   \   00000032   2702               EOR     R16, R18
   \   00000034   2713               EOR     R17, R19
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000003A   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   0000003C   ....               LDI     R19, (crc) >> 16
   \   0000003E   BF3B               OUT     0x3B, R19
   \   00000040   9126               ELPM    R18, Z
    937              }
   \   00000042   9601               ADIW    R25:R24, 1
   \   00000044   CFE4               RJMP    ??CalcDSRxChecksum_0
    938              if (csum == UART[ch].pRxBuffer[len]) {
   \                     ??CalcDSRxChecksum_1:
   \   00000046   ....               LDI     R30, LOW((UART + 283))
   \   00000048   ....               LDI     R31, HIGH((UART + 283))
   \   0000004A   0FE6               ADD     R30, R22
   \   0000004C   1FF7               ADC     R31, R23
   \   0000004E   2F04               MOV     R16, R20
   \   00000050   E010               LDI     R17, 0
   \   00000052   2F10               MOV     R17, R16
   \   00000054   E000               LDI     R16, 0
   \   00000056   0F11               LSL     R17
   \   00000058   0FE0               ADD     R30, R16
   \   0000005A   1FF1               ADC     R31, R17
   \   0000005C   8100               LD      R16, Z
   \   0000005E   1720               CP      R18, R16
   \   00000060   F419               BRNE    ??CalcDSRxChecksum_2
    939                  return true;
   \   00000062   E001               LDI     R16, 1
   \   00000064   E010               LDI     R17, 0
   \   00000066   C002               RJMP    ??CalcDSRxChecksum_3
    940              } else {
    941                  return false;
   \                     ??CalcDSRxChecksum_2:
   \   00000068   E000               LDI     R16, 0
   \   0000006A   E010               LDI     R17, 0
   \                     ??CalcDSRxChecksum_3:
   \   0000006C   2D80               MOV     R24, R0
   \   0000006E   2F95               MOV     R25, R21
   \   00000070   9508               RET
    942              }
    943          }
    944          
    945          
    946          /*************************************************************************
    947          *
    948          * Goes to sync mode
    949          *
    950          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    951          __monitor void GoToSyncUART(char ch) {
   \                     GoToSyncUART:
   \   00000000   B74F               IN      R20, 0x3F
   \   00000002   94F8               CLI
    952          
    953              if (ch < 2) {
   \   00000004   3002               CPI     R16, 2
   \   00000006   F500               BRCC    ??GoToSyncUART_0
    954                  UART[ch].SyncCnt = 0;  // ready for sync
   \   00000008   2F20               MOV     R18, R16
   \   0000000A   E030               LDI     R19, 0
   \   0000000C   2F32               MOV     R19, R18
   \   0000000E   E020               LDI     R18, 0
   \   00000010   0F33               LSL     R19
   \   00000012   01F9               MOVW    R31:R30, R19:R18
   \   00000014   ....               SUBI    R30, LOW((-(UART + 440) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART + 440) & 0xFFFF))
   \   00000018   E010               LDI     R17, 0
   \   0000001A   8310               ST      Z, R17
    955                  UART[ch].RxState = SYNC;
   \   0000001C   2F20               MOV     R18, R16
   \   0000001E   E030               LDI     R19, 0
   \   00000020   2F32               MOV     R19, R18
   \   00000022   E020               LDI     R18, 0
   \   00000024   0F33               LSL     R19
   \   00000026   01F9               MOVW    R31:R30, R19:R18
   \   00000028   ....               SUBI    R30, LOW((-(UART + 439) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, HIGH((-(UART + 439) & 0xFFFF))
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   8310               ST      Z, R17
    956                  UART[ch].RxFirst = 0;
   \   00000030   2F20               MOV     R18, R16
   \   00000032   E030               LDI     R19, 0
   \   00000034   2F32               MOV     R19, R18
   \   00000036   E020               LDI     R18, 0
   \   00000038   0F33               LSL     R19
   \   0000003A   01F9               MOVW    R31:R30, R19:R18
   \   0000003C   ....               SUBI    R30, LOW((-(UART + 433) & 0xFFFF))
   \   0000003E   ....               SBCI    R31, HIGH((-(UART + 433) & 0xFFFF))
   \   00000040   E020               LDI     R18, 0
   \   00000042   E030               LDI     R19, 0
   \   00000044   8320               ST      Z, R18
   \   00000046   8331               STD     Z+1, R19
    957              }
    958          }
   \                     ??GoToSyncUART_0:
   \   00000048   BF4F               OUT     0x3F, R20
   \   0000004A   9508               RET

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart>_0`:
   \   00000000   E803               DW      59395
   \   00000002   01                 DB      1
   \   00000003   ....               DW      (??CheckActionUart_25) /2
   \   00000005   ....               DW      (??CheckActionUart_0) /2
   \   00000007   0A                 DB      0xa
   \   00000008   ....               DW      (??CheckActionUart_3) /2
   \   0000000A   0A                 DB      0xa
   \   0000000B   ....               DW      (??CheckActionUart_4) /2
   \   0000000D   32                 DB      0x32
   \   0000000E   ....               DW      (??CheckActionUart_5) /2
   \   00000010   0A                 DB      0xa
   \   00000011   ....               DW      (??CheckActionUart_6) /2
   \   00000013   0A                 DB      0xa
   \   00000014   ....               DW      (??CheckActionUart_7) /2
   \   00000016   0A                 DB      0xa
   \   00000017   ....               DW      (??CheckActionUart_8) /2
   \   00000019   0A                 DB      0xa
   \   0000001A   ....               DW      (??CheckActionUart_10) /2
   \   0000001C   1E                 DB      0x1e
   \   0000001D   ....               DW      (??CheckActionUart_14) /2
   \   0000001F   14                 DB      0x14
   \   00000020   ....               DW      (??CheckActionUart_12) /2
   \   00000022   28                 DB      0x28
   \   00000023   ....               DW      (??CheckActionUart_20) /2
   \   00000025   0A                 DB      0xa
   \   00000026   ....               DW      (??CheckActionUart_21) /2
   \   00000028   0A                 DB      0xa
   \   00000029   ....               DW      (??CheckActionUart_22) /2
   \   0000002B   0A                 DB      0xa
   \   0000002C   ....               DW      (??CheckActionUart_23) /2
   \   0000002E   0A                 DB      0xa
   \   0000002F   ....               DW      (??CheckActionUart_24) /2
   \   00000031   02FE9E             DB      254,0x2,0x9e
   \   00000034   ....               DW      (??CheckActionUart_2) /2
   \   00000036   FB                 DB      251
   \   00000037   00                 DB      0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   BuildADEpromdata
        4      2 ?S_EC_MUL_L02
      4      2   BuildADInt
      1      2   BuildANAFilter
      0      2   BuildANASetup
      7      2   BuildEEPROMData
        7      2   -> ReadEEPROMBuffer
        7      2 ?S_EC_MUL_L02
      8      2   BuildMData485
        8      2 ?S_EC_MUL_L02
      4      2   BuildMDataANA
      4      2   BuildRData485
        4      2 ?S_EC_MUL_L02
      0      2   BuildRS4Setup
      8      2   BuildStackStatus
        8      2   -> OS_GetStackSpace
      6      2   BuildStatusData
        6      2   -> MyAddress
      8      2   BuildWHdata
        8      2   -> OS_LeaveRegion
        8      2 ?S_EC_MUL_L02
      0      2   CalcDSRxChecksum
      0      2   CalcDSTxChecksum
      6      2   CheckActionUart
        6      2   -> BuildADEpromdata
        6      2   -> BuildADInt
        6      2   -> BuildANAFilter
        6      2   -> BuildANASetup
        6      2   -> BuildEEPROMData
        6      2   -> BuildMData485
        6      2   -> BuildMDataANA
        6      2   -> BuildRData485
        6      2   -> BuildRS4Setup
        6      2   -> BuildStackStatus
        6      2   -> BuildStatusData
        6      2   -> BuildWHdata
        6      2   -> GetADData
        6      2   -> GetANAFilter
        6      2   -> GetANASetup
        6      2   -> GetEEPROMData
        6      2   -> GetGotoBootloader
        6      2   -> GetRS4Setup
        6      2   -> GetResetEEPROM
        6      2 ?SS_SHR_L02
        6      2 ?SV_SWITCH_L06
      4      2   GetADData
        4      2 ?S_EC_MUL_L02
      0      2   GetANAFilter
      3      2   GetANASetup
        3      2   -> SetAnaPort
        3      2   -> WriteEEPROMByte
      7      2   GetEEPROMData
        7      2   -> OS_Delay
        7      2   -> OS__Gettime
        7      2   -> WriteEEPROMBuffer
        7      2 ?S_EC_MUL_L02
      0      2   GetGotoBootloader
      3      2   GetRS4Setup
        3      2   -> SetRS4Port
        3      2   -> WriteEEPROMByte
      3      2   GetResetEEPROM
        3      2   -> EEPROMReset
      0      2   GoToSyncUART
      4      2   ReceivePacketUart
        4      2   -> CalcDSRxChecksum
        4      2   -> GoToSyncUART
        4      2   -> MyAddress
        4      2   -> OS_Unuse
        4      2   -> OS_Use
        4      2   -> UsartCheckPackage
      0      2   TimoutUSART0
        0      2   -> GoToSyncUART
        0      2   -> OS_Error
      0      2   TimoutUSART0On
      0      2   TimoutUSART1
        0      2   -> GoToSyncUART
        0      2   -> OS_Error
      0      2   TimoutUSART1On
      1      2   Uart_BuildHeader
        1      2   -> MyAddress
      4      2   Uart_BuildTail
        4      2   -> CalcDSTxChecksum
        4      2   -> OS_Error
        4      2   -> OS_RetriggerTimer
        4      2   -> Uart_BuildHeader
      4      2   UsartCheckPackage
        4      2   -> CheckActionUart
        4      2   -> GoToSyncUART
        4      2   -> Uart_BuildTail


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      56  ?<Jumptable for CheckActionUart>_0
       1  BootloaderRevision
     438  BuildADEpromdata
     522  BuildADInt
     416  BuildANAFilter
     482  BuildANASetup
     620  BuildEEPROMData
    1636  BuildMData485
     600  BuildMDataANA
     704  BuildRData485
     538  BuildRS4Setup
    1470  BuildStackStatus
    1416  BuildStatusData
     948  BuildWHdata
     114  CalcDSRxChecksum
      74  CalcDSTxChecksum
     518  CheckActionUart
     280  GetADData
      50  GetANAFilter
     138  GetANASetup
     340  GetEEPROMData
      34  GetGotoBootloader
     150  GetRS4Setup
      18  GetResetEEPROM
      76  GoToSyncUART
     770  ReceivePacketUart
       2  RestartCnt
      86  TimoutUSART0
      12  TimoutUSART0On
      86  TimoutUSART1
      12  TimoutUSART1On
     340  Uart_BuildHeader
     868  Uart_BuildTail
     206  UsartCheckPackage
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_PORTE
       1  _A_UCSR0B
       1  _A_UCSR1B
       1  _A_WDTCSR

 
     11 bytes in segment ABSOLUTE
 13 962 bytes in segment CODE
     56 bytes in segment SWITCH
 
 14 018 bytes of CODE memory
      0 bytes of DATA memory (+ 11 bytes shared)

Errors: none
Warnings: none
