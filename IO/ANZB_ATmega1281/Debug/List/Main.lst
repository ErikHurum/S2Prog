###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       15/Feb/2024  16:44:03
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\Main.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW4B5B.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\Main.c"
#        --cpu=m1281 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\Obj" -D
#        OS_LIBMODE_D -D OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D
#        USE_1281_RX_INT_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=1 -D
#        __ATMEGA_1281__ -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\List" -y
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\List\Main.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\Main.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\Main.c
      1          /**********************************************************
      2          *  
      3          *   Main file for AN-ZB* program       
      4          *  
      5          ***********************************************************/
      6          
      7          #include "iom1281.h"
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "variables.h"

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char UnitID
   \                     UnitID:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char RestartStatus
   \                     RestartStatus:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char volatile PortPair
   \                     PortPair:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   UARTCPUDataType UART[2]
   \                     UART:
   \   00000000                      DS8 1024

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   struct <unnamed> UART16552[2]
   \                     UART16552:
   \   00000000                      DS8 534

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   AnalogInt ADInt
   \                     ADInt:
   \   00000000                      DS8 16

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   TargetData TData
   \                     TData:
   \   00000000                      DS8 1564

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char volatile ADChannel
   \                     ADChannel:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char WriteCount
   \                     WriteCount:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char *__near pWriteBuffer
   \                     pWriteBuffer:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char EEPWriteOK
   \                     EEPWriteOK:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char volatile hostAddress
   \                     hostAddress:
   \   00000000                      DS8 1

   \                                 In  segment FAR_F, align 1, keep-with-next
   \   char const __farflash crc[256]
   \                     crc:
   \   00000000   5E00E2BC3F61       DC8 0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31
   \              83DD9CC2207E
   \              FDA31F      
   \   0000000F   9D4121C3FC7F       DC8 65, 157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96
   \              40A25F1EE301
   \              3EBD60      
   \   0000001E   DC827D23C19F       DC8 130, 220, 35, 125, 159, 193, 66, 28, 254, 160, 225, 191, 93, 3, 128
   \              1C42A0FEBFE1
   \              035D80      
   \   0000002D   3CDEBE6202E0       DC8 222, 60, 98, 190, 224, 2, 92, 223, 129, 99, 61, 124, 34, 192, 158
   \              DF5C63817C3D
   \              C0229E      
   \   0000003C   431DFFA11846       DC8 29, 67, 161, 255, 70, 24, 250, 164, 39, 121, 155, 197, 132, 218, 56
   \              A4FA7927C59B
   \              DA8438      
   \   0000004B   E56659BBDB07       DC8 102, 229, 187, 89, 7, 219, 133, 103, 57, 186, 228, 6, 88, 25, 71
   \              6785BA3906E4
   \              195847      
   \   0000005A   FBA526789AC4       DC8 165, 251, 120, 38, 196, 154, 101, 59, 217, 135, 4, 90, 184, 230
   \              3B6587D95A04
   \              E6B8        
   \   00000068   F9A7451B98C6       DC8 167, 249, 27, 69, 198, 152, 122, 36, 248, 166, 68, 26, 153, 199, 37
   \              247AA6F81A44
   \              C79925      
   \   00000077   3A7B86645BD8       DC8 123, 58, 100, 134, 216, 91, 5, 231, 185, 140, 210, 48, 110, 237
   \              E7058CB930D2
   \              ED6E        
   \   00000085   51B34E0FF210       DC8 179, 81, 15, 78, 16, 242, 172, 47, 113, 147, 205, 17, 79, 173, 243
   \              2FAC937111CD
   \              AD4FF3      
   \   00000094   2E7092CC8DD3       DC8 112, 46, 204, 146, 211, 141, 111, 49, 178, 236, 14, 80, 175, 241
   \              316FECB2500E
   \              F1AF        
   \   000000A2   4D1390CE2C72       DC8 19, 77, 206, 144, 114, 44, 109, 51, 209, 143, 12, 82, 176, 238, 50
   \              336D8FD1520C
   \              EEB032      
   \   000000B1   8E6C53D0EF0D       DC8 108, 142, 208, 83, 13, 239, 177, 240, 174, 76, 18, 145, 207, 45
   \              F0B14CAE9112
   \              2DCF        
   \   000000BF   CA737694AB28       DC8 115, 202, 148, 118, 40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55
   \              17F50849B456
   \              69EA37      
   \   000000CE   8BD50957B5EB       DC8 213, 139, 87, 9, 235, 181, 54, 104, 138, 212, 149, 203, 41, 119
   \              6836D48ACB95
   \              7729        
   \   000000DC   AAF41648B7E9       DC8 244, 170, 72, 22, 233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151
   \              0B55D6886A34
   \              752B97      
   \   000000EB   4AC9F61474A8       DC8 201, 74, 20, 246, 168, 116, 42, 200, 150, 21, 75, 169, 247, 182
   \              C82A1596A94B
   \              B6F7        
   \   000000F9   0AE8D7546B89       DC8 232, 10, 84, 215, 137, 107, 53
   \              35          
     11          #include "version.h"
     12          #include "inavr.h"
     13          #include "string.h"

   \                                 In  segment ABSOLUTE, at 0x21fd
     14          __no_init int  RestartCnt            @0x21FD;
   \                     RestartCnt:
   \   00000000                      DS8 2
     15          __no_init char BootloaderRevision    @0x21FF;
     16          
     17          
     18          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     19          OS_STACKPTR int Stack3[300], Stack10[300], Stack11[300]; /* Task stacks */
   \                     Stack3:
   \   00000000                      DS8 600

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     Stack10:
   \   00000000                      DS8 600

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     Stack11:
   \   00000000                      DS8 600
     20          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     21          OS_TASK     TCB_WATCHDOG, TCB_RS485Ctl, TCB_RS485Rec, TCB_AD7715;               /* Task-control-blocks */
   \                     TCB_WATCHDOG:
   \   00000000                      DS8 33

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TCB_RS485Ctl:
   \   00000000                      DS8 33

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TCB_RS485Rec:
   \   00000000                      DS8 33

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TCB_AD7715:
   \   00000000                      DS8 33

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     22          OS_RSEMA    UARTSEND;
   \                     UARTSEND:
   \   00000000                      DS8 8
     23          #if USE_1281_RX_INT_TASK == 0
     24          OS_STACKPTR int Stack0[200], Stack1[200];
     25          OS_TIMER    TimerUSART0, TimerUSART1;
     26          OS_TASK     TCB_USART0, TCB_USART1;
     27          #endif

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     28          OS_TIMER    TimerUART0, TimerUART1, TimerUSART0On, TimerUSART1On;
   \                     TimerUART0:
   \   00000000                      DS8 10

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TimerUART1:
   \   00000000                      DS8 10

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TimerUSART0On:
   \   00000000                      DS8 10

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TimerUSART1On:
   \   00000000                      DS8 10
     29          
     30          #if USE_MODBUS_PROTOCOL == 1
     31          OS_RSEMA    adc_lock;
     32          OS_RSEMA    rs485_tx_lock[2];
     33          #endif
     34          

   \                                 In  segment CODE, align 2, keep-with-next
     35          unsigned char ReadSignatureRow(unsigned int addr)	{
   \                     ReadSignatureRow:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
     36              return (__AddrToZByteToSPMCR_LPM((void __flash *)(addr), (1 << SPMEN) | (1 << SIGRD)));
   \   00000002   E201               LDI     R16, 33
   \   00000004   BF07               OUT     0x37, R16
   \   00000006   9104               LPM     R16, Z
   \   00000008   9508               RET
     37          }
     38          
     39          
     40          /**********************************************************
     41          *
     42          *       main
     43          *  
     44          * CPU signatures:
     45          * ATmega128 : 0x1E, 0x97, 0x03
     46          * ATmega1280: 0x1E, 0x97, 0x02
     47          * 0x1E=Manufactured by Atmel
     48          * 0x97= Indicates 128Kbyte Flash memory
     49          * Last digit is type of device.
     50          * 
     51          **********************************************************/
     52          
     53          /**********************************************************
     54          *
     55          *       main
     56          *
     57          **********************************************************/
     58          

   \                                 In  segment CODE, align 2, keep-with-next
     59          void main(void) {
   \                     main:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
     60              int SByte1 = ReadSignatureRow(0);
   \   00000004   E000               LDI     R16, 0
   \   00000006   E010               LDI     R17, 0
   \   00000008   ....               RCALL   ReadSignatureRow
   \   0000000A   2E40               MOV     R4, R16
   \   0000000C   2455               CLR     R5
     61              int SByte3 = ReadSignatureRow(2);
   \   0000000E   E002               LDI     R16, 2
   \   00000010   E010               LDI     R17, 0
   \   00000012   ....               RCALL   ReadSignatureRow
   \   00000014   2FA0               MOV     R26, R16
   \   00000016   E0B0               LDI     R27, 0
     62              int SByte5 = ReadSignatureRow(4);
   \   00000018   E004               LDI     R16, 4
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   ....               RCALL   ReadSignatureRow
   \   0000001E   2F80               MOV     R24, R16
   \   00000020   E090               LDI     R25, 0
     63          
     64              __watchdog_reset();               //kick the dog
   \   00000022   95A8               WDR
     65              RestartCnt++;
   \   00000024   ....               LDI     R30, LOW(RestartCnt)
   \   00000026   ....               LDI     R31, (RestartCnt) >> 8
   \   00000028   8100               LD      R16, Z
   \   0000002A   8111               LDD     R17, Z+1
   \   0000002C   5F0F               SUBI    R16, 255
   \   0000002E   4F1F               SBCI    R17, 255
   \   00000030   8300               ST      Z, R16
   \   00000032   8311               STD     Z+1, R17
     66          
     67              
     68              //OS_IncDI();
     69              OS_InitKern();        /* initialize OS                 */
   \   00000034   ........           CALL    OS_InitKern
     70              OS_InitHW();          /* initialize Hardware for OS    */
   \   00000038   ........           CALL    OS_InitHW
     71              InitSystem();           // init the system according to board
   \   0000003C   ........           CALL    InitSystem
     72              //WDT_Prescaler_Change();
     73          #if USE_MODBUS_PROTOCOL == 0
     74              OS_CREATERSEMA(&UARTSEND);                          // semaphore for sending on UARTs
   \   00000040   ....               LDI     R16, LOW(UARTSEND)
   \   00000042   ....               LDI     R17, (UARTSEND) >> 8
   \   00000044   ........           CALL    OS_CreateRSema
     75              // Create timers before tasks
     76          #if USE_1281_RX_INT_TASK == 1
     77          //    OS_CREATETIMER(&TimerUSART0, TimoutUSART0, 200);                 // Start timeout timer RX on
     78          //    OS_CREATETIMER(&TimerUSART1, TimoutUSART1, 200);                 // Start timeout timer RX on
     79          #endif
     80              OS_CREATETIMER(&TimerUSART0On, TimoutUSART0On, 5);                 // Start on timer TX on
   \   00000048   E045               LDI     R20, 5
   \   0000004A   E050               LDI     R21, 0
   \   0000004C   ....               LDI     R18, LOW(TimoutUSART0On/2)
   \   0000004E   ....               LDI     R19, (TimoutUSART0On/2) >> 8
   \   00000050   ....               LDI     R16, LOW(TimerUSART0On)
   \   00000052   ....               LDI     R17, (TimerUSART0On) >> 8
   \   00000054   ........           CALL    OS_CreateTimer
   \   00000058   ....               LDI     R16, LOW(TimerUSART0On)
   \   0000005A   ....               LDI     R17, (TimerUSART0On) >> 8
   \   0000005C   ........           CALL    OS_StartTimer
     81              OS_CREATETIMER(&TimerUSART1On, TimoutUSART1On, 5);                 // Start on timer TX on
   \   00000060   E045               LDI     R20, 5
   \   00000062   E050               LDI     R21, 0
   \   00000064   ....               LDI     R18, LOW(TimoutUSART1On/2)
   \   00000066   ....               LDI     R19, (TimoutUSART1On/2) >> 8
   \   00000068   ....               LDI     R16, LOW(TimerUSART1On)
   \   0000006A   ....               LDI     R17, (TimerUSART1On) >> 8
   \   0000006C   ........           CALL    OS_CreateTimer
   \   00000070   ....               LDI     R16, LOW(TimerUSART1On)
   \   00000072   ....               LDI     R17, (TimerUSART1On) >> 8
   \   00000074   ........           CALL    OS_StartTimer
     82          
     83          #if USE_1281_RX_INT_TASK == 1
     84                  {
     85                    extern void ATMega1281_driver_task_init(void);
     86                    ATMega1281_driver_task_init();
   \   00000078   ........           CALL    ATMega1281_driver_task_init
     87                  }
     88          #else
     89          // Start UART tasks
     90              OS_CREATETASK(&TCB_USART0, "USART0", Usart0Handler, 110, Stack0);
     91              OS_CREATETASK(&TCB_USART1, "USART1", Usart1Handler, 100, Stack1);
     92          #endif
     93          #else
     94              OS_CREATERSEMA(&UARTSEND); // semaphore for sending on UARTs
     95              OS_CREATERSEMA(&adc_lock); // semaphore for sending on UARTs
     96          
     97              OS_CREATERSEMA(&rs485_tx_lock[0]);
     98              OS_CREATERSEMA(&rs485_tx_lock[1]);
     99          
    100              {
    101                extern void modbus_rtu_task_init(void);
    102          
    103                modbus_rtu_task_init();
    104              }
    105          #endif
    106          
    107              switch (UnitID) {                                    // Starting taasks for modules:
   \   0000007C   9100....           LDS     R16, UnitID
   \   00000080   5000               SUBI    R16, 0
   \   00000082   F021               BREQ    ??main_0
   \   00000084   950A               DEC     R16
   \   00000086   F409               BRNE    $+2+2
   \   00000088   C046               RJMP    ??main_1
   \   0000008A   C05A               RJMP    ??main_2
    108              case 0x00:                                          // AN-ZB485 
    109                
    110                  OS_CREATETASK(&TCB_RS485Ctl    , "ExtRS485_Control" , ExtRS485Ctl, 80, Stack10);
   \                     ??main_0:
   \   0000008C   E002               LDI     R16, 2
   \   0000008E   E010               LDI     R17, 0
   \   00000090   931A               ST      -Y, R17
   \   00000092   930A               ST      -Y, R16
   \   00000094   E508               LDI     R16, 88
   \   00000096   E012               LDI     R17, 2
   \   00000098   931A               ST      -Y, R17
   \   0000009A   930A               ST      -Y, R16
   \   0000009C   ....               LDI     R16, LOW(Stack10)
   \   0000009E   ....               LDI     R17, (Stack10) >> 8
   \   000000A0   931A               ST      -Y, R17
   \   000000A2   930A               ST      -Y, R16
   \   000000A4   ....               LDI     R22, LOW(ExtRS485Ctl/2)
   \   000000A6   ....               LDI     R23, (ExtRS485Ctl/2) >> 8
   \   000000A8   E540               LDI     R20, 80
   \   000000AA   ....               LDI     R18, LOW(`?<Constant "ExtRS485_Control">`)
   \   000000AC   ....               LDI     R19, (`?<Constant "ExtRS485_Control">`) >> 8
   \   000000AE   ....               LDI     R16, LOW(TCB_RS485Ctl)
   \   000000B0   ....               LDI     R17, (TCB_RS485Ctl) >> 8
   \   000000B2   ........           CALL    OS_CreateTask_D
    111                  OS_CREATETIMER(&TimerUART0, TimoutUART0, 200);                 // Start timeout timer RX on
   \   000000B6   EC48               LDI     R20, 200
   \   000000B8   E050               LDI     R21, 0
   \   000000BA   ....               LDI     R18, LOW(TimoutUART0/2)
   \   000000BC   ....               LDI     R19, (TimoutUART0/2) >> 8
   \   000000BE   ....               LDI     R16, LOW(TimerUART0)
   \   000000C0   ....               LDI     R17, (TimerUART0) >> 8
   \   000000C2   ........           CALL    OS_CreateTimer
   \   000000C6   ....               LDI     R16, LOW(TimerUART0)
   \   000000C8   ....               LDI     R17, (TimerUART0) >> 8
   \   000000CA   ........           CALL    OS_StartTimer
    112                  OS_CREATETASK(&TCB_RS485Rec, "ExtRS485_Receive", ExtRS485Rec, 90, Stack11);
   \   000000CE   E002               LDI     R16, 2
   \   000000D0   E010               LDI     R17, 0
   \   000000D2   931A               ST      -Y, R17
   \   000000D4   930A               ST      -Y, R16
   \   000000D6   E508               LDI     R16, 88
   \   000000D8   E012               LDI     R17, 2
   \   000000DA   931A               ST      -Y, R17
   \   000000DC   930A               ST      -Y, R16
   \   000000DE   ....               LDI     R16, LOW(Stack11)
   \   000000E0   ....               LDI     R17, (Stack11) >> 8
   \   000000E2   931A               ST      -Y, R17
   \   000000E4   930A               ST      -Y, R16
   \   000000E6   ....               LDI     R22, LOW(ExtRS485Rec/2)
   \   000000E8   ....               LDI     R23, (ExtRS485Rec/2) >> 8
   \   000000EA   E54A               LDI     R20, 90
   \   000000EC   ....               LDI     R18, LOW(`?<Constant "ExtRS485_Receive">`)
   \   000000EE   ....               LDI     R19, (`?<Constant "ExtRS485_Receive">`) >> 8
   \   000000F0   ....               LDI     R16, LOW(TCB_RS485Rec)
   \   000000F2   ....               LDI     R17, (TCB_RS485Rec) >> 8
   \   000000F4   ........           CALL    OS_CreateTask_D
    113                  OS_CREATETIMER(&TimerUART1, TimoutUART1, 200);                 // Start timeout timer RX on
   \   000000F8   EC48               LDI     R20, 200
   \   000000FA   E050               LDI     R21, 0
   \   000000FC   ....               LDI     R18, LOW(TimoutUART1/2)
   \   000000FE   ....               LDI     R19, (TimoutUART1/2) >> 8
   \   00000100   ....               LDI     R16, LOW(TimerUART1)
   \   00000102   ....               LDI     R17, (TimerUART1) >> 8
   \   00000104   ........           CALL    OS_CreateTimer
   \   00000108   ....               LDI     R16, LOW(TimerUART1)
   \   0000010A   ....               LDI     R17, (TimerUART1) >> 8
   \   0000010C   ........           CALL    OS_StartTimer
    114          #if USE_16552_DRIVER_TASK == 1
    115                  {
    116                    extern void _16552_driver_task_init(void);
    117                    _16552_driver_task_init();
   \   00000110   ........           CALL    _16552_driver_task_init
    118                  }
    119          #endif
    120                  break;
   \   00000114   C015               RJMP    ??main_2
    121              case 0x01:                                          // AN-ZBANA 
    122                  OS_CREATETASK(&TCB_AD7715, "AD7715", AD7715,  90, Stack10);
   \                     ??main_1:
   \   00000116   E002               LDI     R16, 2
   \   00000118   E010               LDI     R17, 0
   \   0000011A   931A               ST      -Y, R17
   \   0000011C   930A               ST      -Y, R16
   \   0000011E   E508               LDI     R16, 88
   \   00000120   E012               LDI     R17, 2
   \   00000122   931A               ST      -Y, R17
   \   00000124   930A               ST      -Y, R16
   \   00000126   ....               LDI     R16, LOW(Stack10)
   \   00000128   ....               LDI     R17, (Stack10) >> 8
   \   0000012A   931A               ST      -Y, R17
   \   0000012C   930A               ST      -Y, R16
   \   0000012E   ....               LDI     R22, LOW(AD7715/2)
   \   00000130   ....               LDI     R23, (AD7715/2) >> 8
   \   00000132   E54A               LDI     R20, 90
   \   00000134   ....               LDI     R18, LOW(`?<Constant "AD7715">`)
   \   00000136   ....               LDI     R19, (`?<Constant "AD7715">`) >> 8
   \   00000138   ....               LDI     R16, LOW(TCB_AD7715)
   \   0000013A   ....               LDI     R17, (TCB_AD7715) >> 8
   \   0000013C   ........           CALL    OS_CreateTask_D
    123                  break;
    124              }
    125          
    126              OS_CREATETASK(&TCB_WATCHDOG, "Watch dog", WatchDogHandler, 50, Stack3);
   \                     ??main_2:
   \   00000140   E002               LDI     R16, 2
   \   00000142   E010               LDI     R17, 0
   \   00000144   931A               ST      -Y, R17
   \   00000146   930A               ST      -Y, R16
   \   00000148   E508               LDI     R16, 88
   \   0000014A   E012               LDI     R17, 2
   \   0000014C   931A               ST      -Y, R17
   \   0000014E   930A               ST      -Y, R16
   \   00000150   ....               LDI     R16, LOW(Stack3)
   \   00000152   ....               LDI     R17, (Stack3) >> 8
   \   00000154   931A               ST      -Y, R17
   \   00000156   930A               ST      -Y, R16
   \   00000158   ....               LDI     R22, LOW(WatchDogHandler/2)
   \   0000015A   ....               LDI     R23, (WatchDogHandler/2) >> 8
   \   0000015C   E342               LDI     R20, 50
   \   0000015E   ....               LDI     R18, LOW(`?<Constant "Watch dog">`)
   \   00000160   ....               LDI     R19, (`?<Constant "Watch dog">`) >> 8
   \   00000162   ....               LDI     R16, LOW(TCB_WATCHDOG)
   \   00000164   ....               LDI     R17, (TCB_WATCHDOG) >> 8
   \   00000166   ........           CALL    OS_CreateTask_D
    127              OS_Start();                                         // Start multitasking
   \   0000016A   E001               LDI     R16, 1
   \   0000016C   9300....           STS     OS_Running, R16
   \   00000170   ........           CALL    OS_StartASM
    128          }
   \   00000174   E0E6               LDI     R30, 6
   \   00000176   ........           JMP     ?EPILOGUE_B6_L09
   \   0000017A                      REQUIRE RestartCnt

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "ExtRS485_Control"`:
   \   00000000   784552743453       DC8 "ExtRS485_Control"
   \              3538435F6E6F
   \              72746C6F00  

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "ExtRS485_Receive"`:
   \   00000000   784552743453       DC8 "ExtRS485_Receive"
   \              3538525F6365
   \              6965657600  

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "AD7715">>`:
   \   00000000   444137373531       DC8 "AD7715"
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Watch dog">>`:
   \   00000000   615763742068       DC8 "Watch dog"
   \              6F640067    

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "ExtRS485_Control">`:
   \   00000000                      DS8 17
   \   00000011                      REQUIRE `?<Initializer for <Constant "ExtRS485_Control"`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "ExtRS485_Receive">`:
   \   00000000                      DS8 17
   \   00000011                      REQUIRE `?<Initializer for <Constant "ExtRS485_Receive"`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "AD7715">`:
   \   00000000                      DS8 7
   \   00000007                      REQUIRE `?<Initializer for <Constant "AD7715">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "Watch dog">`:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for <Constant "Watch dog">>`

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   ReadSignatureRow
     12      2   main
        6      2   -> ATMega1281_driver_task_init
        6      2   -> InitSystem
        6      2   -> OS_CreateRSema
        6      2   -> OS_CreateTask_D
        6      2   -> OS_CreateTimer
        6      2   -> OS_InitHW
        6      2   -> OS_InitKern
        6      2   -> OS_StartASM
        6      2   -> OS_StartTimer
        6      2   -> ReadSignatureRow
        6      2   -> _16552_driver_task_init


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "AD7715">
      17  ?<Constant "ExtRS485_Control">
      17  ?<Constant "ExtRS485_Receive">
      10  ?<Constant "Watch dog">
       7  ?<Initializer for <Constant "AD7715">>
      17  ?<Initializer for <Constant "ExtRS485_Control"
      17  ?<Initializer for <Constant "ExtRS485_Receive"
      10  ?<Initializer for <Constant "Watch dog">>
       1  ADChannel
      16  ADInt
       1  EEPWriteOK
       1  PortPair
      10  ReadSignatureRow
       2  RestartCnt
       1  RestartStatus
     600  Stack10
     600  Stack11
     600  Stack3
      33  TCB_AD7715
      33  TCB_RS485Ctl
      33  TCB_RS485Rec
      33  TCB_WATCHDOG
    1564  TData
      10  TimerUART0
      10  TimerUART1
      10  TimerUSART0On
      10  TimerUSART1On
    1024  UART
     534  UART16552
       8  UARTSEND
       1  UnitID
       1  WriteCount
     256  crc
       1  hostAddress
     378  main
       2  pWriteBuffer
      14  -- Other

 
     2 bytes in segment ABSOLUTE
   388 bytes in segment CODE
   256 bytes in segment FAR_F
    14 bytes in segment INITTAB
    51 bytes in segment NEAR_I
    51 bytes in segment NEAR_ID
 5 127 bytes in segment NEAR_Z
 
   695 bytes of CODE memory (+ 14 bytes shared)
 5 178 bytes of DATA memory (+  2 bytes shared)

Errors: none
Warnings: none
