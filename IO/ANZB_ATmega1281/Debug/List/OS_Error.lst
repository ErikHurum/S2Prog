###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       05/Jan/2024  11:23:28
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\OS_Error.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW2D82.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\OS_Error.c"
#        --cpu=m1281 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\Obj" -D
#        OS_LIBMODE_D -D OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D
#        USE_1281_RX_INT_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=0 -D
#        __ATMEGA_1281__ -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\List" -y
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\List\OS_Error.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\OS_Error.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\OS_Error.c
      1          /*********************************************************************
      2          *               SEGGER MICROCONTROLLER GmbH & Co KG                  *
      3          *       Solutions for real time microcontroller applications         *
      4          **********************************************************************
      5          *                                                                    *
      6          *       (c) 1995 - 2012  SEGGER Microcontroller GmbH & Co KG         *
      7          *                                                                    *
      8          *       www.segger.com     Support: support@segger.com               *
      9          *                                                                    *
     10          **********************************************************************
     11          *                                                                    *
     12          *       embOS * Real time operating system for microcontrollers      *
     13          *                                                                    *
     14          *                                                                    *
     15          *       Please note:                                                 *
     16          *                                                                    *
     17          *       Knowledge of this file may under no circumstances            *
     18          *       be used to write a similar product or a real-time            *
     19          *       operating system for in-house use.                           *
     20          *                                                                    *
     21          *       Thank you for your fairness !                                *
     22          *                                                                    *
     23          **********************************************************************
     24          *                                                                    *
     25          *       OS version: 3.86g                                            *
     26          *                                                                    *
     27          **********************************************************************
     28          
     29          ----------------------------------------------------------------------
     30          Licensing information
     31          Licensor:                 SEGGER Microcontroller GmbH
     32          Licensed to:              Scanjet Ariston AS, Moen  12, 3948  Porsgrunn, Norway
     33          Licensed SEGGER software: embOS
     34          License number:           OS-01417
     35          License model:            SOL [Single Developer Single Platform Object Code License]
     36          Licensed product:         -
     37          Licensed platform:        AtMega 128, IAR
     38          Licensed number of seats: 1
     39          ----------------------------------------------------------------------
     40          Support and Update Agreement (SUA)
     41          SUA period:               2022-12-21 - 2023-06-22
     42          Contact to extend SUA:    sales@segger.com
     43          ----------------------------------------------------------------------
     44          File    : OS_Error.c
     45          Purpose : OS error handler. Not required in "R" (release) builds
     46                    Feel free to modify this file acc. to your target system.
     47          --------  END-OF-HEADER  ---------------------------------------------
     48          */
     49          
     50          #include "RTOS.h"
     51          
     52          /*********************************************************************
     53          *
     54          *       Global functions
     55          *
     56          **********************************************************************
     57          */
     58          
     59          /*********************************************************************
     60          *
     61          *       (OS_Error)
     62          *
     63          **********************************************************************
     64          
     65           Run-time error reaction
     66          
     67           When this happens, a fatal error has occured and the kernel
     68           can not continue. In linux, the equivalent would be a
     69           "kernel panic"
     70          
     71           This routine can be modified to suit your needs ...
     72           E.g. a red LED could light up. When using an
     73           emulator, you may set a breakpoint here.
     74           In the release builds of the library (R), this routine is not required
     75           (as no checks are performed).
     76           In the stack check builds (S/SP), only error 120 may occur.
     77           In the debug builds(D/DP), all of the listed errors may occur.
     78          
     79           The following are the current errorcodes:
     80           (Please refer to the documentation for more info)
     81          
     82          *** Port 100..119 ********************************
     83          OS_ERR_ISR_INDEX                      (100 = 0x64)
     84          OS_ERR_ISR_VECTOR                     (101 = 0x65)
     85          OS_ERR_ISR_PRIO                       (102 = 0x66)
     86          OS_ERR_WRONG_STACK                    (103 = 0x67)
     87          OS_ERR_ISR_NO_HANDLER                 (104 = 0x68)  *** No interrupt handler was defined for this interrupt
     88          OS_ERR_TLS_INIT                       (105 = 0x69)  *** OS_TLS_Init() called multiple times from one task
     89          
     90          *** OS generic ***********************************
     91          
     92          OS_ERR_EXTEND_CONTEXT                 (116 = 0x74)  *** OS_ExtendTaskContext called multiple times from one task
     93          OS_ERR_TIMESLICE                      (117 = 0x75)  *** A timeslice value of 0 (illegal) was set.
     94          OS_ERR_INTERNAL                       (118 = 0x76)  *** OS_ChangeTask called without RegionCnt set (or other internal error)
     95          OS_ERR_IDLE_RETURNS                   (119 = 0x77)  *** Idle loop should not return
     96          
     97          *** Stack overflow ******************************
     98          OS_ERR_STACK                          (120 = 0x78)  *** Stack overflow or invalid stack
     99          
    100          *** Counting semaphore overflow ******************
    101          OS_ERR_CSEMA_OVERFLOW                 (121 = 0x79)
    102          
    103          *** Power handling module ************************
    104          OS_ERR_POWER_OVER                     (122 = 0x7A)
    105          OS_ERR_POWER_UNDER                    (123 = 0x7B)
    106          OS_ERR_POWER_INDEX                    (124 = 0x7C)
    107          
    108          *** System/interrupt stack ***********************
    109          OS_ERR_SYS_STACK                      (125 = 0x7D) *** embOS system stack overflow
    110          OS_ERR_INT_STACK                      (126 = 0x7E) *** Interrupt stack overflow
    111          
    112          *** Invalid or non-initialized data structures ***
    113          OS_ERR_INV_TASK                       (128 = 0x80)
    114          OS_ERR_INV_TIMER                      (129 = 0x81)
    115          OS_ERR_INV_MAILBOX                    (130 = 0x82)
    116          OS_ERR_INV_CSEMA                      (132 = 0x84)
    117          OS_ERR_INV_RSEMA                      (133 = 0x85)
    118          
    119          *** Using GetMail1, PutMail1, GetMailCond1 or PutMailCond1
    120          *** on a non-1 byte mailbox  *********************
    121          OS_ERR_MAILBOX_NOT1                   (135 = 0x87)
    122          
    123          *** Waitable objects deleted with waiting tasks or occupied by task ***
    124          OS_ERR_MAILBOX_DELETE                 (136 = 0x88)
    125          OS_ERR_CSEMA_DELETE                   (137 = 0x89)
    126          OS_ERR_RSEMA_DELETE                   (138 = 0x8A)
    127          
    128          *** Internal errors, please contact SEGGER Microcontrollersysteme ***
    129          OS_ERR_MAILBOX_NOT_IN_LIST            (140 = 0x8C)
    130          OS_ERR_TASKLIST_CORRUPT               (142 = 0x8E)
    131          
    132          *** Queue errors *********************************
    133          OS_ERR_QUEUE_INUSE                    (143 = 0x8F)
    134          OS_ERR_QUEUE_NOT_INUSE                (144 = 0x90)
    135          OS_ERR_QUEUE_INVALID                  (145 = 0x91)
    136          OS_ERR_QUEUE_DELETE                   (146 = 0x92)
    137          
    138          *** Not matching routine calls or macro usage ****
    139          OS_ERR_UNUSE_BEFORE_USE               (150 = 0x96)
    140          OS_ERR_LEAVEREGION_BEFORE_ENTERREGION (151 = 0x97)
    141          OS_ERR_LEAVEINT                       (152 = 0x98)
    142          OS_ERR_DICNT                          (153 = 0x99)
    143          OS_ERR_INTERRUPT_DISABLED             (154 = 0x9A)
    144          OS_ERR_TASK_ENDS_WITHOUT_TERMINATE    (155 = 0x9B)
    145          OS_ERR_RESOURCE_OWNER                 (156 = 0x9C)
    146          OS_ERR_REGIONCNT                      (157 = 0x9D)
    147          
    148          *** Not a legal system call during interrupt *****
    149          OS_ERR_ILLEGAL_IN_ISR                 (160 = 0xA0)
    150          
    151          *** Not a legal system call during timer *********
    152          OS_ERR_ILLEGAL_IN_TIMER               (161 = 0xA1)
    153          
    154          *** Not a legal system call outside interrupt ****
    155          OS_ERR_ILLEGAL_OUT_ISR                (162 = 0xA2)
    156          
    157          *** Illegal states or function calls *************
    158          OS_ERR_NOT_IN_ISR                     (163 = 0xA3)  *** OS_EnterInterrupt() has been called, but CPU is not in ISR state
    159          OS_ERR_IN_ISR                         (164 = 0xA4)  *** OS_EnterInterrupt() has not been called, but CPU is in ISR state
    160          
    161          OS_ERR_INIT_NOT_CALLED                (165 = 0xA5)  *** OS_InitKern() was not called
    162          
    163          OS_ERR_CPU_STATE_ISR_ILLEGAL          (166 = 0xA6)  *** OS-function called from ISR with high priority
    164          OS_ERR_CPU_STATE_ILLEGAL              (167 = 0xA7)  *** CPU runs in illegal mode
    165          OS_ERR_CPU_STATE_UNKNOWN              (168 = 0xA8)  *** CPU runs in unknown mode or mode could not be read
    166          
    167          *** Double used data structures **
    168          OS_ERR_2USE_TASK                      (170 = 0xAA)
    169          OS_ERR_2USE_TIMER                     (171 = 0xAB)
    170          OS_ERR_2USE_MAILBOX                   (172 = 0xAC)
    171          OS_ERR_2USE_BSEMA                     (173 = 0xAD)
    172          OS_ERR_2USE_CSEMA                     (174 = 0xAE)
    173          OS_ERR_2USE_RSEMA                     (175 = 0xAF)
    174          OS_ERR_2USE_MEMF                      (176 = 0xB0)
    175          
    176          *** Communication errors (OSCOM) **
    177          OS_ERR_NESTED_RX_INT                  (180 = 0xB4)
    178          
    179          *** Fixed block memory pool  ***
    180          OS_ERR_MEMF_INV                       (190 = 0xBE)
    181          OS_ERR_MEMF_INV_PTR                   (191 = 0xBF)
    182          OS_ERR_MEMF_PTR_FREE                  (192 = 0xC0)
    183          OS_ERR_MEMF_RELEASE                   (193 = 0xC1)
    184          OS_ERR_MEMF_POOLADDR                  (194 = 0xC2)
    185          OS_ERR_MEMF_BLOCKSIZE                 (195 = 0xC3)
    186          
    187          *** Task suspend / resume errors ***
    188          OS_ERR_SUSPEND_TOO_OFTEN              (200 = 0xC8)
    189          OS_ERR_RESUME_BEFORE_SUSPEND          (201 = 0xC9)
    190          
    191          *** Other task related errors ***
    192          OS_ERR_TASK_PRIORITY                  (202 = 0xCA)
    193          
    194          *** Event object ***
    195          OS_ERR_EVENT_INVALID                  (210 = 0xD2)
    196          OS_ERR_EVENT_DELETE                   (212 = 0xD4)
    197          
    198          *** Tick Hook ***
    199          OS_ERR_TICKHOOK_INVALID               (223 = 0xDF)
    200          OS_ERR_TICKHOOK_FUNC_INVALID          (224 = 0xE0)
    201          
    202          *** Cache related ***
    203          OS_ERR_NON_ALIGNED_INVALIDATE         (230 = 0xE6)  *** Cache invalidation needs to be cache line aligned
    204          
    205          *** embOS special build, or internal
    206          OS_ERR_TRIAL_LIMIT                    (254 = 0xFE)
    207          
    208          */
    209          

   \                                 In  segment CODE, align 2, keep-with-next
    210          void OS_Error(int ErrCode) {
   \                     OS_Error:
    211            OS_EnterRegion();      /* Avoid further task switches            */
   \   00000000   9120....           LDS     R18, OS_Global
   \   00000004   9523               INC     R18
   \   00000006   9320....           STS     OS_Global, R18
    212            OS_DICnt = 0u;         /* Allow interrupts so we can communicate */
   \   0000000A   E020               LDI     R18, 0
   \   0000000C   9320....           STS     (OS_Global + 1), R18
    213            OS_EI();
   \   00000010   9478               sei
    214            OS_Status = (OS_U8) ErrCode;
   \   00000012   2F20               MOV     R18, R16
   \   00000014   9320....           STS     OS_Status, R18
    215            while (OS_Status) {
   \                     ??OS_Error_0:
   \   00000018   9120....           LDS     R18, OS_Status
   \   0000001C   2322               TST     R18
   \   0000001E   F7E1               BRNE    ??OS_Error_0
    216              /* Endless loop may be left by setting OS_Status to 0. */
    217            }
    218          }
   \   00000020   9508               RET
    219          
    220          /****** End Of File *************************************************/

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   OS_Error


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      34  OS_Error

 
 34 bytes in segment CODE
 
 34 bytes of CODE memory

Errors: none
Warnings: none
