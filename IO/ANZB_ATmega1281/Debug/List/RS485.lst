###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       15/Feb/2024  16:44:03
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW4B5D.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c"
#        --cpu=m1281 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\Obj" -D
#        OS_LIBMODE_D -D OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D
#        USE_1281_RX_INT_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=1 -D
#        __ATMEGA_1281__ -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\List" -y
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\List\RS485.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\RS485.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c
      1          
      2          /****************************************************************************************
      3          / Uart communication to external ADcards
      4          /
      5          ***************************************************************************************/
      6          
      7          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          
     13          #if USE_MODBUS_PROTOCOL == 1
     14              #include "common_def.h"
     15          
     16          #endif /* USE_MODBUS_PROTOCOL == 1 */
     17          
     18          
     19          /************************************************ *************************
     20          *   (This is a timer calback)
     21          *  Timout timer UART 0
     22          *
     23          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     24          void TimoutUART0(void) {
   \                     TimoutUART0:
     25          
     26              U0_MCR &= ~RTS;      // set RTS off
   \   00000000   E0EC               LDI     R30, LOW(8716)
   \   00000002   E2F2               LDI     R31, (8716) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   7F0D               ANDI    R16, 0xFD
   \   00000008   8300               ST      Z, R16
     27          }
   \   0000000A   9508               RET
     28          
     29          /*************************************************************************
     30          *   (This is a timer calback)
     31          *  Timout timer UART 1
     32          *
     33          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     34          void TimoutUART1(void) {
   \                     TimoutUART1:
     35          
     36              U1_MCR &= ~RTS;       // set RTS off
   \   00000000   E0E4               LDI     R30, LOW(8708)
   \   00000002   E2F2               LDI     R31, (8708) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   7F0D               ANDI    R16, 0xFD
   \   00000008   8300               ST      Z, R16
     37          }
   \   0000000A   9508               RET
     38          
     39          
     40          /*************************************************************************
     41          *   (This is a task)
     42          *  Usart handler UART send request
     43          *
     44          *************************************************************************/
     45          #pragma diag_suppress=Pa082

   \                                 In  segment CODE, align 2, keep-with-next
     46          void ExtRS485Ctl(void) {
   \                     ExtRS485Ctl:
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
     47              char SeqCnt = 0;
   \   00000004   E0A0               LDI     R26, 0
     48              char PowerOnTimer = POWER_ON_CNT;                    // do not make a unwanted power on sequence in the starting phase
   \   00000006   E0B5               LDI     R27, 5
     49              char EventStatus;
     50              char AskMD[2];
     51          
     52          
     53              Init16552(0, 9600);                                      // Init UART channel 0
   \   00000008   E840               LDI     R20, 128
   \   0000000A   E255               LDI     R21, 37
   \   0000000C   E060               LDI     R22, 0
   \   0000000E   E070               LDI     R23, 0
   \   00000010   E000               LDI     R16, 0
   \   00000012   ....               RCALL   Init16552
     54              Init16552(1, 9600);                                      // Init UART channel 1
   \   00000014   E840               LDI     R20, 128
   \   00000016   E255               LDI     R21, 37
   \   00000018   E060               LDI     R22, 0
   \   0000001A   E070               LDI     R23, 0
   \   0000001C   E001               LDI     R16, 1
   \   0000001E   ....               RCALL   Init16552
     55              OS_SignalEvent(0x01,&TCB_16552_RxHandler1 );
   \   00000020   ....               LDI     R18, LOW(TCB_16552_RxHandler1)
   \   00000022   ....               LDI     R19, (TCB_16552_RxHandler1) >> 8
   \   00000024   E001               LDI     R16, 1
   \   00000026   ........           CALL    OS_SignalEvent
     56              OS_SignalEvent(0x01,&TCB_16552_RxHandler2 );
   \   0000002A   ....               LDI     R18, LOW(TCB_16552_RxHandler2)
   \   0000002C   ....               LDI     R19, (TCB_16552_RxHandler2) >> 8
   \   0000002E   E001               LDI     R16, 1
   \   00000030   ........           CALL    OS_SignalEvent
     57              TData.RS4.PortUsed      = ReadEEPROMByte(EEPROM_PORTSETUP);   // Get setup from EEPROM
   \   00000034   E002               LDI     R16, 2
   \   00000036   E010               LDI     R17, 0
   \   00000038   ........           CALL    ReadEEPROMByte
   \   0000003C   9300....           STS     TData, R16
     58              TData.RS4.SensorType[0] = ReadEEPROMByte(EEPROM_PORTSETUP + 1);
   \   00000040   E003               LDI     R16, 3
   \   00000042   E010               LDI     R17, 0
   \   00000044   ........           CALL    ReadEEPROMByte
   \   00000048   9300....           STS     (TData + 1), R16
     59              TData.RS4.SensorType[1] = ReadEEPROMByte(EEPROM_PORTSETUP + 2);
   \   0000004C   E004               LDI     R16, 4
   \   0000004E   E010               LDI     R17, 0
   \   00000050   ........           CALL    ReadEEPROMByte
   \   00000054   9300....           STS     (TData + 2), R16
     60          #if USE_MODBUS_PROTOCOL == 1
     61              {
     62                  static void load_eeprom_misc_485(void);
     63                  load_eeprom_misc_485();
     64              }
     65          #endif
     66          
     67              TData.RS4.ToTargetBuffer[0][0] = false;
   \   00000058   E000               LDI     R16, 0
   \   0000005A   9300....           STS     (TData + 1268), R16
     68              TData.RS4.ToTargetBuffer[1][0] = false;
   \   0000005E   E000               LDI     R16, 0
   \   00000060   9300....           STS     (TData + 1348), R16
     69              TData.RS4.FromTargetBuffer[0][0] = false;
   \   00000064   E000               LDI     R16, 0
   \   00000066   9300....           STS     (TData + 1428), R16
     70              TData.RS4.FromTargetBuffer[1][0] = false;
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   9300....           STS     (TData + 1478), R16
     71          
     72          
     73              for (char i = 0; i < 8; i++) {
   \   00000070   2455               CLR     R5
   \                     ??ExtRS485Ctl_0:
   \   00000072   E008               LDI     R16, 8
   \   00000074   1650               CP      R5, R16
   \   00000076   F598               BRCC    ??ExtRS485Ctl_1
     74                  SetBit(PORTC, (TData.RS4.PortUsed & (0x01 << i)));      // Switch on power
   \   00000078   9100....           LDS     R16, (OS_Global + 1)
   \   0000007C   7F00               ANDI    R16, 0xF0
   \   0000007E   2300               TST     R16
   \   00000080   F021               BREQ    ??ExtRS485Ctl_2
   \   00000082   E909               LDI     R16, 153
   \   00000084   E010               LDI     R17, 0
   \   00000086   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_2:
   \   0000008A   94F8               cli
   \   0000008C   9100....           LDS     R16, (OS_Global + 1)
   \   00000090   9503               INC     R16
   \   00000092   9300....           STS     (OS_Global + 1), R16
   \   00000096   9120....           LDS     R18, TData
   \   0000009A   E001               LDI     R16, 1
   \   0000009C   E010               LDI     R17, 0
   \   0000009E   2D45               MOV     R20, R5
   \   000000A0   ........           CALL    ?S_SHL_L02
   \   000000A4   2320               AND     R18, R16
   \   000000A6   B108               IN      R16, 0x08
   \   000000A8   2B02               OR      R16, R18
   \   000000AA   B908               OUT     0x08, R16
   \   000000AC   9100....           LDS     R16, (OS_Global + 1)
   \   000000B0   7F00               ANDI    R16, 0xF0
   \   000000B2   2300               TST     R16
   \   000000B4   F021               BREQ    ??ExtRS485Ctl_3
   \   000000B6   E909               LDI     R16, 153
   \   000000B8   E010               LDI     R17, 0
   \   000000BA   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_3:
   \   000000BE   9100....           LDS     R16, (OS_Global + 1)
   \   000000C2   950A               DEC     R16
   \   000000C4   9300....           STS     (OS_Global + 1), R16
   \   000000C8   9100....           LDS     R16, (OS_Global + 1)
   \   000000CC   2300               TST     R16
   \   000000CE   F409               BRNE    ??ExtRS485Ctl_4
   \   000000D0   9478               sei
     75                  OS_Delay(100);
   \                     ??ExtRS485Ctl_4:
   \   000000D2   E604               LDI     R16, 100
   \   000000D4   E010               LDI     R17, 0
   \   000000D6   ........           CALL    OS_Delay
     76              }
   \   000000DA   9453               INC     R5
   \   000000DC   CFCA               RJMP    ??ExtRS485Ctl_0
     77              OS_Delay(UART_START_DELAY);                               // Waiting for target startup
   \                     ??ExtRS485Ctl_1:
   \   000000DE   E700               LDI     R16, 112
   \   000000E0   E117               LDI     R17, 23
   \   000000E2   ........           CALL    OS_Delay
     78          
     79          #if USE_MODBUS_PROTOCOL == 1
     80              //
     81              // let modbus task that I'm done initializing
     82              //
     83              {
     84                  extern void modbus_rtu_notify_go(void);
     85                  modbus_rtu_notify_go();
     86              }
     87          #endif
     88          
     89              while (1) {
     90                  PortPair = 0;
   \                     ??ExtRS485Ctl_5:
   \   000000E6   E000               LDI     R16, 0
   \   000000E8   9300....           STS     PortPair, R16
     91          
     92                  for (PortPair = 0; PortPair < 4; PortPair++) {        // loop through all ports
   \   000000EC   E000               LDI     R16, 0
   \   000000EE   9300....           STS     PortPair, R16
   \                     ??ExtRS485Ctl_6:
   \   000000F2   9100....           LDS     R16, PortPair
   \   000000F6   3004               CPI     R16, 4
   \   000000F8   F008               BRCS    $+2+2
   \   000000FA   C23C               RJMP    ??ExtRS485Ctl_7
     93                      if (UART16552[0].RxFaultCnt > MAX_16552_FAIL) {
   \   000000FC   9100....           LDS     R16, (UART16552 + 200)
   \   00000100   3009               CPI     R16, 9
   \   00000102   F010               BRCS    ??ExtRS485Ctl_8
     94                          EmptyRxBuf16552(0);                            // Empty UART channel 0
   \   00000104   E000               LDI     R16, 0
   \   00000106   ....               RCALL   EmptyRxBuf16552
     95                      }
     96                      if (UART16552[1].RxFaultCnt > MAX_16552_FAIL) {
   \                     ??ExtRS485Ctl_8:
   \   00000108   9100....           LDS     R16, (UART16552 + 467)
   \   0000010C   3009               CPI     R16, 9
   \   0000010E   F010               BRCS    ??ExtRS485Ctl_9
     97                          EmptyRxBuf16552(1);                            // Empty UART channel 1
   \   00000110   E001               LDI     R16, 1
   \   00000112   ....               RCALL   EmptyRxBuf16552
     98                      }
     99                      if (PowerOnTimer < POWER_ON_CNT) {
   \                     ??ExtRS485Ctl_9:
   \   00000114   30B5               CPI     R27, 5
   \   00000116   F420               BRCC    ??ExtRS485Ctl_10
    100                          if (++PowerOnTimer >= POWER_ON_CNT) {          // check if time to switch on power
   \   00000118   95B3               INC     R27
   \   0000011A   30B5               CPI     R27, 5
   \   0000011C   F008               BRCS    ??ExtRS485Ctl_10
    101                              SetRS4Port();                                // and set power on ports
   \   0000011E   ....               RCALL   SetRS4Port
    102                          }
    103                      }
    104                      SetBit(PORTE, 0xf0);
   \                     ??ExtRS485Ctl_10:
   \   00000120   9100....           LDS     R16, (OS_Global + 1)
   \   00000124   7F00               ANDI    R16, 0xF0
   \   00000126   2300               TST     R16
   \   00000128   F021               BREQ    ??ExtRS485Ctl_11
   \   0000012A   E909               LDI     R16, 153
   \   0000012C   E010               LDI     R17, 0
   \   0000012E   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_11:
   \   00000132   94F8               cli
   \   00000134   9100....           LDS     R16, (OS_Global + 1)
   \   00000138   9503               INC     R16
   \   0000013A   9300....           STS     (OS_Global + 1), R16
   \   0000013E   B10E               IN      R16, 0x0E
   \   00000140   6F00               ORI     R16, 0xF0
   \   00000142   B90E               OUT     0x0E, R16
   \   00000144   9100....           LDS     R16, (OS_Global + 1)
   \   00000148   7F00               ANDI    R16, 0xF0
   \   0000014A   2300               TST     R16
   \   0000014C   F021               BREQ    ??ExtRS485Ctl_12
   \   0000014E   E909               LDI     R16, 153
   \   00000150   E010               LDI     R17, 0
   \   00000152   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_12:
   \   00000156   9100....           LDS     R16, (OS_Global + 1)
   \   0000015A   950A               DEC     R16
   \   0000015C   9300....           STS     (OS_Global + 1), R16
   \   00000160   9100....           LDS     R16, (OS_Global + 1)
   \   00000164   2300               TST     R16
   \   00000166   F409               BRNE    ??ExtRS485Ctl_13
   \   00000168   9478               sei
    105                      // volatile undefined behavior
    106                      // ClrBit(PORTE, (0x10 << PortPair) & 0xf0);           // set mux port
    107                      //
    108                      char temp = (0x10 << PortPair) & 0xf0;
   \                     ??ExtRS485Ctl_13:
   \   0000016A   9140....           LDS     R20, PortPair
   \   0000016E   E100               LDI     R16, 16
   \   00000170   E010               LDI     R17, 0
   \   00000172   ........           CALL    ?S_SHL_L02
   \   00000176   2E50               MOV     R5, R16
   \   00000178   EF00               LDI     R16, 240
   \   0000017A   2250               AND     R5, R16
    109                      ClrBit(PORTE, temp);              // set mux port
   \   0000017C   9100....           LDS     R16, (OS_Global + 1)
   \   00000180   7F00               ANDI    R16, 0xF0
   \   00000182   2300               TST     R16
   \   00000184   F021               BREQ    ??ExtRS485Ctl_14
   \   00000186   E909               LDI     R16, 153
   \   00000188   E010               LDI     R17, 0
   \   0000018A   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_14:
   \   0000018E   94F8               cli
   \   00000190   9100....           LDS     R16, (OS_Global + 1)
   \   00000194   9503               INC     R16
   \   00000196   9300....           STS     (OS_Global + 1), R16
   \   0000019A   2D05               MOV     R16, R5
   \   0000019C   9500               COM     R16
   \   0000019E   B11E               IN      R17, 0x0E
   \   000001A0   2310               AND     R17, R16
   \   000001A2   B91E               OUT     0x0E, R17
   \   000001A4   9100....           LDS     R16, (OS_Global + 1)
   \   000001A8   7F00               ANDI    R16, 0xF0
   \   000001AA   2300               TST     R16
   \   000001AC   F021               BREQ    ??ExtRS485Ctl_15
   \   000001AE   E909               LDI     R16, 153
   \   000001B0   E010               LDI     R17, 0
   \   000001B2   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_15:
   \   000001B6   9100....           LDS     R16, (OS_Global + 1)
   \   000001BA   950A               DEC     R16
   \   000001BC   9300....           STS     (OS_Global + 1), R16
   \   000001C0   9100....           LDS     R16, (OS_Global + 1)
   \   000001C4   2300               TST     R16
   \   000001C6   F409               BRNE    ??ExtRS485Ctl_16
   \   000001C8   9478               sei
    110                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {      // sensor on port 0?
   \                     ??ExtRS485Ctl_16:
   \   000001CA   9100....           LDS     R16, TData
   \   000001CE   E010               LDI     R17, 0
   \   000001D0   9140....           LDS     R20, PortPair
   \   000001D4   ........           CALL    ?SS_SHR_L02
   \   000001D8   7001               ANDI    R16, 0x01
   \   000001DA   2300               TST     R16
   \   000001DC   F409               BRNE    $+2+2
   \   000001DE   C0C1               RJMP    ??ExtRS485Ctl_17
    111                          UART16552[0].TxFirst = 6;        // Start packet build at pos.
   \   000001E0   ....               LDI     R30, LOW((UART16552 + 60))
   \   000001E2   ....               LDI     R31, HIGH((UART16552 + 60))
   \   000001E4   E006               LDI     R16, 6
   \   000001E6   E010               LDI     R17, 0
   \   000001E8   8300               ST      Z, R16
   \   000001EA   8311               STD     Z+1, R17
    112                          char SnsType = (TData.RS4.SensorType[0] >> (2 * PortPair)) & 0x3;
   \   000001EC   9100....           LDS     R16, (TData + 1)
   \   000001F0   E010               LDI     R17, 0
   \   000001F2   9130....           LDS     R19, PortPair
   \   000001F6   E022               LDI     R18, 2
   \   000001F8   9F32               MUL     R19, R18
   \   000001FA   2D40               MOV     R20, R0
   \   000001FC   ........           CALL    ?SS_SHR_L02
   \   00000200   2E60               MOV     R6, R16
   \   00000202   E003               LDI     R16, 3
   \   00000204   2260               AND     R6, R16
    113          
    114                          switch (SnsType) {
   \   00000206   2D06               MOV     R16, R6
   \   00000208   5000               SUBI    R16, 0
   \   0000020A   F409               BRNE    $+2+2
   \   0000020C   C04F               RJMP    ??ExtRS485Ctl_18
   \   0000020E   950A               DEC     R16
   \   00000210   F019               BREQ    ??ExtRS485Ctl_19
   \   00000212   950A               DEC     R16
   \   00000214   F151               BREQ    ??ExtRS485Ctl_20
   \   00000216   C0A1               RJMP    ??ExtRS485Ctl_21
    115                          case 0x01:                              //Water ingress??
    116                              switch (SeqCnt) {
   \                     ??ExtRS485Ctl_19:
   \   00000218   2F0A               MOV     R16, R26
   \   0000021A   5000               SUBI    R16, 0
   \   0000021C   F019               BREQ    ??ExtRS485Ctl_22
   \   0000021E   5104               SUBI    R16, 20
   \   00000220   F021               BREQ    ??ExtRS485Ctl_23
   \   00000222   C020               RJMP    ??ExtRS485Ctl_24
    117                              case 0:
    118                                  Uart_BuildReqWISCardStatus(0);                     //Card status
   \                     ??ExtRS485Ctl_22:
   \   00000224   E000               LDI     R16, 0
   \   00000226   ....               RCALL   Uart_BuildReqWISCardStatus
    119                                  break;
   \   00000228   C098               RJMP    ??ExtRS485Ctl_21
    120                              case 20:
    121                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
   \                     ??ExtRS485Ctl_23:
   \   0000022A   9100....           LDS     R16, (TData + 1428)
   \   0000022E   2300               TST     R16
   \   00000230   F4B1               BRNE    ??ExtRS485Ctl_25
   \   00000232   9100....           LDS     R16, (TData + 1530)
   \   00000236   9110....           LDS     R17, PortPair
   \   0000023A   1701               CP      R16, R17
   \   0000023C   F481               BRNE    ??ExtRS485Ctl_25
    122                                      Uart_BuildReqWISXData(0, 115);          // Request serial no
   \   0000023E   E713               LDI     R17, 115
   \   00000240   E000               LDI     R16, 0
   \   00000242   ....               RCALL   Uart_BuildReqWISXData
    123                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
   \   00000244   9100....           LDS     R16, (TData + 1530)
   \   00000248   9503               INC     R16
   \   0000024A   9300....           STS     (TData + 1530), R16
   \   0000024E   9100....           LDS     R16, (TData + 1530)
   \   00000252   3004               CPI     R16, 4
   \   00000254   F048               BRCS    ??ExtRS485Ctl_26
    124                                          TData.RS4.EEPROMPortpair[0] = 0;
   \   00000256   E000               LDI     R16, 0
   \   00000258   9300....           STS     (TData + 1530), R16
   \   0000025C   C07E               RJMP    ??ExtRS485Ctl_21
    125                                      }
    126                                  } else {
    127                                      Uart_BuildReqWISData(0);          //WIS data
   \                     ??ExtRS485Ctl_25:
   \   0000025E   E000               LDI     R16, 0
   \   00000260   ....               RCALL   Uart_BuildReqWISData
    128                                  }
    129                                  break;
   \   00000262   C07B               RJMP    ??ExtRS485Ctl_21
    130                              default:
    131                                  Uart_BuildReqWISData(0);            //WIS data
   \                     ??ExtRS485Ctl_24:
   \   00000264   E000               LDI     R16, 0
   \   00000266   ....               RCALL   Uart_BuildReqWISData
    132                                  break;
    133                              }
    134                              break;
   \                     ??ExtRS485Ctl_26:
   \   00000268   C078               RJMP    ??ExtRS485Ctl_21
    135          
    136                          case 0x02:                             // Radar??
    137                              switch (SeqCnt) {
   \                     ??ExtRS485Ctl_20:
   \   0000026A   2F0A               MOV     R16, R26
   \   0000026C   5000               SUBI    R16, 0
   \   0000026E   F0D9               BREQ    ??ExtRS485Ctl_27
   \   00000270   5104               SUBI    R16, 20
   \   00000272   F4B1               BRNE    ??ExtRS485Ctl_28
    138                              case 20:
    139                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
   \   00000274   9100....           LDS     R16, (TData + 1428)
   \   00000278   2300               TST     R16
   \   0000027A   F491               BRNE    ??ExtRS485Ctl_28
   \   0000027C   9100....           LDS     R16, (TData + 1530)
   \   00000280   9110....           LDS     R17, PortPair
   \   00000284   1701               CP      R16, R17
   \   00000286   F461               BRNE    ??ExtRS485Ctl_28
    140                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
   \   00000288   9100....           LDS     R16, (TData + 1530)
   \   0000028C   9503               INC     R16
   \   0000028E   9300....           STS     (TData + 1530), R16
   \   00000292   9100....           LDS     R16, (TData + 1530)
   \   00000296   3004               CPI     R16, 4
   \   00000298   F018               BRCS    ??ExtRS485Ctl_28
    141                                          TData.RS4.EEPROMPortpair[0] = 0;
   \   0000029A   E000               LDI     R16, 0
   \   0000029C   9300....           STS     (TData + 1530), R16
    142                                      }
    143                                  }
    144                                  // Fall through and send the request
    145                              default:
    146                                  Uart_BuildReqRadarData(0);             // Radar data
   \                     ??ExtRS485Ctl_28:
   \   000002A0   E000               LDI     R16, 0
   \   000002A2   ....               RCALL   Uart_BuildReqRadarData
    147                                  break;
   \   000002A4   C05A               RJMP    ??ExtRS485Ctl_21
    148                              case 0:
    149                                  Uart_BuildReqRadarInfo(0);             //Radar Information
   \                     ??ExtRS485Ctl_27:
   \   000002A6   E000               LDI     R16, 0
   \   000002A8   ....               RCALL   Uart_BuildReqRadarInfo
    150                                  break;
    151                              }
    152                              break;
   \   000002AA   C057               RJMP    ??ExtRS485Ctl_21
    153                          case 0x00:                         // AN-SGCNV
    154                              if ((TData.RS4.ToTargetBuffer[0][0] == true) && // Data ready for this AD card
    155                                  (TData.RS4.ToTargetBuffer[0][1] == PortPair)) {
   \                     ??ExtRS485Ctl_18:
   \   000002AC   9100....           LDS     R16, (TData + 1268)
   \   000002B0   3001               CPI     R16, 1
   \   000002B2   F469               BRNE    ??ExtRS485Ctl_29
   \   000002B4   9100....           LDS     R16, (TData + 1269)
   \   000002B8   9110....           LDS     R17, PortPair
   \   000002BC   1701               CP      R16, R17
   \   000002BE   F439               BRNE    ??ExtRS485Ctl_29
    156                                  Uart_BuildSndData(0);     // add data to AD card package
   \   000002C0   E000               LDI     R16, 0
   \   000002C2   ....               RCALL   Uart_BuildSndData
    157                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
   \   000002C4   E000               LDI     R16, 0
   \   000002C6   ....               RCALL   Uart_BuildReqConfig
    158                                  AskMD[0] = false;
   \   000002C8   E000               LDI     R16, 0
   \   000002CA   2F80               MOV     R24, R16
   \   000002CC   C002               RJMP    ??ExtRS485Ctl_30
    159                              } else {
    160                                  AskMD[0] = true;
   \                     ??ExtRS485Ctl_29:
   \   000002CE   E001               LDI     R16, 1
   \   000002D0   2F80               MOV     R24, R16
    161                              }
    162                              if (SeqCnt == 0) {
   \                     ??ExtRS485Ctl_30:
   \   000002D2   23AA               TST     R26
   \   000002D4   F419               BRNE    ??ExtRS485Ctl_31
    163                                  Uart_BuildReqCardStatus(0);             //Card status, cmd 27
   \   000002D6   E000               LDI     R16, 0
   \   000002D8   ....               RCALL   Uart_BuildReqCardStatus
   \   000002DA   C03F               RJMP    ??ExtRS485Ctl_21
    164                              } else if (SeqCnt == 5) {
   \                     ??ExtRS485Ctl_31:
   \   000002DC   30A5               CPI     R26, 5
   \   000002DE   F419               BRNE    ??ExtRS485Ctl_32
    165                                  Uart_BuildReqR16552(0);                 //Raw data, cmd 13
   \   000002E0   E000               LDI     R16, 0
   \   000002E2   ....               RCALL   Uart_BuildReqR16552
   \   000002E4   C03A               RJMP    ??ExtRS485Ctl_21
    166                              } else if (SeqCnt == 10) {
   \                     ??ExtRS485Ctl_32:
   \   000002E6   30AA               CPI     R26, 10
   \   000002E8   F419               BRNE    ??ExtRS485Ctl_33
    167                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
   \   000002EA   E000               LDI     R16, 0
   \   000002EC   ....               RCALL   Uart_BuildReqConfig
   \   000002EE   C035               RJMP    ??ExtRS485Ctl_21
    168                              } else if (SeqCnt == 15) {
   \                     ??ExtRS485Ctl_33:
   \   000002F0   30AF               CPI     R26, 15
   \   000002F2   F419               BRNE    ??ExtRS485Ctl_34
    169                                  Uart_BuildReqC16552(0);                 //Cal data, cmd 16
   \   000002F4   E000               LDI     R16, 0
   \   000002F6   ....               RCALL   Uart_BuildReqC16552
   \   000002F8   C030               RJMP    ??ExtRS485Ctl_21
    170                              } else if (SeqCnt == 20) {
   \                     ??ExtRS485Ctl_34:
   \   000002FA   31A4               CPI     R26, 20
   \   000002FC   F551               BRNE    ??ExtRS485Ctl_35
    171                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
   \   000002FE   9100....           LDS     R16, (TData + 1428)
   \   00000302   2300               TST     R16
   \   00000304   F509               BRNE    ??ExtRS485Ctl_36
   \   00000306   9100....           LDS     R16, (TData + 1530)
   \   0000030A   9110....           LDS     R17, PortPair
   \   0000030E   1701               CP      R16, R17
   \   00000310   F4D9               BRNE    ??ExtRS485Ctl_36
    172                                      Uart_BuildReqEEPROMData(0);
   \   00000312   E000               LDI     R16, 0
   \   00000314   ....               RCALL   Uart_BuildReqEEPROMData
    173                                      //EEpromdata cmd, 24
    174                                      if ((TData.RS4.EEPROMADChannel[0] += 2) > 14) { //Next channel
   \   00000316   9100....           LDS     R16, (TData + 1528)
   \   0000031A   5F0E               SUBI    R16, 254
   \   0000031C   9300....           STS     (TData + 1528), R16
   \   00000320   9100....           LDS     R16, (TData + 1528)
   \   00000324   300F               CPI     R16, 15
   \   00000326   F0C8               BRCS    ??ExtRS485Ctl_21
    175                                          TData.RS4.EEPROMADChannel[0] = 0;
   \   00000328   E000               LDI     R16, 0
   \   0000032A   9300....           STS     (TData + 1528), R16
    176                                          if (++TData.RS4.EEPROMPortpair[0] >= 4) {
   \   0000032E   9100....           LDS     R16, (TData + 1530)
   \   00000332   9503               INC     R16
   \   00000334   9300....           STS     (TData + 1530), R16
   \   00000338   9100....           LDS     R16, (TData + 1530)
   \   0000033C   3004               CPI     R16, 4
   \   0000033E   F068               BRCS    ??ExtRS485Ctl_21
    177                                              TData.RS4.EEPROMPortpair[0] = 0;
   \   00000340   E000               LDI     R16, 0
   \   00000342   9300....           STS     (TData + 1530), R16
   \   00000346   C009               RJMP    ??ExtRS485Ctl_21
    178                                          }
    179                                      }
    180                                  } else if (AskMD[0] == true) {
   \                     ??ExtRS485Ctl_36:
   \   00000348   3081               CPI     R24, 1
   \   0000034A   F439               BRNE    ??ExtRS485Ctl_21
    181                                      Uart_BuildReqM16552(0);                 //Measure data, cmd 10
   \   0000034C   E000               LDI     R16, 0
   \   0000034E   ....               RCALL   Uart_BuildReqM16552
   \   00000350   C004               RJMP    ??ExtRS485Ctl_21
    182                                  }
    183                              } else if (AskMD[0] == true) {
   \                     ??ExtRS485Ctl_35:
   \   00000352   3081               CPI     R24, 1
   \   00000354   F411               BRNE    ??ExtRS485Ctl_21
    184                                  Uart_BuildReqM16552(0);                 //Measure data, cmd 10
   \   00000356   E000               LDI     R16, 0
   \   00000358   ....               RCALL   Uart_BuildReqM16552
    185                              }
    186                              break;
    187                          }
    188                          //EmptyRxBuf16552(0);                            // Empty UART channel 0
    189                          Uart_BuildTail16552(0);
   \                     ??ExtRS485Ctl_21:
   \   0000035A   E000               LDI     R16, 0
   \   0000035C   ........           CALL    Uart_BuildTail16552
   \   00000360   C012               RJMP    ??ExtRS485Ctl_37
    190                      } else {
    191                          if (TData.RS4.EEPROMPortpair[0] == PortPair) {
   \                     ??ExtRS485Ctl_17:
   \   00000362   9100....           LDS     R16, (TData + 1530)
   \   00000366   9110....           LDS     R17, PortPair
   \   0000036A   1701               CP      R16, R17
   \   0000036C   F461               BRNE    ??ExtRS485Ctl_37
    192                              if (++TData.RS4.EEPROMPortpair[0] >= 4) {  // make sure that the EEPROM reading is not stopped
   \   0000036E   9100....           LDS     R16, (TData + 1530)
   \   00000372   9503               INC     R16
   \   00000374   9300....           STS     (TData + 1530), R16
   \   00000378   9100....           LDS     R16, (TData + 1530)
   \   0000037C   3004               CPI     R16, 4
   \   0000037E   F018               BRCS    ??ExtRS485Ctl_37
    193                                  TData.RS4.EEPROMPortpair[0] = 0;
   \   00000380   E000               LDI     R16, 0
   \   00000382   9300....           STS     (TData + 1530), R16
    194                              }
    195                          }
    196                      }
    197                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {      // sensor on port 1?
   \                     ??ExtRS485Ctl_37:
   \   00000386   9100....           LDS     R16, TData
   \   0000038A   E010               LDI     R17, 0
   \   0000038C   9140....           LDS     R20, PortPair
   \   00000390   5F4C               SUBI    R20, 252
   \   00000392   ........           CALL    ?SS_SHR_L02
   \   00000396   7001               ANDI    R16, 0x01
   \   00000398   2300               TST     R16
   \   0000039A   F409               BRNE    $+2+2
   \   0000039C   C0C8               RJMP    ??ExtRS485Ctl_38
    198                          UART16552[1].TxFirst = 6;                       // Start at
   \   0000039E   ....               LDI     R30, LOW((UART16552 + 327))
   \   000003A0   ....               LDI     R31, HIGH((UART16552 + 327))
   \   000003A2   E006               LDI     R16, 6
   \   000003A4   E010               LDI     R17, 0
   \   000003A6   8300               ST      Z, R16
   \   000003A8   8311               STD     Z+1, R17
    199                          char SnsType = ((TData.RS4.SensorType[1] >> (2 * PortPair))) & 0x3;
   \   000003AA   9100....           LDS     R16, (TData + 2)
   \   000003AE   E010               LDI     R17, 0
   \   000003B0   9130....           LDS     R19, PortPair
   \   000003B4   E022               LDI     R18, 2
   \   000003B6   9F32               MUL     R19, R18
   \   000003B8   2D40               MOV     R20, R0
   \   000003BA   ........           CALL    ?SS_SHR_L02
   \   000003BE   2E60               MOV     R6, R16
   \   000003C0   E003               LDI     R16, 3
   \   000003C2   2260               AND     R6, R16
    200                          switch (SnsType) {
   \   000003C4   2D06               MOV     R16, R6
   \   000003C6   5000               SUBI    R16, 0
   \   000003C8   F409               BRNE    $+2+2
   \   000003CA   C04F               RJMP    ??ExtRS485Ctl_39
   \   000003CC   950A               DEC     R16
   \   000003CE   F019               BREQ    ??ExtRS485Ctl_40
   \   000003D0   950A               DEC     R16
   \   000003D2   F151               BREQ    ??ExtRS485Ctl_41
   \   000003D4   C0A8               RJMP    ??ExtRS485Ctl_42
    201                          case 0x01:    //Water ingress??
    202                              switch (SeqCnt) {
   \                     ??ExtRS485Ctl_40:
   \   000003D6   2F0A               MOV     R16, R26
   \   000003D8   5000               SUBI    R16, 0
   \   000003DA   F019               BREQ    ??ExtRS485Ctl_43
   \   000003DC   5104               SUBI    R16, 20
   \   000003DE   F021               BREQ    ??ExtRS485Ctl_44
   \   000003E0   C020               RJMP    ??ExtRS485Ctl_45
    203                              case 0:
    204                                  Uart_BuildReqWISCardStatus(1);          //Card status
   \                     ??ExtRS485Ctl_43:
   \   000003E2   E001               LDI     R16, 1
   \   000003E4   ....               RCALL   Uart_BuildReqWISCardStatus
    205                                  break;
   \   000003E6   C09F               RJMP    ??ExtRS485Ctl_42
    206                              case 20:
    207                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
   \                     ??ExtRS485Ctl_44:
   \   000003E8   9100....           LDS     R16, (TData + 1478)
   \   000003EC   2300               TST     R16
   \   000003EE   F4B1               BRNE    ??ExtRS485Ctl_46
   \   000003F0   9100....           LDS     R16, (TData + 1531)
   \   000003F4   9110....           LDS     R17, PortPair
   \   000003F8   1701               CP      R16, R17
   \   000003FA   F481               BRNE    ??ExtRS485Ctl_46
    208                                      Uart_BuildReqWISXData(1, 115);            // Request serial no
   \   000003FC   E713               LDI     R17, 115
   \   000003FE   E001               LDI     R16, 1
   \   00000400   ....               RCALL   Uart_BuildReqWISXData
    209                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
   \   00000402   9100....           LDS     R16, (TData + 1531)
   \   00000406   9503               INC     R16
   \   00000408   9300....           STS     (TData + 1531), R16
   \   0000040C   9100....           LDS     R16, (TData + 1531)
   \   00000410   3004               CPI     R16, 4
   \   00000412   F048               BRCS    ??ExtRS485Ctl_47
    210                                          TData.RS4.EEPROMPortpair[1] = 0;
   \   00000414   E000               LDI     R16, 0
   \   00000416   9300....           STS     (TData + 1531), R16
   \   0000041A   C085               RJMP    ??ExtRS485Ctl_42
    211                                      }
    212                                  } else {
    213                                      Uart_BuildReqWISData(1);                //WIS data
   \                     ??ExtRS485Ctl_46:
   \   0000041C   E001               LDI     R16, 1
   \   0000041E   ....               RCALL   Uart_BuildReqWISData
    214                                  }
    215                                  break;
   \   00000420   C082               RJMP    ??ExtRS485Ctl_42
    216                              default:
    217                                  Uart_BuildReqWISData(1);                //WIS data
   \                     ??ExtRS485Ctl_45:
   \   00000422   E001               LDI     R16, 1
   \   00000424   ....               RCALL   Uart_BuildReqWISData
    218                                  break;
    219                              }
    220                              break;
   \                     ??ExtRS485Ctl_47:
   \   00000426   C07F               RJMP    ??ExtRS485Ctl_42
    221                          case 0x02:    // Radar??
    222                              switch (SeqCnt) {
   \                     ??ExtRS485Ctl_41:
   \   00000428   2F0A               MOV     R16, R26
   \   0000042A   5000               SUBI    R16, 0
   \   0000042C   F0D9               BREQ    ??ExtRS485Ctl_48
   \   0000042E   5104               SUBI    R16, 20
   \   00000430   F4B1               BRNE    ??ExtRS485Ctl_49
    223                              case 20:
    224                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
   \   00000432   9100....           LDS     R16, (TData + 1478)
   \   00000436   2300               TST     R16
   \   00000438   F491               BRNE    ??ExtRS485Ctl_49
   \   0000043A   9100....           LDS     R16, (TData + 1531)
   \   0000043E   9110....           LDS     R17, PortPair
   \   00000442   1701               CP      R16, R17
   \   00000444   F461               BRNE    ??ExtRS485Ctl_49
    225                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
   \   00000446   9100....           LDS     R16, (TData + 1531)
   \   0000044A   9503               INC     R16
   \   0000044C   9300....           STS     (TData + 1531), R16
   \   00000450   9100....           LDS     R16, (TData + 1531)
   \   00000454   3004               CPI     R16, 4
   \   00000456   F018               BRCS    ??ExtRS485Ctl_49
    226                                          TData.RS4.EEPROMPortpair[1] = 0;
   \   00000458   E000               LDI     R16, 0
   \   0000045A   9300....           STS     (TData + 1531), R16
    227                                      }
    228                                  }
    229                                  // Fall through and send the request
    230                              default:
    231                                  Uart_BuildReqRadarData(1);          // Radar data
   \                     ??ExtRS485Ctl_49:
   \   0000045E   E001               LDI     R16, 1
   \   00000460   ....               RCALL   Uart_BuildReqRadarData
    232                                  break;
   \   00000462   C061               RJMP    ??ExtRS485Ctl_42
    233                              case 0:
    234                                  Uart_BuildReqRadarInfo(1);          //Radar Information
   \                     ??ExtRS485Ctl_48:
   \   00000464   E001               LDI     R16, 1
   \   00000466   ....               RCALL   Uart_BuildReqRadarInfo
    235                                  break;
    236                              }
    237                              break;
   \   00000468   C05E               RJMP    ??ExtRS485Ctl_42
    238                          case 0x00:  // AN-SGCNV
    239                              if ((TData.RS4.ToTargetBuffer[1][0] == true) && // Data ready for this AD card
    240                                  (TData.RS4.ToTargetBuffer[1][1] == (PortPair + 4))) {
   \                     ??ExtRS485Ctl_39:
   \   0000046A   9100....           LDS     R16, (TData + 1348)
   \   0000046E   3001               CPI     R16, 1
   \   00000470   F489               BRNE    ??ExtRS485Ctl_50
   \   00000472   9100....           LDS     R16, (TData + 1349)
   \   00000476   E010               LDI     R17, 0
   \   00000478   91E0....           LDS     R30, PortPair
   \   0000047C   E0F0               LDI     R31, 0
   \   0000047E   9634               ADIW    R31:R30, 4
   \   00000480   170E               CP      R16, R30
   \   00000482   071F               CPC     R17, R31
   \   00000484   F439               BRNE    ??ExtRS485Ctl_50
    241                                  Uart_BuildSndData(1);                       // add data to AD card package
   \   00000486   E001               LDI     R16, 1
   \   00000488   ....               RCALL   Uart_BuildSndData
    242                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
   \   0000048A   E001               LDI     R16, 1
   \   0000048C   ....               RCALL   Uart_BuildReqConfig
    243                                  AskMD[1] = false;
   \   0000048E   E000               LDI     R16, 0
   \   00000490   2F90               MOV     R25, R16
   \   00000492   C002               RJMP    ??ExtRS485Ctl_51
    244                              } else {
    245                                  AskMD[1] = true;
   \                     ??ExtRS485Ctl_50:
   \   00000494   E001               LDI     R16, 1
   \   00000496   2F90               MOV     R25, R16
    246                              }
    247                              if (SeqCnt == 0) {
   \                     ??ExtRS485Ctl_51:
   \   00000498   23AA               TST     R26
   \   0000049A   F419               BRNE    ??ExtRS485Ctl_52
    248                                  Uart_BuildReqCardStatus(1);             //Card status, cmd 27
   \   0000049C   E001               LDI     R16, 1
   \   0000049E   ....               RCALL   Uart_BuildReqCardStatus
   \   000004A0   C042               RJMP    ??ExtRS485Ctl_42
    249                              } else if (SeqCnt == 5) {
   \                     ??ExtRS485Ctl_52:
   \   000004A2   30A5               CPI     R26, 5
   \   000004A4   F419               BRNE    ??ExtRS485Ctl_53
    250                                  Uart_BuildReqR16552(1);                 //Raw data cmd, 13
   \   000004A6   E001               LDI     R16, 1
   \   000004A8   ....               RCALL   Uart_BuildReqR16552
   \   000004AA   C03D               RJMP    ??ExtRS485Ctl_42
    251                              } else if (SeqCnt == 10) {
   \                     ??ExtRS485Ctl_53:
   \   000004AC   30AA               CPI     R26, 10
   \   000004AE   F419               BRNE    ??ExtRS485Ctl_54
    252                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
   \   000004B0   E001               LDI     R16, 1
   \   000004B2   ....               RCALL   Uart_BuildReqConfig
   \   000004B4   C038               RJMP    ??ExtRS485Ctl_42
    253                              } else if (SeqCnt == 15) {
   \                     ??ExtRS485Ctl_54:
   \   000004B6   30AF               CPI     R26, 15
   \   000004B8   F419               BRNE    ??ExtRS485Ctl_55
    254                                  Uart_BuildReqC16552(1);                 //Cal data  cmd, 16
   \   000004BA   E001               LDI     R16, 1
   \   000004BC   ....               RCALL   Uart_BuildReqC16552
   \   000004BE   C033               RJMP    ??ExtRS485Ctl_42
    255                              } else if (SeqCnt == 20) {
   \                     ??ExtRS485Ctl_55:
   \   000004C0   31A4               CPI     R26, 20
   \   000004C2   F561               BRNE    ??ExtRS485Ctl_56
    256                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
   \   000004C4   9100....           LDS     R16, (TData + 1478)
   \   000004C8   2300               TST     R16
   \   000004CA   F511               BRNE    ??ExtRS485Ctl_57
   \   000004CC   9100....           LDS     R16, (TData + 1531)
   \   000004D0   9110....           LDS     R17, PortPair
   \   000004D4   1701               CP      R16, R17
   \   000004D6   F4E1               BRNE    ??ExtRS485Ctl_57
    257                                      Uart_BuildReqEEPROMData(1);             //EEpromdata cmd, 24
   \   000004D8   E001               LDI     R16, 1
   \   000004DA   ........           CALL    Uart_BuildReqEEPROMData
    258                                      if ((TData.RS4.EEPROMADChannel[1] += 2) > 14) { //Next channel
   \   000004DE   9100....           LDS     R16, (TData + 1529)
   \   000004E2   5F0E               SUBI    R16, 254
   \   000004E4   9300....           STS     (TData + 1529), R16
   \   000004E8   9100....           LDS     R16, (TData + 1529)
   \   000004EC   300F               CPI     R16, 15
   \   000004EE   F0D8               BRCS    ??ExtRS485Ctl_42
    259                                          TData.RS4.EEPROMADChannel[1] = 0;
   \   000004F0   E000               LDI     R16, 0
   \   000004F2   9300....           STS     (TData + 1529), R16
    260                                          if (++TData.RS4.EEPROMPortpair[1] >= 4) {
   \   000004F6   9100....           LDS     R16, (TData + 1531)
   \   000004FA   9503               INC     R16
   \   000004FC   9300....           STS     (TData + 1531), R16
   \   00000500   9100....           LDS     R16, (TData + 1531)
   \   00000504   3004               CPI     R16, 4
   \   00000506   F078               BRCS    ??ExtRS485Ctl_42
    261                                              TData.RS4.EEPROMPortpair[1] = 0;
   \   00000508   E000               LDI     R16, 0
   \   0000050A   9300....           STS     (TData + 1531), R16
   \   0000050E   C00B               RJMP    ??ExtRS485Ctl_42
    262                                          }
    263                                      }
    264                                  } else if (AskMD[1] == true) {
   \                     ??ExtRS485Ctl_57:
   \   00000510   3091               CPI     R25, 1
   \   00000512   F449               BRNE    ??ExtRS485Ctl_42
    265                                      Uart_BuildReqM16552(1);                 //Measure data, cmd 10
   \   00000514   E001               LDI     R16, 1
   \   00000516   ........           CALL    Uart_BuildReqM16552
   \   0000051A   C005               RJMP    ??ExtRS485Ctl_42
    266                                  }
    267                              } else if (AskMD[1] == true) {
   \                     ??ExtRS485Ctl_56:
   \   0000051C   3091               CPI     R25, 1
   \   0000051E   F419               BRNE    ??ExtRS485Ctl_42
    268                                  Uart_BuildReqM16552(1);                 //Measure data, cmd 10
   \   00000520   E001               LDI     R16, 1
   \   00000522   ........           CALL    Uart_BuildReqM16552
    269                              }
    270                              break;
    271                          }
    272                          //EmptyRxBuf16552(0);                            // Empty UART channel 0
    273                          Uart_BuildTail16552(1);
   \                     ??ExtRS485Ctl_42:
   \   00000526   E001               LDI     R16, 1
   \   00000528   ........           CALL    Uart_BuildTail16552
   \   0000052C   C012               RJMP    ??ExtRS485Ctl_58
    274                      } else {
    275                          if (TData.RS4.EEPROMPortpair[1] == PortPair) {
   \                     ??ExtRS485Ctl_38:
   \   0000052E   9100....           LDS     R16, (TData + 1531)
   \   00000532   9110....           LDS     R17, PortPair
   \   00000536   1701               CP      R16, R17
   \   00000538   F461               BRNE    ??ExtRS485Ctl_58
    276                              if (++TData.RS4.EEPROMPortpair[1] >= 4) {  // make sure that the EEPROM reading is not stopped
   \   0000053A   9100....           LDS     R16, (TData + 1531)
   \   0000053E   9503               INC     R16
   \   00000540   9300....           STS     (TData + 1531), R16
   \   00000544   9100....           LDS     R16, (TData + 1531)
   \   00000548   3004               CPI     R16, 4
   \   0000054A   F018               BRCS    ??ExtRS485Ctl_58
    277                                  TData.RS4.EEPROMPortpair[1] = 0;
   \   0000054C   E000               LDI     R16, 0
   \   0000054E   9300....           STS     (TData + 1531), R16
    278                              }
    279                          }
    280                      }
    281                      EventStatus = OS_WaitEventTimed(1, 1000);              // Wait for ready to send next
   \                     ??ExtRS485Ctl_58:
   \   00000552   EE28               LDI     R18, 232
   \   00000554   E033               LDI     R19, 3
   \   00000556   E001               LDI     R16, 1
   \   00000558   ........           CALL    OS_WaitEventTimed
   \   0000055C   2E40               MOV     R4, R16
    282                      if (EventStatus & 0x02) {
   \   0000055E   FA41               BST     R4, 1
   \   00000560   F41E               BRTC    ??ExtRS485Ctl_59
    283                          if (PowerOnTimer >= POWER_ON_CNT) {
   \   00000562   30B5               CPI     R27, 5
   \   00000564   F008               BRCS    ??ExtRS485Ctl_59
    284                              PowerOnTimer = 0;                              // and start over again
   \   00000566   E0B0               LDI     R27, 0
    285                          }
    286                      }
    287                  }
   \                     ??ExtRS485Ctl_59:
   \   00000568   9100....           LDS     R16, PortPair
   \   0000056C   9503               INC     R16
   \   0000056E   9300....           STS     PortPair, R16
   \   00000572   CDBF               RJMP    ??ExtRS485Ctl_6
    288                  if (++SeqCnt > 20) {              //  all request within 20 x 2 sec.
   \                     ??ExtRS485Ctl_7:
   \   00000574   95A3               INC     R26
   \   00000576   31A5               CPI     R26, 21
   \   00000578   F408               BRCC    $+2+2
   \   0000057A   CDB5               RJMP    ??ExtRS485Ctl_5
    289                      SeqCnt = 0;
   \   0000057C   E0A0               LDI     R26, 0
   \   0000057E   CDB3               RJMP    ??ExtRS485Ctl_5
   \   00000580                      REQUIRE _A_PORTC
   \   00000580                      REQUIRE _A_PORTE
    290                  }
    291              }
    292          }
    293          
    294          
    295          /*************************************************************************
    296          *   (This is a task)
    297          *  Usart handler UART receive data
    298          *
    299          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    300          void ExtRS485Rec(void) {
   \                     ExtRS485Rec:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
    301              char portresp;
    302              char temp;
    303          
    304              OS_Delay(UART_START_DELAY + 800);           // Waiting for target startup and power on sequence
   \   00000004   E900               LDI     R16, 144
   \   00000006   E11A               LDI     R17, 26
   \   00000008   ........           CALL    OS_Delay
    305          
    306              while (1) {
    307                  OS_Delay(499);                          // wait for answer and correct the speed (.5 * 4 = 2 sec update)
   \                     ??ExtRS485Rec_0:
   \   0000000C   EF03               LDI     R16, 243
   \   0000000E   E011               LDI     R17, 1
   \   00000010   ........           CALL    OS_Delay
    308                  portresp = OS_WaitEventTimed(3, 1);   // Wait for receive from both channels
   \   00000014   E021               LDI     R18, 1
   \   00000016   E030               LDI     R19, 0
   \   00000018   E003               LDI     R16, 3
   \   0000001A   ........           CALL    OS_WaitEventTimed
   \   0000001E   2F90               MOV     R25, R16
    309                  if (portresp & 0x01) {                  // answer on ch 0
   \   00000020   FB90               BST     R25, 0
   \   00000022   F4EE               BRTC    ??ExtRS485Rec_1
    310                      Usart16552CheckPackage(0);            // handle incomming package
   \   00000024   E000               LDI     R16, 0
   \   00000026   ....               RCALL   Usart16552CheckPackage
    311                      TData.RS4.FailCnt[PortPair][0] = 0; // Reset counter
   \   00000028   9100....           LDS     R16, PortPair
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   0F00               LSL     R16
   \   00000030   1F11               ROL     R17
   \   00000032   0F00               LSL     R16
   \   00000034   1F11               ROL     R17
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   8703               STD     Z+11, R16
   \   00000040   E000               LDI     R16, 0
   \   00000042   8704               STD     Z+12, R16
    312                      TData.RS4.IOUnitStatus[PortPair] &= ~COMFAIL_BIT; // No error
   \   00000044   9100....           LDS     R16, PortPair
   \   00000048   E010               LDI     R17, 0
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000004E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000050   8103               LDD     R16, Z+3
   \   00000052   7F0E               ANDI    R16, 0xFE
   \   00000054   8303               STD     Z+3, R16
    313                      UART16552[0].RxFaultCnt = 0;          // OK package on 16552 channel
   \   00000056   E000               LDI     R16, 0
   \   00000058   9300....           STS     (UART16552 + 200), R16
   \   0000005C   C087               RJMP    ??ExtRS485Rec_2
    314                  } else {
    315                      UART16552[0].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_1:
   \   0000005E   9100....           LDS     R16, (UART16552 + 200)
   \   00000062   9503               INC     R16
   \   00000064   9300....           STS     (UART16552 + 200), R16
    316                      TData.RS4.FailCnt[PortPair][1]++;                            // no answer total counter
   \   00000068   9100....           LDS     R16, PortPair
   \   0000006C   E010               LDI     R17, 0
   \   0000006E   0F00               LSL     R16
   \   00000070   1F11               ROL     R17
   \   00000072   0F00               LSL     R16
   \   00000074   1F11               ROL     R17
   \   00000076   01F8               MOVW    R31:R30, R17:R16
   \   00000078   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000007A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000007C   8505               LDD     R16, Z+13
   \   0000007E   8516               LDD     R17, Z+14
   \   00000080   5F0F               SUBI    R16, 255
   \   00000082   4F1F               SBCI    R17, 255
   \   00000084   8705               STD     Z+13, R16
   \   00000086   8716               STD     Z+14, R17
    317                      if (TData.RS4.FailCnt[PortPair][0]++ > FAILCNT_ERROR) {
   \   00000088   9100....           LDS     R16, PortPair
   \   0000008C   2F20               MOV     R18, R16
   \   0000008E   E030               LDI     R19, 0
   \   00000090   0F22               LSL     R18
   \   00000092   1F33               ROL     R19
   \   00000094   0F22               LSL     R18
   \   00000096   1F33               ROL     R19
   \   00000098   01F9               MOVW    R31:R30, R19:R18
   \   0000009A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000009E   85A3               LDD     R26, Z+11
   \   000000A0   85B4               LDD     R27, Z+12
   \   000000A2   019D               MOVW    R19:R18, R27:R26
   \   000000A4   5F2F               SUBI    R18, 255
   \   000000A6   4F3F               SBCI    R19, 255
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   0F00               LSL     R16
   \   000000AC   1F11               ROL     R17
   \   000000AE   0F00               LSL     R16
   \   000000B0   1F11               ROL     R17
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000B8   8723               STD     Z+11, R18
   \   000000BA   8734               STD     Z+12, R19
   \   000000BC   9716               SBIW    R27:R26, 6
   \   000000BE   F048               BRCS    ??ExtRS485Rec_3
    318                          TData.RS4.IOUnitStatus[PortPair] |= COMFAIL_BIT;      // report fault
   \   000000C0   9100....           LDS     R16, PortPair
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   01F8               MOVW    R31:R30, R17:R16
   \   000000C8   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000CC   8103               LDD     R16, Z+3
   \   000000CE   6001               ORI     R16, 0x01
   \   000000D0   8303               STD     Z+3, R16
    319                      }
    320                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
   \                     ??ExtRS485Rec_3:
   \   000000D2   9100....           LDS     R16, TData
   \   000000D6   E010               LDI     R17, 0
   \   000000D8   9140....           LDS     R20, PortPair
   \   000000DC   ........           CALL    ?SS_SHR_L02
   \   000000E0   7001               ANDI    R16, 0x01
   \   000000E2   2300               TST     R16
   \   000000E4   F409               BRNE    $+2+2
   \   000000E6   C042               RJMP    ??ExtRS485Rec_2
    321                          if ((TData.RS4.FailCnt[PortPair][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   000000E8   9100....           LDS     R16, PortPair
   \   000000EC   E010               LDI     R17, 0
   \   000000EE   0F00               LSL     R16
   \   000000F0   1F11               ROL     R17
   \   000000F2   0F00               LSL     R16
   \   000000F4   1F11               ROL     R17
   \   000000F6   01F8               MOVW    R31:R30, R17:R16
   \   000000F8   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000FA   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000FC   8503               LDD     R16, Z+11
   \   000000FE   8514               LDD     R17, Z+12
   \   00000100   7007               ANDI    R16, 0x07
   \   00000102   3004               CPI     R16, 4
   \   00000104   F599               BRNE    ??ExtRS485Rec_2
    322                              // volatile undefined behavior
    323                              // ClrBit(PORTC, (0x01 << PortPair));            // Switch off power
    324                              //
    325                              temp = (0x01 << PortPair);
   \   00000106   9140....           LDS     R20, PortPair
   \   0000010A   E001               LDI     R16, 1
   \   0000010C   E010               LDI     R17, 0
   \   0000010E   ........           CALL    ?S_SHL_L02
   \   00000112   2F80               MOV     R24, R16
    326                              ClrBit(PORTC, temp);  // Switch off power
   \   00000114   9100....           LDS     R16, (OS_Global + 1)
   \   00000118   7F00               ANDI    R16, 0xF0
   \   0000011A   2300               TST     R16
   \   0000011C   F021               BREQ    ??ExtRS485Rec_4
   \   0000011E   E909               LDI     R16, 153
   \   00000120   E010               LDI     R17, 0
   \   00000122   ........           CALL    OS_Error
   \                     ??ExtRS485Rec_4:
   \   00000126   94F8               cli
   \   00000128   9100....           LDS     R16, (OS_Global + 1)
   \   0000012C   9503               INC     R16
   \   0000012E   9300....           STS     (OS_Global + 1), R16
   \   00000132   2F08               MOV     R16, R24
   \   00000134   9500               COM     R16
   \   00000136   B118               IN      R17, 0x08
   \   00000138   2310               AND     R17, R16
   \   0000013A   B918               OUT     0x08, R17
   \   0000013C   9100....           LDS     R16, (OS_Global + 1)
   \   00000140   7F00               ANDI    R16, 0xF0
   \   00000142   2300               TST     R16
   \   00000144   F021               BREQ    ??ExtRS485Rec_5
   \   00000146   E909               LDI     R16, 153
   \   00000148   E010               LDI     R17, 0
   \   0000014A   ........           CALL    OS_Error
   \                     ??ExtRS485Rec_5:
   \   0000014E   9100....           LDS     R16, (OS_Global + 1)
   \   00000152   950A               DEC     R16
   \   00000154   9300....           STS     (OS_Global + 1), R16
   \   00000158   9100....           LDS     R16, (OS_Global + 1)
   \   0000015C   2300               TST     R16
   \   0000015E   F409               BRNE    ??ExtRS485Rec_6
   \   00000160   9478               sei
    327                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_6:
   \   00000162   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   00000164   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   00000166   E002               LDI     R16, 2
   \   00000168   ........           CALL    OS_SignalEvent
    328                          }
    329                      }
    330                  }
    331                  if (portresp & 0x02) {                  // answer on ch 1
   \                     ??ExtRS485Rec_2:
   \   0000016C   FB91               BST     R25, 1
   \   0000016E   F4EE               BRTC    ??ExtRS485Rec_7
    332                      Usart16552CheckPackage(1);         // handle incomming package
   \   00000170   E001               LDI     R16, 1
   \   00000172   ....               RCALL   Usart16552CheckPackage
    333                      TData.RS4.FailCnt[PortPair + 4][0] = 0; // Reset counter
   \   00000174   9100....           LDS     R16, PortPair
   \   00000178   E010               LDI     R17, 0
   \   0000017A   0F00               LSL     R16
   \   0000017C   1F11               ROL     R17
   \   0000017E   0F00               LSL     R16
   \   00000180   1F11               ROL     R17
   \   00000182   01F8               MOVW    R31:R30, R17:R16
   \   00000184   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000186   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000188   E000               LDI     R16, 0
   \   0000018A   8F03               STD     Z+27, R16
   \   0000018C   E000               LDI     R16, 0
   \   0000018E   8F04               STD     Z+28, R16
    334                      TData.RS4.IOUnitStatus[PortPair + 4] &= ~COMFAIL_BIT; // No error
   \   00000190   9100....           LDS     R16, PortPair
   \   00000194   E010               LDI     R17, 0
   \   00000196   01F8               MOVW    R31:R30, R17:R16
   \   00000198   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000019A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000019C   8107               LDD     R16, Z+7
   \   0000019E   7F0E               ANDI    R16, 0xFE
   \   000001A0   8307               STD     Z+7, R16
    335                      UART16552[1].RxFaultCnt = 0;          // OK package on 16552 channel
   \   000001A2   E000               LDI     R16, 0
   \   000001A4   9300....           STS     (UART16552 + 467), R16
   \   000001A8   C089               RJMP    ??ExtRS485Rec_8
    336                  } else {
    337                      UART16552[1].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_7:
   \   000001AA   9100....           LDS     R16, (UART16552 + 467)
   \   000001AE   9503               INC     R16
   \   000001B0   9300....           STS     (UART16552 + 467), R16
    338                      TData.RS4.FailCnt[PortPair + 4][1]++;      // no answer
   \   000001B4   9100....           LDS     R16, PortPair
   \   000001B8   E010               LDI     R17, 0
   \   000001BA   0F00               LSL     R16
   \   000001BC   1F11               ROL     R17
   \   000001BE   0F00               LSL     R16
   \   000001C0   1F11               ROL     R17
   \   000001C2   01F8               MOVW    R31:R30, R17:R16
   \   000001C4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001C6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001C8   8D05               LDD     R16, Z+29
   \   000001CA   8D16               LDD     R17, Z+30
   \   000001CC   5F0F               SUBI    R16, 255
   \   000001CE   4F1F               SBCI    R17, 255
   \   000001D0   8F05               STD     Z+29, R16
   \   000001D2   8F16               STD     Z+30, R17
    339                      if (TData.RS4.FailCnt[PortPair + 4][0]++ > FAILCNT_ERROR) {
   \   000001D4   9100....           LDS     R16, PortPair
   \   000001D8   2F20               MOV     R18, R16
   \   000001DA   E030               LDI     R19, 0
   \   000001DC   0F22               LSL     R18
   \   000001DE   1F33               ROL     R19
   \   000001E0   0F22               LSL     R18
   \   000001E2   1F33               ROL     R19
   \   000001E4   01F9               MOVW    R31:R30, R19:R18
   \   000001E6   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001E8   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001EA   8DA3               LDD     R26, Z+27
   \   000001EC   8DB4               LDD     R27, Z+28
   \   000001EE   019D               MOVW    R19:R18, R27:R26
   \   000001F0   5F2F               SUBI    R18, 255
   \   000001F2   4F3F               SBCI    R19, 255
   \   000001F4   E010               LDI     R17, 0
   \   000001F6   0F00               LSL     R16
   \   000001F8   1F11               ROL     R17
   \   000001FA   0F00               LSL     R16
   \   000001FC   1F11               ROL     R17
   \   000001FE   01F8               MOVW    R31:R30, R17:R16
   \   00000200   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000202   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000204   8F23               STD     Z+27, R18
   \   00000206   8F34               STD     Z+28, R19
   \   00000208   9716               SBIW    R27:R26, 6
   \   0000020A   F048               BRCS    ??ExtRS485Rec_9
    340                          TData.RS4.IOUnitStatus[PortPair + 4] |= COMFAIL_BIT;      // report fault
   \   0000020C   9100....           LDS     R16, PortPair
   \   00000210   E010               LDI     R17, 0
   \   00000212   01F8               MOVW    R31:R30, R17:R16
   \   00000214   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000216   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000218   8107               LDD     R16, Z+7
   \   0000021A   6001               ORI     R16, 0x01
   \   0000021C   8307               STD     Z+7, R16
    341                      }
    342                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Rec_9:
   \   0000021E   9100....           LDS     R16, TData
   \   00000222   E010               LDI     R17, 0
   \   00000224   9140....           LDS     R20, PortPair
   \   00000228   5F4C               SUBI    R20, 252
   \   0000022A   ........           CALL    ?SS_SHR_L02
   \   0000022E   7001               ANDI    R16, 0x01
   \   00000230   2300               TST     R16
   \   00000232   F409               BRNE    $+2+2
   \   00000234   C043               RJMP    ??ExtRS485Rec_8
    343                          if ((TData.RS4.FailCnt[PortPair + 4][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   00000236   9100....           LDS     R16, PortPair
   \   0000023A   E010               LDI     R17, 0
   \   0000023C   0F00               LSL     R16
   \   0000023E   1F11               ROL     R17
   \   00000240   0F00               LSL     R16
   \   00000242   1F11               ROL     R17
   \   00000244   01F8               MOVW    R31:R30, R17:R16
   \   00000246   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000248   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000024A   8D03               LDD     R16, Z+27
   \   0000024C   8D14               LDD     R17, Z+28
   \   0000024E   7007               ANDI    R16, 0x07
   \   00000250   3004               CPI     R16, 4
   \   00000252   F5A1               BRNE    ??ExtRS485Rec_8
    344                              // volatile undefined behavior
    345                              //        ClrBit(PORTC, (0x01 << (PortPair + 4)));            // Switch off power
    346                              //
    347                              temp = (0x01 << (PortPair + 4));
   \   00000254   9140....           LDS     R20, PortPair
   \   00000258   5F4C               SUBI    R20, 252
   \   0000025A   E001               LDI     R16, 1
   \   0000025C   E010               LDI     R17, 0
   \   0000025E   ........           CALL    ?S_SHL_L02
   \   00000262   2F80               MOV     R24, R16
    348                              ClrBit(PORTC, temp);            // Switch off power
   \   00000264   9100....           LDS     R16, (OS_Global + 1)
   \   00000268   7F00               ANDI    R16, 0xF0
   \   0000026A   2300               TST     R16
   \   0000026C   F021               BREQ    ??ExtRS485Rec_10
   \   0000026E   E909               LDI     R16, 153
   \   00000270   E010               LDI     R17, 0
   \   00000272   ........           CALL    OS_Error
   \                     ??ExtRS485Rec_10:
   \   00000276   94F8               cli
   \   00000278   9100....           LDS     R16, (OS_Global + 1)
   \   0000027C   9503               INC     R16
   \   0000027E   9300....           STS     (OS_Global + 1), R16
   \   00000282   2F08               MOV     R16, R24
   \   00000284   9500               COM     R16
   \   00000286   B118               IN      R17, 0x08
   \   00000288   2310               AND     R17, R16
   \   0000028A   B918               OUT     0x08, R17
   \   0000028C   9100....           LDS     R16, (OS_Global + 1)
   \   00000290   7F00               ANDI    R16, 0xF0
   \   00000292   2300               TST     R16
   \   00000294   F021               BREQ    ??ExtRS485Rec_11
   \   00000296   E909               LDI     R16, 153
   \   00000298   E010               LDI     R17, 0
   \   0000029A   ........           CALL    OS_Error
   \                     ??ExtRS485Rec_11:
   \   0000029E   9100....           LDS     R16, (OS_Global + 1)
   \   000002A2   950A               DEC     R16
   \   000002A4   9300....           STS     (OS_Global + 1), R16
   \   000002A8   9100....           LDS     R16, (OS_Global + 1)
   \   000002AC   2300               TST     R16
   \   000002AE   F409               BRNE    ??ExtRS485Rec_12
   \   000002B0   9478               sei
    349                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_12:
   \   000002B2   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000002B4   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000002B6   E002               LDI     R16, 2
   \   000002B8   ........           CALL    OS_SignalEvent
    350                          }
    351                      }
    352                  }
    353                  OS_SignalEvent(1, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_8:
   \   000002BC   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000002BE   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000002C0   E001               LDI     R16, 1
   \   000002C2   ........           CALL    OS_SignalEvent
   \   000002C6   CEA2               RJMP    ??ExtRS485Rec_0
   \   000002C8                      REQUIRE _A_PORTC
    354              }
    355          }
    356          
    357          /*************************************************************************
    358          *
    359          *  Set ports on or off
    360          *
    361          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    362          void SetRS4Port(void) {
   \                     SetRS4Port:
    363          
    364              PORTC = TData.RS4.PortUsed;
   \   00000000   9100....           LDS     R16, TData
   \   00000004   B908               OUT     0x08, R16
    365          
    366          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_PORTC
    367          
    368          /*************************************************************************
    369          *
    370          *  Check the incoming packages from AN_SGCNV / WIS
    371          *
    372          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    373          void Usart16552CheckPackage(char ch) {
   \                     Usart16552CheckPackage:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
    374          
    375              unsigned short pointer = 4;
   \   00000006   E084               LDI     R24, 4
   \   00000008   E090               LDI     R25, 0
    376              char count_out  = MAX_PROT_CMD;// max command
   \   0000000A   EFBF               LDI     R27, 255
    377              char more       = true;
   \   0000000C   E0A1               LDI     R26, 1
    378          
    379              do {
    380                  if (!CheckActionUart16552(ch, pointer)) {
   \                     ??Usart16552CheckPackage_0:
   \   0000000E   019C               MOVW    R19:R18, R25:R24
   \   00000010   2D04               MOV     R16, R4
   \   00000012   ....               RCALL   CheckActionUart16552
   \   00000014   2300               TST     R16
   \   00000016   F409               BRNE    ??Usart16552CheckPackage_1
    381                      more = false;                          // terminate while loop
   \   00000018   E0A0               LDI     R26, 0
    382                  }
    383                  pointer += UART16552[ch].pRxBuffer[pointer + 1] + 2;            // Point to a command cmd hb/lb
   \                     ??Usart16552CheckPackage_1:
   \   0000001A   ....               LDI     R30, LOW((UART16552 + 69))
   \   0000001C   ....               LDI     R31, HIGH((UART16552 + 69))
   \   0000001E   0FE8               ADD     R30, R24
   \   00000020   1FF9               ADC     R31, R25
   \   00000022   2D04               MOV     R16, R4
   \   00000024   E010               LDI     R17, 0
   \   00000026   E04B               LDI     R20, 11
   \   00000028   E051               LDI     R21, 1
   \   0000002A   ........           CALL    ?S_EC_MUL_L02
   \   0000002E   0FE0               ADD     R30, R16
   \   00000030   1FF1               ADC     R31, R17
   \   00000032   8100               LD      R16, Z
   \   00000034   2FE0               MOV     R30, R16
   \   00000036   E0F0               LDI     R31, 0
   \   00000038   9632               ADIW    R31:R30, 2
   \   0000003A   0F8E               ADD     R24, R30
   \   0000003C   1F9F               ADC     R25, R31
    384                  if (!--count_out) {
   \   0000003E   95BA               DEC     R27
   \   00000040   23BB               TST     R27
   \   00000042   F409               BRNE    ??Usart16552CheckPackage_2
    385                      more = false;
   \   00000044   E0A0               LDI     R26, 0
    386                  }
    387              } while (more && (pointer < UART16552[ch].RxPacklen - 3));
   \                     ??Usart16552CheckPackage_2:
   \   00000046   23AA               TST     R26
   \   00000048   F081               BREQ    ??Usart16552CheckPackage_3
   \   0000004A   2D04               MOV     R16, R4
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   E04B               LDI     R20, 11
   \   00000050   E051               LDI     R21, 1
   \   00000052   ........           CALL    ?S_EC_MUL_L02
   \   00000056   01F8               MOVW    R31:R30, R17:R16
   \   00000058   ....               SUBI    R30, LOW((-(UART16552 + 198) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, HIGH((-(UART16552 + 198) & 0xFFFF))
   \   0000005C   8100               LD      R16, Z
   \   0000005E   8111               LDD     R17, Z+1
   \   00000060   5003               SUBI    R16, 3
   \   00000062   4010               SBCI    R17, 0
   \   00000064   1780               CP      R24, R16
   \   00000066   0791               CPC     R25, R17
   \   00000068   F290               BRCS    ??Usart16552CheckPackage_0
    388              GoToSyncUART16552(ch);
   \                     ??Usart16552CheckPackage_3:
   \   0000006A   2D04               MOV     R16, R4
   \   0000006C   ....               RCALL   GoToSyncUART16552
    389          }
   \   0000006E   E0E5               LDI     R30, 5
   \   00000070   ........           JMP     ?EPILOGUE_B5_L09
    390          
    391          
    392          
    393          /*************************************************************************
    394          *
    395          *  Check action on received data from AN_SGCNV
    396          *
    397          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    398          char CheckActionUart16552(char ch, unsigned short pointer) {
   \                     CheckActionUart16552:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    399          
    400              char retval = true;
   \   00000008   E0B1               LDI     R27, 1
    401          
    402              switch (UART16552[ch].pRxBuffer[pointer]) {    // check action
   \   0000000A   ....               LDI     R30, LOW((UART16552 + 68))
   \   0000000C   ....               LDI     R31, HIGH((UART16552 + 68))
   \   0000000E   0FE8               ADD     R30, R24
   \   00000010   1FF9               ADC     R31, R25
   \   00000012   2F0A               MOV     R16, R26
   \   00000014   E010               LDI     R17, 0
   \   00000016   E04B               LDI     R20, 11
   \   00000018   E051               LDI     R21, 1
   \   0000001A   ........           CALL    ?S_EC_MUL_L02
   \   0000001E   0FE0               ADD     R30, R16
   \   00000020   1FF1               ADC     R31, R17
   \   00000022   8100               LD      R16, Z
   \   00000024   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart16552>_0`)
   \   00000026   ....               LDI     R31, (`?<Jumptable for CheckActionUart16552>_0`) >> 16
   \   00000028   BFFB               OUT     0x3B, R31
   \   0000002A   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart16552>_0`)
   \   0000002C   ........           JMP     ?CV_SWITCH_L06
    403          
    404              case ANP1_REP_MP_DATA :                              // Measured pressure data
    405              case ANP1_REP_MT_DATA :                              // Measured temperature data
    406              case ANP1_REP_MO_DATA :                              // Measured "other" data
    407                  ReceivePTOData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_0:
   \   00000030   019C               MOVW    R19:R18, R25:R24
   \   00000032   5F2E               SUBI    R18, 254
   \   00000034   4F3F               SBCI    R19, 255
   \   00000036   2F0A               MOV     R16, R26
   \   00000038   ....               RCALL   ReceivePTOData
    408                  break;
   \   0000003A   C043               RJMP    ??CheckActionUart16552_1
    409              case ANP1_REP_WH_DATA :                              // Measured "washtrack and high level" data
    410                  ReceiveWHData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_2:
   \   0000003C   019C               MOVW    R19:R18, R25:R24
   \   0000003E   5F2E               SUBI    R18, 254
   \   00000040   4F3F               SBCI    R19, 255
   \   00000042   2F0A               MOV     R16, R26
   \   00000044   ....               RCALL   ReceiveWHData
    411                  break;
   \   00000046   C03D               RJMP    ??CheckActionUart16552_1
    412              case ANP1_REP_RP_DATA :                              // Raw pressure data
    413              case ANP1_REP_RT_DATA :                              // Raw temp. data
    414              case ANP1_REP_RO_DATA :                              // Raw "other" data
    415                  ReceiveRData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_3:
   \   00000048   019C               MOVW    R19:R18, R25:R24
   \   0000004A   5F2E               SUBI    R18, 254
   \   0000004C   4F3F               SBCI    R19, 255
   \   0000004E   2F0A               MOV     R16, R26
   \   00000050   ....               RCALL   ReceiveRData
    416                  break;
   \   00000052   C037               RJMP    ??CheckActionUart16552_1
    417              case ANP1_REP_CAL_DATA :                             // Raw "other" data
    418                  ReceiveCData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_4:
   \   00000054   019C               MOVW    R19:R18, R25:R24
   \   00000056   5F2E               SUBI    R18, 254
   \   00000058   4F3F               SBCI    R19, 255
   \   0000005A   2F0A               MOV     R16, R26
   \   0000005C   ....               RCALL   ReceiveCData
    419                  break;
   \   0000005E   C031               RJMP    ??CheckActionUart16552_1
    420          
    421              case ANP1_REP_CARD_STAT :                             // card status package
    422                  ReceiveCardStatus(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_5:
   \   00000060   019C               MOVW    R19:R18, R25:R24
   \   00000062   5F2E               SUBI    R18, 254
   \   00000064   4F3F               SBCI    R19, 255
   \   00000066   2F0A               MOV     R16, R26
   \   00000068   ....               RCALL   ReceiveCardStatus
    423                  break;
   \   0000006A   C02B               RJMP    ??CheckActionUart16552_1
    424          
    425              case ANP1_REP_CONFIG :                             // config data
    426                  ReceiveConfigData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_6:
   \   0000006C   019C               MOVW    R19:R18, R25:R24
   \   0000006E   5F2E               SUBI    R18, 254
   \   00000070   4F3F               SBCI    R19, 255
   \   00000072   2F0A               MOV     R16, R26
   \   00000074   ....               RCALL   ReceiveConfigData
    427                  break;
   \   00000076   C025               RJMP    ??CheckActionUart16552_1
    428          
    429              case ANP1_REP_EEP_DATA :                             // card eeprome
    430                  ReceiveCardEEPROMData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_7:
   \   00000078   019C               MOVW    R19:R18, R25:R24
   \   0000007A   5F2E               SUBI    R18, 254
   \   0000007C   4F3F               SBCI    R19, 255
   \   0000007E   2F0A               MOV     R16, R26
   \   00000080   ....               RCALL   ReceiveCardEEPROMData
    431                  break;
   \   00000082   C01F               RJMP    ??CheckActionUart16552_1
    432          
    433              case ANP1_REP_WIS_STAT :                             // Card status from WIS
    434                  ReceiveWISStatus(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_8:
   \   00000084   019C               MOVW    R19:R18, R25:R24
   \   00000086   5F2E               SUBI    R18, 254
   \   00000088   4F3F               SBCI    R19, 255
   \   0000008A   2F0A               MOV     R16, R26
   \   0000008C   ....               RCALL   ReceiveWISStatus
    435                  break;
   \   0000008E   C019               RJMP    ??CheckActionUart16552_1
    436          
    437              case ANP1_REP_WIS_XDATA :                             // Card WIS protocol
    438                  ReceiveWISXData(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_9:
   \   00000090   019C               MOVW    R19:R18, R25:R24
   \   00000092   5F2E               SUBI    R18, 254
   \   00000094   4F3F               SBCI    R19, 255
   \   00000096   2F0A               MOV     R16, R26
   \   00000098   ....               RCALL   ReceiveWISXData
    439                  break;
   \   0000009A   C013               RJMP    ??CheckActionUart16552_1
    440          
    441              case ANP1_REP_WIS_DATA :                             // Data from WIS
    442                  ReceiveWISData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_10:
   \   0000009C   019C               MOVW    R19:R18, R25:R24
   \   0000009E   5F2E               SUBI    R18, 254
   \   000000A0   4F3F               SBCI    R19, 255
   \   000000A2   2F0A               MOV     R16, R26
   \   000000A4   ....               RCALL   ReceiveWISData
    443                  break;
   \   000000A6   C00D               RJMP    ??CheckActionUart16552_1
    444              case ANP1_REP_GODA_DATA:
    445                  ReceiveRadarData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_11:
   \   000000A8   019C               MOVW    R19:R18, R25:R24
   \   000000AA   5F2E               SUBI    R18, 254
   \   000000AC   4F3F               SBCI    R19, 255
   \   000000AE   2F0A               MOV     R16, R26
   \   000000B0   ....               RCALL   ReceiveRadarData
    446                  break;
   \   000000B2   C007               RJMP    ??CheckActionUart16552_1
    447              case ANP1_REP_GODA_INFO:
    448                  ReceiveRadarInfo(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_12:
   \   000000B4   019C               MOVW    R19:R18, R25:R24
   \   000000B6   5F2E               SUBI    R18, 254
   \   000000B8   4F3F               SBCI    R19, 255
   \   000000BA   2F0A               MOV     R16, R26
   \   000000BC   ....               RCALL   ReceiveRadarInfo
    449                  break;
   \   000000BE   C001               RJMP    ??CheckActionUart16552_1
    450              case ANP1_ECMD_NMDRQACK :                             // No more data, send ack.
    451              case ANP1_ECMD_NMDWOACK :                         // No more data
    452                  retval = false;
   \                     ??CheckActionUart16552_13:
   \   000000C0   E0B0               LDI     R27, 0
    453                  break;
    454              }
    455              return retval;
   \                     ??CheckActionUart16552_1:
   \   000000C2   2F0B               MOV     R16, R27
   \   000000C4   E0E4               LDI     R30, 4
   \   000000C6   ........           JMP     ?EPILOGUE_B4_L09
    456          }
    457          
    458          /*************************************************************************
    459          *
    460          *  Receive card status from WIS
    461          *
    462          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    463          void ReceiveWISStatus(char ch, unsigned short pointer) {
   \                     ReceiveWISStatus:
   \   00000000   2F60               MOV     R22, R16
    464          
    465              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] |= UART16552[ch].pRxBuffer[pointer];
   \   00000002   9020....           LDS     R2, PortPair
   \   00000006   ....               LDI     R30, LOW((UART16552 + 68))
   \   00000008   ....               LDI     R31, HIGH((UART16552 + 68))
   \   0000000A   0FE2               ADD     R30, R18
   \   0000000C   1FF3               ADC     R31, R19
   \   0000000E   2F06               MOV     R16, R22
   \   00000010   E010               LDI     R17, 0
   \   00000012   E04B               LDI     R20, 11
   \   00000014   E051               LDI     R21, 1
   \   00000016   ........           CALL    ?S_EC_MUL_L02
   \   0000001A   0FE0               ADD     R30, R16
   \   0000001C   1FF1               ADC     R31, R17
   \   0000001E   8140               LD      R20, Z
   \   00000020   2F06               MOV     R16, R22
   \   00000022   E010               LDI     R17, 0
   \   00000024   0F00               LSL     R16
   \   00000026   1F11               ROL     R17
   \   00000028   0F00               LSL     R16
   \   0000002A   1F11               ROL     R17
   \   0000002C   2433               CLR     R3
   \   0000002E   0D02               ADD     R16, R2
   \   00000030   1D13               ADC     R17, R3
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000036   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000038   A503               LDD     R16, Z+43
   \   0000003A   2B04               OR      R16, R20
   \   0000003C   A703               STD     Z+43, R16
    466              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000003E   ....               LDI     R30, LOW((UART16552 + 69))
   \   00000040   ....               LDI     R31, HIGH((UART16552 + 69))
   \   00000042   0FE2               ADD     R30, R18
   \   00000044   1FF3               ADC     R31, R19
   \   00000046   2F06               MOV     R16, R22
   \   00000048   E010               LDI     R17, 0
   \   0000004A   E04B               LDI     R20, 11
   \   0000004C   E051               LDI     R21, 1
   \   0000004E   ........           CALL    ?S_EC_MUL_L02
   \   00000052   0FE0               ADD     R30, R16
   \   00000054   1FF1               ADC     R31, R17
   \   00000056   8170               LD      R23, Z
   \   00000058   2F06               MOV     R16, R22
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   0F00               LSL     R16
   \   0000005E   1F11               ROL     R17
   \   00000060   0F00               LSL     R16
   \   00000062   1F11               ROL     R17
   \   00000064   9140....           LDS     R20, PortPair
   \   00000068   E050               LDI     R21, 0
   \   0000006A   0F04               ADD     R16, R20
   \   0000006C   1F15               ADC     R17, R21
   \   0000006E   01F8               MOVW    R31:R30, R17:R16
   \   00000070   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000072   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000074   AB73               STD     Z+51, R23
    467              if (UART16552[ch].pRxBuffer[pointer + 4]) {
   \   00000076   ....               LDI     R30, LOW((UART16552 + 72))
   \   00000078   ....               LDI     R31, HIGH((UART16552 + 72))
   \   0000007A   0FE2               ADD     R30, R18
   \   0000007C   1FF3               ADC     R31, R19
   \   0000007E   2F06               MOV     R16, R22
   \   00000080   E010               LDI     R17, 0
   \   00000082   E04B               LDI     R20, 11
   \   00000084   E051               LDI     R21, 1
   \   00000086   ........           CALL    ?S_EC_MUL_L02
   \   0000008A   0FE0               ADD     R30, R16
   \   0000008C   1FF1               ADC     R31, R17
   \   0000008E   8100               LD      R16, Z
   \   00000090   2300               TST     R16
   \   00000092   F089               BREQ    ??ReceiveWISStatus_0
    468                  TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] |= 0x80;
   \   00000094   9140....           LDS     R20, PortPair
   \   00000098   2F06               MOV     R16, R22
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   0F00               LSL     R16
   \   0000009E   1F11               ROL     R17
   \   000000A0   0F00               LSL     R16
   \   000000A2   1F11               ROL     R17
   \   000000A4   E050               LDI     R21, 0
   \   000000A6   0F04               ADD     R16, R20
   \   000000A8   1F15               ADC     R17, R21
   \   000000AA   01F8               MOVW    R31:R30, R17:R16
   \   000000AC   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000AE   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000B0   A903               LDD     R16, Z+51
   \   000000B2   6800               ORI     R16, 0x80
   \   000000B4   AB03               STD     Z+51, R16
    469              }
    470          }
   \                     ??ReceiveWISStatus_0:
   \   000000B6   9508               RET
    471          
    472          /*************************************************************************
    473          *
    474          *  Receive WIS protocol data
    475          *
    476          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    477          void ReceiveWISXData(char ch, unsigned short pointer) {
   \                     ReceiveWISXData:
   \   00000000   011C               MOVW    R3:R2, R25:R24
   \   00000002   2F60               MOV     R22, R16
   \   00000004   01C9               MOVW    R25:R24, R19:R18
    478          
    479              char i;
    480          
    481              switch (UART16552[ch].pRxBuffer[pointer++]) {
   \   00000006   018C               MOVW    R17:R16, R25:R24
   \   00000008   01C8               MOVW    R25:R24, R17:R16
   \   0000000A   9601               ADIW    R25:R24, 1
   \   0000000C   ....               LDI     R30, LOW((UART16552 + 68))
   \   0000000E   ....               LDI     R31, HIGH((UART16552 + 68))
   \   00000010   0FE0               ADD     R30, R16
   \   00000012   1FF1               ADC     R31, R17
   \   00000014   2F06               MOV     R16, R22
   \   00000016   E010               LDI     R17, 0
   \   00000018   E04B               LDI     R20, 11
   \   0000001A   E051               LDI     R21, 1
   \   0000001C   ........           CALL    ?S_EC_MUL_L02
   \   00000020   0FE0               ADD     R30, R16
   \   00000022   1FF1               ADC     R31, R17
   \   00000024   8100               LD      R16, Z
   \   00000026   3703               CPI     R16, 115
   \   00000028   F5E1               BRNE    ??ReceiveWISXData_0
    482              case 115:                                     // Serial number
    483                  TData.RS4.FromTargetBuffer[ch][0] = true;
   \   0000002A   2F06               MOV     R16, R22
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   E342               LDI     R20, 50
   \   00000030   E050               LDI     R21, 0
   \   00000032   ........           CALL    ?S_EC_MUL_L02
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(TData + 1428) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, HIGH((-(TData + 1428) & 0xFFFF))
   \   0000003C   E001               LDI     R16, 1
   \   0000003E   8300               ST      Z, R16
    484                  TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   00000040   E004               LDI     R16, 4
   \   00000042   9F60               MUL     R22, R16
   \   00000044   2D30               MOV     R19, R0
   \   00000046   9100....           LDS     R16, PortPair
   \   0000004A   0F30               ADD     R19, R16
   \   0000004C   2F06               MOV     R16, R22
   \   0000004E   E010               LDI     R17, 0
   \   00000050   E342               LDI     R20, 50
   \   00000052   E050               LDI     R21, 0
   \   00000054   ........           CALL    ?S_EC_MUL_L02
   \   00000058   01F8               MOVW    R31:R30, R17:R16
   \   0000005A   ....               SUBI    R30, LOW((-(TData + 1429) & 0xFFFF))
   \   0000005C   ....               SBCI    R31, HIGH((-(TData + 1429) & 0xFFFF))
   \   0000005E   8330               ST      Z, R19
    485                  for (i = 2; i < (4 + 2); i++) {
   \   00000060   E022               LDI     R18, 2
   \                     ??ReceiveWISXData_1:
   \   00000062   3026               CPI     R18, 6
   \   00000064   F4F0               BRCC    ??ReceiveWISXData_0
    486                      TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \   00000066   ....               LDI     R30, LOW((UART16552 + 68))
   \   00000068   ....               LDI     R31, HIGH((UART16552 + 68))
   \   0000006A   0FE8               ADD     R30, R24
   \   0000006C   1FF9               ADC     R31, R25
   \   0000006E   2F06               MOV     R16, R22
   \   00000070   E010               LDI     R17, 0
   \   00000072   E04B               LDI     R20, 11
   \   00000074   E051               LDI     R21, 1
   \   00000076   ........           CALL    ?S_EC_MUL_L02
   \   0000007A   0FE0               ADD     R30, R16
   \   0000007C   1FF1               ADC     R31, R17
   \   0000007E   8170               LD      R23, Z
   \   00000080   ....               LDI     R30, LOW((TData + 1428))
   \   00000082   ....               LDI     R31, HIGH((TData + 1428))
   \   00000084   E030               LDI     R19, 0
   \   00000086   0FE2               ADD     R30, R18
   \   00000088   1FF3               ADC     R31, R19
   \   0000008A   2F06               MOV     R16, R22
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   E342               LDI     R20, 50
   \   00000090   E050               LDI     R21, 0
   \   00000092   ........           CALL    ?S_EC_MUL_L02
   \   00000096   0FE0               ADD     R30, R16
   \   00000098   1FF1               ADC     R31, R17
   \   0000009A   8370               ST      Z, R23
   \   0000009C   9601               ADIW    R25:R24, 1
    487                  }
   \   0000009E   9523               INC     R18
   \   000000A0   CFE0               RJMP    ??ReceiveWISXData_1
    488                  break;
    489              default:
    490                  break;
    491              }
    492          }
   \                     ??ReceiveWISXData_0:
   \   000000A2   01C1               MOVW    R25:R24, R3:R2
   \   000000A4   9508               RET
    493          
    494          /*************************************************************************
    495          *
    496          *  Receive measured data from WIS
    497          *
    498          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    499          void ReceiveWISData(char ch, unsigned short pointer) {
   \                     ReceiveWISData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    500          
    501              TData.RS4.Result[(ch * 4) + PortPair][0] = (float)UART16552[ch].pRxBuffer[pointer + 0];       // Water detected
   \   00000008   ....               LDI     R30, LOW((UART16552 + 68))
   \   0000000A   ....               LDI     R31, HIGH((UART16552 + 68))
   \   0000000C   0FE8               ADD     R30, R24
   \   0000000E   1FF9               ADC     R31, R25
   \   00000010   2F0A               MOV     R16, R26
   \   00000012   E010               LDI     R17, 0
   \   00000014   E04B               LDI     R20, 11
   \   00000016   E051               LDI     R21, 1
   \   00000018   ........           CALL    ?S_EC_MUL_L02
   \   0000001C   0FE0               ADD     R30, R16
   \   0000001E   1FF1               ADC     R31, R17
   \   00000020   8100               LD      R16, Z
   \   00000022   E010               LDI     R17, 0
   \   00000024   E020               LDI     R18, 0
   \   00000026   E030               LDI     R19, 0
   \   00000028   ........           CALL    ?UL2F_L04
   \   0000002C   0128               MOVW    R5:R4, R17:R16
   \   0000002E   0139               MOVW    R7:R6, R19:R18
   \   00000030   2F0A               MOV     R16, R26
   \   00000032   E010               LDI     R17, 0
   \   00000034   0F00               LSL     R16
   \   00000036   1F11               ROL     R17
   \   00000038   0F00               LSL     R16
   \   0000003A   1F11               ROL     R17
   \   0000003C   9120....           LDS     R18, PortPair
   \   00000040   E030               LDI     R19, 0
   \   00000042   0F02               ADD     R16, R18
   \   00000044   1F13               ADC     R17, R19
   \   00000046   E348               LDI     R20, 56
   \   00000048   E050               LDI     R21, 0
   \   0000004A   ........           CALL    ?S_EC_MUL_L02
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   00000052   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   00000054   8240               ST      Z, R4
   \   00000056   8251               STD     Z+1, R5
   \   00000058   8262               STD     Z+2, R6
   \   0000005A   8273               STD     Z+3, R7
    502              TData.RS4.Result[(ch * 4) + PortPair][1] = (float)((UART16552[ch].pRxBuffer[pointer + 1] << 8) // Temperature
    503                                                                 + UART16552[ch].pRxBuffer[pointer + 2]) / 10.0;
   \   0000005C   ....               LDI     R30, LOW((UART16552 + 69))
   \   0000005E   ....               LDI     R31, HIGH((UART16552 + 69))
   \   00000060   0FE8               ADD     R30, R24
   \   00000062   1FF9               ADC     R31, R25
   \   00000064   2F0A               MOV     R16, R26
   \   00000066   E010               LDI     R17, 0
   \   00000068   E04B               LDI     R20, 11
   \   0000006A   E051               LDI     R21, 1
   \   0000006C   ........           CALL    ?S_EC_MUL_L02
   \   00000070   0FE0               ADD     R30, R16
   \   00000072   1FF1               ADC     R31, R17
   \   00000074   8130               LD      R19, Z
   \   00000076   E020               LDI     R18, 0
   \   00000078   ....               LDI     R30, LOW((UART16552 + 70))
   \   0000007A   ....               LDI     R31, HIGH((UART16552 + 70))
   \   0000007C   0FE8               ADD     R30, R24
   \   0000007E   1FF9               ADC     R31, R25
   \   00000080   2F0A               MOV     R16, R26
   \   00000082   E010               LDI     R17, 0
   \   00000084   E04B               LDI     R20, 11
   \   00000086   E051               LDI     R21, 1
   \   00000088   ........           CALL    ?S_EC_MUL_L02
   \   0000008C   0FE0               ADD     R30, R16
   \   0000008E   1FF1               ADC     R31, R17
   \   00000090   8100               LD      R16, Z
   \   00000092   E010               LDI     R17, 0
   \   00000094   0F20               ADD     R18, R16
   \   00000096   1F31               ADC     R19, R17
   \   00000098   0189               MOVW    R17:R16, R19:R18
   \   0000009A   2F21               MOV     R18, R17
   \   0000009C   0F22               LSL     R18
   \   0000009E   0B22               SBC     R18, R18
   \   000000A0   2F32               MOV     R19, R18
   \   000000A2   ........           CALL    ?SL2F_L04
   \   000000A6   E040               LDI     R20, 0
   \   000000A8   E050               LDI     R21, 0
   \   000000AA   E260               LDI     R22, 32
   \   000000AC   E471               LDI     R23, 65
   \   000000AE   ........           CALL    ?F_DIV_L04
   \   000000B2   0128               MOVW    R5:R4, R17:R16
   \   000000B4   0139               MOVW    R7:R6, R19:R18
   \   000000B6   2F0A               MOV     R16, R26
   \   000000B8   E010               LDI     R17, 0
   \   000000BA   0F00               LSL     R16
   \   000000BC   1F11               ROL     R17
   \   000000BE   0F00               LSL     R16
   \   000000C0   1F11               ROL     R17
   \   000000C2   9120....           LDS     R18, PortPair
   \   000000C6   E030               LDI     R19, 0
   \   000000C8   0F02               ADD     R16, R18
   \   000000CA   1F13               ADC     R17, R19
   \   000000CC   E348               LDI     R20, 56
   \   000000CE   E050               LDI     R21, 0
   \   000000D0   ........           CALL    ?S_EC_MUL_L02
   \   000000D4   01F8               MOVW    R31:R30, R17:R16
   \   000000D6   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   000000D8   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   000000DA   8240               ST      Z, R4
   \   000000DC   8251               STD     Z+1, R5
   \   000000DE   8262               STD     Z+2, R6
   \   000000E0   8273               STD     Z+3, R7
    504              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 3];         // Status
   \   000000E2   ....               LDI     R30, LOW((UART16552 + 71))
   \   000000E4   ....               LDI     R31, HIGH((UART16552 + 71))
   \   000000E6   0FE8               ADD     R30, R24
   \   000000E8   1FF9               ADC     R31, R25
   \   000000EA   2F0A               MOV     R16, R26
   \   000000EC   E010               LDI     R17, 0
   \   000000EE   E04B               LDI     R20, 11
   \   000000F0   E051               LDI     R21, 1
   \   000000F2   ........           CALL    ?S_EC_MUL_L02
   \   000000F6   0FE0               ADD     R30, R16
   \   000000F8   1FF1               ADC     R31, R17
   \   000000FA   8160               LD      R22, Z
   \   000000FC   2F0A               MOV     R16, R26
   \   000000FE   E010               LDI     R17, 0
   \   00000100   0F00               LSL     R16
   \   00000102   1F11               ROL     R17
   \   00000104   0F00               LSL     R16
   \   00000106   1F11               ROL     R17
   \   00000108   9120....           LDS     R18, PortPair
   \   0000010C   E030               LDI     R19, 0
   \   0000010E   0F02               ADD     R16, R18
   \   00000110   1F13               ADC     R17, R19
   \   00000112   E04E               LDI     R20, 14
   \   00000114   E050               LDI     R21, 0
   \   00000116   ........           CALL    ?S_EC_MUL_L02
   \   0000011A   01F8               MOVW    R31:R30, R17:R16
   \   0000011C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000011E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000120   AF63               STD     Z+59, R22
    505              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = 0;                                            // Unused
   \   00000122   2F0A               MOV     R16, R26
   \   00000124   E010               LDI     R17, 0
   \   00000126   0F00               LSL     R16
   \   00000128   1F11               ROL     R17
   \   0000012A   0F00               LSL     R16
   \   0000012C   1F11               ROL     R17
   \   0000012E   9120....           LDS     R18, PortPair
   \   00000132   E030               LDI     R19, 0
   \   00000134   0F02               ADD     R16, R18
   \   00000136   1F13               ADC     R17, R19
   \   00000138   E04E               LDI     R20, 14
   \   0000013A   E050               LDI     R21, 0
   \   0000013C   ........           CALL    ?S_EC_MUL_L02
   \   00000140   01F8               MOVW    R31:R30, R17:R16
   \   00000142   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   00000144   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   00000146   E000               LDI     R16, 0
   \   00000148   8300               ST      Z, R16
    506          }
   \   0000014A   E0E8               LDI     R30, 8
   \   0000014C   ........           JMP     ?EPILOGUE_B8_L09
    507          
    508          
    509          /*************************************************************************
    510          *
    511          *  Receive measured data from Radar
    512          *
    513          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    514          void ReceiveRadarData(char ch, unsigned short pointer) {
   \                     ReceiveRadarData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
    515              float *Data1 = (float *)&UART16552[ch].pRxBuffer[pointer + 0];
   \   00000008   ....               LDI     R18, LOW((UART16552 + 68))
   \   0000000A   ....               LDI     R19, HIGH((UART16552 + 68))
   \   0000000C   0F26               ADD     R18, R22
   \   0000000E   1F37               ADC     R19, R23
   \   00000010   2D02               MOV     R16, R2
   \   00000012   E010               LDI     R17, 0
   \   00000014   E04B               LDI     R20, 11
   \   00000016   E051               LDI     R21, 1
   \   00000018   ........           CALL    ?S_EC_MUL_L02
   \   0000001C   0F20               ADD     R18, R16
   \   0000001E   1F31               ADC     R19, R17
    516              float *Data2 = (float *)&UART16552[ch].pRxBuffer[pointer + 4];
   \   00000020   ....               LDI     R30, LOW((UART16552 + 72))
   \   00000022   ....               LDI     R31, HIGH((UART16552 + 72))
   \   00000024   0FE6               ADD     R30, R22
   \   00000026   1FF7               ADC     R31, R23
   \   00000028   2D02               MOV     R16, R2
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   E04B               LDI     R20, 11
   \   0000002E   E051               LDI     R21, 1
   \   00000030   ........           CALL    ?S_EC_MUL_L02
   \   00000034   0FE0               ADD     R30, R16
   \   00000036   1FF1               ADC     R31, R17
    517          
    518              TData.RS4.Result[(ch * 4) + PortPair][0] = *Data1;       // Distance
   \   00000038   01D9               MOVW    R27:R26, R19:R18
   \   0000003A   904D               LD      R4, X+
   \   0000003C   905D               LD      R5, X+
   \   0000003E   906D               LD      R6, X+
   \   00000040   907C               LD      R7, X
   \   00000042   9713               SBIW    R27:R26, 3
   \   00000044   2D02               MOV     R16, R2
   \   00000046   E010               LDI     R17, 0
   \   00000048   0F00               LSL     R16
   \   0000004A   1F11               ROL     R17
   \   0000004C   0F00               LSL     R16
   \   0000004E   1F11               ROL     R17
   \   00000050   9140....           LDS     R20, PortPair
   \   00000054   E050               LDI     R21, 0
   \   00000056   0F04               ADD     R16, R20
   \   00000058   1F15               ADC     R17, R21
   \   0000005A   E348               LDI     R20, 56
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01D8               MOVW    R27:R26, R17:R16
   \   00000064   ....               SUBI    R26, LOW((-(TData + 731) & 0xFFFF))
   \   00000066   ....               SBCI    R27, HIGH((-(TData + 731) & 0xFFFF))
   \   00000068   924D               ST      X+, R4
   \   0000006A   925D               ST      X+, R5
   \   0000006C   926D               ST      X+, R6
   \   0000006E   927C               ST      X, R7
   \   00000070   9713               SBIW    R27:R26, 3
    519              TData.RS4.Result[(ch * 4) + PortPair][1] = *Data2;      // Level
   \   00000072   8040               LD      R4, Z
   \   00000074   8051               LDD     R5, Z+1
   \   00000076   8062               LDD     R6, Z+2
   \   00000078   8073               LDD     R7, Z+3
   \   0000007A   2D02               MOV     R16, R2
   \   0000007C   E010               LDI     R17, 0
   \   0000007E   0F00               LSL     R16
   \   00000080   1F11               ROL     R17
   \   00000082   0F00               LSL     R16
   \   00000084   1F11               ROL     R17
   \   00000086   9140....           LDS     R20, PortPair
   \   0000008A   E050               LDI     R21, 0
   \   0000008C   0F04               ADD     R16, R20
   \   0000008E   1F15               ADC     R17, R21
   \   00000090   E348               LDI     R20, 56
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01D8               MOVW    R27:R26, R17:R16
   \   0000009A   ....               SUBI    R26, LOW((-(TData + 735) & 0xFFFF))
   \   0000009C   ....               SBCI    R27, HIGH((-(TData + 735) & 0xFFFF))
   \   0000009E   924D               ST      X+, R4
   \   000000A0   925D               ST      X+, R5
   \   000000A2   926D               ST      X+, R6
   \   000000A4   927C               ST      X, R7
   \   000000A6   9713               SBIW    R27:R26, 3
    520              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 8];         // Status
   \   000000A8   ....               LDI     R26, LOW((UART16552 + 76))
   \   000000AA   ....               LDI     R27, HIGH((UART16552 + 76))
   \   000000AC   0FA6               ADD     R26, R22
   \   000000AE   1FB7               ADC     R27, R23
   \   000000B0   2D02               MOV     R16, R2
   \   000000B2   E010               LDI     R17, 0
   \   000000B4   E04B               LDI     R20, 11
   \   000000B6   E051               LDI     R21, 1
   \   000000B8   ........           CALL    ?S_EC_MUL_L02
   \   000000BC   0FA0               ADD     R26, R16
   \   000000BE   1FB1               ADC     R27, R17
   \   000000C0   903C               LD      R3, X
   \   000000C2   2D02               MOV     R16, R2
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   0F00               LSL     R16
   \   000000C8   1F11               ROL     R17
   \   000000CA   0F00               LSL     R16
   \   000000CC   1F11               ROL     R17
   \   000000CE   9140....           LDS     R20, PortPair
   \   000000D2   E050               LDI     R21, 0
   \   000000D4   0F04               ADD     R16, R20
   \   000000D6   1F15               ADC     R17, R21
   \   000000D8   E04E               LDI     R20, 14
   \   000000DA   E050               LDI     R21, 0
   \   000000DC   ........           CALL    ?S_EC_MUL_L02
   \   000000E0   01D8               MOVW    R27:R26, R17:R16
   \   000000E2   ....               SUBI    R26, LOW((-(TData + 59) & 0xFFFF))
   \   000000E4   ....               SBCI    R27, HIGH((-(TData + 59) & 0xFFFF))
   \   000000E6   923C               ST      X, R3
    521              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 9];         // Unused???
   \   000000E8   ....               LDI     R26, LOW((UART16552 + 77))
   \   000000EA   ....               LDI     R27, HIGH((UART16552 + 77))
   \   000000EC   0FA6               ADD     R26, R22
   \   000000EE   1FB7               ADC     R27, R23
   \   000000F0   2D02               MOV     R16, R2
   \   000000F2   E010               LDI     R17, 0
   \   000000F4   E04B               LDI     R20, 11
   \   000000F6   E051               LDI     R21, 1
   \   000000F8   ........           CALL    ?S_EC_MUL_L02
   \   000000FC   0FA0               ADD     R26, R16
   \   000000FE   1FB1               ADC     R27, R17
   \   00000100   903C               LD      R3, X
   \   00000102   2D02               MOV     R16, R2
   \   00000104   E010               LDI     R17, 0
   \   00000106   0F00               LSL     R16
   \   00000108   1F11               ROL     R17
   \   0000010A   0F00               LSL     R16
   \   0000010C   1F11               ROL     R17
   \   0000010E   9140....           LDS     R20, PortPair
   \   00000112   E050               LDI     R21, 0
   \   00000114   0F04               ADD     R16, R20
   \   00000116   1F15               ADC     R17, R21
   \   00000118   E04E               LDI     R20, 14
   \   0000011A   E050               LDI     R21, 0
   \   0000011C   ........           CALL    ?S_EC_MUL_L02
   \   00000120   01D8               MOVW    R27:R26, R17:R16
   \   00000122   ....               SUBI    R26, LOW((-(TData + 171) & 0xFFFF))
   \   00000124   ....               SBCI    R27, HIGH((-(TData + 171) & 0xFFFF))
   \   00000126   923C               ST      X, R3
    522          }
   \   00000128   E0E8               LDI     R30, 8
   \   0000012A   ........           JMP     ?EPILOGUE_B8_L09
    523          
    524          
    525          /*************************************************************************
    526          *
    527          *  Receive Serial number and version information from Radar
    528          *
    529          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    530          void ReceiveRadarInfo(char ch, unsigned short pointer) {
   \                     ReceiveRadarInfo:
   \   00000000   2F60               MOV     R22, R16
    531              // TData.RS4.SerialNumber[(ch * 4) + PortPair] = atol((const char *)&UART16552[ch].pRxBuffer[pointer + 0]);
    532              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = *((long *)&UART16552[ch].pRxBuffer[pointer + 10]);
   \   00000002   ....               LDI     R30, LOW((UART16552 + 78))
   \   00000004   ....               LDI     R31, HIGH((UART16552 + 78))
   \   00000006   0FE2               ADD     R30, R18
   \   00000008   1FF3               ADC     R31, R19
   \   0000000A   2F06               MOV     R16, R22
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E04B               LDI     R20, 11
   \   00000010   E051               LDI     R21, 1
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   0FE0               ADD     R30, R16
   \   00000018   1FF1               ADC     R31, R17
   \   0000001A   8000               LD      R0, Z
   \   0000001C   8011               LDD     R1, Z+1
   \   0000001E   8022               LDD     R2, Z+2
   \   00000020   8033               LDD     R3, Z+3
   \   00000022   2F06               MOV     R16, R22
   \   00000024   E010               LDI     R17, 0
   \   00000026   0F00               LSL     R16
   \   00000028   1F11               ROL     R17
   \   0000002A   0F00               LSL     R16
   \   0000002C   1F11               ROL     R17
   \   0000002E   9140....           LDS     R20, PortPair
   \   00000032   E050               LDI     R21, 0
   \   00000034   0F04               ADD     R16, R20
   \   00000036   1F15               ADC     R17, R21
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000003E   A603               STD     Z+43, R0
    533          }
   \   00000040   9508               RET
    534          
    535          /*************************************************************************
    536          *
    537          *  Receive pressure measured data from AN_SGCNV
    538          *
    539          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    540          void ReceivePTOData(char ch, unsigned short pointer) {
   \                     ReceivePTOData:
   \   00000000   ........           CALL    ?PROLOGUE14_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004   2EA0               MOV     R10, R16
   \   00000006   0149               MOVW    R9:R8, R19:R18
    541          
    542              unsigned short pnt, ADCh;
    543              short packlen;
    544          
    545              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000008   ....               LDI     R30, LOW((UART16552 + 67))
   \   0000000A   ....               LDI     R31, HIGH((UART16552 + 67))
   \   0000000C   0DE8               ADD     R30, R8
   \   0000000E   1DF9               ADC     R31, R9
   \   00000010   2D0A               MOV     R16, R10
   \   00000012   E010               LDI     R17, 0
   \   00000014   E04B               LDI     R20, 11
   \   00000016   E051               LDI     R21, 1
   \   00000018   ........           CALL    ?S_EC_MUL_L02
   \   0000001C   0FE0               ADD     R30, R16
   \   0000001E   1FF1               ADC     R31, R17
   \   00000020   8100               LD      R16, Z
   \   00000022   E010               LDI     R17, 0
   \   00000024   0168               MOVW    R13:R12, R17:R16
    546          
    547              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000026   ....               LDI     R16, LOW(UARTSEND)
   \   00000028   ....               LDI     R17, (UARTSEND) >> 8
   \   0000002A   ........           CALL    OS_Use
    548          
    549              if (packlen > 0) {
   \   0000002E   E001               LDI     R16, 1
   \   00000030   16C0               CP      R12, R16
   \   00000032   E000               LDI     R16, 0
   \   00000034   06D0               CPC     R13, R16
   \   00000036   F40C               BRGE    $+2+2
   \   00000038   C076               RJMP    ??ReceivePTOData_0
    550                  for (pnt = 0; pnt < packlen; pnt += 6) {
   \   0000003A   E080               LDI     R24, 0
   \   0000003C   E090               LDI     R25, 0
   \                     ??ReceivePTOData_1:
   \   0000003E   158C               CP      R24, R12
   \   00000040   059D               CPC     R25, R13
   \   00000042   F008               BRCS    $+2+2
   \   00000044   C070               RJMP    ??ReceivePTOData_0
    551                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \   00000046   ....               LDI     R30, LOW((UART16552 + 68))
   \   00000048   ....               LDI     R31, HIGH((UART16552 + 68))
   \   0000004A   0184               MOVW    R17:R16, R9:R8
   \   0000004C   0F08               ADD     R16, R24
   \   0000004E   1F19               ADC     R17, R25
   \   00000050   0FE0               ADD     R30, R16
   \   00000052   1FF1               ADC     R31, R17
   \   00000054   2D0A               MOV     R16, R10
   \   00000056   E010               LDI     R17, 0
   \   00000058   E04B               LDI     R20, 11
   \   0000005A   E051               LDI     R21, 1
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   0FE0               ADD     R30, R16
   \   00000062   1FF1               ADC     R31, R17
   \   00000064   8100               LD      R16, Z
   \   00000066   E010               LDI     R17, 0
   \   00000068   01D8               MOVW    R27:R26, R17:R16
    552                      if (ADCh < 14) {
   \   0000006A   30AE               CPI     R26, 14
   \   0000006C   E000               LDI     R16, 0
   \   0000006E   07B0               CPC     R27, R16
   \   00000070   F008               BRCS    $+2+2
   \   00000072   C057               RJMP    ??ReceivePTOData_2
    553                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000074   ....               LDI     R30, LOW((UART16552 + 69))
   \   00000076   ....               LDI     R31, HIGH((UART16552 + 69))
   \   00000078   0184               MOVW    R17:R16, R9:R8
   \   0000007A   0F08               ADD     R16, R24
   \   0000007C   1F19               ADC     R17, R25
   \   0000007E   0FE0               ADD     R30, R16
   \   00000080   1FF1               ADC     R31, R17
   \   00000082   2D0A               MOV     R16, R10
   \   00000084   E010               LDI     R17, 0
   \   00000086   E04B               LDI     R20, 11
   \   00000088   E051               LDI     R21, 1
   \   0000008A   ........           CALL    ?S_EC_MUL_L02
   \   0000008E   0FE0               ADD     R30, R16
   \   00000090   1FF1               ADC     R31, R17
   \   00000092   8120               LD      R18, Z
   \   00000094   ....               LDI     R30, LOW((TData + 59))
   \   00000096   ....               LDI     R31, HIGH((TData + 59))
   \   00000098   0FEA               ADD     R30, R26
   \   0000009A   1FFB               ADC     R31, R27
   \   0000009C   2D0A               MOV     R16, R10
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   0F00               LSL     R16
   \   000000A2   1F11               ROL     R17
   \   000000A4   0F00               LSL     R16
   \   000000A6   1F11               ROL     R17
   \   000000A8   9140....           LDS     R20, PortPair
   \   000000AC   E050               LDI     R21, 0
   \   000000AE   0F04               ADD     R16, R20
   \   000000B0   1F15               ADC     R17, R21
   \   000000B2   E04E               LDI     R20, 14
   \   000000B4   E050               LDI     R21, 0
   \   000000B6   ........           CALL    ?S_EC_MUL_L02
   \   000000BA   0FE0               ADD     R30, R16
   \   000000BC   1FF1               ADC     R31, R17
   \   000000BE   8320               ST      Z, R18
    554                          *((float *)&TData.RS4.Result[(ch * 4) + PortPair][ADCh]) = *((float *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   000000C0   ....               LDI     R30, LOW((UART16552 + 70))
   \   000000C2   ....               LDI     R31, HIGH((UART16552 + 70))
   \   000000C4   0184               MOVW    R17:R16, R9:R8
   \   000000C6   0F08               ADD     R16, R24
   \   000000C8   1F19               ADC     R17, R25
   \   000000CA   0FE0               ADD     R30, R16
   \   000000CC   1FF1               ADC     R31, R17
   \   000000CE   2D0A               MOV     R16, R10
   \   000000D0   E010               LDI     R17, 0
   \   000000D2   E04B               LDI     R20, 11
   \   000000D4   E051               LDI     R21, 1
   \   000000D6   ........           CALL    ?S_EC_MUL_L02
   \   000000DA   0FE0               ADD     R30, R16
   \   000000DC   1FF1               ADC     R31, R17
   \   000000DE   8040               LD      R4, Z
   \   000000E0   8051               LDD     R5, Z+1
   \   000000E2   8062               LDD     R6, Z+2
   \   000000E4   8073               LDD     R7, Z+3
   \   000000E6   ....               LDI     R30, LOW((TData + 731))
   \   000000E8   ....               LDI     R31, HIGH((TData + 731))
   \   000000EA   018D               MOVW    R17:R16, R27:R26
   \   000000EC   0F00               LSL     R16
   \   000000EE   1F11               ROL     R17
   \   000000F0   0F00               LSL     R16
   \   000000F2   1F11               ROL     R17
   \   000000F4   0FE0               ADD     R30, R16
   \   000000F6   1FF1               ADC     R31, R17
   \   000000F8   2D0A               MOV     R16, R10
   \   000000FA   E010               LDI     R17, 0
   \   000000FC   0F00               LSL     R16
   \   000000FE   1F11               ROL     R17
   \   00000100   0F00               LSL     R16
   \   00000102   1F11               ROL     R17
   \   00000104   9120....           LDS     R18, PortPair
   \   00000108   E030               LDI     R19, 0
   \   0000010A   0F02               ADD     R16, R18
   \   0000010C   1F13               ADC     R17, R19
   \   0000010E   E348               LDI     R20, 56
   \   00000110   E050               LDI     R21, 0
   \   00000112   ........           CALL    ?S_EC_MUL_L02
   \   00000116   0FE0               ADD     R30, R16
   \   00000118   1FF1               ADC     R31, R17
   \   0000011A   8240               ST      Z, R4
   \   0000011C   8251               STD     Z+1, R5
   \   0000011E   8262               STD     Z+2, R6
   \   00000120   8273               STD     Z+3, R7
    555                      }
    556                  }
   \                     ??ReceivePTOData_2:
   \   00000122   9606               ADIW    R25:R24, 6
   \   00000124   CF8C               RJMP    ??ReceivePTOData_1
    557              }
    558              OS_Unuse(&UARTSEND);
   \                     ??ReceivePTOData_0:
   \   00000126   ....               LDI     R16, LOW(UARTSEND)
   \   00000128   ....               LDI     R17, (UARTSEND) >> 8
   \   0000012A   ........           CALL    OS_Unuse
    559          }
   \   0000012E   E0EE               LDI     R30, 14
   \   00000130   ........           JMP     ?EPILOGUE_B14_L09
    560          /*************************************************************************
    561          *
    562          *  Receive Wash Track and High Level data from AN_SGCNV
    563          *
    564          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    565          void ReceiveWHData(char ch, unsigned short pointer) {
   \                     ReceiveWHData:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    566          
    567              // Fixed packet length
    568              //short packlen;
    569          
    570              //packlen = UART16552[ch].pRxBuffer[pointer - 1];
    571          
    572              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000008   ....               LDI     R16, LOW(UARTSEND)
   \   0000000A   ....               LDI     R17, (UARTSEND) >> 8
   \   0000000C   ........           CALL    OS_Use
    573              short Index = (ch * 4) + PortPair;
   \   00000010   2D84               MOV     R24, R4
   \   00000012   E090               LDI     R25, 0
   \   00000014   0F88               LSL     R24
   \   00000016   1F99               ROL     R25
   \   00000018   0F88               LSL     R24
   \   0000001A   1F99               ROL     R25
   \   0000001C   9100....           LDS     R16, PortPair
   \   00000020   E010               LDI     R17, 0
   \   00000022   0F80               ADD     R24, R16
   \   00000024   1F91               ADC     R25, R17
    574              // Check if we have time information included
    575              if (UART16552[ch].pRxBuffer[pointer - 1] == 4) {
   \   00000026   ....               LDI     R30, LOW((UART16552 + 67))
   \   00000028   ....               LDI     R31, HIGH((UART16552 + 67))
   \   0000002A   0FEA               ADD     R30, R26
   \   0000002C   1FFB               ADC     R31, R27
   \   0000002E   2D04               MOV     R16, R4
   \   00000030   E010               LDI     R17, 0
   \   00000032   E04B               LDI     R20, 11
   \   00000034   E051               LDI     R21, 1
   \   00000036   ........           CALL    ?S_EC_MUL_L02
   \   0000003A   0FE0               ADD     R30, R16
   \   0000003C   1FF1               ADC     R31, R17
   \   0000003E   8100               LD      R16, Z
   \   00000040   3004               CPI     R16, 4
   \   00000042   F009               BREQ    $+2+2
   \   00000044   C052               RJMP    ??ReceiveWHData_0
    576                  for (short pnt = 0; pnt < 3; pnt++) {
   \   00000046   E020               LDI     R18, 0
   \   00000048   E030               LDI     R19, 0
   \                     ??ReceiveWHData_1:
   \   0000004A   3023               CPI     R18, 3
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   0730               CPC     R19, R16
   \   00000050   F524               BRGE    ??ReceiveWHData_2
    577                      TData.RS4.WTrackCnt[Index][pnt] = UART16552[ch].pRxBuffer[pointer + pnt];  // 4 x Wash track
   \   00000052   ....               LDI     R30, LOW((UART16552 + 68))
   \   00000054   ....               LDI     R31, HIGH((UART16552 + 68))
   \   00000056   018D               MOVW    R17:R16, R27:R26
   \   00000058   0F02               ADD     R16, R18
   \   0000005A   1F13               ADC     R17, R19
   \   0000005C   0FE0               ADD     R30, R16
   \   0000005E   1FF1               ADC     R31, R17
   \   00000060   2D04               MOV     R16, R4
   \   00000062   E010               LDI     R17, 0
   \   00000064   E04B               LDI     R20, 11
   \   00000066   E051               LDI     R21, 1
   \   00000068   ........           CALL    ?S_EC_MUL_L02
   \   0000006C   0FE0               ADD     R30, R16
   \   0000006E   1FF1               ADC     R31, R17
   \   00000070   8160               LD      R22, Z
   \   00000072   E070               LDI     R23, 0
   \   00000074   ....               LDI     R30, LOW((TData + 1179))
   \   00000076   ....               LDI     R31, HIGH((TData + 1179))
   \   00000078   0189               MOVW    R17:R16, R19:R18
   \   0000007A   0F00               LSL     R16
   \   0000007C   1F11               ROL     R17
   \   0000007E   0FE0               ADD     R30, R16
   \   00000080   1FF1               ADC     R31, R17
   \   00000082   018C               MOVW    R17:R16, R25:R24
   \   00000084   E048               LDI     R20, 8
   \   00000086   E050               LDI     R21, 0
   \   00000088   ........           CALL    ?S_EC_MUL_L02
   \   0000008C   0FE0               ADD     R30, R16
   \   0000008E   1FF1               ADC     R31, R17
   \   00000090   8360               ST      Z, R22
   \   00000092   8371               STD     Z+1, R23
    578                  }
   \   00000094   5F2F               SUBI    R18, 255
   \   00000096   4F3F               SBCI    R19, 255
   \   00000098   CFD8               RJMP    ??ReceiveWHData_1
    579                  // 4th WashTrack dont come
    580                  TData.RS4.WTrackCnt[Index][3] = 0;  // Missing 4th Wash track because of BUG in H8 compiler
   \                     ??ReceiveWHData_2:
   \   0000009A   018C               MOVW    R17:R16, R25:R24
   \   0000009C   E048               LDI     R20, 8
   \   0000009E   E050               LDI     R21, 0
   \   000000A0   ........           CALL    ?S_EC_MUL_L02
   \   000000A4   01F8               MOVW    R31:R30, R17:R16
   \   000000A6   ....               SUBI    R30, LOW((-(TData + 1185) & 0xFFFF))
   \   000000A8   ....               SBCI    R31, HIGH((-(TData + 1185) & 0xFFFF))
   \   000000AA   E000               LDI     R16, 0
   \   000000AC   8300               ST      Z, R16
   \   000000AE   E000               LDI     R16, 0
   \   000000B0   8301               STD     Z+1, R16
    581                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer + 3]; // Hgh levels in 5th byte
   \   000000B2   ....               LDI     R30, LOW((UART16552 + 71))
   \   000000B4   ....               LDI     R31, HIGH((UART16552 + 71))
   \   000000B6   0FEA               ADD     R30, R26
   \   000000B8   1FFB               ADC     R31, R27
   \   000000BA   2D04               MOV     R16, R4
   \   000000BC   E010               LDI     R17, 0
   \   000000BE   E04B               LDI     R20, 11
   \   000000C0   E051               LDI     R21, 1
   \   000000C2   ........           CALL    ?S_EC_MUL_L02
   \   000000C6   0FE0               ADD     R30, R16
   \   000000C8   1FF1               ADC     R31, R17
   \   000000CA   8100               LD      R16, Z
   \   000000CC   01FC               MOVW    R31:R30, R25:R24
   \   000000CE   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   000000D2   8300               ST      Z, R16
    582                  TData.RS4.WTTime[Index] = 0;
   \   000000D4   018C               MOVW    R17:R16, R25:R24
   \   000000D6   0F00               LSL     R16
   \   000000D8   1F11               ROL     R17
   \   000000DA   01F8               MOVW    R31:R30, R17:R16
   \   000000DC   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   000000DE   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   000000E0   E000               LDI     R16, 0
   \   000000E2   8300               ST      Z, R16
   \   000000E4   E000               LDI     R16, 0
   \   000000E6   8301               STD     Z+1, R16
   \   000000E8   C055               RJMP    ??ReceiveWHData_3
    583              } else {
    584                  for (short pnt = 0; pnt < 4; pnt++) {
   \                     ??ReceiveWHData_0:
   \   000000EA   E020               LDI     R18, 0
   \   000000EC   E030               LDI     R19, 0
   \                     ??ReceiveWHData_4:
   \   000000EE   3024               CPI     R18, 4
   \   000000F0   E000               LDI     R16, 0
   \   000000F2   0730               CPC     R19, R16
   \   000000F4   F544               BRGE    ??ReceiveWHData_5
    585                      TData.RS4.WTrackCnt[Index][pnt] = ((unsigned short *)&UART16552[ch].pRxBuffer[pointer])[pnt];  // 4 x Wash track
   \   000000F6   2D04               MOV     R16, R4
   \   000000F8   E010               LDI     R17, 0
   \   000000FA   E04B               LDI     R20, 11
   \   000000FC   E051               LDI     R21, 1
   \   000000FE   ........           CALL    ?S_EC_MUL_L02
   \   00000102   ....               LDI     R30, LOW(UART16552)
   \   00000104   ....               LDI     R31, (UART16552) >> 8
   \   00000106   0FE0               ADD     R30, R16
   \   00000108   1FF1               ADC     R31, R17
   \   0000010A   0FEA               ADD     R30, R26
   \   0000010C   1FFB               ADC     R31, R27
   \   0000010E   0189               MOVW    R17:R16, R19:R18
   \   00000110   0F00               LSL     R16
   \   00000112   1F11               ROL     R17
   \   00000114   0FE0               ADD     R30, R16
   \   00000116   1FF1               ADC     R31, R17
   \   00000118   5BEC               SUBI    R30, 188
   \   0000011A   4FFF               SBCI    R31, 255
   \   0000011C   8160               LD      R22, Z
   \   0000011E   8171               LDD     R23, Z+1
   \   00000120   ....               LDI     R30, LOW((TData + 1179))
   \   00000122   ....               LDI     R31, HIGH((TData + 1179))
   \   00000124   0189               MOVW    R17:R16, R19:R18
   \   00000126   0F00               LSL     R16
   \   00000128   1F11               ROL     R17
   \   0000012A   0FE0               ADD     R30, R16
   \   0000012C   1FF1               ADC     R31, R17
   \   0000012E   018C               MOVW    R17:R16, R25:R24
   \   00000130   E048               LDI     R20, 8
   \   00000132   E050               LDI     R21, 0
   \   00000134   ........           CALL    ?S_EC_MUL_L02
   \   00000138   0FE0               ADD     R30, R16
   \   0000013A   1FF1               ADC     R31, R17
   \   0000013C   8360               ST      Z, R22
   \   0000013E   8371               STD     Z+1, R23
    586                  }
   \   00000140   5F2F               SUBI    R18, 255
   \   00000142   4F3F               SBCI    R19, 255
   \   00000144   CFD4               RJMP    ??ReceiveWHData_4
    587                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer + 8]; // Hgh levels in 9th byte
   \                     ??ReceiveWHData_5:
   \   00000146   ....               LDI     R30, LOW((UART16552 + 76))
   \   00000148   ....               LDI     R31, HIGH((UART16552 + 76))
   \   0000014A   0FEA               ADD     R30, R26
   \   0000014C   1FFB               ADC     R31, R27
   \   0000014E   2D04               MOV     R16, R4
   \   00000150   E010               LDI     R17, 0
   \   00000152   E04B               LDI     R20, 11
   \   00000154   E051               LDI     R21, 1
   \   00000156   ........           CALL    ?S_EC_MUL_L02
   \   0000015A   0FE0               ADD     R30, R16
   \   0000015C   1FF1               ADC     R31, R17
   \   0000015E   8100               LD      R16, Z
   \   00000160   01FC               MOVW    R31:R30, R25:R24
   \   00000162   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   00000164   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   00000166   8300               ST      Z, R16
    588                  TData.RS4.WTTime[Index] = *((unsigned short *)&UART16552[ch].pRxBuffer[pointer + 9]);  // WashTrack time in 10th and 11th bytes
   \   00000168   ....               LDI     R30, LOW((UART16552 + 77))
   \   0000016A   ....               LDI     R31, HIGH((UART16552 + 77))
   \   0000016C   0FEA               ADD     R30, R26
   \   0000016E   1FFB               ADC     R31, R27
   \   00000170   2D04               MOV     R16, R4
   \   00000172   E010               LDI     R17, 0
   \   00000174   E04B               LDI     R20, 11
   \   00000176   E051               LDI     R21, 1
   \   00000178   ........           CALL    ?S_EC_MUL_L02
   \   0000017C   0FE0               ADD     R30, R16
   \   0000017E   1FF1               ADC     R31, R17
   \   00000180   8120               LD      R18, Z
   \   00000182   8131               LDD     R19, Z+1
   \   00000184   018C               MOVW    R17:R16, R25:R24
   \   00000186   0F00               LSL     R16
   \   00000188   1F11               ROL     R17
   \   0000018A   01F8               MOVW    R31:R30, R17:R16
   \   0000018C   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   0000018E   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   00000190   8320               ST      Z, R18
   \   00000192   8331               STD     Z+1, R19
    589              }
    590              TData.RS4.WHDataAvailable |= 0x01 << ((ch * 4) + PortPair);
   \                     ??ReceiveWHData_3:
   \   00000194   E004               LDI     R16, 4
   \   00000196   9E40               MUL     R4, R16
   \   00000198   2D40               MOV     R20, R0
   \   0000019A   9100....           LDS     R16, PortPair
   \   0000019E   0F40               ADD     R20, R16
   \   000001A0   E001               LDI     R16, 1
   \   000001A2   E010               LDI     R17, 0
   \   000001A4   ........           CALL    ?S_SHL_L02
   \   000001A8   9110....           LDS     R17, (TData + 1267)
   \   000001AC   2B10               OR      R17, R16
   \   000001AE   9310....           STS     (TData + 1267), R17
    591              OS_Unuse(&UARTSEND);
   \   000001B2   ....               LDI     R16, LOW(UARTSEND)
   \   000001B4   ....               LDI     R17, (UARTSEND) >> 8
   \   000001B6   ........           CALL    OS_Unuse
    592          }
   \   000001BA   E0E5               LDI     R30, 5
   \   000001BC   ........           JMP     ?EPILOGUE_B5_L09
    593          
    594          
    595          /************************************************************************
    596          *
    597          *  Receive raw data for pressure, temp and other from AN_SGCNV
    598          *
    599          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    600          void ReceiveRData(char ch, unsigned short pointer) {
   \                     ReceiveRData:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
    601          
    602              char pnt, ADCh;
    603              short packlen;
    604          
    605              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000006   ....               LDI     R30, LOW((UART16552 + 67))
   \   00000008   ....               LDI     R31, HIGH((UART16552 + 67))
   \   0000000A   0FE2               ADD     R30, R18
   \   0000000C   1FF3               ADC     R31, R19
   \   0000000E   2D02               MOV     R16, R2
   \   00000010   E010               LDI     R17, 0
   \   00000012   E04B               LDI     R20, 11
   \   00000014   E051               LDI     R21, 1
   \   00000016   ........           CALL    ?S_EC_MUL_L02
   \   0000001A   0FE0               ADD     R30, R16
   \   0000001C   1FF1               ADC     R31, R17
   \   0000001E   8100               LD      R16, Z
   \   00000020   E010               LDI     R17, 0
   \   00000022   01D8               MOVW    R27:R26, R17:R16
    606          
    607              if (packlen > 0) {
   \   00000024   30A1               CPI     R26, 1
   \   00000026   E000               LDI     R16, 0
   \   00000028   07B0               CPC     R27, R16
   \   0000002A   F40C               BRGE    $+2+2
   \   0000002C   C072               RJMP    ??ReceiveRData_0
    608                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   0000002E   E060               LDI     R22, 0
   \                     ??ReceiveRData_1:
   \   00000030   E070               LDI     R23, 0
   \   00000032   176A               CP      R22, R26
   \   00000034   077B               CPC     R23, R27
   \   00000036   F00C               BRLT    $+2+2
   \   00000038   C06C               RJMP    ??ReceiveRData_0
    609                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \   0000003A   ....               LDI     R30, LOW((UART16552 + 68))
   \   0000003C   ....               LDI     R31, HIGH((UART16552 + 68))
   \   0000003E   E070               LDI     R23, 0
   \   00000040   0189               MOVW    R17:R16, R19:R18
   \   00000042   0F06               ADD     R16, R22
   \   00000044   1F17               ADC     R17, R23
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   2D02               MOV     R16, R2
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   E04B               LDI     R20, 11
   \   00000050   E051               LDI     R21, 1
   \   00000052   ........           CALL    ?S_EC_MUL_L02
   \   00000056   0FE0               ADD     R30, R16
   \   00000058   1FF1               ADC     R31, R17
   \   0000005A   8100               LD      R16, Z
   \   0000005C   2F80               MOV     R24, R16
    610                      if (ADCh < 14) {
   \   0000005E   308E               CPI     R24, 14
   \   00000060   F008               BRCS    $+2+2
   \   00000062   C055               RJMP    ??ReceiveRData_2
    611                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000064   ....               LDI     R30, LOW((UART16552 + 69))
   \   00000066   ....               LDI     R31, HIGH((UART16552 + 69))
   \   00000068   E070               LDI     R23, 0
   \   0000006A   0189               MOVW    R17:R16, R19:R18
   \   0000006C   0F06               ADD     R16, R22
   \   0000006E   1F17               ADC     R17, R23
   \   00000070   0FE0               ADD     R30, R16
   \   00000072   1FF1               ADC     R31, R17
   \   00000074   2D02               MOV     R16, R2
   \   00000076   E010               LDI     R17, 0
   \   00000078   E04B               LDI     R20, 11
   \   0000007A   E051               LDI     R21, 1
   \   0000007C   ........           CALL    ?S_EC_MUL_L02
   \   00000080   0FE0               ADD     R30, R16
   \   00000082   1FF1               ADC     R31, R17
   \   00000084   8170               LD      R23, Z
   \   00000086   ....               LDI     R30, LOW((TData + 59))
   \   00000088   ....               LDI     R31, HIGH((TData + 59))
   \   0000008A   E090               LDI     R25, 0
   \   0000008C   0FE8               ADD     R30, R24
   \   0000008E   1FF9               ADC     R31, R25
   \   00000090   2D02               MOV     R16, R2
   \   00000092   E010               LDI     R17, 0
   \   00000094   0F00               LSL     R16
   \   00000096   1F11               ROL     R17
   \   00000098   0F00               LSL     R16
   \   0000009A   1F11               ROL     R17
   \   0000009C   9140....           LDS     R20, PortPair
   \   000000A0   E050               LDI     R21, 0
   \   000000A2   0F04               ADD     R16, R20
   \   000000A4   1F15               ADC     R17, R21
   \   000000A6   E04E               LDI     R20, 14
   \   000000A8   E050               LDI     R21, 0
   \   000000AA   ........           CALL    ?S_EC_MUL_L02
   \   000000AE   0FE0               ADD     R30, R16
   \   000000B0   1FF1               ADC     R31, R17
   \   000000B2   8370               ST      Z, R23
    612                          *((short *)&TData.RS4.Raw[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   000000B4   ....               LDI     R30, LOW((UART16552 + 70))
   \   000000B6   ....               LDI     R31, HIGH((UART16552 + 70))
   \   000000B8   E070               LDI     R23, 0
   \   000000BA   0189               MOVW    R17:R16, R19:R18
   \   000000BC   0F06               ADD     R16, R22
   \   000000BE   1F17               ADC     R17, R23
   \   000000C0   0FE0               ADD     R30, R16
   \   000000C2   1FF1               ADC     R31, R17
   \   000000C4   2D02               MOV     R16, R2
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   E04B               LDI     R20, 11
   \   000000CA   E051               LDI     R21, 1
   \   000000CC   ........           CALL    ?S_EC_MUL_L02
   \   000000D0   0FE0               ADD     R30, R16
   \   000000D2   1FF1               ADC     R31, R17
   \   000000D4   8040               LD      R4, Z
   \   000000D6   8051               LDD     R5, Z+1
   \   000000D8   ....               LDI     R30, LOW((TData + 283))
   \   000000DA   ....               LDI     R31, HIGH((TData + 283))
   \   000000DC   2F08               MOV     R16, R24
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   0F00               LSL     R16
   \   000000E2   1F11               ROL     R17
   \   000000E4   0FE0               ADD     R30, R16
   \   000000E6   1FF1               ADC     R31, R17
   \   000000E8   2D02               MOV     R16, R2
   \   000000EA   E010               LDI     R17, 0
   \   000000EC   0F00               LSL     R16
   \   000000EE   1F11               ROL     R17
   \   000000F0   0F00               LSL     R16
   \   000000F2   1F11               ROL     R17
   \   000000F4   9140....           LDS     R20, PortPair
   \   000000F8   E050               LDI     R21, 0
   \   000000FA   0F04               ADD     R16, R20
   \   000000FC   1F15               ADC     R17, R21
   \   000000FE   E14C               LDI     R20, 28
   \   00000100   E050               LDI     R21, 0
   \   00000102   ........           CALL    ?S_EC_MUL_L02
   \   00000106   0FE0               ADD     R30, R16
   \   00000108   1FF1               ADC     R31, R17
   \   0000010A   8240               ST      Z, R4
   \   0000010C   8251               STD     Z+1, R5
    613                      }
    614                  }
   \                     ??ReceiveRData_2:
   \   0000010E   5F6C               SUBI    R22, 252
   \   00000110   CF8F               RJMP    ??ReceiveRData_1
    615              }
    616          }
   \                     ??ReceiveRData_0:
   \   00000112   E0E6               LDI     R30, 6
   \   00000114   ........           JMP     ?EPILOGUE_B6_L09
    617          
    618          /*************************************************************************
    619          *
    620          *  Receive cal data  from AN_SGCNV
    621          *
    622          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    623          void ReceiveCData(char ch, unsigned short pointer) {
   \                     ReceiveCData:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
    624          
    625              char pnt, ADCh;
    626              short packlen;
    627          
    628              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000006   ....               LDI     R30, LOW((UART16552 + 67))
   \   00000008   ....               LDI     R31, HIGH((UART16552 + 67))
   \   0000000A   0FE2               ADD     R30, R18
   \   0000000C   1FF3               ADC     R31, R19
   \   0000000E   2D02               MOV     R16, R2
   \   00000010   E010               LDI     R17, 0
   \   00000012   E04B               LDI     R20, 11
   \   00000014   E051               LDI     R21, 1
   \   00000016   ........           CALL    ?S_EC_MUL_L02
   \   0000001A   0FE0               ADD     R30, R16
   \   0000001C   1FF1               ADC     R31, R17
   \   0000001E   8100               LD      R16, Z
   \   00000020   E010               LDI     R17, 0
   \   00000022   01D8               MOVW    R27:R26, R17:R16
    629          
    630              if (packlen > 0) {
   \   00000024   30A1               CPI     R26, 1
   \   00000026   E000               LDI     R16, 0
   \   00000028   07B0               CPC     R27, R16
   \   0000002A   F40C               BRGE    $+2+2
   \   0000002C   C072               RJMP    ??ReceiveCData_0
    631                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   0000002E   E060               LDI     R22, 0
   \                     ??ReceiveCData_1:
   \   00000030   E070               LDI     R23, 0
   \   00000032   176A               CP      R22, R26
   \   00000034   077B               CPC     R23, R27
   \   00000036   F00C               BRLT    $+2+2
   \   00000038   C06C               RJMP    ??ReceiveCData_0
    632                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \   0000003A   ....               LDI     R30, LOW((UART16552 + 68))
   \   0000003C   ....               LDI     R31, HIGH((UART16552 + 68))
   \   0000003E   E070               LDI     R23, 0
   \   00000040   0189               MOVW    R17:R16, R19:R18
   \   00000042   0F06               ADD     R16, R22
   \   00000044   1F17               ADC     R17, R23
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   2D02               MOV     R16, R2
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   E04B               LDI     R20, 11
   \   00000050   E051               LDI     R21, 1
   \   00000052   ........           CALL    ?S_EC_MUL_L02
   \   00000056   0FE0               ADD     R30, R16
   \   00000058   1FF1               ADC     R31, R17
   \   0000005A   8100               LD      R16, Z
   \   0000005C   2F80               MOV     R24, R16
    633                      if (ADCh < 14) {
   \   0000005E   308E               CPI     R24, 14
   \   00000060   F008               BRCS    $+2+2
   \   00000062   C055               RJMP    ??ReceiveCData_2
    634                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000064   ....               LDI     R30, LOW((UART16552 + 69))
   \   00000066   ....               LDI     R31, HIGH((UART16552 + 69))
   \   00000068   E070               LDI     R23, 0
   \   0000006A   0189               MOVW    R17:R16, R19:R18
   \   0000006C   0F06               ADD     R16, R22
   \   0000006E   1F17               ADC     R17, R23
   \   00000070   0FE0               ADD     R30, R16
   \   00000072   1FF1               ADC     R31, R17
   \   00000074   2D02               MOV     R16, R2
   \   00000076   E010               LDI     R17, 0
   \   00000078   E04B               LDI     R20, 11
   \   0000007A   E051               LDI     R21, 1
   \   0000007C   ........           CALL    ?S_EC_MUL_L02
   \   00000080   0FE0               ADD     R30, R16
   \   00000082   1FF1               ADC     R31, R17
   \   00000084   8170               LD      R23, Z
   \   00000086   ....               LDI     R30, LOW((TData + 59))
   \   00000088   ....               LDI     R31, HIGH((TData + 59))
   \   0000008A   E090               LDI     R25, 0
   \   0000008C   0FE8               ADD     R30, R24
   \   0000008E   1FF9               ADC     R31, R25
   \   00000090   2D02               MOV     R16, R2
   \   00000092   E010               LDI     R17, 0
   \   00000094   0F00               LSL     R16
   \   00000096   1F11               ROL     R17
   \   00000098   0F00               LSL     R16
   \   0000009A   1F11               ROL     R17
   \   0000009C   9140....           LDS     R20, PortPair
   \   000000A0   E050               LDI     R21, 0
   \   000000A2   0F04               ADD     R16, R20
   \   000000A4   1F15               ADC     R17, R21
   \   000000A6   E04E               LDI     R20, 14
   \   000000A8   E050               LDI     R21, 0
   \   000000AA   ........           CALL    ?S_EC_MUL_L02
   \   000000AE   0FE0               ADD     R30, R16
   \   000000B0   1FF1               ADC     R31, R17
   \   000000B2   8370               ST      Z, R23
    635                          *((short *)&TData.RS4.Cal[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   000000B4   ....               LDI     R30, LOW((UART16552 + 70))
   \   000000B6   ....               LDI     R31, HIGH((UART16552 + 70))
   \   000000B8   E070               LDI     R23, 0
   \   000000BA   0189               MOVW    R17:R16, R19:R18
   \   000000BC   0F06               ADD     R16, R22
   \   000000BE   1F17               ADC     R17, R23
   \   000000C0   0FE0               ADD     R30, R16
   \   000000C2   1FF1               ADC     R31, R17
   \   000000C4   2D02               MOV     R16, R2
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   E04B               LDI     R20, 11
   \   000000CA   E051               LDI     R21, 1
   \   000000CC   ........           CALL    ?S_EC_MUL_L02
   \   000000D0   0FE0               ADD     R30, R16
   \   000000D2   1FF1               ADC     R31, R17
   \   000000D4   8040               LD      R4, Z
   \   000000D6   8051               LDD     R5, Z+1
   \   000000D8   ....               LDI     R30, LOW((TData + 507))
   \   000000DA   ....               LDI     R31, HIGH((TData + 507))
   \   000000DC   2F08               MOV     R16, R24
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   0F00               LSL     R16
   \   000000E2   1F11               ROL     R17
   \   000000E4   0FE0               ADD     R30, R16
   \   000000E6   1FF1               ADC     R31, R17
   \   000000E8   2D02               MOV     R16, R2
   \   000000EA   E010               LDI     R17, 0
   \   000000EC   0F00               LSL     R16
   \   000000EE   1F11               ROL     R17
   \   000000F0   0F00               LSL     R16
   \   000000F2   1F11               ROL     R17
   \   000000F4   9140....           LDS     R20, PortPair
   \   000000F8   E050               LDI     R21, 0
   \   000000FA   0F04               ADD     R16, R20
   \   000000FC   1F15               ADC     R17, R21
   \   000000FE   E14C               LDI     R20, 28
   \   00000100   E050               LDI     R21, 0
   \   00000102   ........           CALL    ?S_EC_MUL_L02
   \   00000106   0FE0               ADD     R30, R16
   \   00000108   1FF1               ADC     R31, R17
   \   0000010A   8240               ST      Z, R4
   \   0000010C   8251               STD     Z+1, R5
    636                      }
    637                  }
   \                     ??ReceiveCData_2:
   \   0000010E   5F6C               SUBI    R22, 252
   \   00000110   CF8F               RJMP    ??ReceiveCData_1
    638              }
    639          }
   \                     ??ReceiveCData_0:
   \   00000112   E0E6               LDI     R30, 6
   \   00000114   ........           JMP     ?EPILOGUE_B6_L09
    640          
    641          /*************************************************************************
    642          *
    643          *  Receive card status  from AN_SGCNV
    644          *
    645          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    646          void ReceiveCardStatus(char ch, unsigned short pointer) {
   \                     ReceiveCardStatus:
   \   00000000   2F60               MOV     R22, R16
    647          
    648              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer];
   \   00000002   ....               LDI     R30, LOW((UART16552 + 68))
   \   00000004   ....               LDI     R31, HIGH((UART16552 + 68))
   \   00000006   0FE2               ADD     R30, R18
   \   00000008   1FF3               ADC     R31, R19
   \   0000000A   2F06               MOV     R16, R22
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E04B               LDI     R20, 11
   \   00000010   E051               LDI     R21, 1
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   0FE0               ADD     R30, R16
   \   00000018   1FF1               ADC     R31, R17
   \   0000001A   8170               LD      R23, Z
   \   0000001C   2F06               MOV     R16, R22
   \   0000001E   E010               LDI     R17, 0
   \   00000020   0F00               LSL     R16
   \   00000022   1F11               ROL     R17
   \   00000024   0F00               LSL     R16
   \   00000026   1F11               ROL     R17
   \   00000028   9140....           LDS     R20, PortPair
   \   0000002C   E050               LDI     R21, 0
   \   0000002E   0F04               ADD     R16, R20
   \   00000030   1F15               ADC     R17, R21
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000036   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000038   A773               STD     Z+43, R23
    649              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000003A   ....               LDI     R30, LOW((UART16552 + 69))
   \   0000003C   ....               LDI     R31, HIGH((UART16552 + 69))
   \   0000003E   0FE2               ADD     R30, R18
   \   00000040   1FF3               ADC     R31, R19
   \   00000042   2F06               MOV     R16, R22
   \   00000044   E010               LDI     R17, 0
   \   00000046   E04B               LDI     R20, 11
   \   00000048   E051               LDI     R21, 1
   \   0000004A   ........           CALL    ?S_EC_MUL_L02
   \   0000004E   0FE0               ADD     R30, R16
   \   00000050   1FF1               ADC     R31, R17
   \   00000052   8170               LD      R23, Z
   \   00000054   2F06               MOV     R16, R22
   \   00000056   E010               LDI     R17, 0
   \   00000058   0F00               LSL     R16
   \   0000005A   1F11               ROL     R17
   \   0000005C   0F00               LSL     R16
   \   0000005E   1F11               ROL     R17
   \   00000060   9140....           LDS     R20, PortPair
   \   00000064   E050               LDI     R21, 0
   \   00000066   0F04               ADD     R16, R20
   \   00000068   1F15               ADC     R17, R21
   \   0000006A   01F8               MOVW    R31:R30, R17:R16
   \   0000006C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000070   AB73               STD     Z+51, R23
    650          }
   \   00000072   9508               RET
    651          
    652          /*************************************************************************
    653          *
    654          *  Receive config data from AN_SGCNV
    655          *
    656          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    657          void ReceiveConfigData(char ch, unsigned short pointer) {
   \                     ReceiveConfigData:
   \   00000000   011C               MOVW    R3:R2, R25:R24
   \   00000002   2F60               MOV     R22, R16
   \   00000004   01C9               MOVW    R25:R24, R19:R18
    658          
    659              char i, ADCh;
    660          
    661              for (i = 0; i < 14; i++) {
   \   00000006   E030               LDI     R19, 0
   \                     ??ReceiveConfigData_0:
   \   00000008   303E               CPI     R19, 14
   \   0000000A   F008               BRCS    $+2+2
   \   0000000C   C05F               RJMP    ??ReceiveConfigData_1
    662                  ADCh = UART16552[ch].pRxBuffer[pointer++];
   \   0000000E   ....               LDI     R30, LOW((UART16552 + 68))
   \   00000010   ....               LDI     R31, HIGH((UART16552 + 68))
   \   00000012   0FE8               ADD     R30, R24
   \   00000014   1FF9               ADC     R31, R25
   \   00000016   2F06               MOV     R16, R22
   \   00000018   E010               LDI     R17, 0
   \   0000001A   E04B               LDI     R20, 11
   \   0000001C   E051               LDI     R21, 1
   \   0000001E   ........           CALL    ?S_EC_MUL_L02
   \   00000022   0FE0               ADD     R30, R16
   \   00000024   1FF1               ADC     R31, R17
   \   00000026   8100               LD      R16, Z
   \   00000028   2F20               MOV     R18, R16
   \   0000002A   9601               ADIW    R25:R24, 1
    663                  if (ADCh < 14) {
   \   0000002C   302E               CPI     R18, 14
   \   0000002E   F008               BRCS    $+2+2
   \   00000030   C04A               RJMP    ??ReceiveConfigData_2
    664                      TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer];
   \   00000032   ....               LDI     R30, LOW((UART16552 + 68))
   \   00000034   ....               LDI     R31, HIGH((UART16552 + 68))
   \   00000036   0FE8               ADD     R30, R24
   \   00000038   1FF9               ADC     R31, R25
   \   0000003A   2F06               MOV     R16, R22
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   E04B               LDI     R20, 11
   \   00000040   E051               LDI     R21, 1
   \   00000042   ........           CALL    ?S_EC_MUL_L02
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   8170               LD      R23, Z
   \   0000004C   ....               LDI     R30, LOW((TData + 59))
   \   0000004E   ....               LDI     R31, HIGH((TData + 59))
   \   00000050   2F02               MOV     R16, R18
   \   00000052   E010               LDI     R17, 0
   \   00000054   0FE0               ADD     R30, R16
   \   00000056   1FF1               ADC     R31, R17
   \   00000058   2F06               MOV     R16, R22
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   0F00               LSL     R16
   \   0000005E   1F11               ROL     R17
   \   00000060   0F00               LSL     R16
   \   00000062   1F11               ROL     R17
   \   00000064   9140....           LDS     R20, PortPair
   \   00000068   E050               LDI     R21, 0
   \   0000006A   0F04               ADD     R16, R20
   \   0000006C   1F15               ADC     R17, R21
   \   0000006E   E04E               LDI     R20, 14
   \   00000070   E050               LDI     R21, 0
   \   00000072   ........           CALL    ?S_EC_MUL_L02
   \   00000076   0FE0               ADD     R30, R16
   \   00000078   1FF1               ADC     R31, R17
   \   0000007A   8370               ST      Z, R23
    665                      TData.RS4.TargetSetup2[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000007C   ....               LDI     R30, LOW((UART16552 + 69))
   \   0000007E   ....               LDI     R31, HIGH((UART16552 + 69))
   \   00000080   0FE8               ADD     R30, R24
   \   00000082   1FF9               ADC     R31, R25
   \   00000084   2F06               MOV     R16, R22
   \   00000086   E010               LDI     R17, 0
   \   00000088   E04B               LDI     R20, 11
   \   0000008A   E051               LDI     R21, 1
   \   0000008C   ........           CALL    ?S_EC_MUL_L02
   \   00000090   0FE0               ADD     R30, R16
   \   00000092   1FF1               ADC     R31, R17
   \   00000094   8170               LD      R23, Z
   \   00000096   ....               LDI     R30, LOW((TData + 171))
   \   00000098   ....               LDI     R31, HIGH((TData + 171))
   \   0000009A   2F02               MOV     R16, R18
   \   0000009C   E010               LDI     R17, 0
   \   0000009E   0FE0               ADD     R30, R16
   \   000000A0   1FF1               ADC     R31, R17
   \   000000A2   2F06               MOV     R16, R22
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   0F00               LSL     R16
   \   000000A8   1F11               ROL     R17
   \   000000AA   0F00               LSL     R16
   \   000000AC   1F11               ROL     R17
   \   000000AE   9140....           LDS     R20, PortPair
   \   000000B2   E050               LDI     R21, 0
   \   000000B4   0F04               ADD     R16, R20
   \   000000B6   1F15               ADC     R17, R21
   \   000000B8   E04E               LDI     R20, 14
   \   000000BA   E050               LDI     R21, 0
   \   000000BC   ........           CALL    ?S_EC_MUL_L02
   \   000000C0   0FE0               ADD     R30, R16
   \   000000C2   1FF1               ADC     R31, R17
   \   000000C4   8370               ST      Z, R23
    666                  }
    667                  pointer += 2;
   \                     ??ReceiveConfigData_2:
   \   000000C6   9602               ADIW    R25:R24, 2
    668              }
   \   000000C8   9533               INC     R19
   \   000000CA   CF9E               RJMP    ??ReceiveConfigData_0
    669          }
   \                     ??ReceiveConfigData_1:
   \   000000CC   01C1               MOVW    R25:R24, R3:R2
   \   000000CE   9508               RET
    670          
    671          /*************************************************************************
    672          *
    673          *  Receive eeprom data from AN_SGCNV
    674          *
    675          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    676          void ReceiveCardEEPROMData(char ch, unsigned short pointer) {
   \                     ReceiveCardEEPROMData:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F60               MOV     R22, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    677          
    678              short i;
    679          
    680              TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000008   2F06               MOV     R16, R22
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E342               LDI     R20, 50
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(TData + 1428) & 0xFFFF))
   \   00000018   ....               SBCI    R31, HIGH((-(TData + 1428) & 0xFFFF))
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8300               ST      Z, R16
    681              TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   0000001E   E004               LDI     R16, 4
   \   00000020   9F60               MUL     R22, R16
   \   00000022   2D20               MOV     R18, R0
   \   00000024   9100....           LDS     R16, PortPair
   \   00000028   0F20               ADD     R18, R16
   \   0000002A   2F06               MOV     R16, R22
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   E342               LDI     R20, 50
   \   00000030   E050               LDI     R21, 0
   \   00000032   ........           CALL    ?S_EC_MUL_L02
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(TData + 1429) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, HIGH((-(TData + 1429) & 0xFFFF))
   \   0000003C   8320               ST      Z, R18
    682              for (i = 2; i < (41 + 2); i++) {
   \   0000003E   E0A2               LDI     R26, 2
   \   00000040   E0B0               LDI     R27, 0
   \                     ??ReceiveCardEEPROMData_0:
   \   00000042   32AB               CPI     R26, 43
   \   00000044   E000               LDI     R16, 0
   \   00000046   07B0               CPC     R27, R16
   \   00000048   F4EC               BRGE    ??ReceiveCardEEPROMData_1
    683                  TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \   0000004A   ....               LDI     R30, LOW((UART16552 + 68))
   \   0000004C   ....               LDI     R31, HIGH((UART16552 + 68))
   \   0000004E   0FE8               ADD     R30, R24
   \   00000050   1FF9               ADC     R31, R25
   \   00000052   2F06               MOV     R16, R22
   \   00000054   E010               LDI     R17, 0
   \   00000056   E04B               LDI     R20, 11
   \   00000058   E051               LDI     R21, 1
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   0FE0               ADD     R30, R16
   \   00000060   1FF1               ADC     R31, R17
   \   00000062   8120               LD      R18, Z
   \   00000064   ....               LDI     R30, LOW((TData + 1428))
   \   00000066   ....               LDI     R31, HIGH((TData + 1428))
   \   00000068   0FEA               ADD     R30, R26
   \   0000006A   1FFB               ADC     R31, R27
   \   0000006C   2F06               MOV     R16, R22
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E342               LDI     R20, 50
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   0FE0               ADD     R30, R16
   \   0000007A   1FF1               ADC     R31, R17
   \   0000007C   8320               ST      Z, R18
   \   0000007E   9601               ADIW    R25:R24, 1
    684              }
   \   00000080   9611               ADIW    R27:R26, 1
   \   00000082   CFDF               RJMP    ??ReceiveCardEEPROMData_0
    685          }
   \                     ??ReceiveCardEEPROMData_1:
   \   00000084   E0E4               LDI     R30, 4
   \   00000086   ........           JMP     ?EPILOGUE_B4_L09
    686          
    687          /*************************************************************************
    688          *
    689          * Build send packet header for AN-SGCNV
    690          *
    691          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    692          void Uart_BuildHeader16552(char ch) {
   \                     Uart_BuildHeader16552:
   \   00000000   2F20               MOV     R18, R16
    693          
    694              UART16552[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E04B               LDI     R20, 11
   \   00000008   E051               LDI     R21, 1
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552 + 188) & 0xFFFF))
   \   00000012   ....               SBCI    R31, HIGH((-(UART16552 + 188) & 0xFFFF))
   \   00000014   E000               LDI     R16, 0
   \   00000016   E010               LDI     R17, 0
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
    695              UART16552[ch].RxLast = 0;
   \   0000001C   2F02               MOV     R16, R18
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E04B               LDI     R20, 11
   \   00000022   E051               LDI     R21, 1
   \   00000024   ........           CALL    ?S_EC_MUL_L02
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   ....               SUBI    R30, LOW((-(UART16552 + 190) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, HIGH((-(UART16552 + 190) & 0xFFFF))
   \   0000002E   E000               LDI     R16, 0
   \   00000030   E010               LDI     R17, 0
   \   00000032   8300               ST      Z, R16
   \   00000034   8311               STD     Z+1, R17
    696              UART16552[ch].TxLast = 0;
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E04B               LDI     R20, 11
   \   0000003C   E051               LDI     R21, 1
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               SUBI    R30, LOW((-(UART16552 + 62) & 0xFFFF))
   \   00000046   ....               SBCI    R31, HIGH((-(UART16552 + 62) & 0xFFFF))
   \   00000048   E000               LDI     R16, 0
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   8300               ST      Z, R16
   \   0000004E   8311               STD     Z+1, R17
    697          
    698              UART16552[ch].pTxBuffer[0] = ANPRO1_SYN;                        /* Sync */
   \   00000050   2F02               MOV     R16, R18
   \   00000052   E010               LDI     R17, 0
   \   00000054   E04B               LDI     R20, 11
   \   00000056   E051               LDI     R21, 1
   \   00000058   ........           CALL    ?S_EC_MUL_L02
   \   0000005C   01F8               MOVW    R31:R30, R17:R16
   \   0000005E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000060   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000062   E002               LDI     R16, 2
   \   00000064   8300               ST      Z, R16
    699              UART16552[ch].pTxBuffer[1] = ANPRO1_SYN;                        /* Sync */
   \   00000066   2F02               MOV     R16, R18
   \   00000068   E010               LDI     R17, 0
   \   0000006A   E04B               LDI     R20, 11
   \   0000006C   E051               LDI     R21, 1
   \   0000006E   ........           CALL    ?S_EC_MUL_L02
   \   00000072   01F8               MOVW    R31:R30, R17:R16
   \   00000074   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000076   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000078   E002               LDI     R16, 2
   \   0000007A   8301               STD     Z+1, R16
    700              UART16552[ch].pTxBuffer[2] = 0;                          /* Rx address */
   \   0000007C   2F02               MOV     R16, R18
   \   0000007E   E010               LDI     R17, 0
   \   00000080   E04B               LDI     R20, 11
   \   00000082   E051               LDI     R21, 1
   \   00000084   ........           CALL    ?S_EC_MUL_L02
   \   00000088   01F8               MOVW    R31:R30, R17:R16
   \   0000008A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000008C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000008E   E000               LDI     R16, 0
   \   00000090   8302               STD     Z+2, R16
    701              UART16552[ch].pTxBuffer[3] = MY_SGCNV_ADDR;              /* My address to AD-SGCNV */
   \   00000092   2F02               MOV     R16, R18
   \   00000094   E010               LDI     R17, 0
   \   00000096   E04B               LDI     R20, 11
   \   00000098   E051               LDI     R21, 1
   \   0000009A   ........           CALL    ?S_EC_MUL_L02
   \   0000009E   01F8               MOVW    R31:R30, R17:R16
   \   000000A0   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000A2   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000A4   EF0D               LDI     R16, 253
   \   000000A6   8303               STD     Z+3, R16
    702              UART16552[ch].pTxBuffer[4] = 0;                          /* packlen HB, don't know yet */
   \   000000A8   2F02               MOV     R16, R18
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   E04B               LDI     R20, 11
   \   000000AE   E051               LDI     R21, 1
   \   000000B0   ........           CALL    ?S_EC_MUL_L02
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BA   E000               LDI     R16, 0
   \   000000BC   8304               STD     Z+4, R16
    703              UART16552[ch].pTxBuffer[5] = 0;                          /* packlen LB, don't know yet */
   \   000000BE   2F02               MOV     R16, R18
   \   000000C0   E010               LDI     R17, 0
   \   000000C2   E04B               LDI     R20, 11
   \   000000C4   E051               LDI     R21, 1
   \   000000C6   ........           CALL    ?S_EC_MUL_L02
   \   000000CA   01F8               MOVW    R31:R30, R17:R16
   \   000000CC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000CE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D0   E000               LDI     R16, 0
   \   000000D2   8305               STD     Z+5, R16
    704          }
   \   000000D4   9508               RET
    705          
    706          /*************************************************************************
    707          *
    708          * Build  packet tail
    709          *
    710          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    711          void Uart_BuildTail16552(char ch) {
   \                     Uart_BuildTail16552:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
    712          
    713              Uart_BuildHeader16552(ch);                                // fist build the header
   \   00000006   2F0A               MOV     R16, R26
   \   00000008   ....               RCALL   Uart_BuildHeader16552
    714          
    715              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;         // command, No more data
   \   0000000A   2F0A               MOV     R16, R26
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E04B               LDI     R20, 11
   \   00000010   E051               LDI     R21, 1
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000001C   8120               LD      R18, Z
   \   0000001E   8131               LDD     R19, Z+1
   \   00000020   01C9               MOVW    R25:R24, R19:R18
   \   00000022   9601               ADIW    R25:R24, 1
   \   00000024   2F0A               MOV     R16, R26
   \   00000026   E010               LDI     R17, 0
   \   00000028   E04B               LDI     R20, 11
   \   0000002A   E051               LDI     R21, 1
   \   0000002C   ........           CALL    ?S_EC_MUL_L02
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000034   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000036   8380               ST      Z, R24
   \   00000038   8391               STD     Z+1, R25
   \   0000003A   2F0A               MOV     R16, R26
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   E04B               LDI     R20, 11
   \   00000040   E051               LDI     R21, 1
   \   00000042   ........           CALL    ?S_EC_MUL_L02
   \   00000046   ....               LDI     R30, LOW(UART16552)
   \   00000048   ....               LDI     R31, (UART16552) >> 8
   \   0000004A   0FE0               ADD     R30, R16
   \   0000004C   1FF1               ADC     R31, R17
   \   0000004E   0FE2               ADD     R30, R18
   \   00000050   1FF3               ADC     R31, R19
   \   00000052   E001               LDI     R16, 1
   \   00000054   8300               ST      Z, R16
    716              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;         // error
   \   00000056   2F0A               MOV     R16, R26
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E04B               LDI     R20, 11
   \   0000005C   E051               LDI     R21, 1
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000066   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000068   8120               LD      R18, Z
   \   0000006A   8131               LDD     R19, Z+1
   \   0000006C   01C9               MOVW    R25:R24, R19:R18
   \   0000006E   9601               ADIW    R25:R24, 1
   \   00000070   2F0A               MOV     R16, R26
   \   00000072   E010               LDI     R17, 0
   \   00000074   E04B               LDI     R20, 11
   \   00000076   E051               LDI     R21, 1
   \   00000078   ........           CALL    ?S_EC_MUL_L02
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000080   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000082   8380               ST      Z, R24
   \   00000084   8391               STD     Z+1, R25
   \   00000086   2F0A               MOV     R16, R26
   \   00000088   E010               LDI     R17, 0
   \   0000008A   E04B               LDI     R20, 11
   \   0000008C   E051               LDI     R21, 1
   \   0000008E   ........           CALL    ?S_EC_MUL_L02
   \   00000092   ....               LDI     R30, LOW(UART16552)
   \   00000094   ....               LDI     R31, (UART16552) >> 8
   \   00000096   0FE0               ADD     R30, R16
   \   00000098   1FF1               ADC     R31, R17
   \   0000009A   0FE2               ADD     R30, R18
   \   0000009C   1FF3               ADC     R31, R19
   \   0000009E   E000               LDI     R16, 0
   \   000000A0   8300               ST      Z, R16
    717          
    718              UART16552[ch].pTxBuffer[4] = (UART16552[ch].TxFirst) >> 8;           // packet len high
   \   000000A2   2F0A               MOV     R16, R26
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   E04B               LDI     R20, 11
   \   000000A8   E051               LDI     R21, 1
   \   000000AA   ........           CALL    ?S_EC_MUL_L02
   \   000000AE   01F8               MOVW    R31:R30, R17:R16
   \   000000B0   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000B2   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000B4   8100               LD      R16, Z
   \   000000B6   8111               LDD     R17, Z+1
   \   000000B8   2F01               MOV     R16, R17
   \   000000BA   E010               LDI     R17, 0
   \   000000BC   2F20               MOV     R18, R16
   \   000000BE   2F0A               MOV     R16, R26
   \   000000C0   E010               LDI     R17, 0
   \   000000C2   E04B               LDI     R20, 11
   \   000000C4   E051               LDI     R21, 1
   \   000000C6   ........           CALL    ?S_EC_MUL_L02
   \   000000CA   01F8               MOVW    R31:R30, R17:R16
   \   000000CC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000CE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D0   8324               STD     Z+4, R18
    719              UART16552[ch].pTxBuffer[5] = UART16552[ch].TxFirst;                // correct length because stx's
   \   000000D2   2F0A               MOV     R16, R26
   \   000000D4   E010               LDI     R17, 0
   \   000000D6   E04B               LDI     R20, 11
   \   000000D8   E051               LDI     R21, 1
   \   000000DA   ........           CALL    ?S_EC_MUL_L02
   \   000000DE   01F8               MOVW    R31:R30, R17:R16
   \   000000E0   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000E2   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000E4   8100               LD      R16, Z
   \   000000E6   8111               LDD     R17, Z+1
   \   000000E8   2F20               MOV     R18, R16
   \   000000EA   2F0A               MOV     R16, R26
   \   000000EC   E010               LDI     R17, 0
   \   000000EE   E04B               LDI     R20, 11
   \   000000F0   E051               LDI     R21, 1
   \   000000F2   ........           CALL    ?S_EC_MUL_L02
   \   000000F6   01F8               MOVW    R31:R30, R17:R16
   \   000000F8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000FA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000FC   8325               STD     Z+5, R18
    720          
    721          
    722              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst] = CalcDSTxChecksumUART16552(ch, UART16552[ch].TxFirst); // Get checksum
   \   000000FE   2F0A               MOV     R16, R26
   \   00000100   E010               LDI     R17, 0
   \   00000102   E04B               LDI     R20, 11
   \   00000104   E051               LDI     R21, 1
   \   00000106   ........           CALL    ?S_EC_MUL_L02
   \   0000010A   01F8               MOVW    R31:R30, R17:R16
   \   0000010C   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000010E   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000110   8180               LD      R24, Z
   \   00000112   8191               LDD     R25, Z+1
   \   00000114   2F0A               MOV     R16, R26
   \   00000116   E010               LDI     R17, 0
   \   00000118   E04B               LDI     R20, 11
   \   0000011A   E051               LDI     R21, 1
   \   0000011C   ........           CALL    ?S_EC_MUL_L02
   \   00000120   01F8               MOVW    R31:R30, R17:R16
   \   00000122   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000124   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000126   8120               LD      R18, Z
   \   00000128   8131               LDD     R19, Z+1
   \   0000012A   2F0A               MOV     R16, R26
   \   0000012C   ....               RCALL   CalcDSTxChecksumUART16552
   \   0000012E   2F20               MOV     R18, R16
   \   00000130   2F0A               MOV     R16, R26
   \   00000132   E010               LDI     R17, 0
   \   00000134   E04B               LDI     R20, 11
   \   00000136   E051               LDI     R21, 1
   \   00000138   ........           CALL    ?S_EC_MUL_L02
   \   0000013C   ....               LDI     R30, LOW(UART16552)
   \   0000013E   ....               LDI     R31, (UART16552) >> 8
   \   00000140   0FE0               ADD     R30, R16
   \   00000142   1FF1               ADC     R31, R17
   \   00000144   0FE8               ADD     R30, R24
   \   00000146   1FF9               ADC     R31, R25
   \   00000148   8320               ST      Z, R18
    723              UART16552[ch].TxFirst++;                                     // OBS!! must be inc here due
   \   0000014A   2F0A               MOV     R16, R26
   \   0000014C   E010               LDI     R17, 0
   \   0000014E   E04B               LDI     R20, 11
   \   00000150   E051               LDI     R21, 1
   \   00000152   ........           CALL    ?S_EC_MUL_L02
   \   00000156   01F8               MOVW    R31:R30, R17:R16
   \   00000158   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000015A   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000015C   8100               LD      R16, Z
   \   0000015E   8111               LDD     R17, Z+1
   \   00000160   5F0F               SUBI    R16, 255
   \   00000162   4F1F               SBCI    R17, 255
   \   00000164   8300               ST      Z, R16
   \   00000166   8311               STD     Z+1, R17
    724                                                                           // to ANSI standard !!!!
    725          
    726              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANPRO1_EOT;            // End of transmission
   \   00000168   2F0A               MOV     R16, R26
   \   0000016A   E010               LDI     R17, 0
   \   0000016C   E04B               LDI     R20, 11
   \   0000016E   E051               LDI     R21, 1
   \   00000170   ........           CALL    ?S_EC_MUL_L02
   \   00000174   01F8               MOVW    R31:R30, R17:R16
   \   00000176   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000178   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000017A   8120               LD      R18, Z
   \   0000017C   8131               LDD     R19, Z+1
   \   0000017E   01C9               MOVW    R25:R24, R19:R18
   \   00000180   9601               ADIW    R25:R24, 1
   \   00000182   2F0A               MOV     R16, R26
   \   00000184   E010               LDI     R17, 0
   \   00000186   E04B               LDI     R20, 11
   \   00000188   E051               LDI     R21, 1
   \   0000018A   ........           CALL    ?S_EC_MUL_L02
   \   0000018E   01F8               MOVW    R31:R30, R17:R16
   \   00000190   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000192   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000194   8380               ST      Z, R24
   \   00000196   8391               STD     Z+1, R25
   \   00000198   2F0A               MOV     R16, R26
   \   0000019A   E010               LDI     R17, 0
   \   0000019C   E04B               LDI     R20, 11
   \   0000019E   E051               LDI     R21, 1
   \   000001A0   ........           CALL    ?S_EC_MUL_L02
   \   000001A4   ....               LDI     R30, LOW(UART16552)
   \   000001A6   ....               LDI     R31, (UART16552) >> 8
   \   000001A8   0FE0               ADD     R30, R16
   \   000001AA   1FF1               ADC     R31, R17
   \   000001AC   0FE2               ADD     R30, R18
   \   000001AE   1FF3               ADC     R31, R19
   \   000001B0   E003               LDI     R16, 3
   \   000001B2   8300               ST      Z, R16
    727              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0x00;            //switch off transmitter delay
   \   000001B4   2F0A               MOV     R16, R26
   \   000001B6   E010               LDI     R17, 0
   \   000001B8   E04B               LDI     R20, 11
   \   000001BA   E051               LDI     R21, 1
   \   000001BC   ........           CALL    ?S_EC_MUL_L02
   \   000001C0   01F8               MOVW    R31:R30, R17:R16
   \   000001C2   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000001C4   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000001C6   8120               LD      R18, Z
   \   000001C8   8131               LDD     R19, Z+1
   \   000001CA   01C9               MOVW    R25:R24, R19:R18
   \   000001CC   9601               ADIW    R25:R24, 1
   \   000001CE   2F0A               MOV     R16, R26
   \   000001D0   E010               LDI     R17, 0
   \   000001D2   E04B               LDI     R20, 11
   \   000001D4   E051               LDI     R21, 1
   \   000001D6   ........           CALL    ?S_EC_MUL_L02
   \   000001DA   01F8               MOVW    R31:R30, R17:R16
   \   000001DC   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000001DE   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000001E0   8380               ST      Z, R24
   \   000001E2   8391               STD     Z+1, R25
   \   000001E4   2F0A               MOV     R16, R26
   \   000001E6   E010               LDI     R17, 0
   \   000001E8   E04B               LDI     R20, 11
   \   000001EA   E051               LDI     R21, 1
   \   000001EC   ........           CALL    ?S_EC_MUL_L02
   \   000001F0   ....               LDI     R30, LOW(UART16552)
   \   000001F2   ....               LDI     R31, (UART16552) >> 8
   \   000001F4   0FE0               ADD     R30, R16
   \   000001F6   1FF1               ADC     R31, R17
   \   000001F8   0FE2               ADD     R30, R18
   \   000001FA   1FF3               ADC     R31, R19
   \   000001FC   E000               LDI     R16, 0
   \   000001FE   8300               ST      Z, R16
    728          
    729              UART16552[ch].TxCount = UART16552[ch].TxFirst - 1;       //bytes to send (-1 for the start byte)
   \   00000200   2F0A               MOV     R16, R26
   \   00000202   E010               LDI     R17, 0
   \   00000204   E04B               LDI     R20, 11
   \   00000206   E051               LDI     R21, 1
   \   00000208   ........           CALL    ?S_EC_MUL_L02
   \   0000020C   01F8               MOVW    R31:R30, R17:R16
   \   0000020E   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000210   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000212   8180               LD      R24, Z
   \   00000214   8191               LDD     R25, Z+1
   \   00000216   9701               SBIW    R25:R24, 1
   \   00000218   2F0A               MOV     R16, R26
   \   0000021A   E010               LDI     R17, 0
   \   0000021C   E04B               LDI     R20, 11
   \   0000021E   E051               LDI     R21, 1
   \   00000220   ........           CALL    ?S_EC_MUL_L02
   \   00000224   01F8               MOVW    R31:R30, R17:R16
   \   00000226   ....               SUBI    R30, LOW((-(UART16552 + 64) & 0xFFFF))
   \   00000228   ....               SBCI    R31, HIGH((-(UART16552 + 64) & 0xFFFF))
   \   0000022A   8380               ST      Z, R24
   \   0000022C   8391               STD     Z+1, R25
    730              UART16552[ch].TxLast = 1;                               // sent 1 byte
   \   0000022E   2F0A               MOV     R16, R26
   \   00000230   E010               LDI     R17, 0
   \   00000232   E04B               LDI     R20, 11
   \   00000234   E051               LDI     R21, 1
   \   00000236   ........           CALL    ?S_EC_MUL_L02
   \   0000023A   01F8               MOVW    R31:R30, R17:R16
   \   0000023C   ....               SUBI    R30, LOW((-(UART16552 + 62) & 0xFFFF))
   \   0000023E   ....               SBCI    R31, HIGH((-(UART16552 + 62) & 0xFFFF))
   \   00000240   E001               LDI     R16, 1
   \   00000242   E010               LDI     R17, 0
   \   00000244   8300               ST      Z, R16
   \   00000246   8311               STD     Z+1, R17
    731              GoToSendUART16552(ch);                                 // go to sync modus for recive
   \   00000248   2F0A               MOV     R16, R26
   \   0000024A   ....               RCALL   GoToSendUART16552
    732              if (ch == 0) {                                           // Turn on TXE for channel
   \   0000024C   23AA               TST     R26
   \   0000024E   F4B1               BRNE    ??Uart_BuildTail16552_0
    733                  //OS_RetriggerTimer(&TimerUART0);                    // and start timeout timer
    734                  U0_MCR |= RTS;                                    // set RTS on
   \   00000250   E0EC               LDI     R30, LOW(8716)
   \   00000252   E2F2               LDI     R31, (8716) >> 8
   \   00000254   8100               LD      R16, Z
   \   00000256   6002               ORI     R16, 0x02
   \   00000258   8300               ST      Z, R16
    735                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   0000025A   E104               LDI     R16, 20
   \   0000025C   E010               LDI     R17, 0
   \   0000025E   ........           CALL    OS_Delay
    736                  U0_THR = UART16552[ch].pTxBuffer[0];                // Send 1. byte
   \   00000262   2F0A               MOV     R16, R26
   \   00000264   E010               LDI     R17, 0
   \   00000266   E04B               LDI     R20, 11
   \   00000268   E051               LDI     R21, 1
   \   0000026A   ........           CALL    ?S_EC_MUL_L02
   \   0000026E   01F8               MOVW    R31:R30, R17:R16
   \   00000270   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000272   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000274   8100               LD      R16, Z
   \   00000276   93002208           STS     8712, R16
   \   0000027A   C017               RJMP    ??Uart_BuildTail16552_1
    737              } else if (ch == 1) {
   \                     ??Uart_BuildTail16552_0:
   \   0000027C   30A1               CPI     R26, 1
   \   0000027E   F4A9               BRNE    ??Uart_BuildTail16552_1
    738                  //OS_RetriggerTimer(&TimerUART1);                    // and start timeout timer
    739                  U1_MCR |= RTS;                                      // set RTS on
   \   00000280   E0E4               LDI     R30, LOW(8708)
   \   00000282   E2F2               LDI     R31, (8708) >> 8
   \   00000284   8100               LD      R16, Z
   \   00000286   6002               ORI     R16, 0x02
   \   00000288   8300               ST      Z, R16
    740                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   0000028A   E104               LDI     R16, 20
   \   0000028C   E010               LDI     R17, 0
   \   0000028E   ........           CALL    OS_Delay
    741                  U1_THR = UART16552[ch].pTxBuffer[0];                  // Send 1. byte
   \   00000292   2F0A               MOV     R16, R26
   \   00000294   E010               LDI     R17, 0
   \   00000296   E04B               LDI     R20, 11
   \   00000298   E051               LDI     R21, 1
   \   0000029A   ........           CALL    ?S_EC_MUL_L02
   \   0000029E   01F8               MOVW    R31:R30, R17:R16
   \   000002A0   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000002A2   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000002A4   8100               LD      R16, Z
   \   000002A6   93002200           STS     8704, R16
    742              }
    743          }
   \                     ??Uart_BuildTail16552_1:
   \   000002AA   E0E3               LDI     R30, 3
   \   000002AC   ........           JMP     ?EPILOGUE_B3_L09
    744          
    745          /*************************************************************************
    746          *
    747          * Build send request for system status on WIS
    748          *
    749          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    750          void Uart_BuildReqWISCardStatus(char ch) {
   \                     Uart_BuildReqWISCardStatus:
   \   00000000   2F39               MOV     R19, R25
   \   00000002   2E28               MOV     R2, R24
   \   00000004   2F20               MOV     R18, R16
    751          
    752              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_STAT;       /*command, send data */
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E04B               LDI     R20, 11
   \   0000000C   E051               LDI     R21, 1
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000018   8160               LD      R22, Z
   \   0000001A   8171               LDD     R23, Z+1
   \   0000001C   01CB               MOVW    R25:R24, R23:R22
   \   0000001E   9601               ADIW    R25:R24, 1
   \   00000020   2F02               MOV     R16, R18
   \   00000022   E010               LDI     R17, 0
   \   00000024   E04B               LDI     R20, 11
   \   00000026   E051               LDI     R21, 1
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000032   8380               ST      Z, R24
   \   00000034   8391               STD     Z+1, R25
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E04B               LDI     R20, 11
   \   0000003C   E051               LDI     R21, 1
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   ....               LDI     R30, LOW(UART16552)
   \   00000044   ....               LDI     R31, (UART16552) >> 8
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   0FE6               ADD     R30, R22
   \   0000004C   1FF7               ADC     R31, R23
   \   0000004E   E604               LDI     R16, 100
   \   00000050   8300               ST      Z, R16
    753              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
   \   00000052   2F02               MOV     R16, R18
   \   00000054   E010               LDI     R17, 0
   \   00000056   E04B               LDI     R20, 11
   \   00000058   E051               LDI     R21, 1
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000064   8160               LD      R22, Z
   \   00000066   8171               LDD     R23, Z+1
   \   00000068   01CB               MOVW    R25:R24, R23:R22
   \   0000006A   9601               ADIW    R25:R24, 1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E04B               LDI     R20, 11
   \   00000072   E051               LDI     R21, 1
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000007E   8380               ST      Z, R24
   \   00000080   8391               STD     Z+1, R25
   \   00000082   2F02               MOV     R16, R18
   \   00000084   E010               LDI     R17, 0
   \   00000086   E04B               LDI     R20, 11
   \   00000088   E051               LDI     R21, 1
   \   0000008A   ........           CALL    ?S_EC_MUL_L02
   \   0000008E   ....               LDI     R30, LOW(UART16552)
   \   00000090   ....               LDI     R31, (UART16552) >> 8
   \   00000092   0FE0               ADD     R30, R16
   \   00000094   1FF1               ADC     R31, R17
   \   00000096   0FE6               ADD     R30, R22
   \   00000098   1FF7               ADC     R31, R23
   \   0000009A   E000               LDI     R16, 0
   \   0000009C   8300               ST      Z, R16
    754          
    755          }
   \   0000009E   2D82               MOV     R24, R2
   \   000000A0   2F93               MOV     R25, R19
   \   000000A2   9508               RET
    756          
    757          /*************************************************************************
    758          *
    759          * Build send request for WIS protocoler on WIS
    760          *
    761          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    762          void Uart_BuildReqWISXData(char ch, char sndcmd) {
   \                     Uart_BuildReqWISXData:
   \   00000000   011C               MOVW    R3:R2, R25:R24
   \   00000002   2F20               MOV     R18, R16
   \   00000004   2F31               MOV     R19, R17
    763          
    764              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_XDATA;       /*command, send data */
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E04B               LDI     R20, 11
   \   0000000C   E051               LDI     R21, 1
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000018   8160               LD      R22, Z
   \   0000001A   8171               LDD     R23, Z+1
   \   0000001C   01CB               MOVW    R25:R24, R23:R22
   \   0000001E   9601               ADIW    R25:R24, 1
   \   00000020   2F02               MOV     R16, R18
   \   00000022   E010               LDI     R17, 0
   \   00000024   E04B               LDI     R20, 11
   \   00000026   E051               LDI     R21, 1
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000032   8380               ST      Z, R24
   \   00000034   8391               STD     Z+1, R25
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E04B               LDI     R20, 11
   \   0000003C   E051               LDI     R21, 1
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   ....               LDI     R30, LOW(UART16552)
   \   00000044   ....               LDI     R31, (UART16552) >> 8
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   0FE6               ADD     R30, R22
   \   0000004C   1FF7               ADC     R31, R23
   \   0000004E   E606               LDI     R16, 102
   \   00000050   8300               ST      Z, R16
    765              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
   \   00000052   2F02               MOV     R16, R18
   \   00000054   E010               LDI     R17, 0
   \   00000056   E04B               LDI     R20, 11
   \   00000058   E051               LDI     R21, 1
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000064   8160               LD      R22, Z
   \   00000066   8171               LDD     R23, Z+1
   \   00000068   01CB               MOVW    R25:R24, R23:R22
   \   0000006A   9601               ADIW    R25:R24, 1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E04B               LDI     R20, 11
   \   00000072   E051               LDI     R21, 1
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000007E   8380               ST      Z, R24
   \   00000080   8391               STD     Z+1, R25
   \   00000082   2F02               MOV     R16, R18
   \   00000084   E010               LDI     R17, 0
   \   00000086   E04B               LDI     R20, 11
   \   00000088   E051               LDI     R21, 1
   \   0000008A   ........           CALL    ?S_EC_MUL_L02
   \   0000008E   ....               LDI     R30, LOW(UART16552)
   \   00000090   ....               LDI     R31, (UART16552) >> 8
   \   00000092   0FE0               ADD     R30, R16
   \   00000094   1FF1               ADC     R31, R17
   \   00000096   0FE6               ADD     R30, R22
   \   00000098   1FF7               ADC     R31, R23
   \   0000009A   E001               LDI     R16, 1
   \   0000009C   8300               ST      Z, R16
    766              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = sndcmd;                 // xdata cmd
   \   0000009E   2F02               MOV     R16, R18
   \   000000A0   E010               LDI     R17, 0
   \   000000A2   E04B               LDI     R20, 11
   \   000000A4   E051               LDI     R21, 1
   \   000000A6   ........           CALL    ?S_EC_MUL_L02
   \   000000AA   01F8               MOVW    R31:R30, R17:R16
   \   000000AC   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000AE   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000B0   8160               LD      R22, Z
   \   000000B2   8171               LDD     R23, Z+1
   \   000000B4   01CB               MOVW    R25:R24, R23:R22
   \   000000B6   9601               ADIW    R25:R24, 1
   \   000000B8   2F02               MOV     R16, R18
   \   000000BA   E010               LDI     R17, 0
   \   000000BC   E04B               LDI     R20, 11
   \   000000BE   E051               LDI     R21, 1
   \   000000C0   ........           CALL    ?S_EC_MUL_L02
   \   000000C4   01F8               MOVW    R31:R30, R17:R16
   \   000000C6   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000C8   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000CA   8380               ST      Z, R24
   \   000000CC   8391               STD     Z+1, R25
   \   000000CE   2F02               MOV     R16, R18
   \   000000D0   E010               LDI     R17, 0
   \   000000D2   E04B               LDI     R20, 11
   \   000000D4   E051               LDI     R21, 1
   \   000000D6   ........           CALL    ?S_EC_MUL_L02
   \   000000DA   ....               LDI     R30, LOW(UART16552)
   \   000000DC   ....               LDI     R31, (UART16552) >> 8
   \   000000DE   0FE0               ADD     R30, R16
   \   000000E0   1FF1               ADC     R31, R17
   \   000000E2   0FE6               ADD     R30, R22
   \   000000E4   1FF7               ADC     R31, R23
   \   000000E6   8330               ST      Z, R19
    767          
    768          }
   \   000000E8   01C1               MOVW    R25:R24, R3:R2
   \   000000EA   9508               RET
    769          
    770          /*************************************************************************
    771          *
    772          * Build send request for measure data to Water ingress
    773          *
    774          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    775          void Uart_BuildReqWISData(char ch) {
   \                     Uart_BuildReqWISData:
   \   00000000   2F39               MOV     R19, R25
   \   00000002   2E28               MOV     R2, R24
   \   00000004   2F20               MOV     R18, R16
    776          
    777              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_DATA;       /*command, send data */
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E04B               LDI     R20, 11
   \   0000000C   E051               LDI     R21, 1
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000018   8160               LD      R22, Z
   \   0000001A   8171               LDD     R23, Z+1
   \   0000001C   01CB               MOVW    R25:R24, R23:R22
   \   0000001E   9601               ADIW    R25:R24, 1
   \   00000020   2F02               MOV     R16, R18
   \   00000022   E010               LDI     R17, 0
   \   00000024   E04B               LDI     R20, 11
   \   00000026   E051               LDI     R21, 1
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000032   8380               ST      Z, R24
   \   00000034   8391               STD     Z+1, R25
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E04B               LDI     R20, 11
   \   0000003C   E051               LDI     R21, 1
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   ....               LDI     R30, LOW(UART16552)
   \   00000044   ....               LDI     R31, (UART16552) >> 8
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   0FE6               ADD     R30, R22
   \   0000004C   1FF7               ADC     R31, R23
   \   0000004E   E605               LDI     R16, 101
   \   00000050   8300               ST      Z, R16
    778              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000052   2F02               MOV     R16, R18
   \   00000054   E010               LDI     R17, 0
   \   00000056   E04B               LDI     R20, 11
   \   00000058   E051               LDI     R21, 1
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000064   8160               LD      R22, Z
   \   00000066   8171               LDD     R23, Z+1
   \   00000068   01CB               MOVW    R25:R24, R23:R22
   \   0000006A   9601               ADIW    R25:R24, 1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E04B               LDI     R20, 11
   \   00000072   E051               LDI     R21, 1
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000007E   8380               ST      Z, R24
   \   00000080   8391               STD     Z+1, R25
   \   00000082   2F02               MOV     R16, R18
   \   00000084   E010               LDI     R17, 0
   \   00000086   E04B               LDI     R20, 11
   \   00000088   E051               LDI     R21, 1
   \   0000008A   ........           CALL    ?S_EC_MUL_L02
   \   0000008E   ....               LDI     R30, LOW(UART16552)
   \   00000090   ....               LDI     R31, (UART16552) >> 8
   \   00000092   0FE0               ADD     R30, R16
   \   00000094   1FF1               ADC     R31, R17
   \   00000096   0FE6               ADD     R30, R22
   \   00000098   1FF7               ADC     R31, R23
   \   0000009A   E001               LDI     R16, 1
   \   0000009C   8300               ST      Z, R16
    779              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   0000009E   2F02               MOV     R16, R18
   \   000000A0   E010               LDI     R17, 0
   \   000000A2   E04B               LDI     R20, 11
   \   000000A4   E051               LDI     R21, 1
   \   000000A6   ........           CALL    ?S_EC_MUL_L02
   \   000000AA   01F8               MOVW    R31:R30, R17:R16
   \   000000AC   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000AE   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000B0   8160               LD      R22, Z
   \   000000B2   8171               LDD     R23, Z+1
   \   000000B4   01CB               MOVW    R25:R24, R23:R22
   \   000000B6   9601               ADIW    R25:R24, 1
   \   000000B8   2F02               MOV     R16, R18
   \   000000BA   E010               LDI     R17, 0
   \   000000BC   E04B               LDI     R20, 11
   \   000000BE   E051               LDI     R21, 1
   \   000000C0   ........           CALL    ?S_EC_MUL_L02
   \   000000C4   01F8               MOVW    R31:R30, R17:R16
   \   000000C6   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000C8   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000CA   8380               ST      Z, R24
   \   000000CC   8391               STD     Z+1, R25
   \   000000CE   2F02               MOV     R16, R18
   \   000000D0   E010               LDI     R17, 0
   \   000000D2   E04B               LDI     R20, 11
   \   000000D4   E051               LDI     R21, 1
   \   000000D6   ........           CALL    ?S_EC_MUL_L02
   \   000000DA   ....               LDI     R30, LOW(UART16552)
   \   000000DC   ....               LDI     R31, (UART16552) >> 8
   \   000000DE   0FE0               ADD     R30, R16
   \   000000E0   1FF1               ADC     R31, R17
   \   000000E2   0FE6               ADD     R30, R22
   \   000000E4   1FF7               ADC     R31, R23
   \   000000E6   E000               LDI     R16, 0
   \   000000E8   8300               ST      Z, R16
    780          
    781          }
   \   000000EA   2D82               MOV     R24, R2
   \   000000EC   2F93               MOV     R25, R19
   \   000000EE   9508               RET
    782          
    783          
    784          /*************************************************************************
    785          *
    786          * Build send request for GODA measurement
    787          *
    788          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    789          void Uart_BuildReqRadarData(char ch) {
   \                     Uart_BuildReqRadarData:
   \   00000000   2F39               MOV     R19, R25
   \   00000002   2E28               MOV     R2, R24
   \   00000004   2F20               MOV     R18, R16
    790          
    791              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_DATA;       /*command, send data */
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E04B               LDI     R20, 11
   \   0000000C   E051               LDI     R21, 1
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000018   8160               LD      R22, Z
   \   0000001A   8171               LDD     R23, Z+1
   \   0000001C   01CB               MOVW    R25:R24, R23:R22
   \   0000001E   9601               ADIW    R25:R24, 1
   \   00000020   2F02               MOV     R16, R18
   \   00000022   E010               LDI     R17, 0
   \   00000024   E04B               LDI     R20, 11
   \   00000026   E051               LDI     R21, 1
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000032   8380               ST      Z, R24
   \   00000034   8391               STD     Z+1, R25
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E04B               LDI     R20, 11
   \   0000003C   E051               LDI     R21, 1
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   ....               LDI     R30, LOW(UART16552)
   \   00000044   ....               LDI     R31, (UART16552) >> 8
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   0FE6               ADD     R30, R22
   \   0000004C   1FF7               ADC     R31, R23
   \   0000004E   EA00               LDI     R16, 160
   \   00000050   8300               ST      Z, R16
    792              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
   \   00000052   2F02               MOV     R16, R18
   \   00000054   E010               LDI     R17, 0
   \   00000056   E04B               LDI     R20, 11
   \   00000058   E051               LDI     R21, 1
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000064   8160               LD      R22, Z
   \   00000066   8171               LDD     R23, Z+1
   \   00000068   01CB               MOVW    R25:R24, R23:R22
   \   0000006A   9601               ADIW    R25:R24, 1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E04B               LDI     R20, 11
   \   00000072   E051               LDI     R21, 1
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000007E   8380               ST      Z, R24
   \   00000080   8391               STD     Z+1, R25
   \   00000082   2F02               MOV     R16, R18
   \   00000084   E010               LDI     R17, 0
   \   00000086   E04B               LDI     R20, 11
   \   00000088   E051               LDI     R21, 1
   \   0000008A   ........           CALL    ?S_EC_MUL_L02
   \   0000008E   ....               LDI     R30, LOW(UART16552)
   \   00000090   ....               LDI     R31, (UART16552) >> 8
   \   00000092   0FE0               ADD     R30, R16
   \   00000094   1FF1               ADC     R31, R17
   \   00000096   0FE6               ADD     R30, R22
   \   00000098   1FF7               ADC     R31, R23
   \   0000009A   E001               LDI     R16, 1
   \   0000009C   8300               ST      Z, R16
    793              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 // data
   \   0000009E   2F02               MOV     R16, R18
   \   000000A0   E010               LDI     R17, 0
   \   000000A2   E04B               LDI     R20, 11
   \   000000A4   E051               LDI     R21, 1
   \   000000A6   ........           CALL    ?S_EC_MUL_L02
   \   000000AA   01F8               MOVW    R31:R30, R17:R16
   \   000000AC   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000AE   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000B0   8160               LD      R22, Z
   \   000000B2   8171               LDD     R23, Z+1
   \   000000B4   01CB               MOVW    R25:R24, R23:R22
   \   000000B6   9601               ADIW    R25:R24, 1
   \   000000B8   2F02               MOV     R16, R18
   \   000000BA   E010               LDI     R17, 0
   \   000000BC   E04B               LDI     R20, 11
   \   000000BE   E051               LDI     R21, 1
   \   000000C0   ........           CALL    ?S_EC_MUL_L02
   \   000000C4   01F8               MOVW    R31:R30, R17:R16
   \   000000C6   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000C8   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000CA   8380               ST      Z, R24
   \   000000CC   8391               STD     Z+1, R25
   \   000000CE   2F02               MOV     R16, R18
   \   000000D0   E010               LDI     R17, 0
   \   000000D2   E04B               LDI     R20, 11
   \   000000D4   E051               LDI     R21, 1
   \   000000D6   ........           CALL    ?S_EC_MUL_L02
   \   000000DA   ....               LDI     R30, LOW(UART16552)
   \   000000DC   ....               LDI     R31, (UART16552) >> 8
   \   000000DE   0FE0               ADD     R30, R16
   \   000000E0   1FF1               ADC     R31, R17
   \   000000E2   0FE6               ADD     R30, R22
   \   000000E4   1FF7               ADC     R31, R23
   \   000000E6   E000               LDI     R16, 0
   \   000000E8   8300               ST      Z, R16
    794          
    795          }
   \   000000EA   2D82               MOV     R24, R2
   \   000000EC   2F93               MOV     R25, R19
   \   000000EE   9508               RET
    796          
    797          /*************************************************************************
    798          *
    799          * Build send request for GODA device information
    800          *
    801          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    802          void Uart_BuildReqRadarInfo(char ch) {
   \                     Uart_BuildReqRadarInfo:
   \   00000000   2F39               MOV     R19, R25
   \   00000002   2E28               MOV     R2, R24
   \   00000004   2F20               MOV     R18, R16
    803          
    804              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_INFO;       /*command, send data */
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E04B               LDI     R20, 11
   \   0000000C   E051               LDI     R21, 1
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000018   8160               LD      R22, Z
   \   0000001A   8171               LDD     R23, Z+1
   \   0000001C   01CB               MOVW    R25:R24, R23:R22
   \   0000001E   9601               ADIW    R25:R24, 1
   \   00000020   2F02               MOV     R16, R18
   \   00000022   E010               LDI     R17, 0
   \   00000024   E04B               LDI     R20, 11
   \   00000026   E051               LDI     R21, 1
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000032   8380               ST      Z, R24
   \   00000034   8391               STD     Z+1, R25
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E04B               LDI     R20, 11
   \   0000003C   E051               LDI     R21, 1
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   ....               LDI     R30, LOW(UART16552)
   \   00000044   ....               LDI     R31, (UART16552) >> 8
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   0FE6               ADD     R30, R22
   \   0000004C   1FF7               ADC     R31, R23
   \   0000004E   EA01               LDI     R16, 161
   \   00000050   8300               ST      Z, R16
    805              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                        /*nob */
   \   00000052   2F02               MOV     R16, R18
   \   00000054   E010               LDI     R17, 0
   \   00000056   E04B               LDI     R20, 11
   \   00000058   E051               LDI     R21, 1
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000064   8160               LD      R22, Z
   \   00000066   8171               LDD     R23, Z+1
   \   00000068   01CB               MOVW    R25:R24, R23:R22
   \   0000006A   9601               ADIW    R25:R24, 1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E04B               LDI     R20, 11
   \   00000072   E051               LDI     R21, 1
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000007E   8380               ST      Z, R24
   \   00000080   8391               STD     Z+1, R25
   \   00000082   2F02               MOV     R16, R18
   \   00000084   E010               LDI     R17, 0
   \   00000086   E04B               LDI     R20, 11
   \   00000088   E051               LDI     R21, 1
   \   0000008A   ........           CALL    ?S_EC_MUL_L02
   \   0000008E   ....               LDI     R30, LOW(UART16552)
   \   00000090   ....               LDI     R31, (UART16552) >> 8
   \   00000092   0FE0               ADD     R30, R16
   \   00000094   1FF1               ADC     R31, R17
   \   00000096   0FE6               ADD     R30, R22
   \   00000098   1FF7               ADC     R31, R23
   \   0000009A   E000               LDI     R16, 0
   \   0000009C   8300               ST      Z, R16
    806          }
   \   0000009E   2D82               MOV     R24, R2
   \   000000A0   2F93               MOV     R25, R19
   \   000000A2   9508               RET
    807          
    808          /*************************************************************************
    809          *
    810          * Build datablock to AN-SGCNV
    811          *
    812          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    813          void Uart_BuildSndData(char ch) {
   \                     Uart_BuildSndData:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   2F20               MOV     R18, R16
    814          
    815              char i;
    816          
    817              for (i = 3; i < (TData.RS4.ToTargetBuffer[ch][2]) + 3; i++) {
   \   00000006   E063               LDI     R22, 3
   \                     ??Uart_BuildSndData_0:
   \   00000008   E070               LDI     R23, 0
   \   0000000A   2F02               MOV     R16, R18
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E540               LDI     R20, 80
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(TData + 1270) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, HIGH((-(TData + 1270) & 0xFFFF))
   \   0000001C   8100               LD      R16, Z
   \   0000001E   2FE0               MOV     R30, R16
   \   00000020   E0F0               LDI     R31, 0
   \   00000022   9633               ADIW    R31:R30, 3
   \   00000024   176E               CP      R22, R30
   \   00000026   077F               CPC     R23, R31
   \   00000028   F5AC               BRGE    ??Uart_BuildSndData_1
    818                  UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.ToTargetBuffer[ch][i];       /*command, send data */
   \   0000002A   2F02               MOV     R16, R18
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   E04B               LDI     R20, 11
   \   00000030   E051               LDI     R21, 1
   \   00000032   ........           CALL    ?S_EC_MUL_L02
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000003C   8020               LD      R2, Z
   \   0000003E   8031               LDD     R3, Z+1
   \   00000040   01C1               MOVW    R25:R24, R3:R2
   \   00000042   9601               ADIW    R25:R24, 1
   \   00000044   2F02               MOV     R16, R18
   \   00000046   E010               LDI     R17, 0
   \   00000048   E04B               LDI     R20, 11
   \   0000004A   E051               LDI     R21, 1
   \   0000004C   ........           CALL    ?S_EC_MUL_L02
   \   00000050   01F8               MOVW    R31:R30, R17:R16
   \   00000052   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000054   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000056   8380               ST      Z, R24
   \   00000058   8391               STD     Z+1, R25
   \   0000005A   ....               LDI     R30, LOW((TData + 1268))
   \   0000005C   ....               LDI     R31, HIGH((TData + 1268))
   \   0000005E   E070               LDI     R23, 0
   \   00000060   0FE6               ADD     R30, R22
   \   00000062   1FF7               ADC     R31, R23
   \   00000064   2F02               MOV     R16, R18
   \   00000066   E010               LDI     R17, 0
   \   00000068   E540               LDI     R20, 80
   \   0000006A   E050               LDI     R21, 0
   \   0000006C   ........           CALL    ?S_EC_MUL_L02
   \   00000070   0FE0               ADD     R30, R16
   \   00000072   1FF1               ADC     R31, R17
   \   00000074   8130               LD      R19, Z
   \   00000076   2F02               MOV     R16, R18
   \   00000078   E010               LDI     R17, 0
   \   0000007A   E04B               LDI     R20, 11
   \   0000007C   E051               LDI     R21, 1
   \   0000007E   ........           CALL    ?S_EC_MUL_L02
   \   00000082   ....               LDI     R30, LOW(UART16552)
   \   00000084   ....               LDI     R31, (UART16552) >> 8
   \   00000086   0FE0               ADD     R30, R16
   \   00000088   1FF1               ADC     R31, R17
   \   0000008A   0DE2               ADD     R30, R2
   \   0000008C   1DF3               ADC     R31, R3
   \   0000008E   8330               ST      Z, R19
    819              }
   \   00000090   9563               INC     R22
   \   00000092   CFBA               RJMP    ??Uart_BuildSndData_0
    820              TData.RS4.ToTargetBuffer[ch][0] = false;            // data sent
   \                     ??Uart_BuildSndData_1:
   \   00000094   2F02               MOV     R16, R18
   \   00000096   E010               LDI     R17, 0
   \   00000098   E540               LDI     R20, 80
   \   0000009A   E050               LDI     R21, 0
   \   0000009C   ........           CALL    ?S_EC_MUL_L02
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   ....               SUBI    R30, LOW((-(TData + 1268) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, HIGH((-(TData + 1268) & 0xFFFF))
   \   000000A6   E000               LDI     R16, 0
   \   000000A8   8300               ST      Z, R16
    821          }
   \   000000AA   9189               LD      R24, Y+
   \   000000AC   9199               LD      R25, Y+
   \   000000AE   9508               RET
    822          
    823          /*************************************************************************
    824          *
    825          * Build send request for measure data to AN-SGCNV
    826          *
    827          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    828          void Uart_BuildReqM16552(char ch) {
   \                     Uart_BuildReqM16552:
   \   00000000   2F39               MOV     R19, R25
   \   00000002   2E28               MOV     R2, R24
   \   00000004   2F20               MOV     R18, R16
    829          
    830              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_M_DATA;       /*command, send data */
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E04B               LDI     R20, 11
   \   0000000C   E051               LDI     R21, 1
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000018   8160               LD      R22, Z
   \   0000001A   8171               LDD     R23, Z+1
   \   0000001C   01CB               MOVW    R25:R24, R23:R22
   \   0000001E   9601               ADIW    R25:R24, 1
   \   00000020   2F02               MOV     R16, R18
   \   00000022   E010               LDI     R17, 0
   \   00000024   E04B               LDI     R20, 11
   \   00000026   E051               LDI     R21, 1
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000032   8380               ST      Z, R24
   \   00000034   8391               STD     Z+1, R25
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E04B               LDI     R20, 11
   \   0000003C   E051               LDI     R21, 1
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   ....               LDI     R30, LOW(UART16552)
   \   00000044   ....               LDI     R31, (UART16552) >> 8
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   0FE6               ADD     R30, R22
   \   0000004C   1FF7               ADC     R31, R23
   \   0000004E   E00A               LDI     R16, 10
   \   00000050   8300               ST      Z, R16
    831              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000052   2F02               MOV     R16, R18
   \   00000054   E010               LDI     R17, 0
   \   00000056   E04B               LDI     R20, 11
   \   00000058   E051               LDI     R21, 1
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000064   8160               LD      R22, Z
   \   00000066   8171               LDD     R23, Z+1
   \   00000068   01CB               MOVW    R25:R24, R23:R22
   \   0000006A   9601               ADIW    R25:R24, 1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E04B               LDI     R20, 11
   \   00000072   E051               LDI     R21, 1
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000007E   8380               ST      Z, R24
   \   00000080   8391               STD     Z+1, R25
   \   00000082   2F02               MOV     R16, R18
   \   00000084   E010               LDI     R17, 0
   \   00000086   E04B               LDI     R20, 11
   \   00000088   E051               LDI     R21, 1
   \   0000008A   ........           CALL    ?S_EC_MUL_L02
   \   0000008E   ....               LDI     R30, LOW(UART16552)
   \   00000090   ....               LDI     R31, (UART16552) >> 8
   \   00000092   0FE0               ADD     R30, R16
   \   00000094   1FF1               ADC     R31, R17
   \   00000096   0FE6               ADD     R30, R22
   \   00000098   1FF7               ADC     R31, R23
   \   0000009A   E001               LDI     R16, 1
   \   0000009C   8300               ST      Z, R16
    832              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   0000009E   2F02               MOV     R16, R18
   \   000000A0   E010               LDI     R17, 0
   \   000000A2   E04B               LDI     R20, 11
   \   000000A4   E051               LDI     R21, 1
   \   000000A6   ........           CALL    ?S_EC_MUL_L02
   \   000000AA   01F8               MOVW    R31:R30, R17:R16
   \   000000AC   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000AE   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000B0   8160               LD      R22, Z
   \   000000B2   8171               LDD     R23, Z+1
   \   000000B4   01CB               MOVW    R25:R24, R23:R22
   \   000000B6   9601               ADIW    R25:R24, 1
   \   000000B8   2F02               MOV     R16, R18
   \   000000BA   E010               LDI     R17, 0
   \   000000BC   E04B               LDI     R20, 11
   \   000000BE   E051               LDI     R21, 1
   \   000000C0   ........           CALL    ?S_EC_MUL_L02
   \   000000C4   01F8               MOVW    R31:R30, R17:R16
   \   000000C6   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000C8   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000CA   8380               ST      Z, R24
   \   000000CC   8391               STD     Z+1, R25
   \   000000CE   2F02               MOV     R16, R18
   \   000000D0   E010               LDI     R17, 0
   \   000000D2   E04B               LDI     R20, 11
   \   000000D4   E051               LDI     R21, 1
   \   000000D6   ........           CALL    ?S_EC_MUL_L02
   \   000000DA   ....               LDI     R30, LOW(UART16552)
   \   000000DC   ....               LDI     R31, (UART16552) >> 8
   \   000000DE   0FE0               ADD     R30, R16
   \   000000E0   1FF1               ADC     R31, R17
   \   000000E2   0FE6               ADD     R30, R22
   \   000000E4   1FF7               ADC     R31, R23
   \   000000E6   E000               LDI     R16, 0
   \   000000E8   8300               ST      Z, R16
    833          
    834          }
   \   000000EA   2D82               MOV     R24, R2
   \   000000EC   2F93               MOV     R25, R19
   \   000000EE   9508               RET
    835          
    836          /*************************************************************************
    837          *
    838          * Build send request for raw data to AN-SGCNV
    839          *
    840          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    841          void Uart_BuildReqR16552(char ch) {
   \                     Uart_BuildReqR16552:
   \   00000000   2F39               MOV     R19, R25
   \   00000002   2E28               MOV     R2, R24
   \   00000004   2F20               MOV     R18, R16
    842          
    843              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_R_DATA;       /*command, send data */
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E04B               LDI     R20, 11
   \   0000000C   E051               LDI     R21, 1
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000018   8160               LD      R22, Z
   \   0000001A   8171               LDD     R23, Z+1
   \   0000001C   01CB               MOVW    R25:R24, R23:R22
   \   0000001E   9601               ADIW    R25:R24, 1
   \   00000020   2F02               MOV     R16, R18
   \   00000022   E010               LDI     R17, 0
   \   00000024   E04B               LDI     R20, 11
   \   00000026   E051               LDI     R21, 1
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000032   8380               ST      Z, R24
   \   00000034   8391               STD     Z+1, R25
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E04B               LDI     R20, 11
   \   0000003C   E051               LDI     R21, 1
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   ....               LDI     R30, LOW(UART16552)
   \   00000044   ....               LDI     R31, (UART16552) >> 8
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   0FE6               ADD     R30, R22
   \   0000004C   1FF7               ADC     R31, R23
   \   0000004E   E00D               LDI     R16, 13
   \   00000050   8300               ST      Z, R16
    844              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000052   2F02               MOV     R16, R18
   \   00000054   E010               LDI     R17, 0
   \   00000056   E04B               LDI     R20, 11
   \   00000058   E051               LDI     R21, 1
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000064   8160               LD      R22, Z
   \   00000066   8171               LDD     R23, Z+1
   \   00000068   01CB               MOVW    R25:R24, R23:R22
   \   0000006A   9601               ADIW    R25:R24, 1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E04B               LDI     R20, 11
   \   00000072   E051               LDI     R21, 1
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000007E   8380               ST      Z, R24
   \   00000080   8391               STD     Z+1, R25
   \   00000082   2F02               MOV     R16, R18
   \   00000084   E010               LDI     R17, 0
   \   00000086   E04B               LDI     R20, 11
   \   00000088   E051               LDI     R21, 1
   \   0000008A   ........           CALL    ?S_EC_MUL_L02
   \   0000008E   ....               LDI     R30, LOW(UART16552)
   \   00000090   ....               LDI     R31, (UART16552) >> 8
   \   00000092   0FE0               ADD     R30, R16
   \   00000094   1FF1               ADC     R31, R17
   \   00000096   0FE6               ADD     R30, R22
   \   00000098   1FF7               ADC     R31, R23
   \   0000009A   E001               LDI     R16, 1
   \   0000009C   8300               ST      Z, R16
    845              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   0000009E   2F02               MOV     R16, R18
   \   000000A0   E010               LDI     R17, 0
   \   000000A2   E04B               LDI     R20, 11
   \   000000A4   E051               LDI     R21, 1
   \   000000A6   ........           CALL    ?S_EC_MUL_L02
   \   000000AA   01F8               MOVW    R31:R30, R17:R16
   \   000000AC   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000AE   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000B0   8160               LD      R22, Z
   \   000000B2   8171               LDD     R23, Z+1
   \   000000B4   01CB               MOVW    R25:R24, R23:R22
   \   000000B6   9601               ADIW    R25:R24, 1
   \   000000B8   2F02               MOV     R16, R18
   \   000000BA   E010               LDI     R17, 0
   \   000000BC   E04B               LDI     R20, 11
   \   000000BE   E051               LDI     R21, 1
   \   000000C0   ........           CALL    ?S_EC_MUL_L02
   \   000000C4   01F8               MOVW    R31:R30, R17:R16
   \   000000C6   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000C8   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000CA   8380               ST      Z, R24
   \   000000CC   8391               STD     Z+1, R25
   \   000000CE   2F02               MOV     R16, R18
   \   000000D0   E010               LDI     R17, 0
   \   000000D2   E04B               LDI     R20, 11
   \   000000D4   E051               LDI     R21, 1
   \   000000D6   ........           CALL    ?S_EC_MUL_L02
   \   000000DA   ....               LDI     R30, LOW(UART16552)
   \   000000DC   ....               LDI     R31, (UART16552) >> 8
   \   000000DE   0FE0               ADD     R30, R16
   \   000000E0   1FF1               ADC     R31, R17
   \   000000E2   0FE6               ADD     R30, R22
   \   000000E4   1FF7               ADC     R31, R23
   \   000000E6   E000               LDI     R16, 0
   \   000000E8   8300               ST      Z, R16
    846          
    847          }
   \   000000EA   2D82               MOV     R24, R2
   \   000000EC   2F93               MOV     R25, R19
   \   000000EE   9508               RET
    848          
    849          /*************************************************************************
    850          *
    851          * Build send request for cal data to AN-SGCNV
    852          *
    853          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    854          void Uart_BuildReqC16552(char ch) {
   \                     Uart_BuildReqC16552:
   \   00000000   2F39               MOV     R19, R25
   \   00000002   2E28               MOV     R2, R24
   \   00000004   2F20               MOV     R18, R16
    855          
    856              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_C_DATA;       /*command, send data */
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E04B               LDI     R20, 11
   \   0000000C   E051               LDI     R21, 1
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000018   8160               LD      R22, Z
   \   0000001A   8171               LDD     R23, Z+1
   \   0000001C   01CB               MOVW    R25:R24, R23:R22
   \   0000001E   9601               ADIW    R25:R24, 1
   \   00000020   2F02               MOV     R16, R18
   \   00000022   E010               LDI     R17, 0
   \   00000024   E04B               LDI     R20, 11
   \   00000026   E051               LDI     R21, 1
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000032   8380               ST      Z, R24
   \   00000034   8391               STD     Z+1, R25
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E04B               LDI     R20, 11
   \   0000003C   E051               LDI     R21, 1
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   ....               LDI     R30, LOW(UART16552)
   \   00000044   ....               LDI     R31, (UART16552) >> 8
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   0FE6               ADD     R30, R22
   \   0000004C   1FF7               ADC     R31, R23
   \   0000004E   E100               LDI     R16, 16
   \   00000050   8300               ST      Z, R16
    857              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000052   2F02               MOV     R16, R18
   \   00000054   E010               LDI     R17, 0
   \   00000056   E04B               LDI     R20, 11
   \   00000058   E051               LDI     R21, 1
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000064   8160               LD      R22, Z
   \   00000066   8171               LDD     R23, Z+1
   \   00000068   01CB               MOVW    R25:R24, R23:R22
   \   0000006A   9601               ADIW    R25:R24, 1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E04B               LDI     R20, 11
   \   00000072   E051               LDI     R21, 1
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000007E   8380               ST      Z, R24
   \   00000080   8391               STD     Z+1, R25
   \   00000082   2F02               MOV     R16, R18
   \   00000084   E010               LDI     R17, 0
   \   00000086   E04B               LDI     R20, 11
   \   00000088   E051               LDI     R21, 1
   \   0000008A   ........           CALL    ?S_EC_MUL_L02
   \   0000008E   ....               LDI     R30, LOW(UART16552)
   \   00000090   ....               LDI     R31, (UART16552) >> 8
   \   00000092   0FE0               ADD     R30, R16
   \   00000094   1FF1               ADC     R31, R17
   \   00000096   0FE6               ADD     R30, R22
   \   00000098   1FF7               ADC     R31, R23
   \   0000009A   E001               LDI     R16, 1
   \   0000009C   8300               ST      Z, R16
    858              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   0000009E   2F02               MOV     R16, R18
   \   000000A0   E010               LDI     R17, 0
   \   000000A2   E04B               LDI     R20, 11
   \   000000A4   E051               LDI     R21, 1
   \   000000A6   ........           CALL    ?S_EC_MUL_L02
   \   000000AA   01F8               MOVW    R31:R30, R17:R16
   \   000000AC   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000AE   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000B0   8160               LD      R22, Z
   \   000000B2   8171               LDD     R23, Z+1
   \   000000B4   01CB               MOVW    R25:R24, R23:R22
   \   000000B6   9601               ADIW    R25:R24, 1
   \   000000B8   2F02               MOV     R16, R18
   \   000000BA   E010               LDI     R17, 0
   \   000000BC   E04B               LDI     R20, 11
   \   000000BE   E051               LDI     R21, 1
   \   000000C0   ........           CALL    ?S_EC_MUL_L02
   \   000000C4   01F8               MOVW    R31:R30, R17:R16
   \   000000C6   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000C8   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000CA   8380               ST      Z, R24
   \   000000CC   8391               STD     Z+1, R25
   \   000000CE   2F02               MOV     R16, R18
   \   000000D0   E010               LDI     R17, 0
   \   000000D2   E04B               LDI     R20, 11
   \   000000D4   E051               LDI     R21, 1
   \   000000D6   ........           CALL    ?S_EC_MUL_L02
   \   000000DA   ....               LDI     R30, LOW(UART16552)
   \   000000DC   ....               LDI     R31, (UART16552) >> 8
   \   000000DE   0FE0               ADD     R30, R16
   \   000000E0   1FF1               ADC     R31, R17
   \   000000E2   0FE6               ADD     R30, R22
   \   000000E4   1FF7               ADC     R31, R23
   \   000000E6   E000               LDI     R16, 0
   \   000000E8   8300               ST      Z, R16
    859          
    860          }
   \   000000EA   2D82               MOV     R24, R2
   \   000000EC   2F93               MOV     R25, R19
   \   000000EE   9508               RET
    861          
    862          /*************************************************************************
    863          *
    864          * Build send request for system status on AN_SGCNV
    865          *
    866          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    867          void Uart_BuildReqCardStatus(char ch) {
   \                     Uart_BuildReqCardStatus:
   \   00000000   2F39               MOV     R19, R25
   \   00000002   2E28               MOV     R2, R24
   \   00000004   2F20               MOV     R18, R16
    868          
    869              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CARD_STAT;       /*command, send data */
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E04B               LDI     R20, 11
   \   0000000C   E051               LDI     R21, 1
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000018   8160               LD      R22, Z
   \   0000001A   8171               LDD     R23, Z+1
   \   0000001C   01CB               MOVW    R25:R24, R23:R22
   \   0000001E   9601               ADIW    R25:R24, 1
   \   00000020   2F02               MOV     R16, R18
   \   00000022   E010               LDI     R17, 0
   \   00000024   E04B               LDI     R20, 11
   \   00000026   E051               LDI     R21, 1
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000032   8380               ST      Z, R24
   \   00000034   8391               STD     Z+1, R25
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E04B               LDI     R20, 11
   \   0000003C   E051               LDI     R21, 1
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   ....               LDI     R30, LOW(UART16552)
   \   00000044   ....               LDI     R31, (UART16552) >> 8
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   0FE6               ADD     R30, R22
   \   0000004C   1FF7               ADC     R31, R23
   \   0000004E   E10B               LDI     R16, 27
   \   00000050   8300               ST      Z, R16
    870              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000052   2F02               MOV     R16, R18
   \   00000054   E010               LDI     R17, 0
   \   00000056   E04B               LDI     R20, 11
   \   00000058   E051               LDI     R21, 1
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000064   8160               LD      R22, Z
   \   00000066   8171               LDD     R23, Z+1
   \   00000068   01CB               MOVW    R25:R24, R23:R22
   \   0000006A   9601               ADIW    R25:R24, 1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E04B               LDI     R20, 11
   \   00000072   E051               LDI     R21, 1
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000007E   8380               ST      Z, R24
   \   00000080   8391               STD     Z+1, R25
   \   00000082   2F02               MOV     R16, R18
   \   00000084   E010               LDI     R17, 0
   \   00000086   E04B               LDI     R20, 11
   \   00000088   E051               LDI     R21, 1
   \   0000008A   ........           CALL    ?S_EC_MUL_L02
   \   0000008E   ....               LDI     R30, LOW(UART16552)
   \   00000090   ....               LDI     R31, (UART16552) >> 8
   \   00000092   0FE0               ADD     R30, R16
   \   00000094   1FF1               ADC     R31, R17
   \   00000096   0FE6               ADD     R30, R22
   \   00000098   1FF7               ADC     R31, R23
   \   0000009A   E001               LDI     R16, 1
   \   0000009C   8300               ST      Z, R16
    871              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   0000009E   2F02               MOV     R16, R18
   \   000000A0   E010               LDI     R17, 0
   \   000000A2   E04B               LDI     R20, 11
   \   000000A4   E051               LDI     R21, 1
   \   000000A6   ........           CALL    ?S_EC_MUL_L02
   \   000000AA   01F8               MOVW    R31:R30, R17:R16
   \   000000AC   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000AE   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000B0   8160               LD      R22, Z
   \   000000B2   8171               LDD     R23, Z+1
   \   000000B4   01CB               MOVW    R25:R24, R23:R22
   \   000000B6   9601               ADIW    R25:R24, 1
   \   000000B8   2F02               MOV     R16, R18
   \   000000BA   E010               LDI     R17, 0
   \   000000BC   E04B               LDI     R20, 11
   \   000000BE   E051               LDI     R21, 1
   \   000000C0   ........           CALL    ?S_EC_MUL_L02
   \   000000C4   01F8               MOVW    R31:R30, R17:R16
   \   000000C6   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000C8   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000CA   8380               ST      Z, R24
   \   000000CC   8391               STD     Z+1, R25
   \   000000CE   2F02               MOV     R16, R18
   \   000000D0   E010               LDI     R17, 0
   \   000000D2   E04B               LDI     R20, 11
   \   000000D4   E051               LDI     R21, 1
   \   000000D6   ........           CALL    ?S_EC_MUL_L02
   \   000000DA   ....               LDI     R30, LOW(UART16552)
   \   000000DC   ....               LDI     R31, (UART16552) >> 8
   \   000000DE   0FE0               ADD     R30, R16
   \   000000E0   1FF1               ADC     R31, R17
   \   000000E2   0FE6               ADD     R30, R22
   \   000000E4   1FF7               ADC     R31, R23
   \   000000E6   E000               LDI     R16, 0
   \   000000E8   8300               ST      Z, R16
    872          
    873          }
   \   000000EA   2D82               MOV     R24, R2
   \   000000EC   2F93               MOV     R25, R19
   \   000000EE   9508               RET
    874          
    875          /*************************************************************************
    876          *
    877          * Build send request for card config on AN_SGCNV
    878          *
    879          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    880          void Uart_BuildReqConfig(char ch) {
   \                     Uart_BuildReqConfig:
   \   00000000   2F39               MOV     R19, R25
   \   00000002   2E28               MOV     R2, R24
   \   00000004   2F20               MOV     R18, R16
    881          
    882              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CONFIG;       /*command, send data */
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E04B               LDI     R20, 11
   \   0000000C   E051               LDI     R21, 1
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000018   8160               LD      R22, Z
   \   0000001A   8171               LDD     R23, Z+1
   \   0000001C   01CB               MOVW    R25:R24, R23:R22
   \   0000001E   9601               ADIW    R25:R24, 1
   \   00000020   2F02               MOV     R16, R18
   \   00000022   E010               LDI     R17, 0
   \   00000024   E04B               LDI     R20, 11
   \   00000026   E051               LDI     R21, 1
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000032   8380               ST      Z, R24
   \   00000034   8391               STD     Z+1, R25
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E04B               LDI     R20, 11
   \   0000003C   E051               LDI     R21, 1
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   ....               LDI     R30, LOW(UART16552)
   \   00000044   ....               LDI     R31, (UART16552) >> 8
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   0FE6               ADD     R30, R22
   \   0000004C   1FF7               ADC     R31, R23
   \   0000004E   E101               LDI     R16, 17
   \   00000050   8300               ST      Z, R16
    883              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
   \   00000052   2F02               MOV     R16, R18
   \   00000054   E010               LDI     R17, 0
   \   00000056   E04B               LDI     R20, 11
   \   00000058   E051               LDI     R21, 1
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000064   8160               LD      R22, Z
   \   00000066   8171               LDD     R23, Z+1
   \   00000068   01CB               MOVW    R25:R24, R23:R22
   \   0000006A   9601               ADIW    R25:R24, 1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E04B               LDI     R20, 11
   \   00000072   E051               LDI     R21, 1
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000007E   8380               ST      Z, R24
   \   00000080   8391               STD     Z+1, R25
   \   00000082   2F02               MOV     R16, R18
   \   00000084   E010               LDI     R17, 0
   \   00000086   E04B               LDI     R20, 11
   \   00000088   E051               LDI     R21, 1
   \   0000008A   ........           CALL    ?S_EC_MUL_L02
   \   0000008E   ....               LDI     R30, LOW(UART16552)
   \   00000090   ....               LDI     R31, (UART16552) >> 8
   \   00000092   0FE0               ADD     R30, R16
   \   00000094   1FF1               ADC     R31, R17
   \   00000096   0FE6               ADD     R30, R22
   \   00000098   1FF7               ADC     R31, R23
   \   0000009A   E000               LDI     R16, 0
   \   0000009C   8300               ST      Z, R16
    884          
    885          }
   \   0000009E   2D82               MOV     R24, R2
   \   000000A0   2F93               MOV     R25, R19
   \   000000A2   9508               RET
    886          
    887          /*************************************************************************
    888          *
    889          * Build send request for EEPROM data on AN_SGCNV
    890          *
    891          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    892          void Uart_BuildReqEEPROMData(char ch) {
   \                     Uart_BuildReqEEPROMData:
   \   00000000   011C               MOVW    R3:R2, R25:R24
   \   00000002   2F20               MOV     R18, R16
    893          
    894              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_EEP_DATA;       /*command, send data */
   \   00000004   2F02               MOV     R16, R18
   \   00000006   E010               LDI     R17, 0
   \   00000008   E04B               LDI     R20, 11
   \   0000000A   E051               LDI     R21, 1
   \   0000000C   ........           CALL    ?S_EC_MUL_L02
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000014   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000016   8160               LD      R22, Z
   \   00000018   8171               LDD     R23, Z+1
   \   0000001A   01CB               MOVW    R25:R24, R23:R22
   \   0000001C   9601               ADIW    R25:R24, 1
   \   0000001E   2F02               MOV     R16, R18
   \   00000020   E010               LDI     R17, 0
   \   00000022   E04B               LDI     R20, 11
   \   00000024   E051               LDI     R21, 1
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000030   8380               ST      Z, R24
   \   00000032   8391               STD     Z+1, R25
   \   00000034   2F02               MOV     R16, R18
   \   00000036   E010               LDI     R17, 0
   \   00000038   E04B               LDI     R20, 11
   \   0000003A   E051               LDI     R21, 1
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   ....               LDI     R30, LOW(UART16552)
   \   00000042   ....               LDI     R31, (UART16552) >> 8
   \   00000044   0FE0               ADD     R30, R16
   \   00000046   1FF1               ADC     R31, R17
   \   00000048   0FE6               ADD     R30, R22
   \   0000004A   1FF7               ADC     R31, R23
   \   0000004C   E108               LDI     R16, 24
   \   0000004E   8300               ST      Z, R16
    895              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000050   2F02               MOV     R16, R18
   \   00000052   E010               LDI     R17, 0
   \   00000054   E04B               LDI     R20, 11
   \   00000056   E051               LDI     R21, 1
   \   00000058   ........           CALL    ?S_EC_MUL_L02
   \   0000005C   01F8               MOVW    R31:R30, R17:R16
   \   0000005E   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000060   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000062   8160               LD      R22, Z
   \   00000064   8171               LDD     R23, Z+1
   \   00000066   01CB               MOVW    R25:R24, R23:R22
   \   00000068   9601               ADIW    R25:R24, 1
   \   0000006A   2F02               MOV     R16, R18
   \   0000006C   E010               LDI     R17, 0
   \   0000006E   E04B               LDI     R20, 11
   \   00000070   E051               LDI     R21, 1
   \   00000072   ........           CALL    ?S_EC_MUL_L02
   \   00000076   01F8               MOVW    R31:R30, R17:R16
   \   00000078   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   0000007A   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   0000007C   8380               ST      Z, R24
   \   0000007E   8391               STD     Z+1, R25
   \   00000080   2F02               MOV     R16, R18
   \   00000082   E010               LDI     R17, 0
   \   00000084   E04B               LDI     R20, 11
   \   00000086   E051               LDI     R21, 1
   \   00000088   ........           CALL    ?S_EC_MUL_L02
   \   0000008C   ....               LDI     R30, LOW(UART16552)
   \   0000008E   ....               LDI     R31, (UART16552) >> 8
   \   00000090   0FE0               ADD     R30, R16
   \   00000092   1FF1               ADC     R31, R17
   \   00000094   0FE6               ADD     R30, R22
   \   00000096   1FF7               ADC     R31, R23
   \   00000098   E001               LDI     R16, 1
   \   0000009A   8300               ST      Z, R16
    896              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.EEPROMADChannel[ch];       /*data */
   \   0000009C   2F02               MOV     R16, R18
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   E04B               LDI     R20, 11
   \   000000A2   E051               LDI     R21, 1
   \   000000A4   ........           CALL    ?S_EC_MUL_L02
   \   000000A8   01F8               MOVW    R31:R30, R17:R16
   \   000000AA   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000AC   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000AE   8160               LD      R22, Z
   \   000000B0   8171               LDD     R23, Z+1
   \   000000B2   01CB               MOVW    R25:R24, R23:R22
   \   000000B4   9601               ADIW    R25:R24, 1
   \   000000B6   2F02               MOV     R16, R18
   \   000000B8   E010               LDI     R17, 0
   \   000000BA   E04B               LDI     R20, 11
   \   000000BC   E051               LDI     R21, 1
   \   000000BE   ........           CALL    ?S_EC_MUL_L02
   \   000000C2   01F8               MOVW    R31:R30, R17:R16
   \   000000C4   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   000000C6   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   000000C8   8380               ST      Z, R24
   \   000000CA   8391               STD     Z+1, R25
   \   000000CC   E030               LDI     R19, 0
   \   000000CE   01F9               MOVW    R31:R30, R19:R18
   \   000000D0   ....               SUBI    R30, LOW((-(TData + 1528) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, HIGH((-(TData + 1528) & 0xFFFF))
   \   000000D4   8130               LD      R19, Z
   \   000000D6   2F02               MOV     R16, R18
   \   000000D8   E010               LDI     R17, 0
   \   000000DA   E04B               LDI     R20, 11
   \   000000DC   E051               LDI     R21, 1
   \   000000DE   ........           CALL    ?S_EC_MUL_L02
   \   000000E2   ....               LDI     R30, LOW(UART16552)
   \   000000E4   ....               LDI     R31, (UART16552) >> 8
   \   000000E6   0FE0               ADD     R30, R16
   \   000000E8   1FF1               ADC     R31, R17
   \   000000EA   0FE6               ADD     R30, R22
   \   000000EC   1FF7               ADC     R31, R23
   \   000000EE   8330               ST      Z, R19
    897          
    898          }
   \   000000F0   01C1               MOVW    R25:R24, R3:R2
   \   000000F2   9508               RET
    899          /*************************************************************************
    900          *
    901          *  Receive data on USARTs
    902          *
    903          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    904          void ReceivePacketUart16552(char ch) {
   \                     ReceivePacketUart16552:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F80               MOV     R24, R16
    905          
    906              switch (UART16552[ch].RxState) {                  // check status
   \   00000006   2F08               MOV     R16, R24
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E04B               LDI     R20, 11
   \   0000000C   E051               LDI     R21, 1
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552 + 194) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(UART16552 + 194) & 0xFFFF))
   \   00000018   8100               LD      R16, Z
   \   0000001A   5000               SUBI    R16, 0
   \   0000001C   F049               BREQ    ??ReceivePacketUart16552_0
   \   0000001E   950A               DEC     R16
   \   00000020   F041               BREQ    ??ReceivePacketUart16552_1
   \   00000022   950A               DEC     R16
   \   00000024   F409               BRNE    $+2+2
   \   00000026   C089               RJMP    ??ReceivePacketUart16552_2
   \   00000028   5008               SUBI    R16, 8
   \   0000002A   F409               BRNE    $+2+2
   \   0000002C   C101               RJMP    ??ReceivePacketUart16552_3
   \   0000002E   C0FD               RJMP    ??ReceivePacketUart16552_4
    907              case SYNC :
    908                  // all functionallity in inerrupt routine
    909                  break;
   \                     ??ReceivePacketUart16552_0:
   \   00000030   C0FF               RJMP    ??ReceivePacketUart16552_3
    910              case HEADER :
    911                  if (UART16552[ch].RxLast >= 3) {             // receive header
   \                     ??ReceivePacketUart16552_1:
   \   00000032   2F08               MOV     R16, R24
   \   00000034   E010               LDI     R17, 0
   \   00000036   E04B               LDI     R20, 11
   \   00000038   E051               LDI     R21, 1
   \   0000003A   ........           CALL    ?S_EC_MUL_L02
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(UART16552 + 190) & 0xFFFF))
   \   00000042   ....               SBCI    R31, HIGH((-(UART16552 + 190) & 0xFFFF))
   \   00000044   81A0               LD      R26, Z
   \   00000046   81B1               LDD     R27, Z+1
   \   00000048   9713               SBIW    R27:R26, 3
   \   0000004A   F408               BRCC    $+2+2
   \   0000004C   C0F1               RJMP    ??ReceivePacketUart16552_3
    912                      UART16552[ch].RxPacklen = ((UART16552[ch].pRxBuffer[2] * 256) +
    913                                                 UART16552[ch].pRxBuffer[3]);    // Find length of package
   \   0000004E   2F08               MOV     R16, R24
   \   00000050   E010               LDI     R17, 0
   \   00000052   E04B               LDI     R20, 11
   \   00000054   E051               LDI     R21, 1
   \   00000056   ........           CALL    ?S_EC_MUL_L02
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   ....               SUBI    R30, LOW((-(UART16552 + 70) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, HIGH((-(UART16552 + 70) & 0xFFFF))
   \   00000060   8120               LD      R18, Z
   \   00000062   E030               LDI     R19, 0
   \   00000064   2F32               MOV     R19, R18
   \   00000066   E020               LDI     R18, 0
   \   00000068   2F08               MOV     R16, R24
   \   0000006A   E010               LDI     R17, 0
   \   0000006C   E04B               LDI     R20, 11
   \   0000006E   E051               LDI     R21, 1
   \   00000070   ........           CALL    ?S_EC_MUL_L02
   \   00000074   01F8               MOVW    R31:R30, R17:R16
   \   00000076   ....               SUBI    R30, LOW((-(UART16552 + 71) & 0xFFFF))
   \   00000078   ....               SBCI    R31, HIGH((-(UART16552 + 71) & 0xFFFF))
   \   0000007A   8100               LD      R16, Z
   \   0000007C   E010               LDI     R17, 0
   \   0000007E   0F20               ADD     R18, R16
   \   00000080   1F31               ADC     R19, R17
   \   00000082   2F08               MOV     R16, R24
   \   00000084   E010               LDI     R17, 0
   \   00000086   E04B               LDI     R20, 11
   \   00000088   E051               LDI     R21, 1
   \   0000008A   ........           CALL    ?S_EC_MUL_L02
   \   0000008E   01F8               MOVW    R31:R30, R17:R16
   \   00000090   ....               SUBI    R30, LOW((-(UART16552 + 198) & 0xFFFF))
   \   00000092   ....               SBCI    R31, HIGH((-(UART16552 + 198) & 0xFFFF))
   \   00000094   8320               ST      Z, R18
   \   00000096   8331               STD     Z+1, R19
    914                      if ((UART16552[ch].RxPacklen < ((short)RXSIZE_UART_16552 - UART16552[ch].RxLast)) &&    /* chk. header */
    915                          (UART16552[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   00000098   2F08               MOV     R16, R24
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   E04B               LDI     R20, 11
   \   0000009E   E051               LDI     R21, 1
   \   000000A0   ........           CALL    ?S_EC_MUL_L02
   \   000000A4   01F8               MOVW    R31:R30, R17:R16
   \   000000A6   ....               SUBI    R30, LOW((-(UART16552 + 198) & 0xFFFF))
   \   000000A8   ....               SBCI    R31, HIGH((-(UART16552 + 198) & 0xFFFF))
   \   000000AA   8160               LD      R22, Z
   \   000000AC   8171               LDD     R23, Z+1
   \   000000AE   E728               LDI     R18, 120
   \   000000B0   E030               LDI     R19, 0
   \   000000B2   2F08               MOV     R16, R24
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   E04B               LDI     R20, 11
   \   000000B8   E051               LDI     R21, 1
   \   000000BA   ........           CALL    ?S_EC_MUL_L02
   \   000000BE   01F8               MOVW    R31:R30, R17:R16
   \   000000C0   ....               SUBI    R30, LOW((-(UART16552 + 190) & 0xFFFF))
   \   000000C2   ....               SBCI    R31, HIGH((-(UART16552 + 190) & 0xFFFF))
   \   000000C4   8100               LD      R16, Z
   \   000000C6   8111               LDD     R17, Z+1
   \   000000C8   1B20               SUB     R18, R16
   \   000000CA   0B31               SBC     R19, R17
   \   000000CC   1762               CP      R22, R18
   \   000000CE   0773               CPC     R23, R19
   \   000000D0   F580               BRCC    ??ReceivePacketUart16552_5
   \   000000D2   2F08               MOV     R16, R24
   \   000000D4   E010               LDI     R17, 0
   \   000000D6   E04B               LDI     R20, 11
   \   000000D8   E051               LDI     R21, 1
   \   000000DA   ........           CALL    ?S_EC_MUL_L02
   \   000000DE   01F8               MOVW    R31:R30, R17:R16
   \   000000E0   ....               SUBI    R30, LOW((-(UART16552 + 198) & 0xFFFF))
   \   000000E2   ....               SBCI    R31, HIGH((-(UART16552 + 198) & 0xFFFF))
   \   000000E4   81A0               LD      R26, Z
   \   000000E6   81B1               LDD     R27, Z+1
   \   000000E8   9717               SBIW    R27:R26, 7
   \   000000EA   F118               BRCS    ??ReceivePacketUart16552_5
    916                          UART16552[ch].RxState = RECEIVE;       // Header ok og to data receive state
   \   000000EC   2F08               MOV     R16, R24
   \   000000EE   E010               LDI     R17, 0
   \   000000F0   E04B               LDI     R20, 11
   \   000000F2   E051               LDI     R21, 1
   \   000000F4   ........           CALL    ?S_EC_MUL_L02
   \   000000F8   01F8               MOVW    R31:R30, R17:R16
   \   000000FA   ....               SUBI    R30, LOW((-(UART16552 + 194) & 0xFFFF))
   \   000000FC   ....               SBCI    R31, HIGH((-(UART16552 + 194) & 0xFFFF))
   \   000000FE   E002               LDI     R16, 2
   \   00000100   8300               ST      Z, R16
    917                          UART16552[ch].RxCount = UART16552[ch].RxLast + 1;    // Set receivcounter
   \   00000102   2F08               MOV     R16, R24
   \   00000104   E010               LDI     R17, 0
   \   00000106   E04B               LDI     R20, 11
   \   00000108   E051               LDI     R21, 1
   \   0000010A   ........           CALL    ?S_EC_MUL_L02
   \   0000010E   01F8               MOVW    R31:R30, R17:R16
   \   00000110   ....               SUBI    R30, LOW((-(UART16552 + 190) & 0xFFFF))
   \   00000112   ....               SBCI    R31, HIGH((-(UART16552 + 190) & 0xFFFF))
   \   00000114   81A0               LD      R26, Z
   \   00000116   81B1               LDD     R27, Z+1
   \   00000118   9611               ADIW    R27:R26, 1
   \   0000011A   2F08               MOV     R16, R24
   \   0000011C   E010               LDI     R17, 0
   \   0000011E   E04B               LDI     R20, 11
   \   00000120   E051               LDI     R21, 1
   \   00000122   ........           CALL    ?S_EC_MUL_L02
   \   00000126   01F8               MOVW    R31:R30, R17:R16
   \   00000128   ....               SUBI    R30, LOW((-(UART16552 + 192) & 0xFFFF))
   \   0000012A   ....               SBCI    R31, HIGH((-(UART16552 + 192) & 0xFFFF))
   \   0000012C   83A0               ST      Z, R26
   \   0000012E   83B1               STD     Z+1, R27
   \   00000130   C07F               RJMP    ??ReceivePacketUart16552_3
    918                      } else {
    919                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
   \                     ??ReceivePacketUart16552_5:
   \   00000132   2F08               MOV     R16, R24
   \   00000134   ........           CALL    GoToSyncUART16552
    920                      }
    921                  }
    922                  break;
   \   00000138   C07B               RJMP    ??ReceivePacketUart16552_3
    923              case RECEIVE :
    924                  if (++UART16552[ch].RxCount >= UART16552[ch].RxPacklen) {
   \                     ??ReceivePacketUart16552_2:
   \   0000013A   2F08               MOV     R16, R24
   \   0000013C   E010               LDI     R17, 0
   \   0000013E   E04B               LDI     R20, 11
   \   00000140   E051               LDI     R21, 1
   \   00000142   ........           CALL    ?S_EC_MUL_L02
   \   00000146   01F8               MOVW    R31:R30, R17:R16
   \   00000148   ....               SUBI    R30, LOW((-(UART16552 + 192) & 0xFFFF))
   \   0000014A   ....               SBCI    R31, HIGH((-(UART16552 + 192) & 0xFFFF))
   \   0000014C   81A0               LD      R26, Z
   \   0000014E   81B1               LDD     R27, Z+1
   \   00000150   9611               ADIW    R27:R26, 1
   \   00000152   2F08               MOV     R16, R24
   \   00000154   E010               LDI     R17, 0
   \   00000156   E04B               LDI     R20, 11
   \   00000158   E051               LDI     R21, 1
   \   0000015A   ........           CALL    ?S_EC_MUL_L02
   \   0000015E   01F8               MOVW    R31:R30, R17:R16
   \   00000160   ....               SUBI    R30, LOW((-(UART16552 + 192) & 0xFFFF))
   \   00000162   ....               SBCI    R31, HIGH((-(UART16552 + 192) & 0xFFFF))
   \   00000164   83A0               ST      Z, R26
   \   00000166   83B1               STD     Z+1, R27
   \   00000168   2F08               MOV     R16, R24
   \   0000016A   E010               LDI     R17, 0
   \   0000016C   E04B               LDI     R20, 11
   \   0000016E   E051               LDI     R21, 1
   \   00000170   ........           CALL    ?S_EC_MUL_L02
   \   00000174   01F8               MOVW    R31:R30, R17:R16
   \   00000176   ....               SUBI    R30, LOW((-(UART16552 + 198) & 0xFFFF))
   \   00000178   ....               SBCI    R31, HIGH((-(UART16552 + 198) & 0xFFFF))
   \   0000017A   8100               LD      R16, Z
   \   0000017C   8111               LDD     R17, Z+1
   \   0000017E   17A0               CP      R26, R16
   \   00000180   07B1               CPC     R27, R17
   \   00000182   F408               BRCC    $+2+2
   \   00000184   C055               RJMP    ??ReceivePacketUart16552_3
    925                      if ((UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 1]) == ANPRO1_EOT) {
   \   00000186   ....               LDI     R18, LOW((UART16552 + 67))
   \   00000188   ....               LDI     R19, HIGH((UART16552 + 67))
   \   0000018A   2F08               MOV     R16, R24
   \   0000018C   E010               LDI     R17, 0
   \   0000018E   E04B               LDI     R20, 11
   \   00000190   E051               LDI     R21, 1
   \   00000192   ........           CALL    ?S_EC_MUL_L02
   \   00000196   01F8               MOVW    R31:R30, R17:R16
   \   00000198   ....               SUBI    R30, LOW((-(UART16552 + 198) & 0xFFFF))
   \   0000019A   ....               SBCI    R31, HIGH((-(UART16552 + 198) & 0xFFFF))
   \   0000019C   8100               LD      R16, Z
   \   0000019E   8111               LDD     R17, Z+1
   \   000001A0   0F20               ADD     R18, R16
   \   000001A2   1F31               ADC     R19, R17
   \   000001A4   2F08               MOV     R16, R24
   \   000001A6   E010               LDI     R17, 0
   \   000001A8   E04B               LDI     R20, 11
   \   000001AA   E051               LDI     R21, 1
   \   000001AC   ........           CALL    ?S_EC_MUL_L02
   \   000001B0   0F20               ADD     R18, R16
   \   000001B2   1F31               ADC     R19, R17
   \   000001B4   01F9               MOVW    R31:R30, R19:R18
   \   000001B6   8100               LD      R16, Z
   \   000001B8   3003               CPI     R16, 3
   \   000001BA   F599               BRNE    ??ReceivePacketUart16552_6
    926                          if (CalcDSRxChecksum16552(ch)) {
   \   000001BC   2F08               MOV     R16, R24
   \   000001BE   ....               RCALL   CalcDSRxChecksum16552
   \   000001C0   2B01               OR      R16, R17
   \   000001C2   F159               BREQ    ??ReceivePacketUart16552_7
    927                              if (UART16552[ch].pRxBuffer[0] == MY_SGCNV_ADDR) {     // reply from AN_SGCNV
   \   000001C4   2F08               MOV     R16, R24
   \   000001C6   E010               LDI     R17, 0
   \   000001C8   E04B               LDI     R20, 11
   \   000001CA   E051               LDI     R21, 1
   \   000001CC   ........           CALL    ?S_EC_MUL_L02
   \   000001D0   01F8               MOVW    R31:R30, R17:R16
   \   000001D2   ....               SUBI    R30, LOW((-(UART16552 + 68) & 0xFFFF))
   \   000001D4   ....               SBCI    R31, HIGH((-(UART16552 + 68) & 0xFFFF))
   \   000001D6   8100               LD      R16, Z
   \   000001D8   3F0D               CPI     R16, 253
   \   000001DA   F4D9               BRNE    ??ReceivePacketUart16552_8
    928                                  UART16552[ch].RxState = HANDLE;                   // Package OK
   \   000001DC   2F08               MOV     R16, R24
   \   000001DE   E010               LDI     R17, 0
   \   000001E0   E04B               LDI     R20, 11
   \   000001E2   E051               LDI     R21, 1
   \   000001E4   ........           CALL    ?S_EC_MUL_L02
   \   000001E8   01F8               MOVW    R31:R30, R17:R16
   \   000001EA   ....               SUBI    R30, LOW((-(UART16552 + 194) & 0xFFFF))
   \   000001EC   ....               SBCI    R31, HIGH((-(UART16552 + 194) & 0xFFFF))
   \   000001EE   E00A               LDI     R16, 10
   \   000001F0   8300               ST      Z, R16
    929                                  if (ch == 0) {
   \   000001F2   2388               TST     R24
   \   000001F4   F431               BRNE    ??ReceivePacketUart16552_9
    930                                      OS_SignalEvent(1, &TCB_RS485Rec);
   \   000001F6   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   000001F8   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   000001FA   E001               LDI     R16, 1
   \   000001FC   ........           CALL    OS_SignalEvent
   \   00000200   C017               RJMP    ??ReceivePacketUart16552_3
    931                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart16552_9:
   \   00000202   3081               CPI     R24, 1
   \   00000204   F4A9               BRNE    ??ReceivePacketUart16552_3
    932                                      OS_SignalEvent(2, &TCB_RS485Rec);
   \   00000206   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   00000208   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   0000020A   E002               LDI     R16, 2
   \   0000020C   ........           CALL    OS_SignalEvent
   \   00000210   C00F               RJMP    ??ReceivePacketUart16552_3
    933                                  }
    934                              } else {
    935                                  GoToSyncUART16552(ch);                             // go to sync modus for recive
   \                     ??ReceivePacketUart16552_8:
   \   00000212   2F08               MOV     R16, R24
   \   00000214   ........           CALL    GoToSyncUART16552
   \   00000218   C00B               RJMP    ??ReceivePacketUart16552_3
    936                              }
    937                          } else {
    938                              GoToSyncUART16552(ch);                                // go to sync modus for recive
   \                     ??ReceivePacketUart16552_7:
   \   0000021A   2F08               MOV     R16, R24
   \   0000021C   ........           CALL    GoToSyncUART16552
   \   00000220   C007               RJMP    ??ReceivePacketUart16552_3
    939                          }
    940                      } else {
    941                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
   \                     ??ReceivePacketUart16552_6:
   \   00000222   2F08               MOV     R16, R24
   \   00000224   ........           CALL    GoToSyncUART16552
    942                      }
    943                  }
    944                  break;
   \   00000228   C003               RJMP    ??ReceivePacketUart16552_3
    945              case HANDLE :
    946                  break;
    947              default :
    948                  GoToSyncUART16552(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart16552_4:
   \   0000022A   2F08               MOV     R16, R24
   \   0000022C   ........           CALL    GoToSyncUART16552
    949                  break;
    950              }                                                           // end switch
    951              if (++UART16552[ch].RxLast >= RXSIZE_UART_16552) {                     // check pointer
   \                     ??ReceivePacketUart16552_3:
   \   00000230   2F08               MOV     R16, R24
   \   00000232   E010               LDI     R17, 0
   \   00000234   E04B               LDI     R20, 11
   \   00000236   E051               LDI     R21, 1
   \   00000238   ........           CALL    ?S_EC_MUL_L02
   \   0000023C   01F8               MOVW    R31:R30, R17:R16
   \   0000023E   ....               SUBI    R30, LOW((-(UART16552 + 190) & 0xFFFF))
   \   00000240   ....               SBCI    R31, HIGH((-(UART16552 + 190) & 0xFFFF))
   \   00000242   81A0               LD      R26, Z
   \   00000244   81B1               LDD     R27, Z+1
   \   00000246   9611               ADIW    R27:R26, 1
   \   00000248   2F08               MOV     R16, R24
   \   0000024A   E010               LDI     R17, 0
   \   0000024C   E04B               LDI     R20, 11
   \   0000024E   E051               LDI     R21, 1
   \   00000250   ........           CALL    ?S_EC_MUL_L02
   \   00000254   01F8               MOVW    R31:R30, R17:R16
   \   00000256   ....               SUBI    R30, LOW((-(UART16552 + 190) & 0xFFFF))
   \   00000258   ....               SBCI    R31, HIGH((-(UART16552 + 190) & 0xFFFF))
   \   0000025A   83A0               ST      Z, R26
   \   0000025C   83B1               STD     Z+1, R27
   \   0000025E   37A8               CPI     R26, 120
   \   00000260   E000               LDI     R16, 0
   \   00000262   07B0               CPC     R27, R16
   \   00000264   F068               BRCS    ??ReceivePacketUart16552_10
    952                  UART16552[ch].RxLast = 0;                                     // reset pointer
   \   00000266   2F08               MOV     R16, R24
   \   00000268   E010               LDI     R17, 0
   \   0000026A   E04B               LDI     R20, 11
   \   0000026C   E051               LDI     R21, 1
   \   0000026E   ........           CALL    ?S_EC_MUL_L02
   \   00000272   01F8               MOVW    R31:R30, R17:R16
   \   00000274   ....               SUBI    R30, LOW((-(UART16552 + 190) & 0xFFFF))
   \   00000276   ....               SBCI    R31, HIGH((-(UART16552 + 190) & 0xFFFF))
   \   00000278   E000               LDI     R16, 0
   \   0000027A   E010               LDI     R17, 0
   \   0000027C   8300               ST      Z, R16
   \   0000027E   8311               STD     Z+1, R17
    953              }
    954          }
   \                     ??ReceivePacketUart16552_10:
   \   00000280   E0E4               LDI     R30, 4
   \   00000282   ........           JMP     ?EPILOGUE_B4_L09
    955          
    956          
    957          /*************************************************************************
    958          *
    959          * Calculate tx checksum for Dallas Semiconductor one-wire CRC
    960          *
    961          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    962          char CalcDSTxChecksumUART16552(char ch, unsigned short len) {
   \                     CalcDSTxChecksumUART16552:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    963          
    964              unsigned short cnt;
    965              unsigned char csum;
    966          
    967              csum = 0;
   \   00000008   E060               LDI     R22, 0
    968              for (cnt = 2; cnt < len; cnt++) {
   \   0000000A   E082               LDI     R24, 2
   \   0000000C   E090               LDI     R25, 0
   \                     ??CalcDSTxChecksumUART16552_0:
   \   0000000E   178A               CP      R24, R26
   \   00000010   079B               CPC     R25, R27
   \   00000012   F4C8               BRCC    ??CalcDSTxChecksumUART16552_1
    969                  csum = crc[csum ^ UART16552[ch].pTxBuffer[cnt]];
   \   00000014   E070               LDI     R23, 0
   \   00000016   2D02               MOV     R16, R2
   \   00000018   E010               LDI     R17, 0
   \   0000001A   E04B               LDI     R20, 11
   \   0000001C   E051               LDI     R21, 1
   \   0000001E   ........           CALL    ?S_EC_MUL_L02
   \   00000022   ....               LDI     R30, LOW(UART16552)
   \   00000024   ....               LDI     R31, (UART16552) >> 8
   \   00000026   0FE0               ADD     R30, R16
   \   00000028   1FF1               ADC     R31, R17
   \   0000002A   0FE8               ADD     R30, R24
   \   0000002C   1FF9               ADC     R31, R25
   \   0000002E   8100               LD      R16, Z
   \   00000030   E010               LDI     R17, 0
   \   00000032   2760               EOR     R22, R16
   \   00000034   2771               EOR     R23, R17
   \   00000036   01FB               MOVW    R31:R30, R23:R22
   \   00000038   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000003A   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   0000003C   ....               LDI     R19, (crc) >> 16
   \   0000003E   BF3B               OUT     0x3B, R19
   \   00000040   9166               ELPM    R22, Z
    970              }
   \   00000042   9601               ADIW    R25:R24, 1
   \   00000044   CFE4               RJMP    ??CalcDSTxChecksumUART16552_0
    971              return csum;
   \                     ??CalcDSTxChecksumUART16552_1:
   \   00000046   2F06               MOV     R16, R22
   \   00000048   E0E4               LDI     R30, 4
   \   0000004A   ........           JMP     ?EPILOGUE_B4_L09
    972          }
    973          
    974          /*************************************************************************
    975          *
    976          * Calculate rx checksum for Dallas Semiconductor one-wire CRC
    977          *
    978          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    979          short CalcDSRxChecksum16552(char ch) {
   \                     CalcDSRxChecksum16552:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F20               MOV     R18, R16
    980          
    981              short cnt;
    982              unsigned char csum;
    983          
    984              csum = 0;
   \   00000006   E060               LDI     R22, 0
    985              for (cnt = 0; cnt < (UART16552[ch].RxPacklen - 2); cnt++) {
   \   00000008   E080               LDI     R24, 0
   \   0000000A   E090               LDI     R25, 0
   \                     ??CalcDSRxChecksum16552_0:
   \   0000000C   2F02               MOV     R16, R18
   \   0000000E   E010               LDI     R17, 0
   \   00000010   E04B               LDI     R20, 11
   \   00000012   E051               LDI     R21, 1
   \   00000014   ........           CALL    ?S_EC_MUL_L02
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   ....               SUBI    R30, LOW((-(UART16552 + 198) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, HIGH((-(UART16552 + 198) & 0xFFFF))
   \   0000001E   81A0               LD      R26, Z
   \   00000020   81B1               LDD     R27, Z+1
   \   00000022   9712               SBIW    R27:R26, 2
   \   00000024   178A               CP      R24, R26
   \   00000026   079B               CPC     R25, R27
   \   00000028   F4C8               BRCC    ??CalcDSRxChecksum16552_1
    986                  csum = crc[csum ^ UART16552[ch].pRxBuffer[cnt]];
   \   0000002A   E070               LDI     R23, 0
   \   0000002C   ....               LDI     R30, LOW((UART16552 + 68))
   \   0000002E   ....               LDI     R31, HIGH((UART16552 + 68))
   \   00000030   0FE8               ADD     R30, R24
   \   00000032   1FF9               ADC     R31, R25
   \   00000034   2F02               MOV     R16, R18
   \   00000036   E010               LDI     R17, 0
   \   00000038   E04B               LDI     R20, 11
   \   0000003A   E051               LDI     R21, 1
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   0FE0               ADD     R30, R16
   \   00000042   1FF1               ADC     R31, R17
   \   00000044   8100               LD      R16, Z
   \   00000046   E010               LDI     R17, 0
   \   00000048   2760               EOR     R22, R16
   \   0000004A   2771               EOR     R23, R17
   \   0000004C   01FB               MOVW    R31:R30, R23:R22
   \   0000004E   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000050   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000052   ....               LDI     R19, (crc) >> 16
   \   00000054   BF3B               OUT     0x3B, R19
   \   00000056   9166               ELPM    R22, Z
    987              }
   \   00000058   9601               ADIW    R25:R24, 1
   \   0000005A   CFD8               RJMP    ??CalcDSRxChecksum16552_0
    988              if (csum == UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 2]) {
   \                     ??CalcDSRxChecksum16552_1:
   \   0000005C   ....               LDI     R26, LOW((UART16552 + 66))
   \   0000005E   ....               LDI     R27, HIGH((UART16552 + 66))
   \   00000060   2F02               MOV     R16, R18
   \   00000062   E010               LDI     R17, 0
   \   00000064   E04B               LDI     R20, 11
   \   00000066   E051               LDI     R21, 1
   \   00000068   ........           CALL    ?S_EC_MUL_L02
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   ....               SUBI    R30, LOW((-(UART16552 + 198) & 0xFFFF))
   \   00000070   ....               SBCI    R31, HIGH((-(UART16552 + 198) & 0xFFFF))
   \   00000072   8100               LD      R16, Z
   \   00000074   8111               LDD     R17, Z+1
   \   00000076   0FA0               ADD     R26, R16
   \   00000078   1FB1               ADC     R27, R17
   \   0000007A   2F02               MOV     R16, R18
   \   0000007C   E010               LDI     R17, 0
   \   0000007E   E04B               LDI     R20, 11
   \   00000080   E051               LDI     R21, 1
   \   00000082   ........           CALL    ?S_EC_MUL_L02
   \   00000086   0FA0               ADD     R26, R16
   \   00000088   1FB1               ADC     R27, R17
   \   0000008A   01FD               MOVW    R31:R30, R27:R26
   \   0000008C   8100               LD      R16, Z
   \   0000008E   1760               CP      R22, R16
   \   00000090   F419               BRNE    ??CalcDSRxChecksum16552_2
    989                  return true;
   \   00000092   E001               LDI     R16, 1
   \   00000094   E010               LDI     R17, 0
   \   00000096   C002               RJMP    ??CalcDSRxChecksum16552_3
    990              } else {
    991                  return false;
   \                     ??CalcDSRxChecksum16552_2:
   \   00000098   E000               LDI     R16, 0
   \   0000009A   E010               LDI     R17, 0
   \                     ??CalcDSRxChecksum16552_3:
   \   0000009C   E0E4               LDI     R30, 4
   \   0000009E   ........           JMP     ?EPILOGUE_B4_L09
    992              }
    993          }
    994          
    995          /*************************************************************************
    996          *
    997          * Goes to send mode
    998          *
    999          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1000          void GoToSendUART16552(char ch) {
   \                     GoToSendUART16552:
   \   00000000   2F20               MOV     R18, R16
   1001              UART16552[ch].SyncCnt   = 0;                        // ready for sync
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E04B               LDI     R20, 11
   \   00000008   E051               LDI     R21, 1
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552 + 195) & 0xFFFF))
   \   00000012   ....               SBCI    R31, HIGH((-(UART16552 + 195) & 0xFFFF))
   \   00000014   E000               LDI     R16, 0
   \   00000016   8300               ST      Z, R16
   1002              UART16552[ch].RxState   = SEND;
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E04B               LDI     R20, 11
   \   0000001E   E051               LDI     R21, 1
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552 + 194) & 0xFFFF))
   \   00000028   ....               SBCI    R31, HIGH((-(UART16552 + 194) & 0xFFFF))
   \   0000002A   E003               LDI     R16, 3
   \   0000002C   8300               ST      Z, R16
   1003              UART16552[ch].RxFirst   = 0;
   \   0000002E   2F02               MOV     R16, R18
   \   00000030   E010               LDI     R17, 0
   \   00000032   E04B               LDI     R20, 11
   \   00000034   E051               LDI     R21, 1
   \   00000036   ........           CALL    ?S_EC_MUL_L02
   \   0000003A   01F8               MOVW    R31:R30, R17:R16
   \   0000003C   ....               SUBI    R30, LOW((-(UART16552 + 188) & 0xFFFF))
   \   0000003E   ....               SBCI    R31, HIGH((-(UART16552 + 188) & 0xFFFF))
   \   00000040   E000               LDI     R16, 0
   \   00000042   E010               LDI     R17, 0
   \   00000044   8300               ST      Z, R16
   \   00000046   8311               STD     Z+1, R17
   1004              UART16552[ch].RxPacklen = 0;
   \   00000048   2F02               MOV     R16, R18
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   E04B               LDI     R20, 11
   \   0000004E   E051               LDI     R21, 1
   \   00000050   ........           CALL    ?S_EC_MUL_L02
   \   00000054   01F8               MOVW    R31:R30, R17:R16
   \   00000056   ....               SUBI    R30, LOW((-(UART16552 + 198) & 0xFFFF))
   \   00000058   ....               SBCI    R31, HIGH((-(UART16552 + 198) & 0xFFFF))
   \   0000005A   E000               LDI     R16, 0
   \   0000005C   E010               LDI     R17, 0
   \   0000005E   8300               ST      Z, R16
   \   00000060   8311               STD     Z+1, R17
   1005          }
   \   00000062   9508               RET
   1006          /*************************************************************************
   1007          *
   1008          * Goes to sync mode
   1009          *
   1010          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1011          void GoToSyncUART16552(char ch) {
   \                     GoToSyncUART16552:
   \   00000000   2F20               MOV     R18, R16
   1012          
   1013              UART16552[ch].RxState = SYNC;
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E04B               LDI     R20, 11
   \   00000008   E051               LDI     R21, 1
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552 + 194) & 0xFFFF))
   \   00000012   ....               SBCI    R31, HIGH((-(UART16552 + 194) & 0xFFFF))
   \   00000014   E000               LDI     R16, 0
   \   00000016   8300               ST      Z, R16
   1014          }
   \   00000018   9508               RET
   1015          
   1016          /*************************************************************************
   1017          *
   1018          *  Empty rx buffer on PC16552 UART
   1019          *
   1020          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1021          void EmptyRxBuf16552(char uartno) {
   \                     EmptyRxBuf16552:
   1022          
   1023              switch (uartno) {
   \   00000000   2F10               MOV     R17, R16
   \   00000002   5010               SUBI    R17, 0
   \   00000004   F019               BREQ    ??EmptyRxBuf16552_0
   \   00000006   951A               DEC     R17
   \   00000008   F049               BREQ    ??EmptyRxBuf16552_1
   \   0000000A   9508               RET
   1024              case 0:
   1025                  do {
   1026                      U0_RBR;
   \                     ??EmptyRxBuf16552_0:
   \   0000000C   91102208           LDS     R17, 8712
   1027                  } while (U0_LSR & DATA_READY);
   \   00000010   E0ED               LDI     R30, LOW(8717)
   \   00000012   E2F2               LDI     R31, (8717) >> 8
   \   00000014   8120               LD      R18, Z
   \   00000016   FD20               SBRC    R18, 0
   \   00000018   CFF9               RJMP    ??EmptyRxBuf16552_0
   1028                  break;
   \   0000001A   9508               RET
   1029              case 1:
   1030                  do {
   1031                      U1_RBR;
   \                     ??EmptyRxBuf16552_1:
   \   0000001C   91102200           LDS     R17, 8704
   1032                  } while (U1_LSR & DATA_READY);
   \   00000020   E0E5               LDI     R30, LOW(8709)
   \   00000022   E2F2               LDI     R31, (8709) >> 8
   \   00000024   8120               LD      R18, Z
   \   00000026   FD20               SBRC    R18, 0
   \   00000028   CFF9               RJMP    ??EmptyRxBuf16552_1
   1033                  break;
   1034              }
   1035          }
   \   0000002A   9508               RET
   1036          
   1037          /*************************************************************************
   1038          *
   1039          *  Init the PC16552 UART
   1040          *
   1041          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1042          void Init16552(char channel, unsigned long baud) {
   \                     Init16552:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01CA               MOVW    R25:R24, R21:R20
   \   00000008   01DB               MOVW    R27:R26, R23:R22
   1043              OS_CREATEMB(&UART16552[channel].RxMailBox, 1, MBUF_SIZE, &UART16552[channel].RxMailBoxBuf);
   \   0000000A   ....               LDI     R22, LOW((UART16552 + 203))
   \   0000000C   ....               LDI     R23, HIGH((UART16552 + 203))
   \   0000000E   2D04               MOV     R16, R4
   \   00000010   E010               LDI     R17, 0
   \   00000012   E04B               LDI     R20, 11
   \   00000014   E051               LDI     R21, 1
   \   00000016   ........           CALL    ?S_EC_MUL_L02
   \   0000001A   0F60               ADD     R22, R16
   \   0000001C   1F71               ADC     R23, R17
   \   0000001E   E342               LDI     R20, 50
   \   00000020   E050               LDI     R21, 0
   \   00000022   E021               LDI     R18, 1
   \   00000024   011A               MOVW    R3:R2, R21:R20
   \   00000026   ....               LDI     R30, LOW((UART16552 + 253))
   \   00000028   ....               LDI     R31, HIGH((UART16552 + 253))
   \   0000002A   2D04               MOV     R16, R4
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   E04B               LDI     R20, 11
   \   00000030   E051               LDI     R21, 1
   \   00000032   ........           CALL    ?S_EC_MUL_L02
   \   00000036   0FE0               ADD     R30, R16
   \   00000038   1FF1               ADC     R31, R17
   \   0000003A   01A1               MOVW    R21:R20, R3:R2
   \   0000003C   018F               MOVW    R17:R16, R31:R30
   \   0000003E   ........           CALL    OS_CreateMB
   1044              /*--- Configure UART data block ---*/
   1045              UART16552[channel].TxFirst = 0x00;
   \   00000042   2D04               MOV     R16, R4
   \   00000044   E010               LDI     R17, 0
   \   00000046   E04B               LDI     R20, 11
   \   00000048   E051               LDI     R21, 1
   \   0000004A   ........           CALL    ?S_EC_MUL_L02
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   ....               SUBI    R30, LOW((-(UART16552 + 60) & 0xFFFF))
   \   00000052   ....               SBCI    R31, HIGH((-(UART16552 + 60) & 0xFFFF))
   \   00000054   E000               LDI     R16, 0
   \   00000056   E010               LDI     R17, 0
   \   00000058   8300               ST      Z, R16
   \   0000005A   8311               STD     Z+1, R17
   1046              UART16552[channel].TxLast = 0x00;
   \   0000005C   2D04               MOV     R16, R4
   \   0000005E   E010               LDI     R17, 0
   \   00000060   E04B               LDI     R20, 11
   \   00000062   E051               LDI     R21, 1
   \   00000064   ........           CALL    ?S_EC_MUL_L02
   \   00000068   01F8               MOVW    R31:R30, R17:R16
   \   0000006A   ....               SUBI    R30, LOW((-(UART16552 + 62) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, HIGH((-(UART16552 + 62) & 0xFFFF))
   \   0000006E   E000               LDI     R16, 0
   \   00000070   E010               LDI     R17, 0
   \   00000072   8300               ST      Z, R16
   \   00000074   8311               STD     Z+1, R17
   1047              UART16552[channel].TxCount = 0x00;
   \   00000076   2D04               MOV     R16, R4
   \   00000078   E010               LDI     R17, 0
   \   0000007A   E04B               LDI     R20, 11
   \   0000007C   E051               LDI     R21, 1
   \   0000007E   ........           CALL    ?S_EC_MUL_L02
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   ....               SUBI    R30, LOW((-(UART16552 + 64) & 0xFFFF))
   \   00000086   ....               SBCI    R31, HIGH((-(UART16552 + 64) & 0xFFFF))
   \   00000088   E000               LDI     R16, 0
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   8300               ST      Z, R16
   \   0000008E   8311               STD     Z+1, R17
   1048              UART16552[channel].RxFirst = 0x00;
   \   00000090   2D04               MOV     R16, R4
   \   00000092   E010               LDI     R17, 0
   \   00000094   E04B               LDI     R20, 11
   \   00000096   E051               LDI     R21, 1
   \   00000098   ........           CALL    ?S_EC_MUL_L02
   \   0000009C   01F8               MOVW    R31:R30, R17:R16
   \   0000009E   ....               SUBI    R30, LOW((-(UART16552 + 188) & 0xFFFF))
   \   000000A0   ....               SBCI    R31, HIGH((-(UART16552 + 188) & 0xFFFF))
   \   000000A2   E000               LDI     R16, 0
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   8300               ST      Z, R16
   \   000000A8   8311               STD     Z+1, R17
   1049              UART16552[channel].RxLast = 0x00;
   \   000000AA   2D04               MOV     R16, R4
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   E04B               LDI     R20, 11
   \   000000B0   E051               LDI     R21, 1
   \   000000B2   ........           CALL    ?S_EC_MUL_L02
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART16552 + 190) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, HIGH((-(UART16552 + 190) & 0xFFFF))
   \   000000BC   E000               LDI     R16, 0
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   8300               ST      Z, R16
   \   000000C2   8311               STD     Z+1, R17
   1050              UART16552[channel].RxCount = 0x00;
   \   000000C4   2D04               MOV     R16, R4
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   E04B               LDI     R20, 11
   \   000000CA   E051               LDI     R21, 1
   \   000000CC   ........           CALL    ?S_EC_MUL_L02
   \   000000D0   01F8               MOVW    R31:R30, R17:R16
   \   000000D2   ....               SUBI    R30, LOW((-(UART16552 + 192) & 0xFFFF))
   \   000000D4   ....               SBCI    R31, HIGH((-(UART16552 + 192) & 0xFFFF))
   \   000000D6   E000               LDI     R16, 0
   \   000000D8   E010               LDI     R17, 0
   \   000000DA   8300               ST      Z, R16
   \   000000DC   8311               STD     Z+1, R17
   1051              UART16552[channel].RxState = SEND;  // Must send a message before receiving anything
   \   000000DE   2D04               MOV     R16, R4
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   E04B               LDI     R20, 11
   \   000000E4   E051               LDI     R21, 1
   \   000000E6   ........           CALL    ?S_EC_MUL_L02
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(UART16552 + 194) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, HIGH((-(UART16552 + 194) & 0xFFFF))
   \   000000F0   E003               LDI     R16, 3
   \   000000F2   8300               ST      Z, R16
   1052              UART16552[channel].SyncCnt = 0;
   \   000000F4   2D04               MOV     R16, R4
   \   000000F6   E010               LDI     R17, 0
   \   000000F8   E04B               LDI     R20, 11
   \   000000FA   E051               LDI     R21, 1
   \   000000FC   ........           CALL    ?S_EC_MUL_L02
   \   00000100   01F8               MOVW    R31:R30, R17:R16
   \   00000102   ....               SUBI    R30, LOW((-(UART16552 + 195) & 0xFFFF))
   \   00000104   ....               SBCI    R31, HIGH((-(UART16552 + 195) & 0xFFFF))
   \   00000106   E000               LDI     R16, 0
   \   00000108   8300               ST      Z, R16
   1053              UART16552[channel].TxStatus = 0x00;
   \   0000010A   2D04               MOV     R16, R4
   \   0000010C   E010               LDI     R17, 0
   \   0000010E   E04B               LDI     R20, 11
   \   00000110   E051               LDI     R21, 1
   \   00000112   ........           CALL    ?S_EC_MUL_L02
   \   00000116   01F8               MOVW    R31:R30, R17:R16
   \   00000118   ....               SUBI    R30, LOW((-(UART16552 + 66) & 0xFFFF))
   \   0000011A   ....               SBCI    R31, HIGH((-(UART16552 + 66) & 0xFFFF))
   \   0000011C   E000               LDI     R16, 0
   \   0000011E   8300               ST      Z, R16
   1054          
   1055              switch (channel) {
   \   00000120   2D04               MOV     R16, R4
   \   00000122   5000               SUBI    R16, 0
   \   00000124   F019               BREQ    ??Init16552_0
   \   00000126   950A               DEC     R16
   \   00000128   F1B9               BREQ    ??Init16552_1
   \   0000012A   C06B               RJMP    ??Init16552_2
   1056              case 0x00 :
   1057                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_0:
   \   0000012C   2D04               MOV     R16, R4
   \   0000012E   E010               LDI     R17, 0
   \   00000130   E04B               LDI     R20, 11
   \   00000132   E051               LDI     R21, 1
   \   00000134   ........           CALL    ?S_EC_MUL_L02
   \   00000138   01F8               MOVW    R31:R30, R17:R16
   \   0000013A   ....               SUBI    R30, LOW((-(UART16552 + 196) & 0xFFFF))
   \   0000013C   ....               SBCI    R31, HIGH((-(UART16552 + 196) & 0xFFFF))
   \   0000013E   EF0A               LDI     R16, 250
   \   00000140   E010               LDI     R17, 0
   \   00000142   8300               ST      Z, R16
   \   00000144   8311               STD     Z+1, R17
   1058                  U0_LCR = 0x80;          // set DLAB
   \   00000146   E800               LDI     R16, 128
   \   00000148   9300220B           STS     8715, R16
   1059                  U0_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   0000014C   E408               LDI     R16, 72
   \   0000014E   EE18               LDI     R17, 232
   \   00000150   E021               LDI     R18, 1
   \   00000152   E030               LDI     R19, 0
   \   00000154   01AC               MOVW    R21:R20, R25:R24
   \   00000156   01BD               MOVW    R23:R22, R27:R26
   \   00000158   ........           CALL    ?UL_DIVMOD_L03
   \   0000015C   93002208           STS     8712, R16
   1060                  U0_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   00000160   E408               LDI     R16, 72
   \   00000162   EE18               LDI     R17, 232
   \   00000164   E021               LDI     R18, 1
   \   00000166   E030               LDI     R19, 0
   \   00000168   01AC               MOVW    R21:R20, R25:R24
   \   0000016A   01BD               MOVW    R23:R22, R27:R26
   \   0000016C   ........           CALL    ?UL_DIVMOD_L03
   \   00000170   2F01               MOV     R16, R17
   \   00000172   E010               LDI     R17, 0
   \   00000174   93002209           STS     8713, R16
   1061                  U0_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   00000178   E003               LDI     R16, 3
   \   0000017A   9300220B           STS     8715, R16
   1062                  U0_FCR = 0x01;          // enable FIFO ..
   \   0000017E   E001               LDI     R16, 1
   \   00000180   9300220A           STS     8714, R16
   1063                  U0_FCR = 0xC1;          // and set RXLevel to 14
   \   00000184   EC01               LDI     R16, 193
   \   00000186   9300220A           STS     8714, R16
   1064                  U0_IER = 0x03;          // enable TX and RX int.
   \   0000018A   E003               LDI     R16, 3
   \   0000018C   93002209           STS     8713, R16
   1065                  U0_MCR = 0x00;          // RTS off
   \   00000190   E000               LDI     R16, 0
   \   00000192   9300220C           STS     8716, R16
   1066                  break;
   \   00000196   C035               RJMP    ??Init16552_2
   1067              case 0x01 :
   1068                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_1:
   \   00000198   2D04               MOV     R16, R4
   \   0000019A   E010               LDI     R17, 0
   \   0000019C   E04B               LDI     R20, 11
   \   0000019E   E051               LDI     R21, 1
   \   000001A0   ........           CALL    ?S_EC_MUL_L02
   \   000001A4   01F8               MOVW    R31:R30, R17:R16
   \   000001A6   ....               SUBI    R30, LOW((-(UART16552 + 196) & 0xFFFF))
   \   000001A8   ....               SBCI    R31, HIGH((-(UART16552 + 196) & 0xFFFF))
   \   000001AA   EF0A               LDI     R16, 250
   \   000001AC   E010               LDI     R17, 0
   \   000001AE   8300               ST      Z, R16
   \   000001B0   8311               STD     Z+1, R17
   1069                  U1_LCR = 0x80;          // set DLAB
   \   000001B2   E800               LDI     R16, 128
   \   000001B4   93002203           STS     8707, R16
   1070                  U1_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   000001B8   E408               LDI     R16, 72
   \   000001BA   EE18               LDI     R17, 232
   \   000001BC   E021               LDI     R18, 1
   \   000001BE   E030               LDI     R19, 0
   \   000001C0   01AC               MOVW    R21:R20, R25:R24
   \   000001C2   01BD               MOVW    R23:R22, R27:R26
   \   000001C4   ........           CALL    ?UL_DIVMOD_L03
   \   000001C8   93002200           STS     8704, R16
   1071                  U1_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   000001CC   E408               LDI     R16, 72
   \   000001CE   EE18               LDI     R17, 232
   \   000001D0   E021               LDI     R18, 1
   \   000001D2   E030               LDI     R19, 0
   \   000001D4   01AC               MOVW    R21:R20, R25:R24
   \   000001D6   01BD               MOVW    R23:R22, R27:R26
   \   000001D8   ........           CALL    ?UL_DIVMOD_L03
   \   000001DC   2F01               MOV     R16, R17
   \   000001DE   E010               LDI     R17, 0
   \   000001E0   93002201           STS     8705, R16
   1072                  U1_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   000001E4   E003               LDI     R16, 3
   \   000001E6   93002203           STS     8707, R16
   1073                  U1_FCR = 0x01;          // enable FIFO ..
   \   000001EA   E001               LDI     R16, 1
   \   000001EC   93002202           STS     8706, R16
   1074                  U1_FCR = 0xC1;          // and set RXLevel to 14
   \   000001F0   EC01               LDI     R16, 193
   \   000001F2   93002202           STS     8706, R16
   1075                  U1_IER = 0x03;          // enable TX and RX int.
   \   000001F6   E003               LDI     R16, 3
   \   000001F8   93002201           STS     8705, R16
   1076                  U1_MCR = 0x00;          // RTS off
   \   000001FC   E000               LDI     R16, 0
   \   000001FE   93002204           STS     8708, R16
   1077                  break;
   1078              default:
   1079                  break;
   1080              }
   1081          }
   \                     ??Init16552_2:
   \   00000202   E0E5               LDI     R30, 5
   \   00000204   ........           JMP     ?EPILOGUE_B5_L09

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart16552>_0`:
   \   00000000   00                 DB      0
   \   00000001   01                 DB      1
   \   00000002   ....               DW      (??CheckActionUart16552_1) /2
   \   00000004   ....               DW      (??CheckActionUart16552_13) /2
   \   00000006   01                 DB      0x1
   \   00000007   ....               DW      (??CheckActionUart16552_13) /2
   \   00000009   1D                 DB      0x1d
   \   0000000A   ....               DW      (??CheckActionUart16552_0) /2
   \   0000000C   01                 DB      0x1
   \   0000000D   ....               DW      (??CheckActionUart16552_0) /2
   \   0000000F   01                 DB      0x1
   \   00000010   ....               DW      (??CheckActionUart16552_0) /2
   \   00000012   01                 DB      0x1
   \   00000013   ....               DW      (??CheckActionUart16552_3) /2
   \   00000015   01                 DB      0x1
   \   00000016   ....               DW      (??CheckActionUart16552_3) /2
   \   00000018   01                 DB      0x1
   \   00000019   ....               DW      (??CheckActionUart16552_3) /2
   \   0000001B   01                 DB      0x1
   \   0000001C   ....               DW      (??CheckActionUart16552_4) /2
   \   0000001E   01                 DB      0x1
   \   0000001F   ....               DW      (??CheckActionUart16552_6) /2
   \   00000021   07                 DB      0x7
   \   00000022   ....               DW      (??CheckActionUart16552_7) /2
   \   00000024   03                 DB      0x3
   \   00000025   ....               DW      (??CheckActionUart16552_5) /2
   \   00000027   02                 DB      0x2
   \   00000028   ....               DW      (??CheckActionUart16552_2) /2
   \   0000002A   4D                 DB      0x4d
   \   0000002B   ....               DW      (??CheckActionUart16552_8) /2
   \   0000002D   01                 DB      0x1
   \   0000002E   ....               DW      (??CheckActionUart16552_10) /2
   \   00000030   01                 DB      0x1
   \   00000031   ....               DW      (??CheckActionUart16552_9) /2
   \   00000033   34                 DB      0x34
   \   00000034   ....               DW      (??CheckActionUart16552_11) /2
   \   00000036   01                 DB      0x1
   \   00000037   ....               DW      (??CheckActionUart16552_12) /2
   \   00000039   FB                 DB      251
   1082          
   1083          #if USE_MODBUS_PROTOCOL == 1
   1084          static unsigned short  Rsp_Delay[2];       // response delay
   1085          
   1086          static void
   1087          load_eeprom_misc_485(void) {
   1088              char ch;
   1089              uint16_t temp;
   1090          
   1091              for (ch = 0; ch < 2; ch++) {
   1092                  ReadEEPROMBuffer(EEPROM_PORTSETUP + 3 + ch * 2, sizeof(uint16_t), (char *)&temp);
   1093          
   1094                  if (temp > 0 && temp <= 5000) {
   1095                      Rsp_Delay[ch] = temp;
   1096                  } else {
   1097                      Rsp_Delay[ch] = 0;
   1098                  }
   1099              }
   1100          }
   1101          
   1102          static void
   1103          __rs485_task_set_power(uint8_t ch, uint8_t on) {
   1104              uint8_t current;
   1105          
   1106              current = (TData.RS4.PortUsed >> ch) & 0x01;
   1107          
   1108              if (current == on) {
   1109                  // no need to waste time
   1110                  return;
   1111              }
   1112          
   1113              if (on) {
   1114                  TData.RS4.PortUsed |= (1 << ch);
   1115              } else {
   1116                  TData.RS4.PortUsed &= ~(1 << ch);
   1117              }
   1118              PORTC = TData.RS4.PortUsed;
   1119          
   1120              WriteEEPROMByte(EEPROM_PORTSETUP, TData.RS4.PortUsed);
   1121          }
   1122          
   1123          void
   1124          rs485_task_set_power(uint8_t ch, uint8_t on) {
   1125              OS_Use(&UARTSEND);
   1126              __rs485_task_set_power(ch, on);
   1127              OS_Unuse(&UARTSEND);
   1128          }
   1129          
   1130          uint8_t
   1131          rs485_task_get_power(uint8_t ch) {
   1132              uint8_t status;
   1133          
   1134              OS_Use(&UARTSEND);
   1135              status = (TData.RS4.PortUsed >> ch) & 0x01;
   1136              OS_Unuse(&UARTSEND);
   1137          
   1138              return status;
   1139          }
   1140          
   1141          uint8_t
   1142          rs485_task_get_sensor_type(uint8_t ch) {
   1143              uint8_t sensor_type;
   1144          
   1145              OS_Use(&UARTSEND);
   1146              sensor_type = (TData.RS4.SensorType[ch / 4] >> (2 * (ch % 4))) & 0x03;
   1147              OS_Unuse(&UARTSEND);
   1148          
   1149              return sensor_type;
   1150          }
   1151          
   1152          void
   1153          rs485_task_set_sensor_type(uint8_t ch, uint8_t sensor_type) {
   1154              OS_Use(&UARTSEND);
   1155          
   1156              // clear first
   1157              TData.RS4.SensorType[ch / 4] &= ~(0x03 << ((ch % 4) * 2));
   1158          
   1159              // set
   1160              TData.RS4.SensorType[ch / 4] |= ((sensor_type & 0x03) << ((ch % 4) * 2));
   1161          
   1162              WriteEEPROMByte(EEPROM_PORTSETUP + 1, TData.RS4.SensorType[0]);
   1163              WriteEEPROMByte(EEPROM_PORTSETUP + 2, TData.RS4.SensorType[1]);
   1164          
   1165              OS_Unuse(&UARTSEND);
   1166          }
   1167          
   1168          static void
   1169          __rs485_task_set_rsp_delay(uint8_t port, uint16_t delay) {
   1170              uint16_t cur_delay = Rsp_Delay[port];
   1171          
   1172              if (cur_delay == delay) {
   1173                  return;
   1174              }
   1175          
   1176              if (delay > 5000) {
   1177                  return;
   1178              }
   1179          
   1180              Rsp_Delay[port] = delay;
   1181          
   1182              WriteEEPROMBufferSync(EEPROM_PORTSETUP + 3 + port * 2, sizeof(uint16_t), (char *)&delay);
   1183          }
   1184          
   1185          void
   1186          rs485_task_set_rsp_delay(uint8_t port, uint16_t delay) {
   1187              OS_Use(&UARTSEND);
   1188              __rs485_task_set_rsp_delay(port, delay);
   1189              OS_Unuse(&UARTSEND);
   1190          }
   1191          
   1192          uint16_t
   1193          rs485_task_get_rsp_delay(uint8_t port) {
   1194              uint16_t    ret;
   1195          
   1196              OS_Use(&UARTSEND);
   1197              ret = Rsp_Delay[port];
   1198              OS_Unuse(&UARTSEND);
   1199          
   1200              return ret;
   1201          }
   1202          
   1203          uint8_t
   1204          rs485_task_get_comm_status(uint8_t port) {
   1205              uint16_t    ret;
   1206          
   1207              // XXX no need for lock
   1208              ret = (TData.RS4.IOUnitStatus[port] & COMFAIL_BIT) ? 0 : 1;
   1209          
   1210              return ret;
   1211          }
   1212          
   1213          uint8_t
   1214          rs485_task_get_channel_status(uint8_t port, uint8_t ch) {
   1215              uint8_t ret;
   1216          
   1217              OS_Use(&UARTSEND);
   1218              ret = (uint8_t)TData.RS4.TargetSetup1[port][ch];
   1219              OS_Unuse(&UARTSEND);
   1220          
   1221              return ret;
   1222          }
   1223          
   1224          int16_t
   1225          rs485_task_get_channel_value(uint8_t port, uint8_t ch) {
   1226              float f;
   1227              int16_t  ret;
   1228          
   1229              OS_Use(&UARTSEND);
   1230              f = TData.RS4.Result[port][ch];
   1231              OS_Unuse(&UARTSEND);
   1232          
   1233              ret = (int16_t)(f * 100);
   1234              return ret;
   1235          }
   1236          
   1237          int16_t
   1238          rs485_task_get_channel_raw_value(uint8_t port, uint8_t ch) {
   1239              int16_t ret;
   1240          
   1241              OS_Use(&UARTSEND);
   1242              ret = TData.RS4.Raw[port][ch];
   1243              OS_Unuse(&UARTSEND);
   1244          
   1245              return ret;
   1246          }
   1247          
   1248          int16_t
   1249          rs485_task_get_channel_cal_value(uint8_t port, uint8_t ch) {
   1250              int16_t ret;
   1251          
   1252              OS_Use(&UARTSEND);
   1253              ret = TData.RS4.Cal[port][ch];
   1254              OS_Unuse(&UARTSEND);
   1255          
   1256              return ret;
   1257          }
   1258          #endif /* USE_MODBUS_PROTOCOL == 1 */

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   CalcDSRxChecksum16552
        4      2 ?S_EC_MUL_L02
      4      2   CalcDSTxChecksumUART16552
        4      2 ?S_EC_MUL_L02
      4      2   CheckActionUart16552
        4      2   -> ReceiveCData
        4      2   -> ReceiveCardEEPROMData
        4      2   -> ReceiveCardStatus
        4      2   -> ReceiveConfigData
        4      2   -> ReceivePTOData
        4      2   -> ReceiveRData
        4      2   -> ReceiveRadarData
        4      2   -> ReceiveRadarInfo
        4      2   -> ReceiveWHData
        4      2   -> ReceiveWISData
        4      2   -> ReceiveWISStatus
        4      2   -> ReceiveWISXData
        4      2 ?CV_SWITCH_L06
        4      2 ?S_EC_MUL_L02
      0      2   EmptyRxBuf16552
      7      2   ExtRS485Ctl
        7      2   -> EmptyRxBuf16552
        7      2   -> Init16552
        7      2   -> OS_Delay
        7      2   -> OS_Error
        7      2   -> OS_SignalEvent
        7      2   -> OS_WaitEventTimed
        7      2   -> ReadEEPROMByte
        7      2   -> SetRS4Port
        7      2   -> Uart_BuildReqC16552
        7      2   -> Uart_BuildReqCardStatus
        7      2   -> Uart_BuildReqConfig
        7      2   -> Uart_BuildReqEEPROMData
        7      2   -> Uart_BuildReqM16552
        7      2   -> Uart_BuildReqR16552
        7      2   -> Uart_BuildReqRadarData
        7      2   -> Uart_BuildReqRadarInfo
        7      2   -> Uart_BuildReqWISCardStatus
        7      2   -> Uart_BuildReqWISData
        7      2   -> Uart_BuildReqWISXData
        7      2   -> Uart_BuildSndData
        7      2   -> Uart_BuildTail16552
        7      2 ?SS_SHR_L02
        7      2 ?S_SHL_L02
      4      2   ExtRS485Rec
        4      2   -> OS_Delay
        4      2   -> OS_Error
        4      2   -> OS_SignalEvent
        4      2   -> OS_WaitEventTimed
        4      2   -> Usart16552CheckPackage
        4      2 ?SS_SHR_L02
        4      2 ?S_SHL_L02
      0      2   GoToSendUART16552
        0      2 ?S_EC_MUL_L02
      0      2   GoToSyncUART16552
        0      2 ?S_EC_MUL_L02
      5      2   Init16552
        5      2   -> OS_CreateMB
        5      2 ?S_EC_MUL_L02
        5      2 ?UL_DIVMOD_L03
      6      2   ReceiveCData
        6      2 ?S_EC_MUL_L02
      4      2   ReceiveCardEEPROMData
        4      2 ?S_EC_MUL_L02
      0      2   ReceiveCardStatus
        0      2 ?S_EC_MUL_L02
      0      2   ReceiveConfigData
        0      2 ?S_EC_MUL_L02
     14      2   ReceivePTOData
       14      2   -> OS_Unuse
       14      2   -> OS_Use
       14      2 ?S_EC_MUL_L02
      4      2   ReceivePacketUart16552
        4      2   -> CalcDSRxChecksum16552
        4      2   -> GoToSyncUART16552
        4      2   -> OS_SignalEvent
        4      2 ?S_EC_MUL_L02
      6      2   ReceiveRData
        6      2 ?S_EC_MUL_L02
      8      2   ReceiveRadarData
        8      2 ?S_EC_MUL_L02
      0      2   ReceiveRadarInfo
        0      2 ?S_EC_MUL_L02
      5      2   ReceiveWHData
        5      2   -> OS_Unuse
        5      2   -> OS_Use
        5      2 ?S_EC_MUL_L02
        5      2 ?S_SHL_L02
      8      2   ReceiveWISData
        8      2 ?F_DIV_L04
        8      2 ?SL2F_L04
        8      2 ?S_EC_MUL_L02
        8      2 ?UL2F_L04
      0      2   ReceiveWISStatus
        0      2 ?S_EC_MUL_L02
      0      2   ReceiveWISXData
        0      2 ?S_EC_MUL_L02
      0      2   SetRS4Port
      0      2   TimoutUART0
      0      2   TimoutUART1
      0      2   Uart_BuildHeader16552
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqC16552
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqCardStatus
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqConfig
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqEEPROMData
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqM16552
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqR16552
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqRadarData
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqRadarInfo
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISCardStatus
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISData
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISXData
        0      2 ?S_EC_MUL_L02
      2      2   Uart_BuildSndData
        2      2 ?S_EC_MUL_L02
      3      2   Uart_BuildTail16552
        3      2   -> CalcDSTxChecksumUART16552
        3      2   -> GoToSendUART16552
        3      2   -> OS_Delay
        3      2   -> Uart_BuildHeader16552
        3      2 ?S_EC_MUL_L02
      5      2   Usart16552CheckPackage
        5      2   -> CheckActionUart16552
        5      2   -> GoToSyncUART16552
        5      2 ?S_EC_MUL_L02


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      58  ?<Jumptable for CheckActionUart16552>_0
     162  CalcDSRxChecksum16552
      78  CalcDSTxChecksumUART16552
     202  CheckActionUart16552
      44  EmptyRxBuf16552
    1408  ExtRS485Ctl
     712  ExtRS485Rec
     100  GoToSendUART16552
      26  GoToSyncUART16552
     520  Init16552
     280  ReceiveCData
     138  ReceiveCardEEPROMData
     116  ReceiveCardStatus
     208  ReceiveConfigData
     308  ReceivePTOData
     646  ReceivePacketUart16552
     280  ReceiveRData
     302  ReceiveRadarData
      66  ReceiveRadarInfo
     448  ReceiveWHData
     336  ReceiveWISData
     184  ReceiveWISStatus
     166  ReceiveWISXData
       8  SetRS4Port
      12  TimoutUART0
      12  TimoutUART1
     214  Uart_BuildHeader16552
     240  Uart_BuildReqC16552
     240  Uart_BuildReqCardStatus
     164  Uart_BuildReqConfig
     244  Uart_BuildReqEEPROMData
     240  Uart_BuildReqM16552
     240  Uart_BuildReqR16552
     240  Uart_BuildReqRadarData
     164  Uart_BuildReqRadarInfo
     164  Uart_BuildReqWISCardStatus
     240  Uart_BuildReqWISData
     236  Uart_BuildReqWISXData
     176  Uart_BuildSndData
     688  Uart_BuildTail16552
     116  Usart16552CheckPackage
       1  _A_PORTC
       1  _A_PORTE

 
      2 bytes in segment ABSOLUTE
 10 368 bytes in segment CODE
     58 bytes in segment SWITCH
 
 10 426 bytes of CODE memory
      0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
