####################################################################################################
#                                                                                                  #
#     Micro Series H8/300 C-Compiler V2.20C/DXT                            27/May/115  04:39:43     #
#                                                                                                  #
#           Memory model  =  large                                                                 #
#           Source file   =  sg.c                                                                  #
#           List file     =  sg.lst                                                                #
#           Object file   =  sg.r20                                                                #
#           Command line  =  -C -IC:\h8\ -e -q -L -P -ml -s -K sg                                  #
#                                                                                                  #
#                                                     (c) Copyright IAR Systems, Hitachi Ltd. 1992 #
####################################################################################################


; Function name: InitRegs
; Used stack   : 2

; Function name: InitVar
; Used stack   : 4

; Function name: InitStartup
; Used stack   : 4

; Function name: GetMyAddress
; Used stack   : 2

; Function name: KickDog
; Used stack   : 2

; Function name: Led
; Used stack   : 4

; Function name: TxDriver
; Used stack   : 2

; Function name: OneMsecDelay
; Used stack   : 2

; Function name: SetEepromChannel
; Used stack   : 4

; Function name: SetSupplyChannel
; Used stack   : 4

; Function name: SetMuxChannel
; Used stack   : 4

; Function name: SetSupplyCurrent
; Used stack   : 2

; Function name: SetCalResistance
; Used stack   : 2

; Function name: CheckConvert
; Used stack   : 4

; Function name: ADConvert
; Used stack   : 8

; Function name: CalcPress
; Used stack   : 18

; Function name: CalcPercent
; Used stack   : 28

; Function name: CalcTemp
; Used stack   : 24

; Function name: CalcOther
; Used stack   : 16

; Function name: UnpackSensData
; Used stack   : 30

; Function name: CalcSensData
; Used stack   : 16

; Function name: FindTemp
; Used stack   : 6

; Function name: ReadAdByte
; Used stack   : 6

; Function name: WriteAdByte
; Used stack   : 6

; Function name: ResetRxPointer
; Used stack   : 2

; Function name: CalcRxChecksum
; Used stack   : 6

; Function name: HandleRxPacket
; Used stack   : 10

; Function name: ReceiveRxPacket
; Used stack   : 6

; Function name: Irq0Int
; Used stack   : 4

; Function name: Irq1Int
; Used stack   : 6

; Function name: Irq2Int
; Used stack   : 4

; Function name: FrtcInt
; Used stack   : 6

; Function name: FrtoInt
; Used stack   : 4

; Function name: Tim0Int
; Used stack   : 8

; Function name: TimInt
; Used stack   : 14

; Function name: Tx0Int
; Used stack   : 10

; Function name: Err0Int
; Used stack   : 8

; Function name: Rx0Int
; Used stack   : 16

; Function name: Tx1Int
; Used stack   : 8

; Function name: Err1Int
; Used stack   : 8

; Function name: Rx1Int
; Used stack   : 10

; Function name: main
; Used stack   : 2

   \   0000                    NAME    sg(16)
   \   0000                    RSEG    CODE(1)
   \   0000                    RSEG    CONST(1)
   \   0000                    COMMON  INTVEC(1)
   \   0000                    RSEG    UDATA(1)
   \   0000                    PUBLIC  ADConvert
   \   0000                    EXTERN  BuildCalData
   \   0000                    EXTERN  BuildHeader
   \   0000                    EXTERN  BuildMOData
   \   0000                    EXTERN  BuildMPData
   \   0000                    EXTERN  BuildMTData
   \   0000                    EXTERN  BuildROData
   \   0000                    EXTERN  BuildRPData
   \   0000                    EXTERN  BuildRTData
   \   0000                    EXTERN  BuildTail
   \   0000                    PUBLIC  CalcOther
   \   0000                    PUBLIC  CalcPercent
   \   0000                    PUBLIC  CalcPress
   \   0000                    PUBLIC  CalcRxChecksum
   \   0000                    PUBLIC  CalcSensData
   \   0000                    PUBLIC  CalcTemp
   \   0000                    EXTERN  CheckAction
   \   0000                    PUBLIC  CheckConvert
   \   0000                    EXTERN  CheckEepChannel
   \   0000                    PUBLIC  Err0Int
   \   0000                    PUBLIC  Err1Int
   \   0000                    PUBLIC  FindTemp
   \   0000                    PUBLIC  FrtcInt
   \   0000                    PUBLIC  FrtoInt
   \   0000                    PUBLIC  GetMyAddress
   \   0000                    PUBLIC  HandleRxPacket
   \   0000                    PUBLIC  InitRegs
   \   0000                    PUBLIC  InitStartup
   \   0000                    PUBLIC  InitVar
   \   0000                    PUBLIC  Irq0Int
   \   0000                    PUBLIC  Irq1Int
   \   0000                    PUBLIC  Irq2Int
   \   0000                    PUBLIC  KickDog
   \   0000                    PUBLIC  Led
   \   0000                    PUBLIC  OneMsecDelay
   \   0000                    PUBLIC  ReadAdByte
   \   0000                    PUBLIC  ReceiveRxPacket
   \   0000                    PUBLIC  ResetRxPointer
   \   0000                    PUBLIC  Rx0Int
   \   0000                    PUBLIC  Rx1Int
   \   0000                    PUBLIC  SetCalResistance
   \   0000                    PUBLIC  SetEepromChannel
   \   0000                    PUBLIC  SetMuxChannel
   \   0000                    PUBLIC  SetSupplyChannel
   \   0000                    PUBLIC  SetSupplyCurrent
   \   0000                    PUBLIC  Tim0Int
   \   0000                    PUBLIC  TimInt
   \   0000                    PUBLIC  Tx0Int
   \   0000                    PUBLIC  Tx1Int
   \   0000                    PUBLIC  TxDriver
   \   0000                    PUBLIC  UnpackSensData
   \   0000                    PUBLIC  WriteAdByte
   \   0000                    PUBLIC  ad_gain
   \   0000                    PUBLIC  ad_mode
   \   0000                    PUBLIC  ad_settling
   \   0000                    PUBLIC  ad_state
   \   0000                    PUBLIC  ad_timeout_cnt
   \   0000                    PUBLIC  cal_data
   \   0000                    PUBLIC  cal_gain
   \   0000                    PUBLIC  cal_zero
   \   0000                    PUBLIC  ch_stat
   \   0000                    PUBLIC  crc
   \   0000                    PUBLIC  curr_ad_ch
   \   0000                    PUBLIC  curr_sens_data
   \   0000                    PUBLIC  eep_status
   \   0000                    PUBLIC  eep_type
   \   0000                    PUBLIC  gain
   \   0000                    PUBLIC  highlevel
   \   0000                    PUBLIC  main
   \   0000                    PUBLIC  mes_data
   \   0000                    PUBLIC  ms_cnt
   \   0000                    PUBLIC  ms_delay_cnt
   \   0000                    PUBLIC  my_address
   \   0000                    PUBLIC  not_cal_data
   \   0000                    PUBLIC  not_mes_data
   \   0000                    PUBLIC  not_raw_data
   \   0000                    PUBLIC  o_filter
   \   0000                    PUBLIC  offset
   \   0000                    PUBLIC  p_filter
   \   0000                    PUBLIC  packed_data
   \   0000                    PUBLIC  raw_data
   \   0000                    PUBLIC  rx_buff
   \   0000                    PUBLIC  rx_counter
   \   0000                    PUBLIC  rx_hndx
   \   0000                    PUBLIC  rx_indx
   \   0000                    PUBLIC  rx_packlen
   \   0000                    PUBLIC  rx_start
   \   0000                    PUBLIC  rx_state
   \   0000                    PUBLIC  rx_timeout
   \   0000                    PUBLIC  sec_cnt
   \   0000                    PUBLIC  sendtail
   \   0000                    PUBLIC  sens_data
   \   0000                    PUBLIC  sens_nl1
   \   0000                    PUBLIC  sens_nl2
   \   0000                    PUBLIC  sync_cnt
   \   0000                    PUBLIC  t_filter
   \   0000                    PUBLIC  time_b_cnt
   \   0000                    PUBLIC  time_b_temp
   \   0000                    PUBLIC  time_e_cnt
   \   0000                    PUBLIC  tx_buff
   \   0000                    PUBLIC  tx_bytes
   \   0000                    PUBLIC  tx_complete
   \   0000                    PUBLIC  tx_indx
   \   0000                    PUBLIC  tx_tail
   \   0000                    PUBLIC  wait_for_pc
   \   0000                    PUBLIC  washtrac
   \   0000                    PUBLIC  washtrac_prev
   \   0000                    EXTERN  ?SC_DIV_L01
   \   0000                    EXTERN  ?SS_MUL_L02
   \   0000                    EXTERN  ?F_ADD_L04
   \   0000                    EXTERN  ?F_SUB_L04
   \   0000                    EXTERN  ?F_SUB_SWAP_L04
   \   0000                    EXTERN  ?F_MUL_L04
   \   0000                    EXTERN  ?F_DIV_SWAP_L04
   \   0000                    EXTERN  ?F_DIV_L04
   \   0000                    EXTERN  ?UL_TO_FLT_L04
   \   0000                    EXTERN  ?SL_TO_FLT_L04
   \   0000                    EXTERN  ?FLT_TO_SL_L04
   \   0000                    EXTERN  ?CLH83L_2_20_L00
   \   0000                    RSEG    CODE
      1          /***** SG.C *************************************************************
      2          *
      3          *     Program for signal convertion card, AN-SGCNV
      4          *
      5          *     Company: ARISTON Norway as
      6          *
      7          *     Author: Asle Straume
      8          *
      9          *     Date: 1-aug-96.
     10          *
     11          *************************************************************************/
     12          
     13          #include "math.h"
     14          #include "float.h"
     15          #include "stdio.h"
     16          #include "ioh8325.h"
     17          #include "inth8325.h"
     18          
     19          #include "sg.h"
     20          #include "sgext.h"
     21          
     22          unsigned char       tx_buff[TX_SIZE] ;
     23          unsigned char       rx_buff[RX_SIZE] ;
     24          unsigned char       tx_indx ;
     25          unsigned char       tx_bytes ;
     26          unsigned char       tx_tail;
     27          unsigned char       wait_for_pc ;
     28          unsigned char       rx_indx ;
     29          unsigned char       rx_hndx ;
     30          unsigned char       rx_start ;
     31          unsigned char       rx_counter ;
     32          unsigned char       rx_packlen ;
     33          unsigned char       rx_timeout ;
     34          unsigned char       sync_cnt ;
     35          
     36          short               sens_data[UNPACKED_DATA_SIZE] ;     /*  unpacked data */
     37          signed char         sens_nl1 ;                          /* none linearity 1*/
     38          signed char         sens_nl2 ;                          /* none linearity 2*/
     39          
     40          unsigned char       packed_data[NOPSD][PACKED_DATA_SIZE] ; /* packed sensor data */
     41          
     42          /* and the on board eep*/
     43          unsigned char       eep_status;                /* status byte of the eep*/
     44          unsigned char       time_b_temp;               /* time between temp read */
     45          unsigned char       time_b_cnt;                /* time between temp cnt */
     46          unsigned char       time_e_cnt;               /* time between eep check */
     47          unsigned short      ad_timeout_cnt ;          /* timeout ad conv */
     48          unsigned short      sec_cnt ;                 /* seconds sounter */
     49          unsigned short ms_cnt;                 /* seconds sounter */
     50          
     51          short               curr_sens_data ;        /* sensor data from ad conv. */
     52          
     53          short               cal_data[NOIOCH] ;      /* calibration data */
     54          short               raw_data[NOIOCH] ;      /* raw data from senors */
     55          float               mes_data[NOIOCH];       /* measured data result */
     56          unsigned char       highlevel;              // high level result
     57          unsigned short      washtrac[NOWT];          // Whashtrec result
     58          volatile char       washtrac_prev;          // Whashtrec previous port state
     59          
     60          float               gain[NOIOCH] ;          /* gain for sensors */
     61          short               offset[NOIOCH] ;        /* offset for sensors */
     62          
     63          float               cal_gain;               /* gain for the 1 ohm resistor */
     64          short               cal_zero;               /* zero for the 1 ohm resistor */
     65          
     66          unsigned char       not_mes_data ;          /* number of tx of measured data */
     67          unsigned char       not_raw_data ;          /* number of tx of raw data */
     68          unsigned char       not_cal_data ;          /* number of tx of calib. data */
     69          
     70          signed char        curr_ad_ch ;             /* current ad ch */
     71          
     72          unsigned char       ad_state    ;               /* status for ad conversion */
     73          unsigned char       ad_mode ;               /* modus */
     74          /*Bit 7 = test mode
     75             Bit 6 = next cal conv.
     76             Bit 5 =
     77             Bit 4 = Start new channel
     78             Bit 3 = Read temperature
     79             Bit 2 = Read other
     80             Bit 1 = Read Pressure
     81             Bit 0 =              */
     82          unsigned short      ms_delay_cnt ;              /* increased each millisecond */
     83          unsigned short      ad_settling ;               /* ad settling timer */
     84          
     85          unsigned char       ad_gain ;                   /* ad com register, keep gain */
     86          
     87          unsigned char       ch_stat[NOIOCH] ;               /* sensor status */
     88          /*Bit  765
     89                    x00 = Unknown
     90                    x01 = temp
     91                    x10 = inclinometer
     92                    x11 = Press
     93                    1xx = Mark new sensor
     94            Bit   432
     95                    000 = Unused
     96                    001 = temp
     97                    010 = inclinometer
     98                    011 = Press
     99                    1xx = Setup from PC
    100          Bit 1  cal status 0=OK 1=Fail
    101          Bit 0  conv. status 0=OK 1=Fail */
    102          
    103          unsigned char       eep_type[NOPSD] ;           /* eeprom status*/
    104          /* Bit 7654
    105                   0000   = None
    106                   0001 = Ok from sensor
    107                   0010 = Error from sensor
    108                   0011 =
    109              Bit 3210
    110                   x000 = None
    111                   x001 = Ok from PC
    112                   x010 = Error from PC
    113                   1xxx = Use data from PC */
    114          
    115          unsigned char       p_filter ;              /* pressure filter */
    116          unsigned char       t_filter ;              /* temperature filter */
    117          unsigned char       o_filter ;              /* "other" filter */
    118          unsigned char       my_address ;            /* my address */
    119          unsigned char       rx_state ;              /* rx state */
    120          unsigned char       tx_complete ;           /* tx state */
    121          
    122          unsigned char       sendtail ;
    123          
    124          const crc[] =             /*Dallas Semiconductor one-wire CRC table */
    125          {
    126              0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31, 65,
    127              157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96, 130, 220,
    128              35, 125, 159, 193, 66, 28, 254, 160, 225, 191, 93, 3, 128, 222, 60, 98,
    129              190, 224, 2, 92, 223, 129, 99, 61, 124, 34, 192, 158, 29, 67, 161, 255,
    130              70, 24, 250, 164, 39, 121, 155, 197, 132, 218, 56, 102, 229, 187, 89, 7,
    131              219, 133, 103, 57, 186, 228, 6, 88, 25, 71, 165, 251, 120, 38, 196, 154,
    132              101, 59, 217, 135, 4, 90, 184, 230, 167, 249, 27, 69, 198, 152, 122, 36,
    133              248, 166, 68, 26, 153, 199, 37, 123, 58, 100, 134, 216, 91, 5, 231, 185,
    134              140, 210, 48, 110, 237, 179, 81, 15, 78, 16, 242, 172, 47, 113, 147, 205,
    135              17, 79, 173, 243, 112, 46, 204, 146, 211, 141, 111, 49, 178, 236, 14, 80,
    136              175, 241, 19, 77, 206, 144, 114, 44, 109, 51, 209, 143, 12, 82, 176, 238,
    137              50, 108, 142, 208, 83, 13, 239, 177, 240, 174, 76, 18, 145, 207, 45, 115,
    138              202, 148, 118, 40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55, 213, 139,
    139              87, 9, 235, 181, 54, 104, 138, 212, 149, 203, 41, 119, 244, 170, 72, 22,
    140              233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151, 201, 74, 20, 246, 168,
    141              116, 42, 200, 150, 21, 75, 169, 247, 182, 232, 10, 84, 215, 137, 107, 53
    142          } ;
    143          
    144          
    145          
    146          /*************************************************************************
    147          *
    148          *  Initialize I/O ports
    149          *
    150          *  Set RS232 parametres
    151          *  Initialize interrupt system
    152          *
    153          *************************************************************************/
    154          void InitRegs(void)
    155          {
   \   0000            InitRegs:
    156          
    157              /* Internal timer 1 ms */
    158              TMR0_TCR   =  0x4a;       /* int a, clear reg a, 1/64 clock (38600 Hz)*/
   \   0000  F94A              MOV.B   #74,R1L
   \   0002  39C8              MOV.B   R1L,@200:8
    159              TMR0_TCSR  = 0x00;        /* No invert p44 */
   \   0004  F900              MOV.B   #0,R1L
   \   0006  39C9              MOV.B   R1L,@201:8
    160              TMR0_TCORA =  76 ;        /* Set 38600/(76+1) = 2 msec compare */
   \   0008  F94C              MOV.B   #76,R1L
   \   000A  39CA              MOV.B   R1L,@202:8
    161          
    162              /* Internal timer 1 ms */
    163              TMR1_TCR   =  0x4a;       /* int a, clear reg a, 1/64 clock (38600 Hz)*/
   \   000C  F94A              MOV.B   #74,R1L
   \   000E  39D0              MOV.B   R1L,@208:8
    164              TMR1_TCSR  = 0x00;        /* No invert p44 */
   \   0010  F900              MOV.B   #0,R1L
   \   0012  39D1              MOV.B   R1L,@209:8
    165              TMR1_TCORA =  37 ;        /* Set 38600/(37+1) = 1 msec compare */
   \   0014  F925              MOV.B   #37,R1L
   \   0016  39D2              MOV.B   R1L,@210:8
    166          
    167              P7DDR = 0x00 ;            /* Port 7, all input */
   \   0018  F900              MOV.B   #0,R1L
   \   001A  39BC              MOV.B   R1L,@188:8
    168              P7DR = 0xff ;         /* All pull-ups on */
   \   001C  F9FF              MOV.B   #255,R1L
   \   001E  39BE              MOV.B   R1L,@190:8
    169          
    170              P6DDR = 0x07  ;           /* Port 6, P60,1,2 out, P6 3,4,5,6 input */
   \   0020  F907              MOV.B   #7,R1L
   \   0022  39B9              MOV.B   R1L,@185:8
    171              P6DR = 0xf8 ;         /* Pull ups on P6 3-6 */
   \   0024  F9F8              MOV.B   #248,R1L
   \   0026  39BB              MOV.B   R1L,@187:8
    172          
    173              P5DDR = 0x2d ;            /* Serial line I/O, may be not neccessary */
   \   0028  F92D              MOV.B   #45,R1L
   \   002A  39B8              MOV.B   R1L,@184:8
    174              P5DR = 0x12 ;             /* internal pull up on input pins */
   \   002C  F912              MOV.B   #18,R1L
   \   002E  39BA              MOV.B   R1L,@186:8
    175          
    176              SCI0_SMR = SMR_0;     /* uart 0 mode */
   \   0030  F900              MOV.B   #0,R1L
   \   0032  39D8              MOV.B   R1L,@216:8
    177              SCI0_BRR = BRR_0;     /* uart0 baudrate */
   \   0034  F907              MOV.B   #7,R1L
   \   0036  39D9              MOV.B   R1L,@217:8
    178          
    179              P4DDR = 0xd0 ;            /* Port 4, P4 4,6,7 out, rest in */
   \   0038  F9D0              MOV.B   #208,R1L
   \   003A  39B5              MOV.B   R1L,@181:8
    180          
    181              P3DDR = 0xff ;            /* All output */
   \   003C  F9FF              MOV.B   #255,R1L
   \   003E  39B4              MOV.B   R1L,@180:8
    182          
    183              P2DDR = 0x00 ;            /* All input */
   \   0040  F900              MOV.B   #0,R1L
   \   0042  39B1              MOV.B   R1L,@177:8
    184              P2DR = 0xff ;         /* All pull-ups on */
   \   0044  F9FF              MOV.B   #255,R1L
   \   0046  39B3              MOV.B   R1L,@179:8
    185          
    186              P1DDR = 0xff ;            /* All output */
   \   0048  F9FF              MOV.B   #255,R1L
   \   004A  39B0              MOV.B   R1L,@176:8
    187          
    188              ISCR  = 0x8f;             /* IRQ0, 1 and 2 on falling edge */
   \   004C  F98F              MOV.B   #143,R1L
   \   004E  39C6              MOV.B   R1L,@198:8
    189              IER   = 0xfe;                 /* enable int 1, 2, Disable 0 */
   \   0050  F9FE              MOV.B   #254,R1L
   \   0052  39C7              MOV.B   R1L,@199:8
    190          
    191              set_interrupt_mask(0);    /* Enable interrupt */
   \   0054  067F              ANDC    #127,CCR
    192          
    193          }
   \   0056  5470              RTS
    194          
    195          /*************************************************************************
    196          *
    197          *       Initialize variables
    198          *
    199          *************************************************************************/
    200          void InitVar(void)
    201          {
   \   0058            InitVar:
   \   0058  6DF6              PUSH    R6
    202          
    203              short i;
    204          /*
    205          **      Init the the com cannal variables
    206          */
    207              tx_indx = 0 ;
   \   005A  F900              MOV.B   #0,R1L
   \   005C  6A8900DE          MOV.B   R1L,@tx_indx:16
    208              tx_complete = TRUE ;
   \   0060  F901              MOV.B   #1,R1L
   \   0062  6A89033C          MOV.B   R1L,@tx_complete:16
    209              tx_bytes = 0 ;
   \   0066  F900              MOV.B   #0,R1L
   \   0068  6A8900DF          MOV.B   R1L,@tx_bytes:16
    210              tx_tail = 0 ;
   \   006C  F900              MOV.B   #0,R1L
   \   006E  6A8900E0          MOV.B   R1L,@tx_tail:16
    211              wait_for_pc = 0 ;
   \   0072  F900              MOV.B   #0,R1L
   \   0074  6A8900E1          MOV.B   R1L,@wait_for_pc:16
    212              rx_indx = 1 ;
   \   0078  F901              MOV.B   #1,R1L
   \   007A  6A8900E2          MOV.B   R1L,@rx_indx:16
    213              rx_hndx = 1 ;
   \   007E  F901              MOV.B   #1,R1L
   \   0080  6A8900E3          MOV.B   R1L,@rx_hndx:16
    214              rx_start = 0 ;
   \   0084  F900              MOV.B   #0,R1L
   \   0086  6A8900E4          MOV.B   R1L,@rx_start:16
    215              rx_buff[0] = 0 ;
   \   008A  F900              MOV.B   #0,R1L
   \   008C  6A890076          MOV.B   R1L,@rx_buff:16
    216              rx_counter = 0 ;
   \   0090  F900              MOV.B   #0,R1L
   \   0092  6A8900E5          MOV.B   R1L,@rx_counter:16
    217              rx_state = SYNC ;
   \   0096  F900              MOV.B   #0,R1L
   \   0098  6A89033B          MOV.B   R1L,@rx_state:16
    218              rx_timeout = 0 ;
   \   009C  F900              MOV.B   #0,R1L
   \   009E  6A8900E7          MOV.B   R1L,@rx_timeout:16
    219          
    220          /*
    221          **      Init channel variables
    222          */
    223              for ( i = 0; i< NOIOCH; i += 2 ) {
   \   00A2  1966              SUB.W   R6,R6
   \   00A4            ?0001:
   \   00A4  7901000E          MOV.W   #14,R1
   \   00A8  1D16              CMP.W   R1,R6
   \   00AA  4C0A              BGE     ?0000
   \   00AC            ?0002:
    224                  ch_stat[i] = 0x0c ;         /*channel setup, try pressure */
   \   00AC  F90C              MOV.B   #12,R1L
   \   00AE  6EE90321          MOV.B   R1L,@(ch_stat,R6)
   \   00B2  0B86              ADDS.W  #2,R6
    225              }
    226              for ( i = 1; i< NOIOCH; i += 2 ) {
   \   00B4  40EE              BRA     ?0001
   \   00B6            ?0000:
   \   00B6  79060001          MOV.W   #1,R6
   \   00BA            ?0005:
   \   00BA  7901000E          MOV.W   #14,R1
   \   00BE  1D16              CMP.W   R1,R6
   \   00C0  4C0A              BGE     ?0004
   \   00C2            ?0006:
    227                  ch_stat[i] = 0x04 ;         /*channel setup, try temp */
   \   00C2  F904              MOV.B   #4,R1L
   \   00C4  6EE90321          MOV.B   R1L,@(ch_stat,R6)
   \   00C8  0B86              ADDS.W  #2,R6
    228              }
    229              for ( i = 0; i< NOPSD; i++ ) {
   \   00CA  40EE              BRA     ?0005
   \   00CC            ?0004:
   \   00CC  1966              SUB.W   R6,R6
   \   00CE            ?0009:
   \   00CE  79010008          MOV.W   #8,R1
   \   00D2  1D16              CMP.W   R1,R6
   \   00D4  4C0A              BGE     ?0008
   \   00D6            ?0010:
    230                  eep_type[i] = 0 ;               /*eeprom status */
   \   00D6  F900              MOV.B   #0,R1L
   \   00D8  6EE9032F          MOV.B   R1L,@(eep_type,R6)
   \   00DC  0B06              ADDS.W  #1,R6
    231              }
    232              for ( i = 0; i< NOIOCH; i++ ) {
   \   00DE  40EE              BRA     ?0009
   \   00E0            ?0008:
   \   00E0  1966              SUB.W   R6,R6
   \   00E2            ?0013:
   \   00E2  7901000E          MOV.W   #14,R1
   \   00E6  1D16              CMP.W   R1,R6
   \   00E8  4C22              BGE     ?0012
   \   00EA            ?0014:
    233                  offset[i] = 0 ;                         /*channel setup, offest */
   \   00EA  0D61              MOV.W   R6,R1
   \   00EC  0911              ADD.W   R1,R1
   \   00EE  1933              SUB.W   R3,R3
   \   00F0  6F9302F4          MOV.W   R3,@(offset,R1)
    234                  gain[i] = 1.0;
   \   00F4  0D61              MOV.W   R6,R1
   \   00F6  0911              ADD.W   R1,R1
   \   00F8  0911              ADD.W   R1,R1
   \   00FA  1922              SUB.W   R2,R2
   \   00FC  79003F80          MOV.W   #16256,R0
   \   0100  6F9202BE          MOV.W   R2,@(gain+2,R1)
   \   0104  6F9002BC          MOV.W   R0,@(gain,R1)
   \   0108  0B06              ADDS.W  #1,R6
    235              }
    236          
    237          /*
    238          **      Init other variables
    239          */
    240          
    241              cal_gain = 1.0 ;
   \   010A  40D6              BRA     ?0013
   \   010C            ?0012:
   \   010C  1911              SUB.W   R1,R1
   \   010E  79003F80          MOV.W   #16256,R0
   \   0112  6B810312          MOV.W   R1,@cal_gain+2:16
   \   0116  6B800310          MOV.W   R0,@cal_gain:16
    242              cal_zero = 0 ;
   \   011A  1911              SUB.W   R1,R1
   \   011C  6B810314          MOV.W   R1,@cal_zero:16
    243              p_filter = 5 ;
   \   0120  F905              MOV.B   #5,R1L
   \   0122  6A890337          MOV.B   R1L,@p_filter:16
    244              t_filter = 2 ;
   \   0126  F902              MOV.B   #2,R1L
   \   0128  6A890338          MOV.B   R1L,@t_filter:16
    245              o_filter = 2 ;
   \   012C  F902              MOV.B   #2,R1L
   \   012E  6A890339          MOV.B   R1L,@o_filter:16
    246              sec_cnt = SEC_CNT_INIT;                 /* initvalue for 1 sec counter */
   \   0132  790103E8          MOV.W   #1000,R1
   \   0136  6B81023A          MOV.W   R1,@sec_cnt:16
    247              ms_cnt   = 0;
   \   013A  1911              SUB.W   R1,R1
   \   013C  6B81023C          MOV.W   R1,@ms_cnt:16
    248              ad_state = IDLE ;                           /* no convertion */
   \   0140  F907              MOV.B   #7,R1L
   \   0142  6A89031A          MOV.B   R1L,@ad_state:16
    249              curr_ad_ch = NOIOCH  ;
   \   0146  F90E              MOV.B   #14,R1L
   \   0148  6A890319          MOV.B   R1L,@curr_ad_ch:16
    250              ad_mode = 0x88 ;                            /* test mode on and start with press.*/
   \   014C  F988              MOV.B   #136,R1L
   \   014E  6A89031B          MOV.B   R1L,@ad_mode:16
    251              ad_mode |= 0x10 ;                           /* mark restart of card */
   \   0152  7901031B          MOV.W   #ad_mode,R1
   \   0156  7D107040          BSET    #4,@R1
    252              ad_gain = 0 ;                               /* gain 1 */
   \   015A  F900              MOV.B   #0,R1L
   \   015C  6A890320          MOV.B   R1L,@ad_gain:16
    253              time_b_temp = 15 ;                      /* temp readings in sec */
    254              time_b_cnt = time_b_temp ;
   \   0160  F90F              MOV.B   #15,R1L
   \   0162  6A890235          MOV.B   R1L,@time_b_temp:16
   \   0166  6A890236          MOV.B   R1L,@time_b_cnt:16
    255              time_e_cnt = TIME_BETWEEN_EEP ;
   \   016A  F90F              MOV.B   #15,R1L
   \   016C  6A890237          MOV.B   R1L,@time_e_cnt:16
    256              not_mes_data = 0 ;
   \   0170  F900              MOV.B   #0,R1L
   \   0172  6A890316          MOV.B   R1L,@not_mes_data:16
    257              not_raw_data = 0 ;
   \   0176  F900              MOV.B   #0,R1L
   \   0178  6A890317          MOV.B   R1L,@not_raw_data:16
    258              not_cal_data = 0 ;
   \   017C  F900              MOV.B   #0,R1L
   \   017E  6A890318          MOV.B   R1L,@not_cal_data:16
    259          }
   \   0182  6D76              POP     R6
   \   0184  5470              RTS
    260          
    261          /*************************************************************************
    262          *
    263          *       Startup
    264          *
    265          *************************************************************************/
    266          void InitStartup(void)
    267          {
   \   0186            InitStartup:
    268          
    269              P5DR |= ADCLK ;                             /*      set AD clock line high */
   \   0186  7FBA7050          BSET    #5,@186:8
    270          
    271              Led(1, OFF) ;                               /* switch leds off */
   \   018A  1911              SUB.W   R1,R1
   \   018C  6DF1              MOV.W   R1,@-SP
   \   018E  79010001          MOV.W   #1,R1
   \   0192  5546              BSR     Led
   \   0194  0B87              ADDS.W  #2,SP
    272              Led(2, OFF) ;
   \   0196  1911              SUB.W   R1,R1
   \   0198  6DF1              MOV.W   R1,@-SP
   \   019A  79010002          MOV.W   #2,R1
   \   019E  553A              BSR     Led
   \   01A0  0B87              ADDS.W  #2,SP
    273          
    274              TxDriver(OFF) ;                             /* tx enable off */
   \   01A2  1911              SUB.W   R1,R1
   \   01A4  5E00022C          JSR     @TxDriver:16
    275              SetEepromChannel(EEPCHOFF) ;            /* set eeprom channel off */
   \   01A8  F909              MOV.B   #9,R1L
   \   01AA  5E00025C          JSR     @SetEepromChannel:16
    276              SetMuxChannel(MUXCHOFF) ;               /* set mux channel off */
   \   01AE  F910              MOV.B   #16,R1L
   \   01B0  5E0002D0          JSR     @SetMuxChannel:16
    277              SetSupplyChannel(EEPCHOFF) ;            /* set supply channel off */
   \   01B4  F909              MOV.B   #9,R1L
   \   01B6  5E000286          JSR     @SetSupplyChannel:16
    278              SetSupplyCurrent(1);                        /* set 1 mA supply */
   \   01BA  F901              MOV.B   #1,R1L
   \   01BC  5E000302          JSR     @SetSupplyCurrent:16
    279          
    280              GetMyAddress() ;                            /* get my address */
   \   01C0  5502              BSR     GetMyAddress
    281          
    282          }
   \   01C2  5470              RTS
    283          
    284          
    285          /*************************************************************************
    286          *
    287          *  Get my address from address switch
    288          *
    289          *************************************************************************/
    290          unsigned char GetMyAddress(void)
    291          {
   \   01C4            GetMyAddress:
    292          
    293              my_address  = ((P4DR & 0x0f) + 10) ;  /* Bit 0-3 */
    294              /* add 10 due to protocole */
    295              return my_address;
   \   01C4  29B7              MOV.B   @183:8,R1L
   \   01C6  E90F              AND.B   #15,R1L
   \   01C8  890A              ADD.B   #10,R1L
   \   01CA  6A89033A          MOV.B   R1L,@my_address:16
    296          }
   \   01CE  5470              RTS
    297          
    298          /*************************************************************************
    299          *
    300          *  Kick watch dog
    301          *
    302          *************************************************************************/
    303          void KickDog(void)
    304          {
   \   01D0            KickDog:
    305          
    306              P6DR &= ~WATCH_DOG;
   \   01D0  7FBB7200          BCLR    #0,@187:8
    307              P6DR |=  WATCH_DOG;
   \   01D4  7FBB7000          BSET    #0,@187:8
    308          }
   \   01D8  5470              RTS
    309          
    310          /*************************************************************************
    311          *
    312          *  Write to the leds
    313          *
    314          *************************************************************************/
    315          void Led(short no, short state)
    316          {
   \   01DA            Led:
   \   01DA  6DF6              PUSH    R6
   \   01DC  6F760004          MOV.W   @(4,SP),R6
    317              switch ( no ) {
   \   01E0  A100              CMP.B   #0,R1H
   \   01E2  4620              BNE     ?0022
   \   01E4  A901              CMP.B   #1,R1L
   \   01E6  461C              BNE     ?0022
   \   01E8            ?0017:
    318              case    1:                                      /* LED 1 */
    319                  switch ( state ) {
   \   01E8  A600              CMP.B   #0,R6H
   \   01EA  460A              BNE     ?0020
   \   01EC  AE01              CMP.B   #1,R6L
   \   01EE  4606              BNE     ?0020
   \   01F0            ?0019:
    320                  case ON :
    321                      P6DR &= ~LED1;
   \   01F0  7FBB7210          BCLR    #1,@187:8
    322                      break ;
   \   01F4  400C              BRA     ?0018
   \   01F6            ?0020:
   \   01F6  A600              CMP.B   #0,R6H
   \   01F8  4604              BNE     ?0021
   \   01FA  AE00              CMP.B   #0,R6L
   \   01FC  4600              BNE     ?0021
   \   01FE            ?0021:
    323                  case OFF :
    324                  default :
    325                      P6DR |= LED1;
   \   01FE  7FBB7010          BSET    #1,@187:8
    326                      break ;
   \   0202            ?0018:
    327                  }
    328                  break ;
   \   0202  4024              BRA     ?0016
   \   0204            ?0022:
   \   0204  A100              CMP.B   #0,R1H
   \   0206  4620              BNE     ?0027
   \   0208  A902              CMP.B   #2,R1L
   \   020A  461C              BNE     ?0027
    329              case    2:                                      /* LED 2 */
    330                  switch ( state ) {
   \   020C  A600              CMP.B   #0,R6H
   \   020E  460A              BNE     ?0025
   \   0210  AE01              CMP.B   #1,R6L
   \   0212  4606              BNE     ?0025
   \   0214            ?0024:
    331                  case ON :
    332                      P6DR &= ~LED2;
   \   0214  7FBB7220          BCLR    #2,@187:8
    333                      break ;
   \   0218  400C              BRA     ?0023
   \   021A            ?0025:
   \   021A  A600              CMP.B   #0,R6H
   \   021C  4604              BNE     ?0026
   \   021E  AE00              CMP.B   #0,R6L
   \   0220  4600              BNE     ?0026
   \   0222            ?0026:
    334                  case OFF :
    335                  default :
    336                      P6DR |= LED2;
   \   0222  7FBB7020          BSET    #2,@187:8
    337                      break ;
   \   0226            ?0023:
    338                  }
    339                  break ;
   \   0226  4000              BRA     ?0016
   \   0228            ?0027:
    340              default :
    341                  break ;
   \   0228            ?0016:
    342              }
    343          }
   \   0228  6D76              POP     R6
   \   022A  5470              RTS
    344          
    345          
    346          /*************************************************************************
    347          *
    348          *  Enable / disable RS485 driver on SCI0
    349          *
    350          *************************************************************************/
    351          void TxDriver(short state)
    352          {
   \   022C            TxDriver:
    353          
    354              switch ( state ) {
   \   022C  A100              CMP.B   #0,R1H
   \   022E  460A              BNE     ?0030
   \   0230  A901              CMP.B   #1,R1L
   \   0232  4606              BNE     ?0030
   \   0234            ?0029:
    355              case ON :                           /* driver on */
    356                  P5DR |= TXE;
   \   0234  7FBA7020          BSET    #2,@186:8
    357                  break;
   \   0238  400E              BRA     ?0028
   \   023A            ?0030:
   \   023A  A100              CMP.B   #0,R1H
   \   023C  460A              BNE     ?0031
   \   023E  A900              CMP.B   #0,R1L
   \   0240  4606              BNE     ?0031
    358              case OFF :                          /* driver off */
    359                  P5DR &= ~TXE;
   \   0242  7FBA7220          BCLR    #2,@186:8
    360                  break;
   \   0246  4000              BRA     ?0028
   \   0248            ?0031:
    361              default :
    362                  break;
   \   0248            ?0028:
    363              }
    364          }
   \   0248  5470              RTS
    365          
    366          
    367          /*************************************************************************
    368          *
    369          *  Return from this function after  time * 1ms
    370          *
    371          *************************************************************************/
    372          void OneMsecDelay(unsigned short time)
    373          {
   \   024A            OneMsecDelay:
    374              ms_delay_cnt = time ;
   \   024A  6B81031C          MOV.W   R1,@ms_delay_cnt:16
   \   024E            ?0033:
    375              while ( ms_delay_cnt ) {                  /* wait for time * 1ms */
   \   024E  6B01031C          MOV.W   @ms_delay_cnt:16,R1
   \   0252  4706              BEQ     ?0032
   \   0254            ?0034:
    376                  KickDog() ;
   \   0254  5E0001D0          JSR     @KickDog:16
    377              }
    378          }
   \   0258  40F4              BRA     ?0033
   \   025A            ?0032:
   \   025A  5470              RTS
    379          
    380          
    381          /*************************************************************************
    382          *
    383          *  Set com channel to a eeprom DS2430
    384          *
    385          *************************************************************************/
    386          void SetEepromChannel(unsigned char channel)
    387          {
   \   025C            SetEepromChannel:
   \   025C  6DF6              PUSH    R6
   \   025E  0C9E              MOV.B   R1L,R6L
    388              if ( channel == EEPCHOFF ) {
   \   0260  A909              CMP.B   #9,R1L
   \   0262  4608              BNE     ?0036
   \   0264            ?0035:
    389                  P1DR &= ~0x3C ;                             /* switch off any channel */
   \   0264  29B2              MOV.B   @178:8,R1L
   \   0266  E9C3              AND.B   #195,R1L
   \   0268  39B2              MOV.B   R1L,@178:8
    390              } else {
   \   026A  4016              BRA     ?0037
   \   026C            ?0036:
    391                  P1DR &= ~0x3C ;                             /* switch off any output */
   \   026C  29B2              MOV.B   @178:8,R1L
   \   026E  E9C3              AND.B   #195,R1L
   \   0270  39B2              MOV.B   R1L,@178:8
    392                  P1DR |= ((channel & 0x7) << 2) | 0x20 ;  /* set channel and enable bit */
   \   0272  0CE9              MOV.B   R6L,R1L
   \   0274  E907              AND.B   #7,R1L
   \   0276  1009              SHLL.B  R1L
   \   0278  1009              SHLL.B  R1L
   \   027A  C920              OR.B    #32,R1L
   \   027C  2BB2              MOV.B   @178:8,R3L
   \   027E  149B              OR.B    R1L,R3L
   \   0280  3BB2              MOV.B   R3L,@178:8
   \   0282            ?0037:
    393              }
    394          }
   \   0282  6D76              POP     R6
   \   0284  5470              RTS
    395          
    396          
    397          /*************************************************************************
    398          *
    399          *  Set supply channel to a sensor
    400          *
    401          *************************************************************************/
    402          void SetSupplyChannel(unsigned char channel)
    403          {
   \   0286            SetSupplyChannel:
   \   0286  6DF6              PUSH    R6
   \   0288  0C9E              MOV.B   R1L,R6L
    404          
    405              if ( channel == SUPPCHOFF ) {
   \   028A  A910              CMP.B   #16,R1L
   \   028C  460E              BNE     ?0039
   \   028E            ?0038:
    406                  P1DR &= ~0x03 ;                                 /* switch off any channel */
   \   028E  29B2              MOV.B   @178:8,R1L
   \   0290  E9FC              AND.B   #252,R1L
   \   0292  39B2              MOV.B   R1L,@178:8
    407                  P3DR &= ~0xe0 ;
   \   0294  29B6              MOV.B   @182:8,R1L
   \   0296  E91F              AND.B   #31,R1L
   \   0298  39B6              MOV.B   R1L,@182:8
    408              } else {
   \   029A  4030              BRA     ?0040
   \   029C            ?0039:
    409                  P1DR &= ~0x03 ;                                 /* switch off any channel */
   \   029C  29B2              MOV.B   @178:8,R1L
   \   029E  E9FC              AND.B   #252,R1L
   \   02A0  39B2              MOV.B   R1L,@178:8
    410                  P3DR &= ~0xe0 ;
   \   02A2  29B6              MOV.B   @182:8,R1L
   \   02A4  E91F              AND.B   #31,R1L
   \   02A6  39B6              MOV.B   R1L,@182:8
    411                  P3DR |= ((channel & 0x07) << 5) ;
   \   02A8  0CE9              MOV.B   R6L,R1L
   \   02AA  E907              AND.B   #7,R1L
   \   02AC  1389              ROTR.B  R1L
   \   02AE  1389              ROTR.B  R1L
   \   02B0  1389              ROTR.B  R1L
   \   02B2  E9E0              AND.B   #224,R1L
   \   02B4  2BB6              MOV.B   @182:8,R3L
   \   02B6  149B              OR.B    R1L,R3L
   \   02B8  3BB6              MOV.B   R3L,@182:8
    412                  P1DR |= ((channel & 0x08) >> 3) | 0x02 ; /* set channel and enable bit */
   \   02BA  0CE9              MOV.B   R6L,R1L
   \   02BC  E908              AND.B   #8,R1L
   \   02BE  1109              SHLR.B  R1L
   \   02C0  1109              SHLR.B  R1L
   \   02C2  1109              SHLR.B  R1L
   \   02C4  C902              OR.B    #2,R1L
   \   02C6  2BB2              MOV.B   @178:8,R3L
   \   02C8  149B              OR.B    R1L,R3L
   \   02CA  3BB2              MOV.B   R3L,@178:8
   \   02CC            ?0040:
    413              }
    414          }
   \   02CC  6D76              POP     R6
   \   02CE  5470              RTS
    415          
    416          /*************************************************************************
    417          *
    418          *  Set mux channel to a sensor
    419          *
    420          *************************************************************************/
    421          void SetMuxChannel(unsigned char channel)
    422          {
   \   02D0            SetMuxChannel:
   \   02D0  6DF6              PUSH    R6
   \   02D2  0C9E              MOV.B   R1L,R6L
    423          
    424              if ( channel == MUXCHOFF ) {
   \   02D4  A910              CMP.B   #16,R1L
   \   02D6  4608              BNE     ?0042
   \   02D8            ?0041:
    425                  P3DR &= ~0x1f ;                             /* switch off any channel */
   \   02D8  29B6              MOV.B   @182:8,R1L
   \   02DA  E9E0              AND.B   #224,R1L
   \   02DC  39B6              MOV.B   R1L,@182:8
    426              } else {
   \   02DE  401E              BRA     ?0043
   \   02E0            ?0042:
    427                  P3DR &= ~0x1f ;                             /* switch off any channel */
   \   02E0  29B6              MOV.B   @182:8,R1L
   \   02E2  E9E0              AND.B   #224,R1L
   \   02E4  39B6              MOV.B   R1L,@182:8
    428                  P3DR |= (channel & 0x07) ;
   \   02E6  0CE9              MOV.B   R6L,R1L
   \   02E8  E907              AND.B   #7,R1L
   \   02EA  2BB6              MOV.B   @182:8,R3L
   \   02EC  149B              OR.B    R1L,R3L
   \   02EE  3BB6              MOV.B   R3L,@182:8
    429                  if ( channel < 8 ) {                         /* set E1 or E2 */
   \   02F0  AE08              CMP.B   #8,R6L
   \   02F2  4406              BCC     ?0045
   \   02F4            ?0044:
    430                      P3DR |= 0x08 ;                          /* set enable bit 1 */
   \   02F4  7FB67030          BSET    #3,@182:8
    431                  } else {
   \   02F8  4004              BRA     ?0046
   \   02FA            ?0045:
    432                      P3DR |= 0x10 ;                          /* set enable bit 2 */
   \   02FA  7FB67040          BSET    #4,@182:8
   \   02FE            ?0046:
   \   02FE            ?0043:
    433                  }
    434              }
    435          }
   \   02FE  6D76              POP     R6
   \   0300  5470              RTS
    436          
    437          /*************************************************************************
    438          *
    439          *  Set 1 / 10 mA sypply current
    440          *
    441          *************************************************************************/
    442          void SetSupplyCurrent(unsigned char current)
    443          {
   \   0302            SetSupplyCurrent:
    444              if ( current == 10 ) {
   \   0302  A90A              CMP.B   #10,R1L
   \   0304  4608              BNE     ?0048
   \   0306            ?0047:
    445                  P4DR &= (~SELMA & 0xf0);                    /* set 10 mA */
   \   0306  29B7              MOV.B   @183:8,R1L
   \   0308  E970              AND.B   #112,R1L
   \   030A  39B7              MOV.B   R1L,@183:8
    446              } else {
   \   030C  4004              BRA     ?0049
   \   030E            ?0048:
    447                  P4DR |= SELMA ;                                 /* set 1 mA */
   \   030E  7FB77070          BSET    #7,@183:8
   \   0312            ?0049:
    448              }
    449          }
   \   0312  5470              RTS
    450          
    451          /*************************************************************************
    452          *
    453          *  Select calibration resistance
    454          *
    455          *************************************************************************/
    456          void SetCalResistance(unsigned char value)
    457          {
   \   0314            SetCalResistance:
    458              switch ( value ) {
   \   0314  A940              CMP.B   #64,R1L
   \   0316  460A              BNE     ?0052
   \   0318            ?0051:
    459              case OHM_1R :                                       /* 1 ohm resistor */
    460                  P1DR |= OHM_1R ;
   \   0318  7FB27060          BSET    #6,@178:8
    461                  P1DR &= ~OHM_1K ;
   \   031C  7FB27270          BCLR    #7,@178:8
    462                  break ;
   \   0320  4014              BRA     ?0050
   \   0322            ?0052:
   \   0322  A980              CMP.B   #128,R1L
   \   0324  460A              BNE     ?0053
    463              case OHM_1K :                                       /* 1000 ohm resistor */
    464                  P1DR |= OHM_1K ;
   \   0326  7FB27070          BSET    #7,@178:8
    465                  P1DR &= ~OHM_1R ;
   \   032A  7FB27260          BCLR    #6,@178:8
    466                  break ;
   \   032E  4006              BRA     ?0050
   \   0330            ?0053:
    467              default :                                           /* both off */
    468                  P1DR &= ~(OHM_1R | OHM_1K) ;
   \   0330  29B2              MOV.B   @178:8,R1L
   \   0332  E93F              AND.B   #63,R1L
   \   0334  39B2              MOV.B   R1L,@178:8
    469                  break ;
   \   0336            ?0050:
    470              }
    471          }
   \   0336  5470              RTS
    472          
    473          /*************************************************************************
    474          *
    475          *  Check new convertion*
    476          *************************************************************************/
    477          void CheckConvert(void)
    478          {
   \   0338            CheckConvert:
    479          
    480              if ( ad_state == IDLE ) {            /* New channel? */
   \   0338  6A09031A          MOV.B   @ad_state:16,R1L
   \   033C  A907              CMP.B   #7,R1L
   \   033E  4704              BEQ     $+6
   \   0340  5A0004A4          JMP     @?0055:16
   \   0344            ?0054:
    481                  ad_state = START_NEW_POINT ;
   \   0344  F901              MOV.B   #1,R1L
   \   0346  6A89031A          MOV.B   R1L,@ad_state:16
    482                  if ( curr_ad_ch < (NOIOCH-1) ) {
   \   034A  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   034E  A90D              CMP.B   #13,R1L
   \   0350  4C0E              BGE     ?0057
   \   0352            ?0056:
    483                      curr_ad_ch++ ;
   \   0352  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0356  8901              ADD.B   #1,R1L
   \   0358  6A890319          MOV.B   R1L,@curr_ad_ch:16
    484                  } else {
   \   035C  5A0004A4          JMP     @?0058:16
   \   0360            ?0057:
    485                      curr_ad_ch = 0 ;
   \   0360  F900              MOV.B   #0,R1L
   \   0362  6A890319          MOV.B   R1L,@curr_ad_ch:16
    486                      if ( !time_e_cnt ) {
   \   0366  6A090237          MOV.B   @time_e_cnt:16,R1L
   \   036A  461A              BNE     ?0060
   \   036C            ?0059:
    487                          if ( ad_mode & 0x80 ) {               /* test */
   \   036C  6A09031B          MOV.B   @ad_mode:16,R1L
   \   0370  E980              AND.B   #128,R1L
   \   0372  4708              BEQ     ?0062
   \   0374            ?0061:
    488                              ad_mode &= ~0x80 ;              /* test mode off */
   \   0374  7901031B          MOV.W   #ad_mode,R1
   \   0378  7D107270          BCLR    #7,@R1
   \   037C            ?0062:
    489                          }
    490                          CheckEepChannel()   ;                   /* Check the sensordata */
   \   037C  5E000000          JSR     @CheckEepChannel:16
    491                          time_e_cnt = TIME_BETWEEN_EEP ;
   \   0380  F90F              MOV.B   #15,R1L
   \   0382  6A890237          MOV.B   R1L,@time_e_cnt:16
   \   0386            ?0060:
    492                      }
    493                      if ( not_mes_data && (ad_mode & 0x02) ) {     /* autosend? */
   \   0386  6A090316          MOV.B   @not_mes_data:16,R1L
   \   038A  4730              BEQ     ?0064
   \   038C  6A09031B          MOV.B   @ad_mode:16,R1L
   \   0390  E902              AND.B   #2,R1L
   \   0392  4728              BEQ     ?0064
   \   0394            ?0066:
   \   0394            ?0065:
   \   0394            ?0063:
    494                          BuildHeader() ;                     /* Build send packet header */
   \   0394  5E000000          JSR     @BuildHeader:16
    495                          BuildMPData();                      /* Build data p. for pressure */
   \   0398  5E000000          JSR     @BuildMPData:16
    496                          BuildMTData();                      /* Build data p. for temp */
   \   039C  5E000000          JSR     @BuildMTData:16
    497                          BuildMOData();                      /* Build data p. for other */
   \   03A0  5E000000          JSR     @BuildMOData:16
    498                          BuildTail(NO_MORE_DATA, 0) ;    /* Build tail */
   \   03A4  F900              MOV.B   #0,R1L
   \   03A6  6DF1              MOV.W   R1,@-SP
   \   03A8  F900              MOV.B   #0,R1L
   \   03AA  5E000000          JSR     @BuildTail:16
   \   03AE  0B87              ADDS.W  #2,SP
    499                          not_mes_data-- ;
   \   03B0  6A090316          MOV.B   @not_mes_data:16,R1L
   \   03B4  89FF              ADD.B   #-1,R1L
   \   03B6  6A890316          MOV.B   R1L,@not_mes_data:16
    500                      } else if ( not_raw_data && (ad_mode & 0x02) ) {  /* autosend? */
   \   03BA  4062              BRA     ?0067
   \   03BC            ?0064:
   \   03BC  6A090317          MOV.B   @not_raw_data:16,R1L
   \   03C0  4730              BEQ     ?0069
   \   03C2  6A09031B          MOV.B   @ad_mode:16,R1L
   \   03C6  E902              AND.B   #2,R1L
   \   03C8  4728              BEQ     ?0069
   \   03CA            ?0071:
   \   03CA            ?0070:
   \   03CA            ?0068:
    501                          BuildHeader() ;                     /* Build send packet header */
   \   03CA  5E000000          JSR     @BuildHeader:16
    502                          BuildRPData();                      /* Build data p. for pressure */
   \   03CE  5E000000          JSR     @BuildRPData:16
    503                          BuildRTData();                      /* Build data p. for temp */
   \   03D2  5E000000          JSR     @BuildRTData:16
    504                          BuildROData();                      /* Build data p. for other */
   \   03D6  5E000000          JSR     @BuildROData:16
    505                          BuildTail(NO_MORE_DATA, 0) ;    /* Build tail */
   \   03DA  F900              MOV.B   #0,R1L
   \   03DC  6DF1              MOV.W   R1,@-SP
   \   03DE  F900              MOV.B   #0,R1L
   \   03E0  5E000000          JSR     @BuildTail:16
   \   03E4  0B87              ADDS.W  #2,SP
    506                          not_raw_data-- ;
   \   03E6  6A090317          MOV.B   @not_raw_data:16,R1L
   \   03EA  89FF              ADD.B   #-1,R1L
   \   03EC  6A890317          MOV.B   R1L,@not_raw_data:16
    507                      } else if ( not_cal_data && (ad_mode & 0x02) ) {  /* autosend? */
   \   03F0  402C              BRA     ?0072
   \   03F2            ?0069:
   \   03F2  6A090318          MOV.B   @not_cal_data:16,R1L
   \   03F6  4726              BEQ     ?0074
   \   03F8  6A09031B          MOV.B   @ad_mode:16,R1L
   \   03FC  E902              AND.B   #2,R1L
   \   03FE  471E              BEQ     ?0074
   \   0400            ?0076:
   \   0400            ?0075:
   \   0400            ?0073:
    508                          BuildHeader() ;                     /* Build send packet header */
   \   0400  5E000000          JSR     @BuildHeader:16
    509                          BuildCalData();                     /* Build data p. for calib */
   \   0404  5E000000          JSR     @BuildCalData:16
    510                          BuildTail(NO_MORE_DATA, 0) ;    /* Build tail */
   \   0408  F900              MOV.B   #0,R1L
   \   040A  6DF1              MOV.W   R1,@-SP
   \   040C  F900              MOV.B   #0,R1L
   \   040E  5E000000          JSR     @BuildTail:16
   \   0412  0B87              ADDS.W  #2,SP
    511                          not_cal_data-- ;
   \   0414  6A090318          MOV.B   @not_cal_data:16,R1L
   \   0418  89FF              ADD.B   #-1,R1L
   \   041A  6A890318          MOV.B   R1L,@not_cal_data:16
   \   041E            ?0074:
   \   041E            ?0072:
   \   041E            ?0067:
    512                      }
    513                      if ( ad_mode & 0x08 ) {           /* temp readings */
   \   041E  6A09031B          MOV.B   @ad_mode:16,R1L
   \   0422  E908              AND.B   #8,R1L
   \   0424  471A              BEQ     ?0078
   \   0426            ?0077:
    514                          ad_mode &= ~0x0e ;
   \   0426  6A09031B          MOV.B   @ad_mode:16,R1L
   \   042A  E9F1              AND.B   #241,R1L
   \   042C  6A89031B          MOV.B   R1L,@ad_mode:16
    515                          ad_mode |= 0x02 ;
   \   0430  7901031B          MOV.W   #ad_mode,R1
   \   0434  7D107010          BSET    #1,@R1
    516                          ad_state = START_CALIBRATION ;
   \   0438  F904              MOV.B   #4,R1L
   \   043A  6A89031A          MOV.B   R1L,@ad_state:16
    517                      } else if ( ad_mode & 0x04 ) {    /* "other" */
   \   043E  4064              BRA     ?0079
   \   0440            ?0078:
   \   0440  6A09031B          MOV.B   @ad_mode:16,R1L
   \   0444  E904              AND.B   #4,R1L
   \   0446  471A              BEQ     ?0081
   \   0448            ?0080:
    518                          ad_mode &= ~0x0e ;
   \   0448  6A09031B          MOV.B   @ad_mode:16,R1L
   \   044C  E9F1              AND.B   #241,R1L
   \   044E  6A89031B          MOV.B   R1L,@ad_mode:16
    519                          ad_mode |= 0x08 ;
   \   0452  7901031B          MOV.W   #ad_mode,R1
   \   0456  7D107030          BSET    #3,@R1
    520                          ad_state = START_CALIBRATION ;
   \   045A  F904              MOV.B   #4,R1L
   \   045C  6A89031A          MOV.B   R1L,@ad_state:16
    521                      } else if ( ad_mode & 0x02 ) {            /* pressure */
   \   0460  4042              BRA     ?0082
   \   0462            ?0081:
   \   0462  6A09031B          MOV.B   @ad_mode:16,R1L
   \   0466  E902              AND.B   #2,R1L
   \   0468  4728              BEQ     ?0084
   \   046A            ?0083:
    522                          if ( !time_b_cnt ) {
   \   046A  6A090236          MOV.B   @time_b_cnt:16,R1L
   \   046E  4620              BNE     ?0086
   \   0470            ?0085:
    523                              ad_mode &= ~0x0e ;
   \   0470  6A09031B          MOV.B   @ad_mode:16,R1L
   \   0474  E9F1              AND.B   #241,R1L
   \   0476  6A89031B          MOV.B   R1L,@ad_mode:16
    524                              ad_mode |= 0x04 ;                   /* convert temp */
   \   047A  7901031B          MOV.W   #ad_mode,R1
   \   047E  7D107020          BSET    #2,@R1
    525                              ad_state = START_CALIBRATION ;
   \   0482  F904              MOV.B   #4,R1L
   \   0484  6A89031A          MOV.B   R1L,@ad_state:16
    526                              time_b_cnt = time_b_temp ;      /* reload counter */
   \   0488  6A090235          MOV.B   @time_b_temp:16,R1L
   \   048C  6A890236          MOV.B   R1L,@time_b_cnt:16
   \   0490            ?0086:
    527                          }
    528                      } else {
   \   0490  4012              BRA     ?0087
   \   0492            ?0084:
    529                          ad_mode &= ~0x0e ;
   \   0492  6A09031B          MOV.B   @ad_mode:16,R1L
   \   0496  E9F1              AND.B   #241,R1L
   \   0498  6A89031B          MOV.B   R1L,@ad_mode:16
    530                          ad_mode |= 0x04 ;                       /* next pressure */
   \   049C  7901031B          MOV.W   #ad_mode,R1
   \   04A0  7D107020          BSET    #2,@R1
   \   04A4            ?0087:
   \   04A4            ?0082:
   \   04A4            ?0079:
   \   04A4            ?0058:
   \   04A4            ?0055:
    531                      }
    532                  }
    533              }
    534              if ( tx_complete ) {
   \   04A4  6A09033C          MOV.B   @tx_complete:16,R1L
   \   04A8  4702              BEQ     ?0089
   \   04AA            ?0088:
    535                  ADConvert() ;                                   /* convert data */
   \   04AA  5502              BSR     ADConvert
   \   04AC            ?0089:
    536              }
    537          }
   \   04AC  5470              RTS
    538          
    539          /*************************************************************************
    540          *
    541          *  Convert sensor data
    542          *
    543          *************************************************************************/
    544          void ADConvert(void)
    545          {
   \   04AE            ADConvert:
   \   04AE  6DF6              PUSH    R6
    546              unsigned short ad_data ;
    547          
    548              switch ( ad_state ) {
   \   04B0  6A09031A          MOV.B   @ad_state:16,R1L
   \   04B4  A901              CMP.B   #1,R1L
   \   04B6  4704              BEQ     $+6
   \   04B8  5A0005EC          JMP     @?0106:16
   \   04BC            ?0091:
    549              case    START_NEW_POINT :
    550                  ad_mode &= ~0x01 ;                           /* reset tx check marker */
   \   04BC  7901031B          MOV.W   #ad_mode,R1
   \   04C0  7D107200          BCLR    #0,@R1
    551                  ad_timeout_cnt = AD_TIMEOUT ;                   /* timeout ad cnv */
   \   04C4  790107D0          MOV.W   #2000,R1
   \   04C8  6B810238          MOV.W   R1,@ad_timeout_cnt:16
    552                  switch ( (ch_stat[curr_ad_ch]>> 2) & 0x03 ) {
   \   04CC  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   04D0  7779              BLD     #7,R1L
   \   04D2  1E11              SUBX.B  R1H,R1H
   \   04D4  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   04D8  110B              SHLR.B  R3L
   \   04DA  110B              SHLR.B  R3L
   \   04DC  EB03              AND.B   #3,R3L
   \   04DE  AB03              CMP.B   #3,R3L
   \   04E0  4654              BNE     ?0097
   \   04E2            ?0093:
    553                  case 0x03 :              /* pressure */
    554                      if ( ad_mode & 0x02 ) {                       /* pressure readings */
   \   04E2  6A09031B          MOV.B   @ad_mode:16,R1L
   \   04E6  E902              AND.B   #2,R1L
   \   04E8  4742              BEQ     ?0095
   \   04EA            ?0094:
    555                          SetCalResistance(OHM_1R);
   \   04EA  F940              MOV.B   #64,R1L
   \   04EC  5E000314          JSR     @SetCalResistance:16
    556                          SetSupplyChannel(curr_ad_ch) ;
   \   04F0  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   04F4  5E000286          JSR     @SetSupplyChannel:16
    557                          SetSupplyCurrent(10) ;
   \   04F8  F90A              MOV.B   #10,R1L
   \   04FA  5E000302          JSR     @SetSupplyCurrent:16
    558                          SetMuxChannel(curr_ad_ch) ;
   \   04FE  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0502  5E0002D0          JSR     @SetMuxChannel:16
    559                          ad_gain = 3 ;
   \   0506  F903              MOV.B   #3,R1L
   \   0508  6A890320          MOV.B   R1L,@ad_gain:16
    560                          WriteAdByte(ad_gain | 0x10) ;           /* Next write data */
   \   050C  6A090320          MOV.B   @ad_gain:16,R1L
   \   0510  C910              OR.B    #16,R1L
   \   0512  5E001F10          JSR     @WriteAdByte:16
    561                          WriteAdByte(0x2a) ;                     /* Ad setup data, bipolar*/
   \   0516  F92A              MOV.B   #42,R1L
   \   0518  5E001F10          JSR     @WriteAdByte:16
    562                          ad_settling = AD_SET_TIME ;         /* wait 67 ms */
   \   051C  79010043          MOV.W   #67,R1
   \   0520  6B81031E          MOV.W   R1,@ad_settling:16
    563                          ad_state = WAIT_FOR_INTERRUPT ;         /* next state */
   \   0524  F902              MOV.B   #2,R1L
   \   0526  6A89031A          MOV.B   R1L,@ad_state:16
    564                      } else {
   \   052A  4006              BRA     ?0096
   \   052C            ?0095:
    565                          ad_state = IDLE ;
   \   052C  F907              MOV.B   #7,R1L
   \   052E  6A89031A          MOV.B   R1L,@ad_state:16
   \   0532            ?0096:
    566                      }
    567                      break;
   \   0532  5A0005E8          JMP     @?0092:16
   \   0536            ?0097:
   \   0536  AB02              CMP.B   #2,R3L
   \   0538  4652              BNE     ?0101
    568                  case 0x02 :               /* "OTHER " */
    569                      if ( ad_mode & 0x04 ) {                       /* other readings */
   \   053A  6A09031B          MOV.B   @ad_mode:16,R1L
   \   053E  E904              AND.B   #4,R1L
   \   0540  4742              BEQ     ?0099
   \   0542            ?0098:
    570                          SetCalResistance(OHM_1K);
   \   0542  F980              MOV.B   #128,R1L
   \   0544  5E000314          JSR     @SetCalResistance:16
    571                          SetSupplyChannel(curr_ad_ch) ;
   \   0548  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   054C  5E000286          JSR     @SetSupplyChannel:16
    572                          SetSupplyCurrent(1) ;
   \   0550  F901              MOV.B   #1,R1L
   \   0552  5E000302          JSR     @SetSupplyCurrent:16
    573                          SetMuxChannel(curr_ad_ch) ;
   \   0556  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   055A  5E0002D0          JSR     @SetMuxChannel:16
    574                          ad_gain = 0 ;
   \   055E  F900              MOV.B   #0,R1L
   \   0560  6A890320          MOV.B   R1L,@ad_gain:16
    575                          WriteAdByte(ad_gain | 0x10) ;            /* Next write data */
   \   0564  6A090320          MOV.B   @ad_gain:16,R1L
   \   0568  C910              OR.B    #16,R1L
   \   056A  5E001F10          JSR     @WriteAdByte:16
    576                          WriteAdByte(0x2a) ;                      /* Ad setup data */
   \   056E  F92A              MOV.B   #42,R1L
   \   0570  5E001F10          JSR     @WriteAdByte:16
    577                          ad_settling = AD_SET_TIME ;          /* wait 67 ms */
   \   0574  79010043          MOV.W   #67,R1
   \   0578  6B81031E          MOV.W   R1,@ad_settling:16
    578                          ad_state = WAIT_FOR_INTERRUPT ;          /* next state */
   \   057C  F902              MOV.B   #2,R1L
   \   057E  6A89031A          MOV.B   R1L,@ad_state:16
    579                      } else {
   \   0582  4006              BRA     ?0100
   \   0584            ?0099:
    580                          ad_state = IDLE ;
   \   0584  F907              MOV.B   #7,R1L
   \   0586  6A89031A          MOV.B   R1L,@ad_state:16
   \   058A            ?0100:
    581                      }
    582                      break;
   \   058A  405C              BRA     ?0092
   \   058C            ?0101:
   \   058C  AB01              CMP.B   #1,R3L
   \   058E  4652              BNE     ?0105
    583                  case 0x01 :               /* temp */
    584                      if ( ad_mode & 0x08 ) {                       /* convert temp? */
   \   0590  6A09031B          MOV.B   @ad_mode:16,R1L
   \   0594  E908              AND.B   #8,R1L
   \   0596  4742              BEQ     ?0103
   \   0598            ?0102:
    585                          SetCalResistance(OHM_1K);
   \   0598  F980              MOV.B   #128,R1L
   \   059A  5E000314          JSR     @SetCalResistance:16
    586                          SetSupplyChannel(curr_ad_ch) ;
   \   059E  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   05A2  5E000286          JSR     @SetSupplyChannel:16
    587                          SetSupplyCurrent(1) ;
   \   05A6  F901              MOV.B   #1,R1L
   \   05A8  5E000302          JSR     @SetSupplyCurrent:16
    588                          SetMuxChannel(curr_ad_ch) ;
   \   05AC  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   05B0  5E0002D0          JSR     @SetMuxChannel:16
    589                          ad_gain = 0 ;
   \   05B4  F900              MOV.B   #0,R1L
   \   05B6  6A890320          MOV.B   R1L,@ad_gain:16
    590                          WriteAdByte(ad_gain | 0x10) ;            /* Next write data */
   \   05BA  6A090320          MOV.B   @ad_gain:16,R1L
   \   05BE  C910              OR.B    #16,R1L
   \   05C0  5E001F10          JSR     @WriteAdByte:16
    591                          WriteAdByte(0x2a) ;                     /* Ad setup data, bipolar*/
   \   05C4  F92A              MOV.B   #42,R1L
   \   05C6  5E001F10          JSR     @WriteAdByte:16
    592                          ad_settling = AD_SET_TIME ;          /* wait 67 ms */
   \   05CA  79010043          MOV.W   #67,R1
   \   05CE  6B81031E          MOV.W   R1,@ad_settling:16
    593                          ad_state = WAIT_FOR_INTERRUPT ;          /* next state */
   \   05D2  F902              MOV.B   #2,R1L
   \   05D4  6A89031A          MOV.B   R1L,@ad_state:16
    594                      } else {
   \   05D8  4006              BRA     ?0104
   \   05DA            ?0103:
    595                          ad_state = IDLE ;
   \   05DA  F907              MOV.B   #7,R1L
   \   05DC  6A89031A          MOV.B   R1L,@ad_state:16
   \   05E0            ?0104:
    596                      }
    597                      break;
   \   05E0  4006              BRA     ?0092
   \   05E2            ?0105:
    598                  default :
    599                      ad_state = IDLE ;
   \   05E2  F907              MOV.B   #7,R1L
   \   05E4  6A89031A          MOV.B   R1L,@ad_state:16
    600                      break ;
   \   05E8            ?0092:
    601                  }
    602                  break ;
   \   05E8  5A000B74          JMP     @?0090:16
   \   05EC            ?0106:
   \   05EC  A902              CMP.B   #2,R1L
   \   05EE  4604              BNE     ?0107
    603              case    WAIT_FOR_INTERRUPT :
    604                  break ;
   \   05F0  5A000B74          JMP     @?0090:16
   \   05F4            ?0107:
   \   05F4  A903              CMP.B   #3,R1L
   \   05F6  4704              BEQ     $+6
   \   05F8  5A000ADE          JMP     @?0154:16
    605              case    CONV_COMPLETE :
    606                  WriteAdByte(ad_gain | 0x38) ;                   /* Next read data */
   \   05FC  6A090320          MOV.B   @ad_gain:16,R1L
   \   0600  C938              OR.B    #56,R1L
   \   0602  5E001F10          JSR     @WriteAdByte:16
    607                  ad_data = ReadAdByte()* 256 ;              /* read data 16 bit data from ad */
   \   0606  5E001EE4          JSR     @ReadAdByte:16
   \   060A  F100              MOV.B   #0,R1H
   \   060C  0C91              MOV.B   R1L,R1H
   \   060E  F900              MOV.B   #0,R1L
   \   0610  0D16              MOV.W   R1,R6
    608                  ad_data += ReadAdByte() ;
   \   0612  5E001EE4          JSR     @ReadAdByte:16
   \   0616  F100              MOV.B   #0,R1H
   \   0618  0916              ADD.W   R1,R6
    609                  if ( ad_mode & 0x40 ) {                           /* cal point ? */
   \   061A  6A09031B          MOV.B   @ad_mode:16,R1L
   \   061E  E940              AND.B   #64,R1L
   \   0620  4604              BNE     $+6
   \   0622  5A0009E6          JMP     @?0109:16
   \   0626            ?0108:
    610                      ad_mode &= ~0x40 ;
   \   0626  7901031B          MOV.W   #ad_mode,R1
   \   062A  7D107260          BCLR    #6,@R1
    611                      SetSupplyCurrent(1) ;
   \   062E  F901              MOV.B   #1,R1L
   \   0630  5E000302          JSR     @SetSupplyCurrent:16
    612                      SetMuxChannel(MUXCHOFF) ;
   \   0634  F910              MOV.B   #16,R1L
   \   0636  5E0002D0          JSR     @SetMuxChannel:16
    613                      SetSupplyChannel(SUPPCHOFF) ;
   \   063A  F910              MOV.B   #16,R1L
   \   063C  5E000286          JSR     @SetSupplyChannel:16
    614                      SetCalResistance(OFF);
   \   0640  F900              MOV.B   #0,R1L
   \   0642  5E000314          JSR     @SetCalResistance:16
    615                      ad_state = IDLE ;
   \   0646  F907              MOV.B   #7,R1L
   \   0648  6A89031A          MOV.B   R1L,@ad_state:16
    616                      ad_timeout_cnt = 0 ;                            /* timeout off */
   \   064C  1911              SUB.W   R1,R1
   \   064E  6B810238          MOV.W   R1,@ad_timeout_cnt:16
    617                      if ( !(ad_mode & 0x01) ) {                    /* tx during conv? */
   \   0652  6A09031B          MOV.B   @ad_mode:16,R1L
   \   0656  E901              AND.B   #1,R1L
   \   0658  4704              BEQ     $+6
   \   065A  5A0009D8          JMP     @?0111:16
   \   065E            ?0110:
    618                          cal_data[curr_ad_ch] = (short)(ad_data - 32767) ;    /* no, use data  */
   \   065E  0D61              MOV.W   R6,R1
   \   0660  8901              ADD.B   #1,R1L
   \   0662  9180              ADDX.B  #128,R1H
   \   0664  6A0B0319          MOV.B   @curr_ad_ch:16,R3L
   \   0668  777B              BLD     #7,R3L
   \   066A  1E33              SUBX.B  R3H,R3H
   \   066C  0933              ADD.W   R3,R3
   \   066E  6FB10240          MOV.W   R1,@(cal_data,R3)
    619          
    620                          switch ( (ch_stat[curr_ad_ch]>> 2) & 0x03 ) {
   \   0672  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0676  7779              BLD     #7,R1L
   \   0678  1E11              SUBX.B  R1H,R1H
   \   067A  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   067E  110B              SHLR.B  R3L
   \   0680  110B              SHLR.B  R3L
   \   0682  EB03              AND.B   #3,R3L
   \   0684  AB03              CMP.B   #3,R3L
   \   0686  4704              BEQ     $+6
   \   0688  5A000852          JMP     @?0128:16
   \   068C            ?0113:
    621                          case 0x03 :                /* pressure */
    622                              cal_data[curr_ad_ch] = (short)((float) cal_data[curr_ad_ch]* cal_gain) ;     /* adjust for resistor errors */
   \   068C  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0690  7779              BLD     #7,R1L
   \   0692  1E11              SUBX.B  R1H,R1H
   \   0694  0911              ADD.W   R1,R1
   \   0696  6F110240          MOV.W   @(cal_data,R1),R1
   \   069A  7371              BTST    #7,R1H
   \   069C  4706              BEQ     $+8
   \   069E  7900FFFF          MOV.W   #-1,R0
   \   06A2  4002              BRA     $+4
   \   06A4  1900              SUB.W   R0,R0
   \   06A6  5E000000          JSR     @?SL_TO_FLT_L04
   \   06AA  6B030312          MOV.W   @cal_gain+2:16,R3
   \   06AE  6B020310          MOV.W   @cal_gain:16,R2
   \   06B2  5E000000          JSR     @?F_MUL_L04
   \   06B6  5E000000          JSR     @?FLT_TO_SL_L04
   \   06BA  6A0B0319          MOV.B   @curr_ad_ch:16,R3L
   \   06BE  777B              BLD     #7,R3L
   \   06C0  1E33              SUBX.B  R3H,R3H
   \   06C2  0933              ADD.W   R3,R3
   \   06C4  6FB10240          MOV.W   R1,@(cal_data,R3)
    623                              if ( (cal_data[curr_ad_ch] > MAX_PRE_CAL) ||
    624                                   (cal_data[curr_ad_ch] < MIN_PRE_CAL) ) {
   \   06C8  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   06CC  7779              BLD     #7,R1L
   \   06CE  1E11              SUBX.B  R1H,R1H
   \   06D0  0911              ADD.W   R1,R1
   \   06D2  6F110240          MOV.W   @(cal_data,R1),R1
   \   06D6  A95C              CMP.B   #92,R1L
   \   06D8  B144              SUBX.B  #68,R1H
   \   06DA  4E14              BGT     ?0114
   \   06DC  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   06E0  7779              BLD     #7,R1L
   \   06E2  1E11              SUBX.B  R1H,R1H
   \   06E4  0911              ADD.W   R1,R1
   \   06E6  6F110240          MOV.W   @(cal_data,R1),R1
   \   06EA  A9D4              CMP.B   #212,R1L
   \   06EC  B130              SUBX.B  #48,R1H
   \   06EE  4C14              BGE     ?0115
   \   06F0            ?0116:
   \   06F0            ?0117:
   \   06F0            ?0114:
    625                                  ch_stat[curr_ad_ch] |= 0x02 ;         /* Calibration fail */
   \   06F0  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   06F4  7779              BLD     #7,R1L
   \   06F6  1E11              SUBX.B  R1H,R1H
   \   06F8  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   06FC  CB02              OR.B    #2,R3L
   \   06FE  6E9B0321          MOV.B   R3L,@(ch_stat,R1)
    626                              } else {
   \   0702  4012              BRA     ?0118
   \   0704            ?0115:
    627                                  ch_stat[curr_ad_ch] &= ~0x02 ;  /* Calibration OK */
   \   0704  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0708  7779              BLD     #7,R1L
   \   070A  1E11              SUBX.B  R1H,R1H
   \   070C  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   0710  EBFD              AND.B   #253,R3L
   \   0712  6E9B0321          MOV.B   R3L,@(ch_stat,R1)
   \   0716            ?0118:
    628                              }
    629                              if ( (cal_data[curr_ad_ch] > FMAX_PRE_CAL)||
    630                                   (cal_data[curr_ad_ch] < FMIN_PRE_CAL) ) {
   \   0716  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   071A  7779              BLD     #7,R1L
   \   071C  1E11              SUBX.B  R1H,R1H
   \   071E  0911              ADD.W   R1,R1
   \   0720  6F110240          MOV.W   @(cal_data,R1),R1
   \   0724  A9E4              CMP.B   #228,R1L
   \   0726  B157              SUBX.B  #87,R1H
   \   0728  4E14              BGT     ?0119
   \   072A  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   072E  7779              BLD     #7,R1L
   \   0730  1E11              SUBX.B  R1H,R1H
   \   0732  0911              ADD.W   R1,R1
   \   0734  6F110240          MOV.W   @(cal_data,R1),R1
   \   0738  A94C              CMP.B   #76,R1L
   \   073A  B11D              SUBX.B  #29,R1H
   \   073C  4C6A              BGE     ?0120
   \   073E            ?0121:
   \   073E            ?0122:
   \   073E            ?0119:
    631                                  ch_stat[curr_ad_ch] |= 0x01 ;       /* Reading fail */
   \   073E  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0742  7779              BLD     #7,R1L
   \   0744  1E11              SUBX.B  R1H,R1H
   \   0746  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   074A  CB01              OR.B    #1,R3L
   \   074C  6E9B0321          MOV.B   R3L,@(ch_stat,R1)
    632                                  eep_type[curr_ad_ch >> 1] = 0 ;     /* clear read status */
   \   0750  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0754  1189              SHAR.B  R1L
   \   0756  7779              BLD     #7,R1L
   \   0758  1E11              SUBX.B  R1H,R1H
   \   075A  FB00              MOV.B   #0,R3L
   \   075C  6E9B032F          MOV.B   R3L,@(eep_type,R1)
    633                                  mes_data[curr_ad_ch] = 0.0 ;       /* ASt mark ?? */
   \   0760  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0764  7779              BLD     #7,R1L
   \   0766  1E11              SUBX.B  R1H,R1H
   \   0768  0911              ADD.W   R1,R1
   \   076A  0911              ADD.W   R1,R1
   \   076C  1922              SUB.W   R2,R2
   \   076E  1900              SUB.W   R0,R0
   \   0770  6F92027A          MOV.W   R2,@(mes_data+2,R1)
   \   0774  6F900278          MOV.W   R0,@(mes_data,R1)
    634                                  raw_data[curr_ad_ch] = curr_sens_data ; /* sen raw raw */
   \   0778  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   077C  7779              BLD     #7,R1L
   \   077E  1E11              SUBX.B  R1H,R1H
   \   0780  0911              ADD.W   R1,R1
   \   0782  6B03023E          MOV.W   @curr_sens_data:16,R3
   \   0786  6F93025C          MOV.W   R3,@(raw_data,R1)
    635                                  if ( ad_mode & 0x80 ) {               /* test */
   \   078A  6A09031B          MOV.B   @ad_mode:16,R1L
   \   078E  E980              AND.B   #128,R1L
   \   0790  4712              BEQ     ?0124
   \   0792            ?0123:
    636                                      ch_stat[curr_ad_ch] &= ~0x60 ;  /* no sensor */
   \   0792  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0796  7779              BLD     #7,R1L
   \   0798  1E11              SUBX.B  R1H,R1H
   \   079A  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   079E  EB9F              AND.B   #159,R3L
   \   07A0  6E9B0321          MOV.B   R3L,@(ch_stat,R1)
   \   07A4            ?0124:
    637                                  }
    638                              } else {
   \   07A4  5A00084E          JMP     @?0125:16
   \   07A8            ?0120:
    639                                  if ( ad_mode & 0x80 ) {               /* test */
   \   07A8  6A09031B          MOV.B   @ad_mode:16,R1L
   \   07AC  E980              AND.B   #128,R1L
   \   07AE  4712              BEQ     ?0127
   \   07B0            ?0126:
    640                                      ch_stat[curr_ad_ch] |= 0x6c ;   /* pr. sensor  OK*/
   \   07B0  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   07B4  7779              BLD     #7,R1L
   \   07B6  1E11              SUBX.B  R1H,R1H
   \   07B8  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   07BC  CB6C              OR.B    #108,R3L
   \   07BE  6E9B0321          MOV.B   R3L,@(ch_stat,R1)
   \   07C2            ?0127:
    641                                  }
    642                                  ch_stat[curr_ad_ch] &= ~0x01 ;  /* Reading OK */
   \   07C2  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   07C6  7779              BLD     #7,R1L
   \   07C8  1E11              SUBX.B  R1H,R1H
   \   07CA  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   07CE  EBFE              AND.B   #254,R3L
   \   07D0  6E9B0321          MOV.B   R3L,@(ch_stat,R1)
    643                                  curr_sens_data -= cal_zero ;
    644                                  raw_data[curr_ad_ch] = ( short)((float)curr_sens_data * 20000.0
    645                                                                  / (float)cal_data[curr_ad_ch]) ;
   \   07D4  6B010314          MOV.W   @cal_zero:16,R1
   \   07D8  6B03023E          MOV.W   @curr_sens_data:16,R3
   \   07DC  1913              SUB.W   R1,R3
   \   07DE  6B83023E          MOV.W   R3,@curr_sens_data:16
   \   07E2  0D31              MOV.W   R3,R1
   \   07E4  7371              BTST    #7,R1H
   \   07E6  4706              BEQ     $+8
   \   07E8  7900FFFF          MOV.W   #-1,R0
   \   07EC  4002              BRA     $+4
   \   07EE  1900              SUB.W   R0,R0
   \   07F0  5E000000          JSR     @?SL_TO_FLT_L04
   \   07F4  79034000          MOV.W   #16384,R3
   \   07F8  7902469C          MOV.W   #18076,R2
   \   07FC  5E000000          JSR     @?F_MUL_L04
   \   0800  6A0B0319          MOV.B   @curr_ad_ch:16,R3L
   \   0804  777B              BLD     #7,R3L
   \   0806  1E33              SUBX.B  R3H,R3H
   \   0808  0933              ADD.W   R3,R3
   \   080A  6DF1              MOV.W   R1,@-SP
   \   080C  6F310240          MOV.W   @(cal_data,R3),R1
   \   0810  6DF0              MOV.W   R0,@-SP
   \   0812  7371              BTST    #7,R1H
   \   0814  4706              BEQ     $+8
   \   0816  7900FFFF          MOV.W   #-1,R0
   \   081A  4002              BRA     $+4
   \   081C  1900              SUB.W   R0,R0
   \   081E  5E000000          JSR     @?SL_TO_FLT_L04
   \   0822  6F730002          MOV.W   @(2,SP),R3
   \   0826  6972              MOV.W   @SP,R2
   \   0828  6FF20002          MOV.W   R2,@(2,SP)
   \   082C  0B87              ADDS.W  #2,SP
   \   082E  6D72              MOV.W   @SP+,R2
   \   0830  5E000000          JSR     @?F_DIV_SWAP_L04
   \   0834  5E000000          JSR     @?FLT_TO_SL_L04
   \   0838  6A0B0319          MOV.B   @curr_ad_ch:16,R3L
   \   083C  777B              BLD     #7,R3L
   \   083E  1E33              SUBX.B  R3H,R3H
   \   0840  0933              ADD.W   R3,R3
   \   0842  6FB1025C          MOV.W   R1,@(raw_data,R3)
    646                                  CalcPress(curr_ad_ch) ;             /* calculate pressure */
   \   0846  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   084A  5E000B78          JSR     @CalcPress:16
   \   084E            ?0125:
    647                              }
    648                              break;
   \   084E  5A0009D6          JMP     @?0112:16
   \   0852            ?0128:
   \   0852  AB02              CMP.B   #2,R3L
   \   0854  4604              BNE     ?0129
    649                          case 0x02 :                                 /* "other" */
    650                              break;
   \   0856  5A0009D6          JMP     @?0112:16
   \   085A            ?0129:
   \   085A  AB01              CMP.B   #1,R3L
   \   085C  4704              BEQ     $+6
   \   085E  5A0009D6          JMP     @?0144:16
    651                          case 0x01 :                                 /* temp */
    652                              if ( (cal_data[curr_ad_ch] > MAX_TMP_CAL ) ||
    653                                   (cal_data[curr_ad_ch] < MIN_TMP_CAL ) ) {
   \   0862  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0866  7779              BLD     #7,R1L
   \   0868  1E11              SUBX.B  R1H,R1H
   \   086A  0911              ADD.W   R1,R1
   \   086C  6F110240          MOV.W   @(cal_data,R1),R1
   \   0870  A99C              CMP.B   #156,R1L
   \   0872  B163              SUBX.B  #99,R1H
   \   0874  4E14              BGT     ?0130
   \   0876  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   087A  7779              BLD     #7,R1L
   \   087C  1E11              SUBX.B  R1H,R1H
   \   087E  0911              ADD.W   R1,R1
   \   0880  6F110240          MOV.W   @(cal_data,R1),R1
   \   0884  A910              CMP.B   #16,R1L
   \   0886  B127              SUBX.B  #39,R1H
   \   0888  4C14              BGE     ?0131
   \   088A            ?0132:
   \   088A            ?0133:
   \   088A            ?0130:
    654                                  ch_stat[curr_ad_ch] |= 0x02 ;         /* Calibration fail */
   \   088A  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   088E  7779              BLD     #7,R1L
   \   0890  1E11              SUBX.B  R1H,R1H
   \   0892  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   0896  CB02              OR.B    #2,R3L
   \   0898  6E9B0321          MOV.B   R3L,@(ch_stat,R1)
    655                              } else {
   \   089C  4012              BRA     ?0134
   \   089E            ?0131:
    656                                  ch_stat[curr_ad_ch] &= ~0x02 ;        /* Calibration OK */
   \   089E  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   08A2  7779              BLD     #7,R1L
   \   08A4  1E11              SUBX.B  R1H,R1H
   \   08A6  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   08AA  EBFD              AND.B   #253,R3L
   \   08AC  6E9B0321          MOV.B   R3L,@(ch_stat,R1)
   \   08B0            ?0134:
    657                              }
    658                              if ( (cal_data[curr_ad_ch] > FMAX_TMP_CAL) ||
    659                                   (cal_data[curr_ad_ch] < FMIN_TMP_CAL) ) {
   \   08B0  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   08B4  7779              BLD     #7,R1L
   \   08B6  1E11              SUBX.B  R1H,R1H
   \   08B8  0911              ADD.W   R1,R1
   \   08BA  6F110240          MOV.W   @(cal_data,R1),R1
   \   08BE  A96C              CMP.B   #108,R1L
   \   08C0  B16B              SUBX.B  #107,R1H
   \   08C2  4E14              BGT     ?0135
   \   08C4  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   08C8  7779              BLD     #7,R1L
   \   08CA  1E11              SUBX.B  R1H,R1H
   \   08CC  0911              ADD.W   R1,R1
   \   08CE  6F110240          MOV.W   @(cal_data,R1),R1
   \   08D2  A988              CMP.B   #136,R1L
   \   08D4  B113              SUBX.B  #19,R1H
   \   08D6  4C5A              BGE     ?0136
   \   08D8            ?0137:
   \   08D8            ?0138:
   \   08D8            ?0135:
    660                                  ch_stat[curr_ad_ch] |= 0x01 ;       /* Reading fail */
   \   08D8  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   08DC  7779              BLD     #7,R1L
   \   08DE  1E11              SUBX.B  R1H,R1H
   \   08E0  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   08E4  CB01              OR.B    #1,R3L
   \   08E6  6E9B0321          MOV.B   R3L,@(ch_stat,R1)
    661                                  mes_data[curr_ad_ch] = 0.0 ;         /* ASt mark ?? */
   \   08EA  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   08EE  7779              BLD     #7,R1L
   \   08F0  1E11              SUBX.B  R1H,R1H
   \   08F2  0911              ADD.W   R1,R1
   \   08F4  0911              ADD.W   R1,R1
   \   08F6  1922              SUB.W   R2,R2
   \   08F8  1900              SUB.W   R0,R0
   \   08FA  6F92027A          MOV.W   R2,@(mes_data+2,R1)
   \   08FE  6F900278          MOV.W   R0,@(mes_data,R1)
    662                                  raw_data[curr_ad_ch] = curr_sens_data ; /* sen raw raw */
   \   0902  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0906  7779              BLD     #7,R1L
   \   0908  1E11              SUBX.B  R1H,R1H
   \   090A  0911              ADD.W   R1,R1
   \   090C  6B03023E          MOV.W   @curr_sens_data:16,R3
   \   0910  6F93025C          MOV.W   R3,@(raw_data,R1)
    663                                  if ( ad_mode & 0x80 ) {               /* test */
   \   0914  6A09031B          MOV.B   @ad_mode:16,R1L
   \   0918  E980              AND.B   #128,R1L
   \   091A  4712              BEQ     ?0140
   \   091C            ?0139:
    664                                      ch_stat[curr_ad_ch] &= ~0x60 ;  /* no sensor */
   \   091C  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0920  7779              BLD     #7,R1L
   \   0922  1E11              SUBX.B  R1H,R1H
   \   0924  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   0928  EB9F              AND.B   #159,R3L
   \   092A  6E9B0321          MOV.B   R3L,@(ch_stat,R1)
   \   092E            ?0140:
    665                                  }
    666                              } else {
   \   092E  5A0009D4          JMP     @?0141:16
   \   0932            ?0136:
    667                                  if ( ad_mode & 0x80 ) {
   \   0932  6A09031B          MOV.B   @ad_mode:16,R1L
   \   0936  E980              AND.B   #128,R1L
   \   0938  4712              BEQ     ?0143
   \   093A            ?0142:
    668                                      ch_stat[curr_ad_ch] |= 0x24 ;   /* tmp sensor  OK*/
   \   093A  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   093E  7779              BLD     #7,R1L
   \   0940  1E11              SUBX.B  R1H,R1H
   \   0942  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   0946  CB24              OR.B    #36,R3L
   \   0948  6E9B0321          MOV.B   R3L,@(ch_stat,R1)
   \   094C            ?0143:
    669                                  }
    670                                  ch_stat[curr_ad_ch] &= ~0x01 ;  /* Reading OK */
   \   094C  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0950  7779              BLD     #7,R1L
   \   0952  1E11              SUBX.B  R1H,R1H
   \   0954  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   0958  EBFE              AND.B   #254,R3L
   \   095A  6E9B0321          MOV.B   R3L,@(ch_stat,R1)
    671                                  raw_data[curr_ad_ch] = (short)(((float)curr_sens_data * 1000.0
    672                                                                  / (float)cal_data[curr_ad_ch] ) * 10.0);
   \   095E  6B01023E          MOV.W   @curr_sens_data:16,R1
   \   0962  7371              BTST    #7,R1H
   \   0964  4706              BEQ     $+8
   \   0966  7900FFFF          MOV.W   #-1,R0
   \   096A  4002              BRA     $+4
   \   096C  1900              SUB.W   R0,R0
   \   096E  5E000000          JSR     @?SL_TO_FLT_L04
   \   0972  1933              SUB.W   R3,R3
   \   0974  7902447A          MOV.W   #17530,R2
   \   0978  5E000000          JSR     @?F_MUL_L04
   \   097C  6A0B0319          MOV.B   @curr_ad_ch:16,R3L
   \   0980  777B              BLD     #7,R3L
   \   0982  1E33              SUBX.B  R3H,R3H
   \   0984  0933              ADD.W   R3,R3
   \   0986  6DF1              MOV.W   R1,@-SP
   \   0988  6F310240          MOV.W   @(cal_data,R3),R1
   \   098C  6DF0              MOV.W   R0,@-SP
   \   098E  7371              BTST    #7,R1H
   \   0990  4706              BEQ     $+8
   \   0992  7900FFFF          MOV.W   #-1,R0
   \   0996  4002              BRA     $+4
   \   0998  1900              SUB.W   R0,R0
   \   099A  5E000000          JSR     @?SL_TO_FLT_L04
   \   099E  6F730002          MOV.W   @(2,SP),R3
   \   09A2  6972              MOV.W   @SP,R2
   \   09A4  6FF20002          MOV.W   R2,@(2,SP)
   \   09A8  0B87              ADDS.W  #2,SP
   \   09AA  6D72              MOV.W   @SP+,R2
   \   09AC  5E000000          JSR     @?F_DIV_SWAP_L04
   \   09B0  1933              SUB.W   R3,R3
   \   09B2  79024120          MOV.W   #16672,R2
   \   09B6  5E000000          JSR     @?F_MUL_L04
   \   09BA  5E000000          JSR     @?FLT_TO_SL_L04
   \   09BE  6A0B0319          MOV.B   @curr_ad_ch:16,R3L
   \   09C2  777B              BLD     #7,R3L
   \   09C4  1E33              SUBX.B  R3H,R3H
   \   09C6  0933              ADD.W   R3,R3
   \   09C8  6FB1025C          MOV.W   R1,@(raw_data,R3)
    673                                  CalcTemp(curr_ad_ch) ;              /* calculate temperature */
   \   09CC  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   09D0  5E001132          JSR     @CalcTemp:16
   \   09D4            ?0141:
    674                              }
    675                              break;
   \   09D4  4000              BRA     ?0112
   \   09D6            ?0144:
    676                          default :
    677                              break ;
   \   09D6            ?0112:
    678                          }
    679                      } else {
   \   09D6  400A              BRA     ?0145
   \   09D8            ?0111:
    680                          curr_ad_ch-- ;                                 // remeasure the chanell if skipped due to UART TX
   \   09D8  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   09DC  89FF              ADD.B   #-1,R1L
   \   09DE  6A890319          MOV.B   R1L,@curr_ad_ch:16
   \   09E2            ?0145:
    681                      }
    682                  } else {                                                /* normal conv enter point */
   \   09E2  5A000ADA          JMP     @?0146:16
   \   09E6            ?0109:
    683                      curr_sens_data = (short)(ad_data - 32767) ;        /* use ad data */
   \   09E6  0D61              MOV.W   R6,R1
   \   09E8  8901              ADD.B   #1,R1L
   \   09EA  9180              ADDX.B  #128,R1H
   \   09EC  6B81023E          MOV.W   R1,@curr_sens_data:16
    684          
    685                      switch ( (ch_stat[curr_ad_ch]>> 2) & 0x03 ) {
   \   09F0  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   09F4  7779              BLD     #7,R1L
   \   09F6  1E11              SUBX.B  R1H,R1H
   \   09F8  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   09FC  110B              SHLR.B  R3L
   \   09FE  110B              SHLR.B  R3L
   \   0A00  EB03              AND.B   #3,R3L
   \   0A02  AB03              CMP.B   #3,R3L
   \   0A04  4628              BNE     ?0149
   \   0A06            ?0148:
    686                      case 0x03 :               /* pressure */
    687                          SetMuxChannel(PRE_CAL_CH) ;         /* cal channel */
   \   0A06  F90F              MOV.B   #15,R1L
   \   0A08  5E0002D0          JSR     @SetMuxChannel:16
    688                          ad_mode |= 0x40 ;                           /* next cal */
   \   0A0C  7901031B          MOV.W   #ad_mode,R1
   \   0A10  7D107060          BSET    #6,@R1
    689                          ad_settling = AD_SET_TIME ;         /* wait 67 ms */
   \   0A14  79010043          MOV.W   #67,R1
   \   0A18  6B81031E          MOV.W   R1,@ad_settling:16
    690                          ad_state = WAIT_FOR_INTERRUPT ;         /* wait for cal int */
   \   0A1C  F902              MOV.B   #2,R1L
   \   0A1E  6A89031A          MOV.B   R1L,@ad_state:16
    691                          UnpackSensData(curr_ad_ch) ;            /* Unpack data */
   \   0A22  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0A26  5E001444          JSR     @UnpackSensData:16
    692                          break;
   \   0A2A  5A000ADA          JMP     @?0147:16
   \   0A2E            ?0149:
   \   0A2E  AB02              CMP.B   #2,R3L
   \   0A30  4704              BEQ     $+6
   \   0A32  5A000AB2          JMP     @?0152:16
    693                      case 0x02 :                /* other */
    694                          SetSupplyCurrent(1) ;                   /* no cal on this */
   \   0A36  F901              MOV.B   #1,R1L
   \   0A38  5E000302          JSR     @SetSupplyCurrent:16
    695                          SetMuxChannel(MUXCHOFF) ;
   \   0A3C  F910              MOV.B   #16,R1L
   \   0A3E  5E0002D0          JSR     @SetMuxChannel:16
    696                          SetSupplyChannel(SUPPCHOFF) ;
   \   0A42  F910              MOV.B   #16,R1L
   \   0A44  5E000286          JSR     @SetSupplyChannel:16
    697                          SetCalResistance(OFF);
   \   0A48  F900              MOV.B   #0,R1L
   \   0A4A  5E000314          JSR     @SetCalResistance:16
    698                          ad_state = IDLE ;
   \   0A4E  F907              MOV.B   #7,R1L
   \   0A50  6A89031A          MOV.B   R1L,@ad_state:16
    699                          raw_data[curr_ad_ch] = curr_sens_data ;
   \   0A54  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0A58  7779              BLD     #7,R1L
   \   0A5A  1E11              SUBX.B  R1H,R1H
   \   0A5C  0911              ADD.W   R1,R1
   \   0A5E  6B03023E          MOV.W   @curr_sens_data:16,R3
   \   0A62  6F93025C          MOV.W   R3,@(raw_data,R1)
    700                          cal_data[curr_ad_ch] = 0 ;         /* do no use caldata  */
   \   0A66  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0A6A  7779              BLD     #7,R1L
   \   0A6C  1E11              SUBX.B  R1H,R1H
   \   0A6E  0911              ADD.W   R1,R1
   \   0A70  1933              SUB.W   R3,R3
   \   0A72  6F930240          MOV.W   R3,@(cal_data,R1)
    701                          ch_stat[curr_ad_ch] &= ~0x03 ;      /* Cal. and readings set to OK */
   \   0A76  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0A7A  7779              BLD     #7,R1L
   \   0A7C  1E11              SUBX.B  R1H,R1H
   \   0A7E  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   0A82  EBFC              AND.B   #252,R3L
   \   0A84  6E9B0321          MOV.B   R3L,@(ch_stat,R1)
    702                          ad_timeout_cnt = 0 ;                        /* timeout off */
   \   0A88  1911              SUB.W   R1,R1
   \   0A8A  6B810238          MOV.W   R1,@ad_timeout_cnt:16
    703                          if ( ad_mode & 0x80 ) {                   /* test */
   \   0A8E  6A09031B          MOV.B   @ad_mode:16,R1L
   \   0A92  E980              AND.B   #128,R1L
   \   0A94  4712              BEQ     ?0151
   \   0A96            ?0150:
    704                              ch_stat[curr_ad_ch] |= 0x48 ;       /* other sensor  OK*/
   \   0A96  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0A9A  7779              BLD     #7,R1L
   \   0A9C  1E11              SUBX.B  R1H,R1H
   \   0A9E  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   0AA2  CB48              OR.B    #72,R3L
   \   0AA4  6E9B0321          MOV.B   R3L,@(ch_stat,R1)
   \   0AA8            ?0151:
    705                          }
    706                          CalcOther(curr_ad_ch) ;                 /* calculate "other" */
   \   0AA8  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0AAC  5E0012FC          JSR     @CalcOther:16
    707                          break;
   \   0AB0  4028              BRA     ?0147
   \   0AB2            ?0152:
   \   0AB2  AB01              CMP.B   #1,R3L
   \   0AB4  461E              BNE     ?0153
    708                      case 0x01 :               /* temp */
    709                          SetMuxChannel(TMP_CAL_CH) ;         /* cal channel */
   \   0AB6  F90E              MOV.B   #14,R1L
   \   0AB8  5E0002D0          JSR     @SetMuxChannel:16
    710                          ad_mode |= 0x40 ;                           /* next cal */
   \   0ABC  7901031B          MOV.W   #ad_mode,R1
   \   0AC0  7D107060          BSET    #6,@R1
    711                          ad_settling = AD_SET_TIME ;         /* wait 67 ms */
   \   0AC4  79010043          MOV.W   #67,R1
   \   0AC8  6B81031E          MOV.W   R1,@ad_settling:16
    712                          ad_state = WAIT_FOR_INTERRUPT ;         /* wait for cal int */
   \   0ACC  F902              MOV.B   #2,R1L
   \   0ACE  6A89031A          MOV.B   R1L,@ad_state:16
    713                          break;
   \   0AD2  4006              BRA     ?0147
   \   0AD4            ?0153:
    714                      default :
    715                          ad_state = IDLE ;                           /* Start new point */
   \   0AD4  F907              MOV.B   #7,R1L
   \   0AD6  6A89031A          MOV.B   R1L,@ad_state:16
    716                          break ;
   \   0ADA            ?0147:
   \   0ADA            ?0146:
    717                      }
    718                  }
    719                  break ;
   \   0ADA  5A000B74          JMP     @?0090:16
   \   0ADE            ?0154:
   \   0ADE  A904              CMP.B   #4,R1L
   \   0AE0  4656              BNE     ?0160
    720              case    START_CALIBRATION :                         // calibrate the AD chip itself
    721                  Led(2, ON) ;                                        /* Led 2 on */
   \   0AE2  79010001          MOV.W   #1,R1
   \   0AE6  6DF1              MOV.W   R1,@-SP
   \   0AE8  79010002          MOV.W   #2,R1
   \   0AEC  5E0001DA          JSR     @Led:16
   \   0AF0  0B87              ADDS.W  #2,SP
    722                  ad_timeout_cnt = AD_TIMEOUT ;                   /* timeout ad cnv */
   \   0AF2  790107D0          MOV.W   #2000,R1
   \   0AF6  6B810238          MOV.W   R1,@ad_timeout_cnt:16
    723                  ad_settling = 20 ;                              /* wait >mclock/128  */
   \   0AFA  79010014          MOV.W   #20,R1
   \   0AFE  6B81031E          MOV.W   R1,@ad_settling:16
    724                  if ( tx_complete == TRUE ) {
   \   0B02  6A09033C          MOV.B   @tx_complete:16,R1L
   \   0B06  A901              CMP.B   #1,R1L
   \   0B08  462C              BNE     ?0156
   \   0B0A            ?0155:
    725                      if ( ad_mode & 0x02 ) {                       /* pressure readings */
   \   0B0A  6A09031B          MOV.B   @ad_mode:16,R1L
   \   0B0E  E902              AND.B   #2,R1L
   \   0B10  4708              BEQ     ?0158
   \   0B12            ?0157:
    726                          ad_gain = 3;
   \   0B12  F903              MOV.B   #3,R1L
   \   0B14  6A890320          MOV.B   R1L,@ad_gain:16
    727                      } else {
   \   0B18  4006              BRA     ?0159
   \   0B1A            ?0158:
    728                          ad_gain = 0;
   \   0B1A  F900              MOV.B   #0,R1L
   \   0B1C  6A890320          MOV.B   R1L,@ad_gain:16
   \   0B20            ?0159:
    729                      }
    730                      ad_state = WAIT_FOR_CAL_INT ;               /* next state */
   \   0B20  F905              MOV.B   #5,R1L
   \   0B22  6A89031A          MOV.B   R1L,@ad_state:16
    731                      WriteAdByte(ad_gain | 0x10) ;               /* Next write setup reg */
   \   0B26  6A090320          MOV.B   @ad_gain:16,R1L
   \   0B2A  C910              OR.B    #16,R1L
   \   0B2C  5E001F10          JSR     @WriteAdByte:16
    732                      WriteAdByte(0x6a) ;                     /*  Ad setup data, bipolar */
   \   0B30  F96A              MOV.B   #106,R1L
   \   0B32  5E001F10          JSR     @WriteAdByte:16
   \   0B36            ?0156:
    733                  }
    734                  break ;
   \   0B36  403C              BRA     ?0090
   \   0B38            ?0160:
   \   0B38  A905              CMP.B   #5,R1L
   \   0B3A  4602              BNE     ?0161
    735              case    WAIT_FOR_CAL_INT :
    736                  break ;
   \   0B3C  4036              BRA     ?0090
   \   0B3E            ?0161:
   \   0B3E  A906              CMP.B   #6,R1L
   \   0B40  4626              BNE     ?0162
    737              case    CAL_COMPLETE :
    738                  ad_timeout_cnt = 0 ;                                /* timeout off */
   \   0B42  1911              SUB.W   R1,R1
   \   0B44  6B810238          MOV.W   R1,@ad_timeout_cnt:16
    739                  curr_ad_ch -= 1 ;                                   /* To start with ch 0 !! */
   \   0B48  6A090319          MOV.B   @curr_ad_ch:16,R1L
   \   0B4C  89FF              ADD.B   #-1,R1L
   \   0B4E  6A890319          MOV.B   R1L,@curr_ad_ch:16
    740                  ad_state = IDLE ;
   \   0B52  F907              MOV.B   #7,R1L
   \   0B54  6A89031A          MOV.B   R1L,@ad_state:16
    741                  Led(2, OFF) ;                                       /* Led 2 off */
   \   0B58  1911              SUB.W   R1,R1
   \   0B5A  6DF1              MOV.W   R1,@-SP
   \   0B5C  79010002          MOV.W   #2,R1
   \   0B60  5E0001DA          JSR     @Led:16
   \   0B64  0B87              ADDS.W  #2,SP
    742                  break ;
   \   0B66  400C              BRA     ?0090
   \   0B68            ?0162:
   \   0B68  A907              CMP.B   #7,R1L
   \   0B6A  4602              BNE     ?0163
    743              case    IDLE :
    744                  break ;
   \   0B6C  4006              BRA     ?0090
   \   0B6E            ?0163:
    745              default :
    746                  ad_state = IDLE ;
   \   0B6E  F907              MOV.B   #7,R1L
   \   0B70  6A89031A          MOV.B   R1L,@ad_state:16
    747                  break ;
   \   0B74            ?0090:
    748              }
    749          }
   \   0B74  6D76              POP     R6
   \   0B76  5470              RTS
    750          
    751          /*************************************************************************
    752          *
    753          *  Calculate and filter pressure
    754          *
    755          *************************************************************************/
    756          void CalcPress(signed char ch)
    757          {
   \   0B78            CalcPress:
   \   0B78  6DF4              PUSH    R4
   \   0B7A  6DF6              PUSH    R6
   \   0B7C  1B87              SUBS.W  #2,SP
   \   0B7E  1B87              SUBS.W  #2,SP
   \   0B80  0C9E              MOV.B   R1L,R6L
    758          
    759              float temp_data ;
    760          
    761              Led(2, ON)  ;                               /* Led 2 on */
   \   0B82  79010001          MOV.W   #1,R1
   \   0B86  6DF1              MOV.W   R1,@-SP
   \   0B88  79010002          MOV.W   #2,R1
   \   0B8C  5E0001DA          JSR     @Led:16
   \   0B90  0B87              ADDS.W  #2,SP
    762          
    763              if ( (sens_data[0]>0) && (raw_data[ch] < sens_data[0]) ) {
   \   0B92  6B0100EA          MOV.W   @sens_data:16,R1
   \   0B96  0D11              MOV.W   R1,R1
   \   0B98  4F64              BLE     ?0165
   \   0B9A  0CE9              MOV.B   R6L,R1L
   \   0B9C  7779              BLD     #7,R1L
   \   0B9E  1E11              SUBX.B  R1H,R1H
   \   0BA0  0911              ADD.W   R1,R1
   \   0BA2  6F11025C          MOV.W   @(raw_data,R1),R1
   \   0BA6  6B0300EA          MOV.W   @sens_data:16,R3
   \   0BAA  1D31              CMP.W   R3,R1
   \   0BAC  4C50              BGE     ?0165
   \   0BAE            ?0167:
   \   0BAE            ?0166:
   \   0BAE            ?0164:
    764                  temp_data = CalcPercent((sens_data[1]-sens_data[0]), sens_data[0],
    765                                          raw_data[ch], 0.0) ;
   \   0BAE  1911              SUB.W   R1,R1
   \   0BB0  1900              SUB.W   R0,R0
   \   0BB2  6DF1              MOV.W   R1,@-SP
   \   0BB4  6DF0              MOV.W   R0,@-SP
   \   0BB6  0CE9              MOV.B   R6L,R1L
   \   0BB8  7779              BLD     #7,R1L
   \   0BBA  1E11              SUBX.B  R1H,R1H
   \   0BBC  0911              ADD.W   R1,R1
   \   0BBE  6F11025C          MOV.W   @(raw_data,R1),R1
   \   0BC2  6DF1              MOV.W   R1,@-SP
   \   0BC4  6B0100EA          MOV.W   @sens_data:16,R1
   \   0BC8  6DF1              MOV.W   R1,@-SP
   \   0BCA  6B0100EC          MOV.W   @sens_data+2:16,R1
   \   0BCE  6B0300EA          MOV.W   @sens_data:16,R3
   \   0BD2  1931              SUB.W   R3,R1
   \   0BD4  5E001010          JSR     @CalcPercent:16
   \   0BD8  79020008          MOV.W   #8,R2
   \   0BDC  0927              ADD.W   R2,SP
   \   0BDE  6FF10002          MOV.W   R1,@(2,SP)
   \   0BE2  69F0              MOV.W   R0,@SP
    766                  temp_data *= 40.0 ;             /* caluclate %, using 0-40% cal data*/
   \   0BE4  6970              MOV.W   @SP,R0
   \   0BE6  6F710002          MOV.W   @(2,SP),R1
   \   0BEA  1933              SUB.W   R3,R3
   \   0BEC  79024220          MOV.W   #16928,R2
   \   0BF0  5E000000          JSR     @?F_MUL_L04
   \   0BF4  6FF10002          MOV.W   R1,@(2,SP)
   \   0BF8  69F0              MOV.W   R0,@SP
    767          
    768              } else if ( raw_data[ch] <  sens_data[1] ) {
   \   0BFA  5A000DC2          JMP     @?0168:16
   \   0BFE            ?0165:
   \   0BFE  0CE9              MOV.B   R6L,R1L
   \   0C00  7779              BLD     #7,R1L
   \   0C02  1E11              SUBX.B  R1H,R1H
   \   0C04  0911              ADD.W   R1,R1
   \   0C06  6F11025C          MOV.W   @(raw_data,R1),R1
   \   0C0A  6B0300EC          MOV.W   @sens_data+2:16,R3
   \   0C0E  1D31              CMP.W   R3,R1
   \   0C10  4C64              BGE     ?0170
   \   0C12            ?0169:
    769                  temp_data = CalcPercent((sens_data[1]-sens_data[0]), sens_data[0],
    770                                          raw_data[ch], (float)sens_nl1) ;
   \   0C12  6A0900F2          MOV.B   @sens_nl1:16,R1L
   \   0C16  7379              BTST    #7,R1L
   \   0C18  4708              BEQ     $+10
   \   0C1A  F1FF              MOV.B   #255,R1H
   \   0C1C  7900FFFF          MOV.W   #-1,R0
   \   0C20  4004              BRA     $+6
   \   0C22  F100              MOV.B   #0,R1H
   \   0C24  1900              SUB.W   R0,R0
   \   0C26  5E000000          JSR     @?SL_TO_FLT_L04
   \   0C2A  6DF1              MOV.W   R1,@-SP
   \   0C2C  6DF0              MOV.W   R0,@-SP
   \   0C2E  0CE9              MOV.B   R6L,R1L
   \   0C30  7779              BLD     #7,R1L
   \   0C32  1E11              SUBX.B  R1H,R1H
   \   0C34  0911              ADD.W   R1,R1
   \   0C36  6F11025C          MOV.W   @(raw_data,R1),R1
   \   0C3A  6DF1              MOV.W   R1,@-SP
   \   0C3C  6B0100EA          MOV.W   @sens_data:16,R1
   \   0C40  6DF1              MOV.W   R1,@-SP
   \   0C42  6B0100EC          MOV.W   @sens_data+2:16,R1
   \   0C46  6B0300EA          MOV.W   @sens_data:16,R3
   \   0C4A  1931              SUB.W   R3,R1
   \   0C4C  5E001010          JSR     @CalcPercent:16
   \   0C50  79020008          MOV.W   #8,R2
   \   0C54  0927              ADD.W   R2,SP
   \   0C56  6FF10002          MOV.W   R1,@(2,SP)
   \   0C5A  69F0              MOV.W   R0,@SP
    771                  temp_data *= 40.0 ;             /* caluclate % */
   \   0C5C  6970              MOV.W   @SP,R0
   \   0C5E  6F710002          MOV.W   @(2,SP),R1
   \   0C62  1933              SUB.W   R3,R3
   \   0C64  79024220          MOV.W   #16928,R2
   \   0C68  5E000000          JSR     @?F_MUL_L04
   \   0C6C  6FF10002          MOV.W   R1,@(2,SP)
   \   0C70  69F0              MOV.W   R0,@SP
    772          
    773              } else if ( raw_data[ch] < sens_data[2] ) {
   \   0C72  5A000DC2          JMP     @?0171:16
   \   0C76            ?0170:
   \   0C76  0CE9              MOV.B   R6L,R1L
   \   0C78  7779              BLD     #7,R1L
   \   0C7A  1E11              SUBX.B  R1H,R1H
   \   0C7C  0911              ADD.W   R1,R1
   \   0C7E  6F11025C          MOV.W   @(raw_data,R1),R1
   \   0C82  6B0300EE          MOV.W   @sens_data+4:16,R3
   \   0C86  1D31              CMP.W   R3,R1
   \   0C88  4C6E              BGE     ?0173
   \   0C8A            ?0172:
    774                  temp_data = CalcPercent((sens_data[2]-sens_data[1]), sens_data[1],
    775                                          raw_data[ch], (float)(sens_nl2 / 3)) ;
    776                  temp_data = temp_data*(60.0 - 40.0)+40.0 ;              /* caluclate % */
   \   0C8A  6A0900F3          MOV.B   @sens_nl2:16,R1L
   \   0C8E  FB03              MOV.B   #3,R3L
   \   0C90  5E000000          JSR     @?SC_DIV_L01
   \   0C94  7379              BTST    #7,R1L
   \   0C96  4708              BEQ     $+10
   \   0C98  F1FF              MOV.B   #255,R1H
   \   0C9A  7900FFFF          MOV.W   #-1,R0
   \   0C9E  4004              BRA     $+6
   \   0CA0  F100              MOV.B   #0,R1H
   \   0CA2  1900              SUB.W   R0,R0
   \   0CA4  5E000000          JSR     @?SL_TO_FLT_L04
   \   0CA8  6DF1              MOV.W   R1,@-SP
   \   0CAA  6DF0              MOV.W   R0,@-SP
   \   0CAC  0CE9              MOV.B   R6L,R1L
   \   0CAE  7779              BLD     #7,R1L
   \   0CB0  1E11              SUBX.B  R1H,R1H
   \   0CB2  0911              ADD.W   R1,R1
   \   0CB4  6F11025C          MOV.W   @(raw_data,R1),R1
   \   0CB8  6DF1              MOV.W   R1,@-SP
   \   0CBA  6B0100EC          MOV.W   @sens_data+2:16,R1
   \   0CBE  6DF1              MOV.W   R1,@-SP
   \   0CC0  6B0100EE          MOV.W   @sens_data+4:16,R1
   \   0CC4  6B0300EC          MOV.W   @sens_data+2:16,R3
   \   0CC8  1931              SUB.W   R3,R1
   \   0CCA  5E001010          JSR     @CalcPercent:16
   \   0CCE  79020008          MOV.W   #8,R2
   \   0CD2  0927              ADD.W   R2,SP
   \   0CD4  6FF10002          MOV.W   R1,@(2,SP)
   \   0CD8  69F0              MOV.W   R0,@SP
   \   0CDA  1933              SUB.W   R3,R3
   \   0CDC  790241A0          MOV.W   #16800,R2
   \   0CE0  5E000000          JSR     @?F_MUL_L04
   \   0CE4  1933              SUB.W   R3,R3
   \   0CE6  79024220          MOV.W   #16928,R2
   \   0CEA  5E000000          JSR     @?F_ADD_L04
   \   0CEE  6FF10002          MOV.W   R1,@(2,SP)
   \   0CF2  69F0              MOV.W   R0,@SP
    777          
    778              } else if ( raw_data[ch] < sens_data[3] ) {
   \   0CF4  5A000DC2          JMP     @?0174:16
   \   0CF8            ?0173:
   \   0CF8  0CE9              MOV.B   R6L,R1L
   \   0CFA  7779              BLD     #7,R1L
   \   0CFC  1E11              SUBX.B  R1H,R1H
   \   0CFE  0911              ADD.W   R1,R1
   \   0D00  6F11025C          MOV.W   @(raw_data,R1),R1
   \   0D04  6B0300F0          MOV.W   @sens_data+6:16,R3
   \   0D08  1D31              CMP.W   R3,R1
   \   0D0A  4C66              BGE     ?0176
   \   0D0C            ?0175:
    779                  temp_data = CalcPercent((sens_data[3]-sens_data[2]), sens_data[2],
    780                                          raw_data[ch], (float)sens_nl2 ) ;
    781                  temp_data = temp_data*(100.0 - 60.0)+60.0 ;             /* caluclate % */
   \   0D0C  6A0900F3          MOV.B   @sens_nl2:16,R1L
   \   0D10  7379              BTST    #7,R1L
   \   0D12  4708              BEQ     $+10
   \   0D14  F1FF              MOV.B   #255,R1H
   \   0D16  7900FFFF          MOV.W   #-1,R0
   \   0D1A  4004              BRA     $+6
   \   0D1C  F100              MOV.B   #0,R1H
   \   0D1E  1900              SUB.W   R0,R0
   \   0D20  5E000000          JSR     @?SL_TO_FLT_L04
   \   0D24  6DF1              MOV.W   R1,@-SP
   \   0D26  6DF0              MOV.W   R0,@-SP
   \   0D28  0CE9              MOV.B   R6L,R1L
   \   0D2A  7779              BLD     #7,R1L
   \   0D2C  1E11              SUBX.B  R1H,R1H
   \   0D2E  0911              ADD.W   R1,R1
   \   0D30  6F11025C          MOV.W   @(raw_data,R1),R1
   \   0D34  6DF1              MOV.W   R1,@-SP
   \   0D36  6B0100EE          MOV.W   @sens_data+4:16,R1
   \   0D3A  6DF1              MOV.W   R1,@-SP
   \   0D3C  6B0100F0          MOV.W   @sens_data+6:16,R1
   \   0D40  6B0300EE          MOV.W   @sens_data+4:16,R3
   \   0D44  1931              SUB.W   R3,R1
   \   0D46  5E001010          JSR     @CalcPercent:16
   \   0D4A  79020008          MOV.W   #8,R2
   \   0D4E  0927              ADD.W   R2,SP
   \   0D50  6FF10002          MOV.W   R1,@(2,SP)
   \   0D54  69F0              MOV.W   R0,@SP
   \   0D56  1933              SUB.W   R3,R3
   \   0D58  79024220          MOV.W   #16928,R2
   \   0D5C  5E000000          JSR     @?F_MUL_L04
   \   0D60  1933              SUB.W   R3,R3
   \   0D62  79024270          MOV.W   #17008,R2
   \   0D66  5E000000          JSR     @?F_ADD_L04
   \   0D6A  6FF10002          MOV.W   R1,@(2,SP)
   \   0D6E  69F0              MOV.W   R0,@SP
    782          
    783              } else {
   \   0D70  4050              BRA     ?0177
   \   0D72            ?0176:
    784                  temp_data = CalcPercent((sens_data[3]-sens_data[2]), sens_data[2],
    785                                          raw_data[ch], 0.0) ;
    786                  temp_data = temp_data*(100.0 - 60.0)+60.0 ;             /* caluclate % */
   \   0D72  1911              SUB.W   R1,R1
   \   0D74  1900              SUB.W   R0,R0
   \   0D76  6DF1              MOV.W   R1,@-SP
   \   0D78  6DF0              MOV.W   R0,@-SP
   \   0D7A  0CE9              MOV.B   R6L,R1L
   \   0D7C  7779              BLD     #7,R1L
   \   0D7E  1E11              SUBX.B  R1H,R1H
   \   0D80  0911              ADD.W   R1,R1
   \   0D82  6F11025C          MOV.W   @(raw_data,R1),R1
   \   0D86  6DF1              MOV.W   R1,@-SP
   \   0D88  6B0100EE          MOV.W   @sens_data+4:16,R1
   \   0D8C  6DF1              MOV.W   R1,@-SP
   \   0D8E  6B0100F0          MOV.W   @sens_data+6:16,R1
   \   0D92  6B0300EE          MOV.W   @sens_data+4:16,R3
   \   0D96  1931              SUB.W   R3,R1
   \   0D98  5E001010          JSR     @CalcPercent:16
   \   0D9C  79020008          MOV.W   #8,R2
   \   0DA0  0927              ADD.W   R2,SP
   \   0DA2  6FF10002          MOV.W   R1,@(2,SP)
   \   0DA6  69F0              MOV.W   R0,@SP
   \   0DA8  1933              SUB.W   R3,R3
   \   0DAA  79024220          MOV.W   #16928,R2
   \   0DAE  5E000000          JSR     @?F_MUL_L04
   \   0DB2  1933              SUB.W   R3,R3
   \   0DB4  79024270          MOV.W   #17008,R2
   \   0DB8  5E000000          JSR     @?F_ADD_L04
   \   0DBC  6FF10002          MOV.W   R1,@(2,SP)
   \   0DC0  69F0              MOV.W   R0,@SP
   \   0DC2            ?0177:
   \   0DC2            ?0174:
   \   0DC2            ?0171:
   \   0DC2            ?0168:
    787              }
    788          
    789              temp_data *= ((((float)packed_data[ch >> 1][6]/10.0) -
    790                             (float) packed_data[ch >> 1][5] / 100.0) /100.0 ) * 10.197162;
   \   0DC2  0CE9              MOV.B   R6L,R1L
   \   0DC4  1189              SHAR.B  R1L
   \   0DC6  7779              BLD     #7,R1L
   \   0DC8  1E11              SUBX.B  R1H,R1H
   \   0DCA  79030028          MOV.W   #40,R3
   \   0DCE  5E000000          JSR     @?SS_MUL_L02
   \   0DD2  6E1900FA          MOV.B   @(packed_data+6,R1),R1L
   \   0DD6  F100              MOV.B   #0,R1H
   \   0DD8  1900              SUB.W   R0,R0
   \   0DDA  5E000000          JSR     @?UL_TO_FLT_L04
   \   0DDE  1933              SUB.W   R3,R3
   \   0DE0  79024120          MOV.W   #16672,R2
   \   0DE4  5E000000          JSR     @?F_DIV_L04
   \   0DE8  0CEB              MOV.B   R6L,R3L
   \   0DEA  118B              SHAR.B  R3L
   \   0DEC  777B              BLD     #7,R3L
   \   0DEE  1E33              SUBX.B  R3H,R3H
   \   0DF0  6DF1              MOV.W   R1,@-SP
   \   0DF2  0D31              MOV.W   R3,R1
   \   0DF4  79030028          MOV.W   #40,R3
   \   0DF8  5E000000          JSR     @?SS_MUL_L02
   \   0DFC  6E1900F9          MOV.B   @(packed_data+5,R1),R1L
   \   0E00  6DF0              MOV.W   R0,@-SP
   \   0E02  F100              MOV.B   #0,R1H
   \   0E04  1900              SUB.W   R0,R0
   \   0E06  5E000000          JSR     @?UL_TO_FLT_L04
   \   0E0A  1933              SUB.W   R3,R3
   \   0E0C  790242C8          MOV.W   #17096,R2
   \   0E10  5E000000          JSR     @?F_DIV_L04
   \   0E14  6F730002          MOV.W   @(2,SP),R3
   \   0E18  6972              MOV.W   @SP,R2
   \   0E1A  6FF20002          MOV.W   R2,@(2,SP)
   \   0E1E  0B87              ADDS.W  #2,SP
   \   0E20  6D72              MOV.W   @SP+,R2
   \   0E22  5E000000          JSR     @?F_SUB_SWAP_L04
   \   0E26  1933              SUB.W   R3,R3
   \   0E28  790242C8          MOV.W   #17096,R2
   \   0E2C  5E000000          JSR     @?F_DIV_L04
   \   0E30  79032793          MOV.W   #10131,R3
   \   0E34  79024123          MOV.W   #16675,R2
   \   0E38  5E000000          JSR     @?F_MUL_L04
   \   0E3C  6DF0              MOV.W   R0,@-SP
   \   0E3E  6DF1              MOV.W   R1,@-SP
   \   0E40  6F700004          MOV.W   @(4,SP),R0
   \   0E44  6F710006          MOV.W   @(6,SP),R1
   \   0E48  6D73              MOV.W   @SP+,R3
   \   0E4A  6D72              MOV.W   @SP+,R2
   \   0E4C  5E000000          JSR     @?F_MUL_L04
   \   0E50  6FF10002          MOV.W   R1,@(2,SP)
   \   0E54  69F0              MOV.W   R0,@SP
    791              temp_data -= ((float) offset[ch] / 1000.0) ;
   \   0E56  0CE9              MOV.B   R6L,R1L
   \   0E58  7779              BLD     #7,R1L
   \   0E5A  1E11              SUBX.B  R1H,R1H
   \   0E5C  0911              ADD.W   R1,R1
   \   0E5E  6F1102F4          MOV.W   @(offset,R1),R1
   \   0E62  7371              BTST    #7,R1H
   \   0E64  4706              BEQ     $+8
   \   0E66  7900FFFF          MOV.W   #-1,R0
   \   0E6A  4002              BRA     $+4
   \   0E6C  1900              SUB.W   R0,R0
   \   0E6E  5E000000          JSR     @?SL_TO_FLT_L04
   \   0E72  1933              SUB.W   R3,R3
   \   0E74  7902447A          MOV.W   #17530,R2
   \   0E78  5E000000          JSR     @?F_DIV_L04
   \   0E7C  6DF0              MOV.W   R0,@-SP
   \   0E7E  6DF1              MOV.W   R1,@-SP
   \   0E80  6F700004          MOV.W   @(4,SP),R0
   \   0E84  6F710006          MOV.W   @(6,SP),R1
   \   0E88  6D73              MOV.W   @SP+,R3
   \   0E8A  6D72              MOV.W   @SP+,R2
   \   0E8C  5E000000          JSR     @?F_SUB_L04
   \   0E90  6FF10002          MOV.W   R1,@(2,SP)
   \   0E94  69F0              MOV.W   R0,@SP
    792              temp_data *=  gain[ch] ;
   \   0E96  0CE9              MOV.B   R6L,R1L
   \   0E98  7779              BLD     #7,R1L
   \   0E9A  1E11              SUBX.B  R1H,R1H
   \   0E9C  0911              ADD.W   R1,R1
   \   0E9E  0911              ADD.W   R1,R1
   \   0EA0  6DF1              MOV.W   R1,@-SP
   \   0EA2  6F700002          MOV.W   @(2,SP),R0
   \   0EA6  6F710004          MOV.W   @(4,SP),R1
   \   0EAA  6D73              MOV.W   @SP+,R3
   \   0EAC  0D32              MOV.W   R3,R2
   \   0EAE  6F2302BE          MOV.W   @(gain+2,R2),R3
   \   0EB2  6F2202BC          MOV.W   @(gain,R2),R2
   \   0EB6  5E000000          JSR     @?F_MUL_L04
   \   0EBA  6FF10002          MOV.W   R1,@(2,SP)
   \   0EBE  69F0              MOV.W   R0,@SP
    793              temp_data += ((float) packed_data[ch >> 1][5] / 100.0)  * 10.197162 ;
   \   0EC0  0CE9              MOV.B   R6L,R1L
   \   0EC2  1189              SHAR.B  R1L
   \   0EC4  7779              BLD     #7,R1L
   \   0EC6  1E11              SUBX.B  R1H,R1H
   \   0EC8  79030028          MOV.W   #40,R3
   \   0ECC  5E000000          JSR     @?SS_MUL_L02
   \   0ED0  6E1900F9          MOV.B   @(packed_data+5,R1),R1L
   \   0ED4  F100              MOV.B   #0,R1H
   \   0ED6  1900              SUB.W   R0,R0
   \   0ED8  5E000000          JSR     @?UL_TO_FLT_L04
   \   0EDC  1933              SUB.W   R3,R3
   \   0EDE  790242C8          MOV.W   #17096,R2
   \   0EE2  5E000000          JSR     @?F_DIV_L04
   \   0EE6  79032793          MOV.W   #10131,R3
   \   0EEA  79024123          MOV.W   #16675,R2
   \   0EEE  5E000000          JSR     @?F_MUL_L04
   \   0EF2  6DF0              MOV.W   R0,@-SP
   \   0EF4  6DF1              MOV.W   R1,@-SP
   \   0EF6  6F700004          MOV.W   @(4,SP),R0
   \   0EFA  6F710006          MOV.W   @(6,SP),R1
   \   0EFE  6D73              MOV.W   @SP+,R3
   \   0F00  6D72              MOV.W   @SP+,R2
   \   0F02  5E000000          JSR     @?F_ADD_L04
   \   0F06  6FF10002          MOV.W   R1,@(2,SP)
   \   0F0A  69F0              MOV.W   R0,@SP
    794              mes_data[ch] += (temp_data - mes_data[ch])/ ((float)p_filter + 1.0) ;
   \   0F0C  0CE9              MOV.B   R6L,R1L
   \   0F0E  7779              BLD     #7,R1L
   \   0F10  1E11              SUBX.B  R1H,R1H
   \   0F12  0911              ADD.W   R1,R1
   \   0F14  0911              ADD.W   R1,R1
   \   0F16  6F10027A          MOV.W   @(mes_data+2,R1),R0
   \   0F1A  6F110278          MOV.W   @(mes_data,R1),R1
   \   0F1E  0D11              MOV.W   R1,R1
   \   0F20  4702              BEQ     $+4
   \   0F22  7171              BNOT    #7,R1H
   \   0F24  6DF1              MOV.W   R1,@-SP
   \   0F26  0D01              MOV.W   R0,R1
   \   0F28  6D70              MOV.W   @SP+,R0
   \   0F2A  6F730002          MOV.W   @(2,SP),R3
   \   0F2E  6972              MOV.W   @SP,R2
   \   0F30  5E000000          JSR     @?F_ADD_L04
   \   0F34  6DF1              MOV.W   R1,@-SP
   \   0F36  6A090337          MOV.B   @p_filter:16,R1L
   \   0F3A  6DF0              MOV.W   R0,@-SP
   \   0F3C  F100              MOV.B   #0,R1H
   \   0F3E  1900              SUB.W   R0,R0
   \   0F40  5E000000          JSR     @?UL_TO_FLT_L04
   \   0F44  1933              SUB.W   R3,R3
   \   0F46  79023F80          MOV.W   #16256,R2
   \   0F4A  5E000000          JSR     @?F_ADD_L04
   \   0F4E  6F730002          MOV.W   @(2,SP),R3
   \   0F52  6972              MOV.W   @SP,R2
   \   0F54  6FF20002          MOV.W   R2,@(2,SP)
   \   0F58  0B87              ADDS.W  #2,SP
   \   0F5A  6D72              MOV.W   @SP+,R2
   \   0F5C  5E000000          JSR     @?F_DIV_SWAP_L04
   \   0F60  0CEB              MOV.B   R6L,R3L
   \   0F62  777B              BLD     #7,R3L
   \   0F64  1E33              SUBX.B  R3H,R3H
   \   0F66  0933              ADD.W   R3,R3
   \   0F68  0933              ADD.W   R3,R3
   \   0F6A  6DF0              MOV.W   R0,@-SP
   \   0F6C  6DF1              MOV.W   R1,@-SP
   \   0F6E  6F300278          MOV.W   @(mes_data,R3),R0
   \   0F72  6F31027A          MOV.W   @(mes_data+2,R3),R1
   \   0F76  6DF3              MOV.W   R3,@-SP
   \   0F78  6F730002          MOV.W   @(2,SP),R3
   \   0F7C  6972              MOV.W   @SP,R2
   \   0F7E  6FF20002          MOV.W   R2,@(2,SP)
   \   0F82  0B87              ADDS.W  #2,SP
   \   0F84  6F720002          MOV.W   @(2,SP),R2
   \   0F88  6974              MOV.W   @SP,R4
   \   0F8A  6FF40002          MOV.W   R4,@(2,SP)
   \   0F8E  0B87              ADDS.W  #2,SP
   \   0F90  5E000000          JSR     @?F_ADD_L04
   \   0F94  6D73              MOV.W   @SP+,R3
   \   0F96  6FB1027A          MOV.W   R1,@(mes_data+2,R3)
   \   0F9A  6FB00278          MOV.W   R0,@(mes_data,R3)
    795              if ( (mes_data[ch] > 500.0) || (mes_data[ch] < -50.0) ) {
   \   0F9E  0CE9              MOV.B   R6L,R1L
   \   0FA0  7779              BLD     #7,R1L
   \   0FA2  1E11              SUBX.B  R1H,R1H
   \   0FA4  0911              ADD.W   R1,R1
   \   0FA6  0911              ADD.W   R1,R1
   \   0FA8  0D10              MOV.W   R1,R0
   \   0FAA  6F01027A          MOV.W   @(mes_data+2,R0),R1
   \   0FAE  6F000278          MOV.W   @(mes_data,R0),R0
   \   0FB2  1933              SUB.W   R3,R3
   \   0FB4  790243FA          MOV.W   #17402,R2
   \   0FB8  5E000000          JSR     @?F_SUB_L04
   \   0FBC  0D00              MOV.W   R0,R0
   \   0FBE  4E22              BGT     ?0178
   \   0FC0  0CE9              MOV.B   R6L,R1L
   \   0FC2  7779              BLD     #7,R1L
   \   0FC4  1E11              SUBX.B  R1H,R1H
   \   0FC6  0911              ADD.W   R1,R1
   \   0FC8  0911              ADD.W   R1,R1
   \   0FCA  0D10              MOV.W   R1,R0
   \   0FCC  6F01027A          MOV.W   @(mes_data+2,R0),R1
   \   0FD0  6F000278          MOV.W   @(mes_data,R0),R0
   \   0FD4  1933              SUB.W   R3,R3
   \   0FD6  7902C248          MOV.W   #-15800,R2
   \   0FDA  5E000000          JSR     @?F_SUB_L04
   \   0FDE  0D00              MOV.W   R0,R0
   \   0FE0  4C16              BGE     ?0179
   \   0FE2            ?0180:
   \   0FE2            ?0181:
   \   0FE2            ?0178:
    796                  mes_data[ch] = 0.0 ;
   \   0FE2  0CE9              MOV.B   R6L,R1L
   \   0FE4  7779              BLD     #7,R1L
   \   0FE6  1E11              SUBX.B  R1H,R1H
   \   0FE8  0911              ADD.W   R1,R1
   \   0FEA  0911              ADD.W   R1,R1
   \   0FEC  1922              SUB.W   R2,R2
   \   0FEE  1900              SUB.W   R0,R0
   \   0FF0  6F92027A          MOV.W   R2,@(mes_data+2,R1)
   \   0FF4  6F900278          MOV.W   R0,@(mes_data,R1)
   \   0FF8            ?0179:
    797              }
    798              Led(2, OFF) ;                                   /* Led 2 off */
   \   0FF8  1911              SUB.W   R1,R1
   \   0FFA  6DF1              MOV.W   R1,@-SP
   \   0FFC  79010002          MOV.W   #2,R1
   \   1000  5E0001DA          JSR     @Led:16
   \   1004  0B87              ADDS.W  #2,SP
    799          
    800          }
   \   1006  0B87              ADDS.W  #2,SP
   \   1008  0B87              ADDS.W  #2,SP
   \   100A  6D76              POP     R6
   \   100C  6D74              POP     R4
   \   100E  5470              RTS
    801          
    802          /*************************************************************************
    803          *
    804          *  Calculate precentage for pressure
    805          *
    806          *************************************************************************/
    807          float   CalcPercent( unsigned short span, short low_span, short raw_data,
    808                               float nl)
    809          {
   \   1010            CalcPercent:
   \   1010  6DF4              PUSH    R4
   \   1012  6DF5              PUSH    R5
   \   1014  6DF6              PUSH    R6
   \   1016  79020010          MOV.W   #16,R2
   \   101A  1927              SUB.W   R2,SP
   \   101C  6F76001A          MOV.W   @(26,SP),R6
   \   1020  6F750018          MOV.W   @(24,SP),R5
   \   1024  0D14              MOV.W   R1,R4
    810          
    811              float x, yy, fspan, range ;
    812          
    813              range = (float)raw_data - (float)low_span ;
   \   1026  0D61              MOV.W   R6,R1
   \   1028  7371              BTST    #7,R1H
   \   102A  4706              BEQ     $+8
   \   102C  7900FFFF          MOV.W   #-1,R0
   \   1030  4002              BRA     $+4
   \   1032  1900              SUB.W   R0,R0
   \   1034  5E000000          JSR     @?SL_TO_FLT_L04
   \   1038  6DF1              MOV.W   R1,@-SP
   \   103A  0D51              MOV.W   R5,R1
   \   103C  6DF0              MOV.W   R0,@-SP
   \   103E  7371              BTST    #7,R1H
   \   1040  4706              BEQ     $+8
   \   1042  7900FFFF          MOV.W   #-1,R0
   \   1046  4002              BRA     $+4
   \   1048  1900              SUB.W   R0,R0
   \   104A  5E000000          JSR     @?SL_TO_FLT_L04
   \   104E  6F730002          MOV.W   @(2,SP),R3
   \   1052  6972              MOV.W   @SP,R2
   \   1054  6FF20002          MOV.W   R2,@(2,SP)
   \   1058  0B87              ADDS.W  #2,SP
   \   105A  6D72              MOV.W   @SP+,R2
   \   105C  5E000000          JSR     @?F_SUB_SWAP_L04
   \   1060  6FF10006          MOV.W   R1,@(6,SP)
   \   1064  6FF00004          MOV.W   R0,@(4,SP)
    814              fspan = (float)span ;
   \   1068  0D41              MOV.W   R4,R1
   \   106A  1900              SUB.W   R0,R0
   \   106C  5E000000          JSR     @?UL_TO_FLT_L04
   \   1070  6FF10002          MOV.W   R1,@(2,SP)
   \   1074  69F0              MOV.W   R0,@SP
    815          
    816              x = range/fspan ;
   \   1076  6F710006          MOV.W   @(6,SP),R1
   \   107A  6F700004          MOV.W   @(4,SP),R0
   \   107E  6F730002          MOV.W   @(2,SP),R3
   \   1082  6972              MOV.W   @SP,R2
   \   1084  5E000000          JSR     @?F_DIV_L04
   \   1088  6FF1000A          MOV.W   R1,@(10,SP)
   \   108C  6FF00008          MOV.W   R0,@(8,SP)
    817              yy = (fspan - fspan*x)*fspan*x*nl/(fspan * fspan / 4.0) ;
   \   1090  6F710002          MOV.W   @(2,SP),R1
   \   1094  6970              MOV.W   @SP,R0
   \   1096  6F73000A          MOV.W   @(10,SP),R3
   \   109A  6F720008          MOV.W   @(8,SP),R2
   \   109E  5E000000          JSR     @?F_MUL_L04
   \   10A2  0D00              MOV.W   R0,R0
   \   10A4  4702              BEQ     $+4
   \   10A6  7170              BNOT    #7,R0H
   \   10A8  6F730002          MOV.W   @(2,SP),R3
   \   10AC  6972              MOV.W   @SP,R2
   \   10AE  5E000000          JSR     @?F_ADD_L04
   \   10B2  6F730002          MOV.W   @(2,SP),R3
   \   10B6  6972              MOV.W   @SP,R2
   \   10B8  5E000000          JSR     @?F_MUL_L04
   \   10BC  6F73000A          MOV.W   @(10,SP),R3
   \   10C0  6F720008          MOV.W   @(8,SP),R2
   \   10C4  5E000000          JSR     @?F_MUL_L04
   \   10C8  6F73001E          MOV.W   @(30,SP),R3
   \   10CC  6F72001C          MOV.W   @(28,SP),R2
   \   10D0  5E000000          JSR     @?F_MUL_L04
   \   10D4  6DF0              MOV.W   R0,@-SP
   \   10D6  6DF1              MOV.W   R1,@-SP
   \   10D8  6F710006          MOV.W   @(6,SP),R1
   \   10DC  6F700004          MOV.W   @(4,SP),R0
   \   10E0  6F730006          MOV.W   @(6,SP),R3
   \   10E4  6F720004          MOV.W   @(4,SP),R2
   \   10E8  5E000000          JSR     @?F_MUL_L04
   \   10EC  1933              SUB.W   R3,R3
   \   10EE  79024080          MOV.W   #16512,R2
   \   10F2  5E000000          JSR     @?F_DIV_L04
   \   10F6  6D73              MOV.W   @SP+,R3
   \   10F8  6D72              MOV.W   @SP+,R2
   \   10FA  5E000000          JSR     @?F_DIV_SWAP_L04
   \   10FE  6FF1000E          MOV.W   R1,@(14,SP)
   \   1102  6FF0000C          MOV.W   R0,@(12,SP)
    818              return(range - yy)/fspan ;
   \   1106  6F710006          MOV.W   @(6,SP),R1
   \   110A  6F700004          MOV.W   @(4,SP),R0
   \   110E  6F73000E          MOV.W   @(14,SP),R3
   \   1112  6F72000C          MOV.W   @(12,SP),R2
   \   1116  5E000000          JSR     @?F_SUB_L04
   \   111A  6F730002          MOV.W   @(2,SP),R3
   \   111E  6972              MOV.W   @SP,R2
   \   1120  5E000000          JSR     @?F_DIV_L04
    819          
    820          }
   \   1124  79020010          MOV.W   #16,R2
   \   1128  0927              ADD.W   R2,SP
   \   112A  6D76              POP     R6
   \   112C  6D75              POP     R5
   \   112E  6D74              POP     R4
   \   1130  5470              RTS
    821          
    822          /*************************************************************************
    823          *
    824          *  Calculate and filter temperature
    825          *
    826          *************************************************************************/
    827          void CalcTemp(signed char ch)
    828          {
   \   1132            CalcTemp:
   \   1132  6DF4              PUSH    R4
   \   1134  6DF6              PUSH    R6
   \   1136  7902000C          MOV.W   #12,R2
   \   113A  1927              SUB.W   R2,SP
   \   113C  0C9E              MOV.B   R1L,R6L
    829          
    830              float temp_data, resist, temp_resist ;
    831          
    832              resist = (float) raw_data[ch] ;
   \   113E  7779              BLD     #7,R1L
   \   1140  1E11              SUBX.B  R1H,R1H
   \   1142  0911              ADD.W   R1,R1
   \   1144  6F11025C          MOV.W   @(raw_data,R1),R1
   \   1148  7371              BTST    #7,R1H
   \   114A  4706              BEQ     $+8
   \   114C  7900FFFF          MOV.W   #-1,R0
   \   1150  4002              BRA     $+4
   \   1152  1900              SUB.W   R0,R0
   \   1154  5E000000          JSR     @?SL_TO_FLT_L04
   \   1158  6FF10002          MOV.W   R1,@(2,SP)
   \   115C  69F0              MOV.W   R0,@SP
    833              resist /= 10.0 ;
    834              if ( resist > 500.0 ) {                              /* Pt 1000 ?*/
   \   115E  6970              MOV.W   @SP,R0
   \   1160  6F710002          MOV.W   @(2,SP),R1
   \   1164  1933              SUB.W   R3,R3
   \   1166  79024120          MOV.W   #16672,R2
   \   116A  5E000000          JSR     @?F_DIV_L04
   \   116E  6FF10002          MOV.W   R1,@(2,SP)
   \   1172  69F0              MOV.W   R0,@SP
   \   1174  1933              SUB.W   R3,R3
   \   1176  790243FA          MOV.W   #17402,R2
   \   117A  5E000000          JSR     @?F_SUB_L04
   \   117E  0D00              MOV.W   R0,R0
   \   1180  4F16              BLE     ?0183
   \   1182            ?0182:
    835                  resist /= 10.0 ;                                /* Yes */
   \   1182  6970              MOV.W   @SP,R0
   \   1184  6F710002          MOV.W   @(2,SP),R1
   \   1188  1933              SUB.W   R3,R3
   \   118A  79024120          MOV.W   #16672,R2
   \   118E  5E000000          JSR     @?F_DIV_L04
   \   1192  6FF10002          MOV.W   R1,@(2,SP)
   \   1196  69F0              MOV.W   R0,@SP
   \   1198            ?0183:
    836              }
    837          
    838              temp_resist = resist - 100.0 ;
    839              temp_data = (temp_resist / 0.390802) +
    840                          ((temp_resist * temp_resist)/1000.0) ;
   \   1198  6F710002          MOV.W   @(2,SP),R1
   \   119C  6970              MOV.W   @SP,R0
   \   119E  1933              SUB.W   R3,R3
   \   11A0  7902C2C8          MOV.W   #-15672,R2
   \   11A4  5E000000          JSR     @?F_ADD_L04
   \   11A8  6FF10006          MOV.W   R1,@(6,SP)
   \   11AC  6FF00004          MOV.W   R0,@(4,SP)
   \   11B0  6F730006          MOV.W   @(6,SP),R3
   \   11B4  6F720004          MOV.W   @(4,SP),R2
   \   11B8  5E000000          JSR     @?F_MUL_L04
   \   11BC  1933              SUB.W   R3,R3
   \   11BE  7902447A          MOV.W   #17530,R2
   \   11C2  5E000000          JSR     @?F_DIV_L04
   \   11C6  6DF0              MOV.W   R0,@-SP
   \   11C8  6DF1              MOV.W   R1,@-SP
   \   11CA  6F71000A          MOV.W   @(10,SP),R1
   \   11CE  6F700008          MOV.W   @(8,SP),R0
   \   11D2  79031733          MOV.W   #5939,R3
   \   11D6  79023EC8          MOV.W   #16072,R2
   \   11DA  5E000000          JSR     @?F_DIV_L04
   \   11DE  6D73              MOV.W   @SP+,R3
   \   11E0  6D72              MOV.W   @SP+,R2
   \   11E2  5E000000          JSR     @?F_ADD_L04
   \   11E6  6FF1000A          MOV.W   R1,@(10,SP)
   \   11EA  6FF00008          MOV.W   R0,@(8,SP)
    841          
    842              temp_data -= (float) offset[ch] / 10.0 ;
   \   11EE  0CE9              MOV.B   R6L,R1L
   \   11F0  7779              BLD     #7,R1L
   \   11F2  1E11              SUBX.B  R1H,R1H
   \   11F4  0911              ADD.W   R1,R1
   \   11F6  6F1102F4          MOV.W   @(offset,R1),R1
   \   11FA  7371              BTST    #7,R1H
   \   11FC  4706              BEQ     $+8
   \   11FE  7900FFFF          MOV.W   #-1,R0
   \   1202  4002              BRA     $+4
   \   1204  1900              SUB.W   R0,R0
   \   1206  5E000000          JSR     @?SL_TO_FLT_L04
   \   120A  1933              SUB.W   R3,R3
   \   120C  79024120          MOV.W   #16672,R2
   \   1210  5E000000          JSR     @?F_DIV_L04
   \   1214  6DF0              MOV.W   R0,@-SP
   \   1216  6DF1              MOV.W   R1,@-SP
   \   1218  6F70000C          MOV.W   @(12,SP),R0
   \   121C  6F71000E          MOV.W   @(14,SP),R1
   \   1220  6D73              MOV.W   @SP+,R3
   \   1222  6D72              MOV.W   @SP+,R2
   \   1224  5E000000          JSR     @?F_SUB_L04
   \   1228  6FF1000A          MOV.W   R1,@(10,SP)
   \   122C  6FF00008          MOV.W   R0,@(8,SP)
    843              temp_data *= gain[ch] ;
   \   1230  0CE9              MOV.B   R6L,R1L
   \   1232  7779              BLD     #7,R1L
   \   1234  1E11              SUBX.B  R1H,R1H
   \   1236  0911              ADD.W   R1,R1
   \   1238  0911              ADD.W   R1,R1
   \   123A  6DF1              MOV.W   R1,@-SP
   \   123C  6F70000A          MOV.W   @(10,SP),R0
   \   1240  6F71000C          MOV.W   @(12,SP),R1
   \   1244  6D73              MOV.W   @SP+,R3
   \   1246  0D32              MOV.W   R3,R2
   \   1248  6F2302BE          MOV.W   @(gain+2,R2),R3
   \   124C  6F2202BC          MOV.W   @(gain,R2),R2
   \   1250  5E000000          JSR     @?F_MUL_L04
   \   1254  6FF1000A          MOV.W   R1,@(10,SP)
   \   1258  6FF00008          MOV.W   R0,@(8,SP)
    844              mes_data[ch] += (temp_data - mes_data[ch])/ ((float)t_filter + 1.0) ;
   \   125C  0CE9              MOV.B   R6L,R1L
   \   125E  7779              BLD     #7,R1L
   \   1260  1E11              SUBX.B  R1H,R1H
   \   1262  0911              ADD.W   R1,R1
   \   1264  0911              ADD.W   R1,R1
   \   1266  6F10027A          MOV.W   @(mes_data+2,R1),R0
   \   126A  6F110278          MOV.W   @(mes_data,R1),R1
   \   126E  0D11              MOV.W   R1,R1
   \   1270  4702              BEQ     $+4
   \   1272  7171              BNOT    #7,R1H
   \   1274  6DF1              MOV.W   R1,@-SP
   \   1276  0D01              MOV.W   R0,R1
   \   1278  6D70              MOV.W   @SP+,R0
   \   127A  6F73000A          MOV.W   @(10,SP),R3
   \   127E  6F720008          MOV.W   @(8,SP),R2
   \   1282  5E000000          JSR     @?F_ADD_L04
   \   1286  6DF1              MOV.W   R1,@-SP
   \   1288  6A090338          MOV.B   @t_filter:16,R1L
   \   128C  6DF0              MOV.W   R0,@-SP
   \   128E  F100              MOV.B   #0,R1H
   \   1290  1900              SUB.W   R0,R0
   \   1292  5E000000          JSR     @?UL_TO_FLT_L04
   \   1296  1933              SUB.W   R3,R3
   \   1298  79023F80          MOV.W   #16256,R2
   \   129C  5E000000          JSR     @?F_ADD_L04
   \   12A0  6F730002          MOV.W   @(2,SP),R3
   \   12A4  6972              MOV.W   @SP,R2
   \   12A6  6FF20002          MOV.W   R2,@(2,SP)
   \   12AA  0B87              ADDS.W  #2,SP
   \   12AC  6D72              MOV.W   @SP+,R2
   \   12AE  5E000000          JSR     @?F_DIV_SWAP_L04
   \   12B2  0CEB              MOV.B   R6L,R3L
   \   12B4  777B              BLD     #7,R3L
   \   12B6  1E33              SUBX.B  R3H,R3H
   \   12B8  0933              ADD.W   R3,R3
   \   12BA  0933              ADD.W   R3,R3
   \   12BC  6DF0              MOV.W   R0,@-SP
   \   12BE  6DF1              MOV.W   R1,@-SP
   \   12C0  6F300278          MOV.W   @(mes_data,R3),R0
   \   12C4  6F31027A          MOV.W   @(mes_data+2,R3),R1
   \   12C8  6DF3              MOV.W   R3,@-SP
   \   12CA  6F730002          MOV.W   @(2,SP),R3
   \   12CE  6972              MOV.W   @SP,R2
   \   12D0  6FF20002          MOV.W   R2,@(2,SP)
   \   12D4  0B87              ADDS.W  #2,SP
   \   12D6  6F720002          MOV.W   @(2,SP),R2
   \   12DA  6974              MOV.W   @SP,R4
   \   12DC  6FF40002          MOV.W   R4,@(2,SP)
   \   12E0  0B87              ADDS.W  #2,SP
   \   12E2  5E000000          JSR     @?F_ADD_L04
   \   12E6  6D73              MOV.W   @SP+,R3
   \   12E8  6FB1027A          MOV.W   R1,@(mes_data+2,R3)
   \   12EC  6FB00278          MOV.W   R0,@(mes_data,R3)
    845          }
   \   12F0  7902000C          MOV.W   #12,R2
   \   12F4  0927              ADD.W   R2,SP
   \   12F6  6D76              POP     R6
   \   12F8  6D74              POP     R4
   \   12FA  5470              RTS
    846          
    847          /*************************************************************************
    848          *
    849          *  Calculate and filter "other"
    850          *
    851          *************************************************************************/
    852          void CalcOther(signed char ch)
    853          {
   \   12FC            CalcOther:
   \   12FC  6DF4              PUSH    R4
   \   12FE  6DF6              PUSH    R6
   \   1300  1B87              SUBS.W  #2,SP
   \   1302  1B87              SUBS.W  #2,SP
   \   1304  0C9E              MOV.B   R1L,R6L
    854          
    855              float temp_data ;
    856          
    857              temp_data = (float)(raw_data[ch]) * 2.5 / 32767.0 ;
   \   1306  7779              BLD     #7,R1L
   \   1308  1E11              SUBX.B  R1H,R1H
   \   130A  0911              ADD.W   R1,R1
   \   130C  6F11025C          MOV.W   @(raw_data,R1),R1
   \   1310  7371              BTST    #7,R1H
   \   1312  4706              BEQ     $+8
   \   1314  7900FFFF          MOV.W   #-1,R0
   \   1318  4002              BRA     $+4
   \   131A  1900              SUB.W   R0,R0
   \   131C  5E000000          JSR     @?SL_TO_FLT_L04
   \   1320  1933              SUB.W   R3,R3
   \   1322  79024020          MOV.W   #16416,R2
   \   1326  5E000000          JSR     @?F_MUL_L04
   \   132A  7903FE00          MOV.W   #-512,R3
   \   132E  790246FF          MOV.W   #18175,R2
   \   1332  5E000000          JSR     @?F_DIV_L04
   \   1336  6FF10002          MOV.W   R1,@(2,SP)
   \   133A  69F0              MOV.W   R0,@SP
    858              /*input * 2.5 volt / +-15 bit*/
    859              temp_data -= (float) offset[ch]/ 10000.0 ;
   \   133C  0CE9              MOV.B   R6L,R1L
   \   133E  7779              BLD     #7,R1L
   \   1340  1E11              SUBX.B  R1H,R1H
   \   1342  0911              ADD.W   R1,R1
   \   1344  6F1102F4          MOV.W   @(offset,R1),R1
   \   1348  7371              BTST    #7,R1H
   \   134A  4706              BEQ     $+8
   \   134C  7900FFFF          MOV.W   #-1,R0
   \   1350  4002              BRA     $+4
   \   1352  1900              SUB.W   R0,R0
   \   1354  5E000000          JSR     @?SL_TO_FLT_L04
   \   1358  79034000          MOV.W   #16384,R3
   \   135C  7902461C          MOV.W   #17948,R2
   \   1360  5E000000          JSR     @?F_DIV_L04
   \   1364  6DF0              MOV.W   R0,@-SP
   \   1366  6DF1              MOV.W   R1,@-SP
   \   1368  6F700004          MOV.W   @(4,SP),R0
   \   136C  6F710006          MOV.W   @(6,SP),R1
   \   1370  6D73              MOV.W   @SP+,R3
   \   1372  6D72              MOV.W   @SP+,R2
   \   1374  5E000000          JSR     @?F_SUB_L04
   \   1378  6FF10002          MOV.W   R1,@(2,SP)
   \   137C  69F0              MOV.W   R0,@SP
    860              temp_data *= gain[ch] ;
   \   137E  0CE9              MOV.B   R6L,R1L
   \   1380  7779              BLD     #7,R1L
   \   1382  1E11              SUBX.B  R1H,R1H
   \   1384  0911              ADD.W   R1,R1
   \   1386  0911              ADD.W   R1,R1
   \   1388  6DF1              MOV.W   R1,@-SP
   \   138A  6F700002          MOV.W   @(2,SP),R0
   \   138E  6F710004          MOV.W   @(4,SP),R1
   \   1392  6D73              MOV.W   @SP+,R3
   \   1394  0D32              MOV.W   R3,R2
   \   1396  6F2302BE          MOV.W   @(gain+2,R2),R3
   \   139A  6F2202BC          MOV.W   @(gain,R2),R2
   \   139E  5E000000          JSR     @?F_MUL_L04
   \   13A2  6FF10002          MOV.W   R1,@(2,SP)
   \   13A6  69F0              MOV.W   R0,@SP
    861              mes_data[ch] += (temp_data - mes_data[ch])/ ((float)o_filter + 1.0) ;
   \   13A8  0CE9              MOV.B   R6L,R1L
   \   13AA  7779              BLD     #7,R1L
   \   13AC  1E11              SUBX.B  R1H,R1H
   \   13AE  0911              ADD.W   R1,R1
   \   13B0  0911              ADD.W   R1,R1
   \   13B2  6F10027A          MOV.W   @(mes_data+2,R1),R0
   \   13B6  6F110278          MOV.W   @(mes_data,R1),R1
   \   13BA  0D11              MOV.W   R1,R1
   \   13BC  4702              BEQ     $+4
   \   13BE  7171              BNOT    #7,R1H
   \   13C0  6DF1              MOV.W   R1,@-SP
   \   13C2  0D01              MOV.W   R0,R1
   \   13C4  6D70              MOV.W   @SP+,R0
   \   13C6  6F730002          MOV.W   @(2,SP),R3
   \   13CA  6972              MOV.W   @SP,R2
   \   13CC  5E000000          JSR     @?F_ADD_L04
   \   13D0  6DF1              MOV.W   R1,@-SP
   \   13D2  6A090339          MOV.B   @o_filter:16,R1L
   \   13D6  6DF0              MOV.W   R0,@-SP
   \   13D8  F100              MOV.B   #0,R1H
   \   13DA  1900              SUB.W   R0,R0
   \   13DC  5E000000          JSR     @?UL_TO_FLT_L04
   \   13E0  1933              SUB.W   R3,R3
   \   13E2  79023F80          MOV.W   #16256,R2
   \   13E6  5E000000          JSR     @?F_ADD_L04
   \   13EA  6F730002          MOV.W   @(2,SP),R3
   \   13EE  6972              MOV.W   @SP,R2
   \   13F0  6FF20002          MOV.W   R2,@(2,SP)
   \   13F4  0B87              ADDS.W  #2,SP
   \   13F6  6D72              MOV.W   @SP+,R2
   \   13F8  5E000000          JSR     @?F_DIV_SWAP_L04
   \   13FC  0CEB              MOV.B   R6L,R3L
   \   13FE  777B              BLD     #7,R3L
   \   1400  1E33              SUBX.B  R3H,R3H
   \   1402  0933              ADD.W   R3,R3
   \   1404  0933              ADD.W   R3,R3
   \   1406  6DF0              MOV.W   R0,@-SP
   \   1408  6DF1              MOV.W   R1,@-SP
   \   140A  6F300278          MOV.W   @(mes_data,R3),R0
   \   140E  6F31027A          MOV.W   @(mes_data+2,R3),R1
   \   1412  6DF3              MOV.W   R3,@-SP
   \   1414  6F730002          MOV.W   @(2,SP),R3
   \   1418  6972              MOV.W   @SP,R2
   \   141A  6FF20002          MOV.W   R2,@(2,SP)
   \   141E  0B87              ADDS.W  #2,SP
   \   1420  6F720002          MOV.W   @(2,SP),R2
   \   1424  6974              MOV.W   @SP,R4
   \   1426  6FF40002          MOV.W   R4,@(2,SP)
   \   142A  0B87              ADDS.W  #2,SP
   \   142C  5E000000          JSR     @?F_ADD_L04
   \   1430  6D73              MOV.W   @SP+,R3
   \   1432  6FB1027A          MOV.W   R1,@(mes_data+2,R3)
   \   1436  6FB00278          MOV.W   R0,@(mes_data,R3)
    862          
    863          }
   \   143A  0B87              ADDS.W  #2,SP
   \   143C  0B87              ADDS.W  #2,SP
   \   143E  6D76              POP     R6
   \   1440  6D74              POP     R4
   \   1442  5470              RTS
    864          
    865          /*************************************************************************
    866          *
    867          *  Unpack sensor data
    868          *
    869          *************************************************************************/
    870          void UnpackSensData(signed char ch)
    871          {
   \   1444            UnpackSensData:
   \   1444  6DF4              PUSH    R4
   \   1446  6DF5              PUSH    R5
   \   1448  6DF6              PUSH    R6
   \   144A  7902000C          MOV.W   #12,R2
   \   144E  1927              SUB.W   R2,SP
   \   1450  0C96              MOV.B   R1L,R6H
    872          
    873              short knst, d_knst, g1, g2, g3 ;
    874              float temp_data ;
    875              unsigned char  temp_byte ;
    876              signed char c_ch ;
    877          
    878              temp_byte = FindTemp(ch);
    879              if ( temp_byte >= NOIOCH ) {                 /* no temp. found */
   \   1452  0C69              MOV.B   R6H,R1L
   \   1454  5E001E1A          JSR     @FindTemp:16
   \   1458  6EF90006          MOV.B   R1L,@(6,SP)
   \   145C  A90E              CMP.B   #14,R1L
   \   145E  450E              BCS     ?0185
   \   1460            ?0184:
    880                  temp_data = 0 ;                                 /* 25. 0 - 25.0  */
   \   1460  1911              SUB.W   R1,R1
   \   1462  1900              SUB.W   R0,R0
   \   1464  6FF1000A          MOV.W   R1,@(10,SP)
   \   1468  6FF00008          MOV.W   R0,@(8,SP)
    881              } else {
   \   146C  4024              BRA     ?0186
   \   146E            ?0185:
    882                  temp_data = mes_data[temp_byte] - 25.0 ;
   \   146E  F904              MOV.B   #4,R1L
   \   1470  6E7B0006          MOV.B   @(6,SP),R3L
   \   1474  50B1              MULXU   R3L,R1
   \   1476  0D10              MOV.W   R1,R0
   \   1478  6F01027A          MOV.W   @(mes_data+2,R0),R1
   \   147C  6F000278          MOV.W   @(mes_data,R0),R0
   \   1480  1933              SUB.W   R3,R3
   \   1482  7902C1C8          MOV.W   #-15928,R2
   \   1486  5E000000          JSR     @?F_ADD_L04
   \   148A  6FF1000A          MOV.W   R1,@(10,SP)
   \   148E  6FF00008          MOV.W   R0,@(8,SP)
   \   1492            ?0186:
    883              }
    884              temp_data /= 100.0 ;              /* use 1/100 deg C in calc. */
   \   1492  6F700008          MOV.W   @(8,SP),R0
   \   1496  6F71000A          MOV.W   @(10,SP),R1
   \   149A  1933              SUB.W   R3,R3
   \   149C  790242C8          MOV.W   #17096,R2
   \   14A0  5E000000          JSR     @?F_DIV_L04
   \   14A4  6FF1000A          MOV.W   R1,@(10,SP)
   \   14A8  6FF00008          MOV.W   R0,@(8,SP)
    885          
    886              c_ch = ch >>1 ;                         /* start calculate data for 0 % FRO */
    887              if ( (eep_type[c_ch] & 0x01) || (eep_type[c_ch] & 0x10) ) { /* OK data */
   \   14AC  0C69              MOV.B   R6H,R1L
   \   14AE  1189              SHAR.B  R1L
   \   14B0  0C9E              MOV.B   R1L,R6L
   \   14B2  7779              BLD     #7,R1L
   \   14B4  1E11              SUBX.B  R1H,R1H
   \   14B6  6E1B032F          MOV.B   @(eep_type,R1),R3L
   \   14BA  EB01              AND.B   #1,R3L
   \   14BC  4612              BNE     ?0187
   \   14BE  0CE9              MOV.B   R6L,R1L
   \   14C0  7779              BLD     #7,R1L
   \   14C2  1E11              SUBX.B  R1H,R1H
   \   14C4  6E1B032F          MOV.B   @(eep_type,R1),R3L
   \   14C8  EB10              AND.B   #16,R3L
   \   14CA  4604              BNE     $+6
   \   14CC  5A001C4A          JMP     @?0188:16
   \   14D0            ?0189:
   \   14D0            ?0190:
   \   14D0            ?0187:
    888                  knst =  ((short) packed_data[c_ch][8] +
    889                           packed_data[c_ch][9] * 256) & 0x1fff ;
    890          
    891                  if ( knst & 0x1000 ) {                /* negative */
   \   14D0  0CE9              MOV.B   R6L,R1L
   \   14D2  7779              BLD     #7,R1L
   \   14D4  1E11              SUBX.B  R1H,R1H
   \   14D6  79030028          MOV.W   #40,R3
   \   14DA  5E000000          JSR     @?SS_MUL_L02
   \   14DE  6E1B00FD          MOV.B   @(packed_data+9,R1),R3L
   \   14E2  F300              MOV.B   #0,R3H
   \   14E4  0CB3              MOV.B   R3L,R3H
   \   14E6  FB00              MOV.B   #0,R3L
   \   14E8  0CE9              MOV.B   R6L,R1L
   \   14EA  7779              BLD     #7,R1L
   \   14EC  1E11              SUBX.B  R1H,R1H
   \   14EE  6DF3              MOV.W   R3,@-SP
   \   14F0  79030028          MOV.W   #40,R3
   \   14F4  5E000000          JSR     @?SS_MUL_L02
   \   14F8  6D73              MOV.W   @SP+,R3
   \   14FA  6E1800FC          MOV.B   @(packed_data+8,R1),R0L
   \   14FE  088B              ADD.B   R0L,R3L
   \   1500  9300              ADDX.B  #0,R3H
   \   1502  E31F              AND.B   #31,R3H
   \   1504  6FF30002          MOV.W   R3,@(2,SP)
   \   1508  E310              AND.B   #16,R3H
   \   150A  470A              BEQ     ?0192
   \   150C            ?0191:
    892                      knst |= 0xe000 ;
   \   150C  6F710002          MOV.W   @(2,SP),R1
   \   1510  C1E0              OR.B    #224,R1H
   \   1512  6FF10002          MOV.W   R1,@(2,SP)
   \   1516            ?0192:
    893                  }
    894                  g1 =  ((short) ((packed_data[c_ch][9] >> 5) & 0x07) +
    895                         (packed_data[c_ch][10] * 8) +
    896                         ((packed_data[c_ch][11] & 0x03) * 2048)) & 0x1fff ;
    897                  if ( g1 & 0x1000 ) {                /* negative */
   \   1516  0CE9              MOV.B   R6L,R1L
   \   1518  7779              BLD     #7,R1L
   \   151A  1E11              SUBX.B  R1H,R1H
   \   151C  79030028          MOV.W   #40,R3
   \   1520  5E000000          JSR     @?SS_MUL_L02
   \   1524  6E1B00FF          MOV.B   @(packed_data+11,R1),R3L
   \   1528  EB03              AND.B   #3,R3L
   \   152A  F300              MOV.B   #0,R3H
   \   152C  F90B              MOV.B   #11,R1L
   \   152E  0933              ADD.W   R3,R3
   \   1530  1A09              DEC.B   R1L
   \   1532  46FA              BNE     $-4
   \   1534  0CE9              MOV.B   R6L,R1L
   \   1536  7779              BLD     #7,R1L
   \   1538  1E11              SUBX.B  R1H,R1H
   \   153A  6DF3              MOV.W   R3,@-SP
   \   153C  79030028          MOV.W   #40,R3
   \   1540  5E000000          JSR     @?SS_MUL_L02
   \   1544  FB08              MOV.B   #8,R3L
   \   1546  6E1800FE          MOV.B   @(packed_data+10,R1),R0L
   \   154A  5083              MULXU   R0L,R3
   \   154C  6D71              MOV.W   @SP+,R1
   \   154E  0913              ADD.W   R1,R3
   \   1550  0CE9              MOV.B   R6L,R1L
   \   1552  7779              BLD     #7,R1L
   \   1554  1E11              SUBX.B  R1H,R1H
   \   1556  6DF3              MOV.W   R3,@-SP
   \   1558  79030028          MOV.W   #40,R3
   \   155C  5E000000          JSR     @?SS_MUL_L02
   \   1560  6E1B00FD          MOV.B   @(packed_data+9,R1),R3L
   \   1564  128B              ROTL.B  R3L
   \   1566  128B              ROTL.B  R3L
   \   1568  128B              ROTL.B  R3L
   \   156A  EB07              AND.B   #7,R3L
   \   156C  EB07              AND.B   #7,R3L
   \   156E  6D71              MOV.W   @SP+,R1
   \   1570  08B9              ADD.B   R3L,R1L
   \   1572  9100              ADDX.B  #0,R1H
   \   1574  E11F              AND.B   #31,R1H
   \   1576  69F1              MOV.W   R1,@SP
   \   1578  E110              AND.B   #16,R1H
   \   157A  4706              BEQ     ?0194
   \   157C            ?0193:
    898                      g1 |= 0xe000 ;
   \   157C  6971              MOV.W   @SP,R1
   \   157E  C1E0              OR.B    #224,R1H
   \   1580  69F1              MOV.W   R1,@SP
   \   1582            ?0194:
    899                  }
    900                  g2 =  ((short) ((packed_data[c_ch][11] >> 2) & 0x3f) +
    901                         ((packed_data[c_ch][12] & 0x7f)* 64 )) & 0x1fff ;
    902                  if ( g2 & 0x1000 ) {                /* negative */
   \   1582  0CE9              MOV.B   R6L,R1L
   \   1584  7779              BLD     #7,R1L
   \   1586  1E11              SUBX.B  R1H,R1H
   \   1588  79030028          MOV.W   #40,R3
   \   158C  5E000000          JSR     @?SS_MUL_L02
   \   1590  6E1B0100          MOV.B   @(packed_data+12,R1),R3L
   \   1594  EB7F              AND.B   #127,R3L
   \   1596  F940              MOV.B   #64,R1L
   \   1598  50B1              MULXU   R3L,R1
   \   159A  0CEB              MOV.B   R6L,R3L
   \   159C  777B              BLD     #7,R3L
   \   159E  1E33              SUBX.B  R3H,R3H
   \   15A0  6DF1              MOV.W   R1,@-SP
   \   15A2  0D31              MOV.W   R3,R1
   \   15A4  79030028          MOV.W   #40,R3
   \   15A8  5E000000          JSR     @?SS_MUL_L02
   \   15AC  6E1B00FF          MOV.B   @(packed_data+11,R1),R3L
   \   15B0  110B              SHLR.B  R3L
   \   15B2  110B              SHLR.B  R3L
   \   15B4  EB3F              AND.B   #63,R3L
   \   15B6  6D71              MOV.W   @SP+,R1
   \   15B8  08B9              ADD.B   R3L,R1L
   \   15BA  9100              ADDX.B  #0,R1H
   \   15BC  E11F              AND.B   #31,R1H
   \   15BE  0D14              MOV.W   R1,R4
   \   15C0  E110              AND.B   #16,R1H
   \   15C2  4702              BEQ     ?0196
   \   15C4            ?0195:
    903                      g2 |= 0xe000 ;
   \   15C4  C4E0              OR.B    #224,R4H
   \   15C6            ?0196:
    904                  }
    905                  g3 =  ((short) ((packed_data[c_ch][12] >> 7) & 0x01) +
    906                         (packed_data[c_ch][13] * 2) +
    907                         ((packed_data[c_ch][14] & 0x0f) * 512)) & 0x1fff ;
    908                  if ( g3 & 0x1000 ) {                /* negative */
   \   15C6  0CE9              MOV.B   R6L,R1L
   \   15C8  7779              BLD     #7,R1L
   \   15CA  1E11              SUBX.B  R1H,R1H
   \   15CC  79030028          MOV.W   #40,R3
   \   15D0  5E000000          JSR     @?SS_MUL_L02
   \   15D4  6E1B0102          MOV.B   @(packed_data+14,R1),R3L
   \   15D8  EB0F              AND.B   #15,R3L
   \   15DA  F300              MOV.B   #0,R3H
   \   15DC  0CB3              MOV.B   R3L,R3H
   \   15DE  FB00              MOV.B   #0,R3L
   \   15E0  1003              SHLL.B  R3H
   \   15E2  0CE9              MOV.B   R6L,R1L
   \   15E4  7779              BLD     #7,R1L
   \   15E6  1E11              SUBX.B  R1H,R1H
   \   15E8  6DF3              MOV.W   R3,@-SP
   \   15EA  79030028          MOV.W   #40,R3
   \   15EE  5E000000          JSR     @?SS_MUL_L02
   \   15F2  6E1B0101          MOV.B   @(packed_data+13,R1),R3L
   \   15F6  F300              MOV.B   #0,R3H
   \   15F8  0933              ADD.W   R3,R3
   \   15FA  6D71              MOV.W   @SP+,R1
   \   15FC  0913              ADD.W   R1,R3
   \   15FE  0CE9              MOV.B   R6L,R1L
   \   1600  7779              BLD     #7,R1L
   \   1602  1E11              SUBX.B  R1H,R1H
   \   1604  6DF3              MOV.W   R3,@-SP
   \   1606  79030028          MOV.W   #40,R3
   \   160A  5E000000          JSR     @?SS_MUL_L02
   \   160E  6E1B0100          MOV.B   @(packed_data+12,R1),R3L
   \   1612  128B              ROTL.B  R3L
   \   1614  EB01              AND.B   #1,R3L
   \   1616  EB01              AND.B   #1,R3L
   \   1618  6D71              MOV.W   @SP+,R1
   \   161A  08B9              ADD.B   R3L,R1L
   \   161C  9100              ADDX.B  #0,R1H
   \   161E  E11F              AND.B   #31,R1H
   \   1620  0D15              MOV.W   R1,R5
   \   1622  E110              AND.B   #16,R1H
   \   1624  4702              BEQ     ?0198
   \   1626            ?0197:
    909                      g3 |= 0xe000 ;
   \   1626  C5E0              OR.B    #224,R5H
   \   1628            ?0198:
    910                  }
    911                  sens_data[0] = CalcSensData(knst*2, g1*2, g2*2, g3*2, temp_data) ;
   \   1628  6F71000A          MOV.W   @(10,SP),R1
   \   162C  6F700008          MOV.W   @(8,SP),R0
   \   1630  6DF1              MOV.W   R1,@-SP
   \   1632  6DF0              MOV.W   R0,@-SP
   \   1634  0D51              MOV.W   R5,R1
   \   1636  0911              ADD.W   R1,R1
   \   1638  6DF1              MOV.W   R1,@-SP
   \   163A  0D41              MOV.W   R4,R1
   \   163C  0911              ADD.W   R1,R1
   \   163E  6DF1              MOV.W   R1,@-SP
   \   1640  6F710008          MOV.W   @(8,SP),R1
   \   1644  0911              ADD.W   R1,R1
   \   1646  6DF1              MOV.W   R1,@-SP
   \   1648  6F71000C          MOV.W   @(12,SP),R1
   \   164C  0911              ADD.W   R1,R1
   \   164E  5E001D24          JSR     @CalcSensData:16
   \   1652  7902000A          MOV.W   #10,R2
   \   1656  0927              ADD.W   R2,SP
   \   1658  6B8100EA          MOV.W   R1,@sens_data:16
    912                  /* sens value 0%FRO @ temp */
    913          
    914                  /* start calculate data for 40 % FRO */
    915                  d_knst =  ((short) ((packed_data[c_ch][14] >> 4) & 0x0f) +
    916                             (packed_data[c_ch][15] * 16) +
    917                             ((packed_data[c_ch][16] & 0x01) * 4096))& 0x1fff ;
   \   165C  0CE9              MOV.B   R6L,R1L
   \   165E  7779              BLD     #7,R1L
   \   1660  1E11              SUBX.B  R1H,R1H
   \   1662  79030028          MOV.W   #40,R3
   \   1666  5E000000          JSR     @?SS_MUL_L02
   \   166A  6E1B0104          MOV.B   @(packed_data+16,R1),R3L
   \   166E  EB01              AND.B   #1,R3L
   \   1670  F300              MOV.B   #0,R3H
   \   1672  F90C              MOV.B   #12,R1L
   \   1674  0933              ADD.W   R3,R3
   \   1676  1A09              DEC.B   R1L
   \   1678  46FA              BNE     $-4
   \   167A  0CE9              MOV.B   R6L,R1L
   \   167C  7779              BLD     #7,R1L
   \   167E  1E11              SUBX.B  R1H,R1H
   \   1680  6DF3              MOV.W   R3,@-SP
   \   1682  79030028          MOV.W   #40,R3
   \   1686  5E000000          JSR     @?SS_MUL_L02
   \   168A  FB10              MOV.B   #16,R3L
   \   168C  6E180103          MOV.B   @(packed_data+15,R1),R0L
   \   1690  5083              MULXU   R0L,R3
   \   1692  6D71              MOV.W   @SP+,R1
   \   1694  0913              ADD.W   R1,R3
   \   1696  0CE9              MOV.B   R6L,R1L
   \   1698  7779              BLD     #7,R1L
   \   169A  1E11              SUBX.B  R1H,R1H
   \   169C  6DF3              MOV.W   R3,@-SP
   \   169E  79030028          MOV.W   #40,R3
   \   16A2  5E000000          JSR     @?SS_MUL_L02
   \   16A6  6E1B0102          MOV.B   @(packed_data+14,R1),R3L
   \   16AA  110B              SHLR.B  R3L
   \   16AC  110B              SHLR.B  R3L
   \   16AE  110B              SHLR.B  R3L
   \   16B0  110B              SHLR.B  R3L
   \   16B2  EB0F              AND.B   #15,R3L
   \   16B4  6D71              MOV.W   @SP+,R1
   \   16B6  08B9              ADD.B   R3L,R1L
   \   16B8  9100              ADDX.B  #0,R1H
   \   16BA  E11F              AND.B   #31,R1H
   \   16BC  6FF10004          MOV.W   R1,@(4,SP)
    918          
    919                  g1 =  ((short) ((packed_data[c_ch][16] >> 1) & 0x7f) +
    920                         ((packed_data[c_ch][17] & 0x3f) * 128)) & 0x1fff ;
    921                  if ( g1 & 0x1000 ) {                /* negative */
   \   16C0  0CE9              MOV.B   R6L,R1L
   \   16C2  7779              BLD     #7,R1L
   \   16C4  1E11              SUBX.B  R1H,R1H
   \   16C6  79030028          MOV.W   #40,R3
   \   16CA  5E000000          JSR     @?SS_MUL_L02
   \   16CE  6E1B0105          MOV.B   @(packed_data+17,R1),R3L
   \   16D2  EB3F              AND.B   #63,R3L
   \   16D4  F980              MOV.B   #128,R1L
   \   16D6  50B1              MULXU   R3L,R1
   \   16D8  0CEB              MOV.B   R6L,R3L
   \   16DA  777B              BLD     #7,R3L
   \   16DC  1E33              SUBX.B  R3H,R3H
   \   16DE  6DF1              MOV.W   R1,@-SP
   \   16E0  0D31              MOV.W   R3,R1
   \   16E2  79030028          MOV.W   #40,R3
   \   16E6  5E000000          JSR     @?SS_MUL_L02
   \   16EA  6E1B0104          MOV.B   @(packed_data+16,R1),R3L
   \   16EE  110B              SHLR.B  R3L
   \   16F0  EB7F              AND.B   #127,R3L
   \   16F2  6D71              MOV.W   @SP+,R1
   \   16F4  08B9              ADD.B   R3L,R1L
   \   16F6  9100              ADDX.B  #0,R1H
   \   16F8  E11F              AND.B   #31,R1H
   \   16FA  69F1              MOV.W   R1,@SP
   \   16FC  E110              AND.B   #16,R1H
   \   16FE  4706              BEQ     ?0200
   \   1700            ?0199:
    922                      g1 |= 0xe000 ;
   \   1700  6971              MOV.W   @SP,R1
   \   1702  C1E0              OR.B    #224,R1H
   \   1704  69F1              MOV.W   R1,@SP
   \   1706            ?0200:
    923                  }
    924                  g2 =  ((short) ((packed_data[c_ch][17] >> 6) & 0x03) +
    925                         (packed_data[c_ch][18] * 4) +
    926                         ((packed_data[c_ch][19]& 0x07) * 1024)) & 0x1fff ;
    927                  if ( g2 & 0x1000 ) {                /* negative */
   \   1706  0CE9              MOV.B   R6L,R1L
   \   1708  7779              BLD     #7,R1L
   \   170A  1E11              SUBX.B  R1H,R1H
   \   170C  79030028          MOV.W   #40,R3
   \   1710  5E000000          JSR     @?SS_MUL_L02
   \   1714  6E1B0107          MOV.B   @(packed_data+19,R1),R3L
   \   1718  EB07              AND.B   #7,R3L
   \   171A  F300              MOV.B   #0,R3H
   \   171C  0CB3              MOV.B   R3L,R3H
   \   171E  FB00              MOV.B   #0,R3L
   \   1720  1003              SHLL.B  R3H
   \   1722  1003              SHLL.B  R3H
   \   1724  0CE9              MOV.B   R6L,R1L
   \   1726  7779              BLD     #7,R1L
   \   1728  1E11              SUBX.B  R1H,R1H
   \   172A  6DF3              MOV.W   R3,@-SP
   \   172C  79030028          MOV.W   #40,R3
   \   1730  5E000000          JSR     @?SS_MUL_L02
   \   1734  FB04              MOV.B   #4,R3L
   \   1736  6E180106          MOV.B   @(packed_data+18,R1),R0L
   \   173A  5083              MULXU   R0L,R3
   \   173C  6D71              MOV.W   @SP+,R1
   \   173E  0913              ADD.W   R1,R3
   \   1740  0CE9              MOV.B   R6L,R1L
   \   1742  7779              BLD     #7,R1L
   \   1744  1E11              SUBX.B  R1H,R1H
   \   1746  6DF3              MOV.W   R3,@-SP
   \   1748  79030028          MOV.W   #40,R3
   \   174C  5E000000          JSR     @?SS_MUL_L02
   \   1750  6E1B0105          MOV.B   @(packed_data+17,R1),R3L
   \   1754  128B              ROTL.B  R3L
   \   1756  128B              ROTL.B  R3L
   \   1758  EB03              AND.B   #3,R3L
   \   175A  EB03              AND.B   #3,R3L
   \   175C  6D71              MOV.W   @SP+,R1
   \   175E  08B9              ADD.B   R3L,R1L
   \   1760  9100              ADDX.B  #0,R1H
   \   1762  E11F              AND.B   #31,R1H
   \   1764  0D14              MOV.W   R1,R4
   \   1766  E110              AND.B   #16,R1H
   \   1768  4702              BEQ     ?0202
   \   176A            ?0201:
    928                      g2 |= 0xe000 ;
   \   176A  C4E0              OR.B    #224,R4H
   \   176C            ?0202:
    929                  }
    930                  g3 =  ((short) ((packed_data[c_ch][19] >> 3) & 0x1f) +
    931                         (packed_data[c_ch][20] * 32)) & 0x1fff ;
    932                  if ( g3 & 0x1000 ) {                /* negative */
   \   176C  0CE9              MOV.B   R6L,R1L
   \   176E  7779              BLD     #7,R1L
   \   1770  1E11              SUBX.B  R1H,R1H
   \   1772  79030028          MOV.W   #40,R3
   \   1776  5E000000          JSR     @?SS_MUL_L02
   \   177A  FB20              MOV.B   #32,R3L
   \   177C  6E180108          MOV.B   @(packed_data+20,R1),R0L
   \   1780  5083              MULXU   R0L,R3
   \   1782  0CE9              MOV.B   R6L,R1L
   \   1784  7779              BLD     #7,R1L
   \   1786  1E11              SUBX.B  R1H,R1H
   \   1788  6DF3              MOV.W   R3,@-SP
   \   178A  79030028          MOV.W   #40,R3
   \   178E  5E000000          JSR     @?SS_MUL_L02
   \   1792  6E1B0107          MOV.B   @(packed_data+19,R1),R3L
   \   1796  110B              SHLR.B  R3L
   \   1798  110B              SHLR.B  R3L
   \   179A  110B              SHLR.B  R3L
   \   179C  EB1F              AND.B   #31,R3L
   \   179E  6D71              MOV.W   @SP+,R1
   \   17A0  08B9              ADD.B   R3L,R1L
   \   17A2  9100              ADDX.B  #0,R1H
   \   17A4  E11F              AND.B   #31,R1H
   \   17A6  0D15              MOV.W   R1,R5
   \   17A8  E110              AND.B   #16,R1H
   \   17AA  4702              BEQ     ?0204
   \   17AC            ?0203:
    933                      g3 |= 0xe000 ;
   \   17AC  C5E0              OR.B    #224,R5H
   \   17AE            ?0204:
    934                  }
    935                  knst += d_knst;                                 /* remember new value */
   \   17AE  6F710004          MOV.W   @(4,SP),R1
   \   17B2  6F730002          MOV.W   @(2,SP),R3
   \   17B6  0913              ADD.W   R1,R3
   \   17B8  6FF30002          MOV.W   R3,@(2,SP)
    936                  sens_data[1] = CalcSensData(knst*2, g1*2, g2*2, g3*2, temp_data) ;
   \   17BC  6F71000A          MOV.W   @(10,SP),R1
   \   17C0  6F700008          MOV.W   @(8,SP),R0
   \   17C4  6DF1              MOV.W   R1,@-SP
   \   17C6  6DF0              MOV.W   R0,@-SP
   \   17C8  0D51              MOV.W   R5,R1
   \   17CA  0911              ADD.W   R1,R1
   \   17CC  6DF1              MOV.W   R1,@-SP
   \   17CE  0D41              MOV.W   R4,R1
   \   17D0  0911              ADD.W   R1,R1
   \   17D2  6DF1              MOV.W   R1,@-SP
   \   17D4  6F710008          MOV.W   @(8,SP),R1
   \   17D8  0911              ADD.W   R1,R1
   \   17DA  6DF1              MOV.W   R1,@-SP
   \   17DC  6F71000C          MOV.W   @(12,SP),R1
   \   17E0  0911              ADD.W   R1,R1
   \   17E2  5E001D24          JSR     @CalcSensData:16
   \   17E6  7902000A          MOV.W   #10,R2
   \   17EA  0927              ADD.W   R2,SP
   \   17EC  6B8100EC          MOV.W   R1,@sens_data+2:16
    937                  /* sens value 40%FRO @ temp */
    938          
    939                  /* start calculate data for 60 % FRO */
    940                  d_knst =  ((short) packed_data[c_ch][21] +
    941                             packed_data[c_ch][22] * 256) & 0x1fff ;
   \   17F0  0CE9              MOV.B   R6L,R1L
   \   17F2  7779              BLD     #7,R1L
   \   17F4  1E11              SUBX.B  R1H,R1H
   \   17F6  79030028          MOV.W   #40,R3
   \   17FA  5E000000          JSR     @?SS_MUL_L02
   \   17FE  6E1B010A          MOV.B   @(packed_data+22,R1),R3L
   \   1802  F300              MOV.B   #0,R3H
   \   1804  0CB3              MOV.B   R3L,R3H
   \   1806  FB00              MOV.B   #0,R3L
   \   1808  0CE9              MOV.B   R6L,R1L
   \   180A  7779              BLD     #7,R1L
   \   180C  1E11              SUBX.B  R1H,R1H
   \   180E  6DF3              MOV.W   R3,@-SP
   \   1810  79030028          MOV.W   #40,R3
   \   1814  5E000000          JSR     @?SS_MUL_L02
   \   1818  6D73              MOV.W   @SP+,R3
   \   181A  6E180109          MOV.B   @(packed_data+21,R1),R0L
   \   181E  088B              ADD.B   R0L,R3L
   \   1820  9300              ADDX.B  #0,R3H
   \   1822  E31F              AND.B   #31,R3H
   \   1824  6FF30004          MOV.W   R3,@(4,SP)
    942          
    943                  g1 =  ((short) ((packed_data[c_ch][22] >> 5) & 0x07) +
    944                         (packed_data[c_ch][23] * 8) +
    945                         ((packed_data[c_ch][24] & 0x03) * 2048)) & 0x1fff ;
    946                  if ( g1 & 0x1000 ) {                /* negative */
   \   1828  0CE9              MOV.B   R6L,R1L
   \   182A  7779              BLD     #7,R1L
   \   182C  1E11              SUBX.B  R1H,R1H
   \   182E  79030028          MOV.W   #40,R3
   \   1832  5E000000          JSR     @?SS_MUL_L02
   \   1836  6E1B010C          MOV.B   @(packed_data+24,R1),R3L
   \   183A  EB03              AND.B   #3,R3L
   \   183C  F300              MOV.B   #0,R3H
   \   183E  F90B              MOV.B   #11,R1L
   \   1840  0933              ADD.W   R3,R3
   \   1842  1A09              DEC.B   R1L
   \   1844  46FA              BNE     $-4
   \   1846  0CE9              MOV.B   R6L,R1L
   \   1848  7779              BLD     #7,R1L
   \   184A  1E11              SUBX.B  R1H,R1H
   \   184C  6DF3              MOV.W   R3,@-SP
   \   184E  79030028          MOV.W   #40,R3
   \   1852  5E000000          JSR     @?SS_MUL_L02
   \   1856  FB08              MOV.B   #8,R3L
   \   1858  6E18010B          MOV.B   @(packed_data+23,R1),R0L
   \   185C  5083              MULXU   R0L,R3
   \   185E  6D71              MOV.W   @SP+,R1
   \   1860  0913              ADD.W   R1,R3
   \   1862  0CE9              MOV.B   R6L,R1L
   \   1864  7779              BLD     #7,R1L
   \   1866  1E11              SUBX.B  R1H,R1H
   \   1868  6DF3              MOV.W   R3,@-SP
   \   186A  79030028          MOV.W   #40,R3
   \   186E  5E000000          JSR     @?SS_MUL_L02
   \   1872  6E1B010A          MOV.B   @(packed_data+22,R1),R3L
   \   1876  128B              ROTL.B  R3L
   \   1878  128B              ROTL.B  R3L
   \   187A  128B              ROTL.B  R3L
   \   187C  EB07              AND.B   #7,R3L
   \   187E  EB07              AND.B   #7,R3L
   \   1880  6D71              MOV.W   @SP+,R1
   \   1882  08B9              ADD.B   R3L,R1L
   \   1884  9100              ADDX.B  #0,R1H
   \   1886  E11F              AND.B   #31,R1H
   \   1888  69F1              MOV.W   R1,@SP
   \   188A  E110              AND.B   #16,R1H
   \   188C  4706              BEQ     ?0206
   \   188E            ?0205:
    947                      g1 |= 0xe000 ;
   \   188E  6971              MOV.W   @SP,R1
   \   1890  C1E0              OR.B    #224,R1H
   \   1892  69F1              MOV.W   R1,@SP
   \   1894            ?0206:
    948                  }
    949                  g2 =  ((short) ((packed_data[c_ch][24] >> 2) & 0x3f) +
    950                         ((packed_data[c_ch][25] & 0x7f)* 64 )) & 0x1fff ;
    951                  if ( g2 & 0x1000 ) {                /* negative */
   \   1894  0CE9              MOV.B   R6L,R1L
   \   1896  7779              BLD     #7,R1L
   \   1898  1E11              SUBX.B  R1H,R1H
   \   189A  79030028          MOV.W   #40,R3
   \   189E  5E000000          JSR     @?SS_MUL_L02
   \   18A2  6E1B010D          MOV.B   @(packed_data+25,R1),R3L
   \   18A6  EB7F              AND.B   #127,R3L
   \   18A8  F940              MOV.B   #64,R1L
   \   18AA  50B1              MULXU   R3L,R1
   \   18AC  0CEB              MOV.B   R6L,R3L
   \   18AE  777B              BLD     #7,R3L
   \   18B0  1E33              SUBX.B  R3H,R3H
   \   18B2  6DF1              MOV.W   R1,@-SP
   \   18B4  0D31              MOV.W   R3,R1
   \   18B6  79030028          MOV.W   #40,R3
   \   18BA  5E000000          JSR     @?SS_MUL_L02
   \   18BE  6E1B010C          MOV.B   @(packed_data+24,R1),R3L
   \   18C2  110B              SHLR.B  R3L
   \   18C4  110B              SHLR.B  R3L
   \   18C6  EB3F              AND.B   #63,R3L
   \   18C8  6D71              MOV.W   @SP+,R1
   \   18CA  08B9              ADD.B   R3L,R1L
   \   18CC  9100              ADDX.B  #0,R1H
   \   18CE  E11F              AND.B   #31,R1H
   \   18D0  0D14              MOV.W   R1,R4
   \   18D2  E110              AND.B   #16,R1H
   \   18D4  4702              BEQ     ?0208
   \   18D6            ?0207:
    952                      g2 |= 0xe000 ;
   \   18D6  C4E0              OR.B    #224,R4H
   \   18D8            ?0208:
    953                  }
    954                  g3 =  ((short)((packed_data[c_ch][25] >> 7) & 0x01) +
    955                         (packed_data[c_ch][26] * 2) +
    956                         ((packed_data[c_ch][27] & 0x0f) * 512)) & 0x1fff ;
    957                  if ( g3 & 0x1000 ) {                /* negative */
   \   18D8  0CE9              MOV.B   R6L,R1L
   \   18DA  7779              BLD     #7,R1L
   \   18DC  1E11              SUBX.B  R1H,R1H
   \   18DE  79030028          MOV.W   #40,R3
   \   18E2  5E000000          JSR     @?SS_MUL_L02
   \   18E6  6E1B010F          MOV.B   @(packed_data+27,R1),R3L
   \   18EA  EB0F              AND.B   #15,R3L
   \   18EC  F300              MOV.B   #0,R3H
   \   18EE  0CB3              MOV.B   R3L,R3H
   \   18F0  FB00              MOV.B   #0,R3L
   \   18F2  1003              SHLL.B  R3H
   \   18F4  0CE9              MOV.B   R6L,R1L
   \   18F6  7779              BLD     #7,R1L
   \   18F8  1E11              SUBX.B  R1H,R1H
   \   18FA  6DF3              MOV.W   R3,@-SP
   \   18FC  79030028          MOV.W   #40,R3
   \   1900  5E000000          JSR     @?SS_MUL_L02
   \   1904  6E1B010E          MOV.B   @(packed_data+26,R1),R3L
   \   1908  F300              MOV.B   #0,R3H
   \   190A  0933              ADD.W   R3,R3
   \   190C  6D71              MOV.W   @SP+,R1
   \   190E  0913              ADD.W   R1,R3
   \   1910  0CE9              MOV.B   R6L,R1L
   \   1912  7779              BLD     #7,R1L
   \   1914  1E11              SUBX.B  R1H,R1H
   \   1916  6DF3              MOV.W   R3,@-SP
   \   1918  79030028          MOV.W   #40,R3
   \   191C  5E000000          JSR     @?SS_MUL_L02
   \   1920  6E1B010D          MOV.B   @(packed_data+25,R1),R3L
   \   1924  128B              ROTL.B  R3L
   \   1926  EB01              AND.B   #1,R3L
   \   1928  EB01              AND.B   #1,R3L
   \   192A  6D71              MOV.W   @SP+,R1
   \   192C  08B9              ADD.B   R3L,R1L
   \   192E  9100              ADDX.B  #0,R1H
   \   1930  E11F              AND.B   #31,R1H
   \   1932  0D15              MOV.W   R1,R5
   \   1934  E110              AND.B   #16,R1H
   \   1936  4702              BEQ     ?0210
   \   1938            ?0209:
    958                      g3 |= 0xe000 ;
   \   1938  C5E0              OR.B    #224,R5H
   \   193A            ?0210:
    959                  }
    960                  knst += d_knst;                                 /* remember new value */
   \   193A  6F710004          MOV.W   @(4,SP),R1
   \   193E  6F730002          MOV.W   @(2,SP),R3
   \   1942  0913              ADD.W   R1,R3
   \   1944  6FF30002          MOV.W   R3,@(2,SP)
    961                  sens_data[2] = CalcSensData(knst*2, g1*2, g2*2, g3*2, temp_data) ;
   \   1948  6F71000A          MOV.W   @(10,SP),R1
   \   194C  6F700008          MOV.W   @(8,SP),R0
   \   1950  6DF1              MOV.W   R1,@-SP
   \   1952  6DF0              MOV.W   R0,@-SP
   \   1954  0D51              MOV.W   R5,R1
   \   1956  0911              ADD.W   R1,R1
   \   1958  6DF1              MOV.W   R1,@-SP
   \   195A  0D41              MOV.W   R4,R1
   \   195C  0911              ADD.W   R1,R1
   \   195E  6DF1              MOV.W   R1,@-SP
   \   1960  6F710008          MOV.W   @(8,SP),R1
   \   1964  0911              ADD.W   R1,R1
   \   1966  6DF1              MOV.W   R1,@-SP
   \   1968  6F71000C          MOV.W   @(12,SP),R1
   \   196C  0911              ADD.W   R1,R1
   \   196E  5E001D24          JSR     @CalcSensData:16
   \   1972  7902000A          MOV.W   #10,R2
   \   1976  0927              ADD.W   R2,SP
   \   1978  6B8100EE          MOV.W   R1,@sens_data+4:16
    962                  /* sens value 60%FRO @ temp */
    963          
    964                  /* start calculate data for 100 % FRO */
    965                  d_knst = ((short)((packed_data[c_ch][27] >> 4) & 0x0f) +
    966                            (packed_data[c_ch][28] * 16) +
    967                            ((packed_data[c_ch][29] & 0x01)) * 4096)& 0x1fff ;
   \   197C  0CE9              MOV.B   R6L,R1L
   \   197E  7779              BLD     #7,R1L
   \   1980  1E11              SUBX.B  R1H,R1H
   \   1982  79030028          MOV.W   #40,R3
   \   1986  5E000000          JSR     @?SS_MUL_L02
   \   198A  6E1B0111          MOV.B   @(packed_data+29,R1),R3L
   \   198E  EB01              AND.B   #1,R3L
   \   1990  F300              MOV.B   #0,R3H
   \   1992  F90C              MOV.B   #12,R1L
   \   1994  0933              ADD.W   R3,R3
   \   1996  1A09              DEC.B   R1L
   \   1998  46FA              BNE     $-4
   \   199A  0CE9              MOV.B   R6L,R1L
   \   199C  7779              BLD     #7,R1L
   \   199E  1E11              SUBX.B  R1H,R1H
   \   19A0  6DF3              MOV.W   R3,@-SP
   \   19A2  79030028          MOV.W   #40,R3
   \   19A6  5E000000          JSR     @?SS_MUL_L02
   \   19AA  FB10              MOV.B   #16,R3L
   \   19AC  6E180110          MOV.B   @(packed_data+28,R1),R0L
   \   19B0  5083              MULXU   R0L,R3
   \   19B2  6D71              MOV.W   @SP+,R1
   \   19B4  0913              ADD.W   R1,R3
   \   19B6  0CE9              MOV.B   R6L,R1L
   \   19B8  7779              BLD     #7,R1L
   \   19BA  1E11              SUBX.B  R1H,R1H
   \   19BC  6DF3              MOV.W   R3,@-SP
   \   19BE  79030028          MOV.W   #40,R3
   \   19C2  5E000000          JSR     @?SS_MUL_L02
   \   19C6  6E1B010F          MOV.B   @(packed_data+27,R1),R3L
   \   19CA  110B              SHLR.B  R3L
   \   19CC  110B              SHLR.B  R3L
   \   19CE  110B              SHLR.B  R3L
   \   19D0  110B              SHLR.B  R3L
   \   19D2  EB0F              AND.B   #15,R3L
   \   19D4  6D71              MOV.W   @SP+,R1
   \   19D6  08B9              ADD.B   R3L,R1L
   \   19D8  9100              ADDX.B  #0,R1H
   \   19DA  E11F              AND.B   #31,R1H
   \   19DC  6FF10004          MOV.W   R1,@(4,SP)
    968          
    969                  g1 =  ((short) ((packed_data[c_ch][29] >> 1) & 0x7f) +
    970                         ((packed_data[c_ch][30] & 0x3f) * 128)) & 0x1fff ;
    971                  if ( g1 & 0x1000 ) {                /* negative */
   \   19E0  0CE9              MOV.B   R6L,R1L
   \   19E2  7779              BLD     #7,R1L
   \   19E4  1E11              SUBX.B  R1H,R1H
   \   19E6  79030028          MOV.W   #40,R3
   \   19EA  5E000000          JSR     @?SS_MUL_L02
   \   19EE  6E1B0112          MOV.B   @(packed_data+30,R1),R3L
   \   19F2  EB3F              AND.B   #63,R3L
   \   19F4  F980              MOV.B   #128,R1L
   \   19F6  50B1              MULXU   R3L,R1
   \   19F8  0CEB              MOV.B   R6L,R3L
   \   19FA  777B              BLD     #7,R3L
   \   19FC  1E33              SUBX.B  R3H,R3H
   \   19FE  6DF1              MOV.W   R1,@-SP
   \   1A00  0D31              MOV.W   R3,R1
   \   1A02  79030028          MOV.W   #40,R3
   \   1A06  5E000000          JSR     @?SS_MUL_L02
   \   1A0A  6E1B0111          MOV.B   @(packed_data+29,R1),R3L
   \   1A0E  110B              SHLR.B  R3L
   \   1A10  EB7F              AND.B   #127,R3L
   \   1A12  6D71              MOV.W   @SP+,R1
   \   1A14  08B9              ADD.B   R3L,R1L
   \   1A16  9100              ADDX.B  #0,R1H
   \   1A18  E11F              AND.B   #31,R1H
   \   1A1A  69F1              MOV.W   R1,@SP
   \   1A1C  E110              AND.B   #16,R1H
   \   1A1E  4706              BEQ     ?0212
   \   1A20            ?0211:
    972                      g1 |= 0xe000 ;
   \   1A20  6971              MOV.W   @SP,R1
   \   1A22  C1E0              OR.B    #224,R1H
   \   1A24  69F1              MOV.W   R1,@SP
   \   1A26            ?0212:
    973                  }
    974                  g2 =  ((short) ((packed_data[c_ch][30] >> 6) & 0x03) +
    975                         (packed_data[c_ch][31] * 4) +
    976                         ((packed_data[c_ch][32]& 0x07) * 1024)) & 0x1fff ;
    977                  if ( g2 & 0x1000 ) {                /* negative */
   \   1A26  0CE9              MOV.B   R6L,R1L
   \   1A28  7779              BLD     #7,R1L
   \   1A2A  1E11              SUBX.B  R1H,R1H
   \   1A2C  79030028          MOV.W   #40,R3
   \   1A30  5E000000          JSR     @?SS_MUL_L02
   \   1A34  6E1B0114          MOV.B   @(packed_data+32,R1),R3L
   \   1A38  EB07              AND.B   #7,R3L
   \   1A3A  F300              MOV.B   #0,R3H
   \   1A3C  0CB3              MOV.B   R3L,R3H
   \   1A3E  FB00              MOV.B   #0,R3L
   \   1A40  1003              SHLL.B  R3H
   \   1A42  1003              SHLL.B  R3H
   \   1A44  0CE9              MOV.B   R6L,R1L
   \   1A46  7779              BLD     #7,R1L
   \   1A48  1E11              SUBX.B  R1H,R1H
   \   1A4A  6DF3              MOV.W   R3,@-SP
   \   1A4C  79030028          MOV.W   #40,R3
   \   1A50  5E000000          JSR     @?SS_MUL_L02
   \   1A54  FB04              MOV.B   #4,R3L
   \   1A56  6E180113          MOV.B   @(packed_data+31,R1),R0L
   \   1A5A  5083              MULXU   R0L,R3
   \   1A5C  6D71              MOV.W   @SP+,R1
   \   1A5E  0913              ADD.W   R1,R3
   \   1A60  0CE9              MOV.B   R6L,R1L
   \   1A62  7779              BLD     #7,R1L
   \   1A64  1E11              SUBX.B  R1H,R1H
   \   1A66  6DF3              MOV.W   R3,@-SP
   \   1A68  79030028          MOV.W   #40,R3
   \   1A6C  5E000000          JSR     @?SS_MUL_L02
   \   1A70  6E1B0112          MOV.B   @(packed_data+30,R1),R3L
   \   1A74  128B              ROTL.B  R3L
   \   1A76  128B              ROTL.B  R3L
   \   1A78  EB03              AND.B   #3,R3L
   \   1A7A  EB03              AND.B   #3,R3L
   \   1A7C  6D71              MOV.W   @SP+,R1
   \   1A7E  08B9              ADD.B   R3L,R1L
   \   1A80  9100              ADDX.B  #0,R1H
   \   1A82  E11F              AND.B   #31,R1H
   \   1A84  0D14              MOV.W   R1,R4
   \   1A86  E110              AND.B   #16,R1H
   \   1A88  4702              BEQ     ?0214
   \   1A8A            ?0213:
    978                      g2 |= 0xe000 ;
   \   1A8A  C4E0              OR.B    #224,R4H
   \   1A8C            ?0214:
    979                  }
    980                  g3 =  ((short) ((packed_data[c_ch][32] >> 3) & 0x1f) +
    981                         (packed_data[c_ch][33] * 32)) & 0x1fff ;
    982                  if ( g3 & 0x1000 ) {                /* negative */
   \   1A8C  0CE9              MOV.B   R6L,R1L
   \   1A8E  7779              BLD     #7,R1L
   \   1A90  1E11              SUBX.B  R1H,R1H
   \   1A92  79030028          MOV.W   #40,R3
   \   1A96  5E000000          JSR     @?SS_MUL_L02
   \   1A9A  FB20              MOV.B   #32,R3L
   \   1A9C  6E180115          MOV.B   @(packed_data+33,R1),R0L
   \   1AA0  5083              MULXU   R0L,R3
   \   1AA2  0CE9              MOV.B   R6L,R1L
   \   1AA4  7779              BLD     #7,R1L
   \   1AA6  1E11              SUBX.B  R1H,R1H
   \   1AA8  6DF3              MOV.W   R3,@-SP
   \   1AAA  79030028          MOV.W   #40,R3
   \   1AAE  5E000000          JSR     @?SS_MUL_L02
   \   1AB2  6E1B0114          MOV.B   @(packed_data+32,R1),R3L
   \   1AB6  110B              SHLR.B  R3L
   \   1AB8  110B              SHLR.B  R3L
   \   1ABA  110B              SHLR.B  R3L
   \   1ABC  EB1F              AND.B   #31,R3L
   \   1ABE  6D71              MOV.W   @SP+,R1
   \   1AC0  08B9              ADD.B   R3L,R1L
   \   1AC2  9100              ADDX.B  #0,R1H
   \   1AC4  E11F              AND.B   #31,R1H
   \   1AC6  0D15              MOV.W   R1,R5
   \   1AC8  E110              AND.B   #16,R1H
   \   1ACA  4702              BEQ     ?0216
   \   1ACC            ?0215:
    983                      g3 |= 0xe000 ;
   \   1ACC  C5E0              OR.B    #224,R5H
   \   1ACE            ?0216:
    984                  }
    985                  knst += d_knst;                                 /* remember new value */
   \   1ACE  6F710004          MOV.W   @(4,SP),R1
   \   1AD2  6F730002          MOV.W   @(2,SP),R3
   \   1AD6  0913              ADD.W   R1,R3
   \   1AD8  6FF30002          MOV.W   R3,@(2,SP)
    986                  sens_data[3] = CalcSensData(knst*2, g1*2, g2*2, g3*2, temp_data) ;
   \   1ADC  6F71000A          MOV.W   @(10,SP),R1
   \   1AE0  6F700008          MOV.W   @(8,SP),R0
   \   1AE4  6DF1              MOV.W   R1,@-SP
   \   1AE6  6DF0              MOV.W   R0,@-SP
   \   1AE8  0D51              MOV.W   R5,R1
   \   1AEA  0911              ADD.W   R1,R1
   \   1AEC  6DF1              MOV.W   R1,@-SP
   \   1AEE  0D41              MOV.W   R4,R1
   \   1AF0  0911              ADD.W   R1,R1
   \   1AF2  6DF1              MOV.W   R1,@-SP
   \   1AF4  6F710008          MOV.W   @(8,SP),R1
   \   1AF8  0911              ADD.W   R1,R1
   \   1AFA  6DF1              MOV.W   R1,@-SP
   \   1AFC  6F71000C          MOV.W   @(12,SP),R1
   \   1B00  0911              ADD.W   R1,R1
   \   1B02  5E001D24          JSR     @CalcSensData:16
   \   1B06  7902000A          MOV.W   #10,R2
   \   1B0A  0927              ADD.W   R2,SP
   \   1B0C  6B8100F0          MOV.W   R1,@sens_data+6:16
    987                  /* sens value 100%FRO @ temp */
    988          
    989                  sens_nl1 = (signed char)((packed_data[c_ch][34] >> 3) & 0x0f) ; /*  NL1 */
   \   1B10  0CE9              MOV.B   R6L,R1L
   \   1B12  7779              BLD     #7,R1L
   \   1B14  1E11              SUBX.B  R1H,R1H
   \   1B16  79030028          MOV.W   #40,R3
   \   1B1A  5E000000          JSR     @?SS_MUL_L02
   \   1B1E  6E1B0116          MOV.B   @(packed_data+34,R1),R3L
   \   1B22  110B              SHLR.B  R3L
   \   1B24  110B              SHLR.B  R3L
   \   1B26  110B              SHLR.B  R3L
   \   1B28  EB0F              AND.B   #15,R3L
   \   1B2A  6A8B00F2          MOV.B   R3L,@sens_nl1:16
    990                  if ( (packed_data[c_ch][34]) & 0x80 ) {
   \   1B2E  0CE9              MOV.B   R6L,R1L
   \   1B30  7779              BLD     #7,R1L
   \   1B32  1E11              SUBX.B  R1H,R1H
   \   1B34  79030028          MOV.W   #40,R3
   \   1B38  5E000000          JSR     @?SS_MUL_L02
   \   1B3C  6E1B0116          MOV.B   @(packed_data+34,R1),R3L
   \   1B40  EB80              AND.B   #128,R3L
   \   1B42  470A              BEQ     ?0218
   \   1B44            ?0217:
    991                      sens_nl1 |= 0xf0 ;
   \   1B44  6A0900F2          MOV.B   @sens_nl1:16,R1L
   \   1B48  C9F0              OR.B    #-16,R1L
   \   1B4A  6A8900F2          MOV.B   R1L,@sens_nl1:16
   \   1B4E            ?0218:
    992                  }
    993                  sens_nl1 *= 3 ;
   \   1B4E  F903              MOV.B   #3,R1L
   \   1B50  6A0B00F2          MOV.B   @sens_nl1:16,R3L
   \   1B54  5093              MULXU   R1L,R3
   \   1B56  6A8B00F2          MOV.B   R3L,@sens_nl1:16
    994          
    995                  sens_nl2 = (signed char) (packed_data[c_ch][34] & 0x07) ;         /* NL2 */
   \   1B5A  0CE9              MOV.B   R6L,R1L
   \   1B5C  7779              BLD     #7,R1L
   \   1B5E  1E11              SUBX.B  R1H,R1H
   \   1B60  79030028          MOV.W   #40,R3
   \   1B64  5E000000          JSR     @?SS_MUL_L02
   \   1B68  6E1B0116          MOV.B   @(packed_data+34,R1),R3L
   \   1B6C  EB07              AND.B   #7,R3L
   \   1B6E  6A8B00F3          MOV.B   R3L,@sens_nl2:16
    996                  if ( (packed_data[c_ch][34]) & 0x04 ) {
   \   1B72  0CE9              MOV.B   R6L,R1L
   \   1B74  7779              BLD     #7,R1L
   \   1B76  1E11              SUBX.B  R1H,R1H
   \   1B78  79030028          MOV.W   #40,R3
   \   1B7C  5E000000          JSR     @?SS_MUL_L02
   \   1B80  6E1B0116          MOV.B   @(packed_data+34,R1),R3L
   \   1B84  EB04              AND.B   #4,R3L
   \   1B86  470A              BEQ     ?0220
   \   1B88            ?0219:
    997                      sens_nl2 |= 0xf8 ;
   \   1B88  6A0900F3          MOV.B   @sens_nl2:16,R1L
   \   1B8C  C9F8              OR.B    #-8,R1L
   \   1B8E  6A8900F3          MOV.B   R1L,@sens_nl2:16
   \   1B92            ?0220:
    998                  }
    999                  sens_nl2 *= 3 ;
   \   1B92  F903              MOV.B   #3,R1L
   \   1B94  6A0B00F3          MOV.B   @sens_nl2:16,R3L
   \   1B98  5093              MULXU   R1L,R3
   \   1B9A  6A8B00F3          MOV.B   R3L,@sens_nl2:16
   1000          
   1001                  offset[ch] =  (short) (packed_data[c_ch][35] +
   1002                                         (packed_data[c_ch][36] * 256)) ;           /*offset*/
   \   1B9E  0CE9              MOV.B   R6L,R1L
   \   1BA0  7779              BLD     #7,R1L
   \   1BA2  1E11              SUBX.B  R1H,R1H
   \   1BA4  79030028          MOV.W   #40,R3
   \   1BA8  5E000000          JSR     @?SS_MUL_L02
   \   1BAC  6E1B0118          MOV.B   @(packed_data+36,R1),R3L
   \   1BB0  F300              MOV.B   #0,R3H
   \   1BB2  0CB3              MOV.B   R3L,R3H
   \   1BB4  FB00              MOV.B   #0,R3L
   \   1BB6  0CE9              MOV.B   R6L,R1L
   \   1BB8  7779              BLD     #7,R1L
   \   1BBA  1E11              SUBX.B  R1H,R1H
   \   1BBC  6DF3              MOV.W   R3,@-SP
   \   1BBE  79030028          MOV.W   #40,R3
   \   1BC2  5E000000          JSR     @?SS_MUL_L02
   \   1BC6  6D73              MOV.W   @SP+,R3
   \   1BC8  6E180117          MOV.B   @(packed_data+35,R1),R0L
   \   1BCC  088B              ADD.B   R0L,R3L
   \   1BCE  9300              ADDX.B  #0,R3H
   \   1BD0  0C69              MOV.B   R6H,R1L
   \   1BD2  7779              BLD     #7,R1L
   \   1BD4  1E11              SUBX.B  R1H,R1H
   \   1BD6  0911              ADD.W   R1,R1
   \   1BD8  6F9302F4          MOV.W   R3,@(offset,R1)
   1003          
   1004                  gain[ch] =  1.0 + (float)((packed_data[c_ch][37] +
   1005                                             packed_data[c_ch][38] * 256)/100000.0) ;  /*gain*/
   \   1BDC  0CE9              MOV.B   R6L,R1L
   \   1BDE  7779              BLD     #7,R1L
   \   1BE0  1E11              SUBX.B  R1H,R1H
   \   1BE2  79030028          MOV.W   #40,R3
   \   1BE6  5E000000          JSR     @?SS_MUL_L02
   \   1BEA  6E1B011A          MOV.B   @(packed_data+38,R1),R3L
   \   1BEE  F300              MOV.B   #0,R3H
   \   1BF0  0CB3              MOV.B   R3L,R3H
   \   1BF2  FB00              MOV.B   #0,R3L
   \   1BF4  0CE9              MOV.B   R6L,R1L
   \   1BF6  7779              BLD     #7,R1L
   \   1BF8  1E11              SUBX.B  R1H,R1H
   \   1BFA  6DF3              MOV.W   R3,@-SP
   \   1BFC  79030028          MOV.W   #40,R3
   \   1C00  5E000000          JSR     @?SS_MUL_L02
   \   1C04  6D73              MOV.W   @SP+,R3
   \   1C06  6E180119          MOV.B   @(packed_data+37,R1),R0L
   \   1C0A  088B              ADD.B   R0L,R3L
   \   1C0C  9300              ADDX.B  #0,R3H
   \   1C0E  0D31              MOV.W   R3,R1
   \   1C10  7371              BTST    #7,R1H
   \   1C12  4706              BEQ     $+8
   \   1C14  7900FFFF          MOV.W   #-1,R0
   \   1C18  4002              BRA     $+4
   \   1C1A  1900              SUB.W   R0,R0
   \   1C1C  5E000000          JSR     @?SL_TO_FLT_L04
   \   1C20  79035000          MOV.W   #20480,R3
   \   1C24  790247C3          MOV.W   #18371,R2
   \   1C28  5E000000          JSR     @?F_DIV_L04
   \   1C2C  1933              SUB.W   R3,R3
   \   1C2E  79023F80          MOV.W   #16256,R2
   \   1C32  5E000000          JSR     @?F_ADD_L04
   \   1C36  0C6B              MOV.B   R6H,R3L
   \   1C38  777B              BLD     #7,R3L
   \   1C3A  1E33              SUBX.B  R3H,R3H
   \   1C3C  0933              ADD.W   R3,R3
   \   1C3E  0933              ADD.W   R3,R3
   \   1C40  6FB102BE          MOV.W   R1,@(gain+2,R3)
   \   1C44  6FB002BC          MOV.W   R0,@(gain,R3)
   1006                  /* 256 can not be 256.0 !!!*/
   1007              } else {
   \   1C48  4050              BRA     ?0221
   \   1C4A            ?0188:
   1008                  sens_data[0] =     0 ;                  /* dummy values to prevent */
   \   1C4A  1911              SUB.W   R1,R1
   \   1C4C  6B8100EA          MOV.W   R1,@sens_data:16
   1009                  sens_data[1] =  4000 ;             /* divide by zero */
   \   1C50  79010FA0          MOV.W   #4000,R1
   \   1C54  6B8100EC          MOV.W   R1,@sens_data+2:16
   1010                  sens_data[2] =  8000 ;
   \   1C58  79011F40          MOV.W   #8000,R1
   \   1C5C  6B8100EE          MOV.W   R1,@sens_data+4:16
   1011                  sens_data[3] = 12000 ;
   \   1C60  79012EE0          MOV.W   #12000,R1
   \   1C64  6B8100F0          MOV.W   R1,@sens_data+6:16
   1012                  sens_nl1 = 0 ;
   \   1C68  F900              MOV.B   #0,R1L
   \   1C6A  6A8900F2          MOV.B   R1L,@sens_nl1:16
   1013                  sens_nl2 = 0 ;
   \   1C6E  F900              MOV.B   #0,R1L
   \   1C70  6A8900F3          MOV.B   R1L,@sens_nl2:16
   1014                  offset[ch] =  0 ;                       /*offset*/
   \   1C74  0C69              MOV.B   R6H,R1L
   \   1C76  7779              BLD     #7,R1L
   \   1C78  1E11              SUBX.B  R1H,R1H
   \   1C7A  0911              ADD.W   R1,R1
   \   1C7C  1933              SUB.W   R3,R3
   \   1C7E  6F9302F4          MOV.W   R3,@(offset,R1)
   1015                  gain[ch] =  1.0 ;                       /* gain */
   \   1C82  0C69              MOV.B   R6H,R1L
   \   1C84  7779              BLD     #7,R1L
   \   1C86  1E11              SUBX.B  R1H,R1H
   \   1C88  0911              ADD.W   R1,R1
   \   1C8A  0911              ADD.W   R1,R1
   \   1C8C  1922              SUB.W   R2,R2
   \   1C8E  79003F80          MOV.W   #16256,R0
   \   1C92  6F9202BE          MOV.W   R2,@(gain+2,R1)
   \   1C96  6F9002BC          MOV.W   R0,@(gain,R1)
   \   1C9A            ?0221:
   1016              }
   1017              if ( (eep_type[7] & 0x01) || (eep_type[7] & 0x10) ) {     /* ok data */
   \   1C9A  6A090336          MOV.B   @eep_type+7:16,R1L
   \   1C9E  E901              AND.B   #1,R1L
   \   1CA0  4608              BNE     ?0222
   \   1CA2  6A090336          MOV.B   @eep_type+7:16,R1L
   \   1CA6  E910              AND.B   #16,R1L
   \   1CA8  4758              BEQ     ?0223
   \   1CAA            ?0224:
   \   1CAA            ?0225:
   \   1CAA            ?0222:
   1018                  cal_zero = (short) packed_data[7][35] + packed_data[7][36] * 256 ;
   \   1CAA  6A090230          MOV.B   @packed_data+316:16,R1L
   \   1CAE  F100              MOV.B   #0,R1H
   \   1CB0  0C91              MOV.B   R1L,R1H
   \   1CB2  F900              MOV.B   #0,R1L
   \   1CB4  6A0B022F          MOV.B   @packed_data+315:16,R3L
   \   1CB8  08B9              ADD.B   R3L,R1L
   \   1CBA  9100              ADDX.B  #0,R1H
   \   1CBC  6B810314          MOV.W   R1,@cal_zero:16
   1019                  cal_gain =  1.0 + (float)((packed_data[7][37] +
   1020                                             packed_data[7][38] * 256)/100000.0) ; /*gain*/
   \   1CC0  6A090232          MOV.B   @packed_data+318:16,R1L
   \   1CC4  F100              MOV.B   #0,R1H
   \   1CC6  0C91              MOV.B   R1L,R1H
   \   1CC8  F900              MOV.B   #0,R1L
   \   1CCA  6A0B0231          MOV.B   @packed_data+317:16,R3L
   \   1CCE  08B9              ADD.B   R3L,R1L
   \   1CD0  9100              ADDX.B  #0,R1H
   \   1CD2  7371              BTST    #7,R1H
   \   1CD4  4706              BEQ     $+8
   \   1CD6  7900FFFF          MOV.W   #-1,R0
   \   1CDA  4002              BRA     $+4
   \   1CDC  1900              SUB.W   R0,R0
   \   1CDE  5E000000          JSR     @?SL_TO_FLT_L04
   \   1CE2  79035000          MOV.W   #20480,R3
   \   1CE6  790247C3          MOV.W   #18371,R2
   \   1CEA  5E000000          JSR     @?F_DIV_L04
   \   1CEE  1933              SUB.W   R3,R3
   \   1CF0  79023F80          MOV.W   #16256,R2
   \   1CF4  5E000000          JSR     @?F_ADD_L04
   \   1CF8  6B810312          MOV.W   R1,@cal_gain+2:16
   \   1CFC  6B800310          MOV.W   R0,@cal_gain:16
   1021                  /* 256 can not be 256.0 !!!*/
   1022              } else {
   \   1D00  4014              BRA     ?0226
   \   1D02            ?0223:
   1023                  cal_zero = 0 ;
   \   1D02  1911              SUB.W   R1,R1
   \   1D04  6B810314          MOV.W   R1,@cal_zero:16
   1024                  cal_gain = 1.0 ;
   \   1D08  1911              SUB.W   R1,R1
   \   1D0A  79003F80          MOV.W   #16256,R0
   \   1D0E  6B810312          MOV.W   R1,@cal_gain+2:16
   \   1D12  6B800310          MOV.W   R0,@cal_gain:16
   \   1D16            ?0226:
   1025              }
   1026          }
   \   1D16  7902000C          MOV.W   #12,R2
   \   1D1A  0927              ADD.W   R2,SP
   \   1D1C  6D76              POP     R6
   \   1D1E  6D75              POP     R5
   \   1D20  6D74              POP     R4
   \   1D22  5470              RTS
   1027          
   1028          /*************************************************************************
   1029          *
   1030          *  Calculate sensordata
   1031          *
   1032          *************************************************************************/
   1033          short CalcSensData(short knst, short g1, short g2, short g3, float temp)
   1034          {
   \   1D24            CalcSensData:
   \   1D24  6DF4              PUSH    R4
   \   1D26  6DF5              PUSH    R5
   \   1D28  6DF6              PUSH    R6
   \   1D2A  6DF1              PUSH    R1
   \   1D2C  6F76000E          MOV.W   @(14,SP),R6
   \   1D30  6F75000C          MOV.W   @(12,SP),R5
   \   1D34  6F74000A          MOV.W   @(10,SP),R4
   1035          
   1036              return(knst + (g1 * temp) +
   1037                     (g2 * temp * temp) +
   1038                     (g3 * temp * temp * temp)) ;    /* sens value ?%FRO @ temp */
   \   1D38  0D61              MOV.W   R6,R1
   \   1D3A  7371              BTST    #7,R1H
   \   1D3C  4706              BEQ     $+8
   \   1D3E  7900FFFF          MOV.W   #-1,R0
   \   1D42  4002              BRA     $+4
   \   1D44  1900              SUB.W   R0,R0
   \   1D46  5E000000          JSR     @?SL_TO_FLT_L04
   \   1D4A  6F730012          MOV.W   @(18,SP),R3
   \   1D4E  6F720010          MOV.W   @(16,SP),R2
   \   1D52  5E000000          JSR     @?F_MUL_L04
   \   1D56  6F730012          MOV.W   @(18,SP),R3
   \   1D5A  6F720010          MOV.W   @(16,SP),R2
   \   1D5E  5E000000          JSR     @?F_MUL_L04
   \   1D62  6F730012          MOV.W   @(18,SP),R3
   \   1D66  6F720010          MOV.W   @(16,SP),R2
   \   1D6A  5E000000          JSR     @?F_MUL_L04
   \   1D6E  6DF1              MOV.W   R1,@-SP
   \   1D70  0D51              MOV.W   R5,R1
   \   1D72  6DF0              MOV.W   R0,@-SP
   \   1D74  7371              BTST    #7,R1H
   \   1D76  4706              BEQ     $+8
   \   1D78  7900FFFF          MOV.W   #-1,R0
   \   1D7C  4002              BRA     $+4
   \   1D7E  1900              SUB.W   R0,R0
   \   1D80  5E000000          JSR     @?SL_TO_FLT_L04
   \   1D84  6F730016          MOV.W   @(22,SP),R3
   \   1D88  6F720014          MOV.W   @(20,SP),R2
   \   1D8C  5E000000          JSR     @?F_MUL_L04
   \   1D90  6F730016          MOV.W   @(22,SP),R3
   \   1D94  6F720014          MOV.W   @(20,SP),R2
   \   1D98  5E000000          JSR     @?F_MUL_L04
   \   1D9C  6F730002          MOV.W   @(2,SP),R3
   \   1DA0  6972              MOV.W   @SP,R2
   \   1DA2  6FF20002          MOV.W   R2,@(2,SP)
   \   1DA6  0B87              ADDS.W  #2,SP
   \   1DA8  6D72              MOV.W   @SP+,R2
   \   1DAA  5E000000          JSR     @?F_ADD_L04
   \   1DAE  6DF1              MOV.W   R1,@-SP
   \   1DB0  0D41              MOV.W   R4,R1
   \   1DB2  6DF0              MOV.W   R0,@-SP
   \   1DB4  7371              BTST    #7,R1H
   \   1DB6  4706              BEQ     $+8
   \   1DB8  7900FFFF          MOV.W   #-1,R0
   \   1DBC  4002              BRA     $+4
   \   1DBE  1900              SUB.W   R0,R0
   \   1DC0  5E000000          JSR     @?SL_TO_FLT_L04
   \   1DC4  6F730016          MOV.W   @(22,SP),R3
   \   1DC8  6F720014          MOV.W   @(20,SP),R2
   \   1DCC  5E000000          JSR     @?F_MUL_L04
   \   1DD0  6F730002          MOV.W   @(2,SP),R3
   \   1DD4  6972              MOV.W   @SP,R2
   \   1DD6  6FF20002          MOV.W   R2,@(2,SP)
   \   1DDA  0B87              ADDS.W  #2,SP
   \   1DDC  6D72              MOV.W   @SP+,R2
   \   1DDE  5E000000          JSR     @?F_ADD_L04
   \   1DE2  6DF1              MOV.W   R1,@-SP
   \   1DE4  6F710002          MOV.W   @(2,SP),R1
   \   1DE8  6DF0              MOV.W   R0,@-SP
   \   1DEA  7371              BTST    #7,R1H
   \   1DEC  4706              BEQ     $+8
   \   1DEE  7900FFFF          MOV.W   #-1,R0
   \   1DF2  4002              BRA     $+4
   \   1DF4  1900              SUB.W   R0,R0
   \   1DF6  5E000000          JSR     @?SL_TO_FLT_L04
   \   1DFA  6F730002          MOV.W   @(2,SP),R3
   \   1DFE  6972              MOV.W   @SP,R2
   \   1E00  6FF20002          MOV.W   R2,@(2,SP)
   \   1E04  0B87              ADDS.W  #2,SP
   \   1E06  6D72              MOV.W   @SP+,R2
   \   1E08  5E000000          JSR     @?F_ADD_L04
   \   1E0C  5E000000          JSR     @?FLT_TO_SL_L04
   1039          
   1040          }
   \   1E10  0B87              ADDS.W  #2,SP
   \   1E12  6D76              POP     R6
   \   1E14  6D75              POP     R5
   \   1E16  6D74              POP     R4
   \   1E18  5470              RTS
   1041          
   1042          /*************************************************************************
   1043          *
   1044          *  Find temperature for a channel
   1045          *
   1046          *************************************************************************/
   1047          short FindTemp(signed char ch)
   1048          {
   \   1E1A            FindTemp:
   \   1E1A  6DF5              PUSH    R5
   \   1E1C  6DF6              PUSH    R6
   1049          
   1050              short temp_ch, i ;
   1051          
   1052              temp_ch = (short) ch + 1 ;
   1053              if ( ((ch_stat[temp_ch] & 0xc) == 0x4) &&
   1054                   (mes_data[temp_ch] < 150.0) &&                     /* to high or */
   1055                   (mes_data[temp_ch] > -80.0) &&                     /* to low temp or */
   1056                   (!(ch_stat[temp_ch] & 0x01)) ) {                    /* convertion error */
   \   1E1E  7779              BLD     #7,R1L
   \   1E20  1E11              SUBX.B  R1H,R1H
   \   1E22  0B01              ADDS.W  #1,R1
   \   1E24  0D15              MOV.W   R1,R5
   \   1E26  6E1B0321          MOV.B   @(ch_stat,R1),R3L
   \   1E2A  EB0C              AND.B   #12,R3L
   \   1E2C  AB04              CMP.B   #4,R3L
   \   1E2E  4646              BNE     ?0228
   \   1E30  0D51              MOV.W   R5,R1
   \   1E32  0911              ADD.W   R1,R1
   \   1E34  0911              ADD.W   R1,R1
   \   1E36  0D10              MOV.W   R1,R0
   \   1E38  6F01027A          MOV.W   @(mes_data+2,R0),R1
   \   1E3C  6F000278          MOV.W   @(mes_data,R0),R0
   \   1E40  1933              SUB.W   R3,R3
   \   1E42  79024316          MOV.W   #17174,R2
   \   1E46  5E000000          JSR     @?F_SUB_L04
   \   1E4A  0D00              MOV.W   R0,R0
   \   1E4C  4C28              BGE     ?0228
   \   1E4E  0D51              MOV.W   R5,R1
   \   1E50  0911              ADD.W   R1,R1
   \   1E52  0911              ADD.W   R1,R1
   \   1E54  0D10              MOV.W   R1,R0
   \   1E56  6F01027A          MOV.W   @(mes_data+2,R0),R1
   \   1E5A  6F000278          MOV.W   @(mes_data,R0),R0
   \   1E5E  1933              SUB.W   R3,R3
   \   1E60  7902C2A0          MOV.W   #-15712,R2
   \   1E64  5E000000          JSR     @?F_SUB_L04
   \   1E68  0D00              MOV.W   R0,R0
   \   1E6A  4F0A              BLE     ?0228
   \   1E6C  6E590321          MOV.B   @(ch_stat,R5),R1L
   \   1E70  E901              AND.B   #1,R1L
   \   1E72  4602              BNE     ?0228
   \   1E74            ?0230:
   \   1E74            ?0229:
   \   1E74            ?0227:
   1057              } else {
   \   1E74  4066              BRA     ?0231
   \   1E76            ?0228:
   1058                  temp_ch = NOIOCH ;                         /* used if no temp */
   \   1E76  7905000E          MOV.W   #14,R5
   1059                  for ( i = 0; i < NOIOCH; i++ ) {
   \   1E7A  1966              SUB.W   R6,R6
   \   1E7C            ?0233:
   \   1E7C  7901000E          MOV.W   #14,R1
   \   1E80  1D16              CMP.W   R1,R6
   \   1E82  4C58              BGE     ?0232
   \   1E84            ?0234:
   1060                      if ( (ch_stat[i] & 0x0c) == 0x04 ) {  /* temp ? */
   \   1E84  6E690321          MOV.B   @(ch_stat,R6),R1L
   \   1E88  E90C              AND.B   #12,R1L
   \   1E8A  A904              CMP.B   #4,R1L
   \   1E8C  464A              BNE     ?0237
   \   1E8E            ?0236:
   1061                          if ( (mes_data[i] < 150.0) &&         /* to high or */
   1062                               (mes_data[i] > -80.0) &&     /* to low temp or */
   1063                               !(ch_stat[i] & 0x01) ) {         /* convertion error */
   \   1E8E  0D61              MOV.W   R6,R1
   \   1E90  0911              ADD.W   R1,R1
   \   1E92  0911              ADD.W   R1,R1
   \   1E94  0D10              MOV.W   R1,R0
   \   1E96  6F01027A          MOV.W   @(mes_data+2,R0),R1
   \   1E9A  6F000278          MOV.W   @(mes_data,R0),R0
   \   1E9E  1933              SUB.W   R3,R3
   \   1EA0  79024316          MOV.W   #17174,R2
   \   1EA4  5E000000          JSR     @?F_SUB_L04
   \   1EA8  0D00              MOV.W   R0,R0
   \   1EAA  4C2C              BGE     ?0239
   \   1EAC  0D61              MOV.W   R6,R1
   \   1EAE  0911              ADD.W   R1,R1
   \   1EB0  0911              ADD.W   R1,R1
   \   1EB2  0D10              MOV.W   R1,R0
   \   1EB4  6F01027A          MOV.W   @(mes_data+2,R0),R1
   \   1EB8  6F000278          MOV.W   @(mes_data,R0),R0
   \   1EBC  1933              SUB.W   R3,R3
   \   1EBE  7902C2A0          MOV.W   #-15712,R2
   \   1EC2  5E000000          JSR     @?F_SUB_L04
   \   1EC6  0D00              MOV.W   R0,R0
   \   1EC8  4F0E              BLE     ?0239
   \   1ECA  6E690321          MOV.B   @(ch_stat,R6),R1L
   \   1ECE  E901              AND.B   #1,R1L
   \   1ED0  4606              BNE     ?0239
   \   1ED2            ?0241:
   \   1ED2            ?0240:
   \   1ED2            ?0238:
   1064                              temp_ch = i ;
   \   1ED2  0D65              MOV.W   R6,R5
   1065                              i = NOIOCH ;                               /* exit */
   \   1ED4  7906000E          MOV.W   #14,R6
   \   1ED8            ?0239:
   \   1ED8            ?0237:
   \   1ED8  0B06              ADDS.W  #1,R6
   1066                          }
   1067                      }
   1068                  }
   1069              }
   \   1EDA  40A0              BRA     ?0233
   \   1EDC            ?0232:
   \   1EDC            ?0231:
   1070          
   1071              return temp_ch ;
   \   1EDC  0D51              MOV.W   R5,R1
   1072          }
   \   1EDE  6D76              POP     R6
   \   1EE0  6D75              POP     R5
   \   1EE2  5470              RTS
   1073          
   1074          /*************************************************************************
   1075          *
   1076          *  Read from AD-converter
   1077          *
   1078          *************************************************************************/
   1079          unsigned char ReadAdByte(void)
   1080          {
   \   1EE4            ReadAdByte:
   \   1EE4  6DF5              PUSH    R5
   \   1EE6  6DF6              PUSH    R6
   1081          
   1082              unsigned char i, read_byte ;
   1083          
   1084              for ( i = 0; i <  8; i++ ) {
   \   1EE8  FD00              MOV.B   #0,R5L
   \   1EEA            ?0243:
   \   1EEA  AD08              CMP.B   #8,R5L
   \   1EEC  441A              BCC     ?0242
   \   1EEE            ?0244:
   1085                  read_byte <<= 1 ;                         /* shift to next bit */
   \   1EEE  100E              SHLL.B  R6L
   1086                  P5DR &= ~ADCLK ;                                /*      set clock line low */
   \   1EF0  7FBA7250          BCLR    #5,@186:8
   1087                  P5DR |= ADCLK ;                                 /*      set clock line high */
   \   1EF4  7FBA7050          BSET    #5,@186:8
   1088                  if ( P5DR & ADDO ) {                          /* data  = 1? */
   \   1EF8  29BA              MOV.B   @186:8,R1L
   \   1EFA  E910              AND.B   #16,R1L
   \   1EFC  4704              BEQ     ?0247
   \   1EFE            ?0246:
   1089                      read_byte |= 0x01 ;                       /* set bit high */
   \   1EFE  700E              BSET    #0,R6L
   1090                  } else {
   \   1F00  4002              BRA     ?0248
   \   1F02            ?0247:
   1091                      read_byte &= ~0x01 ;                      /* set bit low */
   \   1F02  720E              BCLR    #0,R6L
   \   1F04            ?0248:
   \   1F04  8D01              ADD.B   #1,R5L
   1092                  }
   1093              }
   1094              return read_byte ;
   \   1F06  40E2              BRA     ?0243
   \   1F08            ?0242:
   \   1F08  0CE9              MOV.B   R6L,R1L
   1095          }
   \   1F0A  6D76              POP     R6
   \   1F0C  6D75              POP     R5
   \   1F0E  5470              RTS
   1096          
   1097          /*************************************************************************
   1098          *
   1099          *  Write to AD-converter
   1100          *
   1101          *************************************************************************/
   1102          void WriteAdByte(unsigned char data)
   1103          {
   \   1F10            WriteAdByte:
   \   1F10  6DF5              PUSH    R5
   \   1F12  6DF6              PUSH    R6
   \   1F14  0C9D              MOV.B   R1L,R5L
   1104          
   1105              short i;
   1106          
   1107              for ( i = 0; i <  8; i++ ) {
   \   1F16  1966              SUB.W   R6,R6
   \   1F18            ?0250:
   \   1F18  79010008          MOV.W   #8,R1
   \   1F1C  1D16              CMP.W   R1,R6
   \   1F1E  4C1E              BGE     ?0249
   \   1F20            ?0251:
   1108                  P5DR &= ~ADCLK ;                                /*      set clock line low */
   \   1F20  7FBA7250          BCLR    #5,@186:8
   1109                  if ( data & 0x80 ) {                          /* data bit = 1? */
   \   1F24  0CD9              MOV.B   R5L,R1L
   \   1F26  E980              AND.B   #128,R1L
   \   1F28  4706              BEQ     ?0254
   \   1F2A            ?0253:
   1110                      P5DR |= ADDI ;                                /* set data high */
   \   1F2A  7FBA7030          BSET    #3,@186:8
   1111                  } else {
   \   1F2E  4004              BRA     ?0255
   \   1F30            ?0254:
   1112                      P5DR &= ~ADDI ;                               /* set data low */
   \   1F30  7FBA7230          BCLR    #3,@186:8
   \   1F34            ?0255:
   1113                  }
   1114                  data <<= 1 ;                             /* shift to next bit */
   \   1F34  100D              SHLL.B  R5L
   1115                  P5DR |= ADCLK ;                                 /*      set clock line high */
   \   1F36  7FBA7050          BSET    #5,@186:8
   \   1F3A  0B06              ADDS.W  #1,R6
   1116              }
   1117          }
   \   1F3C  40DA              BRA     ?0250
   \   1F3E            ?0249:
   \   1F3E  6D76              POP     R6
   \   1F40  6D75              POP     R5
   \   1F42  5470              RTS
   1118          
   1119          
   1120          
   1121          /*************************************************************************
   1122          *
   1123          *  Reset pointer to RX received data on RS485
   1124          *
   1125          *************************************************************************/
   1126          void ResetRxPointer(void) {
   \   1F44            ResetRxPointer:
   1127          
   1128              rx_indx = 1 ;
   \   1F44  F901              MOV.B   #1,R1L
   \   1F46  6A8900E2          MOV.B   R1L,@rx_indx:16
   1129              rx_hndx = 0 ;
   \   1F4A  F900              MOV.B   #0,R1L
   \   1F4C  6A8900E3          MOV.B   R1L,@rx_hndx:16
   1130              rx_start = 0 ;
   \   1F50  F900              MOV.B   #0,R1L
   \   1F52  6A8900E4          MOV.B   R1L,@rx_start:16
   1131              rx_buff[0] = 0 ;
   \   1F56  F900              MOV.B   #0,R1L
   \   1F58  6A890076          MOV.B   R1L,@rx_buff:16
   1132              rx_buff[1] = 0 ;
   \   1F5C  F900              MOV.B   #0,R1L
   \   1F5E  6A890077          MOV.B   R1L,@rx_buff+1:16
   1133              rx_buff[2] = 0 ;
   \   1F62  F900              MOV.B   #0,R1L
   \   1F64  6A890078          MOV.B   R1L,@rx_buff+2:16
   1134              rx_state = SYNC ;                   /* error in pack len */
   \   1F68  F900              MOV.B   #0,R1L
   \   1F6A  6A89033B          MOV.B   R1L,@rx_state:16
   1135              rx_timeout = OFF ;                 /* timeout on channel */
   \   1F6E  F900              MOV.B   #0,R1L
   \   1F70  6A8900E7          MOV.B   R1L,@rx_timeout:16
   1136          }
   \   1F74  5470              RTS
   1137          
   1138          /*************************************************************************
   1139          *
   1140          * Calculate rx checksum
   1141          *
   1142          *************************************************************************/
   1143          int CalcRxChecksum(void)
   1144          {
   \   1F76            CalcRxChecksum:
   \   1F76  6DF5              PUSH    R5
   \   1F78  6DF6              PUSH    R6
   1145          
   1146              int             cnt ;
   1147              unsigned char   csum ;
   1148          
   1149              csum = 0 ;
   \   1F7A  FD00              MOV.B   #0,R5L
   1150              for ( cnt=rx_start ; cnt < (rx_start+rx_packlen-2) ; cnt++ ) {
   \   1F7C  6A0900E4          MOV.B   @rx_start:16,R1L
   \   1F80  F100              MOV.B   #0,R1H
   \   1F82  0D16              MOV.W   R1,R6
   \   1F84            ?0257:
   \   1F84  6A0900E6          MOV.B   @rx_packlen:16,R1L
   \   1F88  F100              MOV.B   #0,R1H
   \   1F8A  6A0B00E4          MOV.B   @rx_start:16,R3L
   \   1F8E  08B9              ADD.B   R3L,R1L
   \   1F90  9100              ADDX.B  #0,R1H
   \   1F92  1B81              SUBS.W  #2,R1
   \   1F94  1D61              CMP.W   R6,R1
   \   1F96  4F12              BLE     ?0256
   \   1F98            ?0258:
   1151                  csum = crc[csum ^ rx_buff[cnt]] ;
   \   1F98  6E690076          MOV.B   @(rx_buff,R6),R1L
   \   1F9C  15D9              XOR.B   R5L,R1L
   \   1F9E  F100              MOV.B   #0,R1H
   \   1FA0  0911              ADD.W   R1,R1
   \   1FA2  6E1D0001          MOV.B   @(crc+1,R1),R5L
   \   1FA6  0B06              ADDS.W  #1,R6
   1152              }
   1153              if ( csum == (rx_buff[rx_start + rx_packlen - 2]) ) {
   \   1FA8  40DA              BRA     ?0257
   \   1FAA            ?0256:
   \   1FAA  6A0900E6          MOV.B   @rx_packlen:16,R1L
   \   1FAE  F100              MOV.B   #0,R1H
   \   1FB0  6A0B00E4          MOV.B   @rx_start:16,R3L
   \   1FB4  08B9              ADD.B   R3L,R1L
   \   1FB6  9100              ADDX.B  #0,R1H
   \   1FB8  6E1B0074          MOV.B   @(rx_buff-2,R1),R3L
   \   1FBC  1CDB              CMP.B   R5L,R3L
   \   1FBE  4606              BNE     ?0261
   \   1FC0            ?0260:
   1154                  return TRUE ;
   \   1FC0  79010001          MOV.W   #1,R1
   1155              } else {
   \   1FC4  4002              BRA     ?0262
   \   1FC6            ?0261:
   1156                  return FALSE ;
   \   1FC6  1911              SUB.W   R1,R1
   1157              }
   \   1FC8            ?0262:
   \   1FC8  6D76              POP     R6
   \   1FCA  6D75              POP     R5
   \   1FCC  5470              RTS
   1158          }
   1159          
   1160          
   1161          
   1162          /*************************************************************************
   1163          *
   1164          *  Handle rx data on RS485
   1165          *
   1166          *************************************************************************/
   1167          void HandleRxPacket(void)
   1168          {
   \   1FCE            HandleRxPacket:
   \   1FCE  6DF4              PUSH    R4
   \   1FD0  6DF5              PUSH    R5
   \   1FD2  6DF6              PUSH    R6
   1169              short     pointer, ndb, more ;
   1170          
   1171              Led(1, ON) ;
   \   1FD4  79010001          MOV.W   #1,R1
   \   1FD8  6DF1              MOV.W   R1,@-SP
   \   1FDA  79010001          MOV.W   #1,R1
   \   1FDE  5E0001DA          JSR     @Led:16
   \   1FE2  0B87              ADDS.W  #2,SP
   1172              sendtail = FALSE ;
   \   1FE4  F900              MOV.B   #0,R1L
   \   1FE6  6A89033D          MOV.B   R1L,@sendtail:16
   1173              more    = TRUE ;
   \   1FEA  79050001          MOV.W   #1,R5
   1174              pointer = 0 ;
   \   1FEE  1966              SUB.W   R6,R6
   1175              ndb = 2 ;                                           /* point to first command */
   \   1FF0  79040002          MOV.W   #2,R4
   1176              pointer = rx_start;                             /* Point to  command */
   \   1FF4  6A0900E4          MOV.B   @rx_start:16,R1L
   \   1FF8  F100              MOV.B   #0,R1H
   \   1FFA  0D16              MOV.W   R1,R6
   \   1FFC            ?0264:
   1177              while ( more && (pointer < (rx_packlen + rx_start)) ) {
   \   1FFC  0D51              MOV.W   R5,R1
   \   1FFE  4730              BEQ     ?0263
   \   2000  6A0900E4          MOV.B   @rx_start:16,R1L
   \   2004  F100              MOV.B   #0,R1H
   \   2006  6A0B00E6          MOV.B   @rx_packlen:16,R3L
   \   200A  08B9              ADD.B   R3L,R1L
   \   200C  9100              ADDX.B  #0,R1H
   \   200E  1D61              CMP.W   R6,R1
   \   2010  4F1E              BLE     ?0263
   \   2012            ?0267:
   \   2012            ?0266:
   \   2012            ?0265:
   1178                  pointer = pointer + ndb + 2;                /* Point to  command */
   1179                  ndb = rx_buff[pointer+1]    ;               /* Save pointer to next command */
   \   2012  0D41              MOV.W   R4,R1
   \   2014  0961              ADD.W   R6,R1
   \   2016  0B81              ADDS.W  #2,R1
   \   2018  0D16              MOV.W   R1,R6
   \   201A  6E1B0077          MOV.B   @(rx_buff+1,R1),R3L
   \   201E  F300              MOV.B   #0,R3H
   \   2020  0D34              MOV.W   R3,R4
   1180                  if ( !CheckAction(pointer) ) {
   \   2022  0D61              MOV.W   R6,R1
   \   2024  5E000000          JSR     @CheckAction:16
   \   2028  0D11              MOV.W   R1,R1
   \   202A  4602              BNE     ?0269
   \   202C            ?0268:
   1181                      more = FALSE ;                              /* terminate while  */
   \   202C  1955              SUB.W   R5,R5
   \   202E            ?0269:
   1182                  }
   1183              }
   1184              Led(1, OFF) ;
   \   202E  40CC              BRA     ?0264
   \   2030            ?0263:
   \   2030  1911              SUB.W   R1,R1
   \   2032  6DF1              MOV.W   R1,@-SP
   \   2034  79010001          MOV.W   #1,R1
   \   2038  5E0001DA          JSR     @Led:16
   \   203C  0B87              ADDS.W  #2,SP
   1185          }
   \   203E  6D76              POP     R6
   \   2040  6D75              POP     R5
   \   2042  6D74              POP     R4
   \   2044  5470              RTS
   1186          
   1187          /*************************************************************************
   1188          *
   1189          *  Receive data on RS485
   1190          *
   1191          *************************************************************************/
   1192          int ReceiveRxPacket(void)
   1193          {
   \   2046            ReceiveRxPacket:
   \   2046  6DF6              PUSH    R6
   1194              int   ret_val, cnt, new_sync ;
   1195          
   1196              ret_val = FALSE ;
   \   2048  1966              SUB.W   R6,R6
   1197              rx_timeout = RX_TO_TIME ;               /* timeout on channel */
   \   204A  F9E8              MOV.B   #232,R1L
   \   204C  6A8900E7          MOV.B   R1L,@rx_timeout:16
   \   2050            ?0271:
   1198              while ( rx_indx > rx_hndx ) {                     /* more char to check */
   \   2050  6A0900E3          MOV.B   @rx_hndx:16,R1L
   \   2054  6A0B00E2          MOV.B   @rx_indx:16,R3L
   \   2058  1C9B              CMP.B   R1L,R3L
   \   205A  4204              BHI     $+6
   \   205C  5A00217E          JMP     @?0270:16
   \   2060            ?0272:
   1199                  switch ( rx_state ) {                     /* check state */
   \   2060  6A09033B          MOV.B   @rx_state:16,R1L
   \   2064  A900              CMP.B   #0,R1L
   \   2066  4604              BNE     ?0275
   \   2068            ?0274:
   1200                  case SYNC :
   1201                      // all functionallity moved to inerrupt routine for receive
   1202                      // on version 10
   1203                      break ;
   \   2068  5A002168          JMP     @?0273:16
   \   206C            ?0275:
   \   206C  A901              CMP.B   #1,R1L
   \   206E  4704              BEQ     $+6
   \   2070  5A0020F0          JMP     @?0283:16
   1204                  case HEADER :
   1205                      if ( (rx_hndx-rx_start) >= 3 ) {             /* rec. header */
   \   2074  6A0900E3          MOV.B   @rx_hndx:16,R1L
   \   2078  F100              MOV.B   #0,R1H
   \   207A  6A0B00E4          MOV.B   @rx_start:16,R3L
   \   207E  F300              MOV.B   #0,R3H
   \   2080  1931              SUB.W   R3,R1
   \   2082  A903              CMP.B   #3,R1L
   \   2084  B100              SUBX.B  #0,R1H
   \   2086  4D64              BLT     ?0277
   \   2088            ?0276:
   1206                          rx_packlen = ((rx_buff[rx_start+2] * 256) +
   1207                                        rx_buff[rx_start+3] ) ;             /* calc. pack.len */
   \   2088  6A0900E4          MOV.B   @rx_start:16,R1L
   \   208C  F100              MOV.B   #0,R1H
   \   208E  6A0B00E4          MOV.B   @rx_start:16,R3L
   \   2092  F300              MOV.B   #0,R3H
   \   2094  6E380078          MOV.B   @(rx_buff+2,R3),R0L
   \   2098  F800              MOV.B   #0,R0L
   \   209A  6E1B0079          MOV.B   @(rx_buff+3,R1),R3L
   \   209E  08B8              ADD.B   R3L,R0L
   \   20A0  6A8800E6          MOV.B   R0L,@rx_packlen:16
   1208                          if ( (rx_packlen < ((short) RX_SIZE-rx_hndx)) &&    /* chk. header */
   1209                               (rx_packlen >= MIN_PACK_LEN) &&
   1210                               (rx_buff[rx_start+1] != 0xff) ) {
   \   20A4  6A0900E3          MOV.B   @rx_hndx:16,R1L
   \   20A8  F100              MOV.B   #0,R1H
   \   20AA  79030068          MOV.W   #104,R3
   \   20AE  1913              SUB.W   R1,R3
   \   20B0  6A0900E6          MOV.B   @rx_packlen:16,R1L
   \   20B4  F100              MOV.B   #0,R1H
   \   20B6  1D13              CMP.W   R1,R3
   \   20B8  4F2E              BLE     ?0279
   \   20BA  6A0900E6          MOV.B   @rx_packlen:16,R1L
   \   20BE  A905              CMP.B   #5,R1L
   \   20C0  4526              BCS     ?0279
   \   20C2  6A0900E4          MOV.B   @rx_start:16,R1L
   \   20C6  F100              MOV.B   #0,R1H
   \   20C8  6E1B0077          MOV.B   @(rx_buff+1,R1),R3L
   \   20CC  ABFF              CMP.B   #255,R3L
   \   20CE  4718              BEQ     ?0279
   \   20D0            ?0281:
   \   20D0            ?0280:
   \   20D0            ?0278:
   1211                              rx_state = RECEIVE ;                    /* header ok */
   \   20D0  F902              MOV.B   #2,R1L
   \   20D2  6A89033B          MOV.B   R1L,@rx_state:16
   1212                              rx_counter = rx_hndx - rx_start + 1 ;
   \   20D6  6A0900E3          MOV.B   @rx_hndx:16,R1L
   \   20DA  6A0B00E4          MOV.B   @rx_start:16,R3L
   \   20DE  18B9              SUB.B   R3L,R1L
   \   20E0  8901              ADD.B   #1,R1L
   \   20E2  6A8900E5          MOV.B   R1L,@rx_counter:16
   1213                          } else {
   \   20E6  4004              BRA     ?0282
   \   20E8            ?0279:
   1214                              ResetRxPointer() ;
   \   20E8  5E001F44          JSR     @ResetRxPointer:16
   \   20EC            ?0282:
   \   20EC            ?0277:
   1215                          }
   1216                      }
   1217                      break ;
   \   20EC  5A002168          JMP     @?0273:16
   \   20F0            ?0283:
   \   20F0  A902              CMP.B   #2,R1L
   \   20F2  4704              BEQ     $+6
   \   20F4  5A002164          JMP     @?0297:16
   1218                  case RECEIVE :
   1219                      if ( ++rx_counter >= rx_packlen ) {
   \   20F8  6A0900E5          MOV.B   @rx_counter:16,R1L
   \   20FC  8901              ADD.B   #1,R1L
   \   20FE  6A8900E5          MOV.B   R1L,@rx_counter:16
   \   2102  6A0B00E6          MOV.B   @rx_packlen:16,R3L
   \   2106  1CB9              CMP.B   R3L,R1L
   \   2108  4558              BCS     ?0285
   \   210A            ?0284:
   1220                          if ( (rx_buff[rx_packlen + rx_start-1]) == ETX ) {
   \   210A  6A0900E4          MOV.B   @rx_start:16,R1L
   \   210E  F100              MOV.B   #0,R1H
   \   2110  6A0B00E6          MOV.B   @rx_packlen:16,R3L
   \   2114  08B9              ADD.B   R3L,R1L
   \   2116  9100              ADDX.B  #0,R1H
   \   2118  6E1B0075          MOV.B   @(rx_buff-1,R1),R3L
   \   211C  AB03              CMP.B   #3,R3L
   \   211E  4642              BNE     ?0287
   \   2120            ?0286:
   1221                              if ( CalcRxChecksum() ) {
   \   2120  5E001F76          JSR     @CalcRxChecksum:16
   \   2124  0D11              MOV.W   R1,R1
   \   2126  4736              BEQ     ?0289
   \   2128            ?0288:
   1222                                  if ( rx_buff[rx_start + 1] < PC_START_ADDRESS ) {
   \   2128  6A0900E4          MOV.B   @rx_start:16,R1L
   \   212C  F100              MOV.B   #0,R1H
   \   212E  6E1B0077          MOV.B   @(rx_buff+1,R1),R3L
   \   2132  ABF0              CMP.B   #240,R3L
   \   2134  4400              BCC     ?0291
   \   2136            ?0290:
   \   2136            ?0291:
   1223                                  }
   1224                                  if ( (rx_buff[rx_start] == GetMyAddress())||
   1225                                       (rx_buff[rx_start] == 0) ) {        /* don't use address*/
   \   2136  6A0900E4          MOV.B   @rx_start:16,R1L
   \   213A  F100              MOV.B   #0,R1H
   \   213C  6DF1              MOV.W   R1,@-SP
   \   213E  5E0001C4          JSR     @GetMyAddress:16
   \   2142  6D73              MOV.W   @SP+,R3
   \   2144  6E380076          MOV.B   @(rx_buff,R3),R0L
   \   2148  1C98              CMP.B   R1L,R0L
   \   214A  470C              BEQ     ?0292
   \   214C  6A0900E4          MOV.B   @rx_start:16,R1L
   \   2150  F100              MOV.B   #0,R1H
   \   2152  6E1B0076          MOV.B   @(rx_buff,R1),R3L
   \   2156  4604              BNE     ?0293
   \   2158            ?0294:
   \   2158            ?0295:
   \   2158            ?0292:
   1226                                      ret_val = TRUE ;
   \   2158  79060001          MOV.W   #1,R6
   \   215C            ?0293:
   1227                                  }
   1228                              } else {
   \   215C  4004              BRA     ?0296
   \   215E            ?0289:
   1229                                  ResetRxPointer() ;              /* reset pointer */
   \   215E  5E001F44          JSR     @ResetRxPointer:16
   \   2162            ?0296:
   \   2162            ?0287:
   \   2162            ?0285:
   1230                              }
   1231                          }
   1232                      }
   1233                      break ;
   \   2162  4004              BRA     ?0273
   \   2164            ?0297:
   1234                  default :
   1235                      ResetRxPointer() ;                          /* reset pointer */
   \   2164  5E001F44          JSR     @ResetRxPointer:16
   1236                      break ;
   \   2168            ?0273:
   1237                  }                                                       /* end switch */
   1238                  if ( ++rx_hndx >= RX_SIZE ) {                 /* check pointer */
   \   2168  6A0900E3          MOV.B   @rx_hndx:16,R1L
   \   216C  8901              ADD.B   #1,R1L
   \   216E  6A8900E3          MOV.B   R1L,@rx_hndx:16
   \   2172  A968              CMP.B   #104,R1L
   \   2174  4504              BCS     ?0299
   \   2176            ?0298:
   1239                      ResetRxPointer() ;                          /* reset pointer */
   \   2176  5E001F44          JSR     @ResetRxPointer:16
   \   217A            ?0299:
   1240                  }
   1241              }                                                           /* end while.. */
   1242              return ret_val ;
   \   217A  5A002050          JMP     @?0271:16
   \   217E            ?0270:
   \   217E  0D61              MOV.W   R6,R1
   1243          }
   \   2180  6D76              POP     R6
   \   2182  5470              RTS
   1244          
   1245          
   1246          
   1247          
   1248          /*************************************************************************
   1249          *
   1250          *      IRQ 0    (Not used)
   1251          *
   1252          *************************************************************************/
   1253          interrupt [IRQ_0] void Irq0Int(void)
   1254          {
   \   2184            Irq0Int:
   1255          
   1256          }
   \   2184  5670              RTE
   1257          
   1258          
   1259          /*************************************************************************
   1260          *
   1261          *      IRQ 1 , interrupt from AD converter
   1262          *
   1263          *************************************************************************/
   1264          interrupt [IRQ_1] void Irq1Int(void)
   1265          {
   \   2186            Irq1Int:
   \   2186  6DF1              PUSH    R1
   1266          
   1267              if ( ad_mode & 0x20 ) {                       /* ok for int */
   \   2188  6A09031B          MOV.B   @ad_mode:16,R1L
   \   218C  E920              AND.B   #32,R1L
   \   218E  4712              BEQ     ?0301
   \   2190            ?0300:
   1268                  ad_state++ ;                                /* Go to next state */
   \   2190  6A09031A          MOV.B   @ad_state:16,R1L
   \   2194  8901              ADD.B   #1,R1L
   \   2196  6A89031A          MOV.B   R1L,@ad_state:16
   1269                  ad_mode &= ~0x20;                           /* int ok, reset flag */
   \   219A  7901031B          MOV.W   #ad_mode,R1
   \   219E  7D107250          BCLR    #5,@R1
   \   21A2            ?0301:
   1270              }
   1271          
   1272          }
   \   21A2  6D71              POP     R1
   \   21A4  5670              RTE
   1273          
   1274          
   1275          /*************************************************************************
   1276          *
   1277          *      IRQ 2 , external int from connector
   1278          *
   1279          *************************************************************************/
   1280          interrupt [IRQ_2] void Irq2Int(void)
   1281          {
   \   21A6            Irq2Int:
   1282          
   1283          }
   \   21A6  5670              RTE
   1284          
   1285          
   1286          /*************************************************************************
   1287          *
   1288          *  Free running timer capture interrupt routine
   1289          *
   1290          *************************************************************************/
   1291          interrupt [FRT_ICI] void FrtcInt(void)
   1292          {
   \   21A8            FrtcInt:
   \   21A8  6DF6              PUSH    R6
   1293          
   1294              unsigned temp_icr;
   1295          
   1296              temp_icr = FRT_ICR ;
   \   21AA  6B06FF98          MOV.W   @-104:16,R6
   1297              FRT_TCSR &= ~TCSRF_ICF;     /* clear input capt flag */
   \   21AE  7F917270          BCLR    #7,@145:8
   1298          }
   \   21B2  6D76              POP     R6
   \   21B4  5670              RTE
   1299          
   1300          /*************************************************************************
   1301          *
   1302          *  Free running timer overflow interrupt routine
   1303          *
   1304          *************************************************************************/
   1305          interrupt [FRT_FOVI] void FrtoInt(void)
   1306          {
   \   21B6            FrtoInt:
   1307          
   1308              FRT_TCSR &= ~TCSRF_OVF;     /* clear overflow flag */
   \   21B6  7F917240          BCLR    #4,@145:8
   1309          }
   \   21BA  5670              RTE
   1310          
   1311          /*************************************************************************
   1312          *
   1313          *  Timer0 interrupt routine for Washtrac
   1314          *
   1315          *  This routine is called each msec
   1316          *
   1317          *************************************************************************/
   1318          interrupt [TMR_CMI0A] void Tim0Int(void)
   1319          {
   \   21BC            Tim0Int:
   \   21BC  6DF1              PUSH    R1
   \   21BE  6DF3              PUSH    R3
   1320              TMR0_TCSR &= ~(TCSR_CMFB | TCSR_CMFA | TCSR_OVF);   // Clear match to reenable interrupt
   \   21C0  29C9              MOV.B   @201:8,R1L
   \   21C2  E91F              AND.B   #31,R1L
   \   21C4  39C9              MOV.B   R1L,@201:8
   1321          
   1322              highlevel = P2DR;                       // read and store highlevel status
   \   21C6  29B3              MOV.B   @179:8,R1L
   \   21C8  6A8902B0          MOV.B   R1L,@highlevel:16
   1323          
   1324          
   1325              if ( (P7DR & 0x01) ^ (washtrac_prev & 0x01) ) {   //read input 1
   \   21CC  29BE              MOV.B   @190:8,R1L
   \   21CE  E901              AND.B   #1,R1L
   \   21D0  6A0B02BA          MOV.B   @washtrac_prev:16,R3L
   \   21D4  EB01              AND.B   #1,R3L
   \   21D6  159B              XOR.B   R1L,R3L
   \   21D8  470A              BEQ     ?0303
   \   21DA            ?0302:
   1326                  washtrac[0] ++;
   \   21DA  6B0102B2          MOV.W   @washtrac:16,R1
   \   21DE  0B01              ADDS.W  #1,R1
   \   21E0  6B8102B2          MOV.W   R1,@washtrac:16
   \   21E4            ?0303:
   1327              }
   1328              if ( (P7DR & 0x02) ^ (washtrac_prev & 0x02) ) {   //read input 2
   \   21E4  29BE              MOV.B   @190:8,R1L
   \   21E6  E902              AND.B   #2,R1L
   \   21E8  6A0B02BA          MOV.B   @washtrac_prev:16,R3L
   \   21EC  EB02              AND.B   #2,R3L
   \   21EE  159B              XOR.B   R1L,R3L
   \   21F0  470A              BEQ     ?0305
   \   21F2            ?0304:
   1329                  washtrac[1] ++;
   \   21F2  6B0102B4          MOV.W   @washtrac+2:16,R1
   \   21F6  0B01              ADDS.W  #1,R1
   \   21F8  6B8102B4          MOV.W   R1,@washtrac+2:16
   \   21FC            ?0305:
   1330              }
   1331              if ( (P7DR & 0x04) ^ (washtrac_prev & 0x04) ) {   //read input 4
   \   21FC  29BE              MOV.B   @190:8,R1L
   \   21FE  E904              AND.B   #4,R1L
   \   2200  6A0B02BA          MOV.B   @washtrac_prev:16,R3L
   \   2204  EB04              AND.B   #4,R3L
   \   2206  159B              XOR.B   R1L,R3L
   \   2208  470A              BEQ     ?0307
   \   220A            ?0306:
   1332                  washtrac[2] ++;
   \   220A  6B0102B6          MOV.W   @washtrac+4:16,R1
   \   220E  0B01              ADDS.W  #1,R1
   \   2210  6B8102B6          MOV.W   R1,@washtrac+4:16
   \   2214            ?0307:
   1333              }
   1334              if ( (P7DR & 0x08) ^ (washtrac_prev & 0x08) ) {   //read input 4
   \   2214  29BE              MOV.B   @190:8,R1L
   \   2216  E908              AND.B   #8,R1L
   \   2218  6A0B02BA          MOV.B   @washtrac_prev:16,R3L
   \   221C  EB08              AND.B   #8,R3L
   \   221E  159B              XOR.B   R1L,R3L
   \   2220  470A              BEQ     ?0309
   \   2222            ?0308:
   1335                  washtrac[3] ++;
   \   2222  6B0102B8          MOV.W   @washtrac+6:16,R1
   \   2226  0B01              ADDS.W  #1,R1
   \   2228  6B8102B8          MOV.W   R1,@washtrac+6:16
   \   222C            ?0309:
   1336              }
   1337              washtrac_prev = P7DR;                             //remember last state
   \   222C  29BE              MOV.B   @190:8,R1L
   \   222E  6A8902BA          MOV.B   R1L,@washtrac_prev:16
   1338              
   1339          }
   \   2232  6D73              POP     R3
   \   2234  6D71              POP     R1
   \   2236  5670              RTE
   1340          /*************************************************************************
   1341          *
   1342          *  Timer interrupt routine
   1343          *
   1344          *  This routine is called each msec
   1345          *
   1346          *************************************************************************/
   1347          interrupt [TMR_CMI1A] void TimInt(void)
   1348          {
   \   2238            TimInt:
   \   2238  6DF0              PUSH    R0
   \   223A  6DF1              PUSH    R1
   \   223C  6DF2              PUSH    R2
   \   223E  6DF3              PUSH    R3
   1349          
   1350              TMR1_TCSR &= ~(TCSR_CMFB | TCSR_CMFA | TCSR_OVF);
   \   2240  29D1              MOV.B   @209:8,R1L
   \   2242  E91F              AND.B   #31,R1L
   \   2244  39D1              MOV.B   R1L,@209:8
   1351              /* Clear match to reenable interrupt */
   1352              ms_cnt++;
   \   2246  6B01023C          MOV.W   @ms_cnt:16,R1
   \   224A  0B01              ADDS.W  #1,R1
   \   224C  6B81023C          MOV.W   R1,@ms_cnt:16
   1353          
   1354              if ( ms_delay_cnt ) {                         /* count down 1 ms delay */
   \   2250  6B01031C          MOV.W   @ms_delay_cnt:16,R1
   \   2254  470A              BEQ     ?0311
   \   2256            ?0310:
   1355                  ms_delay_cnt-- ;
   \   2256  6B01031C          MOV.W   @ms_delay_cnt:16,R1
   \   225A  1B01              SUBS.W  #1,R1
   \   225C  6B81031C          MOV.W   R1,@ms_delay_cnt:16
   \   2260            ?0311:
   1356              }
   1357          
   1358              if ( !--sec_cnt ) {               /* counter for 1 sec. */
   \   2260  6B01023A          MOV.W   @sec_cnt:16,R1
   \   2264  1B01              SUBS.W  #1,R1
   \   2266  6B81023A          MOV.W   R1,@sec_cnt:16
   \   226A  4628              BNE     ?0313
   \   226C            ?0312:
   1359                  sec_cnt = SEC_CNT_INIT;
   \   226C  790103E8          MOV.W   #1000,R1
   \   2270  6B81023A          MOV.W   R1,@sec_cnt:16
   1360                  if ( time_b_cnt ) {           /* timer for temperature readings */
   \   2274  6A090236          MOV.B   @time_b_cnt:16,R1L
   \   2278  470A              BEQ     ?0315
   \   227A            ?0314:
   1361                      time_b_cnt-- ;
   \   227A  6A090236          MOV.B   @time_b_cnt:16,R1L
   \   227E  89FF              ADD.B   #-1,R1L
   \   2280  6A890236          MOV.B   R1L,@time_b_cnt:16
   \   2284            ?0315:
   1362                  }
   1363                  if ( time_e_cnt ) {           /* timer for eed check*/
   \   2284  6A090237          MOV.B   @time_e_cnt:16,R1L
   \   2288  470A              BEQ     ?0317
   \   228A            ?0316:
   1364                      time_e_cnt-- ;
   \   228A  6A090237          MOV.B   @time_e_cnt:16,R1L
   \   228E  89FF              ADD.B   #-1,R1L
   \   2290  6A890237          MOV.B   R1L,@time_e_cnt:16
   \   2294            ?0317:
   \   2294            ?0313:
   1365                  }
   1366              }
   1367          
   1368              if ( ad_settling ) {                          /* count down ad setling time */
   \   2294  6B01031E          MOV.W   @ad_settling:16,R1
   \   2298  4714              BEQ     ?0319
   \   229A            ?0318:
   1369                  if ( !--ad_settling ) {
   \   229A  6B01031E          MOV.W   @ad_settling:16,R1
   \   229E  1B01              SUBS.W  #1,R1
   \   22A0  6B81031E          MOV.W   R1,@ad_settling:16
   \   22A4  4608              BNE     ?0321
   \   22A6            ?0320:
   1370                      ad_mode |= 0x20;                        /* Ok for int 1 */
   \   22A6  7901031B          MOV.W   #ad_mode,R1
   \   22AA  7D107050          BSET    #5,@R1
   \   22AE            ?0321:
   \   22AE            ?0319:
   1371                  }
   1372              }
   1373              /* timeout ad converter */
   1374              if ( ad_timeout_cnt ) {
   \   22AE  6B010238          MOV.W   @ad_timeout_cnt:16,R1
   \   22B2  472A              BEQ     ?0323
   \   22B4            ?0322:
   1375                  if ( !--ad_timeout_cnt ) {
   \   22B4  6B010238          MOV.W   @ad_timeout_cnt:16,R1
   \   22B8  1B01              SUBS.W  #1,R1
   \   22BA  6B810238          MOV.W   R1,@ad_timeout_cnt:16
   \   22BE  461E              BNE     ?0325
   \   22C0            ?0324:
   1376                      ad_state = IDLE ;
   \   22C0  F907              MOV.B   #7,R1L
   \   22C2  6A89031A          MOV.B   R1L,@ad_state:16
   1377                      WriteAdByte(0xff) ;             /* Reset the ad */
   \   22C6  F9FF              MOV.B   #255,R1L
   \   22C8  5E001F10          JSR     @WriteAdByte:16
   1378                      WriteAdByte(0xff) ;             /* with */
   \   22CC  F9FF              MOV.B   #255,R1L
   \   22CE  5E001F10          JSR     @WriteAdByte:16
   1379                      WriteAdByte(0xff) ;             /* 32 (8*4)*/
   \   22D2  F9FF              MOV.B   #255,R1L
   \   22D4  5E001F10          JSR     @WriteAdByte:16
   1380                      WriteAdByte(0xff) ;             /* write pulses*/
   \   22D8  F9FF              MOV.B   #255,R1L
   \   22DA  5E001F10          JSR     @WriteAdByte:16
   \   22DE            ?0325:
   \   22DE            ?0323:
   1381                  }
   1382              }
   1383          
   1384              if ( rx_timeout ) {                               /* check timeout on tx0  */
   \   22DE  6A0900E7          MOV.B   @rx_timeout:16,R1L
   \   22E2  4710              BEQ     ?0327
   \   22E4            ?0326:
   1385                  if ( !--rx_timeout ) {
   \   22E4  6A0900E7          MOV.B   @rx_timeout:16,R1L
   \   22E8  89FF              ADD.B   #-1,R1L
   \   22EA  6A8900E7          MOV.B   R1L,@rx_timeout:16
   \   22EE  4604              BNE     ?0329
   \   22F0            ?0328:
   1386                      ResetRxPointer();
   \   22F0  5E001F44          JSR     @ResetRxPointer:16
   \   22F4            ?0329:
   \   22F4            ?0327:
   1387                  }
   1388              }
   1389          
   1390          
   1391              if ( tx_tail ) {                                  /* check tx0 driver */
   \   22F4  6A0900E0          MOV.B   @tx_tail:16,R1L
   \   22F8  472A              BEQ     ?0331
   \   22FA            ?0330:
   1392                  if ( !--tx_tail ) {
   \   22FA  6A0900E0          MOV.B   @tx_tail:16,R1L
   \   22FE  89FF              ADD.B   #-1,R1L
   \   2300  6A8900E0          MOV.B   R1L,@tx_tail:16
   \   2304  461E              BNE     ?0333
   \   2306            ?0332:
   1393                      TxDriver(OFF);
   \   2306  1911              SUB.W   R1,R1
   \   2308  5E00022C          JSR     @TxDriver:16
   1394                      tx_complete = TRUE;
   \   230C  F901              MOV.B   #1,R1L
   \   230E  6A89033C          MOV.B   R1L,@tx_complete:16
   1395                      ResetRxPointer() ;          /* reset pointer */
   \   2312  5E001F44          JSR     @ResetRxPointer:16
   1396                      Led(1, OFF) ;
   \   2316  1911              SUB.W   R1,R1
   \   2318  6DF1              MOV.W   R1,@-SP
   \   231A  79010001          MOV.W   #1,R1
   \   231E  5E0001DA          JSR     @Led:16
   \   2322  0B87              ADDS.W  #2,SP
   \   2324            ?0333:
   \   2324            ?0331:
   1397                  }
   1398              }
   1399          
   1400              if ( wait_for_pc ) {                          /* delay before sending ch0 */
   \   2324  6A0900E1          MOV.B   @wait_for_pc:16,R1L
   \   2328  4740              BEQ     ?0335
   \   232A            ?0334:
   1401                  ad_mode |= 0x01 ;                /* mark that byte as sent */
   \   232A  7901031B          MOV.W   #ad_mode,R1
   \   232E  7D107000          BSET    #0,@R1
   1402                  if ( !--wait_for_pc ) {
   \   2332  6A0900E1          MOV.B   @wait_for_pc:16,R1L
   \   2336  89FF              ADD.B   #-1,R1L
   \   2338  6A8900E1          MOV.B   R1L,@wait_for_pc:16
   \   233C  462C              BNE     ?0337
   \   233E            ?0336:
   1403                      SCI0_TDR = tx_buff[tx_indx++];
   \   233E  6A0900DE          MOV.B   @tx_indx:16,R1L
   \   2342  0A09              INC.B   R1L
   \   2344  6A8900DE          MOV.B   R1L,@tx_indx:16
   \   2348  1A09              DEC.B   R1L
   \   234A  F100              MOV.B   #0,R1H
   \   234C  6E1B0000          MOV.B   @(tx_buff,R1),R3L
   \   2350  3BDB              MOV.B   R3L,@219:8
   1404                      SCI0_SSR &= ~SSR_TDRE;              /* clear TDRE-flag */
   \   2352  7FDC7270          BCLR    #7,@220:8
   1405                      SCI0_SCR |= SCR_TIE;                    /*  enable  tx int */
   \   2356  7FDA7070          BSET    #7,@218:8
   1406                      Led(1, ON) ;
   \   235A  79010001          MOV.W   #1,R1
   \   235E  6DF1              MOV.W   R1,@-SP
   \   2360  79010001          MOV.W   #1,R1
   \   2364  5E0001DA          JSR     @Led:16
   \   2368  0B87              ADDS.W  #2,SP
   \   236A            ?0337:
   \   236A            ?0335:
   1407                  }
   1408              }
   1409          }
   \   236A  6D73              POP     R3
   \   236C  6D72              POP     R2
   \   236E  6D71              POP     R1
   \   2370  6D70              POP     R0
   \   2372  5670              RTE
   1410          
   1411          
   1412          /*************************************************************************
   1413          *
   1414          *  Transmit interrupt routine  TX0
   1415          *
   1416          *  This routine is called on transmition on serial line 0 (RS485)
   1417          *
   1418          ****************************************************************************/
   1419          interrupt [SCI_TXI0] void Tx0Int(void)
   1420          {
   \   2374            Tx0Int:
   \   2374  6DF1              PUSH    R1
   \   2376  6DF3              PUSH    R3
   \   2378  6DF6              PUSH    R6
   1421          
   1422              char status;
   1423          
   1424              status = SCI0_SSR;
   \   237A  2EDC              MOV.B   @220:8,R6L
   1425              if ( tx_indx < tx_bytes ) {        /* More to send ? */
   \   237C  6A0900DF          MOV.B   @tx_bytes:16,R1L
   \   2380  6A0B00DE          MOV.B   @tx_indx:16,R3L
   \   2384  1C9B              CMP.B   R1L,R3L
   \   2386  4424              BCC     ?0339
   \   2388            ?0338:
   1426                  SCI0_TDR = tx_buff[tx_indx++];
   \   2388  6A0900DE          MOV.B   @tx_indx:16,R1L
   \   238C  0A09              INC.B   R1L
   \   238E  6A8900DE          MOV.B   R1L,@tx_indx:16
   \   2392  1A09              DEC.B   R1L
   \   2394  F100              MOV.B   #0,R1H
   \   2396  6E1B0000          MOV.B   @(tx_buff,R1),R3L
   \   239A  3BDB              MOV.B   R3L,@219:8
   1427                  SCI0_SSR = status & ~SSR_TDRE;        /* clear TDRE-flag */
   \   239C  0CE9              MOV.B   R6L,R1L
   \   239E  E97F              AND.B   #127,R1L
   \   23A0  39DC              MOV.B   R1L,@220:8
   1428                  ad_mode |= 0x01 ;               /* mark that byte are sent */
   \   23A2  7901031B          MOV.W   #ad_mode,R1
   \   23A6  7D107000          BSET    #0,@R1
   1429              } else {
   \   23AA  400A              BRA     ?0340
   \   23AC            ?0339:
   1430                  SCI0_SCR &= ~SCR_TIE;             /* Disable tx int */
   \   23AC  7FDA7270          BCLR    #7,@218:8
   1431                  tx_tail = TXTAIL ;            /* driver on for last char */
   \   23B0  F902              MOV.B   #2,R1L
   \   23B2  6A8900E0          MOV.B   R1L,@tx_tail:16
   \   23B6            ?0340:
   1432              }
   1433          }
   \   23B6  6D76              POP     R6
   \   23B8  6D73              POP     R3
   \   23BA  6D71              POP     R1
   \   23BC  5670              RTE
   1434          
   1435          
   1436          /*************************************************************************
   1437          *
   1438          *  Error interrupt routine
   1439          *
   1440          *  Error on RS485 port 0 goes here.
   1441          *
   1442          *************************************************************************/
   1443          interrupt [SCI_ERI0] void Err0Int(void)
   1444          {
   \   23BE            Err0Int:
   \   23BE  6DF1              PUSH    R1
   \   23C0  6DF6              PUSH    R6
   1445          
   1446              char status;
   1447          
   1448              status = SCI0_SSR;
   1449              SCI0_SSR = status & ~(SSR_ORER | SSR_FER | SSR_PER);
   \   23C2  29DC              MOV.B   @220:8,R1L
   \   23C4  0C9E              MOV.B   R1L,R6L
   \   23C6  E9C7              AND.B   #199,R1L
   \   23C8  39DC              MOV.B   R1L,@220:8
   1450          
   1451          }
   \   23CA  6D76              POP     R6
   \   23CC  6D71              POP     R1
   \   23CE  5670              RTE
   1452          
   1453          
   1454          /*************************************************************************
   1455          *
   1456          *  Receive interrupt routine  RX0
   1457          *
   1458          *  Char received on serial port 0
   1459          *
   1460          *************************************************************************/
   1461          interrupt [SCI_RXI0] void Rx0Int(void)
   1462          {
   \   23D0            Rx0Int:
   \   23D0  6DF0              PUSH    R0
   \   23D2  6DF1              PUSH    R1
   \   23D4  6DF2              PUSH    R2
   \   23D6  6DF3              PUSH    R3
   \   23D8  6DF5              PUSH    R5
   \   23DA  6DF6              PUSH    R6
   1463          
   1464              char status, bufch;
   1465          
   1466              status = SCI0_SSR;
   \   23DC  2DDC              MOV.B   @220:8,R5L
   1467              bufch = SCI0_RDR;
   \   23DE  2EDD              MOV.B   @221:8,R6L
   1468          
   1469          
   1470              if ( tx_complete ) {                      /* ok to receive? */
   \   23E0  6A09033C          MOV.B   @tx_complete:16,R1L
   \   23E4  4604              BNE     $+6
   \   23E6  5A002460          JMP     @?0342:16
   \   23EA            ?0341:
   1471                  switch ( rx_state ) {                     /* check state */
   \   23EA  6A09033B          MOV.B   @rx_state:16,R1L
   \   23EE  A900              CMP.B   #0,R1L
   \   23F0  4650              BNE     ?0351
   \   23F2            ?0344:
   1472                  case SYNC :
   1473                      if ( bufch == STX ) {
   \   23F2  AE02              CMP.B   #2,R6L
   \   23F4  460C              BNE     ?0346
   \   23F6            ?0345:
   1474                          sync_cnt ++ ;               // cont sync
   \   23F6  6A0900E8          MOV.B   @sync_cnt:16,R1L
   \   23FA  8901              ADD.B   #1,R1L
   \   23FC  6A8900E8          MOV.B   R1L,@sync_cnt:16
   1475                      } else if ( sync_cnt >= 2 ) {
   \   2400  403E              BRA     ?0347
   \   2402            ?0346:
   \   2402  6A0900E8          MOV.B   @sync_cnt:16,R1L
   \   2406  A902              CMP.B   #2,R1L
   \   2408  4530              BCS     ?0349
   \   240A            ?0348:
   1476                          sync_cnt = 0 ;              // reset counter
   \   240A  F900              MOV.B   #0,R1L
   \   240C  6A8900E8          MOV.B   R1L,@sync_cnt:16
   1477                          rx_state = HEADER ;
   \   2410  F901              MOV.B   #1,R1L
   \   2412  6A89033B          MOV.B   R1L,@rx_state:16
   1478                          rx_indx = 0 ;
   \   2416  F900              MOV.B   #0,R1L
   \   2418  6A8900E2          MOV.B   R1L,@rx_indx:16
   1479                          rx_hndx = 0 ;
   1480                          rx_start = rx_hndx ;            /* start after the two STX */
   \   241C  F900              MOV.B   #0,R1L
   \   241E  6A8900E3          MOV.B   R1L,@rx_hndx:16
   \   2422  6A8900E4          MOV.B   R1L,@rx_start:16
   1481                          rx_buff[rx_indx++] = bufch;
   \   2426  6A0900E2          MOV.B   @rx_indx:16,R1L
   \   242A  0A09              INC.B   R1L
   \   242C  6A8900E2          MOV.B   R1L,@rx_indx:16
   \   2430  1A09              DEC.B   R1L
   \   2432  F100              MOV.B   #0,R1H
   \   2434  6E9E0076          MOV.B   R6L,@(rx_buff,R1)
   1482                      } else {
   \   2438  4006              BRA     ?0350
   \   243A            ?0349:
   1483                          sync_cnt = 0 ;                  // start over once more
   \   243A  F900              MOV.B   #0,R1L
   \   243C  6A8900E8          MOV.B   R1L,@sync_cnt:16
   \   2440            ?0350:
   \   2440            ?0347:
   1484                      }
   1485                      break;
   \   2440  4012              BRA     ?0343
   \   2442            ?0351:
   1486                  default:
   1487                      rx_buff[rx_indx++] = bufch;
   \   2442  6A0900E2          MOV.B   @rx_indx:16,R1L
   \   2446  0A09              INC.B   R1L
   \   2448  6A8900E2          MOV.B   R1L,@rx_indx:16
   \   244C  1A09              DEC.B   R1L
   \   244E  F100              MOV.B   #0,R1H
   \   2450  6E9E0076          MOV.B   R6L,@(rx_buff,R1)
   1488                      break;
   \   2454            ?0343:
   1489                  }
   1490                  if ( rx_indx >= RX_SIZE ) {           /* check rx pointer */
   \   2454  6A0900E2          MOV.B   @rx_indx:16,R1L
   \   2458  A968              CMP.B   #104,R1L
   \   245A  4504              BCS     ?0353
   \   245C            ?0352:
   1491                      ResetRxPointer() ;              // reset pointer
   \   245C  5E001F44          JSR     @ResetRxPointer:16
   \   2460            ?0353:
   \   2460            ?0342:
   1492                  }
   1493              }
   1494              SCI0_SSR = status & ~SSR_RDRF;          /* Reset RDRF */
   \   2460  0CD9              MOV.B   R5L,R1L
   \   2462  E9BF              AND.B   #191,R1L
   \   2464  39DC              MOV.B   R1L,@220:8
   1495          }
   \   2466  6D76              POP     R6
   \   2468  6D75              POP     R5
   \   246A  6D73              POP     R3
   \   246C  6D72              POP     R2
   \   246E  6D71              POP     R1
   \   2470  6D70              POP     R0
   \   2472  5670              RTE
   1496          
   1497          
   1498          /*************************************************************************
   1499          *
   1500          *  Transmit interrupt routine  TX1
   1501          *
   1502          *  This routine is called on transmition on serial line 1
   1503          *
   1504          ****************************************************************************/
   1505          interrupt [SCI_TXI1] void Tx1Int(void)
   1506          {
   \   2474            Tx1Int:
   \   2474  6DF1              PUSH    R1
   \   2476  6DF6              PUSH    R6
   1507          
   1508              char status;
   1509          
   1510              status = SCI1_SSR;
   \   2478  2EE4              MOV.B   @228:8,R6L
   1511              SCI1_TDR = 0;
   \   247A  F900              MOV.B   #0,R1L
   \   247C  39E3              MOV.B   R1L,@227:8
   1512              SCI1_SSR = status & ~SSR_TDRE;  /* clear TDRE-flag */
   \   247E  0CE9              MOV.B   R6L,R1L
   \   2480  E97F              AND.B   #127,R1L
   \   2482  39E4              MOV.B   R1L,@228:8
   1513              SCI1_SCR &= ~SCR_TIE;                   /* Disable tx int */
   \   2484  7FE27270          BCLR    #7,@226:8
   1514          }
   \   2488  6D76              POP     R6
   \   248A  6D71              POP     R1
   \   248C  5670              RTE
   1515          
   1516          
   1517          /*************************************************************************
   1518          *
   1519          *  Error interrupt routine
   1520          *
   1521          *  Error on port 1 goes here.
   1522          *
   1523          *************************************************************************/
   1524          interrupt [SCI_ERI1] void Err1Int(void)
   1525          {
   \   248E            Err1Int:
   \   248E  6DF1              PUSH    R1
   \   2490  6DF6              PUSH    R6
   1526          
   1527              char status;
   1528          
   1529              status = SCI1_SSR;
   1530              SCI1_SSR = status & ~(SSR_ORER | SSR_FER | SSR_PER);
   \   2492  29E4              MOV.B   @228:8,R1L
   \   2494  0C9E              MOV.B   R1L,R6L
   \   2496  E9C7              AND.B   #199,R1L
   \   2498  39E4              MOV.B   R1L,@228:8
   1531          
   1532          }
   \   249A  6D76              POP     R6
   \   249C  6D71              POP     R1
   \   249E  5670              RTE
   1533          
   1534          
   1535          /*************************************************************************
   1536          *
   1537          *  Receive interrupt routine  RX1
   1538          *
   1539          *  Char received on serial port 1
   1540          *
   1541          *************************************************************************/
   1542          interrupt [SCI_RXI1] void Rx1Int(void)
   1543          {
   \   24A0            Rx1Int:
   \   24A0  6DF1              PUSH    R1
   \   24A2  6DF5              PUSH    R5
   \   24A4  6DF6              PUSH    R6
   1544          
   1545              char status, bufch;
   1546          
   1547              status = SCI1_SSR;
   \   24A6  2EE4              MOV.B   @228:8,R6L
   1548              bufch  = SCI1_RDR;
   \   24A8  2DE5              MOV.B   @229:8,R5L
   1549              SCI1_SSR = status & ~SSR_RDRF;  /* Reset RDRF */
   \   24AA  0CE9              MOV.B   R6L,R1L
   \   24AC  E9BF              AND.B   #191,R1L
   \   24AE  39E4              MOV.B   R1L,@228:8
   1550          }
   \   24B0  6D76              POP     R6
   \   24B2  6D75              POP     R5
   \   24B4  6D71              POP     R1
   \   24B6  5670              RTE
   1551          
   1552          
   1553          /*************************************************************************
   1554          *
   1555          *  MAIN ROUTINE
   1556          *
   1557          *************************************************************************/
   1558          int main(void)
   1559          {
   \   24B8            main:
   1560              int       cnt ;
   1561          
   1562              InitRegs();
   \   24B8  5E000000          JSR     @InitRegs:16
   1563              InitVar();
   \   24BC  5E000058          JSR     @InitVar:16
   1564              InitStartup();
   \   24C0  5E000186          JSR     @InitStartup:16
   1565          
   1566              SCI0_SCR = 0x7c;            /* enable rx0/tx0 + rx0 interrupt */
   \   24C4  F97C              MOV.B   #124,R1L
   \   24C6  39DA              MOV.B   R1L,@218:8
   1567              CheckEepChannel()   ;
   \   24C8  5E000000          JSR     @CheckEepChannel:16
   \   24CC            ?0355:
   1568          
   1569              while ( TRUE ) {
   1570                  KickDog();
   \   24CC  5E0001D0          JSR     @KickDog:16
   1571                  /* communication starts here */
   1572                  if ( rx_indx > rx_hndx ) {            /* new char in buffer ? */
   \   24D0  6A0900E3          MOV.B   @rx_hndx:16,R1L
   \   24D4  6A0B00E2          MOV.B   @rx_indx:16,R3L
   \   24D8  1C9B              CMP.B   R1L,R3L
   \   24DA  4310              BLS     ?0358
   \   24DC            ?0357:
   1573                      if ( ReceiveRxPacket() ) {
   \   24DC  5E002046          JSR     @ReceiveRxPacket:16
   \   24E0  0D11              MOV.W   R1,R1
   \   24E2  4708              BEQ     ?0360
   \   24E4            ?0359:
   1574                          HandleRxPacket() ;          /* Handle here */
   \   24E4  5E001FCE          JSR     @HandleRxPacket:16
   1575                          ResetRxPointer() ;          /* reset pointer */
   \   24E8  5E001F44          JSR     @ResetRxPointer:16
   \   24EC            ?0360:
   \   24EC            ?0358:
   1576                      }
   1577                  }
   1578                  /* AD convert starts here */
   1579                  CheckConvert();
   \   24EC  5E000338          JSR     @CheckConvert:16
   1580              }                                               /* end while.. */
   1581          
   1582              return 0 ;
   \   24F0  40DA              BRA     ?0355
   \   24F2  1911              SUB.W   R1,R1
   1583          }
   \   24F4  5470              RTS
   1584          
   1585          /* end program ******************************************************/
   1586          
   \   0000                    RSEG    CONST
   \   0000            crc:
   \   0000  0000              DC.W    0
   \   0002  005E              DC.W    94
   \   0004  00BC              DC.W    188
   \   0006  00E2              DC.W    226
   \   0008  0061              DC.W    97
   \   000A  003F              DC.W    63
   \   000C  00DD              DC.W    221
   \   000E  0083              DC.W    131
   \   0010  00C2              DC.W    194
   \   0012  009C              DC.W    156
   \   0014  007E              DC.W    126
   \   0016  0020              DC.W    32
   \   0018  00A3              DC.W    163
   \   001A  00FD              DC.W    253
   \   001C  001F              DC.W    31
   \   001E  0041              DC.W    65
   \   0020  009D              DC.W    157
   \   0022  00C3              DC.W    195
   \   0024  0021              DC.W    33
   \   0026  007F              DC.W    127
   \   0028  00FC              DC.W    252
   \   002A  00A2              DC.W    162
   \   002C  0040              DC.W    64
   \   002E  001E              DC.W    30
   \   0030  005F              DC.W    95
   \   0032  0001              DC.W    1
   \   0034  00E3              DC.W    227
   \   0036  00BD              DC.W    189
   \   0038  003E              DC.W    62
   \   003A  0060              DC.W    96
   \   003C  0082              DC.W    130
   \   003E  00DC              DC.W    220
   \   0040  0023              DC.W    35
   \   0042  007D              DC.W    125
   \   0044  009F              DC.W    159
   \   0046  00C1              DC.W    193
   \   0048  0042              DC.W    66
   \   004A  001C              DC.W    28
   \   004C  00FE              DC.W    254
   \   004E  00A0              DC.W    160
   \   0050  00E1              DC.W    225
   \   0052  00BF              DC.W    191
   \   0054  005D              DC.W    93
   \   0056  0003              DC.W    3
   \   0058  0080              DC.W    128
   \   005A  00DE              DC.W    222
   \   005C  003C              DC.W    60
   \   005E  0062              DC.W    98
   \   0060  00BE              DC.W    190
   \   0062  00E0              DC.W    224
   \   0064  0002              DC.W    2
   \   0066  005C              DC.W    92
   \   0068  00DF              DC.W    223
   \   006A  0081              DC.W    129
   \   006C  0063              DC.W    99
   \   006E  003D              DC.W    61
   \   0070  007C              DC.W    124
   \   0072  0022              DC.W    34
   \   0074  00C0              DC.W    192
   \   0076  009E              DC.W    158
   \   0078  001D              DC.W    29
   \   007A  0043              DC.W    67
   \   007C  00A1              DC.W    161
   \   007E  00FF              DC.W    255
   \   0080  0046              DC.W    70
   \   0082  0018              DC.W    24
   \   0084  00FA              DC.W    250
   \   0086  00A4              DC.W    164
   \   0088  0027              DC.W    39
   \   008A  0079              DC.W    121
   \   008C  009B              DC.W    155
   \   008E  00C5              DC.W    197
   \   0090  0084              DC.W    132
   \   0092  00DA              DC.W    218
   \   0094  0038              DC.W    56
   \   0096  0066              DC.W    102
   \   0098  00E5              DC.W    229
   \   009A  00BB              DC.W    187
   \   009C  0059              DC.W    89
   \   009E  0007              DC.W    7
   \   00A0  00DB              DC.W    219
   \   00A2  0085              DC.W    133
   \   00A4  0067              DC.W    103
   \   00A6  0039              DC.W    57
   \   00A8  00BA              DC.W    186
   \   00AA  00E4              DC.W    228
   \   00AC  0006              DC.W    6
   \   00AE  0058              DC.W    88
   \   00B0  0019              DC.W    25
   \   00B2  0047              DC.W    71
   \   00B4  00A5              DC.W    165
   \   00B6  00FB              DC.W    251
   \   00B8  0078              DC.W    120
   \   00BA  0026              DC.W    38
   \   00BC  00C4              DC.W    196
   \   00BE  009A              DC.W    154
   \   00C0  0065              DC.W    101
   \   00C2  003B              DC.W    59
   \   00C4  00D9              DC.W    217
   \   00C6  0087              DC.W    135
   \   00C8  0004              DC.W    4
   \   00CA  005A              DC.W    90
   \   00CC  00B8              DC.W    184
   \   00CE  00E6              DC.W    230
   \   00D0  00A7              DC.W    167
   \   00D2  00F9              DC.W    249
   \   00D4  001B              DC.W    27
   \   00D6  0045              DC.W    69
   \   00D8  00C6              DC.W    198
   \   00DA  0098              DC.W    152
   \   00DC  007A              DC.W    122
   \   00DE  0024              DC.W    36
   \   00E0  00F8              DC.W    248
   \   00E2  00A6              DC.W    166
   \   00E4  0044              DC.W    68
   \   00E6  001A              DC.W    26
   \   00E8  0099              DC.W    153
   \   00EA  00C7              DC.W    199
   \   00EC  0025              DC.W    37
   \   00EE  007B              DC.W    123
   \   00F0  003A              DC.W    58
   \   00F2  0064              DC.W    100
   \   00F4  0086              DC.W    134
   \   00F6  00D8              DC.W    216
   \   00F8  005B              DC.W    91
   \   00FA  0005              DC.W    5
   \   00FC  00E7              DC.W    231
   \   00FE  00B9              DC.W    185
   \   0100  008C              DC.W    140
   \   0102  00D2              DC.W    210
   \   0104  0030              DC.W    48
   \   0106  006E              DC.W    110
   \   0108  00ED              DC.W    237
   \   010A  00B3              DC.W    179
   \   010C  0051              DC.W    81
   \   010E  000F              DC.W    15
   \   0110  004E              DC.W    78
   \   0112  0010              DC.W    16
   \   0114  00F2              DC.W    242
   \   0116  00AC              DC.W    172
   \   0118  002F              DC.W    47
   \   011A  0071              DC.W    113
   \   011C  0093              DC.W    147
   \   011E  00CD              DC.W    205
   \   0120  0011              DC.W    17
   \   0122  004F              DC.W    79
   \   0124  00AD              DC.W    173
   \   0126  00F3              DC.W    243
   \   0128  0070              DC.W    112
   \   012A  002E              DC.W    46
   \   012C  00CC              DC.W    204
   \   012E  0092              DC.W    146
   \   0130  00D3              DC.W    211
   \   0132  008D              DC.W    141
   \   0134  006F              DC.W    111
   \   0136  0031              DC.W    49
   \   0138  00B2              DC.W    178
   \   013A  00EC              DC.W    236
   \   013C  000E              DC.W    14
   \   013E  0050              DC.W    80
   \   0140  00AF              DC.W    175
   \   0142  00F1              DC.W    241
   \   0144  0013              DC.W    19
   \   0146  004D              DC.W    77
   \   0148  00CE              DC.W    206
   \   014A  0090              DC.W    144
   \   014C  0072              DC.W    114
   \   014E  002C              DC.W    44
   \   0150  006D              DC.W    109
   \   0152  0033              DC.W    51
   \   0154  00D1              DC.W    209
   \   0156  008F              DC.W    143
   \   0158  000C              DC.W    12
   \   015A  0052              DC.W    82
   \   015C  00B0              DC.W    176
   \   015E  00EE              DC.W    238
   \   0160  0032              DC.W    50
   \   0162  006C              DC.W    108
   \   0164  008E              DC.W    142
   \   0166  00D0              DC.W    208
   \   0168  0053              DC.W    83
   \   016A  000D              DC.W    13
   \   016C  00EF              DC.W    239
   \   016E  00B1              DC.W    177
   \   0170  00F0              DC.W    240
   \   0172  00AE              DC.W    174
   \   0174  004C              DC.W    76
   \   0176  0012              DC.W    18
   \   0178  0091              DC.W    145
   \   017A  00CF              DC.W    207
   \   017C  002D              DC.W    45
   \   017E  0073              DC.W    115
   \   0180  00CA              DC.W    202
   \   0182  0094              DC.W    148
   \   0184  0076              DC.W    118
   \   0186  0028              DC.W    40
   \   0188  00AB              DC.W    171
   \   018A  00F5              DC.W    245
   \   018C  0017              DC.W    23
   \   018E  0049              DC.W    73
   \   0190  0008              DC.W    8
   \   0192  0056              DC.W    86
   \   0194  00B4              DC.W    180
   \   0196  00EA              DC.W    234
   \   0198  0069              DC.W    105
   \   019A  0037              DC.W    55
   \   019C  00D5              DC.W    213
   \   019E  008B              DC.W    139
   \   01A0  0057              DC.W    87
   \   01A2  0009              DC.W    9
   \   01A4  00EB              DC.W    235
   \   01A6  00B5              DC.W    181
   \   01A8  0036              DC.W    54
   \   01AA  0068              DC.W    104
   \   01AC  008A              DC.W    138
   \   01AE  00D4              DC.W    212
   \   01B0  0095              DC.W    149
   \   01B2  00CB              DC.W    203
   \   01B4  0029              DC.W    41
   \   01B6  0077              DC.W    119
   \   01B8  00F4              DC.W    244
   \   01BA  00AA              DC.W    170
   \   01BC  0048              DC.W    72
   \   01BE  0016              DC.W    22
   \   01C0  00E9              DC.W    233
   \   01C2  00B7              DC.W    183
   \   01C4  0055              DC.W    85
   \   01C6  000B              DC.W    11
   \   01C8  0088              DC.W    136
   \   01CA  00D6              DC.W    214
   \   01CC  0034              DC.W    52
   \   01CE  006A              DC.W    106
   \   01D0  002B              DC.W    43
   \   01D2  0075              DC.W    117
   \   01D4  0097              DC.W    151
   \   01D6  00C9              DC.W    201
   \   01D8  004A              DC.W    74
   \   01DA  0014              DC.W    20
   \   01DC  00F6              DC.W    246
   \   01DE  00A8              DC.W    168
   \   01E0  0074              DC.W    116
   \   01E2  002A              DC.W    42
   \   01E4  00C8              DC.W    200
   \   01E6  0096              DC.W    150
   \   01E8  0015              DC.W    21
   \   01EA  004B              DC.W    75
   \   01EC  00A9              DC.W    169
   \   01EE  00F7              DC.W    247
   \   01F0  00B6              DC.W    182
   \   01F2  00E8              DC.W    232
   \   01F4  000A              DC.W    10
   \   01F6  0054              DC.W    84
   \   01F8  00D7              DC.W    215
   \   01FA  0089              DC.W    137
   \   01FC  006B              DC.W    107
   \   01FE  0035              DC.W    53
   \   0000                    COMMON  INTVEC
   \   0008                    DS.B    8
   \   0008  2184              DC.W    Irq0Int
   \   000A  2186              DC.W    Irq1Int
   \   000C  21A6              DC.W    Irq2Int
   \   0010                    DS.B    2
   \   0010  21A8              DC.W    FrtcInt
   \   0016                    DS.B    4
   \   0016  21B6              DC.W    FrtoInt
   \   0018  21BC              DC.W    Tim0Int
   \   001E                    DS.B    4
   \   001E  2238              DC.W    TimInt
   \   0024                    DS.B    4
   \   0024  23BE              DC.W    Err0Int
   \   0026  23D0              DC.W    Rx0Int
   \   0028  2374              DC.W    Tx0Int
   \   002A  248E              DC.W    Err1Int
   \   002C  24A0              DC.W    Rx1Int
   \   002E  2474              DC.W    Tx1Int
   \   0000                    RSEG    UDATA
   \   0000            tx_buff:
   \   0076                    DS.B    118
   \   0076            rx_buff:
   \   00DE                    DS.B    104
   \   00DE            tx_indx:
   \   00DF                    DS.B    1
   \   00DF            tx_bytes:
   \   00E0                    DS.B    1
   \   00E0            tx_tail:
   \   00E1                    DS.B    1
   \   00E1            wait_for_pc:
   \   00E2                    DS.B    1
   \   00E2            rx_indx:
   \   00E3                    DS.B    1
   \   00E3            rx_hndx:
   \   00E4                    DS.B    1
   \   00E4            rx_start:
   \   00E5                    DS.B    1
   \   00E5            rx_counter:
   \   00E6                    DS.B    1
   \   00E6            rx_packlen:
   \   00E7                    DS.B    1
   \   00E7            rx_timeout:
   \   00E8                    DS.B    1
   \   00E8            sync_cnt:
   \   00E9                    DS.B    1
   \   00EA                    DS.B    1
   \   00EA            sens_data:
   \   00F2                    DS.B    8
   \   00F2            sens_nl1:
   \   00F3                    DS.B    1
   \   00F3            sens_nl2:
   \   00F4                    DS.B    1
   \   00F4            packed_data:
   \   0234                    DS.B    320
   \   0234            eep_status:
   \   0235                    DS.B    1
   \   0235            time_b_temp:
   \   0236                    DS.B    1
   \   0236            time_b_cnt:
   \   0237                    DS.B    1
   \   0237            time_e_cnt:
   \   0238                    DS.B    1
   \   0238            ad_timeout_cnt:
   \   023A                    DS.B    2
   \   023A            sec_cnt:
   \   023C                    DS.B    2
   \   023C            ms_cnt:
   \   023E                    DS.B    2
   \   023E            curr_sens_data:
   \   0240                    DS.B    2
   \   0240            cal_data:
   \   025C                    DS.B    28
   \   025C            raw_data:
   \   0278                    DS.B    28
   \   0278            mes_data:
   \   02B0                    DS.B    56
   \   02B0            highlevel:
   \   02B1                    DS.B    1
   \   02B2                    DS.B    1
   \   02B2            washtrac:
   \   02BA                    DS.B    8
   \   02BA            washtrac_prev:
   \   02BB                    DS.B    1
   \   02BC                    DS.B    1
   \   02BC            gain:
   \   02F4                    DS.B    56
   \   02F4            offset:
   \   0310                    DS.B    28
   \   0310            cal_gain:
   \   0314                    DS.B    4
   \   0314            cal_zero:
   \   0316                    DS.B    2
   \   0316            not_mes_data:
   \   0317                    DS.B    1
   \   0317            not_raw_data:
   \   0318                    DS.B    1
   \   0318            not_cal_data:
   \   0319                    DS.B    1
   \   0319            curr_ad_ch:
   \   031A                    DS.B    1
   \   031A            ad_state:
   \   031B                    DS.B    1
   \   031B            ad_mode:
   \   031C                    DS.B    1
   \   031C            ms_delay_cnt:
   \   031E                    DS.B    2
   \   031E            ad_settling:
   \   0320                    DS.B    2
   \   0320            ad_gain:
   \   0321                    DS.B    1
   \   0321            ch_stat:
   \   032F                    DS.B    14
   \   032F            eep_type:
   \   0337                    DS.B    8
   \   0337            p_filter:
   \   0338                    DS.B    1
   \   0338            t_filter:
   \   0339                    DS.B    1
   \   0339            o_filter:
   \   033A                    DS.B    1
   \   033A            my_address:
   \   033B                    DS.B    1
   \   033B            rx_state:
   \   033C                    DS.B    1
   \   033C            tx_complete:
   \   033D                    DS.B    1
   \   033D            sendtail:
   \   033E                    DS.B    1
   \   033E                    END

Errors: none
Warnings: none
Code size: 9462
Constant size: 560
Static variable size: Data(830) Iram(0)

