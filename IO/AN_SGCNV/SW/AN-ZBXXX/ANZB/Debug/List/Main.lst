###############################################################################
#
# IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR       12/Jul/2021  09:53:18
# Copyright 1996-2021 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\AN_SGCNV\SW\AN-ZBXXX\ANZB\Src\Main.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW67D3.tmp
#        (D:\S2Prog\IO\AN_SGCNV\SW\AN-ZBXXX\ANZB\Src\Main.c --cpu=m128a -ms -o
#        D:\S2Prog\IO\AN_SGCNV\SW\AN-ZBXXX\ANZB\Debug\Obj -D OS_LIBMODE_R -D
#        OS_UART=-1 -lCN D:\S2Prog\IO\AN_SGCNV\SW\AN-ZBXXX\ANZB\Debug\List -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\AN_SGCNV\SW\AN-ZBXXX\ANZB\INC\\ -I
#        D:\S2Prog\IO\AN_SGCNV\SW\AN-ZBXXX\ANZB\..\..\SHARED\INC\\
#        --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\AN_SGCNV\SW\AN-ZBXXX\ANZB\Debug\List\Main.lst
#    Object file  =  D:\S2Prog\IO\AN_SGCNV\SW\AN-ZBXXX\ANZB\Debug\Obj\Main.r90
#
###############################################################################

D:\S2Prog\IO\AN_SGCNV\SW\AN-ZBXXX\ANZB\Src\Main.c
      1          /**********************************************************
      2          *  
      3          *   Main file for AN-ZB* program       
      4          *  
      5          ***********************************************************/
      6          
      7          #include "iom128a.h"
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "variables.h"

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char UnitID
   \                     UnitID:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char RestartStatus
   \                     RestartStatus:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char volatile PortPair
   \                     PortPair:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   UARTDataType UART[2]
   \                     UART:
   \   00000000                      DS8 52

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   UARTDataType UART16552[2]
   \                     UART16552:
   \   00000000                      DS8 52

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   AnalogInt ADInt
   \                     ADInt:
   \   00000000                      DS8 16

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   TargetData TData
   \                     TData:
   \   00000000                      DS8 1532

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char TxBufferCh0[275]
   \                     TxBufferCh0:
   \   00000000                      DS8 275

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char RxBufferCh0[150]
   \                     RxBufferCh0:
   \   00000000                      DS8 150

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char TxBufferCh1[275]
   \                     TxBufferCh1:
   \   00000000                      DS8 275

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char RxBufferCh1[150]
   \                     RxBufferCh1:
   \   00000000                      DS8 150

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char TxBuf16552Ch0[60]
   \                     TxBuf16552Ch0:
   \   00000000                      DS8 60

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char RxBuf16552Ch0[120]
   \                     RxBuf16552Ch0:
   \   00000000                      DS8 120

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char TxBuf16552Ch1[60]
   \                     TxBuf16552Ch1:
   \   00000000                      DS8 60

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char RxBuf16552Ch1[120]
   \                     RxBuf16552Ch1:
   \   00000000                      DS8 120

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char volatile ADChannel
   \                     ADChannel:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char WriteCount
   \                     WriteCount:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char *__near pWriteBuffer
   \                     pWriteBuffer:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char EEPWriteOK
   \                     EEPWriteOK:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char volatile hostAddress
   \                     hostAddress:
   \   00000000                      DS8 1

   \                                 In  segment FAR_F, align 1, keep-with-next
   \   char const __farflash crc[256]
   \                     crc:
   \   00000000   5E00E2BC3F61       DC8 0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31
   \              83DD9CC2207E
   \              FDA31F      
   \   0000000F   9D4121C3FC7F       DC8 65, 157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96
   \              40A25F1EE301
   \              3EBD60      
   \   0000001E   DC827D23C19F       DC8 130, 220, 35, 125, 159, 193, 66, 28, 254, 160, 225, 191, 93, 3, 128
   \              1C42A0FEBFE1
   \              035D80      
   \   0000002D   3CDEBE6202E0       DC8 222, 60, 98, 190, 224, 2, 92, 223, 129, 99, 61, 124, 34, 192, 158
   \              DF5C63817C3D
   \              C0229E      
   \   0000003C   431DFFA11846       DC8 29, 67, 161, 255, 70, 24, 250, 164, 39, 121, 155, 197, 132, 218, 56
   \              A4FA7927C59B
   \              DA8438      
   \   0000004B   E56659BBDB07       DC8 102, 229, 187, 89, 7, 219, 133, 103, 57, 186, 228, 6, 88, 25, 71
   \              6785BA3906E4
   \              195847      
   \   0000005A   FBA526789AC4       DC8 165, 251, 120, 38, 196, 154, 101, 59, 217, 135, 4, 90, 184, 230
   \              3B6587D95A04
   \              E6B8        
   \   00000068   F9A7451B98C6       DC8 167, 249, 27, 69, 198, 152, 122, 36, 248, 166, 68, 26, 153, 199, 37
   \              247AA6F81A44
   \              C79925      
   \   00000077   3A7B86645BD8       DC8 123, 58, 100, 134, 216, 91, 5, 231, 185, 140, 210, 48, 110, 237
   \              E7058CB930D2
   \              ED6E        
   \   00000085   51B34E0FF210       DC8 179, 81, 15, 78, 16, 242, 172, 47, 113, 147, 205, 17, 79, 173, 243
   \              2FAC937111CD
   \              AD4FF3      
   \   00000094   2E7092CC8DD3       DC8 112, 46, 204, 146, 211, 141, 111, 49, 178, 236, 14, 80, 175, 241
   \              316FECB2500E
   \              F1AF        
   \   000000A2   4D1390CE2C72       DC8 19, 77, 206, 144, 114, 44, 109, 51, 209, 143, 12, 82, 176, 238, 50
   \              336D8FD1520C
   \              EEB032      
   \   000000B1   8E6C53D0EF0D       DC8 108, 142, 208, 83, 13, 239, 177, 240, 174, 76, 18, 145, 207, 45
   \              F0B14CAE9112
   \              2DCF        
   \   000000BF   CA737694AB28       DC8 115, 202, 148, 118, 40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55
   \              17F50849B456
   \              69EA37      
   \   000000CE   8BD50957B5EB       DC8 213, 139, 87, 9, 235, 181, 54, 104, 138, 212, 149, 203, 41, 119
   \              6836D48ACB95
   \              7729        
   \   000000DC   AAF41648B7E9       DC8 244, 170, 72, 22, 233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151
   \              0B55D6886A34
   \              752B97      
   \   000000EB   4AC9F61474A8       DC8 201, 74, 20, 246, 168, 116, 42, 200, 150, 21, 75, 169, 247, 182
   \              C82A1596A94B
   \              B6F7        
   \   000000F9   0AE8D7546B89       DC8 232, 10, 84, 215, 137, 107, 53
   \              35          
     11          #include "version.h"
     12          #include "inavr.h"
     13          #include "string.h"
     14          
     15          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     16          OS_STACKPTR int Stack0[150], Stack1[150], Stack3[150], Stack10[150], Stack11[150]; /* Task stacks */
   \                     Stack0:
   \   00000000                      DS8 300

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     Stack1:
   \   00000000                      DS8 300

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     Stack3:
   \   00000000                      DS8 300

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     Stack10:
   \   00000000                      DS8 300

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     Stack11:
   \   00000000                      DS8 300

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     17          OS_TASK     TCB_USART0, TCB_USART1, TCB_WATCHDOG, TCB_RS485Ctl, TCB_RS485Rec, TCB_AD7715;               /* Task-control-blocks */
   \                     TCB_USART0:
   \   00000000                      DS8 17

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TCB_USART1:
   \   00000000                      DS8 17

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TCB_WATCHDOG:
   \   00000000                      DS8 17

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TCB_RS485Ctl:
   \   00000000                      DS8 17

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TCB_RS485Rec:
   \   00000000                      DS8 17

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TCB_AD7715:
   \   00000000                      DS8 17

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     18          OS_RSEMA    UARTSEND;
   \                     UARTSEND:
   \   00000000                      DS8 7

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     19          OS_TIMER    TimerUSART0, TimerUSART1, TimerUART0, TimerUART1, TimerUSART0On, TimerUSART1On;
   \                     TimerUSART0:
   \   00000000                      DS8 9

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TimerUSART1:
   \   00000000                      DS8 9

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TimerUART0:
   \   00000000                      DS8 9

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TimerUART1:
   \   00000000                      DS8 9

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TimerUSART0On:
   \   00000000                      DS8 9

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TimerUSART1On:
   \   00000000                      DS8 9
     20          
     21          /**********************************************************
     22          *
     23          *       main
     24          *
     25          **********************************************************/
     26          

   \                                 In  segment CODE, align 2, keep-with-next
     27          void main(void) {
   \                     main:
     28          
     29             /*
     30               asm("WDR");                             // Enable watchdog here because the OS hang some times during startup
     31              WDTCR = 0x1f;
     32              WDTCR = 0x0f;
     33              asm("WDR");                             // kick the dog!!
     34          */
     35          
     36              OS_InitKern();        /* initialize OS                 */
   \   00000000   ........           CALL    OS_InitKern
     37              OS_InitHW();          /* initialize Hardware for OS    */
   \   00000004   ........           CALL    OS_InitHW
     38              InitSystem();           // init the system according to board
   \   00000008   ........           CALL    InitSystem
     39          
     40          
     41              OS_CREATERSEMA(&UARTSEND);                          // semaphore for sending on UARTs
   \   0000000C   ....               LDI     R16, LOW(UARTSEND)
   \   0000000E   ....               LDI     R17, (UARTSEND) >> 8
   \   00000010   ........           CALL    OS_CreateRSema
     42              //OS_CREATETASK(&TCB_USART0, "USART0", Usart0Handler, 110, Stack0);
     43             // OS_CREATETIMER(&TimerUSART0, TimoutUSART0, 200);                 // Start timeout timer RX on
     44             // OS_CREATETIMER(&TimerUSART0On, TimoutUSART0On, 5);                 // Start on timer TX on
     45          //    OS_CREATETASK(&TCB_USART1, "USART1", Usart1Handler, 100, Stack1);
     46          //    OS_CREATETIMER(&TimerUSART1, TimoutUSART1, 200);                 // Start timeout timer RX on
     47          //    OS_CREATETIMER(&TimerUSART1On, TimoutUSART1On, 5);                 // Start on timer TX on
     48          
     49              switch (UnitID) {                                    // Starting taasks for modules:
   \   00000014   9100....           LDS     R16, UnitID
   \   00000018   3004               CPI     R16, 4
   \   0000001A   F4A9               BRNE    ??main_0
     50              case AN_SGCNV:                                          // AN-ZBANA 
     51                  OS_CREATETASK(&TCB_AD7715, "AD7715", AD7715,  90, Stack10);
   \   0000001C   E002               LDI     R16, 2
   \   0000001E   E010               LDI     R17, 0
   \   00000020   931A               ST      -Y, R17
   \   00000022   930A               ST      -Y, R16
   \   00000024   E20C               LDI     R16, 44
   \   00000026   E011               LDI     R17, 1
   \   00000028   931A               ST      -Y, R17
   \   0000002A   930A               ST      -Y, R16
   \   0000002C   ....               LDI     R16, LOW(Stack10)
   \   0000002E   ....               LDI     R17, (Stack10) >> 8
   \   00000030   931A               ST      -Y, R17
   \   00000032   930A               ST      -Y, R16
   \   00000034   ....               LDI     R22, LOW(AD7715/2)
   \   00000036   ....               LDI     R23, (AD7715/2) >> 8
   \   00000038   E54A               LDI     R20, 90
   \   0000003A   ....               LDI     R18, LOW(`?<Constant "AD7715">`)
   \   0000003C   ....               LDI     R19, (`?<Constant "AD7715">`) >> 8
   \   0000003E   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000040   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000042   ........           CALL    OS_CreateTask_R
     52                  break;
     53              }
     54              //OS_CREATETASK(&TCB_WATCHDOG, "Watch dog", WatchDogHandler, 50, Stack3);
     55          
     56              Led(1, LED_OFF) ;                                        /* Led 1 on */
   \                     ??main_0:
   \   00000046   E020               LDI     R18, 0
   \   00000048   E030               LDI     R19, 0
   \   0000004A   E001               LDI     R16, 1
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   ........           CALL    Led
     57              Led(2, LED_OFF) ;                                        /* Led 2 on */
   \   00000052   E020               LDI     R18, 0
   \   00000054   E030               LDI     R19, 0
   \   00000056   E002               LDI     R16, 2
   \   00000058   E010               LDI     R17, 0
   \   0000005A   ........           CALL    Led
     58              OS_Start();                                         // Start multitasking
   \   0000005E   ........           CALL    OS_Start
     59           }
   \   00000062   9508               RET

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "AD7715">>`:
   \   00000000   444137373531       DC8 "AD7715"
   \              00          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "AD7715">`:
   \   00000000                      DS8 7
   \   00000007                      REQUIRE `?<Initializer for <Constant "AD7715">>`
     60          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      6      2   main
        0      2   -> InitSystem
        0      2   -> Led
        0      2   -> OS_CreateRSema
        0      2   -> OS_CreateTask_R
        0      2   -> OS_InitHW
        0      2   -> OS_InitKern
        0      2   -> OS_Start


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "AD7715">
       7  ?<Initializer for <Constant "AD7715">>
       1  ADChannel
      16  ADInt
       1  EEPWriteOK
       1  PortPair
       1  RestartStatus
     120  RxBuf16552Ch0
     120  RxBuf16552Ch1
     150  RxBufferCh0
     150  RxBufferCh1
     300  Stack0
     300  Stack1
     300  Stack10
     300  Stack11
     300  Stack3
      17  TCB_AD7715
      17  TCB_RS485Ctl
      17  TCB_RS485Rec
      17  TCB_USART0
      17  TCB_USART1
      17  TCB_WATCHDOG
    1532  TData
       9  TimerUART0
       9  TimerUART1
       9  TimerUSART0
       9  TimerUSART0On
       9  TimerUSART1
       9  TimerUSART1On
      60  TxBuf16552Ch0
      60  TxBuf16552Ch1
     275  TxBufferCh0
     275  TxBufferCh1
      52  UART
      52  UART16552
       7  UARTSEND
       1  UnitID
       1  WriteCount
     256  crc
       1  hostAddress
     100  main
       2  pWriteBuffer
      14  -- Other

 
   100 bytes in segment CODE
   256 bytes in segment FAR_F
    14 bytes in segment INITTAB
     7 bytes in segment NEAR_I
     7 bytes in segment NEAR_ID
 4 534 bytes in segment NEAR_Z
 
   363 bytes of CODE memory (+ 14 bytes shared)
 4 541 bytes of DATA memory

Errors: none
Warnings: none
