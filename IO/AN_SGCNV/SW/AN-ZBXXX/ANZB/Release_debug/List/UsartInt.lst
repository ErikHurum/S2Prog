###############################################################################
#
# IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR           28/Sep/2017  11:34:44
# Copyright 1996-2017 IAR Systems AB.
# Startup license - IAR Embedded Workbench for Atmel AVR 7.10
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\UsartInt.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EW7241.tmp
#        (D:\S2Prog\IO\ANZB\Src\UsartInt.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\ANZB\Release_debug\Obj -D OS_LIBMODE_S -D OS_UART=0 -lCN
#        D:\S2Prog\IO\ANZB\Release_debug\List -y --initializers_in_flash
#        --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB\INC\ -I
#        D:\S2Prog\IO\ANZB\..\..\SHARED\INC\ --eeprom_size 4096 --clib -Ohz)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB\Release_debug\List\UsartInt.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Release_debug\Obj\UsartInt.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\UsartInt.c
      1          /****************************************************************************************
      2          / USART1 functions and interrupt
      3          /   This routines sync and check the ANPRO10
      4          /   Uart1Pro.c handle the package
      5          /
      6          ***************************************************************************************/
      7          
      8          
      9          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9a
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9b
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9c
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1
     10          #include "stdio.h"
     11          #include "math.h"
     12          #include "externals.h"
     13          #include "version.h"
     14          
     15          #if (OS_UART != 0)
     16          
     17          // USART0
     18          #pragma vector=USART0_RXC_vect
     19          __interrupt void IntHandler_RX_USART0( void ){   
     20          
     21              OS_EnterInterrupt();
     22              OS_EnterIntStack();
     23              if ( UCSR0A & __BIT_MASK( DOR0 ) ) {                // Overrun error? 
     24              }
     25          
     26              if ( UCSR0A & __BIT_MASK( FE0 ) ) {                 // Framing error? 
     27              }
     28          
     29              while ( UCSR0A & __BIT_MASK( RXC0)  ) {                // New byte avaiable?
     30                  UART[0].pRxBuffer[ UART[0].RxFirst ] = UDR0;    // Read the character 
     31          
     32                  if (UART[0].RxState != HANDLE) {                // ok to receive? 
     33                      switch (UART[0].RxState) {                   // Yes, check state
     34                      case SYNC :
     35                          if ( UART[0].pRxBuffer[ UART[0].RxFirst ] == ANPRO10_SYN) {
     36                              UART[0].SyncCnt ++ ;                 // count sync
     37                              UART[0].RxFirst = 0;                 // start at start of buff
     38                          } else if ((UART[0].SyncCnt >= 2) && 
     39                                     (UART[0].pRxBuffer[ UART[0].RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
     40                              UART[0].SyncCnt = 0 ;                // reset counter
     41                              UART[0].RxState = HEADER ;
     42                              UART[0].RxLast = 0 ;
     43                              UART[0].RxTimeout = RX_TO_TIME ;    // reset timeout
     44                          } else {
     45                              UART[0].SyncCnt = 0 ;                // start over once more
     46                          }
     47                          break;
     48                      default :
     49                          if ((++UART[0].RxFirst) > RXSIZE_UART) { // Point to next location
     50                              GoToSyncUART(0) ;                       // go to sync mode
     51                          } else {
     52                              ReceivePacketUart(0) ;              // Check package
     53                          }
     54                          break ;   
     55                      }
     56                  }
     57              }
     58              OS_LeaveIntStack();
     59              OS_LeaveInterruptNoSwitch();
     60          } 
     61          
     62          
     63          #pragma vector=USART0_TXC_vect
     64          __interrupt void IntHandler_TX_USART0( void ){   
     65          
     66             OS_EnterInterrupt();
     67             OS_EnterIntStack();
     68              
     69              UCSR0B &= ~(__BIT_MASK( TXCIE0)) ;            // transmission end, disable int.
     70              PORTE &= ~0x04 ;                              // TXE0 off
     71              OS_StopTimer(&TimerUSART0);                    // and stop timer
     72              GoToSyncUART(0) ;                                    // go to sync modus for recive
     73              
     74              OS_LeaveIntStack();
     75              OS_LeaveInterruptNoSwitch();
     76          }
     77          
     78          
     79          #pragma vector = USART0_UDRE_vect
     80          __interrupt void IntHandler_UDRE_USART0( void ){   
     81          
     82              OS_EnterInterrupt();
     83              OS_EnterIntStack();
     84              if ( UART[0].TxCount-- > 0 ) {
     85                  UDR0 = UART[0].pTxBuffer[ UART[0].TxLast ];     // Send a character
     86                  UART[0].TxLast++;
     87              } else{                                             // Last byte sent?
     88                    UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
     89                    UCSR0A |= (__BIT_MASK( TXC0)) ;               // Clear int bit in TXC.
     90                    UCSR0B |= __BIT_MASK( TXCIE0) ;               // Enable TXC int.
     91              }           
     92              OS_LeaveIntStack();
     93              OS_LeaveInterruptNoSwitch();
     94          } 
     95          #endif
     96          
     97          // USART1
     98          #pragma vector=USART1_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     99          __interrupt void IntHandler_RX_USART1( void ){   
   \                     IntHandler_RX_USART1:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   ....               RCALL   ?Subroutine0
    100          
    101              OS_EnterInterrupt();
    102              OS_EnterIntStack();
    103              if ( UCSR1A & __BIT_MASK( DOR1 ) ) {                // Overrun error? 
   \                     ??CrossCallReturnLabel_2:
   \   00000006   9100....           LDS     R16, _A_UCSR1A
    104              }
    105          
    106              if ( UCSR1A & __BIT_MASK( FE1 ) ) {                 // Framing error? 
   \   0000000A   9100....           LDS     R16, _A_UCSR1A
   \   0000000E   ....               LDI     R26, LOW(UART)
   \   00000010   ....               LDI     R27, (UART) >> 8
   \   00000012   C007               RJMP    ??IntHandler_RX_USART1_0
    107              }
    108          
    109              while ( UCSR1A & __BIT_MASK( RXC1)  ) {                // New byte avaiable?
    110                  UART[1].pRxBuffer[ UART[1].RxFirst ] = UDR1;    // Read the character 
    111          
    112                  if (UART[1].RxState != HANDLE) {                // ok to receive? 
    113                      switch (UART[1].RxState) {                   // Yes, check state
    114                      case SYNC :
    115                          if ( UART[1].pRxBuffer[ UART[1].RxFirst ] == ANPRO10_SYN) {
    116                              UART[1].SyncCnt ++ ;                 // count sync
   \                     ??IntHandler_RX_USART1_1:
   \   00000014   01FD               MOVW    R31:R30, R27:R26
   \   00000016   A505               LDD     R16, Z+45
   \   00000018   9503               INC     R16
   \   0000001A   A705               STD     Z+45, R16
    117                              UART[1].RxFirst = 0;                 // start at start of buff
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   A306               STD     Z+38, R16
   \   00000020   A307               STD     Z+39, R16
    118                          } else if ((UART[1].SyncCnt >= 2) && 
   \                     ??IntHandler_RX_USART1_0:
   \   00000022   9100....           LDS     R16, _A_UCSR1A
   \   00000026   FF07               SBRS    R16, 7
   \   00000028   C046               RJMP    ??IntHandler_RX_USART1_2
   \   0000002A   9100....           LDS     R16, _A_UDR1
   \   0000002E   9694               ADIW    R27:R26, 36
   \   00000030   91ED               LD      R30, X+
   \   00000032   91FD               LD      R31, X+
   \   00000034   912D               LD      R18, X+
   \   00000036   913C               LD      R19, X
   \   00000038   9797               SBIW    R27:R26, 39
   \   0000003A   0FE2               ADD     R30, R18
   \   0000003C   1FF3               ADC     R31, R19
   \   0000003E   8300               ST      Z, R16
   \   00000040   9100....           LDS     R16, (UART + 44)
   \   00000044   300A               CPI     R16, 10
   \   00000046   F369               BREQ    ??IntHandler_RX_USART1_0
   \   00000048   2300               TST     R16
   \   0000004A   F521               BRNE    ??IntHandler_RX_USART1_3
   \   0000004C   9694               ADIW    R27:R26, 36
   \   0000004E   91ED               LD      R30, X+
   \   00000050   91FD               LD      R31, X+
   \   00000052   910D               LD      R16, X+
   \   00000054   911C               LD      R17, X
   \   00000056   9797               SBIW    R27:R26, 39
   \   00000058   0FE0               ADD     R30, R16
   \   0000005A   1FF1               ADC     R31, R17
   \   0000005C   8100               LD      R16, Z
   \   0000005E   3106               CPI     R16, 22
   \   00000060   F2C9               BREQ    ??IntHandler_RX_USART1_1
    119                                     (UART[1].pRxBuffer[ UART[1].RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \   00000062   9110....           LDS     R17, (UART + 45)
   \   00000066   3012               CPI     R17, 2
   \   00000068   F088               BRCS    ??IntHandler_RX_USART1_4
   \   0000006A   3001               CPI     R16, 1
   \   0000006C   F479               BRNE    ??IntHandler_RX_USART1_4
    120                              UART[1].SyncCnt = 0 ;                // reset counter
   \   0000006E   E000               LDI     R16, 0
   \   00000070   9300....           STS     (UART + 45), R16
    121                              UART[1].RxState = HEADER ;
   \   00000074   E001               LDI     R16, 1
   \   00000076   9300....           STS     (UART + 44), R16
    122                              UART[1].RxLast = 0 ;
   \   0000007A   01FD               MOVW    R31:R30, R27:R26
   \   0000007C   E000               LDI     R16, 0
   \   0000007E   A700               STD     Z+40, R16
   \   00000080   A701               STD     Z+41, R16
    123                              UART[1].RxTimeout = RX_TO_TIME ;      // reset timeout
   \   00000082   EF0A               LDI     R16, 250
   \   00000084   A706               STD     Z+46, R16
   \   00000086   E000               LDI     R16, 0
   \   00000088   A707               STD     Z+47, R16
   \   0000008A   CFCB               RJMP    ??IntHandler_RX_USART1_0
    124                          } else {
    125                              UART[1].SyncCnt = 0 ;                // start over once more
   \                     ??IntHandler_RX_USART1_4:
   \   0000008C   E000               LDI     R16, 0
   \   0000008E   9300....           STS     (UART + 45), R16
   \   00000092   CFC7               RJMP    ??IntHandler_RX_USART1_0
    126                          }
    127                          break;
    128                      default :
    129                          if ((++UART[1].RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??IntHandler_RX_USART1_3:
   \   00000094   01FD               MOVW    R31:R30, R27:R26
   \   00000096   A106               LDD     R16, Z+38
   \   00000098   A117               LDD     R17, Z+39
   \   0000009A   5F0F               SUBI    R16, 255
   \   0000009C   4F1F               SBCI    R17, 255
   \   0000009E   A306               STD     Z+38, R16
   \   000000A0   A317               STD     Z+39, R17
   \   000000A2   3907               CPI     R16, 151
   \   000000A4   4010               SBCI    R17, 0
   \   000000A6   E001               LDI     R16, 1
   \   000000A8   F018               BRCS    ??IntHandler_RX_USART1_5
    130                              GoToSyncUART(1) ;                    // go to sync mode
   \   000000AA   ........           CALL    GoToSyncUART
   \   000000AE   CFB9               RJMP    ??IntHandler_RX_USART1_0
    131                          } else {
    132                              ReceivePacketUart(1) ;              // Check package
   \                     ??IntHandler_RX_USART1_5:
   \   000000B0   ........           CALL    ReceivePacketUart
   \   000000B4   CFB6               RJMP    ??IntHandler_RX_USART1_0
    133                          }
    134                          break ;   
    135                      }
    136                  }
    137              }
    138             OS_LeaveIntStack();
   \                     ??IntHandler_RX_USART1_2:
   \   000000B6   ....               RCALL   ?Subroutine1
    139             OS_LeaveInterruptNoSwitch();
    140          } 
   \                     ??CrossCallReturnLabel_1:
   \   000000B8   91A9               LD      R26, Y+
   \   000000BA   91B9               LD      R27, Y+
   \   000000BC   9518               RETI
   \   000000BE                      REQUIRE _A_UCSR1A
   \   000000BE                      REQUIRE _A_UDR1

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_6:
   \   00000002   BF9B               OUT     0x3B, R25
   \   00000004   BF8F               OUT     0x3F, R24
   \   00000006                      REQUIRE ?Subroutine3
   \   00000006                      ;               // Fall through to label ?Subroutine3

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   9109               LD      R16, Y+
   \   00000002   9119               LD      R17, Y+
   \   00000004   9129               LD      R18, Y+
   \   00000006   9139               LD      R19, Y+
   \   00000008   9149               LD      R20, Y+
   \   0000000A   9159               LD      R21, Y+
   \   0000000C   9169               LD      R22, Y+
   \   0000000E   9179               LD      R23, Y+
   \   00000010   9009               LD      R0, Y+
   \   00000012   9019               LD      R1, Y+
   \   00000014   9029               LD      R2, Y+
   \   00000016   9039               LD      R3, Y+
   \   00000018   91E9               LD      R30, Y+
   \   0000001A   91F9               LD      R31, Y+
   \   0000001C   9189               LD      R24, Y+
   \   0000001E   9199               LD      R25, Y+
   \   00000020   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_9:
   \   00000002   B78F               IN      R24, 0x3F
   \   00000004   B79B               IN      R25, 0x3B
   \   00000006                      REQUIRE ?Subroutine2
   \   00000006                      ;               // Fall through to label ?Subroutine2

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   9100....           LDS     R16, OS_Counters
   \   00000004   9503               INC     R16
   \   00000006   9300....           STS     OS_Counters, R16
   \   0000000A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000000E   9503               INC     R16
   \   00000010   9300....           STS     (OS_Counters + 1), R16
   \   00000014   94F8               CLI
   \   00000016   ........           CALL    OS__EnterIntStack
   \   0000001A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000001E   2300               TST     R16
   \   00000020   F409               BRNE    ??Subroutine2_0
   \   00000022   9478               SEI
   \                     ??Subroutine2_0:
   \   00000024   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   94F8               CLI
   \   00000002   ........           CALL    OS__LeaveIntStack
   \   00000006   9100....           LDS     R16, (OS_Counters + 1)
   \   0000000A   950A               DEC     R16
   \   0000000C   9300....           STS     (OS_Counters + 1), R16
   \   00000010   9100....           LDS     R16, OS_Counters
   \   00000014   950A               DEC     R16
   \   00000016   9300....           STS     OS_Counters, R16
   \   0000001A   9508               RET
    141          
    142          
    143          #pragma vector=USART1_TXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
    144          __interrupt void IntHandler_TX_USART1( void ){   
   \                     IntHandler_TX_USART1:
   \   00000000   ....               RCALL   ?Subroutine0
    145          
    146              OS_EnterInterrupt();
    147              OS_EnterIntStack();
    148              UCSR1B &= ~(__BIT_MASK( TXCIE1)) ;            // transmission end, disable int.
   \                     ??CrossCallReturnLabel_3:
   \   00000002   9100009A           LDS     R16, 154
   \   00000006   7B0F               ANDI    R16, 0xBF
   \   00000008   9300009A           STS     154, R16
    149              PORTE &= ~0x08 ;                              // TXE1 off
   \   0000000C   981B               CBI     0x03, 0x03
    150              OS_StopTimer(&TimerUSART1);                    // and stop timer
   \   0000000E   ....               LDI     R16, LOW(TimerUSART1)
   \   00000010   ....               LDI     R17, (TimerUSART1) >> 8
   \   00000012   ........           CALL    OS_StopTimer
    151              GoToSyncUART(1) ;                                    // go to sync modus for recive
   \   00000016   E001               LDI     R16, 1
   \   00000018   ........           CALL    GoToSyncUART
    152              OS_LeaveIntStack();
   \   0000001C   ....               RCALL   ?Subroutine1
    153              OS_LeaveInterruptNoSwitch();
    154          }
   \                     ??CrossCallReturnLabel_0:
   \   0000001E   9518               RETI
   \   00000020                      REQUIRE _A_UCSR1B
   \   00000020                      REQUIRE _A_PORTE
    155          
    156          
    157          #pragma vector = USART1_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    158          __interrupt void IntHandler_UDRE_USART1( void ){   
   \                     IntHandler_UDRE_USART1:
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_8:
   \   0000000A   B64F               IN      R4, 0x3F
   \   0000000C   B65B               IN      R5, 0x3B
   \   0000000E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R5_is_cg_reg
    159          
    160             OS_EnterInterrupt();
   \   0000000E   ....               RCALL   ?Subroutine2
    161             OS_EnterIntStack();
    162               if ( UART[1].TxCount-- > 0 ) {
   \                     ??CrossCallReturnLabel_4:
   \   00000010   ....               LDI     R30, LOW(UART)
   \   00000012   ....               LDI     R31, (UART) >> 8
   \   00000014   A100               LDD     R16, Z+32
   \   00000016   A111               LDD     R17, Z+33
   \   00000018   01C8               MOVW    R25:R24, R17:R16
   \   0000001A   9701               SBIW    R25:R24, 1
   \   0000001C   A380               STD     Z+32, R24
   \   0000001E   A391               STD     Z+33, R25
   \   00000020   2B01               OR      R16, R17
   \   00000022   F081               BREQ    ??IntHandler_UDRE_USART1_0
    163                  UDR1 = UART[1].pTxBuffer[ UART[1].TxLast ];  // Send a character
   \   00000024   8DA2               LDD     R26, Z+26
   \   00000026   8DB3               LDD     R27, Z+27
   \   00000028   8D06               LDD     R16, Z+30
   \   0000002A   8D17               LDD     R17, Z+31
   \   0000002C   0FA0               ADD     R26, R16
   \   0000002E   1FB1               ADC     R27, R17
   \   00000030   910C               LD      R16, X
   \   00000032   9300....           STS     _A_UDR1, R16
    164                  UART[1].TxLast++;
   \   00000036   8D06               LDD     R16, Z+30
   \   00000038   8D17               LDD     R17, Z+31
   \   0000003A   5F0F               SUBI    R16, 255
   \   0000003C   4F1F               SBCI    R17, 255
   \   0000003E   8F06               STD     Z+30, R16
   \   00000040   8F17               STD     Z+31, R17
   \   00000042   C00F               RJMP    ??IntHandler_UDRE_USART1_1
    165               } else {
    166                  UCSR1B &= ~(__BIT_MASK( UDRIE1)) ;            // transmission end, disable int.
   \                     ??IntHandler_UDRE_USART1_0:
   \   00000044   9100009A           LDS     R16, 154
   \   00000048   7D0F               ANDI    R16, 0xDF
   \   0000004A   9300009A           STS     154, R16
    167                  UCSR1A |= (__BIT_MASK( TXC1)) ;               // Clear int bit in TXC.
   \   0000004E   9100009B           LDS     R16, 155
   \   00000052   6400               ORI     R16, 0x40
   \   00000054   9300009B           STS     155, R16
    168                  UCSR1B |= __BIT_MASK( TXCIE1) ;               // Enable TXC int.
   \   00000058   9100009A           LDS     R16, 154
   \   0000005C   6400               ORI     R16, 0x40
   \   0000005E   9300009A           STS     154, R16
    169               }
    170              OS_LeaveIntStack();
   \                     ??IntHandler_UDRE_USART1_1:
   \   00000062   ....               RCALL   ?Subroutine4
    171              OS_LeaveInterruptNoSwitch();
    172          } 
   \                     ??CrossCallReturnLabel_7:
   \   00000064   BE5B               OUT     0x3B, R5
   \   00000066   BE4F               OUT     0x3F, R4
   \   00000068   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_5:
   \   0000006A   91A9               LD      R26, Y+
   \   0000006C   91B9               LD      R27, Y+
   \   0000006E   9049               LD      R4, Y+
   \   00000070   9059               LD      R5, Y+
   \   00000072   9518               RETI
   \   00000074                      REQUIRE _A_UDR1
   \   00000074                      REQUIRE _A_UCSR1B
   \   00000074                      REQUIRE _A_UCSR1A

   \                                 In  segment INTVEC, offset 0x78, root
   \                     `??IntHandler_RX_USART1::??INTVEC 120`:
   \   00000078   ........           JMP     IntHandler_RX_USART1

   \                                 In  segment INTVEC, offset 0x7c, root
   \                     `??IntHandler_UDRE_USART1::??INTVEC 124`:
   \   0000007C   ........           JMP     IntHandler_UDRE_USART1

   \                                 In  segment INTVEC, offset 0x80, root
   \                     `??IntHandler_TX_USART1::??INTVEC 128`:
   \   00000080   ........           JMP     IntHandler_TX_USART1

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     18      2   IntHandler_RX_USART1
       18      2   -> GoToSyncUART
       18      4   -> OS__EnterIntStack
       18      6   -> OS__LeaveIntStack
       18      2   -> ReceivePacketUart
     16      2   IntHandler_TX_USART1
       16      2   -> GoToSyncUART
       16      2   -> OS_StopTimer
       16      4   -> OS__EnterIntStack
       16      6   -> OS__LeaveIntStack
     20      2   IntHandler_UDRE_USART1
       20      4   -> OS__EnterIntStack
       20      4   -> OS__LeaveIntStack


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?Subroutine0
       6  ?Subroutine1
      38  ?Subroutine2
      34  ?Subroutine3
      28  ?Subroutine4
      34  ?Subroutine5
     190  IntHandler_RX_USART1
       4  IntHandler_RX_USART1::??INTVEC 120
      32  IntHandler_TX_USART1
       4  IntHandler_TX_USART1::??INTVEC 128
     116  IntHandler_UDRE_USART1
       4  IntHandler_UDRE_USART1::??INTVEC 124
       1  _A_PORTE
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UDR1

 
   4 bytes in segment ABSOLUTE
 484 bytes in segment CODE
  12 bytes in segment INTVEC
 
 484 bytes of CODE memory (+ 12 bytes shared)
   0 bytes of DATA memory (+  4 bytes shared)

Errors: none
Warnings: none
