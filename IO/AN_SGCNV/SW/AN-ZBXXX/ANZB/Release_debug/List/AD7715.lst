###############################################################################
#
# IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR           28/Sep/2017  11:34:44
# Copyright 1996-2017 IAR Systems AB.
# Startup license - IAR Embedded Workbench for Atmel AVR 7.10
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\AD7715.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EW7014.tmp
#        (D:\S2Prog\IO\ANZB\Src\AD7715.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\ANZB\Release_debug\Obj -D OS_LIBMODE_S -D OS_UART=0 -lCN
#        D:\S2Prog\IO\ANZB\Release_debug\List -y --initializers_in_flash
#        --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB\INC\ -I
#        D:\S2Prog\IO\ANZB\..\..\SHARED\INC\ --eeprom_size 4096 --clib -Ohz)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB\Release_debug\List\AD7715.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Release_debug\Obj\AD7715.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\AD7715.c
      1          /****************************************************************************************
      2          / AD converter handling , AD7715
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x63
   \   union <unnamed> volatile __io _A_PING
   \                     _A_PING:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x65
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          #include "version.h"
     11          
     12          /*************************************************************************
     13          *   (This is a task)
     14          *  AD7715 task 
     15          *
     16          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   F409               BRNE    ??Subroutine25_0
   \   00000002   9478               SEI
   \                     ??Subroutine25_0:
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
     17          void AD7715(void) {
   \                     AD7715:
   \   00000000   ........           CALL    ?PROLOGUE13_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004   9724               SBIW    R29:R28, 4
     18              char ch, Rev1 = 0; 
   \   00000006   24CC               CLR     R12
     19              unsigned int addata ;
     20              float Tempfloat;
     21          
     22              for (ch = 0; ch<12; ch++) {
   \   00000008   2466               CLR     R6
   \   0000000A   E00C               LDI     R16, 12
   \   0000000C   E011               LDI     R17, 1
     23                  TData.Ana.Filter[ch] = 1.0;
   \                     ??AD7715_0:
   \   0000000E   27FF               CLR     R31
   \   00000010   2DE6               MOV     R30, R6
   \   00000012   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000016   8312               STD     Z+2, R17
     24              }
   \   00000018   9463               INC     R6
   \   0000001A   950A               DEC     R16
   \   0000001C   F7C1               BRNE    ??AD7715_0
     25              TData.Ana.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP) + (ReadEEPROMByte(EEPROM_PORTSETUP+1) <<8); // Get setup from EEPROM
   \   0000001E   E002               LDI     R16, 2
   \   00000020   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_5:
   \   00000022   2F80               MOV     R24, R16
   \   00000024   E003               LDI     R16, 3
   \   00000026   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_4:
   \   00000028   ....               LDI     R30, LOW(TData)
   \   0000002A   ....               LDI     R31, (TData) >> 8
   \   0000002C   8380               ST      Z, R24
   \   0000002E   8301               STD     Z+1, R16
     26              SetRS4Port();                                           // and set power on ports
   \   00000030   ........           CALL    SetRS4Port
     27          
     28               
     29              WriteAdByte(0xff) ;             // Write 32 1's to reset
   \   00000034   ....               RCALL   ?Subroutine4
     30              WriteAdByte(0xff) ;
     31              WriteAdByte(0xff) ;
   \                     ??CrossCallReturnLabel_0:
   \   00000036   ....               RCALL   ?Subroutine4
     32              WriteAdByte(0xff) ;
     33              
     34              // Calibrate and check if the card is layout rev 1?
     35              WriteAdByte(0x10) ;             // Next write setup reg 
   \                     ??CrossCallReturnLabel_1:
   \   00000038   ....               RCALL   ?Subroutine9
     36              WriteAdByte(0x4e) ;             //  Ad setup data, unipolar, calibrate
   \                     ??CrossCallReturnLabel_6:
   \   0000003A   E40E               LDI     R16, 78
   \   0000003C   ....               RCALL   ?Subroutine0
     37              OS_Delay(250);
     38              OS_ClearEvents(&TCB_AD7715);
     39              OS_WaitEventTimed(1, 1000);
     40              
     41              ClrBit(PORTE,0xf0);                 // check channel 14 for 2.5 V
     42              SetBit(PORTE, (14 << 4) & 0xf0);    // check 
     43              WriteAdByte(0x10) ;                 // Next write data 
     44              WriteAdByte(0x0e) ;                 // Ad setup data, unipolar
   \                     ??CrossCallReturnLabel_37:
   \   0000003E   ....               RCALL   ?Subroutine1
     45              OS_Delay(85);
     46              OS_ClearEvents(&TCB_AD7715);
     47              OS_WaitEventTimed(1, 250);
     48              WriteAdByte(0x38) ;                 // Next read data 
     49              addata = ReadAdByte()* 256 ;        // read data 16 bit data from ad 
     50              addata += ReadAdByte() ;
     51              if (addata > 60000){
   \                     ??CrossCallReturnLabel_16:
   \   00000040   2F50               MOV     R21, R16
   \   00000042   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_19:
   \   00000044   3601               CPI     R16, 97
   \   00000046   4E5A               SBCI    R21, 234
   \   00000048   F080               BRCS    ??AD7715_1
     52                  Rev1 = true;
   \   0000004A   94C3               INC     R12
     53                  for (ch = 0 ; ch < 12 ; ch++) {       // Get the gain and offset from the EEPROM
   \   0000004C   2466               CLR     R6
   \   0000004E   E04C               LDI     R20, 12
   \   00000050   E91D               LDI     R17, 157
   \   00000052   E72F               LDI     R18, 127
   \   00000054   E33F               LDI     R19, 63
     54                     TData.Ana.Offset[ch] = 0.0;
   \                     ??AD7715_2:
   \   00000056   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_10:
   \   00000058   E000               LDI     R16, 0
   \   0000005A   8300               ST      Z, R16
   \   0000005C   8301               STD     Z+1, R16
   \   0000005E   8302               STD     Z+2, R16
   \   00000060   8303               STD     Z+3, R16
     55                     TData.Ana.Gain[ch] = 0.9985;
   \   00000062   EB02               LDI     R16, 178
   \   00000064   ....               RCALL   ?Subroutine12
     56                 }
     57              } else {
   \                     ??CrossCallReturnLabel_12:
   \   00000066   F071               BREQ    ??AD7715_3
   \   00000068   CFF6               RJMP    ??AD7715_2
     58                  for (ch = 0 ; ch < 12 ; ch++) {       // Get the gain and offset from the EEPROM
   \                     ??AD7715_1:
   \   0000006A   2466               CLR     R6
   \   0000006C   E04C               LDI     R20, 12
   \   0000006E   E11A               LDI     R17, 26
   \   00000070   E72F               LDI     R18, 127
   \   00000072   E33F               LDI     R19, 63
     59                     TData.Ana.Offset[ch] = 0.0;
   \                     ??AD7715_4:
   \   00000074   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_11:
   \   00000076   82C0               ST      Z, R12
   \   00000078   82C1               STD     Z+1, R12
   \   0000007A   82C2               STD     Z+2, R12
   \   0000007C   82C3               STD     Z+3, R12
     60                     TData.Ana.Gain[ch] = 0.9965;
   \   0000007E   EA00               LDI     R16, 160
   \   00000080   ....               RCALL   ?Subroutine12
     61                 }
     62              }
   \                     ??CrossCallReturnLabel_13:
   \   00000082   F7C1               BRNE    ??AD7715_4
     63              for (ch = 0 ; ch < 12 ; ch++) {       // Get the gain and offset from the EEPROM
   \                     ??AD7715_3:
   \   00000084   2466               CLR     R6
   \   00000086   E00C               LDI     R16, 12
   \   00000088   2E40               MOV     R4, R16
   \                     ??AD7715_5:
   \   0000008A   2D06               MOV     R16, R6
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   6800               ORI     R16, 0x80
   \   00000090   E043               LDI     R20, 3
   \   00000092   ........           CALL    ?S_SHL_L02
   \   00000096   01C8               MOVW    R25:R24, R17:R16
   \   00000098   01AE               MOVW    R21:R20, R29:R28
   \   0000009A   E024               LDI     R18, 4
     64                ReadEEPROMBuffer( (ch | 0x80) * sizeof(float)*2, sizeof(float), (char*)&Tempfloat );
   \   0000009C   ........           CALL    ReadEEPROMBuffer
     65                
     66                if (IsFloat(Tempfloat) && Tempfloat > -2.0 && Tempfloat < 2.0 ) { 
   \   000000A0   ....               LDI     R26, LOW((TData + 98))
   \   000000A2   ....               LDI     R27, HIGH((TData + 98))
   \   000000A4   E004               LDI     R16, 4
   \   000000A6   9E60               MUL     R6, R16
   \   000000A8   0DA0               ADD     R26, R0
   \   000000AA   1DB1               ADC     R27, R1
   \   000000AC   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_8:
   \   000000AE   F0A1               BREQ    ??AD7715_6
   \   000000B0   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_22:
   \   000000B2   EF4F               LDI     R20, 255
   \   000000B4   EF5F               LDI     R21, 255
   \   000000B6   EF6F               LDI     R22, 255
   \   000000B8   EB7F               LDI     R23, 191
   \   000000BA   ........           CALL    ?F_CMP_GE_L04
   \   000000BE   F460               BRCC    ??AD7715_6
   \   000000C0   E040               LDI     R20, 0
   \   000000C2   E050               LDI     R21, 0
   \   000000C4   E060               LDI     R22, 0
   \   000000C6   E470               LDI     R23, 64
   \   000000C8   ........           CALL    ?F_CMP_LT_L04
   \   000000CC   F428               BRCC    ??AD7715_6
     67                  *((float*)&TData.Ana.Offset[ch]) = *((float*)&Tempfloat) ;  //offset
   \   000000CE   930D               ST      X+, R16
   \   000000D0   931D               ST      X+, R17
   \   000000D2   932D               ST      X+, R18
   \   000000D4   933C               ST      X, R19
   \   000000D6   9713               SBIW    R27:R26, 3
     68                }
     69                
     70                ReadEEPROMBuffer( ((ch | 0x80) * sizeof(float)*2) + sizeof(float), sizeof(float), (char*)&Tempfloat );
   \                     ??AD7715_6:
   \   000000D8   01AE               MOVW    R21:R20, R29:R28
   \   000000DA   E024               LDI     R18, 4
   \   000000DC   9604               ADIW    R25:R24, 4
   \   000000DE   018C               MOVW    R17:R16, R25:R24
   \   000000E0   ........           CALL    ReadEEPROMBuffer
     71                
     72                if (IsFloat(Tempfloat) && Tempfloat > 0.98 && Tempfloat < 1.02) { 
   \   000000E4   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_9:
   \   000000E6   F081               BREQ    ??CrossCallReturnLabel_20
   \   000000E8   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_23:
   \   000000EA   E449               LDI     R20, 73
   \   000000EC   EE51               LDI     R21, 225
   \   000000EE   E76A               LDI     R22, 122
   \   000000F0   E37F               LDI     R23, 63
   \   000000F2   ........           CALL    ?F_CMP_GE_L04
   \   000000F6   F440               BRCC    ??CrossCallReturnLabel_20
   \   000000F8   E54C               LDI     R20, 92
   \   000000FA   E85F               LDI     R21, 143
   \   000000FC   E862               LDI     R22, 130
   \   000000FE   ........           CALL    ?F_CMP_LT_L04
   \   00000102   F410               BRCC    ??CrossCallReturnLabel_20
     73                  *((float*)&TData.Ana.Gain[ch]) = *((float*)&Tempfloat) ;  //gain
   \   00000104   01FD               MOVW    R31:R30, R27:R26
   \   00000106   ....               RCALL   ?Subroutine20
     74                }
     75             }
   \                     ??CrossCallReturnLabel_20:
   \   00000108   9463               INC     R6
   \   0000010A   944A               DEC     R4
   \   0000010C   F009               BREQ    $+2+2
   \   0000010E   CFBD               RJMP    ??AD7715_5
     76             
     77              while (1) {
     78                  if (Rev1) {
   \                     ??AD7715_7:
   \   00000110   20CC               TST     R12
   \   00000112   F049               BREQ    ??AD7715_8
     79                     
     80                      ClrBit(PORTE,0xf0); 
   \   00000114   ....               RCALL   ?Subroutine16
     81                      SetBit(PORTE, (15 << 4) & 0xf0); // 0V at ch 16
   \                     ??CrossCallReturnLabel_32:
   \   00000116   B103               IN      R16, 0x03
   \   00000118   6F00               ORI     R16, 0xF0
   \   0000011A   B903               OUT     0x03, R16
   \   0000011C   ....               RCALL   ?Subroutine27
     82                      WriteAdByte(0x10) ;             // Next write setup reg 
     83                      WriteAdByte(0x8e) ;             //  AStark test zero scale calibrate
   \                     ??CrossCallReturnLabel_35:
   \   0000011E   E80E               LDI     R16, 142
   \   00000120   ....               RCALL   ?Subroutine0
     84                      OS_Delay(250);
     85                      OS_ClearEvents(&TCB_AD7715);
     86                      OS_WaitEventTimed(1, 1000);
     87                      
     88                      ClrBit(PORTE,0xf0); 
     89                      SetBit(PORTE, (14 << 4) & 0xf0); // 2.5V at ch 15
     90                      WriteAdByte(0x10) ;             // Next write setup reg 
     91                      WriteAdByte(0xce) ;             //  AStark test full scale calibrate
   \                     ??CrossCallReturnLabel_38:
   \   00000122   EC0E               LDI     R16, 206
   \   00000124   C002               RJMP    ??AD7715_9
     92                      OS_Delay(250);
     93                      OS_ClearEvents(&TCB_AD7715);
     94                      OS_WaitEventTimed(1, 1000);
     95           
     96                  } else {
     97                      WriteAdByte(0x10) ;             // Next write setup reg 
   \                     ??AD7715_8:
   \   00000126   ....               RCALL   ?Subroutine9
     98                      WriteAdByte(0x4e) ;             //  Internal calibration calibrate
   \                     ??CrossCallReturnLabel_7:
   \   00000128   E40E               LDI     R16, 78
   \                     ??AD7715_9:
   \   0000012A   ....               RCALL   ??Subroutine29_0
     99                      OS_Delay(250);
   \                     ??CrossCallReturnLabel_50:
   \   0000012C   ....               RCALL   ?Subroutine15
    100                      OS_ClearEvents(&TCB_AD7715);
    101                      OS_WaitEventTimed(1, 1000);
    102                  }
    103          
    104                  for (ch = 0 ; ch < 12 ; ch++) {
   \                     ??CrossCallReturnLabel_27:
   \   0000012E   2466               CLR     R6
   \   00000130   E00C               LDI     R16, 12
   \   00000132   2E70               MOV     R7, R16
    105                      ClrBit(PORTE,0xf0); 
   \                     ??AD7715_10:
   \   00000134   ....               RCALL   ?Subroutine16
    106                      SetBit(PORTE, (ch << 4) & 0xf0);
   \                     ??CrossCallReturnLabel_33:
   \   00000136   2D06               MOV     R16, R6
   \   00000138   9502               SWAP    R16
   \   0000013A   7F00               ANDI    R16, 0xF0
   \   0000013C   B113               IN      R17, 0x03
   \   0000013E   2B10               OR      R17, R16
   \   00000140   B913               OUT     0x03, R17
   \   00000142   ....               RCALL   ?Subroutine27
    107                      WriteAdByte(0x10) ;                 // Next write data 
    108                      WriteAdByte(0x0e) ;                          // Ad setup data, unipolar
   \                     ??CrossCallReturnLabel_36:
   \   00000144   ....               RCALL   ?Subroutine1
    109                      OS_Delay(85);
    110                      OS_ClearEvents(&TCB_AD7715);
    111                      OS_WaitEventTimed(1, 250);
    112                      WriteAdByte(0x38) ;             // Next read data 
    113                      addata = ReadAdByte()* 256 ;        // read data 16 bit data from ad 
   \                     ??CrossCallReturnLabel_17:
   \   00000146   2F30               MOV     R19, R16
    114                      addata += ReadAdByte() ;
   \   00000148   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_18:
   \   0000014A   2F20               MOV     R18, R16
    115                      TData.Ana.Status[ch] = 0;                   // Result ok
   \   0000014C   E010               LDI     R17, 0
   \   0000014E   ....               LDI     R24, LOW(TData)
   \   00000150   ....               LDI     R25, (TData) >> 8
   \   00000152   0D86               ADD     R24, R6
   \   00000154   1F91               ADC     R25, R17
   \   00000156   01FC               MOVW    R31:R30, R25:R24
   \   00000158   8716               STD     Z+14, R17
    116                      TData.Ana.Result[ch] += ((((((float)addata / 65535.0) * 25.0) * TData.Ana.Gain[ch])-TData.Ana.Offset[ch] - TData.Ana.Result[ch])
    117                                               / (TData.Ana.Filter[ch]+1.0))  ;             // readed value / 16bit * 2.5 volt range
   \   0000015A   E004               LDI     R16, 4
   \   0000015C   9E60               MUL     R6, R16
   \   0000015E   ....               LDI     R16, LOW(TData)
   \   00000160   2E40               MOV     R4, R16
   \   00000162   ....               LDI     R16, (TData) >> 8
   \   00000164   0C40               ADD     R4, R0
   \   00000166   1D01               ADC     R16, R1
   \   00000168   2E50               MOV     R5, R16
   \   0000016A   01D2               MOVW    R27:R26, R5:R4
   \   0000016C   59AE               SUBI    R26, 158
   \   0000016E   4FBF               SBCI    R27, 255
   \   00000170   2F13               MOV     R17, R19
   \   00000172   E030               LDI     R19, 0
   \   00000174   2F02               MOV     R16, R18
   \   00000176   E020               LDI     R18, 0
   \   00000178   ........           CALL    ?UL2F_L04
   \   0000017C   E040               LDI     R20, 0
   \   0000017E   EF5F               LDI     R21, 255
   \   00000180   E76F               LDI     R22, 127
   \   00000182   E477               LDI     R23, 71
   \   00000184   ........           CALL    ?F_DIV_L04
   \   00000188   E040               LDI     R20, 0
   \   0000018A   E050               LDI     R21, 0
   \   0000018C   EC68               LDI     R22, 200
   \   0000018E   E471               LDI     R23, 65
   \   00000190   ........           CALL    ?F_MUL_L04
   \   00000194   01A8               MOVW    R21:R20, R17:R16
   \   00000196   01B9               MOVW    R23:R22, R19:R18
   \   00000198   01FD               MOVW    R31:R30, R27:R26
   \   0000019A   A900               LDD     R16, Z+48
   \   0000019C   A911               LDD     R17, Z+49
   \   0000019E   A922               LDD     R18, Z+50
   \   000001A0   A933               LDD     R19, Z+51
   \   000001A2   ........           CALL    ?F_MUL_L04
   \   000001A6   914D               LD      R20, X+
   \   000001A8   915D               LD      R21, X+
   \   000001AA   916D               LD      R22, X+
   \   000001AC   917C               LD      R23, X
   \   000001AE   ........           CALL    ?F_SUB_L04
   \   000001B2   ....               RCALL   ?Subroutine14
    118                  } 
   \                     ??CrossCallReturnLabel_14:
   \   000001B4   ........           CALL    ?F_SUB_L04
   \   000001B8   0148               MOVW    R9:R8, R17:R16
   \   000001BA   0159               MOVW    R11:R10, R19:R18
   \   000001BC   01FC               MOVW    R31:R30, R25:R24
   \   000001BE   8102               LDD     R16, Z+2
   \   000001C0   E010               LDI     R17, 0
   \   000001C2   E020               LDI     R18, 0
   \   000001C4   E030               LDI     R19, 0
   \   000001C6   ........           CALL    ?UL2F_L04
   \   000001CA   E040               LDI     R20, 0
   \   000001CC   E050               LDI     R21, 0
   \   000001CE   E860               LDI     R22, 128
   \   000001D0   E37F               LDI     R23, 63
   \   000001D2   ........           CALL    ?F_ADD_L04
   \   000001D6   01A8               MOVW    R21:R20, R17:R16
   \   000001D8   01B9               MOVW    R23:R22, R19:R18
   \   000001DA   0184               MOVW    R17:R16, R9:R8
   \   000001DC   0195               MOVW    R19:R18, R11:R10
   \   000001DE   ........           CALL    ?F_DIV_L04
   \   000001E2   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_15:
   \   000001E4   ........           CALL    ?F_ADD_L04
   \   000001E8   01F2               MOVW    R31:R30, R5:R4
   \   000001EA   8F02               STD     Z+26, R16
   \   000001EC   8F13               STD     Z+27, R17
   \   000001EE   8F24               STD     Z+28, R18
   \   000001F0   8F35               STD     Z+29, R19
   \   000001F2   9463               INC     R6
   \   000001F4   947A               DEC     R7
   \   000001F6   F409               BRNE    $+2+2
   \   000001F8   CF8B               RJMP    ??AD7715_7
   \   000001FA   CF9C               RJMP    ??AD7715_10
   \   000001FC                      REQUIRE _A_PORTE
    119              }
    120          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   01F2               MOVW    R31:R30, R5:R4
   \   00000002   8D42               LDD     R20, Z+26
   \   00000004   8D53               LDD     R21, Z+27
   \   00000006   8D64               LDD     R22, Z+28
   \   00000008   8D75               LDD     R23, Z+29
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   8108               LD      R16, Y
   \   00000002   8119               LDD     R17, Y+1
   \   00000004   812A               LDD     R18, Y+2
   \   00000006   813B               LDD     R19, Y+3
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_21:
   \   00000002   9463               INC     R6
   \   00000004   954A               DEC     R20
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   AB00               STD     Z+48, R16
   \   00000002   AB11               STD     Z+49, R17
   \   00000004   AB22               STD     Z+50, R18
   \   00000006   AB33               STD     Z+51, R19
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   ....               LDI     R30, LOW((TData + 98))
   \   00000002   ....               LDI     R31, HIGH((TData + 98))
   \   00000004   E004               LDI     R16, 4
   \   00000006   9E60               MUL     R6, R16
   \   00000008   0DE0               ADD     R30, R0
   \   0000000A   1DF1               ADC     R31, R1
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_24:
   \   00000002   ........           CALL    IsFloat
   \   00000006   2300               TST     R16
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   E100               LDI     R16, 16
   \   00000002   ....               RJMP    ??Subroutine29_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_40:
   \   00000002   ....               RJMP    ?Subroutine18

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   E010               LDI     R17, 0
   \   00000002   ........           JMP     ReadEEPROMByte

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   ....               RCALL   ??Subroutine29_0
   \                     ??CrossCallReturnLabel_49:
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   ....               RJMP    ??Subroutine29_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   94F8               CLI
   \   00000002   B103               IN      R16, 0x03
   \   00000004   700F               ANDI    R16, 0x0F
   \   00000006   B903               OUT     0x03, R16
   \   00000008   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_39:
   \   0000000A                      REQUIRE ?Subroutine26
   \   0000000A                      ;               // Fall through to label ?Subroutine26

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   94F8               CLI
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   E00E               LDI     R16, 14
   \   00000002   ....               RCALL   ??Subroutine29_0
   \                     ??CrossCallReturnLabel_48:
   \   00000004   E505               LDI     R16, 85
   \   00000006   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_26:
   \   00000008   EF2A               LDI     R18, 250
   \   0000000A   E030               LDI     R19, 0
   \   0000000C   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_29:
   \   0000000E   E308               LDI     R16, 56
   \   00000010   ....               RCALL   ??Subroutine29_0
   \                     ??CrossCallReturnLabel_47:
   \   00000012                      REQUIRE ?Subroutine17
   \   00000012                      ;               // Fall through to label ?Subroutine17

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   ....               RJMP    ReadAdByte

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ....               RCALL   ??Subroutine29_0
   \                     ??CrossCallReturnLabel_46:
   \   00000002   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_28:
   \   00000004   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_34:
   \   00000006   B103               IN      R16, 0x03
   \   00000008   6E00               ORI     R16, 0xE0
   \   0000000A   B903               OUT     0x03, R16
   \   0000000C   ....               RJMP    ?Subroutine27

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   E100               LDI     R16, 16
   \   00000002                      REQUIRE ??Subroutine29_0
   \   00000002                      ;               // Fall through to label ??Subroutine29_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine29_0:
   \   00000000   ....               RJMP    WriteAdByte

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   EF0A               LDI     R16, 250
   \   00000002   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_25:
   \   00000004   EE28               LDI     R18, 232
   \   00000006   E033               LDI     R19, 3
   \   00000008                      REQUIRE ?Subroutine24
   \   00000008                      ;               // Fall through to label ?Subroutine24

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ........           JMP     OS_WaitEventTimed

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   E010               LDI     R17, 0
   \   00000002   ........           CALL    OS_Delay
   \   00000006   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000008   ....               LDI     R17, (TCB_AD7715) >> 8
   \   0000000A   ........           JMP     OS_ClearEvents

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   9100....           LDS     R16, (OS_Counters + 1)
   \   00000004   2300               TST     R16
   \   00000006   ....               RJMP    ?Subroutine25
    121          
    122          /*************************************************************************
    123          *
    124          *  Set ports on or off
    125          *
    126          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    127          void SetAnaPort(void) {
   \                     SetAnaPort:
    128          
    129              PORTC = (TData.Ana.PortUsed & 0xff) ;         // Set power on ports 0-7
   \   00000000   ....               LDI     R30, LOW(TData)
   \   00000002   ....               LDI     R31, (TData) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   BB05               OUT     0x15, R16
    130              ClrBit(PORTB, 0xe1);                            // Set power on ports 8-11 off
   \   00000008   94F8               CLI
   \   0000000A   B308               IN      R16, 0x18
   \   0000000C   710E               ANDI    R16, 0x1E
   \   0000000E   BB08               OUT     0x18, R16
   \   00000010   ....               RCALL   ?Subroutine8
    131              SetBit(PORTB, TData.Ana.PortUsed>>8 & 0x01);    // Set power on port 8
   \                     ??CrossCallReturnLabel_30:
   \   00000012   8101               LDD     R16, Z+1
   \   00000014   7001               ANDI    R16, 0x01
   \   00000016   B318               IN      R17, 0x18
   \   00000018   2B10               OR      R17, R16
   \   0000001A   BB18               OUT     0x18, R17
   \   0000001C   ....               RCALL   ?Subroutine8
    132              SetBit(PORTB, TData.Ana.PortUsed>>4 & 0xe0);      // Set power on ports 9-11
   \                     ??CrossCallReturnLabel_31:
   \   0000001E   E044               LDI     R20, 4
   \   00000020   8100               LD      R16, Z
   \   00000022   8111               LDD     R17, Z+1
   \   00000024   ........           CALL    ?US_SHR_L02
   \   00000028   7E00               ANDI    R16, 0xE0
   \   0000002A   B318               IN      R17, 0x18
   \   0000002C   2B10               OR      R17, R16
   \   0000002E   BB18               OUT     0x18, R17
   \   00000030                      REQUIRE ?Subroutine23
   \   00000030                      REQUIRE _A_PORTC
   \   00000030                      REQUIRE _A_PORTB
   \   00000030                      ;               // Fall through to label ?Subroutine23
    133          
    134          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_41:
   \   00000002   ....               RJMP    ?Subroutine26
    135          
    136          /*************************************************************************
    137          *
    138          *  Read from AD-converter
    139          *
    140          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    141          char ReadAdByte(void) {
   \                     ReadAdByte:
    142          
    143              char i, readbyte;
    144          
    145              for (i = 0; i <  8; i++) {
   \   00000000   E018               LDI     R17, 8
    146                  readbyte <<= 1 ;                    // shift to next bit 
   \                     ??ReadAdByte_0:
   \   00000002   0F00               LSL     R16
    147                  ClrBit(PORTD, ADCLK) ;
   \   00000004   ....               RCALL   ?Subroutine2
    148                  SetBit(PORTD, ADCLK) ;                  // set clock line high 
   \                     ??CrossCallReturnLabel_42:
   \   00000006   94F8               CLI
   \   00000008   9A91               SBI     0x12, 0x01
   \   0000000A   ....               RCALL   ??Subroutine28_0
    149                  if (PING & ADDO) {                  // data  = 1?
   \                     ??CrossCallReturnLabel_44:
   \   0000000C   9120....           LDS     R18, _A_PING
   \   00000010   FD23               SBRC    R18, 3
    150                      readbyte |= 0x01 ;                    // set bit high 
   \   00000012   6001               ORI     R16, 0x01
    151                  } else {
    152                      readbyte &= ~0x01 ;                   // set bit low 
    153                  }
    154              }
   \                     ??ReadAdByte_1:
   \   00000014   951A               DEC     R17
   \   00000016   F7A9               BRNE    ??ReadAdByte_0
    155              return readbyte ;
   \   00000018   9508               RET
   \   0000001A                      REQUIRE _A_PORTD
   \   0000001A                      REQUIRE _A_PING
    156          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   94F8               CLI
   \   00000002   9891               CBI     0x12, 0x01
   \   00000004                      REQUIRE ?Subroutine25
   \   00000004                      REQUIRE ??Subroutine28_0
   \   00000004                      ;               // Fall through to label ??Subroutine28_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine28_0:
   \   00000000   9120....           LDS     R18, (OS_Counters + 1)
   \   00000004   2322               TST     R18
   \   00000006                      REQUIRE ?Subroutine25
   \   00000006                      ;               // Fall through to label ?Subroutine25
    157          
    158          /*************************************************************************
    159          *
    160          *  Write to AD-converter
    161          *
    162          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    163          void WriteAdByte(char data) {
   \                     WriteAdByte:
    164          
    165              char i;
    166          
    167              for (i = 0; i <  8; i++) {
   \   00000000   E018               LDI     R17, 8
    168                  ClrBit(PORTD, ADCLK) ;                  // set clock line low
   \                     ??WriteAdByte_0:
   \   00000002   ....               RCALL   ?Subroutine2
    169                  if (data & 0x80) {                  // data bit = 1? 
   \                     ??CrossCallReturnLabel_43:
   \   00000004   FB07               BST     R16, 7
   \   00000006   94F8               CLI
   \   00000008   91200065           LDS     R18, 101
   \   0000000C   F426               BRTC    ??WriteAdByte_1
    170                      SetBit(PORTG,ADDI) ;                  // set data high 
   \   0000000E   6120               ORI     R18, 0x10
   \   00000010   ....               RCALL   ?Subroutine5
    171                  } else {
   \                     ??CrossCallReturnLabel_2:
   \   00000012   F429               BRNE    ??WriteAdByte_2
   \   00000014   C003               RJMP    ??WriteAdByte_3
    172                      ClrBit(PORTG, ADDI) ;                 // set data low 
   \                     ??WriteAdByte_1:
   \   00000016   7E2F               ANDI    R18, 0xEF
   \   00000018   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_3:
   \   0000001A   F409               BRNE    ??WriteAdByte_2
   \                     ??WriteAdByte_3:
   \   0000001C   9478               SEI
    173                  }
    174                  data <<= 1 ;                        // shift to next bit 
   \                     ??WriteAdByte_2:
   \   0000001E   0F00               LSL     R16
    175                  SetBit(PORTD, ADCLK) ;                  // set clock line high 
   \   00000020   94F8               CLI
   \   00000022   9A91               SBI     0x12, 0x01
   \   00000024   ....               RCALL   ??Subroutine28_0
    176              }           
   \                     ??CrossCallReturnLabel_45:
   \   00000026   951A               DEC     R17
   \   00000028   F761               BRNE    ??WriteAdByte_0
    177          }       
   \   0000002A   9508               RET
   \   0000002C                      REQUIRE _A_PORTD
   \   0000002C                      REQUIRE _A_PORTG

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   93200065           STS     101, R18
   \   00000004   9120....           LDS     R18, (OS_Counters + 1)
   \   00000008   2322               TST     R18
   \   0000000A   9508               RET
    178          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     17      2   AD7715
       17      4   -> IsFloat
       17      4   -> OS_ClearEvents
       17      6   -> OS_ClearEvents
       17      6   -> OS_Delay
       17      8   -> OS_Delay
       17      2   -> OS_WaitEventTimed
       17      4   -> OS_WaitEventTimed
       17      2   -> ReadAdByte
       17      2   -> ReadEEPROMBuffer
       17      2   -> ReadEEPROMByte
       17      2   -> SetRS4Port
       17      2   -> WriteAdByte
       17      4   -> WriteAdByte
       17      2 ?F_ADD_L04
       17      2 ?F_CMP_GE_L04
       17      2 ?F_CMP_LT_L04
       17      2 ?F_DIV_L04
       17      2 ?F_MUL_L04
       17      2 ?F_SUB_L04
       17      2 ?S_SHL_L02
       17      2 ?UL2F_L04
      0      2   ReadAdByte
      0      2   SetAnaPort
        0      2 ?US_SHR_L02
      0      2   WriteAdByte


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine28_0
       2  ??Subroutine29_0
      14  ?Subroutine0
      18  ?Subroutine1
      10  ?Subroutine10
      14  ?Subroutine11
       8  ?Subroutine12
      12  ?Subroutine14
       8  ?Subroutine15
      10  ?Subroutine16
       2  ?Subroutine17
       2  ?Subroutine18
       4  ?Subroutine2
      10  ?Subroutine20
      10  ?Subroutine21
      14  ?Subroutine22
       8  ?Subroutine23
       6  ?Subroutine24
       6  ?Subroutine25
       4  ?Subroutine26
       4  ?Subroutine27
       8  ?Subroutine4
      12  ?Subroutine5
       6  ?Subroutine6
       4  ?Subroutine8
       4  ?Subroutine9
     508  AD7715
      26  ReadAdByte
      48  SetAnaPort
      44  WriteAdByte
       1  _A_PING
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTG

 
   6 bytes in segment ABSOLUTE
 832 bytes in segment CODE
 
 832 bytes of CODE memory
   0 bytes of DATA memory (+ 6 bytes shared)

Errors: none
Warnings: none
