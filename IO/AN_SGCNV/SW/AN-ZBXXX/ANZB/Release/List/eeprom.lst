###############################################################################
#
# IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR           28/Sep/2017  11:33:03
# Copyright 1996-2017 IAR Systems AB.
# Startup license - IAR Embedded Workbench for Atmel AVR 7.10
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\eeprom.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EWE7E8.tmp
#        (D:\S2Prog\IO\ANZB\Src\eeprom.c --cpu=m1280 -ms -o
#        D:\S2Prog\IO\ANZB\Release\Obj -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\ANZB\Release\List -y --initializers_in_flash --no_tbaa
#        --enable_external_bus -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\ANZB\INC\ -I D:\S2Prog\IO\ANZB\..\..\SHARED\INC\
#        --eeprom_size 4096 --clib -Oh)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB\Release\List\eeprom.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Release\Obj\eeprom.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\eeprom.c
      1          /****************************************************************************************
      2          / Read and write the eeprom
      3          /
      4          ***************************************************************************************/
      5          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x3c
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3e
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          
     12          
     13          /*---------------------------------------------------------------------------
     14          **
     15          **  See how many date i remining
     16          **
     17          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     18          char TestEEPROM( void ) {
   \                     TestEEPROM:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     19          
     20              return WriteCount;
   \   00000000   9100....           LDS     R16, WriteCount
   \   00000004   9508               RET
     21          }
     22          
     23          /*---------------------------------------------------------------------------
     24          **
     25          **  Reads an address in the eeprom
     26          **
     27          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     28          char ReadEEPROMByte( unsigned int Address ) {
   \                     ReadEEPROMByte:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     29          
     30              unsigned char Data;
     31          
     32              while (EECR & (1<<EEWE))     // Wait until ready
   \                     ??ReadEEPROMByte_0:
   \   00000000   99E1               SBIC    0x1C, 0x01
   \   00000002   CFFE               RJMP    ??ReadEEPROMByte_0
     33                  ;
     34              EEAR = Address;
   \   00000004   BB1F               OUT     0x1F, R17
   \   00000006   BB0E               OUT     0x1E, R16
     35              OS_IncDI();
   \   00000008   94F8               CLI
     36              EECR |= (1 << EERE) ;       // Don't use SetBit macrod due to timing
   \   0000000A   9AE0               SBI     0x1C, 0x00
     37              OS_DecRI();
   \   0000000C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000010   2300               TST     R16
   \   00000012   F409               BRNE    ??ReadEEPROMByte_1
   \   00000014   9478               SEI
     38          
     39              Data = EEDR;
     40              return Data;
   \                     ??ReadEEPROMByte_1:
   \   00000016   B30D               IN      R16, 0x1D
   \   00000018   9508               RET
   \   0000001A                      REQUIRE _A_EECR
   \   0000001A                      REQUIRE _A_EEAR
   \   0000001A                      REQUIRE _A_EEDR
     41          
     42          }
     43          
     44          /*---------------------------------------------------------------------------
     45          **
     46          **  Write a caracther to the eeprom
     47          **
     48          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     49          void WriteEEPROMByte( unsigned int Address, char Data ) {   
   \                     WriteEEPROMByte:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     50          
     51              while (EECR & (1<<EEWE))     // Wait until ready
   \                     ??WriteEEPROMByte_0:
   \   00000000   99E1               SBIC    0x1C, 0x01
   \   00000002   CFFE               RJMP    ??WriteEEPROMByte_0
     52                  ;
     53              OS_IncDI();
   \   00000004   94F8               CLI
     54              EEAR = Address;
   \   00000006   BB1F               OUT     0x1F, R17
   \   00000008   BB0E               OUT     0x1E, R16
     55              EEDR = Data;
   \   0000000A   BB2D               OUT     0x1D, R18
     56              EECR |= (1 << EEMWE) ;       // Don't use SetBit macrod due to timing
   \   0000000C   9AE2               SBI     0x1C, 0x02
     57              EECR |= (1 << EEWE) ;        // Don't use SetBit macrod due to timing
   \   0000000E   9AE1               SBI     0x1C, 0x01
     58              OS_DecRI();
   \   00000010   9100....           LDS     R16, (OS_Counters + 1)
   \   00000014   2300               TST     R16
   \   00000016   F409               BRNE    ??WriteEEPROMByte_1
   \   00000018   9478               SEI
     59          }
   \                     ??WriteEEPROMByte_1:
   \   0000001A   9508               RET
   \   0000001C                      REQUIRE _A_EECR
   \   0000001C                      REQUIRE _A_EEAR
   \   0000001C                      REQUIRE _A_EEDR
     60          
     61          /*---------------------------------------------------------------------------
     62          **
     63          **  Read a tring from the eeprom
     64          **
     65          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     66          void ReadEEPROMBuffer( unsigned int Address, char Size, char *pData ) {   
   \                     ReadEEPROMBuffer:
   \   00000000   2F39               MOV     R19, R25
   \   00000002   2F68               MOV     R22, R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
     67              unsigned int Index;
     68          
     69              for ( Index = 0; Index < Size; Index++ ) {
   \   00000004   2322               TST     R18
   \   00000006   F0A9               BREQ    ??ReadEEPROMBuffer_0
   \   00000008   2F82               MOV     R24, R18
   \   0000000A   E090               LDI     R25, 0
   \                     ??ReadEEPROMBuffer_1:
   \   0000000C   99E1               SBIC    0x1C, 0x01
   \   0000000E   CFFE               RJMP    ??ReadEEPROMBuffer_1
   \   00000010   BB1F               OUT     0x1F, R17
   \   00000012   BB0E               OUT     0x1E, R16
   \   00000014   94F8               CLI
   \   00000016   9AE0               SBI     0x1C, 0x00
   \   00000018   9120....           LDS     R18, (OS_Counters + 1)
   \   0000001C   2322               TST     R18
   \   0000001E   F409               BRNE    ??ReadEEPROMBuffer_2
   \   00000020   9478               SEI
   \                     ??ReadEEPROMBuffer_2:
   \   00000022   B32D               IN      R18, 0x1D
   \   00000024   01FA               MOVW    R31:R30, R21:R20
   \   00000026   9321               ST      Z+, R18
   \   00000028   01AF               MOVW    R21:R20, R31:R30
   \   0000002A   5F0F               SUBI    R16, 255
   \   0000002C   4F1F               SBCI    R17, 255
   \   0000002E   9701               SBIW    R25:R24, 1
   \   00000030   F769               BRNE    ??ReadEEPROMBuffer_1
     70                  *pData++ = ReadEEPROMByte( Address + Index );
     71              }
     72          }
   \                     ??ReadEEPROMBuffer_0:
   \   00000032   2F86               MOV     R24, R22
   \   00000034   2F93               MOV     R25, R19
   \   00000036   9508               RET
   \   00000038                      REQUIRE _A_EECR
   \   00000038                      REQUIRE _A_EEAR
   \   00000038                      REQUIRE _A_EEDR
     73          
     74          /*---------------------------------------------------------------------------
     75          **
     76          **  Writ buffer to eeprom
     77          **
     78          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     79          void WriteEEPROMBuffer( unsigned int Address, char Size, char *pData ) {   
   \                     WriteEEPROMBuffer:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     80          
     81              while (EECR & (1<<EEWE))     // Wait until ready
   \                     ??WriteEEPROMBuffer_0:
   \   00000000   99E1               SBIC    0x1C, 0x01
   \   00000002   CFFE               RJMP    ??WriteEEPROMBuffer_0
     82                  ;
     83              OS_IncDI();
   \   00000004   94F8               CLI
   \   00000006   9130....           LDS     R19, (OS_Counters + 1)
   \   0000000A   9533               INC     R19
   \   0000000C   9330....           STS     (OS_Counters + 1), R19
     84              pWriteBuffer = pData;
   \   00000010   9340....           STS     pWriteBuffer, R20
   \   00000014   9350....           STS     (pWriteBuffer + 1), R21
     85              WriteCount = Size;
   \   00000018   9320....           STS     WriteCount, R18
     86              EEAR = Address ;
   \   0000001C   BB1F               OUT     0x1F, R17
   \   0000001E   BB0E               OUT     0x1E, R16
     87              EEDR = *pData ;
   \   00000020   01FA               MOVW    R31:R30, R21:R20
   \   00000022   8100               LD      R16, Z
   \   00000024   BB0D               OUT     0x1D, R16
     88              pWriteBuffer++;
   \   00000026   9100....           LDS     R16, pWriteBuffer
   \   0000002A   9110....           LDS     R17, (pWriteBuffer + 1)
   \   0000002E   5F0F               SUBI    R16, 255
   \   00000030   4F1F               SBCI    R17, 255
   \   00000032   9300....           STS     pWriteBuffer, R16
   \   00000036   9310....           STS     (pWriteBuffer + 1), R17
     89              EEPWriteOK = false;
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   9300....           STS     EEPWriteOK, R16
     90              EECR |= (1 << EEMWE) ;       // Don't use SetBit macrod due to timing
   \   00000040   9AE2               SBI     0x1C, 0x02
     91              EECR |= (1 << EEWE) ;        // Don't use SetBit macrod due to timing
   \   00000042   9AE1               SBI     0x1C, 0x01
     92              EECR |= (1 << EERIE) ;       // Don't use SetBit macrod due to timing
   \   00000044   9AE3               SBI     0x1C, 0x03
     93              OS_DecRI();
   \   00000046   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004A   950A               DEC     R16
   \   0000004C   9300....           STS     (OS_Counters + 1), R16
   \   00000050   F409               BRNE    ??WriteEEPROMBuffer_1
   \   00000052   9478               SEI
     94          }
   \                     ??WriteEEPROMBuffer_1:
   \   00000054   9508               RET
   \   00000056                      REQUIRE _A_EECR
   \   00000056                      REQUIRE _A_EEAR
   \   00000056                      REQUIRE _A_EEDR
     95          
     96          /*---------------------------------------------------------------------------
     97          **
     98          **  Interrupt on EEPROM write
     99          **
    100          **--------------------------------------------------------------------------*/
    101          #pragma vector=EE_RDY_vect

   \                                 In  segment CODE, align 2, keep-with-next
    102          __interrupt void IntHandler_EEPROM( void ){
   \                     IntHandler_EEPROM:
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
   \   0000000C                      REQUIRE __RSTACK_in_external_ram_new_way
    103          
    104              if ( --WriteCount ) {                        // More to write? 
   \   0000000C   9100....           LDS     R16, WriteCount
   \   00000010   950A               DEC     R16
   \   00000012   9300....           STS     WriteCount, R16
   \   00000016   2300               TST     R16
   \   00000018   F0C9               BREQ    ??IntHandler_EEPROM_0
    105                  EEAR++;                                  // Define address and data 
   \   0000001A   B30E               IN      R16, 0x1E
   \   0000001C   B31F               IN      R17, 0x1F
   \   0000001E   5F0F               SUBI    R16, 255
   \   00000020   4F1F               SBCI    R17, 255
   \   00000022   BB1F               OUT     0x1F, R17
   \   00000024   BB0E               OUT     0x1E, R16
    106                  EEDR = *pWriteBuffer++;
   \   00000026   91E0....           LDS     R30, pWriteBuffer
   \   0000002A   91F0....           LDS     R31, (pWriteBuffer + 1)
   \   0000002E   8100               LD      R16, Z
   \   00000030   BB0D               OUT     0x1D, R16
   \   00000032   9100....           LDS     R16, pWriteBuffer
   \   00000036   9110....           LDS     R17, (pWriteBuffer + 1)
   \   0000003A   5F0F               SUBI    R16, 255
   \   0000003C   4F1F               SBCI    R17, 255
   \   0000003E   9300....           STS     pWriteBuffer, R16
   \   00000042   9310....           STS     (pWriteBuffer + 1), R17
    107                  EECR |= (1 << EEMWE) ;       // Don't use SetBit macrod due to timing
   \   00000046   9AE2               SBI     0x1C, 0x02
    108                  EECR |= (1 << EEWE) ;        // Don't use SetBit macrod due to timing
   \   00000048   9AE1               SBI     0x1C, 0x01
   \   0000004A   C004               RJMP    ??IntHandler_EEPROM_1
    109              } else {
    110                  EECR &= ~(1 << EERIE) ;       // Don't use ClrBit macrod due to timing
   \                     ??IntHandler_EEPROM_0:
   \   0000004C   98E3               CBI     0x1C, 0x03
    111                  EEPWriteOK = true;
   \   0000004E   E001               LDI     R16, 1
   \   00000050   9300....           STS     EEPWriteOK, R16
    112              }
    113          }
   \                     ??IntHandler_EEPROM_1:
   \   00000054   BF2F               OUT     0x3F, R18
   \   00000056   9109               LD      R16, Y+
   \   00000058   9119               LD      R17, Y+
   \   0000005A   9129               LD      R18, Y+
   \   0000005C   91E9               LD      R30, Y+
   \   0000005E   91F9               LD      R31, Y+
   \   00000060   9518               RETI
   \   00000062                      REQUIRE _A_EEAR
   \   00000062                      REQUIRE _A_EEDR
   \   00000062                      REQUIRE _A_EECR
    114          
    115          
    116          /**===========================================================================
    117          ** Get the stored version in EEPROM
    118          **==========================================================================*/ 

   \                                 In  segment CODE, align 2, keep-with-next
    119          char EEPROMVersion(void) {
   \                     EEPROMVersion:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    120              char val ;
    121              char retval = false;
   \   00000000   E000               LDI     R16, 0
    122          
    123              ReadEEPROMBuffer(EEPROM_ID_START, 1, (char*)&val) ;
   \                     ??EEPROMVersion_0:
   \   00000002   99E1               SBIC    0x1C, 0x01
   \   00000004   CFFE               RJMP    ??EEPROMVersion_0
   \   00000006   BB0F               OUT     0x1F, R16
   \   00000008   BB0E               OUT     0x1E, R16
   \   0000000A   94F8               CLI
   \   0000000C   9AE0               SBI     0x1C, 0x00
   \   0000000E   9110....           LDS     R17, (OS_Counters + 1)
   \   00000012   2311               TST     R17
   \   00000014   F409               BRNE    ??EEPROMVersion_1
   \   00000016   9478               SEI
   \                     ??EEPROMVersion_1:
   \   00000018   B31D               IN      R17, 0x1D
    124              if (val == EEPROM_ID) {                                     //correct EEPROM ID
   \   0000001A   3B1D               CPI     R17, 189
   \   0000001C   F501               BRNE    ??EEPROMVersion_2
   \                     ??EEPROMVersion_3:
   \   0000001E   99E1               SBIC    0x1C, 0x01
   \   00000020   CFFE               RJMP    ??EEPROMVersion_3
   \   00000022   E021               LDI     R18, 1
   \   00000024   BB0F               OUT     0x1F, R16
   \   00000026   BB2E               OUT     0x1E, R18
   \   00000028   94F8               CLI
   \   0000002A   9AE0               SBI     0x1C, 0x00
   \   0000002C   9110....           LDS     R17, (OS_Counters + 1)
   \   00000030   2311               TST     R17
   \   00000032   F409               BRNE    ??EEPROMVersion_4
   \   00000034   9478               SEI
   \                     ??EEPROMVersion_4:
   \   00000036   B31D               IN      R17, 0x1D
    125                  ReadEEPROMBuffer(EEPROM_ID_START+1, 1, (char*)&val) ;
    126                  if (val == STORE_VERSION) {                             // and version
   \   00000038   3012               CPI     R17, 2
   \   0000003A   F489               BRNE    ??EEPROMVersion_2
   \                     ??EEPROMVersion_5:
   \   0000003C   99E1               SBIC    0x1C, 0x01
   \   0000003E   CFFE               RJMP    ??EEPROMVersion_5
   \   00000040   EF2E               LDI     R18, 254
   \   00000042   E03F               LDI     R19, 15
   \   00000044   BB3F               OUT     0x1F, R19
   \   00000046   BB2E               OUT     0x1E, R18
   \   00000048   94F8               CLI
   \   0000004A   9AE0               SBI     0x1C, 0x00
   \   0000004C   9110....           LDS     R17, (OS_Counters + 1)
   \   00000050   2311               TST     R17
   \   00000052   F409               BRNE    ??EEPROMVersion_6
   \   00000054   9478               SEI
   \                     ??EEPROMVersion_6:
   \   00000056   B31D               IN      R17, 0x1D
    127                      ReadEEPROMBuffer(0xffe, 1, (char*)&val) ;
    128                      if (val == EEPROM_OK) {                             // and no reset from user
   \   00000058   3F1F               CPI     R17, 255
   \   0000005A   F409               BRNE    ??EEPROMVersion_2
    129                          retval = true ;                                 // then everything is OK
   \   0000005C   E001               LDI     R16, 1
    130                      }
    131                  }
    132              }
    133              return retval;
   \                     ??EEPROMVersion_2:
   \   0000005E   9508               RET
   \   00000060                      REQUIRE _A_EECR
   \   00000060                      REQUIRE _A_EEAR
   \   00000060                      REQUIRE _A_EEDR
    134          }
    135          
    136          /**===========================================================================
    137          ** Reset the EEPROM
    138          **==========================================================================*/ 

   \                                 In  segment CODE, align 2, keep-with-next
    139          void EEPROMReset(void) {
   \                     EEPROMReset:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    140              EEARL = (0x0ffe & 0xff);
   \   00000000   EF0E               LDI     R16, 254
   \   00000002   BB0E               OUT     0x1E, R16
    141              EEARH = (0x0ffe >> 8);
   \   00000004   E00F               LDI     R16, 15
   \   00000006   BB0F               OUT     0x1F, R16
    142              EEDR = EEPROM_RESET;
   \   00000008   ED0B               LDI     R16, 219
   \   0000000A   BB0D               OUT     0x1D, R16
    143              EECR |= (1<<EEMWE);
   \   0000000C   9AE2               SBI     0x1C, 0x02
    144              EECR |= (1<<EEWE);
   \   0000000E   9AE1               SBI     0x1C, 0x01
    145              while (EECR & (1<<EEWE))
   \                     ??EEPROMReset_0:
   \   00000010   99E1               SBIC    0x1C, 0x01
   \   00000012   CFFE               RJMP    ??EEPROMReset_0
    146                  ;
    147              WDTCR = 0x18;               //Start watchdog to genetate restart
   \   00000014   E108               LDI     R16, 24
   \   00000016   BD01               OUT     0x21, R16
    148              WDTCR = 0x18;
   \   00000018   BD01               OUT     0x21, R16
    149          }
   \   0000001A   9508               RET
   \   0000001C                      REQUIRE _A_EEAR
   \   0000001C                      REQUIRE _A_EEDR
   \   0000001C                      REQUIRE _A_EECR
   \   0000001C                      REQUIRE _A_WDTCR

   \                                 In  segment INTVEC, offset 0x58, root
   \                     `??IntHandler_EEPROM::??INTVEC 88`:
   \   00000058   ........           JMP     IntHandler_EEPROM

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   EEPROMReset
      0      2   EEPROMVersion
      5      2   IntHandler_EEPROM
      0      2   ReadEEPROMBuffer
      0      2   ReadEEPROMByte
      0      2   TestEEPROM
      0      2   WriteEEPROMBuffer
      0      2   WriteEEPROMByte


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      28  EEPROMReset
      96  EEPROMVersion
      98  IntHandler_EEPROM
       4  IntHandler_EEPROM::??INTVEC 88
      56  ReadEEPROMBuffer
      26  ReadEEPROMByte
       6  TestEEPROM
      86  WriteEEPROMBuffer
      28  WriteEEPROMByte
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_WDTCR

 
   5 bytes in segment ABSOLUTE
 424 bytes in segment CODE
   4 bytes in segment INTVEC
 
 424 bytes of CODE memory (+ 4 bytes shared)
   0 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
