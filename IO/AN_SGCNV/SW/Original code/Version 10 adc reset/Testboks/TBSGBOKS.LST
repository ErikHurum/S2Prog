####################################################################################################
#                                                                                                  #
#     Micro Series H8/300 C-Compiler V2.20C/DXT                            31/Oct/96  19:17:48     #
#                                                                                                  #
#           Memory model  =  large                                                                 #
#           Source file   =  tbsgboks.c                                                            #
#           List file     =  tbsgboks.lst                                                          #
#           Object file   =  tbsgboks.r20                                                          #
#           Command line  =  -C -IC:\h8\ -e -q -L -P -ml -z -K tbsgboks                            #
#                                                                                                  #
#                                                     (c) Copyright IAR Systems, Hitachi Ltd. 1992 #
####################################################################################################


; Function name: TestEep
; Used stack   : 58

   \   0000                    NAME    tbsgboks(16)
   \   0000                    RSEG    CODE(1)
   \   0000                    RSEG    CONST(1)
   \   0000                    EXTERN  CheckADData
   \   0000                    EXTERN  CheckEepData
   \   0000                    EXTERN  Eeprom
   \   0000                    EXTERN  Led
   \   0000                    EXTERN  OneMsecDelay
   \   0000                    PUBLIC  TestEep
   \   0000                    EXTERN  crc
   \   0000                    EXTERN  packed_data
   \   0000                    EXTERN  ?CLH83L_2_20_L00
   \   0000                    RSEG    CODE
      1          /***** SGEEP.C *************************************************************
      2          *
      3          *     Program for signal convertion card, AN-SGCNV
      4          *
      5          *     Company: ARISTON Norway as
      6          *
      7          *     Author: Asle Straume
      8          *
      9          *     Date: 1-aug-96.
     10          *
     11          *************************************************************************/
     12          
     13          #include "math.h"
     14          #include "stdio.h"
     15          #include "ioh8325.h"
     16          #include "inth8325.h"
     17          
     18          #include "tbsg.h"
     19          #include "tbsgext.h"
     20          
     21          /*************************************************************************
     22          *
     23          *  Test the connected eeprom DS2430
     24          *
     25          *
     26          *************************************************************************/
     27          short TestEep(void)
     28          {
   \   0000            TestEep:
   \   0000  6DF4              PUSH    R4
   \   0002  6DF5              PUSH    R5
   \   0004  6DF6              PUSH    R6
   \   0006  79020030          MOV.W   #48,R2
   \   000A  1927              SUB.W   R2,SP
     29          
     30                  short           cnt, test ;
     31                  unsigned char   csum ;
     32                  unsigned char data[] = "Test 1  This unit has been tested       "  ;
   \   000C  0D71              MOV.W   SP,R1
   \   000E  8906              ADD.B   #6,R1L
   \   0010  9100              ADDX.B  #0,R1H
   \   0012  79030000          MOV.W   #?0000,R3
   \   0016  FA15              MOV.B   #21,R2L
   \   0018  6D30              MOV.W   @R3+,R0
   \   001A  6990              MOV.W   R0,@R1
   \   001C  0B81              ADDS.W  #2,R1
   \   001E  1A0A              DEC.B   R2L
   \   0020  46F6              BNE     $-8
     33          
     34          
     35                  Led(1, OFF) ;
   \   0022  1911              SUB.W   R1,R1
   \   0024  6DF1              MOV.W   R1,@-SP
   \   0026  79010001          MOV.W   #1,R1
   \   002A  5E000000          JSR     @Led:16
   \   002E  0B87              ADDS.W  #2,SP
     36                  Led(2, OFF) ;
   \   0030  1911              SUB.W   R1,R1
   \   0032  6DF1              MOV.W   R1,@-SP
   \   0034  79010002          MOV.W   #2,R1
   \   0038  5E000000          JSR     @Led:16
   \   003C  0B87              ADDS.W  #2,SP
     37          
     38                  csum = 0 ;
   \   003E  FC00              MOV.B   #0,R4L
     39                  for (cnt = 0 ; cnt < 7 ; cnt++) {
   \   0040  1966              SUB.W   R6,R6
   \   0042            ?0002:
   \   0042  79010007          MOV.W   #7,R1
   \   0046  1D16              CMP.W   R1,R6
   \   0048  4C16              BGE     ?0001
   \   004A            ?0003:
     40                          csum = crc[csum ^ data[cnt]] ;
   \   004A  0D61              MOV.W   R6,R1
   \   004C  0971              ADD.W   SP,R1
   \   004E  6E1B0006          MOV.B   @(6,R1),R3L
   \   0052  15CB              XOR.B   R4L,R3L
   \   0054  F300              MOV.B   #0,R3H
   \   0056  0933              ADD.W   R3,R3
   \   0058  6E3C0001          MOV.B   @(crc+1,R3),R4L
   \   005C  0B06              ADDS.W  #1,R6
     41                  }
     42                  data[cnt] = csum ;
   \   005E  40E2              BRA     ?0002
   \   0060            ?0001:
   \   0060  0D61              MOV.W   R6,R1
   \   0062  0971              ADD.W   SP,R1
   \   0064  6E9C0006          MOV.B   R4L,@(6,R1)
     43          
     44                  csum = 0 ;
   \   0068  FC00              MOV.B   #0,R4L
     45                  for (cnt = 8 ; cnt < (PACKED_DATA_SIZE -1) ; cnt++) {
   \   006A  79060008          MOV.W   #8,R6
   \   006E            ?0006:
   \   006E  79010027          MOV.W   #39,R1
   \   0072  1D16              CMP.W   R1,R6
   \   0074  4C16              BGE     ?0005
   \   0076            ?0007:
     46                          csum = crc[csum ^ data[cnt]] ;
   \   0076  0D61              MOV.W   R6,R1
   \   0078  0971              ADD.W   SP,R1
   \   007A  6E1B0006          MOV.B   @(6,R1),R3L
   \   007E  15CB              XOR.B   R4L,R3L
   \   0080  F300              MOV.B   #0,R3H
   \   0082  0933              ADD.W   R3,R3
   \   0084  6E3C0001          MOV.B   @(crc+1,R3),R4L
   \   0088  0B06              ADDS.W  #1,R6
     47                  }
     48                  data[cnt] = csum ;
   \   008A  40E2              BRA     ?0006
   \   008C            ?0005:
   \   008C  0D61              MOV.W   R6,R1
   \   008E  0971              ADD.W   SP,R1
   \   0090  6E9C0006          MOV.B   R4L,@(6,R1)
     49          
     50                  for (cnt = 0; cnt < PACKED_DATA_SIZE ; cnt++) {
   \   0094  1966              SUB.W   R6,R6
   \   0096            ?0010:
   \   0096  79010028          MOV.W   #40,R1
   \   009A  1D16              CMP.W   R1,R6
   \   009C  4C10              BGE     ?0009
   \   009E            ?0011:
     51                          packed_data[0][cnt] = data[cnt] ;
   \   009E  0D61              MOV.W   R6,R1
   \   00A0  0971              ADD.W   SP,R1
   \   00A2  6E1B0006          MOV.B   @(6,R1),R3L
   \   00A6  6EEB0000          MOV.B   R3L,@(packed_data,R6)
   \   00AA  0B06              ADDS.W  #1,R6
     52                  }
     53          
     54                  test = FALSE ;
   \   00AC  40E8              BRA     ?0010
   \   00AE            ?0009:
   \   00AE  1955              SUB.W   R5,R5
     55                  if (Eeprom(0, WRITE_SP)) {
   \   00B0  F90F              MOV.B   #15,R1L
   \   00B2  6DF1              MOV.W   R1,@-SP
   \   00B4  F900              MOV.B   #0,R1L
   \   00B6  5E000000          JSR     @Eeprom:16
   \   00BA  0B87              ADDS.W  #2,SP
   \   00BC  0D11              MOV.W   R1,R1
   \   00BE  4758              BEQ     ?0014
   \   00C0            ?0013:
     56                          for (cnt = 8; cnt < PACKED_DATA_SIZE ; cnt++) {
   \   00C0  79060008          MOV.W   #8,R6
   \   00C4            ?0016:
   \   00C4  79010028          MOV.W   #40,R1
   \   00C8  1D16              CMP.W   R1,R6
   \   00CA  4C0A              BGE     ?0015
   \   00CC            ?0017:
     57                                  packed_data[0][cnt] = 0x00 ;
   \   00CC  F900              MOV.B   #0,R1L
   \   00CE  6EE90000          MOV.B   R1L,@(packed_data,R6)
   \   00D2  0B06              ADDS.W  #1,R6
     58                          }
     59                          if (Eeprom(0, READ_SP)) {
   \   00D4  40EE              BRA     ?0016
   \   00D6            ?0015:
   \   00D6  F9AA              MOV.B   #170,R1L
   \   00D8  6DF1              MOV.W   R1,@-SP
   \   00DA  F900              MOV.B   #0,R1L
   \   00DC  5E000000          JSR     @Eeprom:16
   \   00E0  0B87              ADDS.W  #2,SP
   \   00E2  0D11              MOV.W   R1,R1
   \   00E4  4732              BEQ     ?0020
   \   00E6            ?0019:
     60                                  if (CheckEepData(&packed_data[0][8])){ /*check checksum */
   \   00E6  79010008          MOV.W   #packed_data+8,R1
   \   00EA  5E000000          JSR     @CheckEepData:16
   \   00EE  0C99              MOV.B   R1L,R1L
   \   00F0  4726              BEQ     ?0022
   \   00F2            ?0021:
     61                                          test = TRUE ;
   \   00F2  79050001          MOV.W   #1,R5
     62                                          for (cnt = 8; cnt < PACKED_DATA_SIZE ; cnt++) {
   \   00F6  79060008          MOV.W   #8,R6
   \   00FA            ?0024:
   \   00FA  79010028          MOV.W   #40,R1
   \   00FE  1D16              CMP.W   R1,R6
   \   0100  4C16              BGE     ?0023
   \   0102            ?0025:
     63                                                  if (packed_data[0][cnt] != data[cnt]){
   \   0102  0D61              MOV.W   R6,R1
   \   0104  0971              ADD.W   SP,R1
   \   0106  6E1B0006          MOV.B   @(6,R1),R3L
   \   010A  6E690000          MOV.B   @(packed_data,R6),R1L
   \   010E  1CB9              CMP.B   R3L,R1L
   \   0110  4702              BEQ     ?0028
   \   0112            ?0027:
     64                                                          test = FALSE ;
   \   0112  1955              SUB.W   R5,R5
   \   0114            ?0028:
   \   0114  0B06              ADDS.W  #1,R6
     65                                                  }
     66                                          }
     67                                  }
   \   0116  40E2              BRA     ?0024
   \   0118            ?0023:
   \   0118            ?0022:
   \   0118            ?0020:
   \   0118            ?0014:
     68                          }
     69                  }
     70                  if (test) {
   \   0118  0D51              MOV.W   R5,R1
   \   011A  4762              BEQ     ?0030
   \   011C            ?0029:
     71                          test = FALSE ;
   \   011C  1955              SUB.W   R5,R5
     72                          Eeprom(0, COPY_SP_NV) ;
   \   011E  F955              MOV.B   #85,R1L
   \   0120  6DF1              MOV.W   R1,@-SP
   \   0122  F900              MOV.B   #0,R1L
   \   0124  5E000000          JSR     @Eeprom:16
   \   0128  0B87              ADDS.W  #2,SP
     73                          OneMsecDelay(500) ;
   \   012A  790101F4          MOV.W   #500,R1
   \   012E  1900              SUB.W   R0,R0
   \   0130  5E000000          JSR     @OneMsecDelay:16
     74                          Eeprom(0, COPY_NV_SP) ;
   \   0134  F9F0              MOV.B   #240,R1L
   \   0136  6DF1              MOV.W   R1,@-SP
   \   0138  F900              MOV.B   #0,R1L
   \   013A  5E000000          JSR     @Eeprom:16
   \   013E  0B87              ADDS.W  #2,SP
     75                          Eeprom(0, READ_SP) ;
   \   0140  F9AA              MOV.B   #170,R1L
   \   0142  6DF1              MOV.W   R1,@-SP
   \   0144  F900              MOV.B   #0,R1L
   \   0146  5E000000          JSR     @Eeprom:16
   \   014A  0B87              ADDS.W  #2,SP
     76                          if (CheckEepData(&packed_data[0][8])){ /*check checksum */
   \   014C  79010008          MOV.W   #packed_data+8,R1
   \   0150  5E000000          JSR     @CheckEepData:16
   \   0154  0C99              MOV.B   R1L,R1L
   \   0156  4726              BEQ     ?0032
   \   0158            ?0031:
     77                                  test = TRUE ;
   \   0158  79050001          MOV.W   #1,R5
     78                                  for (cnt = 8; cnt < PACKED_DATA_SIZE ; cnt++) {
   \   015C  79060008          MOV.W   #8,R6
   \   0160            ?0034:
   \   0160  79010028          MOV.W   #40,R1
   \   0164  1D16              CMP.W   R1,R6
   \   0166  4C16              BGE     ?0033
   \   0168            ?0035:
     79                                          if (packed_data[0][cnt] != data[cnt]){
   \   0168  0D61              MOV.W   R6,R1
   \   016A  0971              ADD.W   SP,R1
   \   016C  6E1B0006          MOV.B   @(6,R1),R3L
   \   0170  6E690000          MOV.B   @(packed_data,R6),R1L
   \   0174  1CB9              CMP.B   R3L,R1L
   \   0176  4702              BEQ     ?0038
   \   0178            ?0037:
     80                                                  test = FALSE ;
   \   0178  1955              SUB.W   R5,R5
   \   017A            ?0038:
   \   017A  0B06              ADDS.W  #1,R6
     81                                          }
     82                                  }
     83                          }
   \   017C  40E2              BRA     ?0034
   \   017E            ?0033:
   \   017E            ?0032:
   \   017E            ?0030:
     84                  }
     85                  if (test) {
   \   017E  0D51              MOV.W   R5,R1
   \   0180  4752              BEQ     ?0040
   \   0182            ?0039:
     86                          test = FALSE ;
   \   0182  1955              SUB.W   R5,R5
     87                          if (Eeprom(0, WRITE_APPREG)) {
   \   0184  F999              MOV.B   #153,R1L
   \   0186  6DF1              MOV.W   R1,@-SP
   \   0188  F900              MOV.B   #0,R1L
   \   018A  5E000000          JSR     @Eeprom:16
   \   018E  0B87              ADDS.W  #2,SP
   \   0190  0D11              MOV.W   R1,R1
   \   0192  4740              BEQ     ?0042
   \   0194            ?0041:
     88                                  if (Eeprom(0, READ_APPREG)) {
   \   0194  F9C3              MOV.B   #195,R1L
   \   0196  6DF1              MOV.W   R1,@-SP
   \   0198  F900              MOV.B   #0,R1L
   \   019A  5E000000          JSR     @Eeprom:16
   \   019E  0B87              ADDS.W  #2,SP
   \   01A0  0D11              MOV.W   R1,R1
   \   01A2  4730              BEQ     ?0044
   \   01A4            ?0043:
     89                                          if (CheckADData(&packed_data[0][0])) {
   \   01A4  79010000          MOV.W   #packed_data,R1
   \   01A8  5E000000          JSR     @CheckADData:16
   \   01AC  0C99              MOV.B   R1L,R1L
   \   01AE  4724              BEQ     ?0046
   \   01B0            ?0045:
     90                                                  test = TRUE ;
   \   01B0  79050001          MOV.W   #1,R5
     91                                                  for (cnt = 0; cnt < 8 ; cnt++) {
   \   01B4  1966              SUB.W   R6,R6
   \   01B6            ?0048:
   \   01B6  79010008          MOV.W   #8,R1
   \   01BA  1D16              CMP.W   R1,R6
   \   01BC  4C16              BGE     ?0047
   \   01BE            ?0049:
     92                                                          if (packed_data[0][cnt] != data[cnt]){
   \   01BE  0D61              MOV.W   R6,R1
   \   01C0  0971              ADD.W   SP,R1
   \   01C2  6E1B0006          MOV.B   @(6,R1),R3L
   \   01C6  6E690000          MOV.B   @(packed_data,R6),R1L
   \   01CA  1CB9              CMP.B   R3L,R1L
   \   01CC  4702              BEQ     ?0052
   \   01CE            ?0051:
     93                                                                  test = FALSE ;
   \   01CE  1955              SUB.W   R5,R5
   \   01D0            ?0052:
   \   01D0  0B06              ADDS.W  #1,R6
     94                                                          }
     95                                                  }
     96                                          }
   \   01D2  40E2              BRA     ?0048
   \   01D4            ?0047:
   \   01D4            ?0046:
   \   01D4            ?0044:
   \   01D4            ?0042:
   \   01D4            ?0040:
     97                                  }
     98                          }
     99                  }
    100                  if (test) {
   \   01D4  0D51              MOV.W   R5,R1
   \   01D6  4722              BEQ     ?0054
   \   01D8            ?0053:
    101                          Led(1, OFF) ;
   \   01D8  1911              SUB.W   R1,R1
   \   01DA  6DF1              MOV.W   R1,@-SP
   \   01DC  79010001          MOV.W   #1,R1
   \   01E0  5E000000          JSR     @Led:16
   \   01E4  0B87              ADDS.W  #2,SP
    102                          Led(2, ON) ;
   \   01E6  79010001          MOV.W   #1,R1
   \   01EA  6DF1              MOV.W   R1,@-SP
   \   01EC  79010002          MOV.W   #2,R1
   \   01F0  5E000000          JSR     @Led:16
   \   01F4  0B87              ADDS.W  #2,SP
    103                  } else {
   \   01F6  5A0002C2          JMP     @?0055:16
   \   01FA            ?0054:
    104                          for (cnt = 0; cnt < PACKED_DATA_SIZE ; cnt++) {
   \   01FA  1966              SUB.W   R6,R6
   \   01FC            ?0057:
   \   01FC  79010028          MOV.W   #40,R1
   \   0200  1D16              CMP.W   R1,R6
   \   0202  4C0A              BGE     ?0056
   \   0204            ?0058:
    105                                  packed_data[0][cnt] = 0x00 ;
   \   0204  F900              MOV.B   #0,R1L
   \   0206  6EE90000          MOV.B   R1L,@(packed_data,R6)
   \   020A  0B06              ADDS.W  #1,R6
    106                          }
    107          
    108                          Led(1, ON) ;
   \   020C  40EE              BRA     ?0057
   \   020E            ?0056:
   \   020E  79010001          MOV.W   #1,R1
   \   0212  6DF1              MOV.W   R1,@-SP
   \   0214  79010001          MOV.W   #1,R1
   \   0218  5E000000          JSR     @Led:16
   \   021C  0B87              ADDS.W  #2,SP
    109                          Led(2, OFF) ;
   \   021E  1911              SUB.W   R1,R1
   \   0220  6DF1              MOV.W   R1,@-SP
   \   0222  79010002          MOV.W   #2,R1
   \   0226  5E000000          JSR     @Led:16
   \   022A  0B87              ADDS.W  #2,SP
    110                          OneMsecDelay(500) ;
   \   022C  790101F4          MOV.W   #500,R1
   \   0230  1900              SUB.W   R0,R0
   \   0232  5E000000          JSR     @OneMsecDelay:16
    111                          Led(1, OFF) ;
   \   0236  1911              SUB.W   R1,R1
   \   0238  6DF1              MOV.W   R1,@-SP
   \   023A  79010001          MOV.W   #1,R1
   \   023E  5E000000          JSR     @Led:16
   \   0242  0B87              ADDS.W  #2,SP
    112                          OneMsecDelay(500) ;
   \   0244  790101F4          MOV.W   #500,R1
   \   0248  1900              SUB.W   R0,R0
   \   024A  5E000000          JSR     @OneMsecDelay:16
    113                          Led(1, ON) ;
   \   024E  79010001          MOV.W   #1,R1
   \   0252  6DF1              MOV.W   R1,@-SP
   \   0254  79010001          MOV.W   #1,R1
   \   0258  5E000000          JSR     @Led:16
   \   025C  0B87              ADDS.W  #2,SP
    114                          OneMsecDelay(500) ;
   \   025E  790101F4          MOV.W   #500,R1
   \   0262  1900              SUB.W   R0,R0
   \   0264  5E000000          JSR     @OneMsecDelay:16
    115                          Led(1, OFF) ;
   \   0268  1911              SUB.W   R1,R1
   \   026A  6DF1              MOV.W   R1,@-SP
   \   026C  79010001          MOV.W   #1,R1
   \   0270  5E000000          JSR     @Led:16
   \   0274  0B87              ADDS.W  #2,SP
    116                          OneMsecDelay(500) ;
   \   0276  790101F4          MOV.W   #500,R1
   \   027A  1900              SUB.W   R0,R0
   \   027C  5E000000          JSR     @OneMsecDelay:16
    117                          Led(1, ON) ;
   \   0280  79010001          MOV.W   #1,R1
   \   0284  6DF1              MOV.W   R1,@-SP
   \   0286  79010001          MOV.W   #1,R1
   \   028A  5E000000          JSR     @Led:16
   \   028E  0B87              ADDS.W  #2,SP
    118                          OneMsecDelay(500) ;
   \   0290  790101F4          MOV.W   #500,R1
   \   0294  1900              SUB.W   R0,R0
   \   0296  5E000000          JSR     @OneMsecDelay:16
    119                          Led(1, OFF) ;
   \   029A  1911              SUB.W   R1,R1
   \   029C  6DF1              MOV.W   R1,@-SP
   \   029E  79010001          MOV.W   #1,R1
   \   02A2  5E000000          JSR     @Led:16
   \   02A6  0B87              ADDS.W  #2,SP
    120                          OneMsecDelay(500) ;
   \   02A8  790101F4          MOV.W   #500,R1
   \   02AC  1900              SUB.W   R0,R0
   \   02AE  5E000000          JSR     @OneMsecDelay:16
    121                          Led(1, ON) ;
   \   02B2  79010001          MOV.W   #1,R1
   \   02B6  6DF1              MOV.W   R1,@-SP
   \   02B8  79010001          MOV.W   #1,R1
   \   02BC  5E000000          JSR     @Led:16
   \   02C0  0B87              ADDS.W  #2,SP
   \   02C2            ?0055:
    122                  }
    123          }
   \   02C2  79020030          MOV.W   #48,R2
   \   02C6  0927              ADD.W   R2,SP
   \   02C8  6D76              POP     R6
   \   02CA  6D75              POP     R5
   \   02CC  6D74              POP     R4
   \   02CE  5470              RTS
   \   0000                    RSEG    CONST
   \   0000            ?0000:
   \   0000  54657374          DC.B    'Test 1  This unit has been tested       '
   \   0004  20312020
   \   0008  54686973
   \   000C  20756E69
   \   0010  74206861
   \   0014  73206265
   \   0018  656E2074
   \   001C  65737465
   \   0020  64202020
   \   0024  20202020
   \   0028  00                DC.B    0
   \   0029  00                DC.B    0
   \   002A                    END

Errors: none
Warnings: none
Code size: 720
Constant size: 42
Static variable size: Data(0) Iram(0)

