####################################################################################################
#                                                                                                  #
#     Micro Series H8/300 C-Compiler V2.20C/DXT                            06/Feb/117  11:39:43     #
#                                                                                                  #
#           Memory model  =  large                                                                 #
#           Source file   =  sg.c                                                                  #
#           List file     =  sg.lst                                                                #
#           Object file   =  sg.r20                                                                #
#           Command line  =  -C -IC:\h8\ -e -q -L -P -ml -s -K sg                                  #
#                                                                                                  #
#                                                     (c) Copyright IAR Systems, Hitachi Ltd. 1992 #
####################################################################################################


; Function name: ResetADCBySW
; Used stack   : 2

; Function name: InitRegs
; Used stack   : 2

; Function name: InitVar
; Used stack   : 4

; Function name: InitStartup
; Used stack   : 4

; Function name: GetMyAddress
; Used stack   : 2

; Function name: KickDog
; Used stack   : 2

; Function name: Led
; Used stack   : 4

; Function name: TxDriver
; Used stack   : 2

; Function name: OneMsecDelay
; Used stack   : 2

; Function name: SetEepromChannel
; Used stack   : 4

; Function name: SetSupplyChannel
; Used stack   : 4

; Function name: SetMuxChannel
; Used stack   : 4

; Function name: SetSupplyCurrent
; Used stack   : 2

; Function name: SetCalResistance
; Used stack   : 2

; Function name: CheckConvert
; Used stack   : 4

; Function name: ADConvert
; Used stack   : 8

; Function name: CalcPress
; Used stack   : 18

; Function name: CalcPercent
; Used stack   : 28

; Function name: CalcTemp
; Used stack   : 24

; Function name: CalcOther
; Used stack   : 16

; Function name: UnpackSensData
; Used stack   : 30

; Function name: CalcSensData
; Used stack   : 16

; Function name: FindTemp
; Used stack   : 6

; Function name: ReadAdByte
; Used stack   : 6

; Function name: WriteAdByte
; Used stack   : 6

; Function name: ResetRxPointer
; Used stack   : 2

; Function name: CalcRxChecksum
; Used stack   : 6

; Function name: HandleRxPacket
; Used stack   : 10

; Function name: ReceiveRxPacket
; Used stack   : 6

; Function name: Irq0Int
; Used stack   : 4

; Function name: Irq1Int
; Used stack   : 6

; Function name: Irq2Int
; Used stack   : 4

; Function name: FrtcInt
; Used stack   : 6

; Function name: FrtoInt
; Used stack   : 4

; Function name: TimInt
; Used stack   : 14

; Function name: Tx0Int
; Used stack   : 10

; Function name: Err0Int
; Used stack   : 8

; Function name: Rx0Int
; Used stack   : 16

; Function name: Tx1Int
; Used stack   : 8

; Function name: Err1Int
; Used stack   : 8

; Function name: Rx1Int
; Used stack   : 10

; Function name: main
; Used stack   : 2

   \   0000                    NAME    sg(16)
   \   0000                    RSEG    CODE(1)
   \   0000                    RSEG    CONST(1)
   \   0000                    COMMON  INTVEC(1)
   \   0000                    RSEG    UDATA(1)
   \   0000                    PUBLIC  ADConvert
   \   0000                    EXTERN  BuildCalData
   \   0000                    EXTERN  BuildHeader
   \   0000                    EXTERN  BuildMOData
   \   0000                    EXTERN  BuildMPData
   \   0000                    EXTERN  BuildMTData
   \   0000                    EXTERN  BuildROData
   \   0000                    EXTERN  BuildRPData
   \   0000                    EXTERN  BuildRTData
   \   0000                    EXTERN  BuildTail
   \   0000                    PUBLIC  CalcOther
   \   0000                    PUBLIC  CalcPercent
   \   0000                    PUBLIC  CalcPress
   \   0000                    PUBLIC  CalcRxChecksum
   \   0000                    PUBLIC  CalcSensData
   \   0000                    PUBLIC  CalcTemp
   \   0000                    EXTERN  CheckAction
   \   0000                    PUBLIC  CheckConvert
   \   0000                    EXTERN  CheckEepChannel
   \   0000                    PUBLIC  Err0Int
   \   0000                    PUBLIC  Err1Int
   \   0000                    PUBLIC  FindTemp
   \   0000                    PUBLIC  FrtcInt
   \   0000                    PUBLIC  FrtoInt
   \   0000                    PUBLIC  GetMyAddress
   \   0000                    PUBLIC  HandleRxPacket
   \   0000                    PUBLIC  InitRegs
   \   0000                    PUBLIC  InitStartup
   \   0000                    PUBLIC  InitVar
   \   0000                    PUBLIC  Irq0Int
   \   0000                    PUBLIC  Irq1Int
   \   0000                    PUBLIC  Irq2Int
   \   0000                    PUBLIC  KickDog
   \   0000                    PUBLIC  Led
   \   0000                    PUBLIC  OneMsecDelay
   \   0000                    PUBLIC  ReadAdByte
   \   0000                    PUBLIC  ReceiveRxPacket
   \   0000                    PUBLIC  ResetRxPointer
   \   0000                    PUBLIC  Rx0Int
   \   0000                    PUBLIC  Rx1Int
   \   0000                    PUBLIC  SetCalResistance
   \   0000                    PUBLIC  SetEepromChannel
   \   0000                    PUBLIC  SetMuxChannel
   \   0000                    PUBLIC  SetSupplyChannel
   \   0000                    PUBLIC  SetSupplyCurrent
   \   0000                    PUBLIC  TimInt
   \   0000                    PUBLIC  Tx0Int
   \   0000                    PUBLIC  Tx1Int
   \   0000                    PUBLIC  TxDriver
   \   0000                    PUBLIC  UnpackSensData
   \   0000                    PUBLIC  WriteAdByte
   \   0000                    PUBLIC  ad_gain
   \   0000                    PUBLIC  ad_mode
   \   0000                    PUBLIC  ad_settling
   \   0000                    PUBLIC  ad_state
   \   0000                    PUBLIC  ad_timeout_cnt
   \   0000                    PUBLIC  cal_data
   \   0000                    PUBLIC  cal_gain
   \   0000                    PUBLIC  cal_zero
   \   0000                    PUBLIC  ch_stat
   \   0000                    PUBLIC  crc
   \   0000                    PUBLIC  curr_ad_ch
   \   0000                    PUBLIC  curr_sens_data
   \   0000                    PUBLIC  display
   \   0000                    PUBLIC  eep_status
   \   0000                    PUBLIC  eep_type
   \   0000                    PUBLIC  gain
   \   0000                    PUBLIC  main
   \   0000                    PUBLIC  mes_data
   \   0000                    PUBLIC  ms_delay_cnt
   \   0000                    PUBLIC  my_address
   \   0000                    PUBLIC  not_cal_data
   \   0000                    PUBLIC  not_mes_data
   \   0000                    PUBLIC  not_raw_data
   \   0000                    PUBLIC  o_filter
   \   0000                    PUBLIC  offset
   \   0000                    PUBLIC  p_filter
   \   0000                    PUBLIC  packed_data
   \   0000                    PUBLIC  raw_data
   \   0000                    PUBLIC  rx_buff
   \   0000                    PUBLIC  rx_counter
   \   0000                    PUBLIC  rx_hndx
   \   0000                    PUBLIC  rx_indx
   \   0000                    PUBLIC  rx_packlen
   \   0000                    PUBLIC  rx_start
   \   0000                    PUBLIC  rx_state
   \   0000                    PUBLIC  rx_timeout
   \   0000                    PUBLIC  sec_cnt
   \   0000                    PUBLIC  sendtail
   \   0000                    PUBLIC  sens_data
   \   0000                    PUBLIC  sens_nl1
   \   0000                    PUBLIC  sens_nl2
   \   0000                    PUBLIC  sync_cnt
   \   0000                    PUBLIC  t_filter
   \   0000                    PUBLIC  time_b_cnt
   \   0000                    PUBLIC  time_b_temp
   \   0000                    PUBLIC  time_e_cnt
   \   0000                    PUBLIC  tx_buff
   \   0000                    PUBLIC  tx_bytes
   \   0000                    PUBLIC  tx_complete
   \   0000                    PUBLIC  tx_indx
   \   0000                    PUBLIC  tx_tail
   \   0000                    PUBLIC  wait_for_pc
   \   0000                    EXTERN  ?SC_DIV_L01
   \   0000                    EXTERN  ?SS_MUL_L02
   \   0000                    EXTERN  ?F_ADD_L04
   \   0000                    EXTERN  ?F_SUB_L04
   \   0000                    EXTERN  ?F_SUB_SWAP_L04
   \   0000                    EXTERN  ?F_MUL_L04
   \   0000                    EXTERN  ?F_DIV_SWAP_L04
   \   0000                    EXTERN  ?F_DIV_L04
   \   0000                    EXTERN  ?UL_TO_FLT_L04
   \   0000                    EXTERN  ?SL_TO_FLT_L04
   \   0000                    EXTERN  ?FLT_TO_SL_L04
   \   0000                    EXTERN  ?CLH83L_2_20_L00
   \   0000                    RSEG    CODE
      1          /***** SG.C *************************************************************
      2           *
      3           *     Program for signal convertion card, AN-SGCNV
      4           *
      5           *     Company: ARISTON Norway as
      6           *
      7           *     Author: Asle Straume
      8           *
      9           *     Date: 1-aug-96.
     10           *
     11           *************************************************************************/
     12          
     13          #include "math.h"
     14          #include "float.h"
     15          #include "stdio.h"
     16          #include "ioh8325.h"
     17          #include "inth8325.h"
     18          
     19          #include "sg.h"
     20          #include "sgext.h"
     21          
     22          unsigned char           tx_buff[TX_SIZE] ;
     23          unsigned char           rx_buff[RX_SIZE] ;
     24          unsigned char           tx_indx ;
     25          unsigned char           tx_bytes ;
     26          unsigned char           tx_tail;
     27          unsigned char           wait_for_pc ;
     28          unsigned char           rx_indx ;
     29          unsigned char           rx_hndx ;
     30          unsigned char           rx_start ;
     31          unsigned char           rx_counter ;
     32          unsigned char           rx_packlen ;
     33          unsigned char           rx_timeout ;
     34          unsigned char           sync_cnt ;
     35          
     36          short                           sens_data[UNPACKED_DATA_SIZE] ;         /*  unpacked data */
     37          signed char                     sens_nl1 ;                                                      /* none linearity 1*/
     38          signed char                     sens_nl2 ;                                                      /* none linearity 2*/
     39          
     40          unsigned char           packed_data[NOPSD][PACKED_DATA_SIZE] ; /* packed sensor data */
     41          
     42          /* and the on board eep*/
     43          unsigned char           eep_status;                                                     /* status byte of the eep*/
     44          unsigned char           time_b_temp;                                            /* time between temp read */
     45          unsigned char           time_b_cnt;                                                     /* time between temp cnt */
     46          unsigned char           time_e_cnt;                                                /* time between eep check */
     47          unsigned short          ad_timeout_cnt ;                                   /* timeout ad conv */
     48          unsigned short          sec_cnt ;                                                  /* seconds sounter */
     49          
     50          short                   curr_sens_data ;                /* sensor data from ad conv. */
     51          
     52          short                   cal_data[NOIOCH] ;          /* calibration data */
     53          short               raw_data[NOIOCH] ;      /* raw data from senors */
     54          float                           mes_data[NOIOCH];               /* measured data result */
     55          float                           gain[NOIOCH] ;                  /* gain for sensors */
     56          short                           offset[NOIOCH] ;                /* offset for sensors */
     57          
     58          float                           cal_gain;                               /* gain for the 1 ohm resistor */
     59          short                           cal_zero;                               /* zero for the 1 ohm resistor */
     60          
     61          unsigned char           not_mes_data ;                  /* number of tx of measured data */
     62          unsigned char           not_raw_data ;                  /* number of tx of raw data */
     63          unsigned char           not_cal_data ;                  /* number of tx of calib. data */
     64          
     65          signed char                curr_ad_ch ;                         /* current ad ch */
     66          
     67          unsigned char           ad_state        ;                               /* status for ad conversion */
     68          unsigned char           ad_mode ;                               /* modus */
     69          /*Bit 7 = test mode
     70            Bit 6 = next cal conv.
     71            Bit 5 =
     72            Bit 4 = Start new channel
     73            Bit 3 = Read temperature
     74            Bit 2 = Read other
     75            Bit 1 = Read Pressure
     76            Bit 0 =               */
     77          unsigned long           ms_delay_cnt ;                          /* increased each millisecond */
     78          unsigned short          ad_settling ;                           /* ad settling timer */
     79          
     80          unsigned char           ad_gain ;                                       /* ad com register, keep gain */
     81          
     82          unsigned char           ch_stat[NOIOCH] ;                               /* sensor status */
     83          /*Bit  765
     84            x00 = Unknown
     85            x01 = temp
     86            x10 = inclinometer
     87            x11 = Press
     88            1xx = Mark new sensor
     89            Bit   432
     90            000 = Unused
     91            001 = temp
     92            010 = inclinometer
     93            011 = Press
     94            1xx = Setup from PC
     95            Bit 1  cal status 0=OK 1=Fail
     96            Bit 0  conv. status 0=OK 1=Fail */
     97          
     98          unsigned char           eep_type[NOPSD] ;                       /* eeprom status*/
     99          /* Bit 7654
    100             0000 = None
    101             0001 = Ok from sensor
    102             0010 = Error from sensor
    103             0011 =
    104             Bit 3210
    105             x000 = None
    106             x001 = Ok from PC
    107             x010 = Error from PC
    108             1xxx = Use data from PC */
    109          
    110          unsigned char           p_filter ;                              /* pressure filter */
    111          unsigned char           t_filter ;                              /* temperature filter */
    112          unsigned char           o_filter ;                              /* "other" filter */
    113          unsigned char           my_address ;                    /* my address */
    114          unsigned char           rx_state ;                              /* rx state */
    115          unsigned char           tx_complete ;                   /* tx state */
    116          
    117          unsigned char           sendtail ;
    118          unsigned char     display[NO_OF_DISP] ;                 /* display mode */
    119          
    120          const crc[] =                 /*Dallas Semiconductor one-wire CRC table */
    121          {
    122            0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31, 65,
    123            157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96, 130, 220,
    124            35, 125, 159, 193, 66, 28, 254, 160, 225, 191, 93, 3, 128, 222, 60, 98,
    125            190, 224, 2, 92, 223, 129, 99, 61, 124, 34, 192, 158, 29, 67, 161, 255,
    126            70, 24, 250, 164, 39, 121, 155, 197, 132, 218, 56, 102, 229, 187, 89, 7,
    127            219, 133, 103, 57, 186, 228, 6, 88, 25, 71, 165, 251, 120, 38, 196, 154,
    128            101, 59, 217, 135, 4, 90, 184, 230, 167, 249, 27, 69, 198, 152, 122, 36,
    129            248, 166, 68, 26, 153, 199, 37, 123, 58, 100, 134, 216, 91, 5, 231, 185,
    130            140, 210, 48, 110, 237, 179, 81, 15, 78, 16, 242, 172, 47, 113, 147, 205,
    131            17, 79, 173, 243, 112, 46, 204, 146, 211, 141, 111, 49, 178, 236, 14, 80,
    132            175, 241, 19, 77, 206, 144, 114, 44, 109, 51, 209, 143, 12, 82, 176, 238,
    133            50, 108, 142, 208, 83, 13, 239, 177, 240, 174, 76, 18, 145, 207, 45, 115,
    134            202, 148, 118, 40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55, 213, 139,
    135            87, 9, 235, 181, 54, 104, 138, 212, 149, 203, 41, 119, 244, 170, 72, 22,
    136            233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151, 201, 74, 20, 246, 168,
    137            116, 42, 200, 150, 21, 75, 169, 247, 182, 232, 10, 84, 215, 137, 107, 53
    138          } ;
    139          
    140          
    141          
    142          static void
    143          ResetADCBySW(void)
    144          {
   \   0000            ResetADCBySW:
    145            WriteAdByte(0xff) ;                           /* Reset the ad */
   \   0000  F9FF              MOV.B   #255,R1L
   \   0002  5E001F26          JSR     @WriteAdByte:16
    146            WriteAdByte(0xff) ;                           /* with */
   \   0006  F9FF              MOV.B   #255,R1L
   \   0008  5E001F26          JSR     @WriteAdByte:16
    147            WriteAdByte(0xff) ;                           /* 32 (8*4)*/
   \   000C  F9FF              MOV.B   #255,R1L
   \   000E  5E001F26          JSR     @WriteAdByte:16
    148            WriteAdByte(0xff) ;                           /* write pulses*/
   \   0012  F9FF              MOV.B   #255,R1L
   \   0014  5E001F26          JSR     @WriteAdByte:16
    149          }
   \   0018  5470              RTS
    150          
    151          /*************************************************************************
    152           *
    153           *  Initialize I/O ports
    154           *
    155           *  Set RS232 parametres
    156           *  Initialize interrupt system
    157           *
    158           *************************************************************************/
    159          void InitRegs(void)
    160          {
   \   001A            InitRegs:
    161          
    162            /* Internal timer 1 ms */
    163            TMR1_TCR   =  0x4a;           /* int a, clear reg a, 1/64 clock (38600 Hz)*/
   \   001A  F94A              MOV.B   #74,R1L
   \   001C  39D0              MOV.B   R1L,@208:8
    164            TMR1_TCSR  = 0x00;            /* No invert p44 */
   \   001E  F900              MOV.B   #0,R1L
   \   0020  39D1              MOV.B   R1L,@209:8
    165            TMR1_TCORA =  37 ;            /* Set 38600/(37+1) = 1 msec compare */
   \   0022  F925              MOV.B   #37,R1L
   \   0024  39D2              MOV.B   R1L,@210:8
    166          
    167            P7DDR = 0x00 ;                        /* Port 7, all input */
   \   0026  F900              MOV.B   #0,R1L
   \   0028  39BC              MOV.B   R1L,@188:8
    168            P7DR = 0xff ;                 /* All pull-ups on */
   \   002A  F9FF              MOV.B   #255,R1L
   \   002C  39BE              MOV.B   R1L,@190:8
    169          
    170            P6DDR = 0x07  ;                       /* Port 6, P60,1,2 out, P6 3,4,5,6 input */
   \   002E  F907              MOV.B   #7,R1L
   \   0030  39B9              MOV.B   R1L,@185:8
    171            P6DR = 0xf8 ;                 /* Pull ups on P6 3-6 */
   \   0032  F9F8              MOV.B   #248,R1L
   \   0034  39BB              MOV.B   R1L,@187:8
    172          
    173            P5DDR = 0x2d ;                        /* Serial line I/O, may be not neccessary */
   \   0036  F92D              MOV.B   #45,R1L
   \   0038  39B8              MOV.B   R1L,@184:8
    174            P5DR = 0x12 ;                         /* internal pull up on input pins */
   \   003A  F912              MOV.B   #18,R1L
   \   003C  39BA              MOV.B   R1L,@186:8
    175          
    176            SCI0_SMR = SMR_0;             /* uart 0 mode */
   \   003E  F900              MOV.B   #0,R1L
   \   0040  39D8              MOV.B   R1L,@216:8
    177            SCI0_BRR = BRR_0;             /* uart0 baudrate */
   \   0042  F907              MOV.B   #7,R1L
   \   0044  39D9              MOV.B   R1L,@217:8
    178          
    179            P4DDR = 0xd0 ;                        /* Port 4, P4 4,6,7 out, rest in */
   \   0046  F9D0              MOV.B   #208,R1L
   \   0048  39B5              MOV.B   R1L,@181:8
    180          
    181            P3DDR = 0xff ;                        /* All output */
   \   004A  F9FF              MOV.B   #255,R1L
   \   004C  39B4              MOV.B   R1L,@180:8
    182          
    183            P2DDR = 0x00 ;                        /* All input */
   \   004E  F900              MOV.B   #0,R1L
   \   0050  39B1              MOV.B   R1L,@177:8
    184            P2DR = 0xff ;                 /* All pull-ups on */
   \   0052  F9FF              MOV.B   #255,R1L
   \   0054  39B3              MOV.B   R1L,@179:8
    185          
    186            P1DDR = 0xff ;                        /* All output */
   \   0056  F9FF              MOV.B   #255,R1L
   \   0058  39B0              MOV.B   R1L,@176:8
    187          
    188            ISCR  = 0x8f;                         /* IRQ0, 1 and 2 on falling edge */
   \   005A  F98F              MOV.B   #143,R1L
   \   005C  39C6              MOV.B   R1L,@198:8
    189            IER   = 0xfe;                                 /* enable int 1, 2, Disable 0 */
   \   005E  F9FE              MOV.B   #254,R1L
   \   0060  39C7              MOV.B   R1L,@199:8
    190          
    191            // hkim set_interrupt_mask(0);        /* Enable interrupt */
    192          
    193          }
   \   0062  5470              RTS
    194          
    195          /*************************************************************************
    196           *
    197           *      Initialize variables
    198           *
    199           *************************************************************************/
    200          void InitVar(void)
    201          {
   \   0064            InitVar:
   \   0064  6DF6              PUSH    R6
    202          
    203            short i;
    204            /*
    205             **   Init the the com cannal variables
    206             */
    207            tx_indx = 0 ;
   \   0066  F900              MOV.B   #0,R1L
   \   0068  6A8900DE          MOV.B   R1L,@tx_indx:16
    208            tx_complete = TRUE ;
   \   006C  F901              MOV.B   #1,R1L
   \   006E  6A890330          MOV.B   R1L,@tx_complete:16
    209            tx_bytes = 0 ;
   \   0072  F900              MOV.B   #0,R1L
   \   0074  6A8900DF          MOV.B   R1L,@tx_bytes:16
    210            tx_tail = 0 ;
   \   0078  F900              MOV.B   #0,R1L
   \   007A  6A8900E0          MOV.B   R1L,@tx_tail:16
    211            wait_for_pc = 0 ;
   \   007E  F900              MOV.B   #0,R1L
   \   0080  6A8900E1          MOV.B   R1L,@wait_for_pc:16
    212            rx_indx = 1 ;
   \   0084  F901              MOV.B   #1,R1L
   \   0086  6A8900E2          MOV.B   R1L,@rx_indx:16
    213            rx_hndx = 1 ;
   \   008A  F901              MOV.B   #1,R1L
   \   008C  6A8900E3          MOV.B   R1L,@rx_hndx:16
    214            rx_start = 0 ;
   \   0090  F900              MOV.B   #0,R1L
   \   0092  6A8900E4          MOV.B   R1L,@rx_start:16
    215            rx_buff[0] = 0 ;
   \   0096  F900              MOV.B   #0,R1L
   \   0098  6A890070          MOV.B   R1L,@rx_buff:16
    216            rx_counter = 0 ;
   \   009C  F900              MOV.B   #0,R1L
   \   009E  6A8900E5          MOV.B   R1L,@rx_counter:16
    217            rx_state = SYNC ;
   \   00A2  F900              MOV.B   #0,R1L
   \   00A4  6A89032F          MOV.B   R1L,@rx_state:16
    218            rx_timeout = 0 ;
   \   00A8  F900              MOV.B   #0,R1L
   \   00AA  6A8900E7          MOV.B   R1L,@rx_timeout:16
    219          
    220            /*
    221             **   Init channel variables
    222             */
    223            for (i = 0; i< NOIOCH; i += 2) {
   \   00AE  1966              SUB.W   R6,R6
   \   00B0            ?0001:
   \   00B0  7901000E          MOV.W   #14,R1
   \   00B4  1D16              CMP.W   R1,R6
   \   00B6  4C0A              BGE     ?0000
   \   00B8            ?0002:
    224              ch_stat[i] = 0x0c ;                 /*channel setup, try pressure */
   \   00B8  F90C              MOV.B   #12,R1L
   \   00BA  6EE90315          MOV.B   R1L,@(ch_stat,R6)
   \   00BE  0B86              ADDS.W  #2,R6
    225            }
    226            for (i = 1; i< NOIOCH; i += 2) {
   \   00C0  40EE              BRA     ?0001
   \   00C2            ?0000:
   \   00C2  79060001          MOV.W   #1,R6
   \   00C6            ?0005:
   \   00C6  7901000E          MOV.W   #14,R1
   \   00CA  1D16              CMP.W   R1,R6
   \   00CC  4C0A              BGE     ?0004
   \   00CE            ?0006:
    227              ch_stat[i] = 0x04 ;                 /*channel setup, try temp */
   \   00CE  F904              MOV.B   #4,R1L
   \   00D0  6EE90315          MOV.B   R1L,@(ch_stat,R6)
   \   00D4  0B86              ADDS.W  #2,R6
    228            }
    229            for (i = 0; i< NOPSD; i++) {
   \   00D6  40EE              BRA     ?0005
   \   00D8            ?0004:
   \   00D8  1966              SUB.W   R6,R6
   \   00DA            ?0009:
   \   00DA  79010008          MOV.W   #8,R1
   \   00DE  1D16              CMP.W   R1,R6
   \   00E0  4C0A              BGE     ?0008
   \   00E2            ?0010:
    230              eep_type[i] = 0 ;                           /*eeprom status */
   \   00E2  F900              MOV.B   #0,R1L
   \   00E4  6EE90323          MOV.B   R1L,@(eep_type,R6)
   \   00E8  0B06              ADDS.W  #1,R6
    231            }
    232            for (i = 0; i< NOIOCH; i++) {
   \   00EA  40EE              BRA     ?0009
   \   00EC            ?0008:
   \   00EC  1966              SUB.W   R6,R6
   \   00EE            ?0013:
   \   00EE  7901000E          MOV.W   #14,R1
   \   00F2  1D16              CMP.W   R1,R6
   \   00F4  4C22              BGE     ?0012
   \   00F6            ?0014:
    233              offset[i] = 0 ;                                             /*channel setup, offest */
   \   00F6  0D61              MOV.W   R6,R1
   \   00F8  0911              ADD.W   R1,R1
   \   00FA  1933              SUB.W   R3,R3
   \   00FC  6F9302E6          MOV.W   R3,@(offset,R1)
    234              gain[i] = 1.0;
   \   0100  0D61              MOV.W   R6,R1
   \   0102  0911              ADD.W   R1,R1
   \   0104  0911              ADD.W   R1,R1
   \   0106  1922              SUB.W   R2,R2
   \   0108  79003F80          MOV.W   #16256,R0
   \   010C  6F9202B0          MOV.W   R2,@(gain+2,R1)
   \   0110  6F9002AE          MOV.W   R0,@(gain,R1)
   \   0114  0B06              ADDS.W  #1,R6
    235            }
    236          
    237            /*
    238             **   Init other variables
    239             */
    240          
    241            cal_gain = 1.0 ;
   \   0116  40D6              BRA     ?0013
   \   0118            ?0012:
   \   0118  1911              SUB.W   R1,R1
   \   011A  79003F80          MOV.W   #16256,R0
   \   011E  6B810304          MOV.W   R1,@cal_gain+2:16
   \   0122  6B800302          MOV.W   R0,@cal_gain:16
    242            cal_zero = 0 ;
   \   0126  1911              SUB.W   R1,R1
   \   0128  6B810306          MOV.W   R1,@cal_zero:16
    243            p_filter = 5 ;
   \   012C  F905              MOV.B   #5,R1L
   \   012E  6A89032B          MOV.B   R1L,@p_filter:16
    244            t_filter = 2 ;
   \   0132  F902              MOV.B   #2,R1L
   \   0134  6A89032C          MOV.B   R1L,@t_filter:16
    245            o_filter = 2 ;
   \   0138  F902              MOV.B   #2,R1L
   \   013A  6A89032D          MOV.B   R1L,@o_filter:16
    246            sec_cnt = SEC_CNT_INIT;                               /* initvalue for 1 sec counter */
   \   013E  790103E8          MOV.W   #1000,R1
   \   0142  6B81023A          MOV.W   R1,@sec_cnt:16
    247            ad_state = IDLE ;                                                     /* no convertion */
   \   0146  F907              MOV.B   #7,R1L
   \   0148  6A89030C          MOV.B   R1L,@ad_state:16
    248            curr_ad_ch = NOIOCH  ;
   \   014C  F90E              MOV.B   #14,R1L
   \   014E  6A89030B          MOV.B   R1L,@curr_ad_ch:16
    249            ad_mode = 0x88 ;                                                      /* test mode on and start with press.*/
   \   0152  F988              MOV.B   #136,R1L
   \   0154  6A89030D          MOV.B   R1L,@ad_mode:16
    250            ad_mode |= 0x10 ;                                                     /* mark restart of card */
   \   0158  7901030D          MOV.W   #ad_mode,R1
   \   015C  7D107040          BSET    #4,@R1
    251            ad_gain = 0 ;                                                         /* gain 1 */
   \   0160  F900              MOV.B   #0,R1L
   \   0162  6A890314          MOV.B   R1L,@ad_gain:16
    252            time_b_temp = 15 ;                                            /* temp readings in sec */
   \   0166  F90F              MOV.B   #15,R1L
   \   0168  6A890235          MOV.B   R1L,@time_b_temp:16
    253            time_b_cnt = 0 ;
   \   016C  F900              MOV.B   #0,R1L
   \   016E  6A890236          MOV.B   R1L,@time_b_cnt:16
    254            time_e_cnt = TIME_BETWEEN_EEP ;
   \   0172  F90F              MOV.B   #15,R1L
   \   0174  6A890237          MOV.B   R1L,@time_e_cnt:16
    255            not_mes_data = 0 ;
   \   0178  F900              MOV.B   #0,R1L
   \   017A  6A890308          MOV.B   R1L,@not_mes_data:16
    256            not_raw_data = 0 ;
   \   017E  F900              MOV.B   #0,R1L
   \   0180  6A890309          MOV.B   R1L,@not_raw_data:16
    257            not_cal_data = 0 ;
   \   0184  F900              MOV.B   #0,R1L
   \   0186  6A89030A          MOV.B   R1L,@not_cal_data:16
    258          }
   \   018A  6D76              POP     R6
   \   018C  5470              RTS
    259          
    260          /*************************************************************************
    261           *
    262           *      Startup
    263           *
    264           *************************************************************************/
    265          void InitStartup(void)
    266          {
   \   018E            InitStartup:
    267          
    268            P5DR |= ADCLK ;                                                       /*      set AD clock line high */
   \   018E  7FBA7050          BSET    #5,@186:8
    269          
    270            Led(1, OFF) ;                                                         /* switch leds off */
   \   0192  1911              SUB.W   R1,R1
   \   0194  6DF1              MOV.W   R1,@-SP
   \   0196  79010001          MOV.W   #1,R1
   \   019A  5546              BSR     Led
   \   019C  0B87              ADDS.W  #2,SP
    271            Led(2, OFF) ;
   \   019E  1911              SUB.W   R1,R1
   \   01A0  6DF1              MOV.W   R1,@-SP
   \   01A2  79010002          MOV.W   #2,R1
   \   01A6  553A              BSR     Led
   \   01A8  0B87              ADDS.W  #2,SP
    272          
    273            TxDriver(OFF) ;                                                       /* tx enable off */
   \   01AA  1911              SUB.W   R1,R1
   \   01AC  5E000234          JSR     @TxDriver:16
    274            SetEepromChannel(EEPCHOFF) ;                  /* set eeprom channel off */
   \   01B0  F909              MOV.B   #9,R1L
   \   01B2  5E000272          JSR     @SetEepromChannel:16
    275            SetMuxChannel(MUXCHOFF) ;                             /* set mux channel off */
   \   01B6  F910              MOV.B   #16,R1L
   \   01B8  5E0002E6          JSR     @SetMuxChannel:16
    276            SetSupplyChannel(SUPPCHOFF) ;         /* set supply channel off */
   \   01BC  F910              MOV.B   #16,R1L
   \   01BE  5E00029C          JSR     @SetSupplyChannel:16
    277            SetSupplyCurrent(1);                                          /* set 1 mA supply */
   \   01C2  F901              MOV.B   #1,R1L
   \   01C4  5E000318          JSR     @SetSupplyCurrent:16
    278          
    279            GetMyAddress() ;                                                      /* get my address */
   \   01C8  5502              BSR     GetMyAddress
    280          
    281          }
   \   01CA  5470              RTS
    282          
    283          
    284          /*************************************************************************
    285           *
    286           *  Get my address from address switch
    287           *
    288           *************************************************************************/
    289          unsigned char GetMyAddress(void)
    290          {
   \   01CC            GetMyAddress:
    291          
    292            my_address  = ((P4DR & 0x0f) + 10) ;  /* Bit 0-3 */
    293            /* add 10 due to protocole */
    294            return my_address;
   \   01CC  29B7              MOV.B   @183:8,R1L
   \   01CE  E90F              AND.B   #15,R1L
   \   01D0  890A              ADD.B   #10,R1L
   \   01D2  6A89032E          MOV.B   R1L,@my_address:16
    295          }
   \   01D6  5470              RTS
    296          
    297          /*************************************************************************
    298           *
    299           *  Kick watch dog
    300           *
    301           *************************************************************************/
    302          void KickDog(void)
    303          {
   \   01D8            KickDog:
    304            P6DR &= ~WATCH_DOG;
   \   01D8  7FBB7200          BCLR    #0,@187:8
    305            P6DR |=  WATCH_DOG;
   \   01DC  7FBB7000          BSET    #0,@187:8
    306          }
   \   01E0  5470              RTS
    307          
    308          /*************************************************************************
    309           *
    310           *  Write to the leds
    311           *
    312           *************************************************************************/
    313          void Led(short no, short state)
    314          {
   \   01E2            Led:
   \   01E2  6DF6              PUSH    R6
   \   01E4  6F760004          MOV.W   @(4,SP),R6
    315            switch (no) {
   \   01E8  A100              CMP.B   #0,R1H
   \   01EA  4620              BNE     ?0022
   \   01EC  A901              CMP.B   #1,R1L
   \   01EE  461C              BNE     ?0022
   \   01F0            ?0017:
    316              case        1:                                                                              /* LED 1 */
    317                switch (state) {
   \   01F0  A600              CMP.B   #0,R6H
   \   01F2  460A              BNE     ?0020
   \   01F4  AE01              CMP.B   #1,R6L
   \   01F6  4606              BNE     ?0020
   \   01F8            ?0019:
    318                  case ON :
    319                    P6DR &= ~LED1;
   \   01F8  7FBB7210          BCLR    #1,@187:8
    320                    break ;
   \   01FC  400C              BRA     ?0018
   \   01FE            ?0020:
   \   01FE  A600              CMP.B   #0,R6H
   \   0200  4604              BNE     ?0021
   \   0202  AE00              CMP.B   #0,R6L
   \   0204  4600              BNE     ?0021
   \   0206            ?0021:
    321                  case OFF :
    322                  default :
    323                    P6DR |= LED1;
   \   0206  7FBB7010          BSET    #1,@187:8
    324                    break ;
   \   020A            ?0018:
    325                }
    326                break ;
   \   020A  4024              BRA     ?0016
   \   020C            ?0022:
   \   020C  A100              CMP.B   #0,R1H
   \   020E  4620              BNE     ?0027
   \   0210  A902              CMP.B   #2,R1L
   \   0212  461C              BNE     ?0027
    327              case        2:                                                                              /* LED 2 */
    328                switch (state) {
   \   0214  A600              CMP.B   #0,R6H
   \   0216  460A              BNE     ?0025
   \   0218  AE01              CMP.B   #1,R6L
   \   021A  4606              BNE     ?0025
   \   021C            ?0024:
    329                  case ON :
    330                    P6DR &= ~LED2;
   \   021C  7FBB7220          BCLR    #2,@187:8
    331                    break ;
   \   0220  400C              BRA     ?0023
   \   0222            ?0025:
   \   0222  A600              CMP.B   #0,R6H
   \   0224  4604              BNE     ?0026
   \   0226  AE00              CMP.B   #0,R6L
   \   0228  4600              BNE     ?0026
   \   022A            ?0026:
    332                  case OFF :
    333                  default :
    334                    P6DR |= LED2;
   \   022A  7FBB7020          BSET    #2,@187:8
    335                    break ;
   \   022E            ?0023:
    336                }
    337                break ;
   \   022E  4000              BRA     ?0016
   \   0230            ?0027:
    338              default :
    339                break ;
   \   0230            ?0016:
    340            }
    341          }
   \   0230  6D76              POP     R6
   \   0232  5470              RTS
    342          
    343          
    344          /*************************************************************************
    345           *
    346           *  Enable / disable RS485 driver on SCI0
    347           *
    348           *************************************************************************/
    349          void TxDriver(short state)
    350          {
   \   0234            TxDriver:
    351          
    352            switch (state) {
   \   0234  A100              CMP.B   #0,R1H
   \   0236  460A              BNE     ?0030
   \   0238  A901              CMP.B   #1,R1L
   \   023A  4606              BNE     ?0030
   \   023C            ?0029:
    353              case ON :                                                   /* driver on */
    354                P5DR |= TXE;
   \   023C  7FBA7020          BSET    #2,@186:8
    355                break;
   \   0240  400E              BRA     ?0028
   \   0242            ?0030:
   \   0242  A100              CMP.B   #0,R1H
   \   0244  460A              BNE     ?0031
   \   0246  A900              CMP.B   #0,R1L
   \   0248  4606              BNE     ?0031
    356              case OFF :                                                  /* driver off */
    357                P5DR &= ~TXE;
   \   024A  7FBA7220          BCLR    #2,@186:8
    358                break;
   \   024E  4000              BRA     ?0028
   \   0250            ?0031:
    359              default :
    360                break;
   \   0250            ?0028:
    361            }
    362          }
   \   0250  5470              RTS
    363          
    364          
    365          /*************************************************************************
    366           *
    367           *  Return from this function after  time * 1ms
    368           *
    369           *************************************************************************/
    370          void OneMsecDelay(unsigned long time)
    371          {
   \   0252            OneMsecDelay:
    372            ms_delay_cnt = time ;
   \   0252  6B810310          MOV.W   R1,@ms_delay_cnt+2:16
   \   0256  6B80030E          MOV.W   R0,@ms_delay_cnt:16
   \   025A            ?0033:
    373            while (ms_delay_cnt) {                                        /* wait for time * 1ms */
   \   025A  6B010310          MOV.W   @ms_delay_cnt+2:16,R1
   \   025E  6B00030E          MOV.W   @ms_delay_cnt:16,R0
   \   0262  1419              OR.B    R1H,R1L
   \   0264  1408              OR.B    R0H,R0L
   \   0266  1489              OR.B    R0L,R1L
   \   0268  4706              BEQ     ?0032
   \   026A            ?0034:
    374              KickDog() ;
   \   026A  5E0001D8          JSR     @KickDog:16
    375            }
    376          }
   \   026E  40EA              BRA     ?0033
   \   0270            ?0032:
   \   0270  5470              RTS
    377          
    378          
    379          /*************************************************************************
    380           *
    381           *  Set com channel to a eeprom DS2430
    382           *
    383           *************************************************************************/
    384          void SetEepromChannel(unsigned char channel)
    385          {
   \   0272            SetEepromChannel:
   \   0272  6DF6              PUSH    R6
   \   0274  0C9E              MOV.B   R1L,R6L
    386            if (channel == EEPCHOFF) {
   \   0276  A909              CMP.B   #9,R1L
   \   0278  4608              BNE     ?0036
   \   027A            ?0035:
    387              P1DR &= ~0x3C ;                                                     /* switch off any channel */
   \   027A  29B2              MOV.B   @178:8,R1L
   \   027C  E9C3              AND.B   #195,R1L
   \   027E  39B2              MOV.B   R1L,@178:8
    388            } else {
   \   0280  4016              BRA     ?0037
   \   0282            ?0036:
    389              P1DR &= ~0x3C ;                                                     /* switch off any output */
   \   0282  29B2              MOV.B   @178:8,R1L
   \   0284  E9C3              AND.B   #195,R1L
   \   0286  39B2              MOV.B   R1L,@178:8
    390              P1DR |= ((channel & 0x7) << 2) | 0x20 ;  /* set channel and enable bit */
   \   0288  0CE9              MOV.B   R6L,R1L
   \   028A  E907              AND.B   #7,R1L
   \   028C  1009              SHLL.B  R1L
   \   028E  1009              SHLL.B  R1L
   \   0290  C920              OR.B    #32,R1L
   \   0292  2BB2              MOV.B   @178:8,R3L
   \   0294  149B              OR.B    R1L,R3L
   \   0296  3BB2              MOV.B   R3L,@178:8
   \   0298            ?0037:
    391            }
    392          }
   \   0298  6D76              POP     R6
   \   029A  5470              RTS
    393          
    394          
    395          /*************************************************************************
    396           *
    397           *  Set supply channel to a sensor
    398           *
    399           *************************************************************************/
    400          void SetSupplyChannel(unsigned char channel)
    401          {
   \   029C            SetSupplyChannel:
   \   029C  6DF6              PUSH    R6
   \   029E  0C9E              MOV.B   R1L,R6L
    402          
    403            if (channel == SUPPCHOFF) {
   \   02A0  A910              CMP.B   #16,R1L
   \   02A2  460E              BNE     ?0039
   \   02A4            ?0038:
    404              P1DR &= ~0x03 ;                                                             /* switch off any channel */
   \   02A4  29B2              MOV.B   @178:8,R1L
   \   02A6  E9FC              AND.B   #252,R1L
   \   02A8  39B2              MOV.B   R1L,@178:8
    405              P3DR &= ~0xe0 ;
   \   02AA  29B6              MOV.B   @182:8,R1L
   \   02AC  E91F              AND.B   #31,R1L
   \   02AE  39B6              MOV.B   R1L,@182:8
    406            } else {
   \   02B0  4030              BRA     ?0040
   \   02B2            ?0039:
    407              P1DR &= ~0x03 ;                                                             /* switch off any channel */
   \   02B2  29B2              MOV.B   @178:8,R1L
   \   02B4  E9FC              AND.B   #252,R1L
   \   02B6  39B2              MOV.B   R1L,@178:8
    408              P3DR &= ~0xe0 ;
   \   02B8  29B6              MOV.B   @182:8,R1L
   \   02BA  E91F              AND.B   #31,R1L
   \   02BC  39B6              MOV.B   R1L,@182:8
    409              P3DR |= ((channel & 0x07) << 5) ;
   \   02BE  0CE9              MOV.B   R6L,R1L
   \   02C0  E907              AND.B   #7,R1L
   \   02C2  1389              ROTR.B  R1L
   \   02C4  1389              ROTR.B  R1L
   \   02C6  1389              ROTR.B  R1L
   \   02C8  E9E0              AND.B   #224,R1L
   \   02CA  2BB6              MOV.B   @182:8,R3L
   \   02CC  149B              OR.B    R1L,R3L
   \   02CE  3BB6              MOV.B   R3L,@182:8
    410              P1DR |= ((channel & 0x08) >> 3) | 0x02 ; /* set channel and enable bit */
   \   02D0  0CE9              MOV.B   R6L,R1L
   \   02D2  E908              AND.B   #8,R1L
   \   02D4  1109              SHLR.B  R1L
   \   02D6  1109              SHLR.B  R1L
   \   02D8  1109              SHLR.B  R1L
   \   02DA  C902              OR.B    #2,R1L
   \   02DC  2BB2              MOV.B   @178:8,R3L
   \   02DE  149B              OR.B    R1L,R3L
   \   02E0  3BB2              MOV.B   R3L,@178:8
   \   02E2            ?0040:
    411            }
    412          }
   \   02E2  6D76              POP     R6
   \   02E4  5470              RTS
    413          
    414          /*************************************************************************
    415           *
    416           *  Set mux channel to a sensor
    417           *
    418           *************************************************************************/
    419          void SetMuxChannel(unsigned char channel)
    420          {
   \   02E6            SetMuxChannel:
   \   02E6  6DF6              PUSH    R6
   \   02E8  0C9E              MOV.B   R1L,R6L
    421          
    422            if (channel == MUXCHOFF) {
   \   02EA  A910              CMP.B   #16,R1L
   \   02EC  4608              BNE     ?0042
   \   02EE            ?0041:
    423              P3DR &= ~0x1f ;                                                     /* switch off any channel */
   \   02EE  29B6              MOV.B   @182:8,R1L
   \   02F0  E9E0              AND.B   #224,R1L
   \   02F2  39B6              MOV.B   R1L,@182:8
    424            } else {
   \   02F4  401E              BRA     ?0043
   \   02F6            ?0042:
    425              P3DR &= ~0x1f ;                                                     /* switch off any channel */
   \   02F6  29B6              MOV.B   @182:8,R1L
   \   02F8  E9E0              AND.B   #224,R1L
   \   02FA  39B6              MOV.B   R1L,@182:8
    426              P3DR |= (channel & 0x07) ;
   \   02FC  0CE9              MOV.B   R6L,R1L
   \   02FE  E907              AND.B   #7,R1L
   \   0300  2BB6              MOV.B   @182:8,R3L
   \   0302  149B              OR.B    R1L,R3L
   \   0304  3BB6              MOV.B   R3L,@182:8
    427              if (channel < 8 ) {                                                 /* set E1 or E2 */
   \   0306  AE08              CMP.B   #8,R6L
   \   0308  4406              BCC     ?0045
   \   030A            ?0044:
    428                P3DR |= 0x08 ;                                                    /* set enable bit 1 */
   \   030A  7FB67030          BSET    #3,@182:8
    429              } else {
   \   030E  4004              BRA     ?0046
   \   0310            ?0045:
    430                P3DR |= 0x10 ;                                                    /* set enable bit 2 */
   \   0310  7FB67040          BSET    #4,@182:8
   \   0314            ?0046:
   \   0314            ?0043:
    431              }
    432            }
    433          }
   \   0314  6D76              POP     R6
   \   0316  5470              RTS
    434          
    435          /*************************************************************************
    436           *
    437           *  Set 1 / 10 mA sypply current
    438           *
    439           *************************************************************************/
    440          void SetSupplyCurrent(unsigned char current)
    441          {
   \   0318            SetSupplyCurrent:
    442            if (current == 10 ) {
   \   0318  A90A              CMP.B   #10,R1L
   \   031A  4608              BNE     ?0048
   \   031C            ?0047:
    443              P4DR &= (~SELMA & 0xf0);                                    /* set 10 mA */
   \   031C  29B7              MOV.B   @183:8,R1L
   \   031E  E970              AND.B   #112,R1L
   \   0320  39B7              MOV.B   R1L,@183:8
    444            } else {
   \   0322  4004              BRA     ?0049
   \   0324            ?0048:
    445              P4DR |= SELMA ;                                                             /* set 1 mA */
   \   0324  7FB77070          BSET    #7,@183:8
   \   0328            ?0049:
    446            }
    447          }
   \   0328  5470              RTS
    448          
    449          /*************************************************************************
    450           *
    451           *  Select calibration resistance
    452           *
    453           *************************************************************************/
    454          void SetCalResistance(unsigned char value)
    455          {
   \   032A            SetCalResistance:
    456            switch (value) {
   \   032A  A940              CMP.B   #64,R1L
   \   032C  460A              BNE     ?0052
   \   032E            ?0051:
    457              case OHM_1R :                                                                               /* 1 ohm resistor */
    458                P1DR |= OHM_1R ;
   \   032E  7FB27060          BSET    #6,@178:8
    459                P1DR &= ~OHM_1K ;
   \   0332  7FB27270          BCLR    #7,@178:8
    460                break ;
   \   0336  4014              BRA     ?0050
   \   0338            ?0052:
   \   0338  A980              CMP.B   #128,R1L
   \   033A  460A              BNE     ?0053
    461              case OHM_1K :                                                                               /* 1000 ohm resistor */
    462                P1DR |= OHM_1K ;
   \   033C  7FB27070          BSET    #7,@178:8
    463                P1DR &= ~OHM_1R ;
   \   0340  7FB27260          BCLR    #6,@178:8
    464                break ;
   \   0344  4006              BRA     ?0050
   \   0346            ?0053:
    465              default :                                                                                   /* both off */
    466                P1DR &= ~(OHM_1R | OHM_1K) ;
   \   0346  29B2              MOV.B   @178:8,R1L
   \   0348  E93F              AND.B   #63,R1L
   \   034A  39B2              MOV.B   R1L,@178:8
    467                break ;
   \   034C            ?0050:
    468            }
    469          }
   \   034C  5470              RTS
    470          
    471          /*************************************************************************
    472           *
    473           *  Check new convertion*
    474           *************************************************************************/
    475          void CheckConvert(void)
    476          {
   \   034E            CheckConvert:
    477          
    478            if (ad_state == IDLE ) {                      /* New channel? */
   \   034E  6A09030C          MOV.B   @ad_state:16,R1L
   \   0352  A907              CMP.B   #7,R1L
   \   0354  4704              BEQ     $+6
   \   0356  5A0004BA          JMP     @?0055:16
   \   035A            ?0054:
    479              ad_state = START_NEW_POINT ;
   \   035A  F901              MOV.B   #1,R1L
   \   035C  6A89030C          MOV.B   R1L,@ad_state:16
    480              if (curr_ad_ch < (NOIOCH-1)) {
   \   0360  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0364  A90D              CMP.B   #13,R1L
   \   0366  4C0E              BGE     ?0057
   \   0368            ?0056:
    481                curr_ad_ch++ ;
   \   0368  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   036C  8901              ADD.B   #1,R1L
   \   036E  6A89030B          MOV.B   R1L,@curr_ad_ch:16
    482              } else {
   \   0372  5A0004BA          JMP     @?0058:16
   \   0376            ?0057:
    483                curr_ad_ch = 0 ;
   \   0376  F900              MOV.B   #0,R1L
   \   0378  6A89030B          MOV.B   R1L,@curr_ad_ch:16
    484                if (!time_e_cnt) {
   \   037C  6A090237          MOV.B   @time_e_cnt:16,R1L
   \   0380  461A              BNE     ?0060
   \   0382            ?0059:
    485                  if (ad_mode & 0x80) {                           /* test */
   \   0382  6A09030D          MOV.B   @ad_mode:16,R1L
   \   0386  E980              AND.B   #128,R1L
   \   0388  4708              BEQ     ?0062
   \   038A            ?0061:
    486                    ad_mode &= ~0x80 ;                            /* test mode off */
   \   038A  7901030D          MOV.W   #ad_mode,R1
   \   038E  7D107270          BCLR    #7,@R1
   \   0392            ?0062:
    487                  }
    488                  CheckEepChannel()       ;                                       /* Check the sensordata */
   \   0392  5E000000          JSR     @CheckEepChannel:16
    489                  time_e_cnt = TIME_BETWEEN_EEP ;
   \   0396  F90F              MOV.B   #15,R1L
   \   0398  6A890237          MOV.B   R1L,@time_e_cnt:16
   \   039C            ?0060:
    490                }
    491                if (not_mes_data && (ad_mode & 0x02)) {   /* autosend? */
   \   039C  6A090308          MOV.B   @not_mes_data:16,R1L
   \   03A0  4730              BEQ     ?0064
   \   03A2  6A09030D          MOV.B   @ad_mode:16,R1L
   \   03A6  E902              AND.B   #2,R1L
   \   03A8  4728              BEQ     ?0064
   \   03AA            ?0066:
   \   03AA            ?0065:
   \   03AA            ?0063:
    492                  BuildHeader() ;                                         /* Build send packet header */
   \   03AA  5E000000          JSR     @BuildHeader:16
    493                  BuildMPData();                                          /* Build data p. for pressure */
   \   03AE  5E000000          JSR     @BuildMPData:16
    494                  BuildMTData();                                          /* Build data p. for temp */
   \   03B2  5E000000          JSR     @BuildMTData:16
    495                  BuildMOData();                                          /* Build data p. for other */
   \   03B6  5E000000          JSR     @BuildMOData:16
    496                  BuildTail(NO_MORE_DATA, 0) ;    /* Build tail */
   \   03BA  F900              MOV.B   #0,R1L
   \   03BC  6DF1              MOV.W   R1,@-SP
   \   03BE  F900              MOV.B   #0,R1L
   \   03C0  5E000000          JSR     @BuildTail:16
   \   03C4  0B87              ADDS.W  #2,SP
    497                  not_mes_data-- ;
   \   03C6  6A090308          MOV.B   @not_mes_data:16,R1L
   \   03CA  89FF              ADD.B   #-1,R1L
   \   03CC  6A890308          MOV.B   R1L,@not_mes_data:16
    498                } else if (not_raw_data && (ad_mode & 0x02)) {    /* autosend? */
   \   03D0  4062              BRA     ?0067
   \   03D2            ?0064:
   \   03D2  6A090309          MOV.B   @not_raw_data:16,R1L
   \   03D6  4730              BEQ     ?0069
   \   03D8  6A09030D          MOV.B   @ad_mode:16,R1L
   \   03DC  E902              AND.B   #2,R1L
   \   03DE  4728              BEQ     ?0069
   \   03E0            ?0071:
   \   03E0            ?0070:
   \   03E0            ?0068:
    499                  BuildHeader() ;                                         /* Build send packet header */
   \   03E0  5E000000          JSR     @BuildHeader:16
    500                  BuildRPData();                                          /* Build data p. for pressure */
   \   03E4  5E000000          JSR     @BuildRPData:16
    501                  BuildRTData();                                          /* Build data p. for temp */
   \   03E8  5E000000          JSR     @BuildRTData:16
    502                  BuildROData();                                          /* Build data p. for other */
   \   03EC  5E000000          JSR     @BuildROData:16
    503                  BuildTail(NO_MORE_DATA, 0) ;    /* Build tail */
   \   03F0  F900              MOV.B   #0,R1L
   \   03F2  6DF1              MOV.W   R1,@-SP
   \   03F4  F900              MOV.B   #0,R1L
   \   03F6  5E000000          JSR     @BuildTail:16
   \   03FA  0B87              ADDS.W  #2,SP
    504                  not_raw_data-- ;
   \   03FC  6A090309          MOV.B   @not_raw_data:16,R1L
   \   0400  89FF              ADD.B   #-1,R1L
   \   0402  6A890309          MOV.B   R1L,@not_raw_data:16
    505                } else if (not_cal_data && (ad_mode & 0x02)) {    /* autosend? */
   \   0406  402C              BRA     ?0072
   \   0408            ?0069:
   \   0408  6A09030A          MOV.B   @not_cal_data:16,R1L
   \   040C  4726              BEQ     ?0074
   \   040E  6A09030D          MOV.B   @ad_mode:16,R1L
   \   0412  E902              AND.B   #2,R1L
   \   0414  471E              BEQ     ?0074
   \   0416            ?0076:
   \   0416            ?0075:
   \   0416            ?0073:
    506                  BuildHeader() ;                                         /* Build send packet header */
   \   0416  5E000000          JSR     @BuildHeader:16
    507                  BuildCalData();                                         /* Build data p. for calib */
   \   041A  5E000000          JSR     @BuildCalData:16
    508                  BuildTail(NO_MORE_DATA, 0) ;    /* Build tail */
   \   041E  F900              MOV.B   #0,R1L
   \   0420  6DF1              MOV.W   R1,@-SP
   \   0422  F900              MOV.B   #0,R1L
   \   0424  5E000000          JSR     @BuildTail:16
   \   0428  0B87              ADDS.W  #2,SP
    509                  not_cal_data-- ;
   \   042A  6A09030A          MOV.B   @not_cal_data:16,R1L
   \   042E  89FF              ADD.B   #-1,R1L
   \   0430  6A89030A          MOV.B   R1L,@not_cal_data:16
   \   0434            ?0074:
   \   0434            ?0072:
   \   0434            ?0067:
    510                }
    511                if (ad_mode & 0x08) {                     /* temp readings */
   \   0434  6A09030D          MOV.B   @ad_mode:16,R1L
   \   0438  E908              AND.B   #8,R1L
   \   043A  471A              BEQ     ?0078
   \   043C            ?0077:
    512                  ad_mode &= ~0x0e ;
   \   043C  6A09030D          MOV.B   @ad_mode:16,R1L
   \   0440  E9F1              AND.B   #241,R1L
   \   0442  6A89030D          MOV.B   R1L,@ad_mode:16
    513                  ad_mode |= 0x02 ;
   \   0446  7901030D          MOV.W   #ad_mode,R1
   \   044A  7D107010          BSET    #1,@R1
    514                  ad_state = START_CALIBRATION ;
   \   044E  F904              MOV.B   #4,R1L
   \   0450  6A89030C          MOV.B   R1L,@ad_state:16
    515                } else if (ad_mode & 0x04) {      /* "other" */
   \   0454  4064              BRA     ?0079
   \   0456            ?0078:
   \   0456  6A09030D          MOV.B   @ad_mode:16,R1L
   \   045A  E904              AND.B   #4,R1L
   \   045C  471A              BEQ     ?0081
   \   045E            ?0080:
    516                  ad_mode &= ~0x0e ;
   \   045E  6A09030D          MOV.B   @ad_mode:16,R1L
   \   0462  E9F1              AND.B   #241,R1L
   \   0464  6A89030D          MOV.B   R1L,@ad_mode:16
    517                  ad_mode |= 0x08 ;
   \   0468  7901030D          MOV.W   #ad_mode,R1
   \   046C  7D107030          BSET    #3,@R1
    518                  ad_state = START_CALIBRATION ;
   \   0470  F904              MOV.B   #4,R1L
   \   0472  6A89030C          MOV.B   R1L,@ad_state:16
    519                } else if (ad_mode & 0x02) {                      /* pressure */
   \   0476  4042              BRA     ?0082
   \   0478            ?0081:
   \   0478  6A09030D          MOV.B   @ad_mode:16,R1L
   \   047C  E902              AND.B   #2,R1L
   \   047E  4728              BEQ     ?0084
   \   0480            ?0083:
    520                  if (!time_b_cnt) {
   \   0480  6A090236          MOV.B   @time_b_cnt:16,R1L
   \   0484  4620              BNE     ?0086
   \   0486            ?0085:
    521                    ad_mode &= ~0x0e ;
   \   0486  6A09030D          MOV.B   @ad_mode:16,R1L
   \   048A  E9F1              AND.B   #241,R1L
   \   048C  6A89030D          MOV.B   R1L,@ad_mode:16
    522                    ad_mode |= 0x04 ;                                     /* convert temp */
   \   0490  7901030D          MOV.W   #ad_mode,R1
   \   0494  7D107020          BSET    #2,@R1
    523                    ad_state = START_CALIBRATION ;
   \   0498  F904              MOV.B   #4,R1L
   \   049A  6A89030C          MOV.B   R1L,@ad_state:16
    524                    time_b_cnt = time_b_temp ;            /* reload counter */
   \   049E  6A090235          MOV.B   @time_b_temp:16,R1L
   \   04A2  6A890236          MOV.B   R1L,@time_b_cnt:16
   \   04A6            ?0086:
    525                  }
    526                } else {
   \   04A6  4012              BRA     ?0087
   \   04A8            ?0084:
    527                  ad_mode &= ~0x0e ;
   \   04A8  6A09030D          MOV.B   @ad_mode:16,R1L
   \   04AC  E9F1              AND.B   #241,R1L
   \   04AE  6A89030D          MOV.B   R1L,@ad_mode:16
    528                  ad_mode |= 0x04 ;                                               /* next pressure */
   \   04B2  7901030D          MOV.W   #ad_mode,R1
   \   04B6  7D107020          BSET    #2,@R1
   \   04BA            ?0087:
   \   04BA            ?0082:
   \   04BA            ?0079:
   \   04BA            ?0058:
   \   04BA            ?0055:
    529                }
    530              }
    531            }
    532            if (tx_complete) {
   \   04BA  6A090330          MOV.B   @tx_complete:16,R1L
   \   04BE  4702              BEQ     ?0089
   \   04C0            ?0088:
    533              ADConvert() ;                                                                       /* convert data */
   \   04C0  5502              BSR     ADConvert
   \   04C2            ?0089:
    534            }
    535          }
   \   04C2  5470              RTS
    536          
    537          /*************************************************************************
    538           *
    539           *  Convert sensor data
    540           *
    541           *************************************************************************/
    542          void ADConvert(void)
    543          {
   \   04C4            ADConvert:
   \   04C4  6DF6              PUSH    R6
    544            unsigned short ad_data ;
    545          
    546            switch (ad_state) {
   \   04C6  6A09030C          MOV.B   @ad_state:16,R1L
   \   04CA  A901              CMP.B   #1,R1L
   \   04CC  4704              BEQ     $+6
   \   04CE  5A000602          JMP     @?0106:16
   \   04D2            ?0091:
    547              case        START_NEW_POINT :
    548                ad_mode &= ~0x01 ;                                                        /* reset tx check marker */
   \   04D2  7901030D          MOV.W   #ad_mode,R1
   \   04D6  7D107200          BCLR    #0,@R1
    549                ad_timeout_cnt = AD_TIMEOUT ;                                     /* timeout ad cnv */
   \   04DA  790107D0          MOV.W   #2000,R1
   \   04DE  6B810238          MOV.W   R1,@ad_timeout_cnt:16
    550                switch ((ch_stat[curr_ad_ch]>> 2) & 0x03) {
   \   04E2  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   04E6  7779              BLD     #7,R1L
   \   04E8  1E11              SUBX.B  R1H,R1H
   \   04EA  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   04EE  110B              SHLR.B  R3L
   \   04F0  110B              SHLR.B  R3L
   \   04F2  EB03              AND.B   #3,R3L
   \   04F4  AB03              CMP.B   #3,R3L
   \   04F6  4654              BNE     ?0097
   \   04F8            ?0093:
    551                  case 0x03 :                              /* pressure */
    552                    if (ad_mode & 0x02) {                                         /* pressure readings */
   \   04F8  6A09030D          MOV.B   @ad_mode:16,R1L
   \   04FC  E902              AND.B   #2,R1L
   \   04FE  4742              BEQ     ?0095
   \   0500            ?0094:
    553                      SetCalResistance(OHM_1R);
   \   0500  F940              MOV.B   #64,R1L
   \   0502  5E00032A          JSR     @SetCalResistance:16
    554                      SetSupplyChannel(curr_ad_ch) ;
   \   0506  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   050A  5E00029C          JSR     @SetSupplyChannel:16
    555                      SetSupplyCurrent(10) ;
   \   050E  F90A              MOV.B   #10,R1L
   \   0510  5E000318          JSR     @SetSupplyCurrent:16
    556                      SetMuxChannel(curr_ad_ch) ;
   \   0514  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0518  5E0002E6          JSR     @SetMuxChannel:16
    557                      ad_gain = 3 ;
   \   051C  F903              MOV.B   #3,R1L
   \   051E  6A890314          MOV.B   R1L,@ad_gain:16
    558                      WriteAdByte(ad_gain | 0x10) ;                       /* Next write data */
   \   0522  6A090314          MOV.B   @ad_gain:16,R1L
   \   0526  C910              OR.B    #16,R1L
   \   0528  5E001F26          JSR     @WriteAdByte:16
    559                      WriteAdByte(0x2a) ;                                         /* Ad setup data, bipolar*/
   \   052C  F92A              MOV.B   #42,R1L
   \   052E  5E001F26          JSR     @WriteAdByte:16
    560                      ad_settling = AD_SET_TIME ;                 /* wait 67 ms */
   \   0532  79010043          MOV.W   #67,R1
   \   0536  6B810312          MOV.W   R1,@ad_settling:16
    561                      ad_state = WAIT_FOR_INTERRUPT ;             /* next state */
   \   053A  F902              MOV.B   #2,R1L
   \   053C  6A89030C          MOV.B   R1L,@ad_state:16
    562                    } else {
   \   0540  4006              BRA     ?0096
   \   0542            ?0095:
    563                      ad_state = IDLE ;
   \   0542  F907              MOV.B   #7,R1L
   \   0544  6A89030C          MOV.B   R1L,@ad_state:16
   \   0548            ?0096:
    564                    }
    565                    break;
   \   0548  5A0005FE          JMP     @?0092:16
   \   054C            ?0097:
   \   054C  AB02              CMP.B   #2,R3L
   \   054E  4652              BNE     ?0101
    566                  case 0x02 :                               /* "OTHER " */
    567                    if (ad_mode & 0x04) {                                         /* other readings */
   \   0550  6A09030D          MOV.B   @ad_mode:16,R1L
   \   0554  E904              AND.B   #4,R1L
   \   0556  4742              BEQ     ?0099
   \   0558            ?0098:
    568                      SetCalResistance(OHM_1K);
   \   0558  F980              MOV.B   #128,R1L
   \   055A  5E00032A          JSR     @SetCalResistance:16
    569                      SetSupplyChannel(curr_ad_ch) ;
   \   055E  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0562  5E00029C          JSR     @SetSupplyChannel:16
    570                      SetSupplyCurrent(1) ;
   \   0566  F901              MOV.B   #1,R1L
   \   0568  5E000318          JSR     @SetSupplyCurrent:16
    571                      SetMuxChannel(curr_ad_ch) ;
   \   056C  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0570  5E0002E6          JSR     @SetMuxChannel:16
    572                      ad_gain = 0 ;
   \   0574  F900              MOV.B   #0,R1L
   \   0576  6A890314          MOV.B   R1L,@ad_gain:16
    573                      WriteAdByte(ad_gain | 0x10) ;                        /* Next write data */
   \   057A  6A090314          MOV.B   @ad_gain:16,R1L
   \   057E  C910              OR.B    #16,R1L
   \   0580  5E001F26          JSR     @WriteAdByte:16
    574                      WriteAdByte(0x2a) ;                                          /* Ad setup data */
   \   0584  F92A              MOV.B   #42,R1L
   \   0586  5E001F26          JSR     @WriteAdByte:16
    575                      ad_settling = AD_SET_TIME ;                  /* wait 67 ms */
   \   058A  79010043          MOV.W   #67,R1
   \   058E  6B810312          MOV.W   R1,@ad_settling:16
    576                      ad_state = WAIT_FOR_INTERRUPT ;              /* next state */
   \   0592  F902              MOV.B   #2,R1L
   \   0594  6A89030C          MOV.B   R1L,@ad_state:16
    577                    } else {
   \   0598  4006              BRA     ?0100
   \   059A            ?0099:
    578                      ad_state = IDLE ;
   \   059A  F907              MOV.B   #7,R1L
   \   059C  6A89030C          MOV.B   R1L,@ad_state:16
   \   05A0            ?0100:
    579                    }
    580                    break;
   \   05A0  405C              BRA     ?0092
   \   05A2            ?0101:
   \   05A2  AB01              CMP.B   #1,R3L
   \   05A4  4652              BNE     ?0105
    581                  case 0x01 :                               /* temp */
    582                    if (ad_mode & 0x08) {                                         /* convert temp? */
   \   05A6  6A09030D          MOV.B   @ad_mode:16,R1L
   \   05AA  E908              AND.B   #8,R1L
   \   05AC  4742              BEQ     ?0103
   \   05AE            ?0102:
    583                      SetCalResistance(OHM_1K);
   \   05AE  F980              MOV.B   #128,R1L
   \   05B0  5E00032A          JSR     @SetCalResistance:16
    584                      SetSupplyChannel(curr_ad_ch) ;
   \   05B4  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   05B8  5E00029C          JSR     @SetSupplyChannel:16
    585                      SetSupplyCurrent(1) ;
   \   05BC  F901              MOV.B   #1,R1L
   \   05BE  5E000318          JSR     @SetSupplyCurrent:16
    586                      SetMuxChannel(curr_ad_ch) ;
   \   05C2  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   05C6  5E0002E6          JSR     @SetMuxChannel:16
    587                      ad_gain = 0 ;
   \   05CA  F900              MOV.B   #0,R1L
   \   05CC  6A890314          MOV.B   R1L,@ad_gain:16
    588                      WriteAdByte(ad_gain | 0x10) ;                        /* Next write data */
   \   05D0  6A090314          MOV.B   @ad_gain:16,R1L
   \   05D4  C910              OR.B    #16,R1L
   \   05D6  5E001F26          JSR     @WriteAdByte:16
    589                      WriteAdByte(0x2a) ;                                         /* Ad setup data, bipolar*/
   \   05DA  F92A              MOV.B   #42,R1L
   \   05DC  5E001F26          JSR     @WriteAdByte:16
    590                      ad_settling = AD_SET_TIME ;                  /* wait 67 ms */
   \   05E0  79010043          MOV.W   #67,R1
   \   05E4  6B810312          MOV.W   R1,@ad_settling:16
    591                      ad_state = WAIT_FOR_INTERRUPT ;              /* next state */
   \   05E8  F902              MOV.B   #2,R1L
   \   05EA  6A89030C          MOV.B   R1L,@ad_state:16
    592                    } else {
   \   05EE  4006              BRA     ?0104
   \   05F0            ?0103:
    593                      ad_state = IDLE ;
   \   05F0  F907              MOV.B   #7,R1L
   \   05F2  6A89030C          MOV.B   R1L,@ad_state:16
   \   05F6            ?0104:
    594                    }
    595                    break;
   \   05F6  4006              BRA     ?0092
   \   05F8            ?0105:
    596                  default :
    597                    ad_state = IDLE ;
   \   05F8  F907              MOV.B   #7,R1L
   \   05FA  6A89030C          MOV.B   R1L,@ad_state:16
    598                    break ;
   \   05FE            ?0092:
    599                }
    600                break ;
   \   05FE  5A000B8A          JMP     @?0090:16
   \   0602            ?0106:
   \   0602  A902              CMP.B   #2,R1L
   \   0604  4604              BNE     ?0107
    601              case        WAIT_FOR_INTERRUPT :
    602                break ;
   \   0606  5A000B8A          JMP     @?0090:16
   \   060A            ?0107:
   \   060A  A903              CMP.B   #3,R1L
   \   060C  4704              BEQ     $+6
   \   060E  5A000AF4          JMP     @?0154:16
    603              case        CONV_COMPLETE :
    604                WriteAdByte(ad_gain | 0x38) ;                                     /* Next read data */
   \   0612  6A090314          MOV.B   @ad_gain:16,R1L
   \   0616  C938              OR.B    #56,R1L
   \   0618  5E001F26          JSR     @WriteAdByte:16
    605                ad_data = ReadAdByte()* 256 ;                        /* read data 16 bit data from ad */
   \   061C  5E001EFA          JSR     @ReadAdByte:16
   \   0620  F100              MOV.B   #0,R1H
   \   0622  0C91              MOV.B   R1L,R1H
   \   0624  F900              MOV.B   #0,R1L
   \   0626  0D16              MOV.W   R1,R6
    606                ad_data += ReadAdByte() ;
   \   0628  5E001EFA          JSR     @ReadAdByte:16
   \   062C  F100              MOV.B   #0,R1H
   \   062E  0916              ADD.W   R1,R6
    607                if (ad_mode & 0x40) {                                                     /* cal point ? */
   \   0630  6A09030D          MOV.B   @ad_mode:16,R1L
   \   0634  E940              AND.B   #64,R1L
   \   0636  4604              BNE     $+6
   \   0638  5A0009FC          JMP     @?0109:16
   \   063C            ?0108:
    608                  ad_mode &= ~0x40 ;
   \   063C  7901030D          MOV.W   #ad_mode,R1
   \   0640  7D107260          BCLR    #6,@R1
    609                  SetSupplyCurrent(1) ;
   \   0644  F901              MOV.B   #1,R1L
   \   0646  5E000318          JSR     @SetSupplyCurrent:16
    610                  SetMuxChannel(MUXCHOFF) ;
   \   064A  F910              MOV.B   #16,R1L
   \   064C  5E0002E6          JSR     @SetMuxChannel:16
    611                  SetSupplyChannel(SUPPCHOFF) ;
   \   0650  F910              MOV.B   #16,R1L
   \   0652  5E00029C          JSR     @SetSupplyChannel:16
    612                  SetCalResistance(OFF);
   \   0656  F900              MOV.B   #0,R1L
   \   0658  5E00032A          JSR     @SetCalResistance:16
    613                  ad_state = IDLE ;
   \   065C  F907              MOV.B   #7,R1L
   \   065E  6A89030C          MOV.B   R1L,@ad_state:16
    614                  ad_timeout_cnt = 0 ;                                                    /* timeout off */
   \   0662  1911              SUB.W   R1,R1
   \   0664  6B810238          MOV.W   R1,@ad_timeout_cnt:16
    615                  if (!(ad_mode & 0x01)) {                                        /* tx during conv? */
   \   0668  6A09030D          MOV.B   @ad_mode:16,R1L
   \   066C  E901              AND.B   #1,R1L
   \   066E  4704              BEQ     $+6
   \   0670  5A0009EE          JMP     @?0111:16
   \   0674            ?0110:
    616                    cal_data[curr_ad_ch] = (short)(ad_data - 32767) ;    /* no, use data  */
   \   0674  0D61              MOV.W   R6,R1
   \   0676  8901              ADD.B   #1,R1L
   \   0678  9180              ADDX.B  #128,R1H
   \   067A  6A0B030B          MOV.B   @curr_ad_ch:16,R3L
   \   067E  777B              BLD     #7,R3L
   \   0680  1E33              SUBX.B  R3H,R3H
   \   0682  0933              ADD.W   R3,R3
   \   0684  6FB1023E          MOV.W   R1,@(cal_data,R3)
    617          
    618                    switch ((ch_stat[curr_ad_ch]>> 2) & 0x03) {
   \   0688  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   068C  7779              BLD     #7,R1L
   \   068E  1E11              SUBX.B  R1H,R1H
   \   0690  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   0694  110B              SHLR.B  R3L
   \   0696  110B              SHLR.B  R3L
   \   0698  EB03              AND.B   #3,R3L
   \   069A  AB03              CMP.B   #3,R3L
   \   069C  4704              BEQ     $+6
   \   069E  5A000868          JMP     @?0128:16
   \   06A2            ?0113:
    619                      case 0x03 :                            /* pressure */
    620                        cal_data[curr_ad_ch] = (short)((float) cal_data[curr_ad_ch]* cal_gain) ;   /* adjust for resistor errors */
   \   06A2  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   06A6  7779              BLD     #7,R1L
   \   06A8  1E11              SUBX.B  R1H,R1H
   \   06AA  0911              ADD.W   R1,R1
   \   06AC  6F11023E          MOV.W   @(cal_data,R1),R1
   \   06B0  7371              BTST    #7,R1H
   \   06B2  4706              BEQ     $+8
   \   06B4  7900FFFF          MOV.W   #-1,R0
   \   06B8  4002              BRA     $+4
   \   06BA  1900              SUB.W   R0,R0
   \   06BC  5E000000          JSR     @?SL_TO_FLT_L04
   \   06C0  6B030304          MOV.W   @cal_gain+2:16,R3
   \   06C4  6B020302          MOV.W   @cal_gain:16,R2
   \   06C8  5E000000          JSR     @?F_MUL_L04
   \   06CC  5E000000          JSR     @?FLT_TO_SL_L04
   \   06D0  6A0B030B          MOV.B   @curr_ad_ch:16,R3L
   \   06D4  777B              BLD     #7,R3L
   \   06D6  1E33              SUBX.B  R3H,R3H
   \   06D8  0933              ADD.W   R3,R3
   \   06DA  6FB1023E          MOV.W   R1,@(cal_data,R3)
    621                        if ((cal_data[curr_ad_ch] > MAX_PRE_CAL) ||
    622                            (cal_data[curr_ad_ch] < MIN_PRE_CAL)) {
   \   06DE  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   06E2  7779              BLD     #7,R1L
   \   06E4  1E11              SUBX.B  R1H,R1H
   \   06E6  0911              ADD.W   R1,R1
   \   06E8  6F11023E          MOV.W   @(cal_data,R1),R1
   \   06EC  A95C              CMP.B   #92,R1L
   \   06EE  B144              SUBX.B  #68,R1H
   \   06F0  4E14              BGT     ?0114
   \   06F2  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   06F6  7779              BLD     #7,R1L
   \   06F8  1E11              SUBX.B  R1H,R1H
   \   06FA  0911              ADD.W   R1,R1
   \   06FC  6F11023E          MOV.W   @(cal_data,R1),R1
   \   0700  A9D4              CMP.B   #212,R1L
   \   0702  B130              SUBX.B  #48,R1H
   \   0704  4C14              BGE     ?0115
   \   0706            ?0116:
   \   0706            ?0117:
   \   0706            ?0114:
    623                          ch_stat[curr_ad_ch] |= 0x02 ;           /* Calibration fail */
   \   0706  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   070A  7779              BLD     #7,R1L
   \   070C  1E11              SUBX.B  R1H,R1H
   \   070E  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   0712  CB02              OR.B    #2,R3L
   \   0714  6E9B0315          MOV.B   R3L,@(ch_stat,R1)
    624                        } else {
   \   0718  4012              BRA     ?0118
   \   071A            ?0115:
    625                          ch_stat[curr_ad_ch] &= ~0x02 ;  /* Calibration OK */
   \   071A  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   071E  7779              BLD     #7,R1L
   \   0720  1E11              SUBX.B  R1H,R1H
   \   0722  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   0726  EBFD              AND.B   #253,R3L
   \   0728  6E9B0315          MOV.B   R3L,@(ch_stat,R1)
   \   072C            ?0118:
    626                        }
    627                        if ((cal_data[curr_ad_ch] > FMAX_PRE_CAL)||
    628                            (cal_data[curr_ad_ch] < FMIN_PRE_CAL)) {
   \   072C  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0730  7779              BLD     #7,R1L
   \   0732  1E11              SUBX.B  R1H,R1H
   \   0734  0911              ADD.W   R1,R1
   \   0736  6F11023E          MOV.W   @(cal_data,R1),R1
   \   073A  A9E4              CMP.B   #228,R1L
   \   073C  B157              SUBX.B  #87,R1H
   \   073E  4E14              BGT     ?0119
   \   0740  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0744  7779              BLD     #7,R1L
   \   0746  1E11              SUBX.B  R1H,R1H
   \   0748  0911              ADD.W   R1,R1
   \   074A  6F11023E          MOV.W   @(cal_data,R1),R1
   \   074E  A94C              CMP.B   #76,R1L
   \   0750  B11D              SUBX.B  #29,R1H
   \   0752  4C6A              BGE     ?0120
   \   0754            ?0121:
   \   0754            ?0122:
   \   0754            ?0119:
    629                          ch_stat[curr_ad_ch] |= 0x01 ;           /* Reading fail */
   \   0754  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0758  7779              BLD     #7,R1L
   \   075A  1E11              SUBX.B  R1H,R1H
   \   075C  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   0760  CB01              OR.B    #1,R3L
   \   0762  6E9B0315          MOV.B   R3L,@(ch_stat,R1)
    630                          eep_type[curr_ad_ch >> 1] = 0 ;         /* clear read status */
   \   0766  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   076A  1189              SHAR.B  R1L
   \   076C  7779              BLD     #7,R1L
   \   076E  1E11              SUBX.B  R1H,R1H
   \   0770  FB00              MOV.B   #0,R3L
   \   0772  6E9B0323          MOV.B   R3L,@(eep_type,R1)
    631                          mes_data[curr_ad_ch] = 0.0 ;       /* ASt mark ?? */
   \   0776  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   077A  7779              BLD     #7,R1L
   \   077C  1E11              SUBX.B  R1H,R1H
   \   077E  0911              ADD.W   R1,R1
   \   0780  0911              ADD.W   R1,R1
   \   0782  1922              SUB.W   R2,R2
   \   0784  1900              SUB.W   R0,R0
   \   0786  6F920278          MOV.W   R2,@(mes_data+2,R1)
   \   078A  6F900276          MOV.W   R0,@(mes_data,R1)
    632                          raw_data[curr_ad_ch] = curr_sens_data ; /* sen raw raw */
   \   078E  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0792  7779              BLD     #7,R1L
   \   0794  1E11              SUBX.B  R1H,R1H
   \   0796  0911              ADD.W   R1,R1
   \   0798  6B03023C          MOV.W   @curr_sens_data:16,R3
   \   079C  6F93025A          MOV.W   R3,@(raw_data,R1)
    633                          if (ad_mode & 0x80) {                           /* test */
   \   07A0  6A09030D          MOV.B   @ad_mode:16,R1L
   \   07A4  E980              AND.B   #128,R1L
   \   07A6  4712              BEQ     ?0124
   \   07A8            ?0123:
    634                            ch_stat[curr_ad_ch] &= ~0x60 ;        /* no sensor */
   \   07A8  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   07AC  7779              BLD     #7,R1L
   \   07AE  1E11              SUBX.B  R1H,R1H
   \   07B0  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   07B4  EB9F              AND.B   #159,R3L
   \   07B6  6E9B0315          MOV.B   R3L,@(ch_stat,R1)
   \   07BA            ?0124:
    635                          }
    636                        } else {
   \   07BA  5A000864          JMP     @?0125:16
   \   07BE            ?0120:
    637                          if (ad_mode & 0x80) {                           /* test */
   \   07BE  6A09030D          MOV.B   @ad_mode:16,R1L
   \   07C2  E980              AND.B   #128,R1L
   \   07C4  4712              BEQ     ?0127
   \   07C6            ?0126:
    638                            ch_stat[curr_ad_ch] |= 0x6c ; /* pr. sensor  OK*/
   \   07C6  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   07CA  7779              BLD     #7,R1L
   \   07CC  1E11              SUBX.B  R1H,R1H
   \   07CE  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   07D2  CB6C              OR.B    #108,R3L
   \   07D4  6E9B0315          MOV.B   R3L,@(ch_stat,R1)
   \   07D8            ?0127:
    639                          }
    640                          ch_stat[curr_ad_ch] &= ~0x01 ;  /* Reading OK */
   \   07D8  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   07DC  7779              BLD     #7,R1L
   \   07DE  1E11              SUBX.B  R1H,R1H
   \   07E0  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   07E4  EBFE              AND.B   #254,R3L
   \   07E6  6E9B0315          MOV.B   R3L,@(ch_stat,R1)
    641                          curr_sens_data -= cal_zero ;
    642                          raw_data[curr_ad_ch] = ( short)((float)curr_sens_data * 20000.0
    643                              / (float)cal_data[curr_ad_ch]) ;
   \   07EA  6B010306          MOV.W   @cal_zero:16,R1
   \   07EE  6B03023C          MOV.W   @curr_sens_data:16,R3
   \   07F2  1913              SUB.W   R1,R3
   \   07F4  6B83023C          MOV.W   R3,@curr_sens_data:16
   \   07F8  0D31              MOV.W   R3,R1
   \   07FA  7371              BTST    #7,R1H
   \   07FC  4706              BEQ     $+8
   \   07FE  7900FFFF          MOV.W   #-1,R0
   \   0802  4002              BRA     $+4
   \   0804  1900              SUB.W   R0,R0
   \   0806  5E000000          JSR     @?SL_TO_FLT_L04
   \   080A  79034000          MOV.W   #16384,R3
   \   080E  7902469C          MOV.W   #18076,R2
   \   0812  5E000000          JSR     @?F_MUL_L04
   \   0816  6A0B030B          MOV.B   @curr_ad_ch:16,R3L
   \   081A  777B              BLD     #7,R3L
   \   081C  1E33              SUBX.B  R3H,R3H
   \   081E  0933              ADD.W   R3,R3
   \   0820  6DF1              MOV.W   R1,@-SP
   \   0822  6F31023E          MOV.W   @(cal_data,R3),R1
   \   0826  6DF0              MOV.W   R0,@-SP
   \   0828  7371              BTST    #7,R1H
   \   082A  4706              BEQ     $+8
   \   082C  7900FFFF          MOV.W   #-1,R0
   \   0830  4002              BRA     $+4
   \   0832  1900              SUB.W   R0,R0
   \   0834  5E000000          JSR     @?SL_TO_FLT_L04
   \   0838  6F730002          MOV.W   @(2,SP),R3
   \   083C  6972              MOV.W   @SP,R2
   \   083E  6FF20002          MOV.W   R2,@(2,SP)
   \   0842  0B87              ADDS.W  #2,SP
   \   0844  6D72              MOV.W   @SP+,R2
   \   0846  5E000000          JSR     @?F_DIV_SWAP_L04
   \   084A  5E000000          JSR     @?FLT_TO_SL_L04
   \   084E  6A0B030B          MOV.B   @curr_ad_ch:16,R3L
   \   0852  777B              BLD     #7,R3L
   \   0854  1E33              SUBX.B  R3H,R3H
   \   0856  0933              ADD.W   R3,R3
   \   0858  6FB1025A          MOV.W   R1,@(raw_data,R3)
    644                          CalcPress(curr_ad_ch) ;                         /* calculate pressure */
   \   085C  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0860  5E000B8E          JSR     @CalcPress:16
   \   0864            ?0125:
    645                        }
    646                        break;
   \   0864  5A0009EC          JMP     @?0112:16
   \   0868            ?0128:
   \   0868  AB02              CMP.B   #2,R3L
   \   086A  4604              BNE     ?0129
    647                      case 0x02 :                                                                 /* "other" */
    648                        break;
   \   086C  5A0009EC          JMP     @?0112:16
   \   0870            ?0129:
   \   0870  AB01              CMP.B   #1,R3L
   \   0872  4704              BEQ     $+6
   \   0874  5A0009EC          JMP     @?0144:16
    649                      case 0x01 :                                                                 /* temp */
    650                        if ((cal_data[curr_ad_ch] > MAX_TMP_CAL ) ||
    651                            (cal_data[curr_ad_ch] < MIN_TMP_CAL )) {
   \   0878  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   087C  7779              BLD     #7,R1L
   \   087E  1E11              SUBX.B  R1H,R1H
   \   0880  0911              ADD.W   R1,R1
   \   0882  6F11023E          MOV.W   @(cal_data,R1),R1
   \   0886  A99C              CMP.B   #156,R1L
   \   0888  B163              SUBX.B  #99,R1H
   \   088A  4E14              BGT     ?0130
   \   088C  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0890  7779              BLD     #7,R1L
   \   0892  1E11              SUBX.B  R1H,R1H
   \   0894  0911              ADD.W   R1,R1
   \   0896  6F11023E          MOV.W   @(cal_data,R1),R1
   \   089A  A910              CMP.B   #16,R1L
   \   089C  B127              SUBX.B  #39,R1H
   \   089E  4C14              BGE     ?0131
   \   08A0            ?0132:
   \   08A0            ?0133:
   \   08A0            ?0130:
    652                          ch_stat[curr_ad_ch] |= 0x02 ;           /* Calibration fail */
   \   08A0  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   08A4  7779              BLD     #7,R1L
   \   08A6  1E11              SUBX.B  R1H,R1H
   \   08A8  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   08AC  CB02              OR.B    #2,R3L
   \   08AE  6E9B0315          MOV.B   R3L,@(ch_stat,R1)
    653                        } else {
   \   08B2  4012              BRA     ?0134
   \   08B4            ?0131:
    654                          ch_stat[curr_ad_ch] &= ~0x02 ;          /* Calibration OK */
   \   08B4  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   08B8  7779              BLD     #7,R1L
   \   08BA  1E11              SUBX.B  R1H,R1H
   \   08BC  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   08C0  EBFD              AND.B   #253,R3L
   \   08C2  6E9B0315          MOV.B   R3L,@(ch_stat,R1)
   \   08C6            ?0134:
    655                        }
    656                        if ((cal_data[curr_ad_ch] > FMAX_TMP_CAL) ||
    657                            (cal_data[curr_ad_ch] < FMIN_TMP_CAL)) {
   \   08C6  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   08CA  7779              BLD     #7,R1L
   \   08CC  1E11              SUBX.B  R1H,R1H
   \   08CE  0911              ADD.W   R1,R1
   \   08D0  6F11023E          MOV.W   @(cal_data,R1),R1
   \   08D4  A96C              CMP.B   #108,R1L
   \   08D6  B16B              SUBX.B  #107,R1H
   \   08D8  4E14              BGT     ?0135
   \   08DA  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   08DE  7779              BLD     #7,R1L
   \   08E0  1E11              SUBX.B  R1H,R1H
   \   08E2  0911              ADD.W   R1,R1
   \   08E4  6F11023E          MOV.W   @(cal_data,R1),R1
   \   08E8  A988              CMP.B   #136,R1L
   \   08EA  B113              SUBX.B  #19,R1H
   \   08EC  4C5A              BGE     ?0136
   \   08EE            ?0137:
   \   08EE            ?0138:
   \   08EE            ?0135:
    658                          ch_stat[curr_ad_ch] |= 0x01 ;           /* Reading fail */
   \   08EE  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   08F2  7779              BLD     #7,R1L
   \   08F4  1E11              SUBX.B  R1H,R1H
   \   08F6  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   08FA  CB01              OR.B    #1,R3L
   \   08FC  6E9B0315          MOV.B   R3L,@(ch_stat,R1)
    659                          mes_data[curr_ad_ch] = 0.0 ;         /* ASt mark ?? */
   \   0900  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0904  7779              BLD     #7,R1L
   \   0906  1E11              SUBX.B  R1H,R1H
   \   0908  0911              ADD.W   R1,R1
   \   090A  0911              ADD.W   R1,R1
   \   090C  1922              SUB.W   R2,R2
   \   090E  1900              SUB.W   R0,R0
   \   0910  6F920278          MOV.W   R2,@(mes_data+2,R1)
   \   0914  6F900276          MOV.W   R0,@(mes_data,R1)
    660                          raw_data[curr_ad_ch] = curr_sens_data ; /* sen raw raw */
   \   0918  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   091C  7779              BLD     #7,R1L
   \   091E  1E11              SUBX.B  R1H,R1H
   \   0920  0911              ADD.W   R1,R1
   \   0922  6B03023C          MOV.W   @curr_sens_data:16,R3
   \   0926  6F93025A          MOV.W   R3,@(raw_data,R1)
    661                          if (ad_mode & 0x80) {                           /* test */
   \   092A  6A09030D          MOV.B   @ad_mode:16,R1L
   \   092E  E980              AND.B   #128,R1L
   \   0930  4712              BEQ     ?0140
   \   0932            ?0139:
    662                            ch_stat[curr_ad_ch] &= ~0x60 ;        /* no sensor */
   \   0932  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0936  7779              BLD     #7,R1L
   \   0938  1E11              SUBX.B  R1H,R1H
   \   093A  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   093E  EB9F              AND.B   #159,R3L
   \   0940  6E9B0315          MOV.B   R3L,@(ch_stat,R1)
   \   0944            ?0140:
    663                          }
    664                        } else {
   \   0944  5A0009EA          JMP     @?0141:16
   \   0948            ?0136:
    665                          if (ad_mode & 0x80) {
   \   0948  6A09030D          MOV.B   @ad_mode:16,R1L
   \   094C  E980              AND.B   #128,R1L
   \   094E  4712              BEQ     ?0143
   \   0950            ?0142:
    666                            ch_stat[curr_ad_ch] |= 0x24 ; /* tmp sensor  OK*/
   \   0950  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0954  7779              BLD     #7,R1L
   \   0956  1E11              SUBX.B  R1H,R1H
   \   0958  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   095C  CB24              OR.B    #36,R3L
   \   095E  6E9B0315          MOV.B   R3L,@(ch_stat,R1)
   \   0962            ?0143:
    667                          }
    668                          ch_stat[curr_ad_ch] &= ~0x01 ;  /* Reading OK */
   \   0962  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0966  7779              BLD     #7,R1L
   \   0968  1E11              SUBX.B  R1H,R1H
   \   096A  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   096E  EBFE              AND.B   #254,R3L
   \   0970  6E9B0315          MOV.B   R3L,@(ch_stat,R1)
    669                          raw_data[curr_ad_ch] = (short)(((float)curr_sens_data * 1000.0
    670                                / (float)cal_data[curr_ad_ch] ) * 10.0);
   \   0974  6B01023C          MOV.W   @curr_sens_data:16,R1
   \   0978  7371              BTST    #7,R1H
   \   097A  4706              BEQ     $+8
   \   097C  7900FFFF          MOV.W   #-1,R0
   \   0980  4002              BRA     $+4
   \   0982  1900              SUB.W   R0,R0
   \   0984  5E000000          JSR     @?SL_TO_FLT_L04
   \   0988  1933              SUB.W   R3,R3
   \   098A  7902447A          MOV.W   #17530,R2
   \   098E  5E000000          JSR     @?F_MUL_L04
   \   0992  6A0B030B          MOV.B   @curr_ad_ch:16,R3L
   \   0996  777B              BLD     #7,R3L
   \   0998  1E33              SUBX.B  R3H,R3H
   \   099A  0933              ADD.W   R3,R3
   \   099C  6DF1              MOV.W   R1,@-SP
   \   099E  6F31023E          MOV.W   @(cal_data,R3),R1
   \   09A2  6DF0              MOV.W   R0,@-SP
   \   09A4  7371              BTST    #7,R1H
   \   09A6  4706              BEQ     $+8
   \   09A8  7900FFFF          MOV.W   #-1,R0
   \   09AC  4002              BRA     $+4
   \   09AE  1900              SUB.W   R0,R0
   \   09B0  5E000000          JSR     @?SL_TO_FLT_L04
   \   09B4  6F730002          MOV.W   @(2,SP),R3
   \   09B8  6972              MOV.W   @SP,R2
   \   09BA  6FF20002          MOV.W   R2,@(2,SP)
   \   09BE  0B87              ADDS.W  #2,SP
   \   09C0  6D72              MOV.W   @SP+,R2
   \   09C2  5E000000          JSR     @?F_DIV_SWAP_L04
   \   09C6  1933              SUB.W   R3,R3
   \   09C8  79024120          MOV.W   #16672,R2
   \   09CC  5E000000          JSR     @?F_MUL_L04
   \   09D0  5E000000          JSR     @?FLT_TO_SL_L04
   \   09D4  6A0B030B          MOV.B   @curr_ad_ch:16,R3L
   \   09D8  777B              BLD     #7,R3L
   \   09DA  1E33              SUBX.B  R3H,R3H
   \   09DC  0933              ADD.W   R3,R3
   \   09DE  6FB1025A          MOV.W   R1,@(raw_data,R3)
    671                          CalcTemp(curr_ad_ch) ;                          /* calculate temperature */
   \   09E2  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   09E6  5E001148          JSR     @CalcTemp:16
   \   09EA            ?0141:
    672                        }
    673                        break;
   \   09EA  4000              BRA     ?0112
   \   09EC            ?0144:
    674                      default :
    675                        break ;
   \   09EC            ?0112:
    676                    }
    677                  } else {
   \   09EC  400A              BRA     ?0145
   \   09EE            ?0111:
    678                    curr_ad_ch-- ;                                 // remeasure the chanell if skipped due to UART TX
   \   09EE  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   09F2  89FF              ADD.B   #-1,R1L
   \   09F4  6A89030B          MOV.B   R1L,@curr_ad_ch:16
   \   09F8            ?0145:
    679                  }
    680                } else {                                                                                          /* normal conv enter point */
   \   09F8  5A000AF0          JMP     @?0146:16
   \   09FC            ?0109:
    681                  curr_sens_data = (short)(ad_data - 32767) ;            /* use ad data */
   \   09FC  0D61              MOV.W   R6,R1
   \   09FE  8901              ADD.B   #1,R1L
   \   0A00  9180              ADDX.B  #128,R1H
   \   0A02  6B81023C          MOV.W   R1,@curr_sens_data:16
    682          
    683                  switch ((ch_stat[curr_ad_ch]>> 2) & 0x03) {
   \   0A06  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0A0A  7779              BLD     #7,R1L
   \   0A0C  1E11              SUBX.B  R1H,R1H
   \   0A0E  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   0A12  110B              SHLR.B  R3L
   \   0A14  110B              SHLR.B  R3L
   \   0A16  EB03              AND.B   #3,R3L
   \   0A18  AB03              CMP.B   #3,R3L
   \   0A1A  4628              BNE     ?0149
   \   0A1C            ?0148:
    684                    case 0x03 :                             /* pressure */
    685                      SetMuxChannel(PRE_CAL_CH) ;                 /* cal channel */
   \   0A1C  F90F              MOV.B   #15,R1L
   \   0A1E  5E0002E6          JSR     @SetMuxChannel:16
    686                      ad_mode |= 0x40 ;                                                   /* next cal */
   \   0A22  7901030D          MOV.W   #ad_mode,R1
   \   0A26  7D107060          BSET    #6,@R1
    687                      ad_settling = AD_SET_TIME ;                 /* wait 67 ms */
   \   0A2A  79010043          MOV.W   #67,R1
   \   0A2E  6B810312          MOV.W   R1,@ad_settling:16
    688                      ad_state = WAIT_FOR_INTERRUPT ;             /* wait for cal int */
   \   0A32  F902              MOV.B   #2,R1L
   \   0A34  6A89030C          MOV.B   R1L,@ad_state:16
    689                      UnpackSensData(curr_ad_ch) ;                        /* Unpack data */
   \   0A38  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0A3C  5E00145A          JSR     @UnpackSensData:16
    690                      break;
   \   0A40  5A000AF0          JMP     @?0147:16
   \   0A44            ?0149:
   \   0A44  AB02              CMP.B   #2,R3L
   \   0A46  4704              BEQ     $+6
   \   0A48  5A000AC8          JMP     @?0152:16
    691                    case 0x02 :                              /* other */
    692                      SetSupplyCurrent(1) ;                                       /* no cal on this */
   \   0A4C  F901              MOV.B   #1,R1L
   \   0A4E  5E000318          JSR     @SetSupplyCurrent:16
    693                      SetMuxChannel(MUXCHOFF) ;
   \   0A52  F910              MOV.B   #16,R1L
   \   0A54  5E0002E6          JSR     @SetMuxChannel:16
    694                      SetSupplyChannel(SUPPCHOFF) ;
   \   0A58  F910              MOV.B   #16,R1L
   \   0A5A  5E00029C          JSR     @SetSupplyChannel:16
    695                      SetCalResistance(OFF);
   \   0A5E  F900              MOV.B   #0,R1L
   \   0A60  5E00032A          JSR     @SetCalResistance:16
    696                      ad_state = IDLE ;
   \   0A64  F907              MOV.B   #7,R1L
   \   0A66  6A89030C          MOV.B   R1L,@ad_state:16
    697                      raw_data[curr_ad_ch] = curr_sens_data ;
   \   0A6A  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0A6E  7779              BLD     #7,R1L
   \   0A70  1E11              SUBX.B  R1H,R1H
   \   0A72  0911              ADD.W   R1,R1
   \   0A74  6B03023C          MOV.W   @curr_sens_data:16,R3
   \   0A78  6F93025A          MOV.W   R3,@(raw_data,R1)
    698                      cal_data[curr_ad_ch] = 0 ;             /* do no use caldata  */
   \   0A7C  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0A80  7779              BLD     #7,R1L
   \   0A82  1E11              SUBX.B  R1H,R1H
   \   0A84  0911              ADD.W   R1,R1
   \   0A86  1933              SUB.W   R3,R3
   \   0A88  6F93023E          MOV.W   R3,@(cal_data,R1)
    699                      ch_stat[curr_ad_ch] &= ~0x03 ;              /* Cal. and readings set to OK */
   \   0A8C  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0A90  7779              BLD     #7,R1L
   \   0A92  1E11              SUBX.B  R1H,R1H
   \   0A94  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   0A98  EBFC              AND.B   #252,R3L
   \   0A9A  6E9B0315          MOV.B   R3L,@(ch_stat,R1)
    700                      ad_timeout_cnt = 0 ;                                                /* timeout off */
   \   0A9E  1911              SUB.W   R1,R1
   \   0AA0  6B810238          MOV.W   R1,@ad_timeout_cnt:16
    701                      if (ad_mode & 0x80) {                                       /* test */
   \   0AA4  6A09030D          MOV.B   @ad_mode:16,R1L
   \   0AA8  E980              AND.B   #128,R1L
   \   0AAA  4712              BEQ     ?0151
   \   0AAC            ?0150:
    702                        ch_stat[curr_ad_ch] |= 0x48 ;             /* other sensor  OK*/
   \   0AAC  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0AB0  7779              BLD     #7,R1L
   \   0AB2  1E11              SUBX.B  R1H,R1H
   \   0AB4  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   0AB8  CB48              OR.B    #72,R3L
   \   0ABA  6E9B0315          MOV.B   R3L,@(ch_stat,R1)
   \   0ABE            ?0151:
    703                      }
    704                      CalcOther(curr_ad_ch) ;                             /* calculate "other" */
   \   0ABE  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0AC2  5E001312          JSR     @CalcOther:16
    705                      break;
   \   0AC6  4028              BRA     ?0147
   \   0AC8            ?0152:
   \   0AC8  AB01              CMP.B   #1,R3L
   \   0ACA  461E              BNE     ?0153
    706                    case 0x01 :                             /* temp */
    707                      SetMuxChannel(TMP_CAL_CH) ;                 /* cal channel */
   \   0ACC  F90E              MOV.B   #14,R1L
   \   0ACE  5E0002E6          JSR     @SetMuxChannel:16
    708                      ad_mode |= 0x40 ;                                                   /* next cal */
   \   0AD2  7901030D          MOV.W   #ad_mode,R1
   \   0AD6  7D107060          BSET    #6,@R1
    709                      ad_settling = AD_SET_TIME ;                 /* wait 67 ms */
   \   0ADA  79010043          MOV.W   #67,R1
   \   0ADE  6B810312          MOV.W   R1,@ad_settling:16
    710                      ad_state = WAIT_FOR_INTERRUPT ;             /* wait for cal int */
   \   0AE2  F902              MOV.B   #2,R1L
   \   0AE4  6A89030C          MOV.B   R1L,@ad_state:16
    711                      break;
   \   0AE8  4006              BRA     ?0147
   \   0AEA            ?0153:
    712                    default :
    713                      ad_state = IDLE ;                                                   /* Start new point */
   \   0AEA  F907              MOV.B   #7,R1L
   \   0AEC  6A89030C          MOV.B   R1L,@ad_state:16
    714                      break ;
   \   0AF0            ?0147:
   \   0AF0            ?0146:
    715                  }
    716                }
    717                break ;
   \   0AF0  5A000B8A          JMP     @?0090:16
   \   0AF4            ?0154:
   \   0AF4  A904              CMP.B   #4,R1L
   \   0AF6  4656              BNE     ?0160
    718              case        START_CALIBRATION :
    719                Led(2, ON) ;                                                                              /* Led 2 on */
   \   0AF8  79010001          MOV.W   #1,R1
   \   0AFC  6DF1              MOV.W   R1,@-SP
   \   0AFE  79010002          MOV.W   #2,R1
   \   0B02  5E0001E2          JSR     @Led:16
   \   0B06  0B87              ADDS.W  #2,SP
    720                ad_timeout_cnt = AD_TIMEOUT ;                                     /* timeout ad cnv */
   \   0B08  790107D0          MOV.W   #2000,R1
   \   0B0C  6B810238          MOV.W   R1,@ad_timeout_cnt:16
    721                ad_settling = 20 ;                                                                /* wait >mclock/128  */
   \   0B10  79010014          MOV.W   #20,R1
   \   0B14  6B810312          MOV.W   R1,@ad_settling:16
    722                if (tx_complete == TRUE) {
   \   0B18  6A090330          MOV.B   @tx_complete:16,R1L
   \   0B1C  A901              CMP.B   #1,R1L
   \   0B1E  462C              BNE     ?0156
   \   0B20            ?0155:
    723                  if (ad_mode & 0x02) {                                           /* pressure readings */
   \   0B20  6A09030D          MOV.B   @ad_mode:16,R1L
   \   0B24  E902              AND.B   #2,R1L
   \   0B26  4708              BEQ     ?0158
   \   0B28            ?0157:
    724                    ad_gain = 3;
   \   0B28  F903              MOV.B   #3,R1L
   \   0B2A  6A890314          MOV.B   R1L,@ad_gain:16
    725                  } else {
   \   0B2E  4006              BRA     ?0159
   \   0B30            ?0158:
    726                    ad_gain = 0;
   \   0B30  F900              MOV.B   #0,R1L
   \   0B32  6A890314          MOV.B   R1L,@ad_gain:16
   \   0B36            ?0159:
    727                  }
    728                  ad_state = WAIT_FOR_CAL_INT ;                           /* next state */
   \   0B36  F905              MOV.B   #5,R1L
   \   0B38  6A89030C          MOV.B   R1L,@ad_state:16
    729                  WriteAdByte(ad_gain | 0x10) ;                           /* Next write setup reg */
   \   0B3C  6A090314          MOV.B   @ad_gain:16,R1L
   \   0B40  C910              OR.B    #16,R1L
   \   0B42  5E001F26          JSR     @WriteAdByte:16
    730                  WriteAdByte(0x6a) ;                                             /*  Ad setup data, bipolar */
   \   0B46  F96A              MOV.B   #106,R1L
   \   0B48  5E001F26          JSR     @WriteAdByte:16
   \   0B4C            ?0156:
    731                }
    732                break ;
   \   0B4C  403C              BRA     ?0090
   \   0B4E            ?0160:
   \   0B4E  A905              CMP.B   #5,R1L
   \   0B50  4602              BNE     ?0161
    733              case        WAIT_FOR_CAL_INT :
    734                break ;
   \   0B52  4036              BRA     ?0090
   \   0B54            ?0161:
   \   0B54  A906              CMP.B   #6,R1L
   \   0B56  4626              BNE     ?0162
    735              case        CAL_COMPLETE :
    736                ad_timeout_cnt = 0 ;                                                              /* timeout off */
   \   0B58  1911              SUB.W   R1,R1
   \   0B5A  6B810238          MOV.W   R1,@ad_timeout_cnt:16
    737                curr_ad_ch -= 1 ;                                                                 /* To start with ch 0 !! */
   \   0B5E  6A09030B          MOV.B   @curr_ad_ch:16,R1L
   \   0B62  89FF              ADD.B   #-1,R1L
   \   0B64  6A89030B          MOV.B   R1L,@curr_ad_ch:16
    738                ad_state = IDLE ;
   \   0B68  F907              MOV.B   #7,R1L
   \   0B6A  6A89030C          MOV.B   R1L,@ad_state:16
    739                Led(2, OFF) ;                                                                             /* Led 2 off */
   \   0B6E  1911              SUB.W   R1,R1
   \   0B70  6DF1              MOV.W   R1,@-SP
   \   0B72  79010002          MOV.W   #2,R1
   \   0B76  5E0001E2          JSR     @Led:16
   \   0B7A  0B87              ADDS.W  #2,SP
    740                break ;
   \   0B7C  400C              BRA     ?0090
   \   0B7E            ?0162:
   \   0B7E  A907              CMP.B   #7,R1L
   \   0B80  4602              BNE     ?0163
    741              case        IDLE :
    742                break ;
   \   0B82  4006              BRA     ?0090
   \   0B84            ?0163:
    743              default :
    744                ad_state = IDLE ;
   \   0B84  F907              MOV.B   #7,R1L
   \   0B86  6A89030C          MOV.B   R1L,@ad_state:16
    745                break ;
   \   0B8A            ?0090:
    746            }
    747          }
   \   0B8A  6D76              POP     R6
   \   0B8C  5470              RTS
    748          
    749          /*************************************************************************
    750           *
    751           *  Calculate and filter pressure
    752           *
    753           *************************************************************************/
    754          void CalcPress(signed char ch)
    755          {
   \   0B8E            CalcPress:
   \   0B8E  6DF4              PUSH    R4
   \   0B90  6DF6              PUSH    R6
   \   0B92  1B87              SUBS.W  #2,SP
   \   0B94  1B87              SUBS.W  #2,SP
   \   0B96  0C9E              MOV.B   R1L,R6L
    756          
    757            float temp_data ;
    758          
    759            Led(2, ON)    ;                                                               /* Led 2 on */
   \   0B98  79010001          MOV.W   #1,R1
   \   0B9C  6DF1              MOV.W   R1,@-SP
   \   0B9E  79010002          MOV.W   #2,R1
   \   0BA2  5E0001E2          JSR     @Led:16
   \   0BA6  0B87              ADDS.W  #2,SP
    760          
    761            if ((sens_data[0]>0) && (raw_data[ch] < sens_data[0])) {
   \   0BA8  6B0100EA          MOV.W   @sens_data:16,R1
   \   0BAC  0D11              MOV.W   R1,R1
   \   0BAE  4F64              BLE     ?0165
   \   0BB0  0CE9              MOV.B   R6L,R1L
   \   0BB2  7779              BLD     #7,R1L
   \   0BB4  1E11              SUBX.B  R1H,R1H
   \   0BB6  0911              ADD.W   R1,R1
   \   0BB8  6F11025A          MOV.W   @(raw_data,R1),R1
   \   0BBC  6B0300EA          MOV.W   @sens_data:16,R3
   \   0BC0  1D31              CMP.W   R3,R1
   \   0BC2  4C50              BGE     ?0165
   \   0BC4            ?0167:
   \   0BC4            ?0166:
   \   0BC4            ?0164:
    762              temp_data = CalcPercent((sens_data[1]-sens_data[0]), sens_data[0],
    763                  raw_data[ch], 0.0) ;
   \   0BC4  1911              SUB.W   R1,R1
   \   0BC6  1900              SUB.W   R0,R0
   \   0BC8  6DF1              MOV.W   R1,@-SP
   \   0BCA  6DF0              MOV.W   R0,@-SP
   \   0BCC  0CE9              MOV.B   R6L,R1L
   \   0BCE  7779              BLD     #7,R1L
   \   0BD0  1E11              SUBX.B  R1H,R1H
   \   0BD2  0911              ADD.W   R1,R1
   \   0BD4  6F11025A          MOV.W   @(raw_data,R1),R1
   \   0BD8  6DF1              MOV.W   R1,@-SP
   \   0BDA  6B0100EA          MOV.W   @sens_data:16,R1
   \   0BDE  6DF1              MOV.W   R1,@-SP
   \   0BE0  6B0100EC          MOV.W   @sens_data+2:16,R1
   \   0BE4  6B0300EA          MOV.W   @sens_data:16,R3
   \   0BE8  1931              SUB.W   R3,R1
   \   0BEA  5E001026          JSR     @CalcPercent:16
   \   0BEE  79020008          MOV.W   #8,R2
   \   0BF2  0927              ADD.W   R2,SP
   \   0BF4  6FF10002          MOV.W   R1,@(2,SP)
   \   0BF8  69F0              MOV.W   R0,@SP
    764              temp_data *= 40.0 ;                         /* caluclate %, using 0-40% cal data*/
   \   0BFA  6970              MOV.W   @SP,R0
   \   0BFC  6F710002          MOV.W   @(2,SP),R1
   \   0C00  1933              SUB.W   R3,R3
   \   0C02  79024220          MOV.W   #16928,R2
   \   0C06  5E000000          JSR     @?F_MUL_L04
   \   0C0A  6FF10002          MOV.W   R1,@(2,SP)
   \   0C0E  69F0              MOV.W   R0,@SP
    765          
    766            } else if (raw_data[ch] <  sens_data[1]) {
   \   0C10  5A000DD8          JMP     @?0168:16
   \   0C14            ?0165:
   \   0C14  0CE9              MOV.B   R6L,R1L
   \   0C16  7779              BLD     #7,R1L
   \   0C18  1E11              SUBX.B  R1H,R1H
   \   0C1A  0911              ADD.W   R1,R1
   \   0C1C  6F11025A          MOV.W   @(raw_data,R1),R1
   \   0C20  6B0300EC          MOV.W   @sens_data+2:16,R3
   \   0C24  1D31              CMP.W   R3,R1
   \   0C26  4C64              BGE     ?0170
   \   0C28            ?0169:
    767              temp_data = CalcPercent((sens_data[1]-sens_data[0]), sens_data[0],
    768                  raw_data[ch], (float)sens_nl1) ;
   \   0C28  6A0900F2          MOV.B   @sens_nl1:16,R1L
   \   0C2C  7379              BTST    #7,R1L
   \   0C2E  4708              BEQ     $+10
   \   0C30  F1FF              MOV.B   #255,R1H
   \   0C32  7900FFFF          MOV.W   #-1,R0
   \   0C36  4004              BRA     $+6
   \   0C38  F100              MOV.B   #0,R1H
   \   0C3A  1900              SUB.W   R0,R0
   \   0C3C  5E000000          JSR     @?SL_TO_FLT_L04
   \   0C40  6DF1              MOV.W   R1,@-SP
   \   0C42  6DF0              MOV.W   R0,@-SP
   \   0C44  0CE9              MOV.B   R6L,R1L
   \   0C46  7779              BLD     #7,R1L
   \   0C48  1E11              SUBX.B  R1H,R1H
   \   0C4A  0911              ADD.W   R1,R1
   \   0C4C  6F11025A          MOV.W   @(raw_data,R1),R1
   \   0C50  6DF1              MOV.W   R1,@-SP
   \   0C52  6B0100EA          MOV.W   @sens_data:16,R1
   \   0C56  6DF1              MOV.W   R1,@-SP
   \   0C58  6B0100EC          MOV.W   @sens_data+2:16,R1
   \   0C5C  6B0300EA          MOV.W   @sens_data:16,R3
   \   0C60  1931              SUB.W   R3,R1
   \   0C62  5E001026          JSR     @CalcPercent:16
   \   0C66  79020008          MOV.W   #8,R2
   \   0C6A  0927              ADD.W   R2,SP
   \   0C6C  6FF10002          MOV.W   R1,@(2,SP)
   \   0C70  69F0              MOV.W   R0,@SP
    769              temp_data *= 40.0 ;                         /* caluclate % */
   \   0C72  6970              MOV.W   @SP,R0
   \   0C74  6F710002          MOV.W   @(2,SP),R1
   \   0C78  1933              SUB.W   R3,R3
   \   0C7A  79024220          MOV.W   #16928,R2
   \   0C7E  5E000000          JSR     @?F_MUL_L04
   \   0C82  6FF10002          MOV.W   R1,@(2,SP)
   \   0C86  69F0              MOV.W   R0,@SP
    770          
    771            } else if (raw_data[ch] < sens_data[2]) {
   \   0C88  5A000DD8          JMP     @?0171:16
   \   0C8C            ?0170:
   \   0C8C  0CE9              MOV.B   R6L,R1L
   \   0C8E  7779              BLD     #7,R1L
   \   0C90  1E11              SUBX.B  R1H,R1H
   \   0C92  0911              ADD.W   R1,R1
   \   0C94  6F11025A          MOV.W   @(raw_data,R1),R1
   \   0C98  6B0300EE          MOV.W   @sens_data+4:16,R3
   \   0C9C  1D31              CMP.W   R3,R1
   \   0C9E  4C6E              BGE     ?0173
   \   0CA0            ?0172:
    772              temp_data = CalcPercent((sens_data[2]-sens_data[1]), sens_data[1],
    773                  raw_data[ch], (float)(sens_nl2 / 3)) ;
    774              temp_data = temp_data*(60.0 - 40.0)+40.0 ;                          /* caluclate % */
   \   0CA0  6A0900F3          MOV.B   @sens_nl2:16,R1L
   \   0CA4  FB03              MOV.B   #3,R3L
   \   0CA6  5E000000          JSR     @?SC_DIV_L01
   \   0CAA  7379              BTST    #7,R1L
   \   0CAC  4708              BEQ     $+10
   \   0CAE  F1FF              MOV.B   #255,R1H
   \   0CB0  7900FFFF          MOV.W   #-1,R0
   \   0CB4  4004              BRA     $+6
   \   0CB6  F100              MOV.B   #0,R1H
   \   0CB8  1900              SUB.W   R0,R0
   \   0CBA  5E000000          JSR     @?SL_TO_FLT_L04
   \   0CBE  6DF1              MOV.W   R1,@-SP
   \   0CC0  6DF0              MOV.W   R0,@-SP
   \   0CC2  0CE9              MOV.B   R6L,R1L
   \   0CC4  7779              BLD     #7,R1L
   \   0CC6  1E11              SUBX.B  R1H,R1H
   \   0CC8  0911              ADD.W   R1,R1
   \   0CCA  6F11025A          MOV.W   @(raw_data,R1),R1
   \   0CCE  6DF1              MOV.W   R1,@-SP
   \   0CD0  6B0100EC          MOV.W   @sens_data+2:16,R1
   \   0CD4  6DF1              MOV.W   R1,@-SP
   \   0CD6  6B0100EE          MOV.W   @sens_data+4:16,R1
   \   0CDA  6B0300EC          MOV.W   @sens_data+2:16,R3
   \   0CDE  1931              SUB.W   R3,R1
   \   0CE0  5E001026          JSR     @CalcPercent:16
   \   0CE4  79020008          MOV.W   #8,R2
   \   0CE8  0927              ADD.W   R2,SP
   \   0CEA  6FF10002          MOV.W   R1,@(2,SP)
   \   0CEE  69F0              MOV.W   R0,@SP
   \   0CF0  1933              SUB.W   R3,R3
   \   0CF2  790241A0          MOV.W   #16800,R2
   \   0CF6  5E000000          JSR     @?F_MUL_L04
   \   0CFA  1933              SUB.W   R3,R3
   \   0CFC  79024220          MOV.W   #16928,R2
   \   0D00  5E000000          JSR     @?F_ADD_L04
   \   0D04  6FF10002          MOV.W   R1,@(2,SP)
   \   0D08  69F0              MOV.W   R0,@SP
    775          
    776            } else if (raw_data[ch] < sens_data[3]) {
   \   0D0A  5A000DD8          JMP     @?0174:16
   \   0D0E            ?0173:
   \   0D0E  0CE9              MOV.B   R6L,R1L
   \   0D10  7779              BLD     #7,R1L
   \   0D12  1E11              SUBX.B  R1H,R1H
   \   0D14  0911              ADD.W   R1,R1
   \   0D16  6F11025A          MOV.W   @(raw_data,R1),R1
   \   0D1A  6B0300F0          MOV.W   @sens_data+6:16,R3
   \   0D1E  1D31              CMP.W   R3,R1
   \   0D20  4C66              BGE     ?0176
   \   0D22            ?0175:
    777              temp_data = CalcPercent((sens_data[3]-sens_data[2]), sens_data[2],
    778                  raw_data[ch], (float)sens_nl2 ) ;
    779              temp_data = temp_data*(100.0 - 60.0)+60.0 ;                         /* caluclate % */
   \   0D22  6A0900F3          MOV.B   @sens_nl2:16,R1L
   \   0D26  7379              BTST    #7,R1L
   \   0D28  4708              BEQ     $+10
   \   0D2A  F1FF              MOV.B   #255,R1H
   \   0D2C  7900FFFF          MOV.W   #-1,R0
   \   0D30  4004              BRA     $+6
   \   0D32  F100              MOV.B   #0,R1H
   \   0D34  1900              SUB.W   R0,R0
   \   0D36  5E000000          JSR     @?SL_TO_FLT_L04
   \   0D3A  6DF1              MOV.W   R1,@-SP
   \   0D3C  6DF0              MOV.W   R0,@-SP
   \   0D3E  0CE9              MOV.B   R6L,R1L
   \   0D40  7779              BLD     #7,R1L
   \   0D42  1E11              SUBX.B  R1H,R1H
   \   0D44  0911              ADD.W   R1,R1
   \   0D46  6F11025A          MOV.W   @(raw_data,R1),R1
   \   0D4A  6DF1              MOV.W   R1,@-SP
   \   0D4C  6B0100EE          MOV.W   @sens_data+4:16,R1
   \   0D50  6DF1              MOV.W   R1,@-SP
   \   0D52  6B0100F0          MOV.W   @sens_data+6:16,R1
   \   0D56  6B0300EE          MOV.W   @sens_data+4:16,R3
   \   0D5A  1931              SUB.W   R3,R1
   \   0D5C  5E001026          JSR     @CalcPercent:16
   \   0D60  79020008          MOV.W   #8,R2
   \   0D64  0927              ADD.W   R2,SP
   \   0D66  6FF10002          MOV.W   R1,@(2,SP)
   \   0D6A  69F0              MOV.W   R0,@SP
   \   0D6C  1933              SUB.W   R3,R3
   \   0D6E  79024220          MOV.W   #16928,R2
   \   0D72  5E000000          JSR     @?F_MUL_L04
   \   0D76  1933              SUB.W   R3,R3
   \   0D78  79024270          MOV.W   #17008,R2
   \   0D7C  5E000000          JSR     @?F_ADD_L04
   \   0D80  6FF10002          MOV.W   R1,@(2,SP)
   \   0D84  69F0              MOV.W   R0,@SP
    780          
    781            } else {
   \   0D86  4050              BRA     ?0177
   \   0D88            ?0176:
    782              temp_data = CalcPercent((sens_data[3]-sens_data[2]), sens_data[2],
    783                  raw_data[ch], 0.0) ;
    784              temp_data = temp_data*(100.0 - 60.0)+60.0 ;                         /* caluclate % */
   \   0D88  1911              SUB.W   R1,R1
   \   0D8A  1900              SUB.W   R0,R0
   \   0D8C  6DF1              MOV.W   R1,@-SP
   \   0D8E  6DF0              MOV.W   R0,@-SP
   \   0D90  0CE9              MOV.B   R6L,R1L
   \   0D92  7779              BLD     #7,R1L
   \   0D94  1E11              SUBX.B  R1H,R1H
   \   0D96  0911              ADD.W   R1,R1
   \   0D98  6F11025A          MOV.W   @(raw_data,R1),R1
   \   0D9C  6DF1              MOV.W   R1,@-SP
   \   0D9E  6B0100EE          MOV.W   @sens_data+4:16,R1
   \   0DA2  6DF1              MOV.W   R1,@-SP
   \   0DA4  6B0100F0          MOV.W   @sens_data+6:16,R1
   \   0DA8  6B0300EE          MOV.W   @sens_data+4:16,R3
   \   0DAC  1931              SUB.W   R3,R1
   \   0DAE  5E001026          JSR     @CalcPercent:16
   \   0DB2  79020008          MOV.W   #8,R2
   \   0DB6  0927              ADD.W   R2,SP
   \   0DB8  6FF10002          MOV.W   R1,@(2,SP)
   \   0DBC  69F0              MOV.W   R0,@SP
   \   0DBE  1933              SUB.W   R3,R3
   \   0DC0  79024220          MOV.W   #16928,R2
   \   0DC4  5E000000          JSR     @?F_MUL_L04
   \   0DC8  1933              SUB.W   R3,R3
   \   0DCA  79024270          MOV.W   #17008,R2
   \   0DCE  5E000000          JSR     @?F_ADD_L04
   \   0DD2  6FF10002          MOV.W   R1,@(2,SP)
   \   0DD6  69F0              MOV.W   R0,@SP
   \   0DD8            ?0177:
   \   0DD8            ?0174:
   \   0DD8            ?0171:
   \   0DD8            ?0168:
    785            }
    786          
    787            temp_data *= ((((float)packed_data[ch >> 1][6]/10.0) -
    788                  (float) packed_data[ch >> 1][5] / 100.0) /100.0 ) * 10.197162;
   \   0DD8  0CE9              MOV.B   R6L,R1L
   \   0DDA  1189              SHAR.B  R1L
   \   0DDC  7779              BLD     #7,R1L
   \   0DDE  1E11              SUBX.B  R1H,R1H
   \   0DE0  79030028          MOV.W   #40,R3
   \   0DE4  5E000000          JSR     @?SS_MUL_L02
   \   0DE8  6E1900FA          MOV.B   @(packed_data+6,R1),R1L
   \   0DEC  F100              MOV.B   #0,R1H
   \   0DEE  1900              SUB.W   R0,R0
   \   0DF0  5E000000          JSR     @?UL_TO_FLT_L04
   \   0DF4  1933              SUB.W   R3,R3
   \   0DF6  79024120          MOV.W   #16672,R2
   \   0DFA  5E000000          JSR     @?F_DIV_L04
   \   0DFE  0CEB              MOV.B   R6L,R3L
   \   0E00  118B              SHAR.B  R3L
   \   0E02  777B              BLD     #7,R3L
   \   0E04  1E33              SUBX.B  R3H,R3H
   \   0E06  6DF1              MOV.W   R1,@-SP
   \   0E08  0D31              MOV.W   R3,R1
   \   0E0A  79030028          MOV.W   #40,R3
   \   0E0E  5E000000          JSR     @?SS_MUL_L02
   \   0E12  6E1900F9          MOV.B   @(packed_data+5,R1),R1L
   \   0E16  6DF0              MOV.W   R0,@-SP
   \   0E18  F100              MOV.B   #0,R1H
   \   0E1A  1900              SUB.W   R0,R0
   \   0E1C  5E000000          JSR     @?UL_TO_FLT_L04
   \   0E20  1933              SUB.W   R3,R3
   \   0E22  790242C8          MOV.W   #17096,R2
   \   0E26  5E000000          JSR     @?F_DIV_L04
   \   0E2A  6F730002          MOV.W   @(2,SP),R3
   \   0E2E  6972              MOV.W   @SP,R2
   \   0E30  6FF20002          MOV.W   R2,@(2,SP)
   \   0E34  0B87              ADDS.W  #2,SP
   \   0E36  6D72              MOV.W   @SP+,R2
   \   0E38  5E000000          JSR     @?F_SUB_SWAP_L04
   \   0E3C  1933              SUB.W   R3,R3
   \   0E3E  790242C8          MOV.W   #17096,R2
   \   0E42  5E000000          JSR     @?F_DIV_L04
   \   0E46  79032793          MOV.W   #10131,R3
   \   0E4A  79024123          MOV.W   #16675,R2
   \   0E4E  5E000000          JSR     @?F_MUL_L04
   \   0E52  6DF0              MOV.W   R0,@-SP
   \   0E54  6DF1              MOV.W   R1,@-SP
   \   0E56  6F700004          MOV.W   @(4,SP),R0
   \   0E5A  6F710006          MOV.W   @(6,SP),R1
   \   0E5E  6D73              MOV.W   @SP+,R3
   \   0E60  6D72              MOV.W   @SP+,R2
   \   0E62  5E000000          JSR     @?F_MUL_L04
   \   0E66  6FF10002          MOV.W   R1,@(2,SP)
   \   0E6A  69F0              MOV.W   R0,@SP
    789            temp_data -= ((float) offset[ch] / 1000.0) ;
   \   0E6C  0CE9              MOV.B   R6L,R1L
   \   0E6E  7779              BLD     #7,R1L
   \   0E70  1E11              SUBX.B  R1H,R1H
   \   0E72  0911              ADD.W   R1,R1
   \   0E74  6F1102E6          MOV.W   @(offset,R1),R1
   \   0E78  7371              BTST    #7,R1H
   \   0E7A  4706              BEQ     $+8
   \   0E7C  7900FFFF          MOV.W   #-1,R0
   \   0E80  4002              BRA     $+4
   \   0E82  1900              SUB.W   R0,R0
   \   0E84  5E000000          JSR     @?SL_TO_FLT_L04
   \   0E88  1933              SUB.W   R3,R3
   \   0E8A  7902447A          MOV.W   #17530,R2
   \   0E8E  5E000000          JSR     @?F_DIV_L04
   \   0E92  6DF0              MOV.W   R0,@-SP
   \   0E94  6DF1              MOV.W   R1,@-SP
   \   0E96  6F700004          MOV.W   @(4,SP),R0
   \   0E9A  6F710006          MOV.W   @(6,SP),R1
   \   0E9E  6D73              MOV.W   @SP+,R3
   \   0EA0  6D72              MOV.W   @SP+,R2
   \   0EA2  5E000000          JSR     @?F_SUB_L04
   \   0EA6  6FF10002          MOV.W   R1,@(2,SP)
   \   0EAA  69F0              MOV.W   R0,@SP
    790            temp_data *=  gain[ch] ;
   \   0EAC  0CE9              MOV.B   R6L,R1L
   \   0EAE  7779              BLD     #7,R1L
   \   0EB0  1E11              SUBX.B  R1H,R1H
   \   0EB2  0911              ADD.W   R1,R1
   \   0EB4  0911              ADD.W   R1,R1
   \   0EB6  6DF1              MOV.W   R1,@-SP
   \   0EB8  6F700002          MOV.W   @(2,SP),R0
   \   0EBC  6F710004          MOV.W   @(4,SP),R1
   \   0EC0  6D73              MOV.W   @SP+,R3
   \   0EC2  0D32              MOV.W   R3,R2
   \   0EC4  6F2302B0          MOV.W   @(gain+2,R2),R3
   \   0EC8  6F2202AE          MOV.W   @(gain,R2),R2
   \   0ECC  5E000000          JSR     @?F_MUL_L04
   \   0ED0  6FF10002          MOV.W   R1,@(2,SP)
   \   0ED4  69F0              MOV.W   R0,@SP
    791            temp_data += ((float) packed_data[ch >> 1][5] / 100.0)        * 10.197162 ;
   \   0ED6  0CE9              MOV.B   R6L,R1L
   \   0ED8  1189              SHAR.B  R1L
   \   0EDA  7779              BLD     #7,R1L
   \   0EDC  1E11              SUBX.B  R1H,R1H
   \   0EDE  79030028          MOV.W   #40,R3
   \   0EE2  5E000000          JSR     @?SS_MUL_L02
   \   0EE6  6E1900F9          MOV.B   @(packed_data+5,R1),R1L
   \   0EEA  F100              MOV.B   #0,R1H
   \   0EEC  1900              SUB.W   R0,R0
   \   0EEE  5E000000          JSR     @?UL_TO_FLT_L04
   \   0EF2  1933              SUB.W   R3,R3
   \   0EF4  790242C8          MOV.W   #17096,R2
   \   0EF8  5E000000          JSR     @?F_DIV_L04
   \   0EFC  79032793          MOV.W   #10131,R3
   \   0F00  79024123          MOV.W   #16675,R2
   \   0F04  5E000000          JSR     @?F_MUL_L04
   \   0F08  6DF0              MOV.W   R0,@-SP
   \   0F0A  6DF1              MOV.W   R1,@-SP
   \   0F0C  6F700004          MOV.W   @(4,SP),R0
   \   0F10  6F710006          MOV.W   @(6,SP),R1
   \   0F14  6D73              MOV.W   @SP+,R3
   \   0F16  6D72              MOV.W   @SP+,R2
   \   0F18  5E000000          JSR     @?F_ADD_L04
   \   0F1C  6FF10002          MOV.W   R1,@(2,SP)
   \   0F20  69F0              MOV.W   R0,@SP
    792            mes_data[ch] += (temp_data - mes_data[ch])/ ((float)p_filter + 1.0) ;
   \   0F22  0CE9              MOV.B   R6L,R1L
   \   0F24  7779              BLD     #7,R1L
   \   0F26  1E11              SUBX.B  R1H,R1H
   \   0F28  0911              ADD.W   R1,R1
   \   0F2A  0911              ADD.W   R1,R1
   \   0F2C  6F100278          MOV.W   @(mes_data+2,R1),R0
   \   0F30  6F110276          MOV.W   @(mes_data,R1),R1
   \   0F34  0D11              MOV.W   R1,R1
   \   0F36  4702              BEQ     $+4
   \   0F38  7171              BNOT    #7,R1H
   \   0F3A  6DF1              MOV.W   R1,@-SP
   \   0F3C  0D01              MOV.W   R0,R1
   \   0F3E  6D70              MOV.W   @SP+,R0
   \   0F40  6F730002          MOV.W   @(2,SP),R3
   \   0F44  6972              MOV.W   @SP,R2
   \   0F46  5E000000          JSR     @?F_ADD_L04
   \   0F4A  6DF1              MOV.W   R1,@-SP
   \   0F4C  6A09032B          MOV.B   @p_filter:16,R1L
   \   0F50  6DF0              MOV.W   R0,@-SP
   \   0F52  F100              MOV.B   #0,R1H
   \   0F54  1900              SUB.W   R0,R0
   \   0F56  5E000000          JSR     @?UL_TO_FLT_L04
   \   0F5A  1933              SUB.W   R3,R3
   \   0F5C  79023F80          MOV.W   #16256,R2
   \   0F60  5E000000          JSR     @?F_ADD_L04
   \   0F64  6F730002          MOV.W   @(2,SP),R3
   \   0F68  6972              MOV.W   @SP,R2
   \   0F6A  6FF20002          MOV.W   R2,@(2,SP)
   \   0F6E  0B87              ADDS.W  #2,SP
   \   0F70  6D72              MOV.W   @SP+,R2
   \   0F72  5E000000          JSR     @?F_DIV_SWAP_L04
   \   0F76  0CEB              MOV.B   R6L,R3L
   \   0F78  777B              BLD     #7,R3L
   \   0F7A  1E33              SUBX.B  R3H,R3H
   \   0F7C  0933              ADD.W   R3,R3
   \   0F7E  0933              ADD.W   R3,R3
   \   0F80  6DF0              MOV.W   R0,@-SP
   \   0F82  6DF1              MOV.W   R1,@-SP
   \   0F84  6F300276          MOV.W   @(mes_data,R3),R0
   \   0F88  6F310278          MOV.W   @(mes_data+2,R3),R1
   \   0F8C  6DF3              MOV.W   R3,@-SP
   \   0F8E  6F730002          MOV.W   @(2,SP),R3
   \   0F92  6972              MOV.W   @SP,R2
   \   0F94  6FF20002          MOV.W   R2,@(2,SP)
   \   0F98  0B87              ADDS.W  #2,SP
   \   0F9A  6F720002          MOV.W   @(2,SP),R2
   \   0F9E  6974              MOV.W   @SP,R4
   \   0FA0  6FF40002          MOV.W   R4,@(2,SP)
   \   0FA4  0B87              ADDS.W  #2,SP
   \   0FA6  5E000000          JSR     @?F_ADD_L04
   \   0FAA  6D73              MOV.W   @SP+,R3
   \   0FAC  6FB10278          MOV.W   R1,@(mes_data+2,R3)
   \   0FB0  6FB00276          MOV.W   R0,@(mes_data,R3)
    793            if ((mes_data[ch] > 500.0) || (mes_data[ch] < -50.0)) {
   \   0FB4  0CE9              MOV.B   R6L,R1L
   \   0FB6  7779              BLD     #7,R1L
   \   0FB8  1E11              SUBX.B  R1H,R1H
   \   0FBA  0911              ADD.W   R1,R1
   \   0FBC  0911              ADD.W   R1,R1
   \   0FBE  0D10              MOV.W   R1,R0
   \   0FC0  6F010278          MOV.W   @(mes_data+2,R0),R1
   \   0FC4  6F000276          MOV.W   @(mes_data,R0),R0
   \   0FC8  1933              SUB.W   R3,R3
   \   0FCA  790243FA          MOV.W   #17402,R2
   \   0FCE  5E000000          JSR     @?F_SUB_L04
   \   0FD2  0D00              MOV.W   R0,R0
   \   0FD4  4E22              BGT     ?0178
   \   0FD6  0CE9              MOV.B   R6L,R1L
   \   0FD8  7779              BLD     #7,R1L
   \   0FDA  1E11              SUBX.B  R1H,R1H
   \   0FDC  0911              ADD.W   R1,R1
   \   0FDE  0911              ADD.W   R1,R1
   \   0FE0  0D10              MOV.W   R1,R0
   \   0FE2  6F010278          MOV.W   @(mes_data+2,R0),R1
   \   0FE6  6F000276          MOV.W   @(mes_data,R0),R0
   \   0FEA  1933              SUB.W   R3,R3
   \   0FEC  7902C248          MOV.W   #-15800,R2
   \   0FF0  5E000000          JSR     @?F_SUB_L04
   \   0FF4  0D00              MOV.W   R0,R0
   \   0FF6  4C16              BGE     ?0179
   \   0FF8            ?0180:
   \   0FF8            ?0181:
   \   0FF8            ?0178:
    794              mes_data[ch] = 0.0 ;
   \   0FF8  0CE9              MOV.B   R6L,R1L
   \   0FFA  7779              BLD     #7,R1L
   \   0FFC  1E11              SUBX.B  R1H,R1H
   \   0FFE  0911              ADD.W   R1,R1
   \   1000  0911              ADD.W   R1,R1
   \   1002  1922              SUB.W   R2,R2
   \   1004  1900              SUB.W   R0,R0
   \   1006  6F920278          MOV.W   R2,@(mes_data+2,R1)
   \   100A  6F900276          MOV.W   R0,@(mes_data,R1)
   \   100E            ?0179:
    795            }
    796            Led(2, OFF) ;                                                             /* Led 2 off */
   \   100E  1911              SUB.W   R1,R1
   \   1010  6DF1              MOV.W   R1,@-SP
   \   1012  79010002          MOV.W   #2,R1
   \   1016  5E0001E2          JSR     @Led:16
   \   101A  0B87              ADDS.W  #2,SP
    797          
    798          }
   \   101C  0B87              ADDS.W  #2,SP
   \   101E  0B87              ADDS.W  #2,SP
   \   1020  6D76              POP     R6
   \   1022  6D74              POP     R4
   \   1024  5470              RTS
    799          
    800          /*************************************************************************
    801           *
    802           *  Calculate precentage for pressure
    803           *
    804           *************************************************************************/
    805          float   CalcPercent( unsigned short span, short low_span, short raw_data,
    806              float nl)
    807          {
   \   1026            CalcPercent:
   \   1026  6DF4              PUSH    R4
   \   1028  6DF5              PUSH    R5
   \   102A  6DF6              PUSH    R6
   \   102C  79020010          MOV.W   #16,R2
   \   1030  1927              SUB.W   R2,SP
   \   1032  6F76001A          MOV.W   @(26,SP),R6
   \   1036  6F750018          MOV.W   @(24,SP),R5
   \   103A  0D14              MOV.W   R1,R4
    808          
    809            float x, yy, fspan, range ;
    810          
    811            range = (float)raw_data - (float)low_span ;
   \   103C  0D61              MOV.W   R6,R1
   \   103E  7371              BTST    #7,R1H
   \   1040  4706              BEQ     $+8
   \   1042  7900FFFF          MOV.W   #-1,R0
   \   1046  4002              BRA     $+4
   \   1048  1900              SUB.W   R0,R0
   \   104A  5E000000          JSR     @?SL_TO_FLT_L04
   \   104E  6DF1              MOV.W   R1,@-SP
   \   1050  0D51              MOV.W   R5,R1
   \   1052  6DF0              MOV.W   R0,@-SP
   \   1054  7371              BTST    #7,R1H
   \   1056  4706              BEQ     $+8
   \   1058  7900FFFF          MOV.W   #-1,R0
   \   105C  4002              BRA     $+4
   \   105E  1900              SUB.W   R0,R0
   \   1060  5E000000          JSR     @?SL_TO_FLT_L04
   \   1064  6F730002          MOV.W   @(2,SP),R3
   \   1068  6972              MOV.W   @SP,R2
   \   106A  6FF20002          MOV.W   R2,@(2,SP)
   \   106E  0B87              ADDS.W  #2,SP
   \   1070  6D72              MOV.W   @SP+,R2
   \   1072  5E000000          JSR     @?F_SUB_SWAP_L04
   \   1076  6FF10006          MOV.W   R1,@(6,SP)
   \   107A  6FF00004          MOV.W   R0,@(4,SP)
    812            fspan = (float)span ;
   \   107E  0D41              MOV.W   R4,R1
   \   1080  1900              SUB.W   R0,R0
   \   1082  5E000000          JSR     @?UL_TO_FLT_L04
   \   1086  6FF10002          MOV.W   R1,@(2,SP)
   \   108A  69F0              MOV.W   R0,@SP
    813          
    814            x = range/fspan ;
   \   108C  6F710006          MOV.W   @(6,SP),R1
   \   1090  6F700004          MOV.W   @(4,SP),R0
   \   1094  6F730002          MOV.W   @(2,SP),R3
   \   1098  6972              MOV.W   @SP,R2
   \   109A  5E000000          JSR     @?F_DIV_L04
   \   109E  6FF1000A          MOV.W   R1,@(10,SP)
   \   10A2  6FF00008          MOV.W   R0,@(8,SP)
    815            yy = (fspan - fspan*x)*fspan*x*nl/(fspan * fspan / 4.0) ;
   \   10A6  6F710002          MOV.W   @(2,SP),R1
   \   10AA  6970              MOV.W   @SP,R0
   \   10AC  6F73000A          MOV.W   @(10,SP),R3
   \   10B0  6F720008          MOV.W   @(8,SP),R2
   \   10B4  5E000000          JSR     @?F_MUL_L04
   \   10B8  0D00              MOV.W   R0,R0
   \   10BA  4702              BEQ     $+4
   \   10BC  7170              BNOT    #7,R0H
   \   10BE  6F730002          MOV.W   @(2,SP),R3
   \   10C2  6972              MOV.W   @SP,R2
   \   10C4  5E000000          JSR     @?F_ADD_L04
   \   10C8  6F730002          MOV.W   @(2,SP),R3
   \   10CC  6972              MOV.W   @SP,R2
   \   10CE  5E000000          JSR     @?F_MUL_L04
   \   10D2  6F73000A          MOV.W   @(10,SP),R3
   \   10D6  6F720008          MOV.W   @(8,SP),R2
   \   10DA  5E000000          JSR     @?F_MUL_L04
   \   10DE  6F73001E          MOV.W   @(30,SP),R3
   \   10E2  6F72001C          MOV.W   @(28,SP),R2
   \   10E6  5E000000          JSR     @?F_MUL_L04
   \   10EA  6DF0              MOV.W   R0,@-SP
   \   10EC  6DF1              MOV.W   R1,@-SP
   \   10EE  6F710006          MOV.W   @(6,SP),R1
   \   10F2  6F700004          MOV.W   @(4,SP),R0
   \   10F6  6F730006          MOV.W   @(6,SP),R3
   \   10FA  6F720004          MOV.W   @(4,SP),R2
   \   10FE  5E000000          JSR     @?F_MUL_L04
   \   1102  1933              SUB.W   R3,R3
   \   1104  79024080          MOV.W   #16512,R2
   \   1108  5E000000          JSR     @?F_DIV_L04
   \   110C  6D73              MOV.W   @SP+,R3
   \   110E  6D72              MOV.W   @SP+,R2
   \   1110  5E000000          JSR     @?F_DIV_SWAP_L04
   \   1114  6FF1000E          MOV.W   R1,@(14,SP)
   \   1118  6FF0000C          MOV.W   R0,@(12,SP)
    816            return (range - yy)/fspan ;
   \   111C  6F710006          MOV.W   @(6,SP),R1
   \   1120  6F700004          MOV.W   @(4,SP),R0
   \   1124  6F73000E          MOV.W   @(14,SP),R3
   \   1128  6F72000C          MOV.W   @(12,SP),R2
   \   112C  5E000000          JSR     @?F_SUB_L04
   \   1130  6F730002          MOV.W   @(2,SP),R3
   \   1134  6972              MOV.W   @SP,R2
   \   1136  5E000000          JSR     @?F_DIV_L04
    817          
    818          }
   \   113A  79020010          MOV.W   #16,R2
   \   113E  0927              ADD.W   R2,SP
   \   1140  6D76              POP     R6
   \   1142  6D75              POP     R5
   \   1144  6D74              POP     R4
   \   1146  5470              RTS
    819          
    820          /*************************************************************************
    821           *
    822           *  Calculate and filter temperature
    823           *
    824           *************************************************************************/
    825          void CalcTemp(signed char ch)
    826          {
   \   1148            CalcTemp:
   \   1148  6DF4              PUSH    R4
   \   114A  6DF6              PUSH    R6
   \   114C  7902000C          MOV.W   #12,R2
   \   1150  1927              SUB.W   R2,SP
   \   1152  0C9E              MOV.B   R1L,R6L
    827          
    828            float temp_data, resist, temp_resist ;
    829          
    830            resist = (float) raw_data[ch] ;
   \   1154  7779              BLD     #7,R1L
   \   1156  1E11              SUBX.B  R1H,R1H
   \   1158  0911              ADD.W   R1,R1
   \   115A  6F11025A          MOV.W   @(raw_data,R1),R1
   \   115E  7371              BTST    #7,R1H
   \   1160  4706              BEQ     $+8
   \   1162  7900FFFF          MOV.W   #-1,R0
   \   1166  4002              BRA     $+4
   \   1168  1900              SUB.W   R0,R0
   \   116A  5E000000          JSR     @?SL_TO_FLT_L04
   \   116E  6FF10002          MOV.W   R1,@(2,SP)
   \   1172  69F0              MOV.W   R0,@SP
    831            resist /= 10.0 ;
    832            if (resist > 500.0 ) {                                                                /* Pt 1000 ?*/
   \   1174  6970              MOV.W   @SP,R0
   \   1176  6F710002          MOV.W   @(2,SP),R1
   \   117A  1933              SUB.W   R3,R3
   \   117C  79024120          MOV.W   #16672,R2
   \   1180  5E000000          JSR     @?F_DIV_L04
   \   1184  6FF10002          MOV.W   R1,@(2,SP)
   \   1188  69F0              MOV.W   R0,@SP
   \   118A  1933              SUB.W   R3,R3
   \   118C  790243FA          MOV.W   #17402,R2
   \   1190  5E000000          JSR     @?F_SUB_L04
   \   1194  0D00              MOV.W   R0,R0
   \   1196  4F16              BLE     ?0183
   \   1198            ?0182:
    833              resist /= 10.0 ;                                                        /* Yes */
   \   1198  6970              MOV.W   @SP,R0
   \   119A  6F710002          MOV.W   @(2,SP),R1
   \   119E  1933              SUB.W   R3,R3
   \   11A0  79024120          MOV.W   #16672,R2
   \   11A4  5E000000          JSR     @?F_DIV_L04
   \   11A8  6FF10002          MOV.W   R1,@(2,SP)
   \   11AC  69F0              MOV.W   R0,@SP
   \   11AE            ?0183:
    834            }
    835          
    836            temp_resist = resist - 100.0 ;
    837            temp_data = (temp_resist / 0.390802) +
    838              ((temp_resist * temp_resist)/1000.0) ;
   \   11AE  6F710002          MOV.W   @(2,SP),R1
   \   11B2  6970              MOV.W   @SP,R0
   \   11B4  1933              SUB.W   R3,R3
   \   11B6  7902C2C8          MOV.W   #-15672,R2
   \   11BA  5E000000          JSR     @?F_ADD_L04
   \   11BE  6FF10006          MOV.W   R1,@(6,SP)
   \   11C2  6FF00004          MOV.W   R0,@(4,SP)
   \   11C6  6F730006          MOV.W   @(6,SP),R3
   \   11CA  6F720004          MOV.W   @(4,SP),R2
   \   11CE  5E000000          JSR     @?F_MUL_L04
   \   11D2  1933              SUB.W   R3,R3
   \   11D4  7902447A          MOV.W   #17530,R2
   \   11D8  5E000000          JSR     @?F_DIV_L04
   \   11DC  6DF0              MOV.W   R0,@-SP
   \   11DE  6DF1              MOV.W   R1,@-SP
   \   11E0  6F71000A          MOV.W   @(10,SP),R1
   \   11E4  6F700008          MOV.W   @(8,SP),R0
   \   11E8  79031733          MOV.W   #5939,R3
   \   11EC  79023EC8          MOV.W   #16072,R2
   \   11F0  5E000000          JSR     @?F_DIV_L04
   \   11F4  6D73              MOV.W   @SP+,R3
   \   11F6  6D72              MOV.W   @SP+,R2
   \   11F8  5E000000          JSR     @?F_ADD_L04
   \   11FC  6FF1000A          MOV.W   R1,@(10,SP)
   \   1200  6FF00008          MOV.W   R0,@(8,SP)
    839          
    840            temp_data -= (float) offset[ch] / 10.0 ;
   \   1204  0CE9              MOV.B   R6L,R1L
   \   1206  7779              BLD     #7,R1L
   \   1208  1E11              SUBX.B  R1H,R1H
   \   120A  0911              ADD.W   R1,R1
   \   120C  6F1102E6          MOV.W   @(offset,R1),R1
   \   1210  7371              BTST    #7,R1H
   \   1212  4706              BEQ     $+8
   \   1214  7900FFFF          MOV.W   #-1,R0
   \   1218  4002              BRA     $+4
   \   121A  1900              SUB.W   R0,R0
   \   121C  5E000000          JSR     @?SL_TO_FLT_L04
   \   1220  1933              SUB.W   R3,R3
   \   1222  79024120          MOV.W   #16672,R2
   \   1226  5E000000          JSR     @?F_DIV_L04
   \   122A  6DF0              MOV.W   R0,@-SP
   \   122C  6DF1              MOV.W   R1,@-SP
   \   122E  6F70000C          MOV.W   @(12,SP),R0
   \   1232  6F71000E          MOV.W   @(14,SP),R1
   \   1236  6D73              MOV.W   @SP+,R3
   \   1238  6D72              MOV.W   @SP+,R2
   \   123A  5E000000          JSR     @?F_SUB_L04
   \   123E  6FF1000A          MOV.W   R1,@(10,SP)
   \   1242  6FF00008          MOV.W   R0,@(8,SP)
    841            temp_data *= gain[ch] ;
   \   1246  0CE9              MOV.B   R6L,R1L
   \   1248  7779              BLD     #7,R1L
   \   124A  1E11              SUBX.B  R1H,R1H
   \   124C  0911              ADD.W   R1,R1
   \   124E  0911              ADD.W   R1,R1
   \   1250  6DF1              MOV.W   R1,@-SP
   \   1252  6F70000A          MOV.W   @(10,SP),R0
   \   1256  6F71000C          MOV.W   @(12,SP),R1
   \   125A  6D73              MOV.W   @SP+,R3
   \   125C  0D32              MOV.W   R3,R2
   \   125E  6F2302B0          MOV.W   @(gain+2,R2),R3
   \   1262  6F2202AE          MOV.W   @(gain,R2),R2
   \   1266  5E000000          JSR     @?F_MUL_L04
   \   126A  6FF1000A          MOV.W   R1,@(10,SP)
   \   126E  6FF00008          MOV.W   R0,@(8,SP)
    842            mes_data[ch] += (temp_data - mes_data[ch])/ ((float)t_filter + 1.0) ;
   \   1272  0CE9              MOV.B   R6L,R1L
   \   1274  7779              BLD     #7,R1L
   \   1276  1E11              SUBX.B  R1H,R1H
   \   1278  0911              ADD.W   R1,R1
   \   127A  0911              ADD.W   R1,R1
   \   127C  6F100278          MOV.W   @(mes_data+2,R1),R0
   \   1280  6F110276          MOV.W   @(mes_data,R1),R1
   \   1284  0D11              MOV.W   R1,R1
   \   1286  4702              BEQ     $+4
   \   1288  7171              BNOT    #7,R1H
   \   128A  6DF1              MOV.W   R1,@-SP
   \   128C  0D01              MOV.W   R0,R1
   \   128E  6D70              MOV.W   @SP+,R0
   \   1290  6F73000A          MOV.W   @(10,SP),R3
   \   1294  6F720008          MOV.W   @(8,SP),R2
   \   1298  5E000000          JSR     @?F_ADD_L04
   \   129C  6DF1              MOV.W   R1,@-SP
   \   129E  6A09032C          MOV.B   @t_filter:16,R1L
   \   12A2  6DF0              MOV.W   R0,@-SP
   \   12A4  F100              MOV.B   #0,R1H
   \   12A6  1900              SUB.W   R0,R0
   \   12A8  5E000000          JSR     @?UL_TO_FLT_L04
   \   12AC  1933              SUB.W   R3,R3
   \   12AE  79023F80          MOV.W   #16256,R2
   \   12B2  5E000000          JSR     @?F_ADD_L04
   \   12B6  6F730002          MOV.W   @(2,SP),R3
   \   12BA  6972              MOV.W   @SP,R2
   \   12BC  6FF20002          MOV.W   R2,@(2,SP)
   \   12C0  0B87              ADDS.W  #2,SP
   \   12C2  6D72              MOV.W   @SP+,R2
   \   12C4  5E000000          JSR     @?F_DIV_SWAP_L04
   \   12C8  0CEB              MOV.B   R6L,R3L
   \   12CA  777B              BLD     #7,R3L
   \   12CC  1E33              SUBX.B  R3H,R3H
   \   12CE  0933              ADD.W   R3,R3
   \   12D0  0933              ADD.W   R3,R3
   \   12D2  6DF0              MOV.W   R0,@-SP
   \   12D4  6DF1              MOV.W   R1,@-SP
   \   12D6  6F300276          MOV.W   @(mes_data,R3),R0
   \   12DA  6F310278          MOV.W   @(mes_data+2,R3),R1
   \   12DE  6DF3              MOV.W   R3,@-SP
   \   12E0  6F730002          MOV.W   @(2,SP),R3
   \   12E4  6972              MOV.W   @SP,R2
   \   12E6  6FF20002          MOV.W   R2,@(2,SP)
   \   12EA  0B87              ADDS.W  #2,SP
   \   12EC  6F720002          MOV.W   @(2,SP),R2
   \   12F0  6974              MOV.W   @SP,R4
   \   12F2  6FF40002          MOV.W   R4,@(2,SP)
   \   12F6  0B87              ADDS.W  #2,SP
   \   12F8  5E000000          JSR     @?F_ADD_L04
   \   12FC  6D73              MOV.W   @SP+,R3
   \   12FE  6FB10278          MOV.W   R1,@(mes_data+2,R3)
   \   1302  6FB00276          MOV.W   R0,@(mes_data,R3)
    843          }
   \   1306  7902000C          MOV.W   #12,R2
   \   130A  0927              ADD.W   R2,SP
   \   130C  6D76              POP     R6
   \   130E  6D74              POP     R4
   \   1310  5470              RTS
    844          
    845          /*************************************************************************
    846           *
    847           *  Calculate and filter "other"
    848           *
    849           *************************************************************************/
    850          void CalcOther(signed char ch)
    851          {
   \   1312            CalcOther:
   \   1312  6DF4              PUSH    R4
   \   1314  6DF6              PUSH    R6
   \   1316  1B87              SUBS.W  #2,SP
   \   1318  1B87              SUBS.W  #2,SP
   \   131A  0C9E              MOV.B   R1L,R6L
    852          
    853            float temp_data ;
    854          
    855            temp_data = (float)(raw_data[ch]) * 2.5 / 32767.0 ;
   \   131C  7779              BLD     #7,R1L
   \   131E  1E11              SUBX.B  R1H,R1H
   \   1320  0911              ADD.W   R1,R1
   \   1322  6F11025A          MOV.W   @(raw_data,R1),R1
   \   1326  7371              BTST    #7,R1H
   \   1328  4706              BEQ     $+8
   \   132A  7900FFFF          MOV.W   #-1,R0
   \   132E  4002              BRA     $+4
   \   1330  1900              SUB.W   R0,R0
   \   1332  5E000000          JSR     @?SL_TO_FLT_L04
   \   1336  1933              SUB.W   R3,R3
   \   1338  79024020          MOV.W   #16416,R2
   \   133C  5E000000          JSR     @?F_MUL_L04
   \   1340  7903FE00          MOV.W   #-512,R3
   \   1344  790246FF          MOV.W   #18175,R2
   \   1348  5E000000          JSR     @?F_DIV_L04
   \   134C  6FF10002          MOV.W   R1,@(2,SP)
   \   1350  69F0              MOV.W   R0,@SP
    856            /*input * 2.5 volt / +-15 bit*/
    857            temp_data -= (float) offset[ch]/ 10000.0 ;
   \   1352  0CE9              MOV.B   R6L,R1L
   \   1354  7779              BLD     #7,R1L
   \   1356  1E11              SUBX.B  R1H,R1H
   \   1358  0911              ADD.W   R1,R1
   \   135A  6F1102E6          MOV.W   @(offset,R1),R1
   \   135E  7371              BTST    #7,R1H
   \   1360  4706              BEQ     $+8
   \   1362  7900FFFF          MOV.W   #-1,R0
   \   1366  4002              BRA     $+4
   \   1368  1900              SUB.W   R0,R0
   \   136A  5E000000          JSR     @?SL_TO_FLT_L04
   \   136E  79034000          MOV.W   #16384,R3
   \   1372  7902461C          MOV.W   #17948,R2
   \   1376  5E000000          JSR     @?F_DIV_L04
   \   137A  6DF0              MOV.W   R0,@-SP
   \   137C  6DF1              MOV.W   R1,@-SP
   \   137E  6F700004          MOV.W   @(4,SP),R0
   \   1382  6F710006          MOV.W   @(6,SP),R1
   \   1386  6D73              MOV.W   @SP+,R3
   \   1388  6D72              MOV.W   @SP+,R2
   \   138A  5E000000          JSR     @?F_SUB_L04
   \   138E  6FF10002          MOV.W   R1,@(2,SP)
   \   1392  69F0              MOV.W   R0,@SP
    858            temp_data *= gain[ch] ;
   \   1394  0CE9              MOV.B   R6L,R1L
   \   1396  7779              BLD     #7,R1L
   \   1398  1E11              SUBX.B  R1H,R1H
   \   139A  0911              ADD.W   R1,R1
   \   139C  0911              ADD.W   R1,R1
   \   139E  6DF1              MOV.W   R1,@-SP
   \   13A0  6F700002          MOV.W   @(2,SP),R0
   \   13A4  6F710004          MOV.W   @(4,SP),R1
   \   13A8  6D73              MOV.W   @SP+,R3
   \   13AA  0D32              MOV.W   R3,R2
   \   13AC  6F2302B0          MOV.W   @(gain+2,R2),R3
   \   13B0  6F2202AE          MOV.W   @(gain,R2),R2
   \   13B4  5E000000          JSR     @?F_MUL_L04
   \   13B8  6FF10002          MOV.W   R1,@(2,SP)
   \   13BC  69F0              MOV.W   R0,@SP
    859            mes_data[ch] += (temp_data - mes_data[ch])/ ((float)o_filter + 1.0) ;
   \   13BE  0CE9              MOV.B   R6L,R1L
   \   13C0  7779              BLD     #7,R1L
   \   13C2  1E11              SUBX.B  R1H,R1H
   \   13C4  0911              ADD.W   R1,R1
   \   13C6  0911              ADD.W   R1,R1
   \   13C8  6F100278          MOV.W   @(mes_data+2,R1),R0
   \   13CC  6F110276          MOV.W   @(mes_data,R1),R1
   \   13D0  0D11              MOV.W   R1,R1
   \   13D2  4702              BEQ     $+4
   \   13D4  7171              BNOT    #7,R1H
   \   13D6  6DF1              MOV.W   R1,@-SP
   \   13D8  0D01              MOV.W   R0,R1
   \   13DA  6D70              MOV.W   @SP+,R0
   \   13DC  6F730002          MOV.W   @(2,SP),R3
   \   13E0  6972              MOV.W   @SP,R2
   \   13E2  5E000000          JSR     @?F_ADD_L04
   \   13E6  6DF1              MOV.W   R1,@-SP
   \   13E8  6A09032D          MOV.B   @o_filter:16,R1L
   \   13EC  6DF0              MOV.W   R0,@-SP
   \   13EE  F100              MOV.B   #0,R1H
   \   13F0  1900              SUB.W   R0,R0
   \   13F2  5E000000          JSR     @?UL_TO_FLT_L04
   \   13F6  1933              SUB.W   R3,R3
   \   13F8  79023F80          MOV.W   #16256,R2
   \   13FC  5E000000          JSR     @?F_ADD_L04
   \   1400  6F730002          MOV.W   @(2,SP),R3
   \   1404  6972              MOV.W   @SP,R2
   \   1406  6FF20002          MOV.W   R2,@(2,SP)
   \   140A  0B87              ADDS.W  #2,SP
   \   140C  6D72              MOV.W   @SP+,R2
   \   140E  5E000000          JSR     @?F_DIV_SWAP_L04
   \   1412  0CEB              MOV.B   R6L,R3L
   \   1414  777B              BLD     #7,R3L
   \   1416  1E33              SUBX.B  R3H,R3H
   \   1418  0933              ADD.W   R3,R3
   \   141A  0933              ADD.W   R3,R3
   \   141C  6DF0              MOV.W   R0,@-SP
   \   141E  6DF1              MOV.W   R1,@-SP
   \   1420  6F300276          MOV.W   @(mes_data,R3),R0
   \   1424  6F310278          MOV.W   @(mes_data+2,R3),R1
   \   1428  6DF3              MOV.W   R3,@-SP
   \   142A  6F730002          MOV.W   @(2,SP),R3
   \   142E  6972              MOV.W   @SP,R2
   \   1430  6FF20002          MOV.W   R2,@(2,SP)
   \   1434  0B87              ADDS.W  #2,SP
   \   1436  6F720002          MOV.W   @(2,SP),R2
   \   143A  6974              MOV.W   @SP,R4
   \   143C  6FF40002          MOV.W   R4,@(2,SP)
   \   1440  0B87              ADDS.W  #2,SP
   \   1442  5E000000          JSR     @?F_ADD_L04
   \   1446  6D73              MOV.W   @SP+,R3
   \   1448  6FB10278          MOV.W   R1,@(mes_data+2,R3)
   \   144C  6FB00276          MOV.W   R0,@(mes_data,R3)
    860          
    861          }
   \   1450  0B87              ADDS.W  #2,SP
   \   1452  0B87              ADDS.W  #2,SP
   \   1454  6D76              POP     R6
   \   1456  6D74              POP     R4
   \   1458  5470              RTS
    862          
    863          /*************************************************************************
    864           *
    865           *  Unpack sensor data
    866           *
    867           *************************************************************************/
    868          void UnpackSensData(signed char ch)
    869          {
   \   145A            UnpackSensData:
   \   145A  6DF4              PUSH    R4
   \   145C  6DF5              PUSH    R5
   \   145E  6DF6              PUSH    R6
   \   1460  7902000C          MOV.W   #12,R2
   \   1464  1927              SUB.W   R2,SP
   \   1466  0C96              MOV.B   R1L,R6H
    870          
    871            short knst, d_knst, g1, g2, g3 ;
    872            float temp_data ;
    873            unsigned char  temp_byte ;
    874            signed char c_ch ;
    875          
    876            temp_byte = FindTemp(ch);
    877            if (temp_byte >= NOIOCH ) {                                   /* no temp. found */
   \   1468  0C69              MOV.B   R6H,R1L
   \   146A  5E001E30          JSR     @FindTemp:16
   \   146E  6EF90006          MOV.B   R1L,@(6,SP)
   \   1472  A90E              CMP.B   #14,R1L
   \   1474  450E              BCS     ?0185
   \   1476            ?0184:
    878              temp_data = 0 ;                                                             /* 25. 0 - 25.0  */
   \   1476  1911              SUB.W   R1,R1
   \   1478  1900              SUB.W   R0,R0
   \   147A  6FF1000A          MOV.W   R1,@(10,SP)
   \   147E  6FF00008          MOV.W   R0,@(8,SP)
    879            } else {
   \   1482  4024              BRA     ?0186
   \   1484            ?0185:
    880              temp_data = mes_data[temp_byte] - 25.0 ;
   \   1484  F904              MOV.B   #4,R1L
   \   1486  6E7B0006          MOV.B   @(6,SP),R3L
   \   148A  50B1              MULXU   R3L,R1
   \   148C  0D10              MOV.W   R1,R0
   \   148E  6F010278          MOV.W   @(mes_data+2,R0),R1
   \   1492  6F000276          MOV.W   @(mes_data,R0),R0
   \   1496  1933              SUB.W   R3,R3
   \   1498  7902C1C8          MOV.W   #-15928,R2
   \   149C  5E000000          JSR     @?F_ADD_L04
   \   14A0  6FF1000A          MOV.W   R1,@(10,SP)
   \   14A4  6FF00008          MOV.W   R0,@(8,SP)
   \   14A8            ?0186:
    881            }
    882            temp_data /= 100.0 ;                    /* use 1/100 deg C in calc. */
   \   14A8  6F700008          MOV.W   @(8,SP),R0
   \   14AC  6F71000A          MOV.W   @(10,SP),R1
   \   14B0  1933              SUB.W   R3,R3
   \   14B2  790242C8          MOV.W   #17096,R2
   \   14B6  5E000000          JSR     @?F_DIV_L04
   \   14BA  6FF1000A          MOV.W   R1,@(10,SP)
   \   14BE  6FF00008          MOV.W   R0,@(8,SP)
    883          
    884            c_ch = ch >>1 ;                                               /* start calculate data for 0 % FRO */
    885            if ((eep_type[c_ch] & 0x01) || (eep_type[c_ch] & 0x10)) { /* OK data */
   \   14C2  0C69              MOV.B   R6H,R1L
   \   14C4  1189              SHAR.B  R1L
   \   14C6  0C9E              MOV.B   R1L,R6L
   \   14C8  7779              BLD     #7,R1L
   \   14CA  1E11              SUBX.B  R1H,R1H
   \   14CC  6E1B0323          MOV.B   @(eep_type,R1),R3L
   \   14D0  EB01              AND.B   #1,R3L
   \   14D2  4612              BNE     ?0187
   \   14D4  0CE9              MOV.B   R6L,R1L
   \   14D6  7779              BLD     #7,R1L
   \   14D8  1E11              SUBX.B  R1H,R1H
   \   14DA  6E1B0323          MOV.B   @(eep_type,R1),R3L
   \   14DE  EB10              AND.B   #16,R3L
   \   14E0  4604              BNE     $+6
   \   14E2  5A001C60          JMP     @?0188:16
   \   14E6            ?0189:
   \   14E6            ?0190:
   \   14E6            ?0187:
    886              knst =      ((short) packed_data[c_ch][8] +
    887                  packed_data[c_ch][9] * 256) & 0x1fff ;
    888          
    889              if (knst & 0x1000) {                                /* negative */
   \   14E6  0CE9              MOV.B   R6L,R1L
   \   14E8  7779              BLD     #7,R1L
   \   14EA  1E11              SUBX.B  R1H,R1H
   \   14EC  79030028          MOV.W   #40,R3
   \   14F0  5E000000          JSR     @?SS_MUL_L02
   \   14F4  6E1B00FD          MOV.B   @(packed_data+9,R1),R3L
   \   14F8  F300              MOV.B   #0,R3H
   \   14FA  0CB3              MOV.B   R3L,R3H
   \   14FC  FB00              MOV.B   #0,R3L
   \   14FE  0CE9              MOV.B   R6L,R1L
   \   1500  7779              BLD     #7,R1L
   \   1502  1E11              SUBX.B  R1H,R1H
   \   1504  6DF3              MOV.W   R3,@-SP
   \   1506  79030028          MOV.W   #40,R3
   \   150A  5E000000          JSR     @?SS_MUL_L02
   \   150E  6D73              MOV.W   @SP+,R3
   \   1510  6E1800FC          MOV.B   @(packed_data+8,R1),R0L
   \   1514  088B              ADD.B   R0L,R3L
   \   1516  9300              ADDX.B  #0,R3H
   \   1518  E31F              AND.B   #31,R3H
   \   151A  6FF30002          MOV.W   R3,@(2,SP)
   \   151E  E310              AND.B   #16,R3H
   \   1520  470A              BEQ     ?0192
   \   1522            ?0191:
    890                knst |= 0xe000 ;
   \   1522  6F710002          MOV.W   @(2,SP),R1
   \   1526  C1E0              OR.B    #224,R1H
   \   1528  6FF10002          MOV.W   R1,@(2,SP)
   \   152C            ?0192:
    891              }
    892              g1 =  ((short) ((packed_data[c_ch][9] >> 5) & 0x07) +
    893                  (packed_data[c_ch][10] * 8)     +
    894                  ((packed_data[c_ch][11] & 0x03) * 2048)) & 0x1fff ;
    895              if (g1 & 0x1000) {                        /* negative */
   \   152C  0CE9              MOV.B   R6L,R1L
   \   152E  7779              BLD     #7,R1L
   \   1530  1E11              SUBX.B  R1H,R1H
   \   1532  79030028          MOV.W   #40,R3
   \   1536  5E000000          JSR     @?SS_MUL_L02
   \   153A  6E1B00FF          MOV.B   @(packed_data+11,R1),R3L
   \   153E  EB03              AND.B   #3,R3L
   \   1540  F300              MOV.B   #0,R3H
   \   1542  F90B              MOV.B   #11,R1L
   \   1544  0933              ADD.W   R3,R3
   \   1546  1A09              DEC.B   R1L
   \   1548  46FA              BNE     $-4
   \   154A  0CE9              MOV.B   R6L,R1L
   \   154C  7779              BLD     #7,R1L
   \   154E  1E11              SUBX.B  R1H,R1H
   \   1550  6DF3              MOV.W   R3,@-SP
   \   1552  79030028          MOV.W   #40,R3
   \   1556  5E000000          JSR     @?SS_MUL_L02
   \   155A  FB08              MOV.B   #8,R3L
   \   155C  6E1800FE          MOV.B   @(packed_data+10,R1),R0L
   \   1560  5083              MULXU   R0L,R3
   \   1562  6D71              MOV.W   @SP+,R1
   \   1564  0913              ADD.W   R1,R3
   \   1566  0CE9              MOV.B   R6L,R1L
   \   1568  7779              BLD     #7,R1L
   \   156A  1E11              SUBX.B  R1H,R1H
   \   156C  6DF3              MOV.W   R3,@-SP
   \   156E  79030028          MOV.W   #40,R3
   \   1572  5E000000          JSR     @?SS_MUL_L02
   \   1576  6E1B00FD          MOV.B   @(packed_data+9,R1),R3L
   \   157A  128B              ROTL.B  R3L
   \   157C  128B              ROTL.B  R3L
   \   157E  128B              ROTL.B  R3L
   \   1580  EB07              AND.B   #7,R3L
   \   1582  EB07              AND.B   #7,R3L
   \   1584  6D71              MOV.W   @SP+,R1
   \   1586  08B9              ADD.B   R3L,R1L
   \   1588  9100              ADDX.B  #0,R1H
   \   158A  E11F              AND.B   #31,R1H
   \   158C  69F1              MOV.W   R1,@SP
   \   158E  E110              AND.B   #16,R1H
   \   1590  4706              BEQ     ?0194
   \   1592            ?0193:
    896                g1 |= 0xe000 ;
   \   1592  6971              MOV.W   @SP,R1
   \   1594  C1E0              OR.B    #224,R1H
   \   1596  69F1              MOV.W   R1,@SP
   \   1598            ?0194:
    897              }
    898              g2 =  ((short) ((packed_data[c_ch][11] >> 2) & 0x3f) +
    899                  ((packed_data[c_ch][12] & 0x7f)* 64 )) & 0x1fff ;
    900              if (g2 & 0x1000) {                        /* negative */
   \   1598  0CE9              MOV.B   R6L,R1L
   \   159A  7779              BLD     #7,R1L
   \   159C  1E11              SUBX.B  R1H,R1H
   \   159E  79030028          MOV.W   #40,R3
   \   15A2  5E000000          JSR     @?SS_MUL_L02
   \   15A6  6E1B0100          MOV.B   @(packed_data+12,R1),R3L
   \   15AA  EB7F              AND.B   #127,R3L
   \   15AC  F940              MOV.B   #64,R1L
   \   15AE  50B1              MULXU   R3L,R1
   \   15B0  0CEB              MOV.B   R6L,R3L
   \   15B2  777B              BLD     #7,R3L
   \   15B4  1E33              SUBX.B  R3H,R3H
   \   15B6  6DF1              MOV.W   R1,@-SP
   \   15B8  0D31              MOV.W   R3,R1
   \   15BA  79030028          MOV.W   #40,R3
   \   15BE  5E000000          JSR     @?SS_MUL_L02
   \   15C2  6E1B00FF          MOV.B   @(packed_data+11,R1),R3L
   \   15C6  110B              SHLR.B  R3L
   \   15C8  110B              SHLR.B  R3L
   \   15CA  EB3F              AND.B   #63,R3L
   \   15CC  6D71              MOV.W   @SP+,R1
   \   15CE  08B9              ADD.B   R3L,R1L
   \   15D0  9100              ADDX.B  #0,R1H
   \   15D2  E11F              AND.B   #31,R1H
   \   15D4  0D14              MOV.W   R1,R4
   \   15D6  E110              AND.B   #16,R1H
   \   15D8  4702              BEQ     ?0196
   \   15DA            ?0195:
    901                g2 |= 0xe000 ;
   \   15DA  C4E0              OR.B    #224,R4H
   \   15DC            ?0196:
    902              }
    903              g3 =  ((short) ((packed_data[c_ch][12] >> 7) & 0x01) +
    904                  (packed_data[c_ch][13] * 2)     +
    905                  ((packed_data[c_ch][14] & 0x0f) * 512)) & 0x1fff ;
    906              if (g3 & 0x1000) {                        /* negative */
   \   15DC  0CE9              MOV.B   R6L,R1L
   \   15DE  7779              BLD     #7,R1L
   \   15E0  1E11              SUBX.B  R1H,R1H
   \   15E2  79030028          MOV.W   #40,R3
   \   15E6  5E000000          JSR     @?SS_MUL_L02
   \   15EA  6E1B0102          MOV.B   @(packed_data+14,R1),R3L
   \   15EE  EB0F              AND.B   #15,R3L
   \   15F0  F300              MOV.B   #0,R3H
   \   15F2  0CB3              MOV.B   R3L,R3H
   \   15F4  FB00              MOV.B   #0,R3L
   \   15F6  1003              SHLL.B  R3H
   \   15F8  0CE9              MOV.B   R6L,R1L
   \   15FA  7779              BLD     #7,R1L
   \   15FC  1E11              SUBX.B  R1H,R1H
   \   15FE  6DF3              MOV.W   R3,@-SP
   \   1600  79030028          MOV.W   #40,R3
   \   1604  5E000000          JSR     @?SS_MUL_L02
   \   1608  6E1B0101          MOV.B   @(packed_data+13,R1),R3L
   \   160C  F300              MOV.B   #0,R3H
   \   160E  0933              ADD.W   R3,R3
   \   1610  6D71              MOV.W   @SP+,R1
   \   1612  0913              ADD.W   R1,R3
   \   1614  0CE9              MOV.B   R6L,R1L
   \   1616  7779              BLD     #7,R1L
   \   1618  1E11              SUBX.B  R1H,R1H
   \   161A  6DF3              MOV.W   R3,@-SP
   \   161C  79030028          MOV.W   #40,R3
   \   1620  5E000000          JSR     @?SS_MUL_L02
   \   1624  6E1B0100          MOV.B   @(packed_data+12,R1),R3L
   \   1628  128B              ROTL.B  R3L
   \   162A  EB01              AND.B   #1,R3L
   \   162C  EB01              AND.B   #1,R3L
   \   162E  6D71              MOV.W   @SP+,R1
   \   1630  08B9              ADD.B   R3L,R1L
   \   1632  9100              ADDX.B  #0,R1H
   \   1634  E11F              AND.B   #31,R1H
   \   1636  0D15              MOV.W   R1,R5
   \   1638  E110              AND.B   #16,R1H
   \   163A  4702              BEQ     ?0198
   \   163C            ?0197:
    907                g3 |= 0xe000 ;
   \   163C  C5E0              OR.B    #224,R5H
   \   163E            ?0198:
    908              }
    909              sens_data[0] = CalcSensData(knst*2, g1*2, g2*2, g3*2, temp_data) ;
   \   163E  6F71000A          MOV.W   @(10,SP),R1
   \   1642  6F700008          MOV.W   @(8,SP),R0
   \   1646  6DF1              MOV.W   R1,@-SP
   \   1648  6DF0              MOV.W   R0,@-SP
   \   164A  0D51              MOV.W   R5,R1
   \   164C  0911              ADD.W   R1,R1
   \   164E  6DF1              MOV.W   R1,@-SP
   \   1650  0D41              MOV.W   R4,R1
   \   1652  0911              ADD.W   R1,R1
   \   1654  6DF1              MOV.W   R1,@-SP
   \   1656  6F710008          MOV.W   @(8,SP),R1
   \   165A  0911              ADD.W   R1,R1
   \   165C  6DF1              MOV.W   R1,@-SP
   \   165E  6F71000C          MOV.W   @(12,SP),R1
   \   1662  0911              ADD.W   R1,R1
   \   1664  5E001D3A          JSR     @CalcSensData:16
   \   1668  7902000A          MOV.W   #10,R2
   \   166C  0927              ADD.W   R2,SP
   \   166E  6B8100EA          MOV.W   R1,@sens_data:16
    910              /* sens value 0%FRO @ temp */
    911          
    912              /* start calculate data for 40 % FRO */
    913              d_knst =  ((short) ((packed_data[c_ch][14] >> 4) & 0x0f) +
    914                  (packed_data[c_ch][15] * 16) +
    915                  ((packed_data[c_ch][16] & 0x01) * 4096))& 0x1fff ;
   \   1672  0CE9              MOV.B   R6L,R1L
   \   1674  7779              BLD     #7,R1L
   \   1676  1E11              SUBX.B  R1H,R1H
   \   1678  79030028          MOV.W   #40,R3
   \   167C  5E000000          JSR     @?SS_MUL_L02
   \   1680  6E1B0104          MOV.B   @(packed_data+16,R1),R3L
   \   1684  EB01              AND.B   #1,R3L
   \   1686  F300              MOV.B   #0,R3H
   \   1688  F90C              MOV.B   #12,R1L
   \   168A  0933              ADD.W   R3,R3
   \   168C  1A09              DEC.B   R1L
   \   168E  46FA              BNE     $-4
   \   1690  0CE9              MOV.B   R6L,R1L
   \   1692  7779              BLD     #7,R1L
   \   1694  1E11              SUBX.B  R1H,R1H
   \   1696  6DF3              MOV.W   R3,@-SP
   \   1698  79030028          MOV.W   #40,R3
   \   169C  5E000000          JSR     @?SS_MUL_L02
   \   16A0  FB10              MOV.B   #16,R3L
   \   16A2  6E180103          MOV.B   @(packed_data+15,R1),R0L
   \   16A6  5083              MULXU   R0L,R3
   \   16A8  6D71              MOV.W   @SP+,R1
   \   16AA  0913              ADD.W   R1,R3
   \   16AC  0CE9              MOV.B   R6L,R1L
   \   16AE  7779              BLD     #7,R1L
   \   16B0  1E11              SUBX.B  R1H,R1H
   \   16B2  6DF3              MOV.W   R3,@-SP
   \   16B4  79030028          MOV.W   #40,R3
   \   16B8  5E000000          JSR     @?SS_MUL_L02
   \   16BC  6E1B0102          MOV.B   @(packed_data+14,R1),R3L
   \   16C0  110B              SHLR.B  R3L
   \   16C2  110B              SHLR.B  R3L
   \   16C4  110B              SHLR.B  R3L
   \   16C6  110B              SHLR.B  R3L
   \   16C8  EB0F              AND.B   #15,R3L
   \   16CA  6D71              MOV.W   @SP+,R1
   \   16CC  08B9              ADD.B   R3L,R1L
   \   16CE  9100              ADDX.B  #0,R1H
   \   16D0  E11F              AND.B   #31,R1H
   \   16D2  6FF10004          MOV.W   R1,@(4,SP)
    916          
    917              g1 =  ((short) ((packed_data[c_ch][16] >> 1) & 0x7f) +
    918                  ((packed_data[c_ch][17] & 0x3f) * 128)) & 0x1fff ;
    919              if (g1 & 0x1000) {                        /* negative */
   \   16D6  0CE9              MOV.B   R6L,R1L
   \   16D8  7779              BLD     #7,R1L
   \   16DA  1E11              SUBX.B  R1H,R1H
   \   16DC  79030028          MOV.W   #40,R3
   \   16E0  5E000000          JSR     @?SS_MUL_L02
   \   16E4  6E1B0105          MOV.B   @(packed_data+17,R1),R3L
   \   16E8  EB3F              AND.B   #63,R3L
   \   16EA  F980              MOV.B   #128,R1L
   \   16EC  50B1              MULXU   R3L,R1
   \   16EE  0CEB              MOV.B   R6L,R3L
   \   16F0  777B              BLD     #7,R3L
   \   16F2  1E33              SUBX.B  R3H,R3H
   \   16F4  6DF1              MOV.W   R1,@-SP
   \   16F6  0D31              MOV.W   R3,R1
   \   16F8  79030028          MOV.W   #40,R3
   \   16FC  5E000000          JSR     @?SS_MUL_L02
   \   1700  6E1B0104          MOV.B   @(packed_data+16,R1),R3L
   \   1704  110B              SHLR.B  R3L
   \   1706  EB7F              AND.B   #127,R3L
   \   1708  6D71              MOV.W   @SP+,R1
   \   170A  08B9              ADD.B   R3L,R1L
   \   170C  9100              ADDX.B  #0,R1H
   \   170E  E11F              AND.B   #31,R1H
   \   1710  69F1              MOV.W   R1,@SP
   \   1712  E110              AND.B   #16,R1H
   \   1714  4706              BEQ     ?0200
   \   1716            ?0199:
    920                g1 |= 0xe000 ;
   \   1716  6971              MOV.W   @SP,R1
   \   1718  C1E0              OR.B    #224,R1H
   \   171A  69F1              MOV.W   R1,@SP
   \   171C            ?0200:
    921              }
    922              g2 =  ((short) ((packed_data[c_ch][17] >> 6) & 0x03) +
    923                  (packed_data[c_ch][18] * 4)     +
    924                  ((packed_data[c_ch][19]& 0x07) * 1024)) & 0x1fff ;
    925              if (g2 & 0x1000) {                        /* negative */
   \   171C  0CE9              MOV.B   R6L,R1L
   \   171E  7779              BLD     #7,R1L
   \   1720  1E11              SUBX.B  R1H,R1H
   \   1722  79030028          MOV.W   #40,R3
   \   1726  5E000000          JSR     @?SS_MUL_L02
   \   172A  6E1B0107          MOV.B   @(packed_data+19,R1),R3L
   \   172E  EB07              AND.B   #7,R3L
   \   1730  F300              MOV.B   #0,R3H
   \   1732  0CB3              MOV.B   R3L,R3H
   \   1734  FB00              MOV.B   #0,R3L
   \   1736  1003              SHLL.B  R3H
   \   1738  1003              SHLL.B  R3H
   \   173A  0CE9              MOV.B   R6L,R1L
   \   173C  7779              BLD     #7,R1L
   \   173E  1E11              SUBX.B  R1H,R1H
   \   1740  6DF3              MOV.W   R3,@-SP
   \   1742  79030028          MOV.W   #40,R3
   \   1746  5E000000          JSR     @?SS_MUL_L02
   \   174A  FB04              MOV.B   #4,R3L
   \   174C  6E180106          MOV.B   @(packed_data+18,R1),R0L
   \   1750  5083              MULXU   R0L,R3
   \   1752  6D71              MOV.W   @SP+,R1
   \   1754  0913              ADD.W   R1,R3
   \   1756  0CE9              MOV.B   R6L,R1L
   \   1758  7779              BLD     #7,R1L
   \   175A  1E11              SUBX.B  R1H,R1H
   \   175C  6DF3              MOV.W   R3,@-SP
   \   175E  79030028          MOV.W   #40,R3
   \   1762  5E000000          JSR     @?SS_MUL_L02
   \   1766  6E1B0105          MOV.B   @(packed_data+17,R1),R3L
   \   176A  128B              ROTL.B  R3L
   \   176C  128B              ROTL.B  R3L
   \   176E  EB03              AND.B   #3,R3L
   \   1770  EB03              AND.B   #3,R3L
   \   1772  6D71              MOV.W   @SP+,R1
   \   1774  08B9              ADD.B   R3L,R1L
   \   1776  9100              ADDX.B  #0,R1H
   \   1778  E11F              AND.B   #31,R1H
   \   177A  0D14              MOV.W   R1,R4
   \   177C  E110              AND.B   #16,R1H
   \   177E  4702              BEQ     ?0202
   \   1780            ?0201:
    926                g2 |= 0xe000 ;
   \   1780  C4E0              OR.B    #224,R4H
   \   1782            ?0202:
    927              }
    928              g3 =  ((short) ((packed_data[c_ch][19] >> 3) & 0x1f) +
    929                  (packed_data[c_ch][20] * 32)) & 0x1fff ;
    930              if (g3 & 0x1000) {                        /* negative */
   \   1782  0CE9              MOV.B   R6L,R1L
   \   1784  7779              BLD     #7,R1L
   \   1786  1E11              SUBX.B  R1H,R1H
   \   1788  79030028          MOV.W   #40,R3
   \   178C  5E000000          JSR     @?SS_MUL_L02
   \   1790  FB20              MOV.B   #32,R3L
   \   1792  6E180108          MOV.B   @(packed_data+20,R1),R0L
   \   1796  5083              MULXU   R0L,R3
   \   1798  0CE9              MOV.B   R6L,R1L
   \   179A  7779              BLD     #7,R1L
   \   179C  1E11              SUBX.B  R1H,R1H
   \   179E  6DF3              MOV.W   R3,@-SP
   \   17A0  79030028          MOV.W   #40,R3
   \   17A4  5E000000          JSR     @?SS_MUL_L02
   \   17A8  6E1B0107          MOV.B   @(packed_data+19,R1),R3L
   \   17AC  110B              SHLR.B  R3L
   \   17AE  110B              SHLR.B  R3L
   \   17B0  110B              SHLR.B  R3L
   \   17B2  EB1F              AND.B   #31,R3L
   \   17B4  6D71              MOV.W   @SP+,R1
   \   17B6  08B9              ADD.B   R3L,R1L
   \   17B8  9100              ADDX.B  #0,R1H
   \   17BA  E11F              AND.B   #31,R1H
   \   17BC  0D15              MOV.W   R1,R5
   \   17BE  E110              AND.B   #16,R1H
   \   17C0  4702              BEQ     ?0204
   \   17C2            ?0203:
    931                g3 |= 0xe000 ;
   \   17C2  C5E0              OR.B    #224,R5H
   \   17C4            ?0204:
    932              }
    933              knst += d_knst;                                                             /* remember new value */
   \   17C4  6F710004          MOV.W   @(4,SP),R1
   \   17C8  6F730002          MOV.W   @(2,SP),R3
   \   17CC  0913              ADD.W   R1,R3
   \   17CE  6FF30002          MOV.W   R3,@(2,SP)
    934              sens_data[1] = CalcSensData(knst*2, g1*2, g2*2, g3*2, temp_data) ;
   \   17D2  6F71000A          MOV.W   @(10,SP),R1
   \   17D6  6F700008          MOV.W   @(8,SP),R0
   \   17DA  6DF1              MOV.W   R1,@-SP
   \   17DC  6DF0              MOV.W   R0,@-SP
   \   17DE  0D51              MOV.W   R5,R1
   \   17E0  0911              ADD.W   R1,R1
   \   17E2  6DF1              MOV.W   R1,@-SP
   \   17E4  0D41              MOV.W   R4,R1
   \   17E6  0911              ADD.W   R1,R1
   \   17E8  6DF1              MOV.W   R1,@-SP
   \   17EA  6F710008          MOV.W   @(8,SP),R1
   \   17EE  0911              ADD.W   R1,R1
   \   17F0  6DF1              MOV.W   R1,@-SP
   \   17F2  6F71000C          MOV.W   @(12,SP),R1
   \   17F6  0911              ADD.W   R1,R1
   \   17F8  5E001D3A          JSR     @CalcSensData:16
   \   17FC  7902000A          MOV.W   #10,R2
   \   1800  0927              ADD.W   R2,SP
   \   1802  6B8100EC          MOV.W   R1,@sens_data+2:16
    935              /* sens value 40%FRO @ temp */
    936          
    937              /* start calculate data for 60 % FRO */
    938              d_knst =  ((short) packed_data[c_ch][21] +
    939                  packed_data[c_ch][22] * 256) & 0x1fff ;
   \   1806  0CE9              MOV.B   R6L,R1L
   \   1808  7779              BLD     #7,R1L
   \   180A  1E11              SUBX.B  R1H,R1H
   \   180C  79030028          MOV.W   #40,R3
   \   1810  5E000000          JSR     @?SS_MUL_L02
   \   1814  6E1B010A          MOV.B   @(packed_data+22,R1),R3L
   \   1818  F300              MOV.B   #0,R3H
   \   181A  0CB3              MOV.B   R3L,R3H
   \   181C  FB00              MOV.B   #0,R3L
   \   181E  0CE9              MOV.B   R6L,R1L
   \   1820  7779              BLD     #7,R1L
   \   1822  1E11              SUBX.B  R1H,R1H
   \   1824  6DF3              MOV.W   R3,@-SP
   \   1826  79030028          MOV.W   #40,R3
   \   182A  5E000000          JSR     @?SS_MUL_L02
   \   182E  6D73              MOV.W   @SP+,R3
   \   1830  6E180109          MOV.B   @(packed_data+21,R1),R0L
   \   1834  088B              ADD.B   R0L,R3L
   \   1836  9300              ADDX.B  #0,R3H
   \   1838  E31F              AND.B   #31,R3H
   \   183A  6FF30004          MOV.W   R3,@(4,SP)
    940          
    941              g1 =  ((short) ((packed_data[c_ch][22] >> 5) & 0x07) +
    942                  (packed_data[c_ch][23] * 8)     +
    943                  ((packed_data[c_ch][24] & 0x03) * 2048)) & 0x1fff ;
    944              if (g1 & 0x1000) {                        /* negative */
   \   183E  0CE9              MOV.B   R6L,R1L
   \   1840  7779              BLD     #7,R1L
   \   1842  1E11              SUBX.B  R1H,R1H
   \   1844  79030028          MOV.W   #40,R3
   \   1848  5E000000          JSR     @?SS_MUL_L02
   \   184C  6E1B010C          MOV.B   @(packed_data+24,R1),R3L
   \   1850  EB03              AND.B   #3,R3L
   \   1852  F300              MOV.B   #0,R3H
   \   1854  F90B              MOV.B   #11,R1L
   \   1856  0933              ADD.W   R3,R3
   \   1858  1A09              DEC.B   R1L
   \   185A  46FA              BNE     $-4
   \   185C  0CE9              MOV.B   R6L,R1L
   \   185E  7779              BLD     #7,R1L
   \   1860  1E11              SUBX.B  R1H,R1H
   \   1862  6DF3              MOV.W   R3,@-SP
   \   1864  79030028          MOV.W   #40,R3
   \   1868  5E000000          JSR     @?SS_MUL_L02
   \   186C  FB08              MOV.B   #8,R3L
   \   186E  6E18010B          MOV.B   @(packed_data+23,R1),R0L
   \   1872  5083              MULXU   R0L,R3
   \   1874  6D71              MOV.W   @SP+,R1
   \   1876  0913              ADD.W   R1,R3
   \   1878  0CE9              MOV.B   R6L,R1L
   \   187A  7779              BLD     #7,R1L
   \   187C  1E11              SUBX.B  R1H,R1H
   \   187E  6DF3              MOV.W   R3,@-SP
   \   1880  79030028          MOV.W   #40,R3
   \   1884  5E000000          JSR     @?SS_MUL_L02
   \   1888  6E1B010A          MOV.B   @(packed_data+22,R1),R3L
   \   188C  128B              ROTL.B  R3L
   \   188E  128B              ROTL.B  R3L
   \   1890  128B              ROTL.B  R3L
   \   1892  EB07              AND.B   #7,R3L
   \   1894  EB07              AND.B   #7,R3L
   \   1896  6D71              MOV.W   @SP+,R1
   \   1898  08B9              ADD.B   R3L,R1L
   \   189A  9100              ADDX.B  #0,R1H
   \   189C  E11F              AND.B   #31,R1H
   \   189E  69F1              MOV.W   R1,@SP
   \   18A0  E110              AND.B   #16,R1H
   \   18A2  4706              BEQ     ?0206
   \   18A4            ?0205:
    945                g1 |= 0xe000 ;
   \   18A4  6971              MOV.W   @SP,R1
   \   18A6  C1E0              OR.B    #224,R1H
   \   18A8  69F1              MOV.W   R1,@SP
   \   18AA            ?0206:
    946              }
    947              g2 =  ((short) ((packed_data[c_ch][24] >> 2) & 0x3f) +
    948                  ((packed_data[c_ch][25] & 0x7f)* 64 )) & 0x1fff ;
    949              if (g2 & 0x1000) {                        /* negative */
   \   18AA  0CE9              MOV.B   R6L,R1L
   \   18AC  7779              BLD     #7,R1L
   \   18AE  1E11              SUBX.B  R1H,R1H
   \   18B0  79030028          MOV.W   #40,R3
   \   18B4  5E000000          JSR     @?SS_MUL_L02
   \   18B8  6E1B010D          MOV.B   @(packed_data+25,R1),R3L
   \   18BC  EB7F              AND.B   #127,R3L
   \   18BE  F940              MOV.B   #64,R1L
   \   18C0  50B1              MULXU   R3L,R1
   \   18C2  0CEB              MOV.B   R6L,R3L
   \   18C4  777B              BLD     #7,R3L
   \   18C6  1E33              SUBX.B  R3H,R3H
   \   18C8  6DF1              MOV.W   R1,@-SP
   \   18CA  0D31              MOV.W   R3,R1
   \   18CC  79030028          MOV.W   #40,R3
   \   18D0  5E000000          JSR     @?SS_MUL_L02
   \   18D4  6E1B010C          MOV.B   @(packed_data+24,R1),R3L
   \   18D8  110B              SHLR.B  R3L
   \   18DA  110B              SHLR.B  R3L
   \   18DC  EB3F              AND.B   #63,R3L
   \   18DE  6D71              MOV.W   @SP+,R1
   \   18E0  08B9              ADD.B   R3L,R1L
   \   18E2  9100              ADDX.B  #0,R1H
   \   18E4  E11F              AND.B   #31,R1H
   \   18E6  0D14              MOV.W   R1,R4
   \   18E8  E110              AND.B   #16,R1H
   \   18EA  4702              BEQ     ?0208
   \   18EC            ?0207:
    950                g2 |= 0xe000 ;
   \   18EC  C4E0              OR.B    #224,R4H
   \   18EE            ?0208:
    951              }
    952              g3 =  ((short)((packed_data[c_ch][25] >> 7) & 0x01) +
    953                  (packed_data[c_ch][26] * 2)     +
    954                  ((packed_data[c_ch][27] & 0x0f) * 512)) & 0x1fff ;
    955              if (g3 & 0x1000) {                        /* negative */
   \   18EE  0CE9              MOV.B   R6L,R1L
   \   18F0  7779              BLD     #7,R1L
   \   18F2  1E11              SUBX.B  R1H,R1H
   \   18F4  79030028          MOV.W   #40,R3
   \   18F8  5E000000          JSR     @?SS_MUL_L02
   \   18FC  6E1B010F          MOV.B   @(packed_data+27,R1),R3L
   \   1900  EB0F              AND.B   #15,R3L
   \   1902  F300              MOV.B   #0,R3H
   \   1904  0CB3              MOV.B   R3L,R3H
   \   1906  FB00              MOV.B   #0,R3L
   \   1908  1003              SHLL.B  R3H
   \   190A  0CE9              MOV.B   R6L,R1L
   \   190C  7779              BLD     #7,R1L
   \   190E  1E11              SUBX.B  R1H,R1H
   \   1910  6DF3              MOV.W   R3,@-SP
   \   1912  79030028          MOV.W   #40,R3
   \   1916  5E000000          JSR     @?SS_MUL_L02
   \   191A  6E1B010E          MOV.B   @(packed_data+26,R1),R3L
   \   191E  F300              MOV.B   #0,R3H
   \   1920  0933              ADD.W   R3,R3
   \   1922  6D71              MOV.W   @SP+,R1
   \   1924  0913              ADD.W   R1,R3
   \   1926  0CE9              MOV.B   R6L,R1L
   \   1928  7779              BLD     #7,R1L
   \   192A  1E11              SUBX.B  R1H,R1H
   \   192C  6DF3              MOV.W   R3,@-SP
   \   192E  79030028          MOV.W   #40,R3
   \   1932  5E000000          JSR     @?SS_MUL_L02
   \   1936  6E1B010D          MOV.B   @(packed_data+25,R1),R3L
   \   193A  128B              ROTL.B  R3L
   \   193C  EB01              AND.B   #1,R3L
   \   193E  EB01              AND.B   #1,R3L
   \   1940  6D71              MOV.W   @SP+,R1
   \   1942  08B9              ADD.B   R3L,R1L
   \   1944  9100              ADDX.B  #0,R1H
   \   1946  E11F              AND.B   #31,R1H
   \   1948  0D15              MOV.W   R1,R5
   \   194A  E110              AND.B   #16,R1H
   \   194C  4702              BEQ     ?0210
   \   194E            ?0209:
    956                g3 |= 0xe000 ;
   \   194E  C5E0              OR.B    #224,R5H
   \   1950            ?0210:
    957              }
    958              knst += d_knst;                                                             /* remember new value */
   \   1950  6F710004          MOV.W   @(4,SP),R1
   \   1954  6F730002          MOV.W   @(2,SP),R3
   \   1958  0913              ADD.W   R1,R3
   \   195A  6FF30002          MOV.W   R3,@(2,SP)
    959              sens_data[2] = CalcSensData(knst*2, g1*2, g2*2, g3*2, temp_data) ;
   \   195E  6F71000A          MOV.W   @(10,SP),R1
   \   1962  6F700008          MOV.W   @(8,SP),R0
   \   1966  6DF1              MOV.W   R1,@-SP
   \   1968  6DF0              MOV.W   R0,@-SP
   \   196A  0D51              MOV.W   R5,R1
   \   196C  0911              ADD.W   R1,R1
   \   196E  6DF1              MOV.W   R1,@-SP
   \   1970  0D41              MOV.W   R4,R1
   \   1972  0911              ADD.W   R1,R1
   \   1974  6DF1              MOV.W   R1,@-SP
   \   1976  6F710008          MOV.W   @(8,SP),R1
   \   197A  0911              ADD.W   R1,R1
   \   197C  6DF1              MOV.W   R1,@-SP
   \   197E  6F71000C          MOV.W   @(12,SP),R1
   \   1982  0911              ADD.W   R1,R1
   \   1984  5E001D3A          JSR     @CalcSensData:16
   \   1988  7902000A          MOV.W   #10,R2
   \   198C  0927              ADD.W   R2,SP
   \   198E  6B8100EE          MOV.W   R1,@sens_data+4:16
    960              /* sens value 60%FRO @ temp */
    961          
    962              /* start calculate data for 100 % FRO */
    963              d_knst = ((short)((packed_data[c_ch][27] >> 4) & 0x0f) +
    964                  (packed_data[c_ch][28] * 16) +
    965                  ((packed_data[c_ch][29] & 0x01)) * 4096)& 0x1fff ;
   \   1992  0CE9              MOV.B   R6L,R1L
   \   1994  7779              BLD     #7,R1L
   \   1996  1E11              SUBX.B  R1H,R1H
   \   1998  79030028          MOV.W   #40,R3
   \   199C  5E000000          JSR     @?SS_MUL_L02
   \   19A0  6E1B0111          MOV.B   @(packed_data+29,R1),R3L
   \   19A4  EB01              AND.B   #1,R3L
   \   19A6  F300              MOV.B   #0,R3H
   \   19A8  F90C              MOV.B   #12,R1L
   \   19AA  0933              ADD.W   R3,R3
   \   19AC  1A09              DEC.B   R1L
   \   19AE  46FA              BNE     $-4
   \   19B0  0CE9              MOV.B   R6L,R1L
   \   19B2  7779              BLD     #7,R1L
   \   19B4  1E11              SUBX.B  R1H,R1H
   \   19B6  6DF3              MOV.W   R3,@-SP
   \   19B8  79030028          MOV.W   #40,R3
   \   19BC  5E000000          JSR     @?SS_MUL_L02
   \   19C0  FB10              MOV.B   #16,R3L
   \   19C2  6E180110          MOV.B   @(packed_data+28,R1),R0L
   \   19C6  5083              MULXU   R0L,R3
   \   19C8  6D71              MOV.W   @SP+,R1
   \   19CA  0913              ADD.W   R1,R3
   \   19CC  0CE9              MOV.B   R6L,R1L
   \   19CE  7779              BLD     #7,R1L
   \   19D0  1E11              SUBX.B  R1H,R1H
   \   19D2  6DF3              MOV.W   R3,@-SP
   \   19D4  79030028          MOV.W   #40,R3
   \   19D8  5E000000          JSR     @?SS_MUL_L02
   \   19DC  6E1B010F          MOV.B   @(packed_data+27,R1),R3L
   \   19E0  110B              SHLR.B  R3L
   \   19E2  110B              SHLR.B  R3L
   \   19E4  110B              SHLR.B  R3L
   \   19E6  110B              SHLR.B  R3L
   \   19E8  EB0F              AND.B   #15,R3L
   \   19EA  6D71              MOV.W   @SP+,R1
   \   19EC  08B9              ADD.B   R3L,R1L
   \   19EE  9100              ADDX.B  #0,R1H
   \   19F0  E11F              AND.B   #31,R1H
   \   19F2  6FF10004          MOV.W   R1,@(4,SP)
    966          
    967              g1 =  ((short) ((packed_data[c_ch][29] >> 1) & 0x7f) +
    968                  ((packed_data[c_ch][30] & 0x3f) * 128)) & 0x1fff ;
    969              if (g1 & 0x1000) {                        /* negative */
   \   19F6  0CE9              MOV.B   R6L,R1L
   \   19F8  7779              BLD     #7,R1L
   \   19FA  1E11              SUBX.B  R1H,R1H
   \   19FC  79030028          MOV.W   #40,R3
   \   1A00  5E000000          JSR     @?SS_MUL_L02
   \   1A04  6E1B0112          MOV.B   @(packed_data+30,R1),R3L
   \   1A08  EB3F              AND.B   #63,R3L
   \   1A0A  F980              MOV.B   #128,R1L
   \   1A0C  50B1              MULXU   R3L,R1
   \   1A0E  0CEB              MOV.B   R6L,R3L
   \   1A10  777B              BLD     #7,R3L
   \   1A12  1E33              SUBX.B  R3H,R3H
   \   1A14  6DF1              MOV.W   R1,@-SP
   \   1A16  0D31              MOV.W   R3,R1
   \   1A18  79030028          MOV.W   #40,R3
   \   1A1C  5E000000          JSR     @?SS_MUL_L02
   \   1A20  6E1B0111          MOV.B   @(packed_data+29,R1),R3L
   \   1A24  110B              SHLR.B  R3L
   \   1A26  EB7F              AND.B   #127,R3L
   \   1A28  6D71              MOV.W   @SP+,R1
   \   1A2A  08B9              ADD.B   R3L,R1L
   \   1A2C  9100              ADDX.B  #0,R1H
   \   1A2E  E11F              AND.B   #31,R1H
   \   1A30  69F1              MOV.W   R1,@SP
   \   1A32  E110              AND.B   #16,R1H
   \   1A34  4706              BEQ     ?0212
   \   1A36            ?0211:
    970                g1 |= 0xe000 ;
   \   1A36  6971              MOV.W   @SP,R1
   \   1A38  C1E0              OR.B    #224,R1H
   \   1A3A  69F1              MOV.W   R1,@SP
   \   1A3C            ?0212:
    971              }
    972              g2 =  ((short) ((packed_data[c_ch][30] >> 6) & 0x03) +
    973                  (packed_data[c_ch][31] * 4)     +
    974                  ((packed_data[c_ch][32]& 0x07) * 1024)) & 0x1fff ;
    975              if (g2 & 0x1000) {                        /* negative */
   \   1A3C  0CE9              MOV.B   R6L,R1L
   \   1A3E  7779              BLD     #7,R1L
   \   1A40  1E11              SUBX.B  R1H,R1H
   \   1A42  79030028          MOV.W   #40,R3
   \   1A46  5E000000          JSR     @?SS_MUL_L02
   \   1A4A  6E1B0114          MOV.B   @(packed_data+32,R1),R3L
   \   1A4E  EB07              AND.B   #7,R3L
   \   1A50  F300              MOV.B   #0,R3H
   \   1A52  0CB3              MOV.B   R3L,R3H
   \   1A54  FB00              MOV.B   #0,R3L
   \   1A56  1003              SHLL.B  R3H
   \   1A58  1003              SHLL.B  R3H
   \   1A5A  0CE9              MOV.B   R6L,R1L
   \   1A5C  7779              BLD     #7,R1L
   \   1A5E  1E11              SUBX.B  R1H,R1H
   \   1A60  6DF3              MOV.W   R3,@-SP
   \   1A62  79030028          MOV.W   #40,R3
   \   1A66  5E000000          JSR     @?SS_MUL_L02
   \   1A6A  FB04              MOV.B   #4,R3L
   \   1A6C  6E180113          MOV.B   @(packed_data+31,R1),R0L
   \   1A70  5083              MULXU   R0L,R3
   \   1A72  6D71              MOV.W   @SP+,R1
   \   1A74  0913              ADD.W   R1,R3
   \   1A76  0CE9              MOV.B   R6L,R1L
   \   1A78  7779              BLD     #7,R1L
   \   1A7A  1E11              SUBX.B  R1H,R1H
   \   1A7C  6DF3              MOV.W   R3,@-SP
   \   1A7E  79030028          MOV.W   #40,R3
   \   1A82  5E000000          JSR     @?SS_MUL_L02
   \   1A86  6E1B0112          MOV.B   @(packed_data+30,R1),R3L
   \   1A8A  128B              ROTL.B  R3L
   \   1A8C  128B              ROTL.B  R3L
   \   1A8E  EB03              AND.B   #3,R3L
   \   1A90  EB03              AND.B   #3,R3L
   \   1A92  6D71              MOV.W   @SP+,R1
   \   1A94  08B9              ADD.B   R3L,R1L
   \   1A96  9100              ADDX.B  #0,R1H
   \   1A98  E11F              AND.B   #31,R1H
   \   1A9A  0D14              MOV.W   R1,R4
   \   1A9C  E110              AND.B   #16,R1H
   \   1A9E  4702              BEQ     ?0214
   \   1AA0            ?0213:
    976                g2 |= 0xe000 ;
   \   1AA0  C4E0              OR.B    #224,R4H
   \   1AA2            ?0214:
    977              }
    978              g3 =  ((short) ((packed_data[c_ch][32] >> 3) & 0x1f) +
    979                  (packed_data[c_ch][33] * 32)) & 0x1fff ;
    980              if (g3 & 0x1000) {                        /* negative */
   \   1AA2  0CE9              MOV.B   R6L,R1L
   \   1AA4  7779              BLD     #7,R1L
   \   1AA6  1E11              SUBX.B  R1H,R1H
   \   1AA8  79030028          MOV.W   #40,R3
   \   1AAC  5E000000          JSR     @?SS_MUL_L02
   \   1AB0  FB20              MOV.B   #32,R3L
   \   1AB2  6E180115          MOV.B   @(packed_data+33,R1),R0L
   \   1AB6  5083              MULXU   R0L,R3
   \   1AB8  0CE9              MOV.B   R6L,R1L
   \   1ABA  7779              BLD     #7,R1L
   \   1ABC  1E11              SUBX.B  R1H,R1H
   \   1ABE  6DF3              MOV.W   R3,@-SP
   \   1AC0  79030028          MOV.W   #40,R3
   \   1AC4  5E000000          JSR     @?SS_MUL_L02
   \   1AC8  6E1B0114          MOV.B   @(packed_data+32,R1),R3L
   \   1ACC  110B              SHLR.B  R3L
   \   1ACE  110B              SHLR.B  R3L
   \   1AD0  110B              SHLR.B  R3L
   \   1AD2  EB1F              AND.B   #31,R3L
   \   1AD4  6D71              MOV.W   @SP+,R1
   \   1AD6  08B9              ADD.B   R3L,R1L
   \   1AD8  9100              ADDX.B  #0,R1H
   \   1ADA  E11F              AND.B   #31,R1H
   \   1ADC  0D15              MOV.W   R1,R5
   \   1ADE  E110              AND.B   #16,R1H
   \   1AE0  4702              BEQ     ?0216
   \   1AE2            ?0215:
    981                g3 |= 0xe000 ;
   \   1AE2  C5E0              OR.B    #224,R5H
   \   1AE4            ?0216:
    982              }
    983              knst += d_knst;                                                             /* remember new value */
   \   1AE4  6F710004          MOV.W   @(4,SP),R1
   \   1AE8  6F730002          MOV.W   @(2,SP),R3
   \   1AEC  0913              ADD.W   R1,R3
   \   1AEE  6FF30002          MOV.W   R3,@(2,SP)
    984              sens_data[3] = CalcSensData(knst*2, g1*2, g2*2, g3*2, temp_data) ;
   \   1AF2  6F71000A          MOV.W   @(10,SP),R1
   \   1AF6  6F700008          MOV.W   @(8,SP),R0
   \   1AFA  6DF1              MOV.W   R1,@-SP
   \   1AFC  6DF0              MOV.W   R0,@-SP
   \   1AFE  0D51              MOV.W   R5,R1
   \   1B00  0911              ADD.W   R1,R1
   \   1B02  6DF1              MOV.W   R1,@-SP
   \   1B04  0D41              MOV.W   R4,R1
   \   1B06  0911              ADD.W   R1,R1
   \   1B08  6DF1              MOV.W   R1,@-SP
   \   1B0A  6F710008          MOV.W   @(8,SP),R1
   \   1B0E  0911              ADD.W   R1,R1
   \   1B10  6DF1              MOV.W   R1,@-SP
   \   1B12  6F71000C          MOV.W   @(12,SP),R1
   \   1B16  0911              ADD.W   R1,R1
   \   1B18  5E001D3A          JSR     @CalcSensData:16
   \   1B1C  7902000A          MOV.W   #10,R2
   \   1B20  0927              ADD.W   R2,SP
   \   1B22  6B8100F0          MOV.W   R1,@sens_data+6:16
    985              /* sens value 100%FRO @ temp */
    986          
    987              sens_nl1 = (signed char)((packed_data[c_ch][34] >> 3) & 0x0f) ; /*  NL1 */
   \   1B26  0CE9              MOV.B   R6L,R1L
   \   1B28  7779              BLD     #7,R1L
   \   1B2A  1E11              SUBX.B  R1H,R1H
   \   1B2C  79030028          MOV.W   #40,R3
   \   1B30  5E000000          JSR     @?SS_MUL_L02
   \   1B34  6E1B0116          MOV.B   @(packed_data+34,R1),R3L
   \   1B38  110B              SHLR.B  R3L
   \   1B3A  110B              SHLR.B  R3L
   \   1B3C  110B              SHLR.B  R3L
   \   1B3E  EB0F              AND.B   #15,R3L
   \   1B40  6A8B00F2          MOV.B   R3L,@sens_nl1:16
    988              if ((packed_data[c_ch][34]) & 0x80) {
   \   1B44  0CE9              MOV.B   R6L,R1L
   \   1B46  7779              BLD     #7,R1L
   \   1B48  1E11              SUBX.B  R1H,R1H
   \   1B4A  79030028          MOV.W   #40,R3
   \   1B4E  5E000000          JSR     @?SS_MUL_L02
   \   1B52  6E1B0116          MOV.B   @(packed_data+34,R1),R3L
   \   1B56  EB80              AND.B   #128,R3L
   \   1B58  470A              BEQ     ?0218
   \   1B5A            ?0217:
    989                sens_nl1 |= 0xf0 ;
   \   1B5A  6A0900F2          MOV.B   @sens_nl1:16,R1L
   \   1B5E  C9F0              OR.B    #-16,R1L
   \   1B60  6A8900F2          MOV.B   R1L,@sens_nl1:16
   \   1B64            ?0218:
    990              }
    991              sens_nl1 *= 3 ;
   \   1B64  F903              MOV.B   #3,R1L
   \   1B66  6A0B00F2          MOV.B   @sens_nl1:16,R3L
   \   1B6A  5093              MULXU   R1L,R3
   \   1B6C  6A8B00F2          MOV.B   R3L,@sens_nl1:16
    992          
    993              sens_nl2 = (signed char) (packed_data[c_ch][34] & 0x07) ;             /* NL2 */
   \   1B70  0CE9              MOV.B   R6L,R1L
   \   1B72  7779              BLD     #7,R1L
   \   1B74  1E11              SUBX.B  R1H,R1H
   \   1B76  79030028          MOV.W   #40,R3
   \   1B7A  5E000000          JSR     @?SS_MUL_L02
   \   1B7E  6E1B0116          MOV.B   @(packed_data+34,R1),R3L
   \   1B82  EB07              AND.B   #7,R3L
   \   1B84  6A8B00F3          MOV.B   R3L,@sens_nl2:16
    994              if ((packed_data[c_ch][34]) & 0x04) {
   \   1B88  0CE9              MOV.B   R6L,R1L
   \   1B8A  7779              BLD     #7,R1L
   \   1B8C  1E11              SUBX.B  R1H,R1H
   \   1B8E  79030028          MOV.W   #40,R3
   \   1B92  5E000000          JSR     @?SS_MUL_L02
   \   1B96  6E1B0116          MOV.B   @(packed_data+34,R1),R3L
   \   1B9A  EB04              AND.B   #4,R3L
   \   1B9C  470A              BEQ     ?0220
   \   1B9E            ?0219:
    995                sens_nl2 |= 0xf8 ;
   \   1B9E  6A0900F3          MOV.B   @sens_nl2:16,R1L
   \   1BA2  C9F8              OR.B    #-8,R1L
   \   1BA4  6A8900F3          MOV.B   R1L,@sens_nl2:16
   \   1BA8            ?0220:
    996              }
    997              sens_nl2 *= 3 ;
   \   1BA8  F903              MOV.B   #3,R1L
   \   1BAA  6A0B00F3          MOV.B   @sens_nl2:16,R3L
   \   1BAE  5093              MULXU   R1L,R3
   \   1BB0  6A8B00F3          MOV.B   R3L,@sens_nl2:16
    998          
    999              offset[ch] =  (short) (packed_data[c_ch][35] +
   1000                  (packed_data[c_ch][36] * 256)) ;                        /*offset*/
   \   1BB4  0CE9              MOV.B   R6L,R1L
   \   1BB6  7779              BLD     #7,R1L
   \   1BB8  1E11              SUBX.B  R1H,R1H
   \   1BBA  79030028          MOV.W   #40,R3
   \   1BBE  5E000000          JSR     @?SS_MUL_L02
   \   1BC2  6E1B0118          MOV.B   @(packed_data+36,R1),R3L
   \   1BC6  F300              MOV.B   #0,R3H
   \   1BC8  0CB3              MOV.B   R3L,R3H
   \   1BCA  FB00              MOV.B   #0,R3L
   \   1BCC  0CE9              MOV.B   R6L,R1L
   \   1BCE  7779              BLD     #7,R1L
   \   1BD0  1E11              SUBX.B  R1H,R1H
   \   1BD2  6DF3              MOV.W   R3,@-SP
   \   1BD4  79030028          MOV.W   #40,R3
   \   1BD8  5E000000          JSR     @?SS_MUL_L02
   \   1BDC  6D73              MOV.W   @SP+,R3
   \   1BDE  6E180117          MOV.B   @(packed_data+35,R1),R0L
   \   1BE2  088B              ADD.B   R0L,R3L
   \   1BE4  9300              ADDX.B  #0,R3H
   \   1BE6  0C69              MOV.B   R6H,R1L
   \   1BE8  7779              BLD     #7,R1L
   \   1BEA  1E11              SUBX.B  R1H,R1H
   \   1BEC  0911              ADD.W   R1,R1
   \   1BEE  6F9302E6          MOV.W   R3,@(offset,R1)
   1001          
   1002              gain[ch] =  1.0 + (float)((packed_data[c_ch][37] +
   1003                    packed_data[c_ch][38] * 256)/100000.0) ;      /*gain*/
   \   1BF2  0CE9              MOV.B   R6L,R1L
   \   1BF4  7779              BLD     #7,R1L
   \   1BF6  1E11              SUBX.B  R1H,R1H
   \   1BF8  79030028          MOV.W   #40,R3
   \   1BFC  5E000000          JSR     @?SS_MUL_L02
   \   1C00  6E1B011A          MOV.B   @(packed_data+38,R1),R3L
   \   1C04  F300              MOV.B   #0,R3H
   \   1C06  0CB3              MOV.B   R3L,R3H
   \   1C08  FB00              MOV.B   #0,R3L
   \   1C0A  0CE9              MOV.B   R6L,R1L
   \   1C0C  7779              BLD     #7,R1L
   \   1C0E  1E11              SUBX.B  R1H,R1H
   \   1C10  6DF3              MOV.W   R3,@-SP
   \   1C12  79030028          MOV.W   #40,R3
   \   1C16  5E000000          JSR     @?SS_MUL_L02
   \   1C1A  6D73              MOV.W   @SP+,R3
   \   1C1C  6E180119          MOV.B   @(packed_data+37,R1),R0L
   \   1C20  088B              ADD.B   R0L,R3L
   \   1C22  9300              ADDX.B  #0,R3H
   \   1C24  0D31              MOV.W   R3,R1
   \   1C26  7371              BTST    #7,R1H
   \   1C28  4706              BEQ     $+8
   \   1C2A  7900FFFF          MOV.W   #-1,R0
   \   1C2E  4002              BRA     $+4
   \   1C30  1900              SUB.W   R0,R0
   \   1C32  5E000000          JSR     @?SL_TO_FLT_L04
   \   1C36  79035000          MOV.W   #20480,R3
   \   1C3A  790247C3          MOV.W   #18371,R2
   \   1C3E  5E000000          JSR     @?F_DIV_L04
   \   1C42  1933              SUB.W   R3,R3
   \   1C44  79023F80          MOV.W   #16256,R2
   \   1C48  5E000000          JSR     @?F_ADD_L04
   \   1C4C  0C6B              MOV.B   R6H,R3L
   \   1C4E  777B              BLD     #7,R3L
   \   1C50  1E33              SUBX.B  R3H,R3H
   \   1C52  0933              ADD.W   R3,R3
   \   1C54  0933              ADD.W   R3,R3
   \   1C56  6FB102B0          MOV.W   R1,@(gain+2,R3)
   \   1C5A  6FB002AE          MOV.W   R0,@(gain,R3)
   1004              /* 256 can not be 256.0 !!!*/
   1005            } else {
   \   1C5E  4050              BRA     ?0221
   \   1C60            ?0188:
   1006              sens_data[0] =         0 ;                                  /* dummy values to prevent */
   \   1C60  1911              SUB.W   R1,R1
   \   1C62  6B8100EA          MOV.W   R1,@sens_data:16
   1007              sens_data[1] =      4000 ;                 /* divide by zero */
   \   1C66  79010FA0          MOV.W   #4000,R1
   \   1C6A  6B8100EC          MOV.W   R1,@sens_data+2:16
   1008              sens_data[2] =      8000 ;
   \   1C6E  79011F40          MOV.W   #8000,R1
   \   1C72  6B8100EE          MOV.W   R1,@sens_data+4:16
   1009              sens_data[3] = 12000 ;
   \   1C76  79012EE0          MOV.W   #12000,R1
   \   1C7A  6B8100F0          MOV.W   R1,@sens_data+6:16
   1010              sens_nl1 = 0 ;
   \   1C7E  F900              MOV.B   #0,R1L
   \   1C80  6A8900F2          MOV.B   R1L,@sens_nl1:16
   1011              sens_nl2 = 0 ;
   \   1C84  F900              MOV.B   #0,R1L
   \   1C86  6A8900F3          MOV.B   R1L,@sens_nl2:16
   1012              offset[ch] =  0 ;                                           /*offset*/
   \   1C8A  0C69              MOV.B   R6H,R1L
   \   1C8C  7779              BLD     #7,R1L
   \   1C8E  1E11              SUBX.B  R1H,R1H
   \   1C90  0911              ADD.W   R1,R1
   \   1C92  1933              SUB.W   R3,R3
   \   1C94  6F9302E6          MOV.W   R3,@(offset,R1)
   1013              gain[ch] =  1.0 ;                                           /* gain */
   \   1C98  0C69              MOV.B   R6H,R1L
   \   1C9A  7779              BLD     #7,R1L
   \   1C9C  1E11              SUBX.B  R1H,R1H
   \   1C9E  0911              ADD.W   R1,R1
   \   1CA0  0911              ADD.W   R1,R1
   \   1CA2  1922              SUB.W   R2,R2
   \   1CA4  79003F80          MOV.W   #16256,R0
   \   1CA8  6F9202B0          MOV.W   R2,@(gain+2,R1)
   \   1CAC  6F9002AE          MOV.W   R0,@(gain,R1)
   \   1CB0            ?0221:
   1014            }
   1015            if ((eep_type[7] & 0x01) || (eep_type[7] & 0x10)){     /* ok data */
   \   1CB0  6A09032A          MOV.B   @eep_type+7:16,R1L
   \   1CB4  E901              AND.B   #1,R1L
   \   1CB6  4608              BNE     ?0222
   \   1CB8  6A09032A          MOV.B   @eep_type+7:16,R1L
   \   1CBC  E910              AND.B   #16,R1L
   \   1CBE  4758              BEQ     ?0223
   \   1CC0            ?0224:
   \   1CC0            ?0225:
   \   1CC0            ?0222:
   1016              cal_zero = (short) packed_data[7][35] + packed_data[7][36] * 256 ;
   \   1CC0  6A090230          MOV.B   @packed_data+316:16,R1L
   \   1CC4  F100              MOV.B   #0,R1H
   \   1CC6  0C91              MOV.B   R1L,R1H
   \   1CC8  F900              MOV.B   #0,R1L
   \   1CCA  6A0B022F          MOV.B   @packed_data+315:16,R3L
   \   1CCE  08B9              ADD.B   R3L,R1L
   \   1CD0  9100              ADDX.B  #0,R1H
   \   1CD2  6B810306          MOV.W   R1,@cal_zero:16
   1017              cal_gain =  1.0 + (float)((packed_data[7][37] +
   1018                    packed_data[7][38] * 256)/100000.0) ; /*gain*/
   \   1CD6  6A090232          MOV.B   @packed_data+318:16,R1L
   \   1CDA  F100              MOV.B   #0,R1H
   \   1CDC  0C91              MOV.B   R1L,R1H
   \   1CDE  F900              MOV.B   #0,R1L
   \   1CE0  6A0B0231          MOV.B   @packed_data+317:16,R3L
   \   1CE4  08B9              ADD.B   R3L,R1L
   \   1CE6  9100              ADDX.B  #0,R1H
   \   1CE8  7371              BTST    #7,R1H
   \   1CEA  4706              BEQ     $+8
   \   1CEC  7900FFFF          MOV.W   #-1,R0
   \   1CF0  4002              BRA     $+4
   \   1CF2  1900              SUB.W   R0,R0
   \   1CF4  5E000000          JSR     @?SL_TO_FLT_L04
   \   1CF8  79035000          MOV.W   #20480,R3
   \   1CFC  790247C3          MOV.W   #18371,R2
   \   1D00  5E000000          JSR     @?F_DIV_L04
   \   1D04  1933              SUB.W   R3,R3
   \   1D06  79023F80          MOV.W   #16256,R2
   \   1D0A  5E000000          JSR     @?F_ADD_L04
   \   1D0E  6B810304          MOV.W   R1,@cal_gain+2:16
   \   1D12  6B800302          MOV.W   R0,@cal_gain:16
   1019              /* 256 can not be 256.0 !!!*/
   1020            } else {
   \   1D16  4014              BRA     ?0226
   \   1D18            ?0223:
   1021              cal_zero = 0 ;
   \   1D18  1911              SUB.W   R1,R1
   \   1D1A  6B810306          MOV.W   R1,@cal_zero:16
   1022              cal_gain = 1.0 ;
   \   1D1E  1911              SUB.W   R1,R1
   \   1D20  79003F80          MOV.W   #16256,R0
   \   1D24  6B810304          MOV.W   R1,@cal_gain+2:16
   \   1D28  6B800302          MOV.W   R0,@cal_gain:16
   \   1D2C            ?0226:
   1023            }
   1024          }
   \   1D2C  7902000C          MOV.W   #12,R2
   \   1D30  0927              ADD.W   R2,SP
   \   1D32  6D76              POP     R6
   \   1D34  6D75              POP     R5
   \   1D36  6D74              POP     R4
   \   1D38  5470              RTS
   1025          
   1026          /*************************************************************************
   1027           *
   1028           *  Calculate sensordata
   1029           *
   1030           *************************************************************************/
   1031          short CalcSensData(short knst, short g1, short g2, short g3, float temp)
   1032          {
   \   1D3A            CalcSensData:
   \   1D3A  6DF4              PUSH    R4
   \   1D3C  6DF5              PUSH    R5
   \   1D3E  6DF6              PUSH    R6
   \   1D40  6DF1              PUSH    R1
   \   1D42  6F76000E          MOV.W   @(14,SP),R6
   \   1D46  6F75000C          MOV.W   @(12,SP),R5
   \   1D4A  6F74000A          MOV.W   @(10,SP),R4
   1033          
   1034            return (knst + (g1 * temp) +
   1035                (g2 * temp * temp) +
   1036                (g3 * temp * temp * temp)) ;      /* sens value ?%FRO @ temp */
   \   1D4E  0D61              MOV.W   R6,R1
   \   1D50  7371              BTST    #7,R1H
   \   1D52  4706              BEQ     $+8
   \   1D54  7900FFFF          MOV.W   #-1,R0
   \   1D58  4002              BRA     $+4
   \   1D5A  1900              SUB.W   R0,R0
   \   1D5C  5E000000          JSR     @?SL_TO_FLT_L04
   \   1D60  6F730012          MOV.W   @(18,SP),R3
   \   1D64  6F720010          MOV.W   @(16,SP),R2
   \   1D68  5E000000          JSR     @?F_MUL_L04
   \   1D6C  6F730012          MOV.W   @(18,SP),R3
   \   1D70  6F720010          MOV.W   @(16,SP),R2
   \   1D74  5E000000          JSR     @?F_MUL_L04
   \   1D78  6F730012          MOV.W   @(18,SP),R3
   \   1D7C  6F720010          MOV.W   @(16,SP),R2
   \   1D80  5E000000          JSR     @?F_MUL_L04
   \   1D84  6DF1              MOV.W   R1,@-SP
   \   1D86  0D51              MOV.W   R5,R1
   \   1D88  6DF0              MOV.W   R0,@-SP
   \   1D8A  7371              BTST    #7,R1H
   \   1D8C  4706              BEQ     $+8
   \   1D8E  7900FFFF          MOV.W   #-1,R0
   \   1D92  4002              BRA     $+4
   \   1D94  1900              SUB.W   R0,R0
   \   1D96  5E000000          JSR     @?SL_TO_FLT_L04
   \   1D9A  6F730016          MOV.W   @(22,SP),R3
   \   1D9E  6F720014          MOV.W   @(20,SP),R2
   \   1DA2  5E000000          JSR     @?F_MUL_L04
   \   1DA6  6F730016          MOV.W   @(22,SP),R3
   \   1DAA  6F720014          MOV.W   @(20,SP),R2
   \   1DAE  5E000000          JSR     @?F_MUL_L04
   \   1DB2  6F730002          MOV.W   @(2,SP),R3
   \   1DB6  6972              MOV.W   @SP,R2
   \   1DB8  6FF20002          MOV.W   R2,@(2,SP)
   \   1DBC  0B87              ADDS.W  #2,SP
   \   1DBE  6D72              MOV.W   @SP+,R2
   \   1DC0  5E000000          JSR     @?F_ADD_L04
   \   1DC4  6DF1              MOV.W   R1,@-SP
   \   1DC6  0D41              MOV.W   R4,R1
   \   1DC8  6DF0              MOV.W   R0,@-SP
   \   1DCA  7371              BTST    #7,R1H
   \   1DCC  4706              BEQ     $+8
   \   1DCE  7900FFFF          MOV.W   #-1,R0
   \   1DD2  4002              BRA     $+4
   \   1DD4  1900              SUB.W   R0,R0
   \   1DD6  5E000000          JSR     @?SL_TO_FLT_L04
   \   1DDA  6F730016          MOV.W   @(22,SP),R3
   \   1DDE  6F720014          MOV.W   @(20,SP),R2
   \   1DE2  5E000000          JSR     @?F_MUL_L04
   \   1DE6  6F730002          MOV.W   @(2,SP),R3
   \   1DEA  6972              MOV.W   @SP,R2
   \   1DEC  6FF20002          MOV.W   R2,@(2,SP)
   \   1DF0  0B87              ADDS.W  #2,SP
   \   1DF2  6D72              MOV.W   @SP+,R2
   \   1DF4  5E000000          JSR     @?F_ADD_L04
   \   1DF8  6DF1              MOV.W   R1,@-SP
   \   1DFA  6F710002          MOV.W   @(2,SP),R1
   \   1DFE  6DF0              MOV.W   R0,@-SP
   \   1E00  7371              BTST    #7,R1H
   \   1E02  4706              BEQ     $+8
   \   1E04  7900FFFF          MOV.W   #-1,R0
   \   1E08  4002              BRA     $+4
   \   1E0A  1900              SUB.W   R0,R0
   \   1E0C  5E000000          JSR     @?SL_TO_FLT_L04
   \   1E10  6F730002          MOV.W   @(2,SP),R3
   \   1E14  6972              MOV.W   @SP,R2
   \   1E16  6FF20002          MOV.W   R2,@(2,SP)
   \   1E1A  0B87              ADDS.W  #2,SP
   \   1E1C  6D72              MOV.W   @SP+,R2
   \   1E1E  5E000000          JSR     @?F_ADD_L04
   \   1E22  5E000000          JSR     @?FLT_TO_SL_L04
   1037          
   1038          }
   \   1E26  0B87              ADDS.W  #2,SP
   \   1E28  6D76              POP     R6
   \   1E2A  6D75              POP     R5
   \   1E2C  6D74              POP     R4
   \   1E2E  5470              RTS
   1039          
   1040          /*************************************************************************
   1041           *
   1042           *  Find temperature for a channel
   1043           *
   1044           *************************************************************************/
   1045          short FindTemp(signed char ch)
   1046          {
   \   1E30            FindTemp:
   \   1E30  6DF5              PUSH    R5
   \   1E32  6DF6              PUSH    R6
   1047          
   1048            short temp_ch, i ;
   1049          
   1050            temp_ch = (short) ch + 1 ;
   1051            if (((ch_stat[temp_ch] & 0xc) == 0x4) &&
   1052                (mes_data[temp_ch] < 150.0) &&                                    /* to high or */
   1053                (mes_data[temp_ch] > -80.0) &&                                    /* to low temp or */
   1054                (!(ch_stat[temp_ch] & 0x01))) {                                   /* convertion error */
   \   1E34  7779              BLD     #7,R1L
   \   1E36  1E11              SUBX.B  R1H,R1H
   \   1E38  0B01              ADDS.W  #1,R1
   \   1E3A  0D15              MOV.W   R1,R5
   \   1E3C  6E1B0315          MOV.B   @(ch_stat,R1),R3L
   \   1E40  EB0C              AND.B   #12,R3L
   \   1E42  AB04              CMP.B   #4,R3L
   \   1E44  4646              BNE     ?0228
   \   1E46  0D51              MOV.W   R5,R1
   \   1E48  0911              ADD.W   R1,R1
   \   1E4A  0911              ADD.W   R1,R1
   \   1E4C  0D10              MOV.W   R1,R0
   \   1E4E  6F010278          MOV.W   @(mes_data+2,R0),R1
   \   1E52  6F000276          MOV.W   @(mes_data,R0),R0
   \   1E56  1933              SUB.W   R3,R3
   \   1E58  79024316          MOV.W   #17174,R2
   \   1E5C  5E000000          JSR     @?F_SUB_L04
   \   1E60  0D00              MOV.W   R0,R0
   \   1E62  4C28              BGE     ?0228
   \   1E64  0D51              MOV.W   R5,R1
   \   1E66  0911              ADD.W   R1,R1
   \   1E68  0911              ADD.W   R1,R1
   \   1E6A  0D10              MOV.W   R1,R0
   \   1E6C  6F010278          MOV.W   @(mes_data+2,R0),R1
   \   1E70  6F000276          MOV.W   @(mes_data,R0),R0
   \   1E74  1933              SUB.W   R3,R3
   \   1E76  7902C2A0          MOV.W   #-15712,R2
   \   1E7A  5E000000          JSR     @?F_SUB_L04
   \   1E7E  0D00              MOV.W   R0,R0
   \   1E80  4F0A              BLE     ?0228
   \   1E82  6E590315          MOV.B   @(ch_stat,R5),R1L
   \   1E86  E901              AND.B   #1,R1L
   \   1E88  4602              BNE     ?0228
   \   1E8A            ?0230:
   \   1E8A            ?0229:
   \   1E8A            ?0227:
   1055            } else {
   \   1E8A  4066              BRA     ?0231
   \   1E8C            ?0228:
   1056              temp_ch = NOIOCH ;                                                  /* used if no temp */
   \   1E8C  7905000E          MOV.W   #14,R5
   1057              for (i = 0; i < NOIOCH; i++) {
   \   1E90  1966              SUB.W   R6,R6
   \   1E92            ?0233:
   \   1E92  7901000E          MOV.W   #14,R1
   \   1E96  1D16              CMP.W   R1,R6
   \   1E98  4C58              BGE     ?0232
   \   1E9A            ?0234:
   1058                if ((ch_stat[i] & 0x0c) == 0x04) {  /* temp ? */
   \   1E9A  6E690315          MOV.B   @(ch_stat,R6),R1L
   \   1E9E  E90C              AND.B   #12,R1L
   \   1EA0  A904              CMP.B   #4,R1L
   \   1EA2  464A              BNE     ?0237
   \   1EA4            ?0236:
   1059                  if ((mes_data[i] < 150.0) &&         /* to high or */
   1060                      (mes_data[i] > -80.0) &&      /* to low temp or */
   1061                      !(ch_stat[i] & 0x01)) {          /* convertion error */
   \   1EA4  0D61              MOV.W   R6,R1
   \   1EA6  0911              ADD.W   R1,R1
   \   1EA8  0911              ADD.W   R1,R1
   \   1EAA  0D10              MOV.W   R1,R0
   \   1EAC  6F010278          MOV.W   @(mes_data+2,R0),R1
   \   1EB0  6F000276          MOV.W   @(mes_data,R0),R0
   \   1EB4  1933              SUB.W   R3,R3
   \   1EB6  79024316          MOV.W   #17174,R2
   \   1EBA  5E000000          JSR     @?F_SUB_L04
   \   1EBE  0D00              MOV.W   R0,R0
   \   1EC0  4C2C              BGE     ?0239
   \   1EC2  0D61              MOV.W   R6,R1
   \   1EC4  0911              ADD.W   R1,R1
   \   1EC6  0911              ADD.W   R1,R1
   \   1EC8  0D10              MOV.W   R1,R0
   \   1ECA  6F010278          MOV.W   @(mes_data+2,R0),R1
   \   1ECE  6F000276          MOV.W   @(mes_data,R0),R0
   \   1ED2  1933              SUB.W   R3,R3
   \   1ED4  7902C2A0          MOV.W   #-15712,R2
   \   1ED8  5E000000          JSR     @?F_SUB_L04
   \   1EDC  0D00              MOV.W   R0,R0
   \   1EDE  4F0E              BLE     ?0239
   \   1EE0  6E690315          MOV.B   @(ch_stat,R6),R1L
   \   1EE4  E901              AND.B   #1,R1L
   \   1EE6  4606              BNE     ?0239
   \   1EE8            ?0241:
   \   1EE8            ?0240:
   \   1EE8            ?0238:
   1062                    temp_ch = i ;
   \   1EE8  0D65              MOV.W   R6,R5
   1063                    i = NOIOCH ;                                                          /* exit */
   \   1EEA  7906000E          MOV.W   #14,R6
   \   1EEE            ?0239:
   \   1EEE            ?0237:
   \   1EEE  0B06              ADDS.W  #1,R6
   1064                  }
   1065                }
   1066              }
   1067            }
   \   1EF0  40A0              BRA     ?0233
   \   1EF2            ?0232:
   \   1EF2            ?0231:
   1068          
   1069            return temp_ch ;
   \   1EF2  0D51              MOV.W   R5,R1
   1070          }
   \   1EF4  6D76              POP     R6
   \   1EF6  6D75              POP     R5
   \   1EF8  5470              RTS
   1071          
   1072          /*************************************************************************
   1073           *
   1074           *  Read from AD-converter
   1075           *
   1076           *************************************************************************/
   1077          unsigned char ReadAdByte(void)
   1078          {
   \   1EFA            ReadAdByte:
   \   1EFA  6DF5              PUSH    R5
   \   1EFC  6DF6              PUSH    R6
   1079          
   1080            unsigned char i, read_byte ;
   1081          
   1082            for (i = 0; i <  8; i++) {
   \   1EFE  FD00              MOV.B   #0,R5L
   \   1F00            ?0243:
   \   1F00  AD08              CMP.B   #8,R5L
   \   1F02  441A              BCC     ?0242
   \   1F04            ?0244:
   1083              read_byte <<= 1 ;                                             /* shift to next bit */
   \   1F04  100E              SHLL.B  R6L
   1084              P5DR &= ~ADCLK ;                                                            /*      set clock line low */
   \   1F06  7FBA7250          BCLR    #5,@186:8
   1085              P5DR |= ADCLK ;                                                             /*      set clock line high */
   \   1F0A  7FBA7050          BSET    #5,@186:8
   1086              if (P5DR & ADDO) {                                                  /* data  = 1? */
   \   1F0E  29BA              MOV.B   @186:8,R1L
   \   1F10  E910              AND.B   #16,R1L
   \   1F12  4704              BEQ     ?0247
   \   1F14            ?0246:
   1087                read_byte |= 0x01 ;                                               /* set bit high */
   \   1F14  700E              BSET    #0,R6L
   1088              } else {
   \   1F16  4002              BRA     ?0248
   \   1F18            ?0247:
   1089                read_byte &= ~0x01 ;                                              /* set bit low */
   \   1F18  720E              BCLR    #0,R6L
   \   1F1A            ?0248:
   \   1F1A  8D01              ADD.B   #1,R5L
   1090              }
   1091            }
   1092            return read_byte ;
   \   1F1C  40E2              BRA     ?0243
   \   1F1E            ?0242:
   \   1F1E  0CE9              MOV.B   R6L,R1L
   1093          }
   \   1F20  6D76              POP     R6
   \   1F22  6D75              POP     R5
   \   1F24  5470              RTS
   1094          
   1095          /*************************************************************************
   1096           *
   1097           *  Write to AD-converter
   1098           *
   1099           *************************************************************************/
   1100          void WriteAdByte(unsigned char data)
   1101          {
   \   1F26            WriteAdByte:
   \   1F26  6DF5              PUSH    R5
   \   1F28  6DF6              PUSH    R6
   \   1F2A  0C9D              MOV.B   R1L,R5L
   1102          
   1103            short i;
   1104          
   1105            for (i = 0; i <  8; i++) {
   \   1F2C  1966              SUB.W   R6,R6
   \   1F2E            ?0250:
   \   1F2E  79010008          MOV.W   #8,R1
   \   1F32  1D16              CMP.W   R1,R6
   \   1F34  4C1E              BGE     ?0249
   \   1F36            ?0251:
   1106              P5DR &= ~ADCLK ;                                                            /*      set clock line low */
   \   1F36  7FBA7250          BCLR    #5,@186:8
   1107              if (data & 0x80) {                                                  /* data bit = 1? */
   \   1F3A  0CD9              MOV.B   R5L,R1L
   \   1F3C  E980              AND.B   #128,R1L
   \   1F3E  4706              BEQ     ?0254
   \   1F40            ?0253:
   1108                P5DR |= ADDI ;                                                            /* set data high */
   \   1F40  7FBA7030          BSET    #3,@186:8
   1109              } else {
   \   1F44  4004              BRA     ?0255
   \   1F46            ?0254:
   1110                P5DR &= ~ADDI ;                                                           /* set data low */
   \   1F46  7FBA7230          BCLR    #3,@186:8
   \   1F4A            ?0255:
   1111              }
   1112              data <<= 1 ;                                                         /* shift to next bit */
   \   1F4A  100D              SHLL.B  R5L
   1113              P5DR |= ADCLK ;                                                             /*      set clock line high */
   \   1F4C  7FBA7050          BSET    #5,@186:8
   \   1F50  0B06              ADDS.W  #1,R6
   1114            }
   1115          }
   \   1F52  40DA              BRA     ?0250
   \   1F54            ?0249:
   \   1F54  6D76              POP     R6
   \   1F56  6D75              POP     R5
   \   1F58  5470              RTS
   1116          
   1117          
   1118          
   1119          /*************************************************************************
   1120           *
   1121           *  Reset pointer to RX received data on RS485
   1122           *
   1123           *************************************************************************/
   1124          void ResetRxPointer(void) {
   \   1F5A            ResetRxPointer:
   1125          
   1126            rx_indx = 1 ;
   \   1F5A  F901              MOV.B   #1,R1L
   \   1F5C  6A8900E2          MOV.B   R1L,@rx_indx:16
   1127            rx_hndx = 0 ;
   \   1F60  F900              MOV.B   #0,R1L
   \   1F62  6A8900E3          MOV.B   R1L,@rx_hndx:16
   1128            rx_start = 0 ;
   \   1F66  F900              MOV.B   #0,R1L
   \   1F68  6A8900E4          MOV.B   R1L,@rx_start:16
   1129            rx_buff[0] = 0 ;
   \   1F6C  F900              MOV.B   #0,R1L
   \   1F6E  6A890070          MOV.B   R1L,@rx_buff:16
   1130            rx_buff[1] = 0 ;
   \   1F72  F900              MOV.B   #0,R1L
   \   1F74  6A890071          MOV.B   R1L,@rx_buff+1:16
   1131            rx_buff[2] = 0 ;
   \   1F78  F900              MOV.B   #0,R1L
   \   1F7A  6A890072          MOV.B   R1L,@rx_buff+2:16
   1132            rx_state = SYNC ;                                     /* error in pack len */
   \   1F7E  F900              MOV.B   #0,R1L
   \   1F80  6A89032F          MOV.B   R1L,@rx_state:16
   1133            rx_timeout = OFF ;                               /* timeout on channel */
   \   1F84  F900              MOV.B   #0,R1L
   \   1F86  6A8900E7          MOV.B   R1L,@rx_timeout:16
   1134          }
   \   1F8A  5470              RTS
   1135          
   1136          /*************************************************************************
   1137           *
   1138           * Calculate rx checksum
   1139           *
   1140           *************************************************************************/
   1141          int CalcRxChecksum(void)
   1142          {
   \   1F8C            CalcRxChecksum:
   \   1F8C  6DF5              PUSH    R5
   \   1F8E  6DF6              PUSH    R6
   1143          
   1144            int                           cnt ;
   1145            unsigned char csum ;
   1146          
   1147            csum = 0 ;
   \   1F90  FD00              MOV.B   #0,R5L
   1148            for (cnt=rx_start ; cnt < (rx_start+rx_packlen-2) ; cnt++) {
   \   1F92  6A0900E4          MOV.B   @rx_start:16,R1L
   \   1F96  F100              MOV.B   #0,R1H
   \   1F98  0D16              MOV.W   R1,R6
   \   1F9A            ?0257:
   \   1F9A  6A0900E6          MOV.B   @rx_packlen:16,R1L
   \   1F9E  F100              MOV.B   #0,R1H
   \   1FA0  6A0B00E4          MOV.B   @rx_start:16,R3L
   \   1FA4  08B9              ADD.B   R3L,R1L
   \   1FA6  9100              ADDX.B  #0,R1H
   \   1FA8  1B81              SUBS.W  #2,R1
   \   1FAA  1D61              CMP.W   R6,R1
   \   1FAC  4F12              BLE     ?0256
   \   1FAE            ?0258:
   1149              csum = crc[csum ^ rx_buff[cnt]] ;
   \   1FAE  6E690070          MOV.B   @(rx_buff,R6),R1L
   \   1FB2  15D9              XOR.B   R5L,R1L
   \   1FB4  F100              MOV.B   #0,R1H
   \   1FB6  0911              ADD.W   R1,R1
   \   1FB8  6E1D0001          MOV.B   @(crc+1,R1),R5L
   \   1FBC  0B06              ADDS.W  #1,R6
   1150            }
   1151            if (csum == (rx_buff[rx_start + rx_packlen - 2])) {
   \   1FBE  40DA              BRA     ?0257
   \   1FC0            ?0256:
   \   1FC0  6A0900E6          MOV.B   @rx_packlen:16,R1L
   \   1FC4  F100              MOV.B   #0,R1H
   \   1FC6  6A0B00E4          MOV.B   @rx_start:16,R3L
   \   1FCA  08B9              ADD.B   R3L,R1L
   \   1FCC  9100              ADDX.B  #0,R1H
   \   1FCE  6E1B006E          MOV.B   @(rx_buff-2,R1),R3L
   \   1FD2  1CDB              CMP.B   R5L,R3L
   \   1FD4  4606              BNE     ?0261
   \   1FD6            ?0260:
   1152              return TRUE ;
   \   1FD6  79010001          MOV.W   #1,R1
   1153            } else {
   \   1FDA  4002              BRA     ?0262
   \   1FDC            ?0261:
   1154              return FALSE ;
   \   1FDC  1911              SUB.W   R1,R1
   1155            }
   \   1FDE            ?0262:
   \   1FDE  6D76              POP     R6
   \   1FE0  6D75              POP     R5
   \   1FE2  5470              RTS
   1156          }
   1157          
   1158          
   1159          
   1160          /*************************************************************************
   1161           *
   1162           *  Handle rx data on RS485
   1163           *
   1164           *************************************************************************/
   1165          void HandleRxPacket(void)
   1166          {
   \   1FE4            HandleRxPacket:
   \   1FE4  6DF4              PUSH    R4
   \   1FE6  6DF5              PUSH    R5
   \   1FE8  6DF6              PUSH    R6
   1167            short   pointer, ndb, more ;
   1168          
   1169            Led(1, ON) ;
   \   1FEA  79010001          MOV.W   #1,R1
   \   1FEE  6DF1              MOV.W   R1,@-SP
   \   1FF0  79010001          MOV.W   #1,R1
   \   1FF4  5E0001E2          JSR     @Led:16
   \   1FF8  0B87              ADDS.W  #2,SP
   1170            sendtail = FALSE ;
   \   1FFA  F900              MOV.B   #0,R1L
   \   1FFC  6A890331          MOV.B   R1L,@sendtail:16
   1171            more  = TRUE ;
   \   2000  79050001          MOV.W   #1,R5
   1172            pointer = 0 ;
   \   2004  1966              SUB.W   R6,R6
   1173            ndb   = 2 ;                                                                                   /* point to first command */
   \   2006  79040002          MOV.W   #2,R4
   1174            pointer = rx_start;                                                           /* Point to  command */
   \   200A  6A0900E4          MOV.B   @rx_start:16,R1L
   \   200E  F100              MOV.B   #0,R1H
   \   2010  0D16              MOV.W   R1,R6
   \   2012            ?0264:
   1175            while (more && (pointer < (rx_packlen + rx_start))) {
   \   2012  0D51              MOV.W   R5,R1
   \   2014  4730              BEQ     ?0263
   \   2016  6A0900E4          MOV.B   @rx_start:16,R1L
   \   201A  F100              MOV.B   #0,R1H
   \   201C  6A0B00E6          MOV.B   @rx_packlen:16,R3L
   \   2020  08B9              ADD.B   R3L,R1L
   \   2022  9100              ADDX.B  #0,R1H
   \   2024  1D61              CMP.W   R6,R1
   \   2026  4F1E              BLE     ?0263
   \   2028            ?0267:
   \   2028            ?0266:
   \   2028            ?0265:
   1176              pointer = pointer + ndb + 2;                                /* Point to  command */
   1177              ndb = rx_buff[pointer+1]    ;                               /* Save pointer to next command */
   \   2028  0D41              MOV.W   R4,R1
   \   202A  0961              ADD.W   R6,R1
   \   202C  0B81              ADDS.W  #2,R1
   \   202E  0D16              MOV.W   R1,R6
   \   2030  6E1B0071          MOV.B   @(rx_buff+1,R1),R3L
   \   2034  F300              MOV.B   #0,R3H
   \   2036  0D34              MOV.W   R3,R4
   1178              if (!CheckAction(pointer)){
   \   2038  0D61              MOV.W   R6,R1
   \   203A  5E000000          JSR     @CheckAction:16
   \   203E  0D11              MOV.W   R1,R1
   \   2040  4602              BNE     ?0269
   \   2042            ?0268:
   1179                more = FALSE ;                                                            /* terminate while  */
   \   2042  1955              SUB.W   R5,R5
   \   2044            ?0269:
   1180              }
   1181            }
   1182            Led(1, OFF) ;
   \   2044  40CC              BRA     ?0264
   \   2046            ?0263:
   \   2046  1911              SUB.W   R1,R1
   \   2048  6DF1              MOV.W   R1,@-SP
   \   204A  79010001          MOV.W   #1,R1
   \   204E  5E0001E2          JSR     @Led:16
   \   2052  0B87              ADDS.W  #2,SP
   1183          }
   \   2054  6D76              POP     R6
   \   2056  6D75              POP     R5
   \   2058  6D74              POP     R4
   \   205A  5470              RTS
   1184          
   1185          /*************************************************************************
   1186           *
   1187           *  Receive data on RS485
   1188           *
   1189           *************************************************************************/
   1190          int ReceiveRxPacket(void)
   1191          {
   \   205C            ReceiveRxPacket:
   \   205C  6DF6              PUSH    R6
   1192            int     ret_val, cnt, new_sync ;
   1193          
   1194            ret_val = FALSE ;
   \   205E  1966              SUB.W   R6,R6
   1195            rx_timeout = RX_TO_TIME ;                             /* timeout on channel */
   \   2060  F9E8              MOV.B   #232,R1L
   \   2062  6A8900E7          MOV.B   R1L,@rx_timeout:16
   \   2066            ?0271:
   1196            while (rx_indx > rx_hndx) {                                           /* more char to check */
   \   2066  6A0900E3          MOV.B   @rx_hndx:16,R1L
   \   206A  6A0B00E2          MOV.B   @rx_indx:16,R3L
   \   206E  1C9B              CMP.B   R1L,R3L
   \   2070  4204              BHI     $+6
   \   2072  5A002194          JMP     @?0270:16
   \   2076            ?0272:
   1197              switch (rx_state) {                                         /* check state */
   \   2076  6A09032F          MOV.B   @rx_state:16,R1L
   \   207A  A900              CMP.B   #0,R1L
   \   207C  4604              BNE     ?0275
   \   207E            ?0274:
   1198                case SYNC :
   1199                  // all functionallity moved to inerrupt routine for receive
   1200                  // on version 10
   1201                  break ;
   \   207E  5A00217E          JMP     @?0273:16
   \   2082            ?0275:
   \   2082  A901              CMP.B   #1,R1L
   \   2084  4704              BEQ     $+6
   \   2086  5A002106          JMP     @?0283:16
   1202                case HEADER :
   1203                  if ((rx_hndx-rx_start) >= 3) {                  /* rec. header */
   \   208A  6A0900E3          MOV.B   @rx_hndx:16,R1L
   \   208E  F100              MOV.B   #0,R1H
   \   2090  6A0B00E4          MOV.B   @rx_start:16,R3L
   \   2094  F300              MOV.B   #0,R3H
   \   2096  1931              SUB.W   R3,R1
   \   2098  A903              CMP.B   #3,R1L
   \   209A  B100              SUBX.B  #0,R1H
   \   209C  4D64              BLT     ?0277
   \   209E            ?0276:
   1204                    rx_packlen = ((rx_buff[rx_start+2] * 256) +
   1205                        rx_buff[rx_start+3] ) ;                   /* calc. pack.len */
   \   209E  6A0900E4          MOV.B   @rx_start:16,R1L
   \   20A2  F100              MOV.B   #0,R1H
   \   20A4  6A0B00E4          MOV.B   @rx_start:16,R3L
   \   20A8  F300              MOV.B   #0,R3H
   \   20AA  6E380072          MOV.B   @(rx_buff+2,R3),R0L
   \   20AE  F800              MOV.B   #0,R0L
   \   20B0  6E1B0073          MOV.B   @(rx_buff+3,R1),R3L
   \   20B4  08B8              ADD.B   R3L,R0L
   \   20B6  6A8800E6          MOV.B   R0L,@rx_packlen:16
   1206                    if ((rx_packlen < ((short) RX_SIZE-rx_hndx)) &&    /* chk. header */
   1207                        (rx_packlen >= MIN_PACK_LEN) &&
   1208                        (rx_buff[rx_start+1] != 0xff)) {
   \   20BA  6A0900E3          MOV.B   @rx_hndx:16,R1L
   \   20BE  F100              MOV.B   #0,R1H
   \   20C0  7903006E          MOV.W   #110,R3
   \   20C4  1913              SUB.W   R1,R3
   \   20C6  6A0900E6          MOV.B   @rx_packlen:16,R1L
   \   20CA  F100              MOV.B   #0,R1H
   \   20CC  1D13              CMP.W   R1,R3
   \   20CE  4F2E              BLE     ?0279
   \   20D0  6A0900E6          MOV.B   @rx_packlen:16,R1L
   \   20D4  A905              CMP.B   #5,R1L
   \   20D6  4526              BCS     ?0279
   \   20D8  6A0900E4          MOV.B   @rx_start:16,R1L
   \   20DC  F100              MOV.B   #0,R1H
   \   20DE  6E1B0071          MOV.B   @(rx_buff+1,R1),R3L
   \   20E2  ABFF              CMP.B   #255,R3L
   \   20E4  4718              BEQ     ?0279
   \   20E6            ?0281:
   \   20E6            ?0280:
   \   20E6            ?0278:
   1209                      rx_state = RECEIVE ;                                        /* header ok */
   \   20E6  F902              MOV.B   #2,R1L
   \   20E8  6A89032F          MOV.B   R1L,@rx_state:16
   1210                      rx_counter = rx_hndx - rx_start + 1 ;
   \   20EC  6A0900E3          MOV.B   @rx_hndx:16,R1L
   \   20F0  6A0B00E4          MOV.B   @rx_start:16,R3L
   \   20F4  18B9              SUB.B   R3L,R1L
   \   20F6  8901              ADD.B   #1,R1L
   \   20F8  6A8900E5          MOV.B   R1L,@rx_counter:16
   1211                    } else {
   \   20FC  4004              BRA     ?0282
   \   20FE            ?0279:
   1212                      ResetRxPointer() ;
   \   20FE  5E001F5A          JSR     @ResetRxPointer:16
   \   2102            ?0282:
   \   2102            ?0277:
   1213                    }
   1214                  }
   1215                  break ;
   \   2102  5A00217E          JMP     @?0273:16
   \   2106            ?0283:
   \   2106  A902              CMP.B   #2,R1L
   \   2108  4704              BEQ     $+6
   \   210A  5A00217A          JMP     @?0297:16
   1216                case RECEIVE :
   1217                  if (++rx_counter >= rx_packlen) {
   \   210E  6A0900E5          MOV.B   @rx_counter:16,R1L
   \   2112  8901              ADD.B   #1,R1L
   \   2114  6A8900E5          MOV.B   R1L,@rx_counter:16
   \   2118  6A0B00E6          MOV.B   @rx_packlen:16,R3L
   \   211C  1CB9              CMP.B   R3L,R1L
   \   211E  4558              BCS     ?0285
   \   2120            ?0284:
   1218                    if ((rx_buff[rx_packlen + rx_start-1]) == ETX) {
   \   2120  6A0900E4          MOV.B   @rx_start:16,R1L
   \   2124  F100              MOV.B   #0,R1H
   \   2126  6A0B00E6          MOV.B   @rx_packlen:16,R3L
   \   212A  08B9              ADD.B   R3L,R1L
   \   212C  9100              ADDX.B  #0,R1H
   \   212E  6E1B006F          MOV.B   @(rx_buff-1,R1),R3L
   \   2132  AB03              CMP.B   #3,R3L
   \   2134  4642              BNE     ?0287
   \   2136            ?0286:
   1219                      if (CalcRxChecksum()) {
   \   2136  5E001F8C          JSR     @CalcRxChecksum:16
   \   213A  0D11              MOV.W   R1,R1
   \   213C  4736              BEQ     ?0289
   \   213E            ?0288:
   1220                        if (rx_buff[rx_start + 1] < PC_START_ADDRESS) {
   \   213E  6A0900E4          MOV.B   @rx_start:16,R1L
   \   2142  F100              MOV.B   #0,R1H
   \   2144  6E1B0071          MOV.B   @(rx_buff+1,R1),R3L
   \   2148  ABF0              CMP.B   #240,R3L
   \   214A  4400              BCC     ?0291
   \   214C            ?0290:
   \   214C            ?0291:
   1221                        }
   1222                        if ((rx_buff[rx_start] == GetMyAddress())||
   1223                            (rx_buff[rx_start] == 0)){           /* don't use address*/
   \   214C  6A0900E4          MOV.B   @rx_start:16,R1L
   \   2150  F100              MOV.B   #0,R1H
   \   2152  6DF1              MOV.W   R1,@-SP
   \   2154  5E0001CC          JSR     @GetMyAddress:16
   \   2158  6D73              MOV.W   @SP+,R3
   \   215A  6E380070          MOV.B   @(rx_buff,R3),R0L
   \   215E  1C98              CMP.B   R1L,R0L
   \   2160  470C              BEQ     ?0292
   \   2162  6A0900E4          MOV.B   @rx_start:16,R1L
   \   2166  F100              MOV.B   #0,R1H
   \   2168  6E1B0070          MOV.B   @(rx_buff,R1),R3L
   \   216C  4604              BNE     ?0293
   \   216E            ?0294:
   \   216E            ?0295:
   \   216E            ?0292:
   1224                          ret_val = TRUE ;
   \   216E  79060001          MOV.W   #1,R6
   \   2172            ?0293:
   1225                        }
   1226                      } else {
   \   2172  4004              BRA     ?0296
   \   2174            ?0289:
   1227                        ResetRxPointer() ;                            /* reset pointer */
   \   2174  5E001F5A          JSR     @ResetRxPointer:16
   \   2178            ?0296:
   \   2178            ?0287:
   \   2178            ?0285:
   1228                      }
   1229                    }
   1230                  }
   1231                  break ;
   \   2178  4004              BRA     ?0273
   \   217A            ?0297:
   1232                default :
   1233                  ResetRxPointer() ;                                                      /* reset pointer */
   \   217A  5E001F5A          JSR     @ResetRxPointer:16
   1234                  break ;
   \   217E            ?0273:
   1235              }                                                                                                           /* end switch */
   1236              if (++rx_hndx >= RX_SIZE) {                                 /* check pointer */
   \   217E  6A0900E3          MOV.B   @rx_hndx:16,R1L
   \   2182  8901              ADD.B   #1,R1L
   \   2184  6A8900E3          MOV.B   R1L,@rx_hndx:16
   \   2188  A96E              CMP.B   #110,R1L
   \   218A  4504              BCS     ?0299
   \   218C            ?0298:
   1237                ResetRxPointer() ;                                                        /* reset pointer */
   \   218C  5E001F5A          JSR     @ResetRxPointer:16
   \   2190            ?0299:
   1238              }
   1239            }                                                                                                                     /* end while.. */
   1240            return ret_val ;
   \   2190  5A002066          JMP     @?0271:16
   \   2194            ?0270:
   \   2194  0D61              MOV.W   R6,R1
   1241          }
   \   2196  6D76              POP     R6
   \   2198  5470              RTS
   1242          
   1243          
   1244          
   1245          
   1246          /*************************************************************************
   1247           *
   1248           *      IRQ 0   (Not used)
   1249           *
   1250           *************************************************************************/
   1251          interrupt [IRQ_0] void Irq0Int(void)
   1252          {
   \   219A            Irq0Int:
   1253          
   1254          }
   \   219A  5670              RTE
   1255          
   1256          
   1257          /*************************************************************************
   1258           *
   1259           *      IRQ 1 , interrupt from AD converter
   1260           *
   1261           *************************************************************************/
   1262          interrupt [IRQ_1] void Irq1Int(void)
   1263          {
   \   219C            Irq1Int:
   \   219C  6DF1              PUSH    R1
   1264          
   1265            if (ad_mode & 0x20) {                                         /* ok for int */
   \   219E  6A09030D          MOV.B   @ad_mode:16,R1L
   \   21A2  E920              AND.B   #32,R1L
   \   21A4  4712              BEQ     ?0301
   \   21A6            ?0300:
   1266              ad_state++ ;                                                                /* Go to next state */
   \   21A6  6A09030C          MOV.B   @ad_state:16,R1L
   \   21AA  8901              ADD.B   #1,R1L
   \   21AC  6A89030C          MOV.B   R1L,@ad_state:16
   1267              ad_mode &= ~0x20;                                                   /* int ok, reset flag */
   \   21B0  7901030D          MOV.W   #ad_mode,R1
   \   21B4  7D107250          BCLR    #5,@R1
   \   21B8            ?0301:
   1268            }
   1269          
   1270          }
   \   21B8  6D71              POP     R1
   \   21BA  5670              RTE
   1271          
   1272          
   1273          /*************************************************************************
   1274           *
   1275           *      IRQ 2 , external int from display connector
   1276           *
   1277           *************************************************************************/
   1278          interrupt [IRQ_2] void Irq2Int(void)
   1279          {
   \   21BC            Irq2Int:
   1280          
   1281          }
   \   21BC  5670              RTE
   1282          
   1283          
   1284          /*************************************************************************
   1285           *
   1286           *  Free running timer capture interrupt routine
   1287           *
   1288           *************************************************************************/
   1289          interrupt [FRT_ICI] void FrtcInt(void)
   1290          {
   \   21BE            FrtcInt:
   \   21BE  6DF6              PUSH    R6
   1291          
   1292            unsigned temp_icr;
   1293          
   1294            temp_icr = FRT_ICR ;
   \   21C0  6B06FF98          MOV.W   @-104:16,R6
   1295            FRT_TCSR &= ~TCSRF_ICF;       /* clear input capt flag */
   \   21C4  7F917270          BCLR    #7,@145:8
   1296          }
   \   21C8  6D76              POP     R6
   \   21CA  5670              RTE
   1297          
   1298          /*************************************************************************
   1299           *
   1300           *  Free running timer overflow interrupt routine
   1301           *
   1302           *************************************************************************/
   1303          interrupt [FRT_FOVI] void FrtoInt(void)
   1304          {
   \   21CC            FrtoInt:
   1305          
   1306            FRT_TCSR &= ~TCSRF_OVF;       /* clear overflow flag */
   \   21CC  7F917240          BCLR    #4,@145:8
   1307          }
   \   21D0  5670              RTE
   1308          
   1309          /*************************************************************************
   1310           *
   1311           *  Timer interrupt routine
   1312           *
   1313           *  This routine is called each msec
   1314           *
   1315           *************************************************************************/
   1316          interrupt [TMR_CMI1A] void TimInt(void)
   1317          {
   \   21D2            TimInt:
   \   21D2  6DF0              PUSH    R0
   \   21D4  6DF1              PUSH    R1
   \   21D6  6DF2              PUSH    R2
   \   21D8  6DF3              PUSH    R3
   1318          
   1319            TMR1_TCSR &= ~(TCSR_CMFB | TCSR_CMFA | TCSR_OVF);
   \   21DA  29D1              MOV.B   @209:8,R1L
   \   21DC  E91F              AND.B   #31,R1L
   \   21DE  39D1              MOV.B   R1L,@209:8
   1320            /* Clear match to reenable interrupt */
   1321          
   1322            if (ms_delay_cnt) {                                                   /* count down 1 ms delay */
   \   21E0  6B010310          MOV.W   @ms_delay_cnt+2:16,R1
   \   21E4  6B00030E          MOV.W   @ms_delay_cnt:16,R0
   \   21E8  1419              OR.B    R1H,R1L
   \   21EA  1408              OR.B    R0H,R0L
   \   21EC  1489              OR.B    R0L,R1L
   \   21EE  4718              BEQ     ?0303
   \   21F0            ?0302:
   1323              ms_delay_cnt-- ;
   \   21F0  6B00030E          MOV.W   @ms_delay_cnt:16,R0
   \   21F4  6B010310          MOV.W   @ms_delay_cnt+2:16,R1
   \   21F8  89FF              ADD.B   #255,R1L
   \   21FA  91FF              ADDX.B  #255,R1H
   \   21FC  98FF              ADDX.B  #-1,R0L
   \   21FE  90FF              ADDX.B  #-1,R0H
   \   2200  6B810310          MOV.W   R1,@ms_delay_cnt+2:16
   \   2204  6B80030E          MOV.W   R0,@ms_delay_cnt:16
   \   2208            ?0303:
   1324            }
   1325          
   1326            if (!--sec_cnt) {                             /* counter for 1 sec. */
   \   2208  6B01023A          MOV.W   @sec_cnt:16,R1
   \   220C  1B01              SUBS.W  #1,R1
   \   220E  6B81023A          MOV.W   R1,@sec_cnt:16
   \   2212  4628              BNE     ?0305
   \   2214            ?0304:
   1327              sec_cnt = SEC_CNT_INIT;
   \   2214  790103E8          MOV.W   #1000,R1
   \   2218  6B81023A          MOV.W   R1,@sec_cnt:16
   1328              if (time_b_cnt) {                   /* timer for temperature readings */
   \   221C  6A090236          MOV.B   @time_b_cnt:16,R1L
   \   2220  470A              BEQ     ?0307
   \   2222            ?0306:
   1329                time_b_cnt-- ;
   \   2222  6A090236          MOV.B   @time_b_cnt:16,R1L
   \   2226  89FF              ADD.B   #-1,R1L
   \   2228  6A890236          MOV.B   R1L,@time_b_cnt:16
   \   222C            ?0307:
   1330              }
   1331              if (time_e_cnt) {                   /* timer for eed check*/
   \   222C  6A090237          MOV.B   @time_e_cnt:16,R1L
   \   2230  470A              BEQ     ?0309
   \   2232            ?0308:
   1332                time_e_cnt-- ;
   \   2232  6A090237          MOV.B   @time_e_cnt:16,R1L
   \   2236  89FF              ADD.B   #-1,R1L
   \   2238  6A890237          MOV.B   R1L,@time_e_cnt:16
   \   223C            ?0309:
   \   223C            ?0305:
   1333              }
   1334            }
   1335          
   1336            if (ad_settling) {                                                    /* count down ad setling time */
   \   223C  6B010312          MOV.W   @ad_settling:16,R1
   \   2240  4714              BEQ     ?0311
   \   2242            ?0310:
   1337              if (!--ad_settling) {
   \   2242  6B010312          MOV.W   @ad_settling:16,R1
   \   2246  1B01              SUBS.W  #1,R1
   \   2248  6B810312          MOV.W   R1,@ad_settling:16
   \   224C  4608              BNE     ?0313
   \   224E            ?0312:
   1338                ad_mode |= 0x20;                                          /* Ok for int 1 */
   \   224E  7901030D          MOV.W   #ad_mode,R1
   \   2252  7D107050          BSET    #5,@R1
   \   2256            ?0313:
   \   2256            ?0311:
   1339              }
   1340            }
   1341            /* timeout ad converter */
   1342            if (ad_timeout_cnt) {
   \   2256  6B010238          MOV.W   @ad_timeout_cnt:16,R1
   \   225A  4716              BEQ     ?0315
   \   225C            ?0314:
   1343              if (!--ad_timeout_cnt) {
   \   225C  6B010238          MOV.W   @ad_timeout_cnt:16,R1
   \   2260  1B01              SUBS.W  #1,R1
   \   2262  6B810238          MOV.W   R1,@ad_timeout_cnt:16
   \   2266  460A              BNE     ?0317
   \   2268            ?0316:
   1344                ad_state = IDLE ;
   \   2268  F907              MOV.B   #7,R1L
   \   226A  6A89030C          MOV.B   R1L,@ad_state:16
   1345                ResetADCBySW();
   \   226E  5E000000          JSR     @ResetADCBySW:16
   \   2272            ?0317:
   \   2272            ?0315:
   1346              }
   1347            }
   1348          
   1349            if (rx_timeout) {                                                             /* check timeout on tx0  */
   \   2272  6A0900E7          MOV.B   @rx_timeout:16,R1L
   \   2276  4710              BEQ     ?0319
   \   2278            ?0318:
   1350              if (!--rx_timeout) {
   \   2278  6A0900E7          MOV.B   @rx_timeout:16,R1L
   \   227C  89FF              ADD.B   #-1,R1L
   \   227E  6A8900E7          MOV.B   R1L,@rx_timeout:16
   \   2282  4604              BNE     ?0321
   \   2284            ?0320:
   1351                ResetRxPointer();
   \   2284  5E001F5A          JSR     @ResetRxPointer:16
   \   2288            ?0321:
   \   2288            ?0319:
   1352              }
   1353            }
   1354          
   1355          
   1356            if (tx_tail) {                                                                        /* check tx0 driver */
   \   2288  6A0900E0          MOV.B   @tx_tail:16,R1L
   \   228C  472A              BEQ     ?0323
   \   228E            ?0322:
   1357              if (!--tx_tail) {
   \   228E  6A0900E0          MOV.B   @tx_tail:16,R1L
   \   2292  89FF              ADD.B   #-1,R1L
   \   2294  6A8900E0          MOV.B   R1L,@tx_tail:16
   \   2298  461E              BNE     ?0325
   \   229A            ?0324:
   1358                TxDriver(OFF);
   \   229A  1911              SUB.W   R1,R1
   \   229C  5E000234          JSR     @TxDriver:16
   1359                tx_complete = TRUE;
   \   22A0  F901              MOV.B   #1,R1L
   \   22A2  6A890330          MOV.B   R1L,@tx_complete:16
   1360                ResetRxPointer() ;                        /* reset pointer */
   \   22A6  5E001F5A          JSR     @ResetRxPointer:16
   1361                Led(1, OFF) ;
   \   22AA  1911              SUB.W   R1,R1
   \   22AC  6DF1              MOV.W   R1,@-SP
   \   22AE  79010001          MOV.W   #1,R1
   \   22B2  5E0001E2          JSR     @Led:16
   \   22B6  0B87              ADDS.W  #2,SP
   \   22B8            ?0325:
   \   22B8            ?0323:
   1362              }
   1363            }
   1364          
   1365            if (wait_for_pc) {                                                    /* delay before sending ch0 */
   \   22B8  6A0900E1          MOV.B   @wait_for_pc:16,R1L
   \   22BC  4740              BEQ     ?0327
   \   22BE            ?0326:
   1366              ad_mode |= 0x01 ;                            /* mark that byte aresent */
   \   22BE  7901030D          MOV.W   #ad_mode,R1
   \   22C2  7D107000          BSET    #0,@R1
   1367              if (!--wait_for_pc) {
   \   22C6  6A0900E1          MOV.B   @wait_for_pc:16,R1L
   \   22CA  89FF              ADD.B   #-1,R1L
   \   22CC  6A8900E1          MOV.B   R1L,@wait_for_pc:16
   \   22D0  462C              BNE     ?0329
   \   22D2            ?0328:
   1368                SCI0_TDR = tx_buff[tx_indx++];
   \   22D2  6A0900DE          MOV.B   @tx_indx:16,R1L
   \   22D6  0A09              INC.B   R1L
   \   22D8  6A8900DE          MOV.B   R1L,@tx_indx:16
   \   22DC  1A09              DEC.B   R1L
   \   22DE  F100              MOV.B   #0,R1H
   \   22E0  6E1B0000          MOV.B   @(tx_buff,R1),R3L
   \   22E4  3BDB              MOV.B   R3L,@219:8
   1369                SCI0_SSR &= ~SSR_TDRE;                            /* clear TDRE-flag */
   \   22E6  7FDC7270          BCLR    #7,@220:8
   1370                SCI0_SCR |= SCR_TIE;                                      /*  enable  tx int */
   \   22EA  7FDA7070          BSET    #7,@218:8
   1371                Led(1, ON) ;
   \   22EE  79010001          MOV.W   #1,R1
   \   22F2  6DF1              MOV.W   R1,@-SP
   \   22F4  79010001          MOV.W   #1,R1
   \   22F8  5E0001E2          JSR     @Led:16
   \   22FC  0B87              ADDS.W  #2,SP
   \   22FE            ?0329:
   \   22FE            ?0327:
   1372              }
   1373            }
   1374          }
   \   22FE  6D73              POP     R3
   \   2300  6D72              POP     R2
   \   2302  6D71              POP     R1
   \   2304  6D70              POP     R0
   \   2306  5670              RTE
   1375          
   1376          
   1377          /*************************************************************************
   1378           *
   1379           *  Transmit interrupt routine  TX0
   1380           *
   1381           *  This routine is called on transmition on serial line 0 (RS485)
   1382           *
   1383           ****************************************************************************/
   1384          interrupt [SCI_TXI0] void Tx0Int(void)
   1385          {
   \   2308            Tx0Int:
   \   2308  6DF1              PUSH    R1
   \   230A  6DF3              PUSH    R3
   \   230C  6DF6              PUSH    R6
   1386          
   1387            char status;
   1388          
   1389            status = SCI0_SSR;
   \   230E  2EDC              MOV.B   @220:8,R6L
   1390            if (tx_indx < tx_bytes) {            /* More to send ? */
   \   2310  6A0900DF          MOV.B   @tx_bytes:16,R1L
   \   2314  6A0B00DE          MOV.B   @tx_indx:16,R3L
   \   2318  1C9B              CMP.B   R1L,R3L
   \   231A  4424              BCC     ?0331
   \   231C            ?0330:
   1391              SCI0_TDR = tx_buff[tx_indx++];
   \   231C  6A0900DE          MOV.B   @tx_indx:16,R1L
   \   2320  0A09              INC.B   R1L
   \   2322  6A8900DE          MOV.B   R1L,@tx_indx:16
   \   2326  1A09              DEC.B   R1L
   \   2328  F100              MOV.B   #0,R1H
   \   232A  6E1B0000          MOV.B   @(tx_buff,R1),R3L
   \   232E  3BDB              MOV.B   R3L,@219:8
   1392              SCI0_SSR = status & ~SSR_TDRE;        /* clear TDRE-flag */
   \   2330  0CE9              MOV.B   R6L,R1L
   \   2332  E97F              AND.B   #127,R1L
   \   2334  39DC              MOV.B   R1L,@220:8
   1393              ad_mode |= 0x01 ;                            /* mark that byte are sent */
   \   2336  7901030D          MOV.W   #ad_mode,R1
   \   233A  7D107000          BSET    #0,@R1
   1394            } else {
   \   233E  400A              BRA     ?0332
   \   2340            ?0331:
   1395              SCI0_SCR &= ~SCR_TIE;                      /* Disable tx int */
   \   2340  7FDA7270          BCLR    #7,@218:8
   1396              tx_tail = TXTAIL ;                 /* driver on for last char */
   \   2344  F902              MOV.B   #2,R1L
   \   2346  6A8900E0          MOV.B   R1L,@tx_tail:16
   \   234A            ?0332:
   1397            }
   1398          }
   \   234A  6D76              POP     R6
   \   234C  6D73              POP     R3
   \   234E  6D71              POP     R1
   \   2350  5670              RTE
   1399          
   1400          
   1401          /*************************************************************************
   1402           *
   1403           *  Error interrupt routine
   1404           *
   1405           *  Error on RS485 port 0 goes here.
   1406           *
   1407           *************************************************************************/
   1408          interrupt [SCI_ERI0] void Err0Int(void)
   1409          {
   \   2352            Err0Int:
   \   2352  6DF1              PUSH    R1
   \   2354  6DF6              PUSH    R6
   1410          
   1411            char status;
   1412          
   1413            status = SCI0_SSR;
   1414            SCI0_SSR = status & ~(SSR_ORER | SSR_FER | SSR_PER);
   \   2356  29DC              MOV.B   @220:8,R1L
   \   2358  0C9E              MOV.B   R1L,R6L
   \   235A  E9C7              AND.B   #199,R1L
   \   235C  39DC              MOV.B   R1L,@220:8
   1415          
   1416          }
   \   235E  6D76              POP     R6
   \   2360  6D71              POP     R1
   \   2362  5670              RTE
   1417          
   1418          
   1419          /*************************************************************************
   1420           *
   1421           *  Receive interrupt routine  RX0
   1422           *
   1423           *  Char received on serial port 0
   1424           *
   1425           *************************************************************************/
   1426          interrupt [SCI_RXI0] void Rx0Int(void)
   1427          {
   \   2364            Rx0Int:
   \   2364  6DF0              PUSH    R0
   \   2366  6DF1              PUSH    R1
   \   2368  6DF2              PUSH    R2
   \   236A  6DF3              PUSH    R3
   \   236C  6DF5              PUSH    R5
   \   236E  6DF6              PUSH    R6
   1428          
   1429            char status, bufch;
   1430          
   1431            status = SCI0_SSR;
   \   2370  2DDC              MOV.B   @220:8,R5L
   1432            bufch = SCI0_RDR;
   \   2372  2EDD              MOV.B   @221:8,R6L
   1433          
   1434          
   1435            if (tx_complete) {                                            /* ok to receive? */
   \   2374  6A090330          MOV.B   @tx_complete:16,R1L
   \   2378  4604              BNE     $+6
   \   237A  5A0023F4          JMP     @?0334:16
   \   237E            ?0333:
   1436              switch (rx_state) {                     /* check state */
   \   237E  6A09032F          MOV.B   @rx_state:16,R1L
   \   2382  A900              CMP.B   #0,R1L
   \   2384  4650              BNE     ?0343
   \   2386            ?0336:
   1437                case SYNC :
   1438                  if (bufch == STX) {
   \   2386  AE02              CMP.B   #2,R6L
   \   2388  460C              BNE     ?0338
   \   238A            ?0337:
   1439                    sync_cnt ++ ;               // cont sync
   \   238A  6A0900E8          MOV.B   @sync_cnt:16,R1L
   \   238E  8901              ADD.B   #1,R1L
   \   2390  6A8900E8          MOV.B   R1L,@sync_cnt:16
   1440                  } else if (sync_cnt >= 2) {
   \   2394  403E              BRA     ?0339
   \   2396            ?0338:
   \   2396  6A0900E8          MOV.B   @sync_cnt:16,R1L
   \   239A  A902              CMP.B   #2,R1L
   \   239C  4530              BCS     ?0341
   \   239E            ?0340:
   1441                    sync_cnt = 0 ;              // reset counter
   \   239E  F900              MOV.B   #0,R1L
   \   23A0  6A8900E8          MOV.B   R1L,@sync_cnt:16
   1442                    rx_state = HEADER ;
   \   23A4  F901              MOV.B   #1,R1L
   \   23A6  6A89032F          MOV.B   R1L,@rx_state:16
   1443                    rx_indx = 0 ;
   \   23AA  F900              MOV.B   #0,R1L
   \   23AC  6A8900E2          MOV.B   R1L,@rx_indx:16
   1444                    rx_hndx = 0 ;
   1445                    rx_start = rx_hndx ;            /* start after the two STX */
   \   23B0  F900              MOV.B   #0,R1L
   \   23B2  6A8900E3          MOV.B   R1L,@rx_hndx:16
   \   23B6  6A8900E4          MOV.B   R1L,@rx_start:16
   1446                    rx_buff[rx_indx++] = bufch;
   \   23BA  6A0900E2          MOV.B   @rx_indx:16,R1L
   \   23BE  0A09              INC.B   R1L
   \   23C0  6A8900E2          MOV.B   R1L,@rx_indx:16
   \   23C4  1A09              DEC.B   R1L
   \   23C6  F100              MOV.B   #0,R1H
   \   23C8  6E9E0070          MOV.B   R6L,@(rx_buff,R1)
   1447                  } else {
   \   23CC  4006              BRA     ?0342
   \   23CE            ?0341:
   1448                    sync_cnt = 0 ;                  // start over once more
   \   23CE  F900              MOV.B   #0,R1L
   \   23D0  6A8900E8          MOV.B   R1L,@sync_cnt:16
   \   23D4            ?0342:
   \   23D4            ?0339:
   1449                  }
   1450                  break;
   \   23D4  4012              BRA     ?0335
   \   23D6            ?0343:
   1451                default:
   1452                  rx_buff[rx_indx++] = bufch;
   \   23D6  6A0900E2          MOV.B   @rx_indx:16,R1L
   \   23DA  0A09              INC.B   R1L
   \   23DC  6A8900E2          MOV.B   R1L,@rx_indx:16
   \   23E0  1A09              DEC.B   R1L
   \   23E2  F100              MOV.B   #0,R1H
   \   23E4  6E9E0070          MOV.B   R6L,@(rx_buff,R1)
   1453                  break;
   \   23E8            ?0335:
   1454              }
   1455              if (rx_indx >= RX_SIZE) {           /* check rx pointer */
   \   23E8  6A0900E2          MOV.B   @rx_indx:16,R1L
   \   23EC  A96E              CMP.B   #110,R1L
   \   23EE  4504              BCS     ?0345
   \   23F0            ?0344:
   1456                ResetRxPointer() ;              // reset pointer
   \   23F0  5E001F5A          JSR     @ResetRxPointer:16
   \   23F4            ?0345:
   \   23F4            ?0334:
   1457              }
   1458            }
   1459            SCI0_SSR = status & ~SSR_RDRF;                        /* Reset RDRF */
   \   23F4  0CD9              MOV.B   R5L,R1L
   \   23F6  E9BF              AND.B   #191,R1L
   \   23F8  39DC              MOV.B   R1L,@220:8
   1460          }
   \   23FA  6D76              POP     R6
   \   23FC  6D75              POP     R5
   \   23FE  6D73              POP     R3
   \   2400  6D72              POP     R2
   \   2402  6D71              POP     R1
   \   2404  6D70              POP     R0
   \   2406  5670              RTE
   1461          
   1462          
   1463          /*************************************************************************
   1464           *
   1465           *  Transmit interrupt routine  TX1
   1466           *
   1467           *  This routine is called on transmition on serial line 1
   1468           *
   1469           ****************************************************************************/
   1470          interrupt [SCI_TXI1] void Tx1Int(void)
   1471          {
   \   2408            Tx1Int:
   \   2408  6DF1              PUSH    R1
   \   240A  6DF6              PUSH    R6
   1472          
   1473            char status;
   1474          
   1475            status = SCI1_SSR;
   \   240C  2EE4              MOV.B   @228:8,R6L
   1476            SCI1_TDR = 0;
   \   240E  F900              MOV.B   #0,R1L
   \   2410  39E3              MOV.B   R1L,@227:8
   1477            SCI1_SSR = status & ~SSR_TDRE;        /* clear TDRE-flag */
   \   2412  0CE9              MOV.B   R6L,R1L
   \   2414  E97F              AND.B   #127,R1L
   \   2416  39E4              MOV.B   R1L,@228:8
   1478            SCI1_SCR &= ~SCR_TIE;                                 /* Disable tx int */
   \   2418  7FE27270          BCLR    #7,@226:8
   1479          }
   \   241C  6D76              POP     R6
   \   241E  6D71              POP     R1
   \   2420  5670              RTE
   1480          
   1481          
   1482          /*************************************************************************
   1483           *
   1484           *  Error interrupt routine
   1485           *
   1486           *  Error on port 1 goes here.
   1487           *
   1488           *************************************************************************/
   1489          interrupt [SCI_ERI1] void Err1Int(void)
   1490          {
   \   2422            Err1Int:
   \   2422  6DF1              PUSH    R1
   \   2424  6DF6              PUSH    R6
   1491          
   1492            char status;
   1493          
   1494            status = SCI1_SSR;
   1495            SCI1_SSR = status & ~(SSR_ORER | SSR_FER | SSR_PER);
   \   2426  29E4              MOV.B   @228:8,R1L
   \   2428  0C9E              MOV.B   R1L,R6L
   \   242A  E9C7              AND.B   #199,R1L
   \   242C  39E4              MOV.B   R1L,@228:8
   1496          
   1497          }
   \   242E  6D76              POP     R6
   \   2430  6D71              POP     R1
   \   2432  5670              RTE
   1498          
   1499          
   1500          /*************************************************************************
   1501           *
   1502           *  Receive interrupt routine  RX1
   1503           *
   1504           *  Char received on serial port 1
   1505           *
   1506           *************************************************************************/
   1507          interrupt [SCI_RXI1] void Rx1Int(void)
   1508          {
   \   2434            Rx1Int:
   \   2434  6DF1              PUSH    R1
   \   2436  6DF5              PUSH    R5
   \   2438  6DF6              PUSH    R6
   1509          
   1510            char status, bufch;
   1511          
   1512            status = SCI1_SSR;
   \   243A  2EE4              MOV.B   @228:8,R6L
   1513            bufch  = SCI1_RDR;
   \   243C  2DE5              MOV.B   @229:8,R5L
   1514            SCI1_SSR = status & ~SSR_RDRF;        /* Reset RDRF */
   \   243E  0CE9              MOV.B   R6L,R1L
   \   2440  E9BF              AND.B   #191,R1L
   \   2442  39E4              MOV.B   R1L,@228:8
   1515          }
   \   2444  6D76              POP     R6
   \   2446  6D75              POP     R5
   \   2448  6D71              POP     R1
   \   244A  5670              RTE
   1516          
   1517          
   1518          /*************************************************************************
   1519           *
   1520           *  MAIN ROUTINE
   1521           *
   1522           *************************************************************************/
   1523          int main(void)
   1524          {
   \   244C            main:
   1525            int           cnt ;
   1526          
   1527            InitRegs();
   \   244C  5E00001A          JSR     @InitRegs:16
   1528            InitVar();
   \   2450  5E000064          JSR     @InitVar:16
   1529            InitStartup();
   \   2454  5E00018E          JSR     @InitStartup:16
   1530          
   1531            ResetADCBySW();
   \   2458  5E000000          JSR     @ResetADCBySW:16
   1532          
   1533            set_interrupt_mask(0);        /* Enable interrupt */
   \   245C  067F              ANDC    #127,CCR
   1534            SCI0_SCR = 0x7c;                      /* enable rx0/tx0 + rx0 interrupt */
   \   245E  F97C              MOV.B   #124,R1L
   \   2460  39DA              MOV.B   R1L,@218:8
   1535          
   1536            CheckEepChannel()     ;
   \   2462  5E000000          JSR     @CheckEepChannel:16
   \   2466            ?0347:
   1537          
   1538            while (TRUE) {
   1539              KickDog();
   \   2466  5E0001D8          JSR     @KickDog:16
   1540              /* communication starts here */
   1541              if (rx_indx > rx_hndx) {                    /* new char in buffer ? */
   \   246A  6A0900E3          MOV.B   @rx_hndx:16,R1L
   \   246E  6A0B00E2          MOV.B   @rx_indx:16,R3L
   \   2472  1C9B              CMP.B   R1L,R3L
   \   2474  4310              BLS     ?0350
   \   2476            ?0349:
   1542                if (ReceiveRxPacket()) {
   \   2476  5E00205C          JSR     @ReceiveRxPacket:16
   \   247A  0D11              MOV.W   R1,R1
   \   247C  4708              BEQ     ?0352
   \   247E            ?0351:
   1543                  HandleRxPacket() ;                      /* Handle here */
   \   247E  5E001FE4          JSR     @HandleRxPacket:16
   1544                  ResetRxPointer() ;                      /* reset pointer */
   \   2482  5E001F5A          JSR     @ResetRxPointer:16
   \   2486            ?0352:
   \   2486            ?0350:
   1545                }
   1546              }
   1547              /* AD convert starts here */
   1548              CheckConvert();
   \   2486  5E00034E          JSR     @CheckConvert:16
   1549            }                                                                                             /* end while.. */
   1550          
   1551            return 0 ;
   \   248A  40DA              BRA     ?0347
   \   248C  1911              SUB.W   R1,R1
   1552          }
   \   248E  5470              RTS
   1553          
   1554          /* end program ******************************************************/
   1555          
   \   0000                    RSEG    CONST
   \   0000            crc:
   \   0000  0000              DC.W    0
   \   0002  005E              DC.W    94
   \   0004  00BC              DC.W    188
   \   0006  00E2              DC.W    226
   \   0008  0061              DC.W    97
   \   000A  003F              DC.W    63
   \   000C  00DD              DC.W    221
   \   000E  0083              DC.W    131
   \   0010  00C2              DC.W    194
   \   0012  009C              DC.W    156
   \   0014  007E              DC.W    126
   \   0016  0020              DC.W    32
   \   0018  00A3              DC.W    163
   \   001A  00FD              DC.W    253
   \   001C  001F              DC.W    31
   \   001E  0041              DC.W    65
   \   0020  009D              DC.W    157
   \   0022  00C3              DC.W    195
   \   0024  0021              DC.W    33
   \   0026  007F              DC.W    127
   \   0028  00FC              DC.W    252
   \   002A  00A2              DC.W    162
   \   002C  0040              DC.W    64
   \   002E  001E              DC.W    30
   \   0030  005F              DC.W    95
   \   0032  0001              DC.W    1
   \   0034  00E3              DC.W    227
   \   0036  00BD              DC.W    189
   \   0038  003E              DC.W    62
   \   003A  0060              DC.W    96
   \   003C  0082              DC.W    130
   \   003E  00DC              DC.W    220
   \   0040  0023              DC.W    35
   \   0042  007D              DC.W    125
   \   0044  009F              DC.W    159
   \   0046  00C1              DC.W    193
   \   0048  0042              DC.W    66
   \   004A  001C              DC.W    28
   \   004C  00FE              DC.W    254
   \   004E  00A0              DC.W    160
   \   0050  00E1              DC.W    225
   \   0052  00BF              DC.W    191
   \   0054  005D              DC.W    93
   \   0056  0003              DC.W    3
   \   0058  0080              DC.W    128
   \   005A  00DE              DC.W    222
   \   005C  003C              DC.W    60
   \   005E  0062              DC.W    98
   \   0060  00BE              DC.W    190
   \   0062  00E0              DC.W    224
   \   0064  0002              DC.W    2
   \   0066  005C              DC.W    92
   \   0068  00DF              DC.W    223
   \   006A  0081              DC.W    129
   \   006C  0063              DC.W    99
   \   006E  003D              DC.W    61
   \   0070  007C              DC.W    124
   \   0072  0022              DC.W    34
   \   0074  00C0              DC.W    192
   \   0076  009E              DC.W    158
   \   0078  001D              DC.W    29
   \   007A  0043              DC.W    67
   \   007C  00A1              DC.W    161
   \   007E  00FF              DC.W    255
   \   0080  0046              DC.W    70
   \   0082  0018              DC.W    24
   \   0084  00FA              DC.W    250
   \   0086  00A4              DC.W    164
   \   0088  0027              DC.W    39
   \   008A  0079              DC.W    121
   \   008C  009B              DC.W    155
   \   008E  00C5              DC.W    197
   \   0090  0084              DC.W    132
   \   0092  00DA              DC.W    218
   \   0094  0038              DC.W    56
   \   0096  0066              DC.W    102
   \   0098  00E5              DC.W    229
   \   009A  00BB              DC.W    187
   \   009C  0059              DC.W    89
   \   009E  0007              DC.W    7
   \   00A0  00DB              DC.W    219
   \   00A2  0085              DC.W    133
   \   00A4  0067              DC.W    103
   \   00A6  0039              DC.W    57
   \   00A8  00BA              DC.W    186
   \   00AA  00E4              DC.W    228
   \   00AC  0006              DC.W    6
   \   00AE  0058              DC.W    88
   \   00B0  0019              DC.W    25
   \   00B2  0047              DC.W    71
   \   00B4  00A5              DC.W    165
   \   00B6  00FB              DC.W    251
   \   00B8  0078              DC.W    120
   \   00BA  0026              DC.W    38
   \   00BC  00C4              DC.W    196
   \   00BE  009A              DC.W    154
   \   00C0  0065              DC.W    101
   \   00C2  003B              DC.W    59
   \   00C4  00D9              DC.W    217
   \   00C6  0087              DC.W    135
   \   00C8  0004              DC.W    4
   \   00CA  005A              DC.W    90
   \   00CC  00B8              DC.W    184
   \   00CE  00E6              DC.W    230
   \   00D0  00A7              DC.W    167
   \   00D2  00F9              DC.W    249
   \   00D4  001B              DC.W    27
   \   00D6  0045              DC.W    69
   \   00D8  00C6              DC.W    198
   \   00DA  0098              DC.W    152
   \   00DC  007A              DC.W    122
   \   00DE  0024              DC.W    36
   \   00E0  00F8              DC.W    248
   \   00E2  00A6              DC.W    166
   \   00E4  0044              DC.W    68
   \   00E6  001A              DC.W    26
   \   00E8  0099              DC.W    153
   \   00EA  00C7              DC.W    199
   \   00EC  0025              DC.W    37
   \   00EE  007B              DC.W    123
   \   00F0  003A              DC.W    58
   \   00F2  0064              DC.W    100
   \   00F4  0086              DC.W    134
   \   00F6  00D8              DC.W    216
   \   00F8  005B              DC.W    91
   \   00FA  0005              DC.W    5
   \   00FC  00E7              DC.W    231
   \   00FE  00B9              DC.W    185
   \   0100  008C              DC.W    140
   \   0102  00D2              DC.W    210
   \   0104  0030              DC.W    48
   \   0106  006E              DC.W    110
   \   0108  00ED              DC.W    237
   \   010A  00B3              DC.W    179
   \   010C  0051              DC.W    81
   \   010E  000F              DC.W    15
   \   0110  004E              DC.W    78
   \   0112  0010              DC.W    16
   \   0114  00F2              DC.W    242
   \   0116  00AC              DC.W    172
   \   0118  002F              DC.W    47
   \   011A  0071              DC.W    113
   \   011C  0093              DC.W    147
   \   011E  00CD              DC.W    205
   \   0120  0011              DC.W    17
   \   0122  004F              DC.W    79
   \   0124  00AD              DC.W    173
   \   0126  00F3              DC.W    243
   \   0128  0070              DC.W    112
   \   012A  002E              DC.W    46
   \   012C  00CC              DC.W    204
   \   012E  0092              DC.W    146
   \   0130  00D3              DC.W    211
   \   0132  008D              DC.W    141
   \   0134  006F              DC.W    111
   \   0136  0031              DC.W    49
   \   0138  00B2              DC.W    178
   \   013A  00EC              DC.W    236
   \   013C  000E              DC.W    14
   \   013E  0050              DC.W    80
   \   0140  00AF              DC.W    175
   \   0142  00F1              DC.W    241
   \   0144  0013              DC.W    19
   \   0146  004D              DC.W    77
   \   0148  00CE              DC.W    206
   \   014A  0090              DC.W    144
   \   014C  0072              DC.W    114
   \   014E  002C              DC.W    44
   \   0150  006D              DC.W    109
   \   0152  0033              DC.W    51
   \   0154  00D1              DC.W    209
   \   0156  008F              DC.W    143
   \   0158  000C              DC.W    12
   \   015A  0052              DC.W    82
   \   015C  00B0              DC.W    176
   \   015E  00EE              DC.W    238
   \   0160  0032              DC.W    50
   \   0162  006C              DC.W    108
   \   0164  008E              DC.W    142
   \   0166  00D0              DC.W    208
   \   0168  0053              DC.W    83
   \   016A  000D              DC.W    13
   \   016C  00EF              DC.W    239
   \   016E  00B1              DC.W    177
   \   0170  00F0              DC.W    240
   \   0172  00AE              DC.W    174
   \   0174  004C              DC.W    76
   \   0176  0012              DC.W    18
   \   0178  0091              DC.W    145
   \   017A  00CF              DC.W    207
   \   017C  002D              DC.W    45
   \   017E  0073              DC.W    115
   \   0180  00CA              DC.W    202
   \   0182  0094              DC.W    148
   \   0184  0076              DC.W    118
   \   0186  0028              DC.W    40
   \   0188  00AB              DC.W    171
   \   018A  00F5              DC.W    245
   \   018C  0017              DC.W    23
   \   018E  0049              DC.W    73
   \   0190  0008              DC.W    8
   \   0192  0056              DC.W    86
   \   0194  00B4              DC.W    180
   \   0196  00EA              DC.W    234
   \   0198  0069              DC.W    105
   \   019A  0037              DC.W    55
   \   019C  00D5              DC.W    213
   \   019E  008B              DC.W    139
   \   01A0  0057              DC.W    87
   \   01A2  0009              DC.W    9
   \   01A4  00EB              DC.W    235
   \   01A6  00B5              DC.W    181
   \   01A8  0036              DC.W    54
   \   01AA  0068              DC.W    104
   \   01AC  008A              DC.W    138
   \   01AE  00D4              DC.W    212
   \   01B0  0095              DC.W    149
   \   01B2  00CB              DC.W    203
   \   01B4  0029              DC.W    41
   \   01B6  0077              DC.W    119
   \   01B8  00F4              DC.W    244
   \   01BA  00AA              DC.W    170
   \   01BC  0048              DC.W    72
   \   01BE  0016              DC.W    22
   \   01C0  00E9              DC.W    233
   \   01C2  00B7              DC.W    183
   \   01C4  0055              DC.W    85
   \   01C6  000B              DC.W    11
   \   01C8  0088              DC.W    136
   \   01CA  00D6              DC.W    214
   \   01CC  0034              DC.W    52
   \   01CE  006A              DC.W    106
   \   01D0  002B              DC.W    43
   \   01D2  0075              DC.W    117
   \   01D4  0097              DC.W    151
   \   01D6  00C9              DC.W    201
   \   01D8  004A              DC.W    74
   \   01DA  0014              DC.W    20
   \   01DC  00F6              DC.W    246
   \   01DE  00A8              DC.W    168
   \   01E0  0074              DC.W    116
   \   01E2  002A              DC.W    42
   \   01E4  00C8              DC.W    200
   \   01E6  0096              DC.W    150
   \   01E8  0015              DC.W    21
   \   01EA  004B              DC.W    75
   \   01EC  00A9              DC.W    169
   \   01EE  00F7              DC.W    247
   \   01F0  00B6              DC.W    182
   \   01F2  00E8              DC.W    232
   \   01F4  000A              DC.W    10
   \   01F6  0054              DC.W    84
   \   01F8  00D7              DC.W    215
   \   01FA  0089              DC.W    137
   \   01FC  006B              DC.W    107
   \   01FE  0035              DC.W    53
   \   0000                    COMMON  INTVEC
   \   0008                    DS.B    8
   \   0008  219A              DC.W    Irq0Int
   \   000A  219C              DC.W    Irq1Int
   \   000C  21BC              DC.W    Irq2Int
   \   0010                    DS.B    2
   \   0010  21BE              DC.W    FrtcInt
   \   0016                    DS.B    4
   \   0016  21CC              DC.W    FrtoInt
   \   001E                    DS.B    6
   \   001E  21D2              DC.W    TimInt
   \   0024                    DS.B    4
   \   0024  2352              DC.W    Err0Int
   \   0026  2364              DC.W    Rx0Int
   \   0028  2308              DC.W    Tx0Int
   \   002A  2422              DC.W    Err1Int
   \   002C  2434              DC.W    Rx1Int
   \   002E  2408              DC.W    Tx1Int
   \   0000                    RSEG    UDATA
   \   0000            tx_buff:
   \   0070                    DS.B    112
   \   0070            rx_buff:
   \   00DE                    DS.B    110
   \   00DE            tx_indx:
   \   00DF                    DS.B    1
   \   00DF            tx_bytes:
   \   00E0                    DS.B    1
   \   00E0            tx_tail:
   \   00E1                    DS.B    1
   \   00E1            wait_for_pc:
   \   00E2                    DS.B    1
   \   00E2            rx_indx:
   \   00E3                    DS.B    1
   \   00E3            rx_hndx:
   \   00E4                    DS.B    1
   \   00E4            rx_start:
   \   00E5                    DS.B    1
   \   00E5            rx_counter:
   \   00E6                    DS.B    1
   \   00E6            rx_packlen:
   \   00E7                    DS.B    1
   \   00E7            rx_timeout:
   \   00E8                    DS.B    1
   \   00E8            sync_cnt:
   \   00E9                    DS.B    1
   \   00EA                    DS.B    1
   \   00EA            sens_data:
   \   00F2                    DS.B    8
   \   00F2            sens_nl1:
   \   00F3                    DS.B    1
   \   00F3            sens_nl2:
   \   00F4                    DS.B    1
   \   00F4            packed_data:
   \   0234                    DS.B    320
   \   0234            eep_status:
   \   0235                    DS.B    1
   \   0235            time_b_temp:
   \   0236                    DS.B    1
   \   0236            time_b_cnt:
   \   0237                    DS.B    1
   \   0237            time_e_cnt:
   \   0238                    DS.B    1
   \   0238            ad_timeout_cnt:
   \   023A                    DS.B    2
   \   023A            sec_cnt:
   \   023C                    DS.B    2
   \   023C            curr_sens_data:
   \   023E                    DS.B    2
   \   023E            cal_data:
   \   025A                    DS.B    28
   \   025A            raw_data:
   \   0276                    DS.B    28
   \   0276            mes_data:
   \   02AE                    DS.B    56
   \   02AE            gain:
   \   02E6                    DS.B    56
   \   02E6            offset:
   \   0302                    DS.B    28
   \   0302            cal_gain:
   \   0306                    DS.B    4
   \   0306            cal_zero:
   \   0308                    DS.B    2
   \   0308            not_mes_data:
   \   0309                    DS.B    1
   \   0309            not_raw_data:
   \   030A                    DS.B    1
   \   030A            not_cal_data:
   \   030B                    DS.B    1
   \   030B            curr_ad_ch:
   \   030C                    DS.B    1
   \   030C            ad_state:
   \   030D                    DS.B    1
   \   030D            ad_mode:
   \   030E                    DS.B    1
   \   030E            ms_delay_cnt:
   \   0312                    DS.B    4
   \   0312            ad_settling:
   \   0314                    DS.B    2
   \   0314            ad_gain:
   \   0315                    DS.B    1
   \   0315            ch_stat:
   \   0323                    DS.B    14
   \   0323            eep_type:
   \   032B                    DS.B    8
   \   032B            p_filter:
   \   032C                    DS.B    1
   \   032C            t_filter:
   \   032D                    DS.B    1
   \   032D            o_filter:
   \   032E                    DS.B    1
   \   032E            my_address:
   \   032F                    DS.B    1
   \   032F            rx_state:
   \   0330                    DS.B    1
   \   0330            tx_complete:
   \   0331                    DS.B    1
   \   0331            sendtail:
   \   0332                    DS.B    1
   \   0332            display:
   \   0340                    DS.B    14
   \   0340                    END

Errors: none
Warnings: none
Code size: 9360
Constant size: 560
Static variable size: Data(832) Iram(0)

