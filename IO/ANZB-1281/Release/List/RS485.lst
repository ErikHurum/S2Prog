###############################################################################
#
# IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR           28/Sep/2017  11:33:06
# Copyright 1996-2017 IAR Systems AB.
# Startup license - IAR Embedded Workbench for Atmel AVR 7.10
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\RS485.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EWE9A4.tmp
#        (D:\S2Prog\IO\ANZB\Src\RS485.c --cpu=m1280 -ms -o
#        D:\S2Prog\IO\ANZB\Release\Obj -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\ANZB\Release\List -y --initializers_in_flash --no_tbaa
#        --enable_external_bus -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\ANZB\INC\ -I D:\S2Prog\IO\ANZB\..\..\SHARED\INC\
#        --eeprom_size 4096 --clib -Oh)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB\Release\List\RS485.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Release\Obj\RS485.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\RS485.c
      1          
      2          /****************************************************************************************
      3          / Uart communication to external ADcards
      4          /
      5          ***************************************************************************************/
      6          
      7          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          //#include "stdlib.h"
     13          //#include "string.h"
     14          
     15          
     16          
     17          /************************************************ *************************
     18          *   (This is a timer calback)
     19          *  Timout timer UART 0
     20          *
     21          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     22          void TimoutUART0(void) {
   \                     TimoutUART0:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     23          
     24              U0_MCR &= ~RTS;      // set RTS off
   \   00000000   9100110C           LDS     R16, 4364
   \   00000004   7F0D               ANDI    R16, 0xFD
   \   00000006   9300110C           STS     4364, R16
     25          }
   \   0000000A   9508               RET
     26          
     27          /*************************************************************************
     28          *   (This is a timer calback)
     29          *  Timout timer UART 1
     30          *
     31          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     32          void TimoutUART1(void) {
   \                     TimoutUART1:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     33          
     34              U1_MCR &= ~RTS;       // set RTS off
   \   00000000   91001104           LDS     R16, 4356
   \   00000004   7F0D               ANDI    R16, 0xFD
   \   00000006   93001104           STS     4356, R16
     35          }
   \   0000000A   9508               RET
     36          
     37          
     38          /*************************************************************************
     39          *   (This is a task)
     40          *  Usart handler UART send request
     41          *
     42          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     43          void ExtRS485Ctl(void) {
   \                     ExtRS485Ctl:
   \   00000000   92EA               ST      -Y, R14
   \   00000002   92CA               ST      -Y, R12
   \   00000004   92BA               ST      -Y, R11
   \   00000006   929A               ST      -Y, R9
   \   00000008   928A               ST      -Y, R8
   \   0000000A   927A               ST      -Y, R7
   \   0000000C   926A               ST      -Y, R6
   \   0000000E   925A               ST      -Y, R5
   \   00000010   924A               ST      -Y, R4
   \   00000012   93BA               ST      -Y, R27
   \   00000014   93AA               ST      -Y, R26
   \   00000016   939A               ST      -Y, R25
   \   00000018   938A               ST      -Y, R24
   \   0000001A                      REQUIRE ?Register_R4_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R5_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R6_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R7_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R8_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R9_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R11_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R12_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R14_is_cg_reg
   \   0000001A                      REQUIRE __RSTACK_in_external_ram_new_way
     44              char SeqCnt = 0;
   \   0000001A   E090               LDI     R25, 0
     45              char PowerOnTimer = POWER_ON_CNT;                    // do not make a unwanted power on sequence in the starting phase
   \   0000001C   E005               LDI     R16, 5
   \   0000001E   2EB0               MOV     R11, R16
     46              char EventStatus;
     47              char AskMD[2];
     48          
     49              Init16552(0, 9600);                                      // Init UART channel 0
   \   00000020   E840               LDI     R20, 128
   \   00000022   E255               LDI     R21, 37
   \   00000024   E060               LDI     R22, 0
   \   00000026   E070               LDI     R23, 0
   \   00000028   E000               LDI     R16, 0
   \   0000002A   ....               RCALL   Init16552
     50              Init16552(1, 9600);                                      // Init UART channel 1
   \   0000002C   9390....           STS     (UART16552 + 28), R25
   \   00000030   9390....           STS     (UART16552 + 29), R25
   \   00000034   9390....           STS     (UART16552 + 30), R25
   \   00000038   9390....           STS     (UART16552 + 31), R25
   \   0000003C   9390....           STS     (UART16552 + 32), R25
   \   00000040   9390....           STS     (UART16552 + 33), R25
   \   00000044   9390....           STS     (UART16552 + 38), R25
   \   00000048   9390....           STS     (UART16552 + 39), R25
   \   0000004C   9390....           STS     (UART16552 + 40), R25
   \   00000050   9390....           STS     (UART16552 + 41), R25
   \   00000054   9390....           STS     (UART16552 + 42), R25
   \   00000058   9390....           STS     (UART16552 + 43), R25
   \   0000005C   9390....           STS     (UART16552 + 44), R25
   \   00000060   9390....           STS     (UART16552 + 45), R25
   \   00000064   9390....           STS     (UART16552 + 34), R25
   \   00000068   EF0A               LDI     R16, 250
   \   0000006A   9300....           STS     (UART16552 + 46), R16
   \   0000006E   9390....           STS     (UART16552 + 47), R25
   \   00000072   ....               LDI     R16, LOW(TxBuf16552Ch1)
   \   00000074   ....               LDI     R17, (TxBuf16552Ch1) >> 8
   \   00000076   9300....           STS     (UART16552 + 26), R16
   \   0000007A   9310....           STS     (UART16552 + 27), R17
   \   0000007E   ....               LDI     R16, LOW(RxBuf16552Ch1)
   \   00000080   ....               LDI     R17, (RxBuf16552Ch1) >> 8
   \   00000082   9300....           STS     (UART16552 + 36), R16
   \   00000086   9310....           STS     (UART16552 + 37), R17
   \   0000008A   E800               LDI     R16, 128
   \   0000008C   93001103           STS     4355, R16
   \   00000090   E00D               LDI     R16, 13
   \   00000092   93001100           STS     4352, R16
   \   00000096   93901101           STS     4353, R25
   \   0000009A   E003               LDI     R16, 3
   \   0000009C   93001103           STS     4355, R16
   \   000000A0   E001               LDI     R16, 1
   \   000000A2   93001102           STS     4354, R16
   \   000000A6   EC01               LDI     R16, 193
   \   000000A8   93001102           STS     4354, R16
   \   000000AC   E003               LDI     R16, 3
   \   000000AE   93001101           STS     4353, R16
   \   000000B2   93901104           STS     4356, R25
     51          
     52              TData.RS4.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP);   // Get setup from EEPROM
   \   000000B6   E002               LDI     R16, 2
   \   000000B8   E010               LDI     R17, 0
   \   000000BA   ........           CALL    ReadEEPROMByte
   \   000000BE   9300....           STS     TData, R16
     53              TData.RS4.SensorType[0] = ReadEEPROMByte(EEPROM_PORTSETUP + 1);
   \   000000C2   E003               LDI     R16, 3
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   ........           CALL    ReadEEPROMByte
   \   000000CA   9300....           STS     (TData + 1), R16
     54              TData.RS4.SensorType[1] = ReadEEPROMByte(EEPROM_PORTSETUP + 2);
   \   000000CE   E004               LDI     R16, 4
   \   000000D0   E010               LDI     R17, 0
   \   000000D2   ........           CALL    ReadEEPROMByte
   \   000000D6   9300....           STS     (TData + 2), R16
     55          
     56              TData.RS4.ToTargetBuffer[0][0] = false;
   \   000000DA   ....               LDI     R30, LOW((TData + 1268))
   \   000000DC   ....               LDI     R31, HIGH((TData + 1268))
   \   000000DE   014F               MOVW    R9:R8, R31:R30
   \   000000E0   8390               ST      Z, R25
     57              TData.RS4.ToTargetBuffer[1][0] = false;
   \   000000E2   ....               LDI     R30, LOW((TData + 1348))
   \   000000E4   ....               LDI     R31, HIGH((TData + 1348))
   \   000000E6   013F               MOVW    R7:R6, R31:R30
   \   000000E8   8390               ST      Z, R25
     58              TData.RS4.FromTargetBuffer[0][0] = false;
   \   000000EA   ....               LDI     R30, LOW((TData + 1428))
   \   000000EC   ....               LDI     R31, HIGH((TData + 1428))
   \   000000EE   012F               MOVW    R5:R4, R31:R30
   \   000000F0   8390               ST      Z, R25
     59              TData.RS4.FromTargetBuffer[1][0] = false;
   \   000000F2   AB92               STD     Z+50, R25
     60          
     61              for (char i = 0; i < 8; i++) {
   \   000000F4   E0A0               LDI     R26, 0
   \   000000F6   E088               LDI     R24, 8
     62                  SetBit(PORTC, (TData.RS4.PortUsed & (0x01 << i)));      // Switch on power
   \                     ??ExtRS485Ctl_0:
   \   000000F8   94F8               CLI
   \   000000FA   9120....           LDS     R18, TData
   \   000000FE   E001               LDI     R16, 1
   \   00000100   E010               LDI     R17, 0
   \   00000102   2F4A               MOV     R20, R26
   \   00000104   ........           CALL    ?S_SHL_L02
   \   00000108   2320               AND     R18, R16
   \   0000010A   B305               IN      R16, 0x15
   \   0000010C   2B02               OR      R16, R18
   \   0000010E   BB05               OUT     0x15, R16
   \   00000110   9100....           LDS     R16, (OS_Counters + 1)
   \   00000114   2300               TST     R16
   \   00000116   F409               BRNE    ??ExtRS485Ctl_1
   \   00000118   9478               SEI
     63                  OS_Delay(100);
   \                     ??ExtRS485Ctl_1:
   \   0000011A   E604               LDI     R16, 100
   \   0000011C   E010               LDI     R17, 0
   \   0000011E   ........           CALL    OS_Delay
     64              }
   \   00000122   95A3               INC     R26
   \   00000124   958A               DEC     R24
   \   00000126   F741               BRNE    ??ExtRS485Ctl_0
     65              OS_Delay(UART_START_DELAY);                               // Waiting for target startup
   \   00000128   E700               LDI     R16, 112
   \   0000012A   E117               LDI     R17, 23
   \   0000012C   ........           CALL    OS_Delay
   \   00000130   ....               LDI     R26, LOW((TData + 1528))
   \   00000132   ....               LDI     R27, HIGH((TData + 1528))
   \   00000134   E101               LDI     R16, 17
   \   00000136   2EE0               MOV     R14, R16
   \   00000138   2CCB               MOV     R12, R11
   \   0000013A   E080               LDI     R24, 0
   \   0000013C   C004               RJMP    ??ExtRS485Ctl_2
     66          
     67              while (1) {
     68                  for (PortPair = 0; PortPair < 4; PortPair++) {        // loop through all ports
     69                      if (UART16552[0].RxFaultCnt > MAX_16552_FAIL) {
     70                          EmptyRxBuf16552(0);                            // Empty UART channel 0
     71                      }
     72                      if (UART16552[1].RxFaultCnt > MAX_16552_FAIL) {
     73                          EmptyRxBuf16552(1);                            // Empty UART channel 1
     74                      }
     75                      if (PowerOnTimer < POWER_ON_CNT) {
     76                          if (++PowerOnTimer >= POWER_ON_CNT) {          // check if time to switch on power
     77                              SetRS4Port();                                // and set power on ports
     78                          }
     79                      }
     80                      SetBit(PORTE, 0xf0);
     81                      ClrBit(PORTE, (0x10 << PortPair) & 0xf0);            // set mux port
     82                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
     83                          UART16552[0].TxFirst = 6;                       // Start packet build at pos.
     84                          char SnsType = (TData.RS4.SensorType[0] >> (2 * PortPair));
     85                          if (SnsType == 0x01) {    //Water ingress??
     86                              switch (SeqCnt) {
     87                              case 0:
     88                                  Uart_BuildReqWISCardStatus(0);          //Card status
     89                                  break;
     90                              case 20:
     91                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
     92                                      Uart_BuildReqWISXData(0, 115);            // Request serial no
     93                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
     94                                          TData.RS4.EEPROMPortpair[0] = 0;
     95                                      }
     96                                  } else {
     97                                      Uart_BuildReqWISData(0);                //WIS data
     98                                  }
     99                                  break;
    100                              default:
    101                                  Uart_BuildReqWISData(0);                //WIS data
    102                                  break;
    103                              }
    104                          } else if (SnsType == 0x02) {       // Radar??
    105                              switch (SeqCnt) {
    106                              case 20:
    107                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    108                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    109                                          TData.RS4.EEPROMPortpair[0] = 0;
    110                                      }
    111                                  }
    112                                  // Fall through and send the request
    113                              default:
    114                                  Uart_BuildReqRadarData(0);          // Radar data
    115                                  break;
    116                              case 0:
    117                                  Uart_BuildReqRadarInfo(0);          //Radar Information
    118                                  break;
    119                              }
    120                          } else {                                        // AN-SGCNV
    121                              if ((TData.RS4.ToTargetBuffer[0][0] == true) && // Data ready for this AD card
    122                                  (TData.RS4.ToTargetBuffer[0][1] == PortPair)) {
    123                                  Uart_BuildSndData(0);                       // add data to AD card package
    124                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    125                                  AskMD[0] = false;
    126                              } else {
    127                                  AskMD[0] = true;
    128                              }
    129                              if (SeqCnt == 0) {
    130                                  Uart_BuildReqCardStatus(0);             //Card status, cmd 27
    131                              } else if (SeqCnt == 5) {
    132                                  Uart_BuildReqR16552(0);                 //Raw data, cmd 13
    133                              } else if (SeqCnt == 10) {
    134                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    135                              } else if (SeqCnt == 15) {
    136                                  Uart_BuildReqC16552(0);                 //Cal data, cmd 16
    137                              } else if (SeqCnt == 20) {
    138                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    139                                      Uart_BuildReqEEPROMData(0);             //EEpromdata cmd, 24
    140                                      if ((TData.RS4.EEPROMADChannel[0] += 2) > 14) { //Next channel
    141                                          TData.RS4.EEPROMADChannel[0] = 0;
    142                                          if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    143                                              TData.RS4.EEPROMPortpair[0] = 0;
    144                                          }
    145                                      }
    146                                  } else if (AskMD[0] == true) {
    147                                      Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    148                                  }
    149                              } else if (AskMD[0] == true) {
    150                                  Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    151                              }
    152                          }
    153                          Uart_BuildTail16552(0);
    154                      } else {
    155                          if (TData.RS4.EEPROMPortpair[0] == PortPair) {
    156                              if (++TData.RS4.EEPROMPortpair[0] >= 4) {  // make sure that the EEPROM reading is not stopped
    157                                  TData.RS4.EEPROMPortpair[0] = 0;
    158                              }
    159                          }
    160                      }
    161                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
    162                          UART16552[1].TxFirst = 6;                       // Start at
    163                          char SnsType = (TData.RS4.SensorType[1] >> (2 * PortPair));
    164                          if (SnsType == 0x01) {    //Water ingress??
    165                              switch (SeqCnt) {
    166                              case 0:
    167                                  Uart_BuildReqWISCardStatus(1);          //Card status
    168                                  break;
    169                              case 20:
    170                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    171                                      Uart_BuildReqWISXData(1, 115);            // Request serial no
    172                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    173                                          TData.RS4.EEPROMPortpair[1] = 0;
    174                                      }
    175                                  } else {
    176                                      Uart_BuildReqWISData(1);                //WIS data
    177                                  }
    178                                  break;
    179                              default:
    180                                  Uart_BuildReqWISData(1);                //WIS data
    181                                  break;
    182                              }
    183                          } else if (SnsType == 0x02) {       // Radar??
    184                              switch (SeqCnt) {
    185                              case 20:
    186                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    187                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    188                                          TData.RS4.EEPROMPortpair[1] = 0;
    189                                      }
    190                                  }
    191                                  // Fall through and send the request
    192                              default:
    193                                  Uart_BuildReqRadarData(1);          // Radar data
    194                                  break;
    195                              case 0:
    196                                  Uart_BuildReqRadarInfo(1);          //Radar Information
    197                                  break;
    198                              }
    199                          } else {                                        // AN-SGCNV
    200                              if ((TData.RS4.ToTargetBuffer[1][0] == true) && // Data ready for this AD card
    201                                  (TData.RS4.ToTargetBuffer[1][1] == (PortPair + 4))) {
    202                                  Uart_BuildSndData(1);                       // add data to AD card package
    203                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    204                                  AskMD[1] = false;
    205                              } else {
    206                                  AskMD[1] = true;
    207                              }
    208                              if (SeqCnt == 0) {
    209                                  Uart_BuildReqCardStatus(1);             //Card status, cmd 27
    210                              } else if (SeqCnt == 5) {
    211                                  Uart_BuildReqR16552(1);                 //Raw data cmd, 13
    212                              } else if (SeqCnt == 10) {
    213                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    214                              } else if (SeqCnt == 15) {
    215                                  Uart_BuildReqC16552(1);                 //Cal data  cmd, 16
    216                              } else if (SeqCnt == 20) {
    217                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    218                                      Uart_BuildReqEEPROMData(1);             //EEpromdata cmd, 24
    219                                      if ((TData.RS4.EEPROMADChannel[1] += 2) > 14) { //Next channel
    220                                          TData.RS4.EEPROMADChannel[1] = 0;
    221                                          if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    222                                              TData.RS4.EEPROMPortpair[1] = 0;
    223                                          }
    224                                      }
    225                                  } else if (AskMD[1] == true) {
    226                                      Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    227                                  }
    228                              } else if (AskMD[1] == true) {
    229                                  Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    230                              }
    231                          }
    232                          Uart_BuildTail16552(1);
    233                      } else {
    234                          if (TData.RS4.EEPROMPortpair[1] == PortPair) {
    235                              if (++TData.RS4.EEPROMPortpair[1] >= 4) {  // make sure that the EEPROM reading is not stopped
    236                                  TData.RS4.EEPROMPortpair[1] = 0;
    237                              }
    238                          }
    239                      }
    240                      EventStatus = OS_WaitEventTimed(1, 1000);              // Wait for ready to send next
    241                      if (EventStatus & 0x02) {
    242                          if (PowerOnTimer >= POWER_ON_CNT) {
    243                              PowerOnTimer = 0;                              // and start over again
    244                          }
    245                      }
    246                  }
    247                  if (++SeqCnt > 20) {              //  all request within 20 x 2 sec.
   \                     ??ExtRS485Ctl_3:
   \   0000013E   9593               INC     R25
   \   00000140   3195               CPI     R25, 21
   \   00000142   F008               BRCS    ??ExtRS485Ctl_2
    248                      SeqCnt = 0;
   \   00000144   E090               LDI     R25, 0
    249                  }
   \                     ??ExtRS485Ctl_2:
   \   00000146   9380....           STS     PortPair, R24
   \   0000014A   C01B               RJMP    ??ExtRS485Ctl_4
   \                     ??ExtRS485Ctl_5:
   \   0000014C   01FD               MOVW    R31:R30, R27:R26
   \   0000014E   8103               LDD     R16, Z+3
   \   00000150   9110....           LDS     R17, PortPair
   \   00000154   1701               CP      R16, R17
   \   00000156   F431               BRNE    ??ExtRS485Ctl_6
   \   00000158   9503               INC     R16
   \   0000015A   9300....           STS     (TData + 1531), R16
   \   0000015E   3004               CPI     R16, 4
   \   00000160   F008               BRCS    ??ExtRS485Ctl_6
   \   00000162   8383               STD     Z+3, R24
   \                     ??ExtRS485Ctl_6:
   \   00000164   EE28               LDI     R18, 232
   \   00000166   E033               LDI     R19, 3
   \   00000168   E001               LDI     R16, 1
   \   0000016A   ........           CALL    OS_WaitEventTimed
   \   0000016E   FB01               BST     R16, 1
   \   00000170   F41E               BRTC    ??ExtRS485Ctl_7
   \   00000172   14BC               CP      R11, R12
   \   00000174   F008               BRCS    ??ExtRS485Ctl_7
   \   00000176   24BB               CLR     R11
   \                     ??ExtRS485Ctl_7:
   \   00000178   9100....           LDS     R16, PortPair
   \   0000017C   9503               INC     R16
   \   0000017E   9300....           STS     PortPair, R16
   \                     ??ExtRS485Ctl_4:
   \   00000182   9100....           LDS     R16, PortPair
   \   00000186   3004               CPI     R16, 4
   \   00000188   F6D0               BRCC    ??ExtRS485Ctl_3
   \   0000018A   9100....           LDS     R16, (UART16552 + 24)
   \   0000018E   3009               CPI     R16, 9
   \   00000190   F030               BRCS    ??ExtRS485Ctl_8
   \                     ??ExtRS485Ctl_9:
   \   00000192   91001108           LDS     R16, 4360
   \   00000196   9100110D           LDS     R16, 4365
   \   0000019A   FD00               SBRC    R16, 0
   \   0000019C   CFFA               RJMP    ??ExtRS485Ctl_9
   \                     ??ExtRS485Ctl_8:
   \   0000019E   9100....           LDS     R16, (UART16552 + 50)
   \   000001A2   3009               CPI     R16, 9
   \   000001A4   F030               BRCS    ??ExtRS485Ctl_10
   \                     ??ExtRS485Ctl_11:
   \   000001A6   91001100           LDS     R16, 4352
   \   000001AA   91001105           LDS     R16, 4357
   \   000001AE   FD00               SBRC    R16, 0
   \   000001B0   CFFA               RJMP    ??ExtRS485Ctl_11
   \                     ??ExtRS485Ctl_10:
   \   000001B2   14BC               CP      R11, R12
   \   000001B4   F430               BRCC    ??ExtRS485Ctl_12
   \   000001B6   94B3               INC     R11
   \   000001B8   14BC               CP      R11, R12
   \   000001BA   F018               BRCS    ??ExtRS485Ctl_12
   \   000001BC   9100....           LDS     R16, TData
   \   000001C0   BB05               OUT     0x15, R16
   \                     ??ExtRS485Ctl_12:
   \   000001C2   94F8               CLI
   \   000001C4   B103               IN      R16, 0x03
   \   000001C6   6F00               ORI     R16, 0xF0
   \   000001C8   B903               OUT     0x03, R16
   \   000001CA   9100....           LDS     R16, (OS_Counters + 1)
   \   000001CE   2300               TST     R16
   \   000001D0   F409               BRNE    ??ExtRS485Ctl_13
   \   000001D2   9478               SEI
   \                     ??ExtRS485Ctl_13:
   \   000001D4   94F8               CLI
   \   000001D6   9140....           LDS     R20, PortPair
   \   000001DA   E100               LDI     R16, 16
   \   000001DC   E010               LDI     R17, 0
   \   000001DE   ........           CALL    ?S_SHL_L02
   \   000001E2   7F00               ANDI    R16, 0xF0
   \   000001E4   9500               COM     R16
   \   000001E6   B113               IN      R17, 0x03
   \   000001E8   2310               AND     R17, R16
   \   000001EA   B913               OUT     0x03, R17
   \   000001EC   9100....           LDS     R16, (OS_Counters + 1)
   \   000001F0   2300               TST     R16
   \   000001F2   F409               BRNE    ??ExtRS485Ctl_14
   \   000001F4   9478               SEI
   \                     ??ExtRS485Ctl_14:
   \   000001F6   9100....           LDS     R16, TData
   \   000001FA   E010               LDI     R17, 0
   \   000001FC   9140....           LDS     R20, PortPair
   \   00000200   ........           CALL    ?SS_SHR_L02
   \   00000204   7001               ANDI    R16, 0x01
   \   00000206   F409               BRNE    $+2+2
   \   00000208   C104               RJMP    ??ExtRS485Ctl_15
   \   0000020A   E006               LDI     R16, 6
   \   0000020C   9300....           STS     (UART16552 + 2), R16
   \   00000210   9380....           STS     (UART16552 + 3), R24
   \   00000214   9100....           LDS     R16, (TData + 1)
   \   00000218   E010               LDI     R17, 0
   \   0000021A   9140....           LDS     R20, PortPair
   \   0000021E   0F44               LSL     R20
   \   00000220   ........           CALL    ?SS_SHR_L02
   \   00000224   3001               CPI     R16, 1
   \   00000226   F529               BRNE    ??ExtRS485Ctl_16
   \   00000228   2F09               MOV     R16, R25
   \   0000022A   2399               TST     R25
   \   0000022C   F019               BREQ    ??ExtRS485Ctl_17
   \   0000022E   5104               SUBI    R16, 20
   \   00000230   F039               BREQ    ??ExtRS485Ctl_18
   \   00000232   C01C               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_17:
   \   00000234   91E0....           LDS     R30, UART16552
   \   00000238   91F0....           LDS     R31, (UART16552 + 1)
   \   0000023C   E604               LDI     R16, 100
   \   0000023E   C038               RJMP    ??ExtRS485Ctl_20
   \                     ??ExtRS485Ctl_18:
   \   00000240   01F2               MOVW    R31:R30, R5:R4
   \   00000242   8100               LD      R16, Z
   \   00000244   2300               TST     R16
   \   00000246   F491               BRNE    ??ExtRS485Ctl_19
   \   00000248   01FD               MOVW    R31:R30, R27:R26
   \   0000024A   8102               LDD     R16, Z+2
   \   0000024C   9110....           LDS     R17, PortPair
   \   00000250   1701               CP      R16, R17
   \   00000252   F461               BRNE    ??ExtRS485Ctl_19
   \   00000254   E713               LDI     R17, 115
   \   00000256   E000               LDI     R16, 0
   \   00000258   ....               RCALL   Uart_BuildReqWISXData
   \   0000025A   9100....           LDS     R16, (TData + 1530)
   \   0000025E   9503               INC     R16
   \   00000260   9300....           STS     (TData + 1530), R16
   \   00000264   3004               CPI     R16, 4
   \   00000266   F408               BRCC    $+2+2
   \   00000268   C0D1               RJMP    ??ExtRS485Ctl_21
   \   0000026A   C0C9               RJMP    ??ExtRS485Ctl_22
   \                     ??ExtRS485Ctl_19:
   \   0000026C   E000               LDI     R16, 0
   \   0000026E   ....               RCALL   Uart_BuildReqWISData
   \   00000270   C0CD               RJMP    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_16:
   \   00000272   3002               CPI     R16, 2
   \   00000274   F4F9               BRNE    ??ExtRS485Ctl_23
   \   00000276   2F09               MOV     R16, R25
   \   00000278   2399               TST     R25
   \   0000027A   F0A9               BREQ    ??ExtRS485Ctl_24
   \   0000027C   5104               SUBI    R16, 20
   \   0000027E   F481               BRNE    ??ExtRS485Ctl_25
   \   00000280   01F2               MOVW    R31:R30, R5:R4
   \   00000282   8100               LD      R16, Z
   \   00000284   2300               TST     R16
   \   00000286   F461               BRNE    ??ExtRS485Ctl_25
   \   00000288   01FD               MOVW    R31:R30, R27:R26
   \   0000028A   8102               LDD     R16, Z+2
   \   0000028C   9110....           LDS     R17, PortPair
   \   00000290   1701               CP      R16, R17
   \   00000292   F431               BRNE    ??ExtRS485Ctl_25
   \   00000294   9503               INC     R16
   \   00000296   9300....           STS     (TData + 1530), R16
   \   0000029A   3004               CPI     R16, 4
   \   0000029C   F008               BRCS    ??ExtRS485Ctl_25
   \   0000029E   8382               STD     Z+2, R24
   \                     ??ExtRS485Ctl_25:
   \   000002A0   E000               LDI     R16, 0
   \   000002A2   ....               RCALL   Uart_BuildReqRadarData
   \   000002A4   C0B3               RJMP    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_24:
   \   000002A6   91E0....           LDS     R30, UART16552
   \   000002AA   91F0....           LDS     R31, (UART16552 + 1)
   \   000002AE   EA01               LDI     R16, 161
   \                     ??ExtRS485Ctl_20:
   \   000002B0   8306               STD     Z+6, R16
   \   000002B2   C069               RJMP    ??ExtRS485Ctl_26
   \                     ??ExtRS485Ctl_23:
   \   000002B4   01F4               MOVW    R31:R30, R9:R8
   \   000002B6   8100               LD      R16, Z
   \   000002B8   3001               CPI     R16, 1
   \   000002BA   F009               BREQ    $+2+2
   \   000002BC   C04C               RJMP    ??ExtRS485Ctl_27
   \   000002BE   8101               LDD     R16, Z+1
   \   000002C0   9110....           LDS     R17, PortPair
   \   000002C4   1701               CP      R16, R17
   \   000002C6   F009               BREQ    $+2+2
   \   000002C8   C046               RJMP    ??ExtRS485Ctl_27
   \   000002CA   E043               LDI     R20, 3
   \   000002CC   C012               RJMP    ??ExtRS485Ctl_28
   \                     ??ExtRS485Ctl_29:
   \   000002CE   2FE4               MOV     R30, R20
   \   000002D0   E0F0               LDI     R31, 0
   \   000002D2   ....               SUBI    R30, LOW((-(TData + 1268) & 0xFFFF))
   \   000002D4   ....               SBCI    R31, HIGH((-(TData + 1268) & 0xFFFF))
   \   000002D6   8100               LD      R16, Z
   \   000002D8   01F9               MOVW    R31:R30, R19:R18
   \   000002DA   8300               ST      Z, R16
   \   000002DC   9100....           LDS     R16, (UART16552 + 2)
   \   000002E0   9110....           LDS     R17, (UART16552 + 3)
   \   000002E4   5F0F               SUBI    R16, 255
   \   000002E6   4F1F               SBCI    R17, 255
   \   000002E8   9300....           STS     (UART16552 + 2), R16
   \   000002EC   9310....           STS     (UART16552 + 3), R17
   \   000002F0   9543               INC     R20
   \                     ??ExtRS485Ctl_28:
   \   000002F2   9100....           LDS     R16, (UART16552 + 2)
   \   000002F6   9110....           LDS     R17, (UART16552 + 3)
   \   000002FA   9120....           LDS     R18, UART16552
   \   000002FE   9130....           LDS     R19, (UART16552 + 1)
   \   00000302   0F20               ADD     R18, R16
   \   00000304   1F31               ADC     R19, R17
   \   00000306   01F4               MOVW    R31:R30, R9:R8
   \   00000308   8102               LDD     R16, Z+2
   \   0000030A   E010               LDI     R17, 0
   \   0000030C   5F0D               SUBI    R16, 253
   \   0000030E   4F1F               SBCI    R17, 255
   \   00000310   1740               CP      R20, R16
   \   00000312   0781               CPC     R24, R17
   \   00000314   F2E4               BRLT    ??ExtRS485Ctl_29
   \   00000316   8380               ST      Z, R24
   \   00000318   01F9               MOVW    R31:R30, R19:R18
   \   0000031A   82E0               ST      Z, R14
   \   0000031C   9100....           LDS     R16, (UART16552 + 2)
   \   00000320   9110....           LDS     R17, (UART16552 + 3)
   \   00000324   5F0F               SUBI    R16, 255
   \   00000326   4F1F               SBCI    R17, 255
   \   00000328   9300....           STS     (UART16552 + 2), R16
   \   0000032C   9310....           STS     (UART16552 + 3), R17
   \   00000330   91E0....           LDS     R30, UART16552
   \   00000334   91F0....           LDS     R31, (UART16552 + 1)
   \   00000338   0FE0               ADD     R30, R16
   \   0000033A   1FF1               ADC     R31, R17
   \   0000033C   8380               ST      Z, R24
   \   0000033E   9100....           LDS     R16, (UART16552 + 2)
   \   00000342   9110....           LDS     R17, (UART16552 + 3)
   \   00000346   5F0F               SUBI    R16, 255
   \   00000348   4F1F               SBCI    R17, 255
   \   0000034A   9300....           STS     (UART16552 + 2), R16
   \   0000034E   9310....           STS     (UART16552 + 3), R17
   \   00000352   E010               LDI     R17, 0
   \   00000354   C001               RJMP    ??ExtRS485Ctl_30
   \                     ??ExtRS485Ctl_27:
   \   00000356   E011               LDI     R17, 1
   \                     ??ExtRS485Ctl_30:
   \   00000358   2399               TST     R25
   \   0000035A   F419               BRNE    ??ExtRS485Ctl_31
   \   0000035C   E000               LDI     R16, 0
   \   0000035E   ....               RCALL   Uart_BuildReqCardStatus
   \   00000360   C055               RJMP    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_31:
   \   00000362   3095               CPI     R25, 5
   \   00000364   F419               BRNE    ??ExtRS485Ctl_32
   \   00000366   E000               LDI     R16, 0
   \   00000368   ....               RCALL   Uart_BuildReqR16552
   \   0000036A   C050               RJMP    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_32:
   \   0000036C   309A               CPI     R25, 10
   \   0000036E   F539               BRNE    ??ExtRS485Ctl_33
   \   00000370   9100....           LDS     R16, (UART16552 + 2)
   \   00000374   9110....           LDS     R17, (UART16552 + 3)
   \   00000378   91E0....           LDS     R30, UART16552
   \   0000037C   91F0....           LDS     R31, (UART16552 + 1)
   \   00000380   0FE0               ADD     R30, R16
   \   00000382   1FF1               ADC     R31, R17
   \   00000384   82E0               ST      Z, R14
   \                     ??ExtRS485Ctl_26:
   \   00000386   9100....           LDS     R16, (UART16552 + 2)
   \   0000038A   9110....           LDS     R17, (UART16552 + 3)
   \   0000038E   5F0F               SUBI    R16, 255
   \   00000390   4F1F               SBCI    R17, 255
   \   00000392   9300....           STS     (UART16552 + 2), R16
   \   00000396   9310....           STS     (UART16552 + 3), R17
   \   0000039A   91E0....           LDS     R30, UART16552
   \   0000039E   91F0....           LDS     R31, (UART16552 + 1)
   \   000003A2   0FE0               ADD     R30, R16
   \   000003A4   1FF1               ADC     R31, R17
   \   000003A6   8380               ST      Z, R24
   \   000003A8   9100....           LDS     R16, (UART16552 + 2)
   \   000003AC   9110....           LDS     R17, (UART16552 + 3)
   \   000003B0   5F0F               SUBI    R16, 255
   \   000003B2   4F1F               SBCI    R17, 255
   \   000003B4   9300....           STS     (UART16552 + 2), R16
   \   000003B8   9310....           STS     (UART16552 + 3), R17
   \   000003BC   C027               RJMP    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_33:
   \   000003BE   309F               CPI     R25, 15
   \   000003C0   F419               BRNE    ??ExtRS485Ctl_34
   \   000003C2   E000               LDI     R16, 0
   \   000003C4   ....               RCALL   Uart_BuildReqC16552
   \   000003C6   C022               RJMP    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_34:
   \   000003C8   3194               CPI     R25, 20
   \   000003CA   F4E1               BRNE    ??ExtRS485Ctl_35
   \   000003CC   01F2               MOVW    R31:R30, R5:R4
   \   000003CE   8100               LD      R16, Z
   \   000003D0   2300               TST     R16
   \   000003D2   F4C1               BRNE    ??ExtRS485Ctl_35
   \   000003D4   01FD               MOVW    R31:R30, R27:R26
   \   000003D6   8102               LDD     R16, Z+2
   \   000003D8   9120....           LDS     R18, PortPair
   \   000003DC   1702               CP      R16, R18
   \   000003DE   F491               BRNE    ??ExtRS485Ctl_35
   \   000003E0   E000               LDI     R16, 0
   \   000003E2   ....               RCALL   Uart_BuildReqEEPROMData
   \   000003E4   910C               LD      R16, X
   \   000003E6   5F0E               SUBI    R16, 254
   \   000003E8   930C               ST      X, R16
   \   000003EA   300F               CPI     R16, 15
   \   000003EC   F078               BRCS    ??ExtRS485Ctl_21
   \   000003EE   938C               ST      X, R24
   \   000003F0   9100....           LDS     R16, (TData + 1530)
   \   000003F4   9503               INC     R16
   \   000003F6   9300....           STS     (TData + 1530), R16
   \   000003FA   3004               CPI     R16, 4
   \   000003FC   F038               BRCS    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_22:
   \   000003FE   01FD               MOVW    R31:R30, R27:R26
   \   00000400   8382               STD     Z+2, R24
   \   00000402   C004               RJMP    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_35:
   \   00000404   2311               TST     R17
   \   00000406   F011               BREQ    ??ExtRS485Ctl_21
   \   00000408   E000               LDI     R16, 0
   \   0000040A   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_21:
   \   0000040C   E000               LDI     R16, 0
   \   0000040E   ....               RCALL   Uart_BuildTail16552
   \   00000410   C00C               RJMP    ??ExtRS485Ctl_36
   \                     ??ExtRS485Ctl_15:
   \   00000412   01FD               MOVW    R31:R30, R27:R26
   \   00000414   8102               LDD     R16, Z+2
   \   00000416   9110....           LDS     R17, PortPair
   \   0000041A   1701               CP      R16, R17
   \   0000041C   F431               BRNE    ??ExtRS485Ctl_36
   \   0000041E   9503               INC     R16
   \   00000420   9300....           STS     (TData + 1530), R16
   \   00000424   3004               CPI     R16, 4
   \   00000426   F008               BRCS    ??ExtRS485Ctl_36
   \   00000428   8382               STD     Z+2, R24
   \                     ??ExtRS485Ctl_36:
   \   0000042A   9100....           LDS     R16, TData
   \   0000042E   9140....           LDS     R20, PortPair
   \   00000432   5F4C               SUBI    R20, 252
   \   00000434   E010               LDI     R17, 0
   \   00000436   ........           CALL    ?SS_SHR_L02
   \   0000043A   7001               ANDI    R16, 0x01
   \   0000043C   F409               BRNE    $+2+2
   \   0000043E   CE86               RJMP    ??ExtRS485Ctl_5
   \   00000440   E006               LDI     R16, 6
   \   00000442   9300....           STS     (UART16552 + 28), R16
   \   00000446   9380....           STS     (UART16552 + 29), R24
   \   0000044A   9100....           LDS     R16, (TData + 2)
   \   0000044E   E010               LDI     R17, 0
   \   00000450   9140....           LDS     R20, PortPair
   \   00000454   0F44               LSL     R20
   \   00000456   ........           CALL    ?SS_SHR_L02
   \   0000045A   3001               CPI     R16, 1
   \   0000045C   F529               BRNE    ??ExtRS485Ctl_37
   \   0000045E   2F09               MOV     R16, R25
   \   00000460   2399               TST     R25
   \   00000462   F019               BREQ    ??ExtRS485Ctl_38
   \   00000464   5104               SUBI    R16, 20
   \   00000466   F039               BREQ    ??ExtRS485Ctl_39
   \   00000468   C01C               RJMP    ??ExtRS485Ctl_40
   \                     ??ExtRS485Ctl_38:
   \   0000046A   91E0....           LDS     R30, (UART16552 + 26)
   \   0000046E   91F0....           LDS     R31, (UART16552 + 27)
   \   00000472   E604               LDI     R16, 100
   \   00000474   C038               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_39:
   \   00000476   01F2               MOVW    R31:R30, R5:R4
   \   00000478   A902               LDD     R16, Z+50
   \   0000047A   2300               TST     R16
   \   0000047C   F491               BRNE    ??ExtRS485Ctl_40
   \   0000047E   01FD               MOVW    R31:R30, R27:R26
   \   00000480   8103               LDD     R16, Z+3
   \   00000482   9110....           LDS     R17, PortPair
   \   00000486   1701               CP      R16, R17
   \   00000488   F461               BRNE    ??ExtRS485Ctl_40
   \   0000048A   E713               LDI     R17, 115
   \   0000048C   E001               LDI     R16, 1
   \   0000048E   ....               RCALL   Uart_BuildReqWISXData
   \   00000490   9100....           LDS     R16, (TData + 1531)
   \   00000494   9503               INC     R16
   \   00000496   9300....           STS     (TData + 1531), R16
   \   0000049A   3004               CPI     R16, 4
   \   0000049C   F408               BRCC    $+2+2
   \   0000049E   C0D8               RJMP    ??ExtRS485Ctl_42
   \   000004A0   C0D0               RJMP    ??ExtRS485Ctl_43
   \                     ??ExtRS485Ctl_40:
   \   000004A2   E001               LDI     R16, 1
   \   000004A4   ....               RCALL   Uart_BuildReqWISData
   \   000004A6   C0D4               RJMP    ??ExtRS485Ctl_42
   \                     ??ExtRS485Ctl_37:
   \   000004A8   3002               CPI     R16, 2
   \   000004AA   F4F9               BRNE    ??ExtRS485Ctl_44
   \   000004AC   2F09               MOV     R16, R25
   \   000004AE   2399               TST     R25
   \   000004B0   F0A9               BREQ    ??ExtRS485Ctl_45
   \   000004B2   5104               SUBI    R16, 20
   \   000004B4   F481               BRNE    ??ExtRS485Ctl_46
   \   000004B6   01F2               MOVW    R31:R30, R5:R4
   \   000004B8   A902               LDD     R16, Z+50
   \   000004BA   2300               TST     R16
   \   000004BC   F461               BRNE    ??ExtRS485Ctl_46
   \   000004BE   01FD               MOVW    R31:R30, R27:R26
   \   000004C0   8103               LDD     R16, Z+3
   \   000004C2   9110....           LDS     R17, PortPair
   \   000004C6   1701               CP      R16, R17
   \   000004C8   F431               BRNE    ??ExtRS485Ctl_46
   \   000004CA   9503               INC     R16
   \   000004CC   9300....           STS     (TData + 1531), R16
   \   000004D0   3004               CPI     R16, 4
   \   000004D2   F008               BRCS    ??ExtRS485Ctl_46
   \   000004D4   8383               STD     Z+3, R24
   \                     ??ExtRS485Ctl_46:
   \   000004D6   E001               LDI     R16, 1
   \   000004D8   ....               RCALL   Uart_BuildReqRadarData
   \   000004DA   C0BA               RJMP    ??ExtRS485Ctl_42
   \                     ??ExtRS485Ctl_45:
   \   000004DC   91E0....           LDS     R30, (UART16552 + 26)
   \   000004E0   91F0....           LDS     R31, (UART16552 + 27)
   \   000004E4   EA01               LDI     R16, 161
   \                     ??ExtRS485Ctl_41:
   \   000004E6   8306               STD     Z+6, R16
   \   000004E8   C06D               RJMP    ??ExtRS485Ctl_47
   \                     ??ExtRS485Ctl_44:
   \   000004EA   01F3               MOVW    R31:R30, R7:R6
   \   000004EC   8100               LD      R16, Z
   \   000004EE   3001               CPI     R16, 1
   \   000004F0   F009               BREQ    $+2+2
   \   000004F2   C050               RJMP    ??ExtRS485Ctl_48
   \   000004F4   8121               LDD     R18, Z+1
   \   000004F6   9100....           LDS     R16, PortPair
   \   000004FA   E010               LDI     R17, 0
   \   000004FC   5F0C               SUBI    R16, 252
   \   000004FE   4F1F               SBCI    R17, 255
   \   00000500   1720               CP      R18, R16
   \   00000502   0781               CPC     R24, R17
   \   00000504   F009               BREQ    $+2+2
   \   00000506   C046               RJMP    ??ExtRS485Ctl_48
   \   00000508   E043               LDI     R20, 3
   \   0000050A   C012               RJMP    ??ExtRS485Ctl_49
   \                     ??ExtRS485Ctl_50:
   \   0000050C   2FE4               MOV     R30, R20
   \   0000050E   E0F0               LDI     R31, 0
   \   00000510   ....               SUBI    R30, LOW((-(TData + 1348) & 0xFFFF))
   \   00000512   ....               SBCI    R31, HIGH((-(TData + 1348) & 0xFFFF))
   \   00000514   8100               LD      R16, Z
   \   00000516   01F9               MOVW    R31:R30, R19:R18
   \   00000518   8300               ST      Z, R16
   \   0000051A   9100....           LDS     R16, (UART16552 + 28)
   \   0000051E   9110....           LDS     R17, (UART16552 + 29)
   \   00000522   5F0F               SUBI    R16, 255
   \   00000524   4F1F               SBCI    R17, 255
   \   00000526   9300....           STS     (UART16552 + 28), R16
   \   0000052A   9310....           STS     (UART16552 + 29), R17
   \   0000052E   9543               INC     R20
   \                     ??ExtRS485Ctl_49:
   \   00000530   9120....           LDS     R18, (UART16552 + 26)
   \   00000534   9130....           LDS     R19, (UART16552 + 27)
   \   00000538   9100....           LDS     R16, (UART16552 + 28)
   \   0000053C   9110....           LDS     R17, (UART16552 + 29)
   \   00000540   0F20               ADD     R18, R16
   \   00000542   1F31               ADC     R19, R17
   \   00000544   01F3               MOVW    R31:R30, R7:R6
   \   00000546   8102               LDD     R16, Z+2
   \   00000548   E010               LDI     R17, 0
   \   0000054A   5F0D               SUBI    R16, 253
   \   0000054C   4F1F               SBCI    R17, 255
   \   0000054E   1740               CP      R20, R16
   \   00000550   0781               CPC     R24, R17
   \   00000552   F2E4               BRLT    ??ExtRS485Ctl_50
   \   00000554   8380               ST      Z, R24
   \   00000556   01F9               MOVW    R31:R30, R19:R18
   \   00000558   82E0               ST      Z, R14
   \   0000055A   9100....           LDS     R16, (UART16552 + 28)
   \   0000055E   9110....           LDS     R17, (UART16552 + 29)
   \   00000562   5F0F               SUBI    R16, 255
   \   00000564   4F1F               SBCI    R17, 255
   \   00000566   9300....           STS     (UART16552 + 28), R16
   \   0000056A   9310....           STS     (UART16552 + 29), R17
   \   0000056E   91E0....           LDS     R30, (UART16552 + 26)
   \   00000572   91F0....           LDS     R31, (UART16552 + 27)
   \   00000576   0FE0               ADD     R30, R16
   \   00000578   1FF1               ADC     R31, R17
   \   0000057A   8380               ST      Z, R24
   \   0000057C   9100....           LDS     R16, (UART16552 + 28)
   \   00000580   9110....           LDS     R17, (UART16552 + 29)
   \   00000584   5F0F               SUBI    R16, 255
   \   00000586   4F1F               SBCI    R17, 255
   \   00000588   9300....           STS     (UART16552 + 28), R16
   \   0000058C   9310....           STS     (UART16552 + 29), R17
   \   00000590   E010               LDI     R17, 0
   \   00000592   C001               RJMP    ??ExtRS485Ctl_51
   \                     ??ExtRS485Ctl_48:
   \   00000594   E011               LDI     R17, 1
   \                     ??ExtRS485Ctl_51:
   \   00000596   2399               TST     R25
   \   00000598   F419               BRNE    ??ExtRS485Ctl_52
   \   0000059A   E001               LDI     R16, 1
   \   0000059C   ....               RCALL   Uart_BuildReqCardStatus
   \   0000059E   C058               RJMP    ??ExtRS485Ctl_42
   \                     ??ExtRS485Ctl_52:
   \   000005A0   3095               CPI     R25, 5
   \   000005A2   F419               BRNE    ??ExtRS485Ctl_53
   \   000005A4   E001               LDI     R16, 1
   \   000005A6   ....               RCALL   Uart_BuildReqR16552
   \   000005A8   C053               RJMP    ??ExtRS485Ctl_42
   \                     ??ExtRS485Ctl_53:
   \   000005AA   309A               CPI     R25, 10
   \   000005AC   F539               BRNE    ??ExtRS485Ctl_54
   \   000005AE   91E0....           LDS     R30, (UART16552 + 26)
   \   000005B2   91F0....           LDS     R31, (UART16552 + 27)
   \   000005B6   9100....           LDS     R16, (UART16552 + 28)
   \   000005BA   9110....           LDS     R17, (UART16552 + 29)
   \   000005BE   0FE0               ADD     R30, R16
   \   000005C0   1FF1               ADC     R31, R17
   \   000005C2   82E0               ST      Z, R14
   \                     ??ExtRS485Ctl_47:
   \   000005C4   9100....           LDS     R16, (UART16552 + 28)
   \   000005C8   9110....           LDS     R17, (UART16552 + 29)
   \   000005CC   5F0F               SUBI    R16, 255
   \   000005CE   4F1F               SBCI    R17, 255
   \   000005D0   9300....           STS     (UART16552 + 28), R16
   \   000005D4   9310....           STS     (UART16552 + 29), R17
   \   000005D8   91E0....           LDS     R30, (UART16552 + 26)
   \   000005DC   91F0....           LDS     R31, (UART16552 + 27)
   \   000005E0   0FE0               ADD     R30, R16
   \   000005E2   1FF1               ADC     R31, R17
   \   000005E4   8380               ST      Z, R24
   \   000005E6   9100....           LDS     R16, (UART16552 + 28)
   \   000005EA   9110....           LDS     R17, (UART16552 + 29)
   \   000005EE   5F0F               SUBI    R16, 255
   \   000005F0   4F1F               SBCI    R17, 255
   \   000005F2   9300....           STS     (UART16552 + 28), R16
   \   000005F6   9310....           STS     (UART16552 + 29), R17
   \   000005FA   C02A               RJMP    ??ExtRS485Ctl_42
   \                     ??ExtRS485Ctl_54:
   \   000005FC   309F               CPI     R25, 15
   \   000005FE   F419               BRNE    ??ExtRS485Ctl_55
   \   00000600   E001               LDI     R16, 1
   \   00000602   ....               RCALL   Uart_BuildReqC16552
   \   00000604   C025               RJMP    ??ExtRS485Ctl_42
   \                     ??ExtRS485Ctl_55:
   \   00000606   3194               CPI     R25, 20
   \   00000608   F4F9               BRNE    ??ExtRS485Ctl_56
   \   0000060A   01F2               MOVW    R31:R30, R5:R4
   \   0000060C   A902               LDD     R16, Z+50
   \   0000060E   2300               TST     R16
   \   00000610   F4D9               BRNE    ??ExtRS485Ctl_56
   \   00000612   01FD               MOVW    R31:R30, R27:R26
   \   00000614   8103               LDD     R16, Z+3
   \   00000616   9120....           LDS     R18, PortPair
   \   0000061A   1702               CP      R16, R18
   \   0000061C   F4A9               BRNE    ??ExtRS485Ctl_56
   \   0000061E   E001               LDI     R16, 1
   \   00000620   ....               RCALL   Uart_BuildReqEEPROMData
   \   00000622   9100....           LDS     R16, (TData + 1529)
   \   00000626   5F0E               SUBI    R16, 254
   \   00000628   9300....           STS     (TData + 1529), R16
   \   0000062C   300F               CPI     R16, 15
   \   0000062E   F080               BRCS    ??ExtRS485Ctl_42
   \   00000630   01FD               MOVW    R31:R30, R27:R26
   \   00000632   8381               STD     Z+1, R24
   \   00000634   9100....           LDS     R16, (TData + 1531)
   \   00000638   9503               INC     R16
   \   0000063A   9300....           STS     (TData + 1531), R16
   \   0000063E   3004               CPI     R16, 4
   \   00000640   F038               BRCS    ??ExtRS485Ctl_42
   \                     ??ExtRS485Ctl_43:
   \   00000642   01FD               MOVW    R31:R30, R27:R26
   \   00000644   8383               STD     Z+3, R24
   \   00000646   C004               RJMP    ??ExtRS485Ctl_42
   \                     ??ExtRS485Ctl_56:
   \   00000648   2311               TST     R17
   \   0000064A   F011               BREQ    ??ExtRS485Ctl_42
   \   0000064C   E001               LDI     R16, 1
   \   0000064E   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_42:
   \   00000650   E001               LDI     R16, 1
   \   00000652   ....               RCALL   Uart_BuildTail16552
   \   00000654   CD87               RJMP    ??ExtRS485Ctl_6
   \   00000656                      REQUIRE _A_PORTC
   \   00000656                      REQUIRE _A_PORTE
    250              }
    251          }
    252          
    253          
    254          /*************************************************************************
    255          *   (This is a task)
    256          *  Usart handler UART receive data
    257          *
    258          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    259          void ExtRS485Rec(void) {
   \                     ExtRS485Rec:
   \   00000000   93AA               ST      -Y, R26
   \   00000002   938A               ST      -Y, R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    260          
    261              char portresp;
    262          
    263              OS_Delay(UART_START_DELAY + 800);           // Waiting for target startup and power on sequence
   \   00000004   E900               LDI     R16, 144
   \   00000006   E11A               LDI     R17, 26
   \   00000008   ........           CALL    OS_Delay
   \   0000000C   E0A0               LDI     R26, 0
   \   0000000E   C05D               RJMP    ??ExtRS485Rec_0
    264          
    265              while (1) {
    266                  OS_Delay(499);                          // wait for answer and correct the speed (.5 * 4 = 2 sec update)
    267                  portresp = OS_WaitEventTimed(3, 1);     // Wait for receive from both channels
    268                  if (portresp & 0x01) {                  // answer on ch 0
    269                      Usart16552CheckPackage(0);         // handle incomming package
    270                      TData.RS4.FailCnt[PortPair][0] = 0; // Reset counter
    271                      TData.RS4.IOUnitStatus[PortPair] &= ~COMFAIL_BIT; // No error
    272                      UART16552[0].RxFaultCnt = 0;          // OK package on 16552 channel
    273                  } else {
    274                      UART16552[0].RxFaultCnt++;          // Fault in package on 16552 channel
    275                      TData.RS4.FailCnt[PortPair][1]++;      // no answer total counter
    276                      if (TData.RS4.FailCnt[PortPair][0]++ > FAILCNT_ERROR) {
    277                          TData.RS4.IOUnitStatus[PortPair] |= COMFAIL_BIT;      // report fault
    278                      }
    279                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
    280                          if ((TData.RS4.FailCnt[PortPair][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
    281                              ClrBit(PORTC, (0x01 << PortPair));            // Switch off power
    282                              OS_SignalEvent(2, &TCB_RS485Ctl);
    283                          }
    284                      }
    285                  }
    286                  if (portresp & 0x02) {                  // answer on ch 1
    287                      Usart16552CheckPackage(1);         // handle incomming package
    288                      TData.RS4.FailCnt[PortPair + 4][0] = 0; // Reset counter
    289                      TData.RS4.IOUnitStatus[PortPair + 4] &= ~COMFAIL_BIT; // No error
    290                      UART16552[1].RxFaultCnt = 0;          // OK package on 16552 channel
    291                  } else {
    292                      UART16552[1].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_1:
   \   00000010   9100....           LDS     R16, (UART16552 + 50)
   \   00000014   9503               INC     R16
   \   00000016   9300....           STS     (UART16552 + 50), R16
    293                      TData.RS4.FailCnt[PortPair + 4][1]++;      // no answer
   \   0000001A   9100....           LDS     R16, PortPair
   \   0000001E   E014               LDI     R17, 4
   \   00000020   9F01               MUL     R16, R17
   \   00000022   01F0               MOVW    R31:R30, R1:R0
   \   00000024   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000026   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000028   8D05               LDD     R16, Z+29
   \   0000002A   8D16               LDD     R17, Z+30
   \   0000002C   5F0F               SUBI    R16, 255
   \   0000002E   4F1F               SBCI    R17, 255
   \   00000030   8F05               STD     Z+29, R16
   \   00000032   8F16               STD     Z+30, R17
    294                      if (TData.RS4.FailCnt[PortPair + 4][0]++ > FAILCNT_ERROR) {
   \   00000034   9100....           LDS     R16, PortPair
   \   00000038   E014               LDI     R17, 4
   \   0000003A   9F01               MUL     R16, R17
   \   0000003C   ....               LDI     R30, LOW(TData)
   \   0000003E   ....               LDI     R31, (TData) >> 8
   \   00000040   0DE0               ADD     R30, R0
   \   00000042   1DF1               ADC     R31, R1
   \   00000044   8D03               LDD     R16, Z+27
   \   00000046   8D14               LDD     R17, Z+28
   \   00000048   0198               MOVW    R19:R18, R17:R16
   \   0000004A   5F2F               SUBI    R18, 255
   \   0000004C   4F3F               SBCI    R19, 255
   \   0000004E   8F23               STD     Z+27, R18
   \   00000050   8F34               STD     Z+28, R19
   \   00000052   3006               CPI     R16, 6
   \   00000054   4010               SBCI    R17, 0
   \   00000056   F048               BRCS    ??ExtRS485Rec_2
    295                          TData.RS4.IOUnitStatus[PortPair + 4] |= COMFAIL_BIT;      // report fault
   \   00000058   9100....           LDS     R16, PortPair
   \   0000005C   E0F0               LDI     R31, 0
   \   0000005E   2FE0               MOV     R30, R16
   \   00000060   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000064   8107               LDD     R16, Z+7
   \   00000066   6001               ORI     R16, 0x01
   \   00000068   8307               STD     Z+7, R16
    296                      }
    297                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Rec_2:
   \   0000006A   9100....           LDS     R16, TData
   \   0000006E   E010               LDI     R17, 0
   \   00000070   9140....           LDS     R20, PortPair
   \   00000074   5F4C               SUBI    R20, 252
   \   00000076   ........           CALL    ?SS_SHR_L02
   \   0000007A   7001               ANDI    R16, 0x01
   \   0000007C   F109               BREQ    ??ExtRS485Rec_3
    298                          if ((TData.RS4.FailCnt[PortPair + 4][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   0000007E   9100....           LDS     R16, PortPair
   \   00000082   E014               LDI     R17, 4
   \   00000084   9F01               MUL     R16, R17
   \   00000086   01F0               MOVW    R31:R30, R1:R0
   \   00000088   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000008A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000008C   8D03               LDD     R16, Z+27
   \   0000008E   7007               ANDI    R16, 0x07
   \   00000090   3004               CPI     R16, 4
   \   00000092   F4B1               BRNE    ??ExtRS485Rec_3
    299                              ClrBit(PORTC, (0x01 << (PortPair + 4)));            // Switch off power
   \   00000094   94F8               CLI
   \   00000096   9140....           LDS     R20, PortPair
   \   0000009A   5F4C               SUBI    R20, 252
   \   0000009C   E001               LDI     R16, 1
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   ........           CALL    ?S_SHL_L02
   \   000000A4   9500               COM     R16
   \   000000A6   B315               IN      R17, 0x15
   \   000000A8   2310               AND     R17, R16
   \   000000AA   BB15               OUT     0x15, R17
   \   000000AC   9100....           LDS     R16, (OS_Counters + 1)
   \   000000B0   2300               TST     R16
   \   000000B2   F409               BRNE    ??ExtRS485Rec_4
   \   000000B4   9478               SEI
    300                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_4:
   \   000000B6   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000000B8   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000000BA   E002               LDI     R16, 2
   \   000000BC   ........           CALL    OS_SignalEvent
    301                          }
    302                      }
    303                  }
    304                  OS_SignalEvent(1, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_3:
   \   000000C0   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000000C2   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000000C4   E001               LDI     R16, 1
   \   000000C6   ........           CALL    OS_SignalEvent
   \                     ??ExtRS485Rec_0:
   \   000000CA   EF03               LDI     R16, 243
   \   000000CC   E011               LDI     R17, 1
   \   000000CE   ........           CALL    OS_Delay
   \   000000D2   E021               LDI     R18, 1
   \   000000D4   E030               LDI     R19, 0
   \   000000D6   E003               LDI     R16, 3
   \   000000D8   ........           CALL    OS_WaitEventTimed
   \   000000DC   2F80               MOV     R24, R16
   \   000000DE   FB00               BST     R16, 0
   \   000000E0   F4BE               BRTC    ??ExtRS485Rec_5
   \   000000E2   E000               LDI     R16, 0
   \   000000E4   ....               RCALL   Usart16552CheckPackage
   \   000000E6   9100....           LDS     R16, PortPair
   \   000000EA   E014               LDI     R17, 4
   \   000000EC   9F01               MUL     R16, R17
   \   000000EE   01F0               MOVW    R31:R30, R1:R0
   \   000000F0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000F2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000F4   87A3               STD     Z+11, R26
   \   000000F6   87A4               STD     Z+12, R26
   \   000000F8   9100....           LDS     R16, PortPair
   \   000000FC   E0F0               LDI     R31, 0
   \   000000FE   2FE0               MOV     R30, R16
   \   00000100   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000102   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000104   8103               LDD     R16, Z+3
   \   00000106   7F0E               ANDI    R16, 0xFE
   \   00000108   8303               STD     Z+3, R16
   \   0000010A   93A0....           STS     (UART16552 + 24), R26
   \   0000010E   C056               RJMP    ??ExtRS485Rec_6
   \                     ??ExtRS485Rec_5:
   \   00000110   9100....           LDS     R16, (UART16552 + 24)
   \   00000114   9503               INC     R16
   \   00000116   9300....           STS     (UART16552 + 24), R16
   \   0000011A   9100....           LDS     R16, PortPair
   \   0000011E   E014               LDI     R17, 4
   \   00000120   9F01               MUL     R16, R17
   \   00000122   01F0               MOVW    R31:R30, R1:R0
   \   00000124   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000126   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000128   8505               LDD     R16, Z+13
   \   0000012A   8516               LDD     R17, Z+14
   \   0000012C   5F0F               SUBI    R16, 255
   \   0000012E   4F1F               SBCI    R17, 255
   \   00000130   8705               STD     Z+13, R16
   \   00000132   8716               STD     Z+14, R17
   \   00000134   9100....           LDS     R16, PortPair
   \   00000138   E014               LDI     R17, 4
   \   0000013A   9F01               MUL     R16, R17
   \   0000013C   ....               LDI     R30, LOW(TData)
   \   0000013E   ....               LDI     R31, (TData) >> 8
   \   00000140   0DE0               ADD     R30, R0
   \   00000142   1DF1               ADC     R31, R1
   \   00000144   8503               LDD     R16, Z+11
   \   00000146   8514               LDD     R17, Z+12
   \   00000148   0198               MOVW    R19:R18, R17:R16
   \   0000014A   5F2F               SUBI    R18, 255
   \   0000014C   4F3F               SBCI    R19, 255
   \   0000014E   8723               STD     Z+11, R18
   \   00000150   8734               STD     Z+12, R19
   \   00000152   3006               CPI     R16, 6
   \   00000154   4010               SBCI    R17, 0
   \   00000156   F048               BRCS    ??ExtRS485Rec_7
   \   00000158   9100....           LDS     R16, PortPair
   \   0000015C   E0F0               LDI     R31, 0
   \   0000015E   2FE0               MOV     R30, R16
   \   00000160   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000162   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000164   8103               LDD     R16, Z+3
   \   00000166   6001               ORI     R16, 0x01
   \   00000168   8303               STD     Z+3, R16
   \                     ??ExtRS485Rec_7:
   \   0000016A   9100....           LDS     R16, TData
   \   0000016E   E010               LDI     R17, 0
   \   00000170   9140....           LDS     R20, PortPair
   \   00000174   ........           CALL    ?SS_SHR_L02
   \   00000178   7001               ANDI    R16, 0x01
   \   0000017A   F101               BREQ    ??ExtRS485Rec_6
   \   0000017C   9100....           LDS     R16, PortPair
   \   00000180   E014               LDI     R17, 4
   \   00000182   9F01               MUL     R16, R17
   \   00000184   01F0               MOVW    R31:R30, R1:R0
   \   00000186   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000188   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000018A   8503               LDD     R16, Z+11
   \   0000018C   7007               ANDI    R16, 0x07
   \   0000018E   3004               CPI     R16, 4
   \   00000190   F4A9               BRNE    ??ExtRS485Rec_6
   \   00000192   94F8               CLI
   \   00000194   9140....           LDS     R20, PortPair
   \   00000198   E001               LDI     R16, 1
   \   0000019A   E010               LDI     R17, 0
   \   0000019C   ........           CALL    ?S_SHL_L02
   \   000001A0   9500               COM     R16
   \   000001A2   B315               IN      R17, 0x15
   \   000001A4   2310               AND     R17, R16
   \   000001A6   BB15               OUT     0x15, R17
   \   000001A8   9100....           LDS     R16, (OS_Counters + 1)
   \   000001AC   2300               TST     R16
   \   000001AE   F409               BRNE    ??ExtRS485Rec_8
   \   000001B0   9478               SEI
   \                     ??ExtRS485Rec_8:
   \   000001B2   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000001B4   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000001B6   E002               LDI     R16, 2
   \   000001B8   ........           CALL    OS_SignalEvent
   \                     ??ExtRS485Rec_6:
   \   000001BC   FB81               BST     R24, 1
   \   000001BE   F00E               BRTS    $+2+2
   \   000001C0   CF27               RJMP    ??ExtRS485Rec_1
   \   000001C2   E001               LDI     R16, 1
   \   000001C4   ....               RCALL   Usart16552CheckPackage
   \   000001C6   9100....           LDS     R16, PortPair
   \   000001CA   E014               LDI     R17, 4
   \   000001CC   9F01               MUL     R16, R17
   \   000001CE   01F0               MOVW    R31:R30, R1:R0
   \   000001D0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001D2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001D4   8FA3               STD     Z+27, R26
   \   000001D6   8FA4               STD     Z+28, R26
   \   000001D8   9100....           LDS     R16, PortPair
   \   000001DC   E0F0               LDI     R31, 0
   \   000001DE   2FE0               MOV     R30, R16
   \   000001E0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001E2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001E4   8107               LDD     R16, Z+7
   \   000001E6   7F0E               ANDI    R16, 0xFE
   \   000001E8   8307               STD     Z+7, R16
   \   000001EA   93A0....           STS     (UART16552 + 50), R26
   \   000001EE   CF68               RJMP    ??ExtRS485Rec_3
   \   000001F0                      REQUIRE _A_PORTC
    305              }
    306          }
    307          
    308          /*************************************************************************
    309          *
    310          *  Set ports on or off
    311          *
    312          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    313          void SetRS4Port(void) {
   \                     SetRS4Port:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    314          
    315              PORTC = TData.RS4.PortUsed;
   \   00000000   9100....           LDS     R16, TData
   \   00000004   BB05               OUT     0x15, R16
    316          
    317          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_PORTC
    318          
    319          /*************************************************************************
    320          *
    321          *  Check the incoming packages from AN_SGCNV / WIS
    322          *
    323          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    324          void Usart16552CheckPackage(char ch) {
   \                     Usart16552CheckPackage:
   \   00000000   926A               ST      -Y, R6
   \   00000002   925A               ST      -Y, R5
   \   00000004   924A               ST      -Y, R4
   \   00000006   93BA               ST      -Y, R27
   \   00000008   93AA               ST      -Y, R26
   \   0000000A   939A               ST      -Y, R25
   \   0000000C   938A               ST      -Y, R24
   \   0000000E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000E                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000000E   2E50               MOV     R5, R16
    325          
    326              unsigned short pointer;
    327              char count_out, more;
    328          
    329              count_out = MAX_PROT_CMD;                  // max command
   \   00000010   2466               CLR     R6
   \   00000012   946A               DEC     R6
    330              more = true;
   \   00000014   2444               CLR     R4
   \   00000016   9443               INC     R4
    331              pointer = 4;
   \   00000018   E084               LDI     R24, 4
   \   0000001A   E090               LDI     R25, 0
   \   0000001C   E10A               LDI     R16, 26
   \   0000001E   9E50               MUL     R5, R16
   \   00000020   ....               LDI     R26, LOW(UART16552)
   \   00000022   ....               LDI     R27, (UART16552) >> 8
   \   00000024   0DA0               ADD     R26, R0
   \   00000026   1DB1               ADC     R27, R1
    332              do {
    333                  if (!CheckActionUart16552(ch, pointer)) {
   \                     ??Usart16552CheckPackage_0:
   \   00000028   019C               MOVW    R19:R18, R25:R24
   \   0000002A   2D05               MOV     R16, R5
   \   0000002C   ....               RCALL   CheckActionUart16552
   \   0000002E   2300               TST     R16
   \   00000030   F409               BRNE    ??Usart16552CheckPackage_1
    334                      more = false;                          // terminate while loop
   \   00000032   2444               CLR     R4
    335                  }
    336                  pointer += UART16552[ch].pRxBuffer[pointer + 1] + 2;            // Point to a command cmd hb/lb
   \                     ??Usart16552CheckPackage_1:
   \   00000034   01FD               MOVW    R31:R30, R27:R26
   \   00000036   8502               LDD     R16, Z+10
   \   00000038   8513               LDD     R17, Z+11
   \   0000003A   0F08               ADD     R16, R24
   \   0000003C   1F19               ADC     R17, R25
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   81E1               LDD     R30, Z+1
   \   00000042   E0F0               LDI     R31, 0
   \   00000044   9632               ADIW    R31:R30, 2
   \   00000046   0F8E               ADD     R24, R30
   \   00000048   1F9F               ADC     R25, R31
    337                  if (!--count_out) {
   \   0000004A   946A               DEC     R6
   \   0000004C   F051               BREQ    ??Usart16552CheckPackage_2
    338                      more = false;
    339                  }
    340              } while (more && (pointer < UART16552[ch].RxPacklen - 3));
   \   0000004E   2044               TST     R4
   \   00000050   F041               BREQ    ??Usart16552CheckPackage_2
   \   00000052   01FD               MOVW    R31:R30, R27:R26
   \   00000054   8906               LDD     R16, Z+22
   \   00000056   8917               LDD     R17, Z+23
   \   00000058   5003               SUBI    R16, 3
   \   0000005A   4010               SBCI    R17, 0
   \   0000005C   1780               CP      R24, R16
   \   0000005E   0791               CPC     R25, R17
   \   00000060   F318               BRCS    ??Usart16552CheckPackage_0
    341              GoToSyncUART16552(ch);
   \                     ??Usart16552CheckPackage_2:
   \   00000062   2D05               MOV     R16, R5
   \   00000064   ....               RCALL   GoToSyncUART16552
    342          }
   \   00000066                      REQUIRE ?Subroutine2
   \   00000066                      ;               // Fall through to label ?Subroutine2

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9069               LD      R6, Y+
   \   0000000E   9508               RET
    343          
    344          /*************************************************************************
    345          *
    346          *  Check action on received data from AN_SGCNV
    347          *
    348          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    349          char CheckActionUart16552(char ch, unsigned short pointer) {
   \                     CheckActionUart16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
    350          
    351              char retval = true;
   \   00000006   E081               LDI     R24, 1
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   ....               LDI     R30, LOW(UART16552)
   \   0000000E   ....               LDI     R31, (UART16552) >> 8
   \   00000010   0DE0               ADD     R30, R0
   \   00000012   1DF1               ADC     R31, R1
   \   00000014   85A2               LDD     R26, Z+10
   \   00000016   85B3               LDD     R27, Z+11
   \   00000018   0FA2               ADD     R26, R18
   \   0000001A   1FB3               ADC     R27, R19
   \   0000001C   01FD               MOVW    R31:R30, R27:R26
   \   0000001E   8110               LD      R17, Z
   \   00000020   5810               SUBI    R17, 128
   \   00000022   F409               BRNE    $+2+2
   \   00000024   C040               RJMP    ??CheckActionUart16552_0
   \   00000026   5314               SUBI    R17, 52
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C045               RJMP    ??CheckActionUart16552_1
   \   0000002C   951A               DEC     R17
   \   0000002E   F409               BRNE    $+2+2
   \   00000030   C046               RJMP    ??CheckActionUart16552_2
   \   00000032   541B               SUBI    R17, 75
   \   00000034   F409               BRNE    $+2+2
   \   00000036   C050               RJMP    ??CheckActionUart16552_3
   \   00000038   951A               DEC     R17
   \   0000003A   F409               BRNE    $+2+2
   \   0000003C   C04D               RJMP    ??CheckActionUart16552_3
   \   0000003E   511D               SUBI    R17, 29
   \   00000040   F088               BRCS    ??CheckActionUart16552_4
   \   00000042   5013               SUBI    R17, 3
   \   00000044   F080               BRCS    ??CheckActionUart16552_5
   \   00000046   5013               SUBI    R17, 3
   \   00000048   F0B0               BRCS    ??CheckActionUart16552_6
   \   0000004A   F0C9               BREQ    ??CheckActionUart16552_7
   \   0000004C   951A               DEC     R17
   \   0000004E   F0F9               BREQ    ??CheckActionUart16552_8
   \   00000050   5017               SUBI    R17, 7
   \   00000052   F109               BREQ    ??CheckActionUart16552_9
   \   00000054   5013               SUBI    R17, 3
   \   00000056   F0B9               BREQ    ??CheckActionUart16552_10
   \   00000058   5012               SUBI    R17, 2
   \   0000005A   F049               BREQ    ??CheckActionUart16552_11
   \   0000005C   541D               SUBI    R17, 77
   \   0000005E   F0F9               BREQ    ??CheckActionUart16552_12
   \   00000060   951A               DEC     R17
   \   00000062   F129               BREQ    ??CheckActionUart16552_13
   \                     ??CheckActionUart16552_4:
   \   00000064   C03A               RJMP    ??CheckActionUart16552_14
    352          
    353              switch (UART16552[ch].pRxBuffer[pointer]) {    // check action
    354          
    355              case ANP1_REP_MP_DATA :                              // Measured pressure data
    356              case ANP1_REP_MT_DATA :                              // Measured temperature data
    357              case ANP1_REP_MO_DATA :                              // Measured "other" data
    358                  ReceivePTOData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_5:
   \   00000066   5F2E               SUBI    R18, 254
   \   00000068   4F3F               SBCI    R19, 255
   \   0000006A   ....               RCALL   ReceivePTOData
    359                  break;
   \   0000006C   C036               RJMP    ??CheckActionUart16552_14
    360              case ANP1_REP_WH_DATA :                              // Measured "washtrack and high level" data
    361                  ReceiveWHData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_11:
   \   0000006E   5F2E               SUBI    R18, 254
   \   00000070   4F3F               SBCI    R19, 255
   \   00000072   ....               RCALL   ReceiveWHData
    362                  break;
   \   00000074   C032               RJMP    ??CheckActionUart16552_14
    363              case ANP1_REP_RP_DATA :                              // Raw pressure data
    364              case ANP1_REP_RT_DATA :                              // Raw temp. data
    365              case ANP1_REP_RO_DATA :                              // Raw "other" data
    366                  ReceiveRData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_6:
   \   00000076   5F2E               SUBI    R18, 254
   \   00000078   4F3F               SBCI    R19, 255
   \   0000007A   ....               RCALL   ReceiveRData
    367                  break;
   \   0000007C   C02E               RJMP    ??CheckActionUart16552_14
    368              case ANP1_REP_CAL_DATA :                             // Raw "other" data
    369                  ReceiveCData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_7:
   \   0000007E   5F2E               SUBI    R18, 254
   \   00000080   4F3F               SBCI    R19, 255
   \   00000082   ....               RCALL   ReceiveCData
    370                  break;
   \   00000084   C02A               RJMP    ??CheckActionUart16552_14
    371          
    372              case ANP1_REP_CARD_STAT :                             // card status package
    373                  ReceiveCardStatus(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_10:
   \   00000086   5F2E               SUBI    R18, 254
   \   00000088   4F3F               SBCI    R19, 255
   \   0000008A   ....               RCALL   ReceiveCardStatus
    374                  break;
   \   0000008C   C026               RJMP    ??CheckActionUart16552_14
    375          
    376              case ANP1_REP_CONFIG :                             // config data
    377                  ReceiveConfigData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_8:
   \   0000008E   5F2E               SUBI    R18, 254
   \   00000090   4F3F               SBCI    R19, 255
   \   00000092   ....               RCALL   ReceiveConfigData
    378                  break;
   \   00000094   C022               RJMP    ??CheckActionUart16552_14
    379          
    380              case ANP1_REP_EEP_DATA :                             // card eeprome
    381                  ReceiveCardEEPROMData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_9:
   \   00000096   5F2E               SUBI    R18, 254
   \   00000098   4F3F               SBCI    R19, 255
   \   0000009A   ....               RCALL   ReceiveCardEEPROMData
    382                  break;
   \   0000009C   C01E               RJMP    ??CheckActionUart16552_14
    383          
    384              case ANP1_REP_WIS_STAT :                             // Card status from WIS
    385                  ReceiveWISStatus(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_12:
   \   0000009E   5F2E               SUBI    R18, 254
   \   000000A0   4F3F               SBCI    R19, 255
   \   000000A2   ....               RCALL   ReceiveWISStatus
    386                  break;
   \   000000A4   C01A               RJMP    ??CheckActionUart16552_14
    387          
    388              case ANP1_REP_WIS_XDATA :                             // Card WIS protocol
    389                  ReceiveWISXData(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_0:
   \   000000A6   5F2E               SUBI    R18, 254
   \   000000A8   4F3F               SBCI    R19, 255
   \   000000AA   ....               RCALL   ReceiveWISXData
    390                  break;
   \   000000AC   C016               RJMP    ??CheckActionUart16552_14
    391          
    392              case ANP1_REP_WIS_DATA :                             // Data from WIS
    393                  ReceiveWISData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_13:
   \   000000AE   5F2E               SUBI    R18, 254
   \   000000B0   4F3F               SBCI    R19, 255
   \   000000B2   ....               RCALL   ReceiveWISData
    394                  break;
   \   000000B4   C012               RJMP    ??CheckActionUart16552_14
    395              case ANP1_REP_GODA_DATA:
    396                  ReceiveRadarData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_1:
   \   000000B6   5F2E               SUBI    R18, 254
   \   000000B8   4F3F               SBCI    R19, 255
   \   000000BA   ....               RCALL   ReceiveRadarData
    397                  break;
   \   000000BC   C00E               RJMP    ??CheckActionUart16552_14
    398              case ANP1_REP_GODA_INFO:
    399                  ReceiveRadarInfo(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_2:
   \   000000BE   8544               LDD     R20, Z+12
   \   000000C0   E014               LDI     R17, 4
   \   000000C2   9F01               MUL     R16, R17
   \   000000C4   9100....           LDS     R16, PortPair
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   0E00               ADD     R0, R16
   \   000000CC   1E11               ADC     R1, R17
   \   000000CE   01F0               MOVW    R31:R30, R1:R0
   \   000000D0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000D4   A743               STD     Z+43, R20
    400                  break;
   \   000000D6   C001               RJMP    ??CheckActionUart16552_14
    401              case ANP1_ECMD_NMDRQACK :                             // No more data, send ack.
    402              case ANP1_ECMD_NMDWOACK :                         // No more data
    403                  retval = false;
   \                     ??CheckActionUart16552_3:
   \   000000D8   E080               LDI     R24, 0
    404                  break;
    405              }
    406              return retval;
   \                     ??CheckActionUart16552_14:
   \   000000DA   2F08               MOV     R16, R24
   \   000000DC   9189               LD      R24, Y+
   \   000000DE   91A9               LD      R26, Y+
   \   000000E0   91B9               LD      R27, Y+
   \   000000E2   9508               RET
    407          }
    408          
    409          /*************************************************************************
    410          *
    411          *  Receive card status from WIS
    412          *
    413          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    414          void ReceiveWISStatus(char ch, unsigned short pointer) {
   \                     ReceiveWISStatus:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   2F10               MOV     R17, R16
    415          
    416              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] |= UART16552[ch].pRxBuffer[pointer];
   \   00000004   9100....           LDS     R16, PortPair
   \   00000008   E14A               LDI     R20, 26
   \   0000000A   9F14               MUL     R17, R20
   \   0000000C   ....               LDI     R26, LOW(UART16552)
   \   0000000E   ....               LDI     R27, (UART16552) >> 8
   \   00000010   0DA0               ADD     R26, R0
   \   00000012   1DB1               ADC     R27, R1
   \   00000014   961A               ADIW    R27:R26, 10
   \   00000016   91ED               LD      R30, X+
   \   00000018   91FC               LD      R31, X
   \   0000001A   0FE2               ADD     R30, R18
   \   0000001C   1FF3               ADC     R31, R19
   \   0000001E   E024               LDI     R18, 4
   \   00000020   9F12               MUL     R17, R18
   \   00000022   8120               LD      R18, Z
   \   00000024   E010               LDI     R17, 0
   \   00000026   01A0               MOVW    R21:R20, R1:R0
   \   00000028   0F40               ADD     R20, R16
   \   0000002A   1F51               ADC     R21, R17
   \   0000002C   01DA               MOVW    R27:R26, R21:R20
   \   0000002E   ....               SUBI    R26, LOW((-(TData + 43) & 0xFFFF))
   \   00000030   ....               SBCI    R27, HIGH((-(TData + 43) & 0xFFFF))
   \   00000032   910C               LD      R16, X
   \   00000034   2B02               OR      R16, R18
   \   00000036   930C               ST      X, R16
    417              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000038   8121               LDD     R18, Z+1
   \   0000003A   9100....           LDS     R16, PortPair
   \   0000003E   01A0               MOVW    R21:R20, R1:R0
   \   00000040   0F40               ADD     R20, R16
   \   00000042   1F51               ADC     R21, R17
   \   00000044   01DA               MOVW    R27:R26, R21:R20
   \   00000046   ....               SUBI    R26, LOW((-(TData + 51) & 0xFFFF))
   \   00000048   ....               SBCI    R27, HIGH((-(TData + 51) & 0xFFFF))
   \   0000004A   932C               ST      X, R18
    418              if (UART16552[ch].pRxBuffer[pointer + 4]) {
   \   0000004C   8104               LDD     R16, Z+4
   \   0000004E   2300               TST     R16
   \   00000050   F051               BREQ    ??ReceiveWISStatus_0
    419                  TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] |= 0x80;
   \   00000052   9100....           LDS     R16, PortPair
   \   00000056   0E00               ADD     R0, R16
   \   00000058   1E11               ADC     R1, R17
   \   0000005A   01F0               MOVW    R31:R30, R1:R0
   \   0000005C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000060   A903               LDD     R16, Z+51
   \   00000062   6800               ORI     R16, 0x80
   \   00000064   AB03               STD     Z+51, R16
    420              }
    421          }
   \                     ??ReceiveWISStatus_0:
   \   00000066   01DB               MOVW    R27:R26, R23:R22
   \   00000068   9508               RET
    422          
    423          /*************************************************************************
    424          *
    425          *  Receive WIS protocol data
    426          *
    427          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    428          void ReceiveWISXData(char ch, unsigned short pointer) {
   \                     ReceiveWISXData:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    429          
    430              char i;
    431          
    432              switch (UART16552[ch].pRxBuffer[pointer++]) {
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(UART16552)
   \   0000000A   ....               LDI     R31, (UART16552) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   85A2               LDD     R26, Z+10
   \   00000012   85B3               LDD     R27, Z+11
   \   00000014   0FA2               ADD     R26, R18
   \   00000016   1FB3               ADC     R27, R19
   \   00000018   911D               LD      R17, X+
   \   0000001A   3713               CPI     R17, 115
   \   0000001C   F4D9               BRNE    ??ReceiveWISXData_0
    433              case 115:                                     // Serial number
    434                  TData.RS4.FromTargetBuffer[ch][0] = true;
   \   0000001E   E312               LDI     R17, 50
   \   00000020   9F01               MUL     R16, R17
   \   00000022   ....               LDI     R24, LOW(TData)
   \   00000024   ....               LDI     R25, (TData) >> 8
   \   00000026   0D80               ADD     R24, R0
   \   00000028   1D91               ADC     R25, R1
   \   0000002A   01FC               MOVW    R31:R30, R25:R24
   \   0000002C   56EC               SUBI    R30, 108
   \   0000002E   4FFA               SBCI    R31, 250
   \   00000030   E011               LDI     R17, 1
   \   00000032   8310               ST      Z, R17
    435                  TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   00000034   0F00               LSL     R16
   \   00000036   0F00               LSL     R16
   \   00000038   9110....           LDS     R17, PortPair
   \   0000003C   0F01               ADD     R16, R17
   \   0000003E   8301               STD     Z+1, R16
    436                  for (i = 2; i < (4 + 2); i++) {
   \   00000040   9602               ADIW    R25:R24, 2
   \   00000042   E004               LDI     R16, 4
    437                      TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveWISXData_1:
   \   00000044   911D               LD      R17, X+
   \   00000046   01FC               MOVW    R31:R30, R25:R24
   \   00000048   56EC               SUBI    R30, 108
   \   0000004A   4FFA               SBCI    R31, 250
   \   0000004C   8310               ST      Z, R17
    438                  }
   \   0000004E   9601               ADIW    R25:R24, 1
   \   00000050   950A               DEC     R16
   \   00000052   F7C1               BRNE    ??ReceiveWISXData_1
    439                  break;
    440              default:
    441                  break;
    442              }
    443          }
   \                     ??ReceiveWISXData_0:
   \   00000054   01CA               MOVW    R25:R24, R21:R20
   \   00000056   01DB               MOVW    R27:R26, R23:R22
   \   00000058   9508               RET
    444          
    445          /*************************************************************************
    446          *
    447          *  Receive measured data from WIS
    448          *
    449          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    450          void ReceiveWISData(char ch, unsigned short pointer) {
   \                     ReceiveWISData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   ....               LDI     R30, LOW(UART16552)
   \   0000000E   ....               LDI     R31, (UART16552) >> 8
   \   00000010   0DE0               ADD     R30, R0
   \   00000012   1DF1               ADC     R31, R1
   \   00000014   85A2               LDD     R26, Z+10
   \   00000016   85B3               LDD     R27, Z+11
   \   00000018   0FA2               ADD     R26, R18
   \   0000001A   1FB3               ADC     R27, R19
   \   0000001C   E014               LDI     R17, 4
   \   0000001E   9F01               MUL     R16, R17
   \   00000020   01C0               MOVW    R25:R24, R1:R0
   \   00000022   910C               LD      R16, X
   \   00000024   E010               LDI     R17, 0
   \   00000026   E020               LDI     R18, 0
   \   00000028   E030               LDI     R19, 0
   \   0000002A   ........           CALL    ?UL2F_S_L04
   \   0000002E   9140....           LDS     R20, PortPair
   \   00000032   E050               LDI     R21, 0
   \   00000034   01BC               MOVW    R23:R22, R25:R24
   \   00000036   0F64               ADD     R22, R20
   \   00000038   1F75               ADC     R23, R21
   \   0000003A   E348               LDI     R20, 56
   \   0000003C   9F74               MUL     R23, R20
   \   0000003E   2D70               MOV     R23, R0
   \   00000040   9F64               MUL     R22, R20
   \   00000042   0D71               ADD     R23, R1
   \   00000044   2DE0               MOV     R30, R0
   \   00000046   2FF7               MOV     R31, R23
   \   00000048   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   0000004A   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   0000004C   8300               ST      Z, R16
   \   0000004E   8311               STD     Z+1, R17
   \   00000050   8322               STD     Z+2, R18
   \   00000052   8333               STD     Z+3, R19
    451          
    452              TData.RS4.Result[(ch * 4) + PortPair][0] = (float)UART16552[ch].pRxBuffer[pointer + 0];       // Water detected
    453              TData.RS4.Result[(ch * 4) + PortPair][1] = (float)((UART16552[ch].pRxBuffer[pointer + 1] << 8) // Temperature
    454                                                                 + UART16552[ch].pRxBuffer[pointer + 2]) / 10.0;
   \   00000054   01FD               MOVW    R31:R30, R27:R26
   \   00000056   8111               LDD     R17, Z+1
   \   00000058   8102               LDD     R16, Z+2
   \   0000005A   2F21               MOV     R18, R17
   \   0000005C   0F22               LSL     R18
   \   0000005E   0B22               SBC     R18, R18
   \   00000060   2F32               MOV     R19, R18
   \   00000062   ........           CALL    ?SL2F_S_L04
   \   00000066   E040               LDI     R20, 0
   \   00000068   E260               LDI     R22, 32
   \   0000006A   E471               LDI     R23, 65
   \   0000006C   ........           CALL    ?F_DIV_S_L04
   \   00000070   9140....           LDS     R20, PortPair
   \   00000074   E050               LDI     R21, 0
   \   00000076   01BC               MOVW    R23:R22, R25:R24
   \   00000078   0F64               ADD     R22, R20
   \   0000007A   1F75               ADC     R23, R21
   \   0000007C   E348               LDI     R20, 56
   \   0000007E   9F74               MUL     R23, R20
   \   00000080   2D70               MOV     R23, R0
   \   00000082   9F64               MUL     R22, R20
   \   00000084   0D71               ADD     R23, R1
   \   00000086   2DE0               MOV     R30, R0
   \   00000088   2FF7               MOV     R31, R23
   \   0000008A   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   0000008C   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   0000008E   8300               ST      Z, R16
   \   00000090   8311               STD     Z+1, R17
   \   00000092   8322               STD     Z+2, R18
   \   00000094   8333               STD     Z+3, R19
    455              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 3];         // Status
   \   00000096   01FD               MOVW    R31:R30, R27:R26
   \   00000098   8123               LDD     R18, Z+3
   \   0000009A   9100....           LDS     R16, PortPair
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   01AC               MOVW    R21:R20, R25:R24
   \   000000A2   0F40               ADD     R20, R16
   \   000000A4   1F51               ADC     R21, R17
   \   000000A6   E00E               LDI     R16, 14
   \   000000A8   9F50               MUL     R21, R16
   \   000000AA   2D50               MOV     R21, R0
   \   000000AC   9F40               MUL     R20, R16
   \   000000AE   0D51               ADD     R21, R1
   \   000000B0   2DE0               MOV     R30, R0
   \   000000B2   2FF5               MOV     R31, R21
   \   000000B4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000B8   AF23               STD     Z+59, R18
    456              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = 0;                                            // Unused
   \   000000BA   9100....           LDS     R16, PortPair
   \   000000BE   0F80               ADD     R24, R16
   \   000000C0   1F91               ADC     R25, R17
   \   000000C2   E00E               LDI     R16, 14
   \   000000C4   9F90               MUL     R25, R16
   \   000000C6   2D90               MOV     R25, R0
   \   000000C8   9F80               MUL     R24, R16
   \   000000CA   0D91               ADD     R25, R1
   \   000000CC   2DE0               MOV     R30, R0
   \   000000CE   2FF9               MOV     R31, R25
   \   000000D0   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   000000D4   8310               ST      Z, R17
    457          }
   \   000000D6                      REQUIRE ?Subroutine3
   \   000000D6                      ;               // Fall through to label ?Subroutine3

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9508               RET
    458          
    459          
    460          /*************************************************************************
    461          *
    462          *  Receive measured data from Radar
    463          *
    464          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    465          void ReceiveRadarData(char ch, unsigned short pointer) {
   \                     ReceiveRadarData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R26, LOW(UART16552)
   \   0000000A   ....               LDI     R27, (UART16552) >> 8
   \   0000000C   0DA0               ADD     R26, R0
   \   0000000E   1DB1               ADC     R27, R1
   \   00000010   961A               ADIW    R27:R26, 10
   \   00000012   91ED               LD      R30, X+
   \   00000014   91FC               LD      R31, X
   \   00000016   0FE2               ADD     R30, R18
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   E014               LDI     R17, 4
   \   0000001C   9F01               MUL     R16, R17
   \   0000001E   0190               MOVW    R19:R18, R1:R0
   \   00000020   8140               LD      R20, Z
   \   00000022   8151               LDD     R21, Z+1
   \   00000024   8162               LDD     R22, Z+2
   \   00000026   8173               LDD     R23, Z+3
   \   00000028   9100....           LDS     R16, PortPair
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   0110               MOVW    R3:R2, R1:R0
   \   00000030   0E20               ADD     R2, R16
   \   00000032   1E31               ADC     R3, R17
   \   00000034   E308               LDI     R16, 56
   \   00000036   9E30               MUL     R3, R16
   \   00000038   2C30               MOV     R3, R0
   \   0000003A   9E20               MUL     R2, R16
   \   0000003C   0C31               ADD     R3, R1
   \   0000003E   2DA0               MOV     R26, R0
   \   00000040   2DB3               MOV     R27, R3
   \   00000042   ....               SUBI    R26, LOW((-(TData + 731) & 0xFFFF))
   \   00000044   ....               SBCI    R27, HIGH((-(TData + 731) & 0xFFFF))
   \   00000046   934D               ST      X+, R20
   \   00000048   935D               ST      X+, R21
   \   0000004A   936D               ST      X+, R22
   \   0000004C   937C               ST      X, R23
    466              float *Data1 = (float *)&UART16552[ch].pRxBuffer[pointer + 0];
    467              float *Data2 = (float *)&UART16552[ch].pRxBuffer[pointer + 4];
    468          
    469              TData.RS4.Result[(ch * 4) + PortPair][0] = *Data1;       // Distance
    470              TData.RS4.Result[(ch * 4) + PortPair][1] = *Data2;      // Level
   \   0000004E   8144               LDD     R20, Z+4
   \   00000050   8155               LDD     R21, Z+5
   \   00000052   8166               LDD     R22, Z+6
   \   00000054   8177               LDD     R23, Z+7
   \   00000056   9100....           LDS     R16, PortPair
   \   0000005A   0119               MOVW    R3:R2, R19:R18
   \   0000005C   0E20               ADD     R2, R16
   \   0000005E   1E31               ADC     R3, R17
   \   00000060   E308               LDI     R16, 56
   \   00000062   9E30               MUL     R3, R16
   \   00000064   2C30               MOV     R3, R0
   \   00000066   9E20               MUL     R2, R16
   \   00000068   0C31               ADD     R3, R1
   \   0000006A   2DA0               MOV     R26, R0
   \   0000006C   2DB3               MOV     R27, R3
   \   0000006E   ....               SUBI    R26, LOW((-(TData + 735) & 0xFFFF))
   \   00000070   ....               SBCI    R27, HIGH((-(TData + 735) & 0xFFFF))
   \   00000072   934D               ST      X+, R20
   \   00000074   935D               ST      X+, R21
   \   00000076   936D               ST      X+, R22
   \   00000078   937C               ST      X, R23
    471              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 8];         // Status
   \   0000007A   8540               LDD     R20, Z+8
   \   0000007C   9100....           LDS     R16, PortPair
   \   00000080   01B9               MOVW    R23:R22, R19:R18
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   E00E               LDI     R16, 14
   \   00000088   9F70               MUL     R23, R16
   \   0000008A   2D70               MOV     R23, R0
   \   0000008C   9F60               MUL     R22, R16
   \   0000008E   0D71               ADD     R23, R1
   \   00000090   2DA0               MOV     R26, R0
   \   00000092   ....               SUBI    R26, LOW((-(TData + 59) & 0xFFFF))
   \   00000094   ....               SBCI    R23, HIGH((-(TData + 59) & 0xFFFF))
   \   00000096   2FB7               MOV     R27, R23
   \   00000098   934C               ST      X, R20
    472              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 9];         // Unused???
   \   0000009A   8541               LDD     R20, Z+9
   \   0000009C   9100....           LDS     R16, PortPair
   \   000000A0   0F20               ADD     R18, R16
   \   000000A2   1F31               ADC     R19, R17
   \   000000A4   E00E               LDI     R16, 14
   \   000000A6   9F30               MUL     R19, R16
   \   000000A8   2D30               MOV     R19, R0
   \   000000AA   9F20               MUL     R18, R16
   \   000000AC   0D31               ADD     R19, R1
   \   000000AE   2DE0               MOV     R30, R0
   \   000000B0   2FF3               MOV     R31, R19
   \   000000B2   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   000000B6   8340               ST      Z, R20
    473          }
   \   000000B8   91A9               LD      R26, Y+
   \   000000BA   91B9               LD      R27, Y+
   \   000000BC   9508               RET
    474          
    475          
    476          /*************************************************************************
    477          *
    478          *  Receive Serial number and version information from Radar
    479          *
    480          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    481          void ReceiveRadarInfo(char ch, unsigned short pointer) {
   \                     ReceiveRadarInfo:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    482              // TData.RS4.SerialNumber[(ch * 4) + PortPair] = atol((const char *)&UART16552[ch].pRxBuffer[pointer + 0]);
    483              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = *((long *)&UART16552[ch].pRxBuffer[pointer + 10]);
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   85A2               LDD     R26, Z+10
   \   00000010   85B3               LDD     R27, Z+11
   \   00000012   0FA2               ADD     R26, R18
   \   00000014   1FB3               ADC     R27, R19
   \   00000016   961A               ADIW    R27:R26, 10
   \   00000018   914D               LD      R20, X+
   \   0000001A   E014               LDI     R17, 4
   \   0000001C   9F01               MUL     R16, R17
   \   0000001E   9100....           LDS     R16, PortPair
   \   00000022   E010               LDI     R17, 0
   \   00000024   0E00               ADD     R0, R16
   \   00000026   1E11               ADC     R1, R17
   \   00000028   01F0               MOVW    R31:R30, R1:R0
   \   0000002A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000002E   A743               STD     Z+43, R20
    484          }
   \   00000030   2FA6               MOV     R26, R22
   \   00000032   2FB5               MOV     R27, R21
   \   00000034   9508               RET
    485          
    486          /*************************************************************************
    487          *
    488          *  Receive pressure measured data from AN_SGCNV
    489          *
    490          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    491          void ReceivePTOData(char ch, unsigned short pointer) {
   \                     ReceivePTOData:
   \   00000000   926A               ST      -Y, R6
   \   00000002   925A               ST      -Y, R5
   \   00000004   924A               ST      -Y, R4
   \   00000006   93BA               ST      -Y, R27
   \   00000008   93AA               ST      -Y, R26
   \   0000000A   939A               ST      -Y, R25
   \   0000000C   938A               ST      -Y, R24
   \   0000000E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000E                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000000E   2E60               MOV     R6, R16
   \   00000010   0129               MOVW    R5:R4, R19:R18
    492          
    493              unsigned short pnt, ADCh;
    494              short packlen;
    495          
    496              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000012   E10A               LDI     R16, 26
   \   00000014   9E60               MUL     R6, R16
   \   00000016   ....               LDI     R26, LOW(UART16552)
   \   00000018   ....               LDI     R27, (UART16552) >> 8
   \   0000001A   0DA0               ADD     R26, R0
   \   0000001C   1DB1               ADC     R27, R1
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   8502               LDD     R16, Z+10
   \   00000022   8513               LDD     R17, Z+11
   \   00000024   0D04               ADD     R16, R4
   \   00000026   1D15               ADC     R17, R5
   \   00000028   5001               SUBI    R16, 1
   \   0000002A   4010               SBCI    R17, 0
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   8180               LD      R24, Z
   \   00000030   E090               LDI     R25, 0
    497          
    498              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000032   ....               LDI     R16, LOW(UARTSEND)
   \   00000034   ....               LDI     R17, (UARTSEND) >> 8
   \   00000036   ........           CALL    OS_Use
    499          
    500              if (packlen > 0) {
   \   0000003A   3081               CPI     R24, 1
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   0799               CPC     R25, R25
   \   00000040   F40C               BRGE    $+2+2
   \   00000042   C046               RJMP    ??ReceivePTOData_0
    501                  for (pnt = 0; pnt < packlen; pnt += 6) {
   \   00000044   E010               LDI     R17, 0
   \   00000046   2388               TST     R24
   \   00000048   F409               BRNE    $+2+2
   \   0000004A   C042               RJMP    ??ReceivePTOData_0
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   85A2               LDD     R26, Z+10
   \   00000050   85B3               LDD     R27, Z+11
   \   00000052   0DA4               ADD     R26, R4
   \   00000054   1DB5               ADC     R27, R5
   \   00000056   E024               LDI     R18, 4
   \   00000058   9E62               MUL     R6, R18
   \   0000005A   0110               MOVW    R3:R2, R1:R0
    502                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \                     ??ReceivePTOData_1:
   \   0000005C   01FD               MOVW    R31:R30, R27:R26
   \   0000005E   8120               LD      R18, Z
   \   00000060   E030               LDI     R19, 0
    503                      if (ADCh < 14) {
   \   00000062   302E               CPI     R18, 14
   \   00000064   F578               BRCC    ??ReceivePTOData_2
    504                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000066   8161               LDD     R22, Z+1
   \   00000068   ....               LDI     R30, LOW((TData + 59))
   \   0000006A   ....               LDI     R31, HIGH((TData + 59))
   \   0000006C   0FE2               ADD     R30, R18
   \   0000006E   1FF9               ADC     R31, R25
   \   00000070   9140....           LDS     R20, PortPair
   \   00000074   0121               MOVW    R5:R4, R3:R2
   \   00000076   0E44               ADD     R4, R20
   \   00000078   1E59               ADC     R5, R25
   \   0000007A   E04E               LDI     R20, 14
   \   0000007C   9E54               MUL     R5, R20
   \   0000007E   2C50               MOV     R5, R0
   \   00000080   9E44               MUL     R4, R20
   \   00000082   0C51               ADD     R5, R1
   \   00000084   0DE0               ADD     R30, R0
   \   00000086   1DF5               ADC     R31, R5
   \   00000088   8360               ST      Z, R22
    505                          *((float *)&TData.RS4.Result[(ch * 4) + PortPair][ADCh]) = *((float *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   0000008A   01FD               MOVW    R31:R30, R27:R26
   \   0000008C   8142               LDD     R20, Z+2
   \   0000008E   8153               LDD     R21, Z+3
   \   00000090   8164               LDD     R22, Z+4
   \   00000092   8175               LDD     R23, Z+5
   \   00000094   ....               LDI     R30, LOW((TData + 731))
   \   00000096   ....               LDI     R31, HIGH((TData + 731))
   \   00000098   0F22               LSL     R18
   \   0000009A   1F33               ROL     R19
   \   0000009C   0F22               LSL     R18
   \   0000009E   1F33               ROL     R19
   \   000000A0   0FE2               ADD     R30, R18
   \   000000A2   1FF3               ADC     R31, R19
   \   000000A4   9120....           LDS     R18, PortPair
   \   000000A8   0121               MOVW    R5:R4, R3:R2
   \   000000AA   0E42               ADD     R4, R18
   \   000000AC   1E59               ADC     R5, R25
   \   000000AE   E328               LDI     R18, 56
   \   000000B0   9E52               MUL     R5, R18
   \   000000B2   2C50               MOV     R5, R0
   \   000000B4   9E42               MUL     R4, R18
   \   000000B6   0C51               ADD     R5, R1
   \   000000B8   0DE0               ADD     R30, R0
   \   000000BA   1DF5               ADC     R31, R5
   \   000000BC   8340               ST      Z, R20
   \   000000BE   8351               STD     Z+1, R21
   \   000000C0   8362               STD     Z+2, R22
   \   000000C2   8373               STD     Z+3, R23
    506                      }
    507                  }
   \                     ??ReceivePTOData_2:
   \   000000C4   5F0A               SUBI    R16, 250
   \   000000C6   4F1F               SBCI    R17, 255
   \   000000C8   9616               ADIW    R27:R26, 6
   \   000000CA   1708               CP      R16, R24
   \   000000CC   0719               CPC     R17, R25
   \   000000CE   F230               BRCS    ??ReceivePTOData_1
    508              }
    509              OS_Unuse(&UARTSEND);
   \                     ??ReceivePTOData_0:
   \   000000D0   ....               LDI     R16, LOW(UARTSEND)
   \   000000D2   ....               LDI     R17, (UARTSEND) >> 8
   \   000000D4   ........           CALL    OS_Unuse
    510          }
   \   000000D8   ....               RJMP    ?Subroutine2
    511          /*************************************************************************
    512          *
    513          *  Receive Wash Track and High Level data from AN_SGCNV
    514          *
    515          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    516          void ReceiveWHData(char ch, unsigned short pointer) {
   \                     ReceiveWHData:
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93AA               ST      -Y, R26
   \   00000006   939A               ST      -Y, R25
   \   00000008   938A               ST      -Y, R24
   \   0000000A                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000A                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000A                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000000A   2FA0               MOV     R26, R16
   \   0000000C   01C9               MOVW    R25:R24, R19:R18
    517          
    518              // Fixed packet length
    519              //short packlen;
    520          
    521              //packlen = UART16552[ch].pRxBuffer[pointer - 1];
    522          
    523              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   0000000E   ....               LDI     R16, LOW(UARTSEND)
   \   00000010   ....               LDI     R17, (UARTSEND) >> 8
   \   00000012   ........           CALL    OS_Use
    524          
    525              for (short pnt = 0; pnt < 4; pnt++) {
   \   00000016   E060               LDI     R22, 0
   \   00000018   E070               LDI     R23, 0
   \   0000001A   E10A               LDI     R16, 26
   \   0000001C   9FA0               MUL     R26, R16
   \   0000001E   ....               LDI     R30, LOW(UART16552)
   \   00000020   ....               LDI     R31, (UART16552) >> 8
   \   00000022   0DE0               ADD     R30, R0
   \   00000024   1DF1               ADC     R31, R1
   \   00000026   8542               LDD     R20, Z+10
   \   00000028   8553               LDD     R21, Z+11
   \   0000002A   0F48               ADD     R20, R24
   \   0000002C   1F59               ADC     R21, R25
   \   0000002E   018A               MOVW    R17:R16, R21:R20
   \   00000030   E024               LDI     R18, 4
   \   00000032   9FA2               MUL     R26, R18
    526                  TData.RS4.WTrackCnt[(ch * 4) + PortPair][pnt] = ((unsigned short*)&UART16552[ch].pRxBuffer[pointer])[pnt];  // 4 x Wash track 
   \                     ??ReceiveWHData_0:
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   9181               LD      R24, Z+
   \   00000038   9191               LD      R25, Z+
   \   0000003A   018F               MOVW    R17:R16, R31:R30
   \   0000003C   ....               LDI     R30, LOW((TData + 1179))
   \   0000003E   ....               LDI     R31, HIGH((TData + 1179))
   \   00000040   011B               MOVW    R3:R2, R23:R22
   \   00000042   0C22               LSL     R2
   \   00000044   1C33               ROL     R3
   \   00000046   0DE2               ADD     R30, R2
   \   00000048   1DF3               ADC     R31, R3
   \   0000004A   9020....           LDS     R2, PortPair
   \   0000004E   2433               CLR     R3
   \   00000050   0120               MOVW    R5:R4, R1:R0
   \   00000052   0C42               ADD     R4, R2
   \   00000054   1C53               ADC     R5, R3
   \   00000056   0C44               LSL     R4
   \   00000058   1C55               ROL     R5
   \   0000005A   0C44               LSL     R4
   \   0000005C   1C55               ROL     R5
   \   0000005E   0C44               LSL     R4
   \   00000060   1C55               ROL     R5
   \   00000062   0DE4               ADD     R30, R4
   \   00000064   1DF5               ADC     R31, R5
   \   00000066   8380               ST      Z, R24
   \   00000068   8391               STD     Z+1, R25
    527              }
   \   0000006A   5F6F               SUBI    R22, 255
   \   0000006C   4F7F               SBCI    R23, 255
   \   0000006E   952A               DEC     R18
   \   00000070   F709               BRNE    ??ReceiveWHData_0
    528              TData.RS4.LevelSwitch[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer+8]; // Hgh levels in 9th byte
   \   00000072   01FA               MOVW    R31:R30, R21:R20
   \   00000074   8520               LDD     R18, Z+8
   \   00000076   9100....           LDS     R16, PortPair
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   01B0               MOVW    R23:R22, R1:R0
   \   0000007E   0F60               ADD     R22, R16
   \   00000080   1F71               ADC     R23, R17
   \   00000082   01FB               MOVW    R31:R30, R23:R22
   \   00000084   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   00000086   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   00000088   8320               ST      Z, R18
    529              TData.RS4.WTTime[(ch * 4) + PortPair] = *((unsigned short *)&UART16552[ch].pRxBuffer[pointer+9]);  // WashTrack time in 10th and 11th bytes
   \   0000008A   01FA               MOVW    R31:R30, R21:R20
   \   0000008C   8521               LDD     R18, Z+9
   \   0000008E   8532               LDD     R19, Z+10
   \   00000090   9100....           LDS     R16, PortPair
   \   00000094   0E00               ADD     R0, R16
   \   00000096   1E11               ADC     R1, R17
   \   00000098   0C00               LSL     R0
   \   0000009A   1C11               ROL     R1
   \   0000009C   01F0               MOVW    R31:R30, R1:R0
   \   0000009E   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   000000A0   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   000000A2   8320               ST      Z, R18
   \   000000A4   8331               STD     Z+1, R19
    530              
    531              TData.RS4.WHDataAvailable |= 0x01 << ((ch * 4) + PortPair);
   \   000000A6   0FAA               LSL     R26
   \   000000A8   0FAA               LSL     R26
   \   000000AA   9100....           LDS     R16, PortPair
   \   000000AE   0FA0               ADD     R26, R16
   \   000000B0   E001               LDI     R16, 1
   \   000000B2   2F4A               MOV     R20, R26
   \   000000B4   ........           CALL    ?S_SHL_L02
   \   000000B8   9110....           LDS     R17, (TData + 1267)
   \   000000BC   2B10               OR      R17, R16
   \   000000BE   9310....           STS     (TData + 1267), R17
    532              OS_Unuse(&UARTSEND);
   \   000000C2   ....               LDI     R16, LOW(UARTSEND)
   \   000000C4   ....               LDI     R17, (UARTSEND) >> 8
   \   000000C6   ........           CALL    OS_Unuse
    533          }
   \   000000CA   9189               LD      R24, Y+
   \   000000CC   9199               LD      R25, Y+
   \   000000CE   91A9               LD      R26, Y+
   \   000000D0   9049               LD      R4, Y+
   \   000000D2   9059               LD      R5, Y+
   \   000000D4   9508               RET
    534          
    535          
    536          /************************************************************************
    537          *
    538          *  Receive raw data for pressure, temp and other from AN_SGCNV
    539          *
    540          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9069               LD      R6, Y+
   \   0000000E   9079               LD      R7, Y+
   \   00000010   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    541          void ReceiveRData(char ch, unsigned short pointer) {
   \                     ReceiveRData:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000010   01A9               MOVW    R21:R20, R19:R18
   \   00000012   E11A               LDI     R17, 26
   \   00000014   9F01               MUL     R16, R17
   \   00000016   ....               LDI     R30, LOW(UART16552)
   \   00000018   ....               LDI     R31, (UART16552) >> 8
   \   0000001A   0DE0               ADD     R30, R0
   \   0000001C   1DF1               ADC     R31, R1
   \   0000001E   8562               LDD     R22, Z+10
   \   00000020   8573               LDD     R23, Z+11
   \   00000022   01FB               MOVW    R31:R30, R23:R22
   \   00000024   0FE4               ADD     R30, R20
   \   00000026   1FF5               ADC     R31, R21
   \   00000028   9122               LD      R18, -Z
   \   0000002A   E030               LDI     R19, 0
    542          
    543              char pnt, ADCh;
    544              short packlen;
    545          
    546              packlen = UART16552[ch].pRxBuffer[pointer - 1];
    547          
    548              if (packlen > 0) {
   \   0000002C   3021               CPI     R18, 1
   \   0000002E   0733               CPC     R19, R19
   \   00000030   F1E4               BRLT    ??ReceiveRData_0
    549                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000032   E080               LDI     R24, 0
   \   00000034   E014               LDI     R17, 4
   \   00000036   9F01               MUL     R16, R17
   \   00000038   0110               MOVW    R3:R2, R1:R0
   \   0000003A   C034               RJMP    ??ReceiveRData_1
   \                     ??ReceiveRData_2:
   \   0000003C   018A               MOVW    R17:R16, R21:R20
   \   0000003E   0F08               ADD     R16, R24
   \   00000040   1F13               ADC     R17, R19
   \   00000042   01DB               MOVW    R27:R26, R23:R22
   \   00000044   0FA0               ADD     R26, R16
   \   00000046   1FB1               ADC     R27, R17
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8190               LD      R25, Z
    550                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
    551                      if (ADCh < 14) {
   \   0000004C   309E               CPI     R25, 14
   \   0000004E   F548               BRCC    ??ReceiveRData_3
    552                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000050   8041               LDD     R4, Z+1
   \   00000052   ....               LDI     R30, LOW((TData + 59))
   \   00000054   ....               LDI     R31, HIGH((TData + 59))
   \   00000056   0FE9               ADD     R30, R25
   \   00000058   1FF3               ADC     R31, R19
   \   0000005A   9100....           LDS     R16, PortPair
   \   0000005E   0131               MOVW    R7:R6, R3:R2
   \   00000060   0E60               ADD     R6, R16
   \   00000062   1E73               ADC     R7, R19
   \   00000064   E00E               LDI     R16, 14
   \   00000066   9E70               MUL     R7, R16
   \   00000068   2C70               MOV     R7, R0
   \   0000006A   9E60               MUL     R6, R16
   \   0000006C   0C71               ADD     R7, R1
   \   0000006E   0DE0               ADD     R30, R0
   \   00000070   1DF7               ADC     R31, R7
   \   00000072   8240               ST      Z, R4
    553                          *((short *)&TData.RS4.Raw[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   00000074   01FD               MOVW    R31:R30, R27:R26
   \   00000076   81A2               LDD     R26, Z+2
   \   00000078   81B3               LDD     R27, Z+3
   \   0000007A   ....               LDI     R30, LOW((TData + 283))
   \   0000007C   ....               LDI     R31, HIGH((TData + 283))
   \   0000007E   E002               LDI     R16, 2
   \   00000080   9F90               MUL     R25, R16
   \   00000082   0DE0               ADD     R30, R0
   \   00000084   1DF1               ADC     R31, R1
   \   00000086   9100....           LDS     R16, PortPair
   \   0000008A   0121               MOVW    R5:R4, R3:R2
   \   0000008C   0E40               ADD     R4, R16
   \   0000008E   1E53               ADC     R5, R19
   \   00000090   E10C               LDI     R16, 28
   \   00000092   9E50               MUL     R5, R16
   \   00000094   2C50               MOV     R5, R0
   \   00000096   9E40               MUL     R4, R16
   \   00000098   0C51               ADD     R5, R1
   \   0000009A   0DE0               ADD     R30, R0
   \   0000009C   1DF5               ADC     R31, R5
   \   0000009E   83A0               ST      Z, R26
   \   000000A0   83B1               STD     Z+1, R27
    554                      }
    555                  }
   \                     ??ReceiveRData_3:
   \   000000A2   5F8C               SUBI    R24, 252
   \                     ??ReceiveRData_1:
   \   000000A4   1782               CP      R24, R18
   \   000000A6   0733               CPC     R19, R19
   \   000000A8   F24C               BRLT    ??ReceiveRData_2
    556              }
    557          }
   \                     ??ReceiveRData_0:
   \   000000AA   ....               RJMP    ?Subroutine1
    558          
    559          /*************************************************************************
    560          *
    561          *  Receive cal data  from AN_SGCNV
    562          *
    563          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    564          void ReceiveCData(char ch, unsigned short pointer) {
   \                     ReceiveCData:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000010   01A9               MOVW    R21:R20, R19:R18
   \   00000012   E11A               LDI     R17, 26
   \   00000014   9F01               MUL     R16, R17
   \   00000016   ....               LDI     R30, LOW(UART16552)
   \   00000018   ....               LDI     R31, (UART16552) >> 8
   \   0000001A   0DE0               ADD     R30, R0
   \   0000001C   1DF1               ADC     R31, R1
   \   0000001E   8562               LDD     R22, Z+10
   \   00000020   8573               LDD     R23, Z+11
   \   00000022   01FB               MOVW    R31:R30, R23:R22
   \   00000024   0FE4               ADD     R30, R20
   \   00000026   1FF5               ADC     R31, R21
   \   00000028   9122               LD      R18, -Z
   \   0000002A   E030               LDI     R19, 0
    565          
    566              char pnt, ADCh;
    567              short packlen;
    568          
    569              packlen = UART16552[ch].pRxBuffer[pointer - 1];
    570          
    571              if (packlen > 0) {
   \   0000002C   3021               CPI     R18, 1
   \   0000002E   0733               CPC     R19, R19
   \   00000030   F1E4               BRLT    ??ReceiveCData_0
    572                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000032   E080               LDI     R24, 0
   \   00000034   E014               LDI     R17, 4
   \   00000036   9F01               MUL     R16, R17
   \   00000038   0110               MOVW    R3:R2, R1:R0
   \   0000003A   C034               RJMP    ??ReceiveCData_1
   \                     ??ReceiveCData_2:
   \   0000003C   018A               MOVW    R17:R16, R21:R20
   \   0000003E   0F08               ADD     R16, R24
   \   00000040   1F13               ADC     R17, R19
   \   00000042   01DB               MOVW    R27:R26, R23:R22
   \   00000044   0FA0               ADD     R26, R16
   \   00000046   1FB1               ADC     R27, R17
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8190               LD      R25, Z
    573                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
    574                      if (ADCh < 14) {
   \   0000004C   309E               CPI     R25, 14
   \   0000004E   F548               BRCC    ??ReceiveCData_3
    575                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000050   8041               LDD     R4, Z+1
   \   00000052   ....               LDI     R30, LOW((TData + 59))
   \   00000054   ....               LDI     R31, HIGH((TData + 59))
   \   00000056   0FE9               ADD     R30, R25
   \   00000058   1FF3               ADC     R31, R19
   \   0000005A   9100....           LDS     R16, PortPair
   \   0000005E   0131               MOVW    R7:R6, R3:R2
   \   00000060   0E60               ADD     R6, R16
   \   00000062   1E73               ADC     R7, R19
   \   00000064   E00E               LDI     R16, 14
   \   00000066   9E70               MUL     R7, R16
   \   00000068   2C70               MOV     R7, R0
   \   0000006A   9E60               MUL     R6, R16
   \   0000006C   0C71               ADD     R7, R1
   \   0000006E   0DE0               ADD     R30, R0
   \   00000070   1DF7               ADC     R31, R7
   \   00000072   8240               ST      Z, R4
    576                          *((short *)&TData.RS4.Cal[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   00000074   01FD               MOVW    R31:R30, R27:R26
   \   00000076   81A2               LDD     R26, Z+2
   \   00000078   81B3               LDD     R27, Z+3
   \   0000007A   ....               LDI     R30, LOW((TData + 507))
   \   0000007C   ....               LDI     R31, HIGH((TData + 507))
   \   0000007E   E002               LDI     R16, 2
   \   00000080   9F90               MUL     R25, R16
   \   00000082   0DE0               ADD     R30, R0
   \   00000084   1DF1               ADC     R31, R1
   \   00000086   9100....           LDS     R16, PortPair
   \   0000008A   0121               MOVW    R5:R4, R3:R2
   \   0000008C   0E40               ADD     R4, R16
   \   0000008E   1E53               ADC     R5, R19
   \   00000090   E10C               LDI     R16, 28
   \   00000092   9E50               MUL     R5, R16
   \   00000094   2C50               MOV     R5, R0
   \   00000096   9E40               MUL     R4, R16
   \   00000098   0C51               ADD     R5, R1
   \   0000009A   0DE0               ADD     R30, R0
   \   0000009C   1DF5               ADC     R31, R5
   \   0000009E   83A0               ST      Z, R26
   \   000000A0   83B1               STD     Z+1, R27
    577                      }
    578                  }
   \                     ??ReceiveCData_3:
   \   000000A2   5F8C               SUBI    R24, 252
   \                     ??ReceiveCData_1:
   \   000000A4   1782               CP      R24, R18
   \   000000A6   0733               CPC     R19, R19
   \   000000A8   F24C               BRLT    ??ReceiveCData_2
    579              }
    580          }
   \                     ??ReceiveCData_0:
   \   000000AA                      REQUIRE ?Subroutine1
   \   000000AA                      ;               // Fall through to label ?Subroutine1
    581          
    582          /*************************************************************************
    583          *
    584          *  Receive card status  from AN_SGCNV
    585          *
    586          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    587          void ReceiveCardStatus(char ch, unsigned short pointer) {
   \                     ReceiveCardStatus:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   961A               ADIW    R27:R26, 10
   \   00000010   91ED               LD      R30, X+
   \   00000012   91FC               LD      R31, X
   \   00000014   0FE2               ADD     R30, R18
   \   00000016   1FF3               ADC     R31, R19
   \   00000018   E014               LDI     R17, 4
   \   0000001A   9F01               MUL     R16, R17
   \   0000001C   8120               LD      R18, Z
   \   0000001E   9100....           LDS     R16, PortPair
   \   00000022   E010               LDI     R17, 0
   \   00000024   01A0               MOVW    R21:R20, R1:R0
   \   00000026   0F40               ADD     R20, R16
   \   00000028   1F51               ADC     R21, R17
   \   0000002A   01DA               MOVW    R27:R26, R21:R20
   \   0000002C   ....               SUBI    R26, LOW((-(TData + 43) & 0xFFFF))
   \   0000002E   ....               SBCI    R27, HIGH((-(TData + 43) & 0xFFFF))
   \   00000030   932C               ST      X, R18
    588          
    589              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer];
    590              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000032   8121               LDD     R18, Z+1
   \   00000034   9100....           LDS     R16, PortPair
   \   00000038   0E00               ADD     R0, R16
   \   0000003A   1E11               ADC     R1, R17
   \   0000003C   01F0               MOVW    R31:R30, R1:R0
   \   0000003E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000040   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000042   AB23               STD     Z+51, R18
    591          }
   \   00000044   01DB               MOVW    R27:R26, R23:R22
   \   00000046   9508               RET
    592          
    593          /*************************************************************************
    594          *
    595          *  Receive config data from AN_SGCNV
    596          *
    597          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    598          void ReceiveConfigData(char ch, unsigned short pointer) {
   \                     ReceiveConfigData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    599          
    600              char i, ADCh;
    601          
    602              for (i = 0; i < 14; i++) {
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   85A2               LDD     R26, Z+10
   \   00000010   85B3               LDD     R27, Z+11
   \   00000012   0FA2               ADD     R26, R18
   \   00000014   1FB3               ADC     R27, R19
   \   00000016   E02E               LDI     R18, 14
   \   00000018   E014               LDI     R17, 4
   \   0000001A   9F01               MUL     R16, R17
   \   0000001C   01A0               MOVW    R21:R20, R1:R0
    603                  ADCh = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveConfigData_0:
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   8160               LD      R22, Z
    604                  if (ADCh < 14) {
   \   00000022   306E               CPI     R22, 14
   \   00000024   F538               BRCC    ??ReceiveConfigData_1
    605                      TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer];
   \   00000026   8131               LDD     R19, Z+1
   \   00000028   ....               LDI     R30, LOW((TData + 59))
   \   0000002A   ....               LDI     R31, HIGH((TData + 59))
   \   0000002C   E070               LDI     R23, 0
   \   0000002E   0FE6               ADD     R30, R22
   \   00000030   1FF7               ADC     R31, R23
   \   00000032   9100....           LDS     R16, PortPair
   \   00000036   E010               LDI     R17, 0
   \   00000038   011A               MOVW    R3:R2, R21:R20
   \   0000003A   0E20               ADD     R2, R16
   \   0000003C   1E37               ADC     R3, R23
   \   0000003E   E00E               LDI     R16, 14
   \   00000040   9E30               MUL     R3, R16
   \   00000042   2C30               MOV     R3, R0
   \   00000044   9E20               MUL     R2, R16
   \   00000046   0C31               ADD     R3, R1
   \   00000048   0DE0               ADD     R30, R0
   \   0000004A   1DF3               ADC     R31, R3
   \   0000004C   8330               ST      Z, R19
    606                      TData.RS4.TargetSetup2[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000004E   01FD               MOVW    R31:R30, R27:R26
   \   00000050   8132               LDD     R19, Z+2
   \   00000052   ....               LDI     R30, LOW((TData + 171))
   \   00000054   ....               LDI     R31, HIGH((TData + 171))
   \   00000056   0FE6               ADD     R30, R22
   \   00000058   1FF7               ADC     R31, R23
   \   0000005A   9100....           LDS     R16, PortPair
   \   0000005E   01BA               MOVW    R23:R22, R21:R20
   \   00000060   0F60               ADD     R22, R16
   \   00000062   1F71               ADC     R23, R17
   \   00000064   E00E               LDI     R16, 14
   \   00000066   9F70               MUL     R23, R16
   \   00000068   2D70               MOV     R23, R0
   \   0000006A   9F60               MUL     R22, R16
   \   0000006C   0D71               ADD     R23, R1
   \   0000006E   0DE0               ADD     R30, R0
   \   00000070   1FF7               ADC     R31, R23
   \   00000072   8330               ST      Z, R19
    607                  }
    608                  pointer += 2;
    609              }
   \                     ??ReceiveConfigData_1:
   \   00000074   9613               ADIW    R27:R26, 3
   \   00000076   952A               DEC     R18
   \   00000078   F691               BRNE    ??ReceiveConfigData_0
    610          }
   \   0000007A   91A9               LD      R26, Y+
   \   0000007C   91B9               LD      R27, Y+
   \   0000007E   9508               RET
    611          
    612          /*************************************************************************
    613          *
    614          *  Receive eeprom data from AN_SGCNV
    615          *
    616          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    617          void ReceiveCardEEPROMData(char ch, unsigned short pointer) {
   \                     ReceiveCardEEPROMData:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    618          
    619              short i;
    620          
    621              TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000004   E312               LDI     R17, 50
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(TData)
   \   0000000A   ....               LDI     R31, (TData) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   01DF               MOVW    R27:R26, R31:R30
   \   00000012   56AC               SUBI    R26, 108
   \   00000014   4FBA               SBCI    R27, 250
   \   00000016   E011               LDI     R17, 1
   \   00000018   931D               ST      X+, R17
    622              TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   0000001A   2F10               MOV     R17, R16
   \   0000001C   0F11               LSL     R17
   \   0000001E   0F11               LSL     R17
   \   00000020   9140....           LDS     R20, PortPair
   \   00000024   0F14               ADD     R17, R20
   \   00000026   931C               ST      X, R17
    623              for (i = 2; i < (41 + 2); i++) {
   \   00000028   E11A               LDI     R17, 26
   \   0000002A   9F01               MUL     R16, R17
   \   0000002C   01D0               MOVW    R27:R26, R1:R0
   \   0000002E   ....               SUBI    R26, LOW((-(UART16552 + 10) & 0xFFFF))
   \   00000030   ....               SBCI    R27, HIGH((-(UART16552 + 10) & 0xFFFF))
   \   00000032   910D               LD      R16, X+
   \   00000034   911C               LD      R17, X
   \   00000036   0F02               ADD     R16, R18
   \   00000038   1F13               ADC     R17, R19
   \   0000003A   56EA               SUBI    R30, 106
   \   0000003C   4FFA               SBCI    R31, 250
   \   0000003E   E229               LDI     R18, 41
    624                  TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveCardEEPROMData_0:
   \   00000040   01D8               MOVW    R27:R26, R17:R16
   \   00000042   913D               LD      R19, X+
   \   00000044   018D               MOVW    R17:R16, R27:R26
   \   00000046   9331               ST      Z+, R19
    625              }
   \   00000048   952A               DEC     R18
   \   0000004A   F7D1               BRNE    ??ReceiveCardEEPROMData_0
    626          }
   \   0000004C   2FA6               MOV     R26, R22
   \   0000004E   2FB5               MOV     R27, R21
   \   00000050   9508               RET
    627          
    628          /*************************************************************************
    629          *
    630          * Build send packet header for AN-SGCNV
    631          *
    632          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    633          void Uart_BuildHeader16552(char ch) {
   \                     Uart_BuildHeader16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    634          
    635              UART16552[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   01FD               MOVW    R31:R30, R27:R26
   \   00000010   E000               LDI     R16, 0
   \   00000012   8704               STD     Z+12, R16
   \   00000014   8705               STD     Z+13, R16
    636              UART16552[ch].RxLast = 0;
   \   00000016   8706               STD     Z+14, R16
   \   00000018   8707               STD     Z+15, R16
    637              UART16552[ch].TxLast = 0;
   \   0000001A   8304               STD     Z+4, R16
   \   0000001C   8305               STD     Z+5, R16
    638          
    639              UART16552[ch].pTxBuffer[0] = ANPRO1_SYN;                        /* Sync */
   \   0000001E   91ED               LD      R30, X+
   \   00000020   91FC               LD      R31, X
   \   00000022   9711               SBIW    R27:R26, 1
   \   00000024   E002               LDI     R16, 2
   \   00000026   8300               ST      Z, R16
    640              UART16552[ch].pTxBuffer[1] = ANPRO1_SYN;                        /* Sync */
   \   00000028   91ED               LD      R30, X+
   \   0000002A   91FC               LD      R31, X
   \   0000002C   9711               SBIW    R27:R26, 1
   \   0000002E   8301               STD     Z+1, R16
    641              UART16552[ch].pTxBuffer[2] = 0;                          /* Rx address */
   \   00000030   91ED               LD      R30, X+
   \   00000032   91FC               LD      R31, X
   \   00000034   9711               SBIW    R27:R26, 1
   \   00000036   E000               LDI     R16, 0
   \   00000038   8302               STD     Z+2, R16
    642              UART16552[ch].pTxBuffer[3] = MY_SGCNV_ADDR;              /* My address to AD-SGCNV */
   \   0000003A   91ED               LD      R30, X+
   \   0000003C   91FC               LD      R31, X
   \   0000003E   9711               SBIW    R27:R26, 1
   \   00000040   EF0D               LDI     R16, 253
   \   00000042   8303               STD     Z+3, R16
    643              UART16552[ch].pTxBuffer[4] = 0;                          /* packlen HB, don't know yet */
   \   00000044   91ED               LD      R30, X+
   \   00000046   91FC               LD      R31, X
   \   00000048   9711               SBIW    R27:R26, 1
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   8304               STD     Z+4, R16
    644              UART16552[ch].pTxBuffer[5] = 0;                          /* packlen LB, don't know yet */
   \   0000004E   91ED               LD      R30, X+
   \   00000050   91FC               LD      R31, X
   \   00000052   8305               STD     Z+5, R16
    645          }
   \   00000054   01D9               MOVW    R27:R26, R19:R18
   \   00000056   9508               RET
    646          
    647          /*************************************************************************
    648          *
    649          * Build  packet tail
    650          *
    651          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    652          void Uart_BuildTail16552(char ch) {
   \                     Uart_BuildTail16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000006   2F80               MOV     R24, R16
    653          
    654              Uart_BuildHeader16552(ch);                                // fist build the header
   \   00000008   ....               RCALL   Uart_BuildHeader16552
    655          
    656              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;         // command, No more data
   \   0000000A   E10A               LDI     R16, 26
   \   0000000C   9F80               MUL     R24, R16
   \   0000000E   ....               LDI     R26, LOW(UART16552)
   \   00000010   ....               LDI     R27, (UART16552) >> 8
   \   00000012   0DA0               ADD     R26, R0
   \   00000014   1DB1               ADC     R27, R1
   \   00000016   910D               LD      R16, X+
   \   00000018   911C               LD      R17, X
   \   0000001A   9711               SBIW    R27:R26, 1
   \   0000001C   01FD               MOVW    R31:R30, R27:R26
   \   0000001E   8122               LDD     R18, Z+2
   \   00000020   8133               LDD     R19, Z+3
   \   00000022   0F02               ADD     R16, R18
   \   00000024   1F13               ADC     R17, R19
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   E001               LDI     R16, 1
   \   0000002A   8300               ST      Z, R16
   \   0000002C   01FD               MOVW    R31:R30, R27:R26
   \   0000002E   8102               LDD     R16, Z+2
   \   00000030   8113               LDD     R17, Z+3
   \   00000032   5F0F               SUBI    R16, 255
   \   00000034   4F1F               SBCI    R17, 255
   \   00000036   8302               STD     Z+2, R16
   \   00000038   8313               STD     Z+3, R17
    657              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;         // error
   \   0000003A   8100               LD      R16, Z
   \   0000003C   8111               LDD     R17, Z+1
   \   0000003E   8122               LDD     R18, Z+2
   \   00000040   8133               LDD     R19, Z+3
   \   00000042   0F02               ADD     R16, R18
   \   00000044   1F13               ADC     R17, R19
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   E000               LDI     R16, 0
   \   0000004A   8300               ST      Z, R16
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8102               LDD     R16, Z+2
   \   00000050   8113               LDD     R17, Z+3
   \   00000052   5F0F               SUBI    R16, 255
   \   00000054   4F1F               SBCI    R17, 255
   \   00000056   8302               STD     Z+2, R16
   \   00000058   8313               STD     Z+3, R17
    658          
    659              UART16552[ch].pTxBuffer[4] = (UART16552[ch].TxFirst) >> 8;           // packet len high
   \   0000005A   91ED               LD      R30, X+
   \   0000005C   91FC               LD      R31, X
   \   0000005E   9711               SBIW    R27:R26, 1
   \   00000060   8314               STD     Z+4, R17
    660              UART16552[ch].pTxBuffer[5] = UART16552[ch].TxFirst;                // correct length because stx's
   \   00000062   01FD               MOVW    R31:R30, R27:R26
   \   00000064   8102               LDD     R16, Z+2
   \   00000066   91ED               LD      R30, X+
   \   00000068   91FC               LD      R31, X
   \   0000006A   9711               SBIW    R27:R26, 1
   \   0000006C   8305               STD     Z+5, R16
    661          
    662          
    663              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst] = CalcDSTxChecksumUART16552(ch, UART16552[ch].TxFirst); // Get checksum
   \   0000006E   01FD               MOVW    R31:R30, R27:R26
   \   00000070   8122               LDD     R18, Z+2
   \   00000072   8133               LDD     R19, Z+3
   \   00000074   2F08               MOV     R16, R24
   \   00000076   ....               RCALL   CalcDSTxChecksumUART16552
   \   00000078   2F20               MOV     R18, R16
   \   0000007A   910D               LD      R16, X+
   \   0000007C   911C               LD      R17, X
   \   0000007E   9711               SBIW    R27:R26, 1
   \   00000080   01FD               MOVW    R31:R30, R27:R26
   \   00000082   8142               LDD     R20, Z+2
   \   00000084   8153               LDD     R21, Z+3
   \   00000086   0F04               ADD     R16, R20
   \   00000088   1F15               ADC     R17, R21
   \   0000008A   01F8               MOVW    R31:R30, R17:R16
   \   0000008C   8320               ST      Z, R18
    664              UART16552[ch].TxFirst++;                                     // OBS!! must be inc here due
   \   0000008E   01FD               MOVW    R31:R30, R27:R26
   \   00000090   8102               LDD     R16, Z+2
   \   00000092   8113               LDD     R17, Z+3
   \   00000094   5F0F               SUBI    R16, 255
   \   00000096   4F1F               SBCI    R17, 255
   \   00000098   8302               STD     Z+2, R16
   \   0000009A   8313               STD     Z+3, R17
    665                                                                           // to ANSI standard !!!!
    666          
    667              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANPRO1_EOT;            // End of transmission
   \   0000009C   8100               LD      R16, Z
   \   0000009E   8111               LDD     R17, Z+1
   \   000000A0   8122               LDD     R18, Z+2
   \   000000A2   8133               LDD     R19, Z+3
   \   000000A4   0F02               ADD     R16, R18
   \   000000A6   1F13               ADC     R17, R19
   \   000000A8   01F8               MOVW    R31:R30, R17:R16
   \   000000AA   E003               LDI     R16, 3
   \   000000AC   8300               ST      Z, R16
   \   000000AE   01FD               MOVW    R31:R30, R27:R26
   \   000000B0   8102               LDD     R16, Z+2
   \   000000B2   8113               LDD     R17, Z+3
   \   000000B4   5F0F               SUBI    R16, 255
   \   000000B6   4F1F               SBCI    R17, 255
   \   000000B8   8302               STD     Z+2, R16
   \   000000BA   8313               STD     Z+3, R17
    668              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0x00;            //switch off transmitter delay
   \   000000BC   8100               LD      R16, Z
   \   000000BE   8111               LDD     R17, Z+1
   \   000000C0   8122               LDD     R18, Z+2
   \   000000C2   8133               LDD     R19, Z+3
   \   000000C4   0F02               ADD     R16, R18
   \   000000C6   1F13               ADC     R17, R19
   \   000000C8   01F8               MOVW    R31:R30, R17:R16
   \   000000CA   E000               LDI     R16, 0
   \   000000CC   8300               ST      Z, R16
   \   000000CE   01FD               MOVW    R31:R30, R27:R26
   \   000000D0   8102               LDD     R16, Z+2
   \   000000D2   8113               LDD     R17, Z+3
   \   000000D4   5F0F               SUBI    R16, 255
   \   000000D6   4F1F               SBCI    R17, 255
   \   000000D8   8302               STD     Z+2, R16
   \   000000DA   8313               STD     Z+3, R17
    669          
    670              UART16552[ch].TxCount = UART16552[ch].TxFirst - 1;       //bytes to send (-1 for the start byte)
   \   000000DC   5001               SUBI    R16, 1
   \   000000DE   4010               SBCI    R17, 0
   \   000000E0   8306               STD     Z+6, R16
   \   000000E2   8317               STD     Z+7, R17
    671              UART16552[ch].TxLast = 1;                               // sent 1 byte
   \   000000E4   E001               LDI     R16, 1
   \   000000E6   8304               STD     Z+4, R16
   \   000000E8   E000               LDI     R16, 0
   \   000000EA   8305               STD     Z+5, R16
    672              GoToSyncUART16552(ch);                                 // go to sync modus for recive
   \   000000EC   2F08               MOV     R16, R24
   \   000000EE   ....               RCALL   GoToSyncUART16552
    673              if (ch == 0) {                                           // Turn on TXE for channel
   \   000000F0   2388               TST     R24
   \   000000F2   F4A9               BRNE    ??Uart_BuildTail16552_0
    674                  OS_RetriggerTimer(&TimerUART0);                    // and start timeout timer
   \   000000F4   ....               LDI     R16, LOW(TimerUART0)
   \   000000F6   ....               LDI     R17, (TimerUART0) >> 8
   \   000000F8   ........           CALL    OS_RetriggerTimer
    675                  U0_MCR |= RTS;                                    // set RTS on
   \   000000FC   9100110C           LDS     R16, 4364
   \   00000100   6002               ORI     R16, 0x02
   \   00000102   9300110C           STS     4364, R16
    676                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   00000106   E104               LDI     R16, 20
   \   00000108   E010               LDI     R17, 0
   \   0000010A   ........           CALL    OS_Delay
    677                  U0_THR = UART16552[ch].pTxBuffer[0];                // Send 1. byte
   \   0000010E   91E0....           LDS     R30, UART16552
   \   00000112   91F0....           LDS     R31, (UART16552 + 1)
   \   00000116   8100               LD      R16, Z
   \   00000118   93001108           STS     4360, R16
   \   0000011C   C016               RJMP    ??Uart_BuildTail16552_1
    678              } else if (ch == 1) {
   \                     ??Uart_BuildTail16552_0:
   \   0000011E   3081               CPI     R24, 1
   \   00000120   F4A1               BRNE    ??Uart_BuildTail16552_1
    679                  OS_RetriggerTimer(&TimerUART1);                    // and start timeout timer
   \   00000122   ....               LDI     R16, LOW(TimerUART1)
   \   00000124   ....               LDI     R17, (TimerUART1) >> 8
   \   00000126   ........           CALL    OS_RetriggerTimer
    680                  U1_MCR |= RTS;                                      // set RTS on
   \   0000012A   91001104           LDS     R16, 4356
   \   0000012E   6002               ORI     R16, 0x02
   \   00000130   93001104           STS     4356, R16
    681                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   00000134   E104               LDI     R16, 20
   \   00000136   E010               LDI     R17, 0
   \   00000138   ........           CALL    OS_Delay
    682                  U1_THR = UART16552[ch].pTxBuffer[0];                  // Send 1. byte
   \   0000013C   91E0....           LDS     R30, (UART16552 + 26)
   \   00000140   91F0....           LDS     R31, (UART16552 + 27)
   \   00000144   8100               LD      R16, Z
   \   00000146   93001100           STS     4352, R16
    683              }
    684          }
   \                     ??Uart_BuildTail16552_1:
   \   0000014A   9189               LD      R24, Y+
   \   0000014C   91A9               LD      R26, Y+
   \   0000014E   91B9               LD      R27, Y+
   \   00000150   9508               RET
    685          
    686          /*************************************************************************
    687          *
    688          * Build send request for system status on WIS
    689          *
    690          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine5_0:
   \   00000000   8102               LDD     R16, Z+2
   \   00000002   8113               LDD     R17, Z+3
   \   00000004   5F0F               SUBI    R16, 255
   \   00000006   4F1F               SBCI    R17, 255
   \   00000008   8302               STD     Z+2, R16
   \   0000000A   8313               STD     Z+3, R17
   \   0000000C   01D9               MOVW    R27:R26, R19:R18
   \   0000000E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    691          void Uart_BuildReqWISCardStatus(char ch) {
   \                     Uart_BuildReqWISCardStatus:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    692          
    693              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_STAT;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   91ED               LD      R30, X+
   \   00000010   91FD               LD      R31, X+
   \   00000012   910D               LD      R16, X+
   \   00000014   911C               LD      R17, X
   \   00000016   9713               SBIW    R27:R26, 3
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   E604               LDI     R16, 100
   \   0000001E                      REQUIRE ?Subroutine4
   \   0000001E                      ;               // Fall through to label ?Subroutine4
    694              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    695          
    696          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   8300               ST      Z, R16
   \   00000002   01FD               MOVW    R31:R30, R27:R26
   \   00000004   8102               LDD     R16, Z+2
   \   00000006   8113               LDD     R17, Z+3
   \   00000008   5F0F               SUBI    R16, 255
   \   0000000A   4F1F               SBCI    R17, 255
   \   0000000C   8302               STD     Z+2, R16
   \   0000000E   8313               STD     Z+3, R17
   \   00000010   91ED               LD      R30, X+
   \   00000012   91FD               LD      R31, X+
   \   00000014   910D               LD      R16, X+
   \   00000016   9713               SBIW    R27:R26, 3
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   8300               ST      Z, R16
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   ........           JMP     ??Subroutine5_0
    697          
    698          /*************************************************************************
    699          *
    700          * Build send request for WIS protocoler on WIS
    701          *
    702          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    703          void Uart_BuildReqWISXData(char ch, char sndcmd) {
   \                     Uart_BuildReqWISXData:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    704          
    705              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_XDATA;       /*command, send data */
   \   00000002   E12A               LDI     R18, 26
   \   00000004   9F02               MUL     R16, R18
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8122               LDD     R18, Z+2
   \   00000014   8133               LDD     R19, Z+3
   \   00000016   0FA2               ADD     R26, R18
   \   00000018   1FB3               ADC     R27, R19
   \   0000001A   E606               LDI     R16, 102
   \   0000001C   930C               ST      X, R16
   \   0000001E   8122               LDD     R18, Z+2
   \   00000020   8133               LDD     R19, Z+3
   \   00000022   5F2F               SUBI    R18, 255
   \   00000024   4F3F               SBCI    R19, 255
   \   00000026   8322               STD     Z+2, R18
   \   00000028   8333               STD     Z+3, R19
    706              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
   \   0000002A   81A0               LD      R26, Z
   \   0000002C   81B1               LDD     R27, Z+1
   \   0000002E   0FA2               ADD     R26, R18
   \   00000030   1FB3               ADC     R27, R19
   \   00000032   E001               LDI     R16, 1
   \   00000034   930C               ST      X, R16
   \   00000036   8122               LDD     R18, Z+2
   \   00000038   8133               LDD     R19, Z+3
   \   0000003A   5F2F               SUBI    R18, 255
   \   0000003C   4F3F               SBCI    R19, 255
   \   0000003E   8322               STD     Z+2, R18
   \   00000040   8333               STD     Z+3, R19
    707              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = sndcmd;                 // xdata cmd
   \   00000042   81A0               LD      R26, Z
   \   00000044   81B1               LDD     R27, Z+1
   \   00000046   0FA2               ADD     R26, R18
   \   00000048   1FB3               ADC     R27, R19
   \   0000004A   931C               ST      X, R17
   \   0000004C   8102               LDD     R16, Z+2
   \   0000004E   8113               LDD     R17, Z+3
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \   00000054   8302               STD     Z+2, R16
   \   00000056   8313               STD     Z+3, R17
    708          
    709          }
   \   00000058   01DA               MOVW    R27:R26, R21:R20
   \   0000005A   9508               RET
    710          
    711          /*************************************************************************
    712          *
    713          * Build send request for measure data to Water ingress
    714          *
    715          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   930C               ST      X, R16
   \   00000002   8102               LDD     R16, Z+2
   \   00000004   8113               LDD     R17, Z+3
   \   00000006   5F0F               SUBI    R16, 255
   \   00000008   4F1F               SBCI    R17, 255
   \   0000000A   8302               STD     Z+2, R16
   \   0000000C   8313               STD     Z+3, R17
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   0FA0               ADD     R26, R16
   \   00000014   1FB1               ADC     R27, R17
   \   00000016   E001               LDI     R16, 1
   \   00000018   930C               ST      X, R16
   \   0000001A   8102               LDD     R16, Z+2
   \   0000001C   8113               LDD     R17, Z+3
   \   0000001E   5F0F               SUBI    R16, 255
   \   00000020   4F1F               SBCI    R17, 255
   \   00000022   8302               STD     Z+2, R16
   \   00000024   8313               STD     Z+3, R17
   \   00000026   81A0               LD      R26, Z
   \   00000028   81B1               LDD     R27, Z+1
   \   0000002A   0FA0               ADD     R26, R16
   \   0000002C   1FB1               ADC     R27, R17
   \   0000002E   E000               LDI     R16, 0
   \   00000030   930C               ST      X, R16
   \   00000032                      REQUIRE ??Subroutine5_0
   \   00000032                      ;               // Fall through to label ??Subroutine5_0

   \                                 In  segment CODE, align 2, keep-with-next
    716          void Uart_BuildReqWISData(char ch) {
   \                     Uart_BuildReqWISData:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    717          
    718              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E605               LDI     R16, 101
   \   0000001C   ....               RJMP    ?Subroutine0
    719              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    720              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    721          
    722          }
    723          
    724          
    725          /*************************************************************************
    726          *
    727          * Build send request for GODA measurement
    728          *
    729          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    730          void Uart_BuildReqRadarData(char ch) {
   \                     Uart_BuildReqRadarData:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    731          
    732              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   EA00               LDI     R16, 160
   \   0000001C                      REQUIRE ?Subroutine0
   \   0000001C                      ;               // Fall through to label ?Subroutine0
    733              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
    734              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 // data
    735          
    736          }
    737          
    738          /*************************************************************************
    739          *
    740          * Build send request for GODA device information
    741          *
    742          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    743          void Uart_BuildReqRadarInfo(char ch) {
   \                     Uart_BuildReqRadarInfo:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    744          
    745              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_INFO;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   91ED               LD      R30, X+
   \   00000010   91FD               LD      R31, X+
   \   00000012   910D               LD      R16, X+
   \   00000014   911C               LD      R17, X
   \   00000016   9713               SBIW    R27:R26, 3
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   EA01               LDI     R16, 161
   \   0000001E   ....               RJMP    ?Subroutine4
    746              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                        /*nob */
    747          }
    748          
    749          /*************************************************************************
    750          *
    751          * Build datablock to AN-SGCNV
    752          *
    753          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    754          void Uart_BuildSndData(char ch) {
   \                     Uart_BuildSndData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   011C               MOVW    R3:R2, R25:R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000006   2F20               MOV     R18, R16
    755          
    756              char i;
    757          
    758              for (i = 3; i < (TData.RS4.ToTargetBuffer[ch][2]) + 3; i++) {
   \   00000008   E043               LDI     R20, 3
   \   0000000A   E500               LDI     R16, 80
   \   0000000C   9F20               MUL     R18, R16
   \   0000000E   ....               LDI     R22, LOW(TData)
   \   00000010   ....               LDI     R23, (TData) >> 8
   \   00000012   0D60               ADD     R22, R0
   \   00000014   1D71               ADC     R23, R1
   \   00000016   018B               MOVW    R17:R16, R23:R22
   \   00000018   500C               SUBI    R16, 12
   \   0000001A   4F1B               SBCI    R17, 251
   \   0000001C   E13A               LDI     R19, 26
   \   0000001E   9F23               MUL     R18, R19
   \   00000020   ....               LDI     R30, LOW(UART16552)
   \   00000022   ....               LDI     R31, (UART16552) >> 8
   \   00000024   0DE0               ADD     R30, R0
   \   00000026   1DF1               ADC     R31, R1
   \   00000028   E050               LDI     R21, 0
   \   0000002A   C014               RJMP    ??Uart_BuildSndData_0
    759                  UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.ToTargetBuffer[ch][i];       /*command, send data */
   \                     ??Uart_BuildSndData_1:
   \   0000002C   01DB               MOVW    R27:R26, R23:R22
   \   0000002E   0FA4               ADD     R26, R20
   \   00000030   1FB5               ADC     R27, R21
   \   00000032   50AC               SUBI    R26, 12
   \   00000034   4FBB               SBCI    R27, 251
   \   00000036   912C               LD      R18, X
   \   00000038   81A0               LD      R26, Z
   \   0000003A   81B1               LDD     R27, Z+1
   \   0000003C   8002               LDD     R0, Z+2
   \   0000003E   8013               LDD     R1, Z+3
   \   00000040   0DA0               ADD     R26, R0
   \   00000042   1DB1               ADC     R27, R1
   \   00000044   932C               ST      X, R18
   \   00000046   8122               LDD     R18, Z+2
   \   00000048   8133               LDD     R19, Z+3
   \   0000004A   5F2F               SUBI    R18, 255
   \   0000004C   4F3F               SBCI    R19, 255
   \   0000004E   8322               STD     Z+2, R18
   \   00000050   8333               STD     Z+3, R19
    760              }
   \   00000052   9543               INC     R20
   \                     ??Uart_BuildSndData_0:
   \   00000054   01D8               MOVW    R27:R26, R17:R16
   \   00000056   9612               ADIW    R27:R26, 2
   \   00000058   918C               LD      R24, X
   \   0000005A   E090               LDI     R25, 0
   \   0000005C   9603               ADIW    R25:R24, 3
   \   0000005E   1748               CP      R20, R24
   \   00000060   0759               CPC     R21, R25
   \   00000062   F324               BRLT    ??Uart_BuildSndData_1
    761              TData.RS4.ToTargetBuffer[ch][0] = false;            // data sent
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8350               ST      Z, R21
    762          }
   \   00000068   01C1               MOVW    R25:R24, R3:R2
   \   0000006A   91A9               LD      R26, Y+
   \   0000006C   91B9               LD      R27, Y+
   \   0000006E   9508               RET
    763          
    764          /*************************************************************************
    765          *
    766          * Build send request for measure data to AN-SGCNV
    767          *
    768          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    769          void Uart_BuildReqM16552(char ch) {
   \                     Uart_BuildReqM16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    770          
    771              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_M_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E00A               LDI     R16, 10
   \   0000001C   ....               RJMP    ?Subroutine0
    772              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    773              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    774          
    775          }
    776          
    777          /*************************************************************************
    778          *
    779          * Build send request for raw data to AN-SGCNV
    780          *
    781          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    782          void Uart_BuildReqR16552(char ch) {
   \                     Uart_BuildReqR16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    783          
    784              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_R_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E00D               LDI     R16, 13
   \   0000001C   ....               RJMP    ?Subroutine0
    785              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    786              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    787          
    788          }
    789          
    790          /*************************************************************************
    791          *
    792          * Build send request for cal data to AN-SGCNV
    793          *
    794          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    795          void Uart_BuildReqC16552(char ch) {
   \                     Uart_BuildReqC16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    796          
    797              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_C_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E100               LDI     R16, 16
   \   0000001C   ....               RJMP    ?Subroutine0
    798              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    799              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    800          
    801          }
    802          
    803          /*************************************************************************
    804          *
    805          * Build send request for system status on AN_SGCNV
    806          *
    807          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    808          void Uart_BuildReqCardStatus(char ch) {
   \                     Uart_BuildReqCardStatus:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    809          
    810              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CARD_STAT;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E10B               LDI     R16, 27
   \   0000001C   ....               RJMP    ?Subroutine0
    811              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    812              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    813          
    814          }
    815          
    816          /*************************************************************************
    817          *
    818          * Build send request for card config on AN_SGCNV
    819          *
    820          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    821          void Uart_BuildReqConfig(char ch) {
   \                     Uart_BuildReqConfig:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    822          
    823              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CONFIG;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   91ED               LD      R30, X+
   \   00000010   91FD               LD      R31, X+
   \   00000012   910D               LD      R16, X+
   \   00000014   911C               LD      R17, X
   \   00000016   9713               SBIW    R27:R26, 3
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   E101               LDI     R16, 17
   \   0000001E   ....               RJMP    ?Subroutine4
    824              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    825          
    826          }
    827          
    828          /*************************************************************************
    829          *
    830          * Build send request for EEPROM data on AN_SGCNV
    831          *
    832          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    833          void Uart_BuildReqEEPROMData(char ch) {
   \                     Uart_BuildReqEEPROMData:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F4A               MOV     R20, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   2F20               MOV     R18, R16
    834          
    835              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_EEP_DATA;       /*command, send data */
   \   00000006   E10A               LDI     R16, 26
   \   00000008   9F20               MUL     R18, R16
   \   0000000A   ....               LDI     R30, LOW(UART16552)
   \   0000000C   ....               LDI     R31, (UART16552) >> 8
   \   0000000E   0DE0               ADD     R30, R0
   \   00000010   1DF1               ADC     R31, R1
   \   00000012   81A0               LD      R26, Z
   \   00000014   81B1               LDD     R27, Z+1
   \   00000016   8102               LDD     R16, Z+2
   \   00000018   8113               LDD     R17, Z+3
   \   0000001A   0FA0               ADD     R26, R16
   \   0000001C   1FB1               ADC     R27, R17
   \   0000001E   E108               LDI     R16, 24
   \   00000020   930C               ST      X, R16
   \   00000022   8102               LDD     R16, Z+2
   \   00000024   8113               LDD     R17, Z+3
   \   00000026   5F0F               SUBI    R16, 255
   \   00000028   4F1F               SBCI    R17, 255
   \   0000002A   8302               STD     Z+2, R16
   \   0000002C   8313               STD     Z+3, R17
    836              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   0000002E   81A0               LD      R26, Z
   \   00000030   81B1               LDD     R27, Z+1
   \   00000032   0FA0               ADD     R26, R16
   \   00000034   1FB1               ADC     R27, R17
   \   00000036   E001               LDI     R16, 1
   \   00000038   930C               ST      X, R16
   \   0000003A   8102               LDD     R16, Z+2
   \   0000003C   8113               LDD     R17, Z+3
   \   0000003E   5F0F               SUBI    R16, 255
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   8302               STD     Z+2, R16
   \   00000044   8313               STD     Z+3, R17
    837              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.EEPROMADChannel[ch];       /*data */
   \   00000046   E0B0               LDI     R27, 0
   \   00000048   ....               SUBI    R18, LOW((-(TData + 1528) & 0xFFFF))
   \   0000004A   2FA2               MOV     R26, R18
   \   0000004C   ....               SBCI    R27, HIGH((-(TData + 1528) & 0xFFFF))
   \   0000004E   910C               LD      R16, X
   \   00000050   81A0               LD      R26, Z
   \   00000052   81B1               LDD     R27, Z+1
   \   00000054   8122               LDD     R18, Z+2
   \   00000056   0FA2               ADD     R26, R18
   \   00000058   1FB1               ADC     R27, R17
   \   0000005A   930C               ST      X, R16
   \   0000005C   8102               LDD     R16, Z+2
   \   0000005E   8113               LDD     R17, Z+3
   \   00000060   5F0F               SUBI    R16, 255
   \   00000062   4F1F               SBCI    R17, 255
   \   00000064   8302               STD     Z+2, R16
   \   00000066   8313               STD     Z+3, R17
    838          
    839          }
   \   00000068   2FA4               MOV     R26, R20
   \   0000006A   2FB3               MOV     R27, R19
   \   0000006C   9508               RET
    840          /*************************************************************************
    841          *
    842          *  Receive data on USARTs
    843          *
    844          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    845          void ReceivePacketUart16552(char ch) {
   \                     ReceivePacketUart16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000008   2F20               MOV     R18, R16
    846          
    847              switch (UART16552[ch].RxState) {                  // check status
   \   0000000A   E10A               LDI     R16, 26
   \   0000000C   9F20               MUL     R18, R16
   \   0000000E   ....               LDI     R26, LOW(UART16552)
   \   00000010   ....               LDI     R27, (UART16552) >> 8
   \   00000012   0DA0               ADD     R26, R0
   \   00000014   1DB1               ADC     R27, R1
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8902               LDD     R16, Z+18
   \   0000001A   2300               TST     R16
   \   0000001C   F409               BRNE    $+2+2
   \   0000001E   C086               RJMP    ??ReceivePacketUart16552_0
   \   00000020   950A               DEC     R16
   \   00000022   F031               BREQ    ??ReceivePacketUart16552_1
   \   00000024   950A               DEC     R16
   \   00000026   F141               BREQ    ??ReceivePacketUart16552_2
   \   00000028   5008               SUBI    R16, 8
   \   0000002A   F409               BRNE    $+2+2
   \   0000002C   C07F               RJMP    ??ReceivePacketUart16552_0
   \   0000002E   C07B               RJMP    ??ReceivePacketUart16552_3
    848              case SYNC :
    849                  // all functionallity in inerrupt routine
    850                  break;
    851              case HEADER :
    852                  if (UART16552[ch].RxLast >= 3) {             // receive header
   \                     ??ReceivePacketUart16552_1:
   \   00000030   8586               LDD     R24, Z+14
   \   00000032   8597               LDD     R25, Z+15
   \   00000034   9703               SBIW    R25:R24, 3
   \   00000036   F408               BRCC    $+2+2
   \   00000038   C079               RJMP    ??ReceivePacketUart16552_0
    853                      UART16552[ch].RxPacklen = ((UART16552[ch].pRxBuffer[2] * 256) +
    854                                                 UART16552[ch].pRxBuffer[3]);    // Find length of package
   \   0000003A   8502               LDD     R16, Z+10
   \   0000003C   85F3               LDD     R31, Z+11
   \   0000003E   2FE0               MOV     R30, R16
   \   00000040   8152               LDD     R21, Z+2
   \   00000042   E010               LDI     R17, 0
   \   00000044   8103               LDD     R16, Z+3
   \   00000046   2F40               MOV     R20, R16
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8B06               STD     Z+22, R16
   \   0000004C   8B57               STD     Z+23, R21
    855                      if ((UART16552[ch].RxPacklen < ((short)RXSIZE_UART_16552 - UART16552[ch].RxLast)) &&    /* chk. header */
    856                          (UART16552[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   0000004E   E708               LDI     R16, 120
   \   00000050   8566               LDD     R22, Z+14
   \   00000052   8577               LDD     R23, Z+15
   \   00000054   1B06               SUB     R16, R22
   \   00000056   0B17               SBC     R17, R23
   \   00000058   1740               CP      R20, R16
   \   0000005A   0751               CPC     R21, R17
   \   0000005C   F008               BRCS    $+2+2
   \   0000005E   C063               RJMP    ??ReceivePacketUart16552_3
   \   00000060   01CA               MOVW    R25:R24, R21:R20
   \   00000062   9707               SBIW    R25:R24, 7
   \   00000064   F408               BRCC    $+2+2
   \   00000066   C05F               RJMP    ??ReceivePacketUart16552_3
    857                          UART16552[ch].RxState = RECEIVE;       // Header ok og to data receive state
   \   00000068   E002               LDI     R16, 2
   \   0000006A   8B02               STD     Z+18, R16
    858                          UART16552[ch].RxCount = UART16552[ch].RxLast + 1;    // Set receivcounter
   \   0000006C   8586               LDD     R24, Z+14
   \   0000006E   8597               LDD     R25, Z+15
   \   00000070   9601               ADIW    R25:R24, 1
   \   00000072   8B80               STD     Z+16, R24
   \   00000074   8B91               STD     Z+17, R25
   \   00000076   C05A               RJMP    ??ReceivePacketUart16552_0
    859                      } else {
    860                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    861                      }
    862                  }
    863                  break;
    864              case RECEIVE :
    865                  if (++UART16552[ch].RxCount >= UART16552[ch].RxPacklen) {
   \                     ??ReceivePacketUart16552_2:
   \   00000078   8900               LDD     R16, Z+16
   \   0000007A   8911               LDD     R17, Z+17
   \   0000007C   5F0F               SUBI    R16, 255
   \   0000007E   4F1F               SBCI    R17, 255
   \   00000080   8B00               STD     Z+16, R16
   \   00000082   8B11               STD     Z+17, R17
   \   00000084   8946               LDD     R20, Z+22
   \   00000086   8957               LDD     R21, Z+23
   \   00000088   1704               CP      R16, R20
   \   0000008A   0715               CPC     R17, R21
   \   0000008C   F408               BRCC    $+2+2
   \   0000008E   C04E               RJMP    ??ReceivePacketUart16552_0
    866                      if ((UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 1]) == ANPRO1_EOT) {
   \   00000090   8502               LDD     R16, Z+10
   \   00000092   8513               LDD     R17, Z+11
   \   00000094   0F04               ADD     R16, R20
   \   00000096   1F15               ADC     R17, R21
   \   00000098   5001               SUBI    R16, 1
   \   0000009A   4010               SBCI    R17, 0
   \   0000009C   01F8               MOVW    R31:R30, R17:R16
   \   0000009E   8100               LD      R16, Z
   \   000000A0   3003               CPI     R16, 3
   \   000000A2   F009               BREQ    $+2+2
   \   000000A4   C040               RJMP    ??ReceivePacketUart16552_3
    867                          if (CalcDSRxChecksum16552(ch)) {
   \   000000A6   E040               LDI     R20, 0
   \   000000A8   E080               LDI     R24, 0
   \   000000AA   E090               LDI     R25, 0
   \   000000AC   01FD               MOVW    R31:R30, R27:R26
   \   000000AE   8502               LDD     R16, Z+10
   \   000000B0   8513               LDD     R17, Z+11
   \   000000B2   8806               LDD     R0, Z+22
   \   000000B4   EF3E               LDI     R19, 254
   \   000000B6   0E03               ADD     R0, R19
   \   000000B8   EF3F               LDI     R19, 255
   \   000000BA   1F53               ADC     R21, R19
   \   000000BC   ....               LDI     R19, (crc) >> 16
   \   000000BE   C00B               RJMP    ??ReceivePacketUart16552_4
   \                     ??ReceivePacketUart16552_5:
   \   000000C0   01F8               MOVW    R31:R30, R17:R16
   \   000000C2   9161               LD      R22, Z+
   \   000000C4   018F               MOVW    R17:R16, R31:R30
   \   000000C6   2746               EOR     R20, R22
   \   000000C8   2FE4               MOV     R30, R20
   \   000000CA   E0F0               LDI     R31, 0
   \   000000CC   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   000000CE   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   000000D0   BF3B               OUT     0x3B, R19
   \   000000D2   9146               ELPM    R20, Z
   \   000000D4   9601               ADIW    R25:R24, 1
   \                     ??ReceivePacketUart16552_4:
   \   000000D6   1580               CP      R24, R0
   \   000000D8   0795               CPC     R25, R21
   \   000000DA   F390               BRCS    ??ReceivePacketUart16552_5
   \   000000DC   01FD               MOVW    R31:R30, R27:R26
   \   000000DE   8502               LDD     R16, Z+10
   \   000000E0   8513               LDD     R17, Z+11
   \   000000E2   8966               LDD     R22, Z+22
   \   000000E4   8977               LDD     R23, Z+23
   \   000000E6   0F06               ADD     R16, R22
   \   000000E8   1F17               ADC     R17, R23
   \   000000EA   5002               SUBI    R16, 2
   \   000000EC   4010               SBCI    R17, 0
   \   000000EE   01F8               MOVW    R31:R30, R17:R16
   \   000000F0   8100               LD      R16, Z
   \   000000F2   1740               CP      R20, R16
   \   000000F4   F4C1               BRNE    ??ReceivePacketUart16552_3
    868                              if (UART16552[ch].pRxBuffer[0] == MY_SGCNV_ADDR) {     // reply from AN_SGCNV
   \   000000F6   01FD               MOVW    R31:R30, R27:R26
   \   000000F8   8502               LDD     R16, Z+10
   \   000000FA   85F3               LDD     R31, Z+11
   \   000000FC   2FE0               MOV     R30, R16
   \   000000FE   8100               LD      R16, Z
   \   00000100   3F0D               CPI     R16, 253
   \   00000102   F489               BRNE    ??ReceivePacketUart16552_3
    869                                  UART16552[ch].RxState = HANDLE;                   // Package OK
   \   00000104   01FD               MOVW    R31:R30, R27:R26
   \   00000106   E00A               LDI     R16, 10
   \   00000108   8B02               STD     Z+18, R16
    870                                  if (ch == 0) {
   \   0000010A   2322               TST     R18
   \   0000010C   F421               BRNE    ??ReceivePacketUart16552_6
    871                                      OS_SignalEvent(1, &TCB_RS485Rec);
   \   0000010E   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   00000110   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   00000112   E001               LDI     R16, 1
   \   00000114   C005               RJMP    ??ReceivePacketUart16552_7
    872                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart16552_6:
   \   00000116   3021               CPI     R18, 1
   \   00000118   F449               BRNE    ??ReceivePacketUart16552_0
    873                                      OS_SignalEvent(2, &TCB_RS485Rec);
   \   0000011A   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   0000011C   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   0000011E   E002               LDI     R16, 2
   \                     ??ReceivePacketUart16552_7:
   \   00000120   ........           CALL    OS_SignalEvent
   \   00000124   C003               RJMP    ??ReceivePacketUart16552_0
    874                                  }
    875                              } else {
    876                                  GoToSyncUART16552(ch);                             // go to sync modus for recive
    877                              }
    878                          } else {
    879                              GoToSyncUART16552(ch);                                // go to sync modus for recive
    880                          }
    881                      } else {
    882                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    883                      }
    884                  }
    885                  break;
    886              case HANDLE :
    887                  break;
    888              default :
    889                  GoToSyncUART16552(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart16552_3:
   \   00000126   2F02               MOV     R16, R18
   \   00000128   ........           CALL    GoToSyncUART16552
    890                  break;
    891              }                                                           // end switch
    892              if (++UART16552[ch].RxLast >= RXSIZE_UART_16552) {                     // check pointer
   \                     ??ReceivePacketUart16552_0:
   \   0000012C   01FD               MOVW    R31:R30, R27:R26
   \   0000012E   8506               LDD     R16, Z+14
   \   00000130   8517               LDD     R17, Z+15
   \   00000132   5F0F               SUBI    R16, 255
   \   00000134   4F1F               SBCI    R17, 255
   \   00000136   8706               STD     Z+14, R16
   \   00000138   8717               STD     Z+15, R17
   \   0000013A   3708               CPI     R16, 120
   \   0000013C   E020               LDI     R18, 0
   \   0000013E   4010               SBCI    R17, 0
   \   00000140   F010               BRCS    ??ReceivePacketUart16552_8
    893                  UART16552[ch].RxLast = 0;                                     // reset pointer
   \   00000142   8726               STD     Z+14, R18
   \   00000144   8727               STD     Z+15, R18
    894              }
    895          }
   \                     ??ReceivePacketUart16552_8:
   \   00000146   ....               RJMP    ?Subroutine3
    896          
    897          
    898          /*************************************************************************
    899          *
    900          * Calculate tx checksum for Dallas Semiconductor one-wire CRC
    901          *
    902          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    903          char CalcDSTxChecksumUART16552(char ch, unsigned short len) {
   \                     CalcDSTxChecksumUART16552:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   2F10               MOV     R17, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    904          
    905              unsigned short cnt;
    906              unsigned char csum;
    907          
    908              csum = 0;
   \   00000008   E000               LDI     R16, 0
    909              for (cnt = 2; cnt < len; cnt++) {
   \   0000000A   3023               CPI     R18, 3
   \   0000000C   4030               SBCI    R19, 0
   \   0000000E   F0A0               BRCS    ??CalcDSTxChecksumUART16552_0
   \   00000010   E12A               LDI     R18, 26
   \   00000012   9F12               MUL     R17, R18
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001A   81A0               LD      R26, Z
   \   0000001C   81B1               LDD     R27, Z+1
   \   0000001E   9612               ADIW    R27:R26, 2
   \   00000020   9702               SBIW    R25:R24, 2
   \   00000022   ....               LDI     R19, (crc) >> 16
    910                  csum = crc[csum ^ UART16552[ch].pTxBuffer[cnt]];
   \                     ??CalcDSTxChecksumUART16552_1:
   \   00000024   2FE0               MOV     R30, R16
   \   00000026   E0F0               LDI     R31, 0
   \   00000028   910D               LD      R16, X+
   \   0000002A   27E0               EOR     R30, R16
   \   0000002C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000030   BF3B               OUT     0x3B, R19
   \   00000032   9106               ELPM    R16, Z
    911              }
   \   00000034   9701               SBIW    R25:R24, 1
   \   00000036   F7B1               BRNE    ??CalcDSTxChecksumUART16552_1
    912              return csum;
   \                     ??CalcDSTxChecksumUART16552_0:
   \   00000038   01CA               MOVW    R25:R24, R21:R20
   \   0000003A   01DB               MOVW    R27:R26, R23:R22
   \   0000003C   9508               RET
    913          }
    914          
    915          /*************************************************************************
    916          *
    917          * Calculate rx checksum for Dallas Semiconductor one-wire CRC
    918          *
    919          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    920          short CalcDSRxChecksum16552(char ch) {
   \                     CalcDSRxChecksum16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   2E3A               MOV     R3, R26
   \   00000004   2F59               MOV     R21, R25
   \   00000006   2E28               MOV     R2, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
    921          
    922              short cnt;
    923              unsigned char csum;
    924          
    925              csum = 0;
   \   00000008   E040               LDI     R20, 0
    926              for (cnt = 0; cnt < (UART16552[ch].RxPacklen - 2); cnt++) {
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
   \   0000000E   E11A               LDI     R17, 26
   \   00000010   9F01               MUL     R16, R17
   \   00000012   ....               LDI     R26, LOW(UART16552)
   \   00000014   ....               LDI     R27, (UART16552) >> 8
   \   00000016   0DA0               ADD     R26, R0
   \   00000018   1DB1               ADC     R27, R1
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8502               LDD     R16, Z+10
   \   0000001E   8513               LDD     R17, Z+11
   \   00000020   8966               LDD     R22, Z+22
   \   00000022   8977               LDD     R23, Z+23
   \   00000024   5062               SUBI    R22, 2
   \   00000026   4070               SBCI    R23, 0
   \   00000028   ....               LDI     R19, (crc) >> 16
   \   0000002A   C00B               RJMP    ??CalcDSRxChecksum16552_0
    927                  csum = crc[csum ^ UART16552[ch].pRxBuffer[cnt]];
   \                     ??CalcDSRxChecksum16552_1:
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   9121               LD      R18, Z+
   \   00000030   018F               MOVW    R17:R16, R31:R30
   \   00000032   2742               EOR     R20, R18
   \   00000034   2FE4               MOV     R30, R20
   \   00000036   E0F0               LDI     R31, 0
   \   00000038   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000003A   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   0000003C   BF3B               OUT     0x3B, R19
   \   0000003E   9146               ELPM    R20, Z
    928              }
   \   00000040   9601               ADIW    R25:R24, 1
   \                     ??CalcDSRxChecksum16552_0:
   \   00000042   1786               CP      R24, R22
   \   00000044   0797               CPC     R25, R23
   \   00000046   F390               BRCS    ??CalcDSRxChecksum16552_1
    929              if (csum == UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 2]) {
   \   00000048   961A               ADIW    R27:R26, 10
   \   0000004A   91ED               LD      R30, X+
   \   0000004C   91FC               LD      R31, X
   \   0000004E   961B               ADIW    R27:R26, 11
   \   00000050   910D               LD      R16, X+
   \   00000052   911C               LD      R17, X
   \   00000054   0FE0               ADD     R30, R16
   \   00000056   1FF1               ADC     R31, R17
   \   00000058   9732               SBIW    R31:R30, 2
   \   0000005A   8100               LD      R16, Z
   \   0000005C   1740               CP      R20, R16
   \   0000005E   F411               BRNE    ??CalcDSRxChecksum16552_2
    930                  return true;
   \   00000060   E001               LDI     R16, 1
   \   00000062   C001               RJMP    ??CalcDSRxChecksum16552_3
    931              } else {
    932                  return false;
   \                     ??CalcDSRxChecksum16552_2:
   \   00000064   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum16552_3:
   \   00000066   E010               LDI     R17, 0
   \   00000068   2D82               MOV     R24, R2
   \   0000006A   2F95               MOV     R25, R21
   \   0000006C   2DA3               MOV     R26, R3
   \   0000006E   91B9               LD      R27, Y+
   \   00000070   9508               RET
    933              }
    934          }
    935          
    936          /*************************************************************************
    937          *
    938          * Goes to sync mode
    939          *
    940          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    941          void GoToSyncUART16552(char ch) {
   \                     GoToSyncUART16552:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    942          
    943              if (ch < 2) {
   \   00000000   3002               CPI     R16, 2
   \   00000002   F468               BRCC    ??GoToSyncUART16552_0
    944                  UART16552[ch].SyncCnt = 0;                        // ready for sync
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(UART16552)
   \   0000000A   ....               LDI     R31, (UART16552) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   E000               LDI     R16, 0
   \   00000012   8B03               STD     Z+19, R16
    945                  UART16552[ch].RxState = SYNC;
   \   00000014   8B02               STD     Z+18, R16
    946                  UART16552[ch].RxFirst = 0;
   \   00000016   8704               STD     Z+12, R16
   \   00000018   8705               STD     Z+13, R16
    947                  UART16552[ch].RxPacklen = 0;
   \   0000001A   8B06               STD     Z+22, R16
   \   0000001C   8B07               STD     Z+23, R16
    948              }
    949          }
   \                     ??GoToSyncUART16552_0:
   \   0000001E   9508               RET
    950          
    951          /*************************************************************************
    952          *
    953          *  Empty rx buffer on PC16552 UART
    954          *
    955          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    956          void EmptyRxBuf16552(char uartno) {
   \                     EmptyRxBuf16552:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    957          
    958              switch (uartno) {
   \   00000000   2300               TST     R16
   \   00000002   F019               BREQ    ??EmptyRxBuf16552_0
   \   00000004   950A               DEC     R16
   \   00000006   F041               BREQ    ??EmptyRxBuf16552_1
   \   00000008   9508               RET
    959              case 0:
    960                  do {
    961                      U0_RBR;
   \                     ??EmptyRxBuf16552_0:
   \   0000000A   91001108           LDS     R16, 4360
    962                  } while (U0_LSR & DATA_READY);
   \   0000000E   9100110D           LDS     R16, 4365
   \   00000012   FD00               SBRC    R16, 0
   \   00000014   CFFA               RJMP    ??EmptyRxBuf16552_0
   \   00000016   9508               RET
    963                  break;
    964              case 1:
    965                  do {
    966                      U1_RBR;
   \                     ??EmptyRxBuf16552_1:
   \   00000018   91001100           LDS     R16, 4352
    967                  } while (U1_LSR & DATA_READY);
   \   0000001C   91001105           LDS     R16, 4357
   \   00000020   FD00               SBRC    R16, 0
   \   00000022   CFFA               RJMP    ??EmptyRxBuf16552_1
    968                  break;
    969              }
    970          }
   \   00000024   9508               RET
    971          
    972          /*************************************************************************
    973          *
    974          *  Init the PC16552 UART
    975          *
    976          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    977          void Init16552(char channel, unsigned long baud) {
   \                     Init16552:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    978          
    979              /*--- Configure UART data block ---*/
    980              UART16552[channel].TxFirst = 0x00;
   \   00000000   E11A               LDI     R17, 26
   \   00000002   9F01               MUL     R16, R17
   \   00000004   ....               LDI     R30, LOW(UART16552)
   \   00000006   ....               LDI     R31, (UART16552) >> 8
   \   00000008   0DE0               ADD     R30, R0
   \   0000000A   1DF1               ADC     R31, R1
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   8312               STD     Z+2, R17
   \   00000010   8313               STD     Z+3, R17
    981              UART16552[channel].TxLast = 0x00;
   \   00000012   8314               STD     Z+4, R17
   \   00000014   8315               STD     Z+5, R17
    982              UART16552[channel].TxCount = 0x00;
   \   00000016   8316               STD     Z+6, R17
   \   00000018   8317               STD     Z+7, R17
    983              UART16552[channel].RxFirst = 0x00;
   \   0000001A   8714               STD     Z+12, R17
   \   0000001C   8715               STD     Z+13, R17
    984              UART16552[channel].RxLast = 0x00;
   \   0000001E   8716               STD     Z+14, R17
   \   00000020   8717               STD     Z+15, R17
    985              UART16552[channel].RxCount = 0x00;
   \   00000022   8B10               STD     Z+16, R17
   \   00000024   8B11               STD     Z+17, R17
    986              UART16552[channel].RxState = SYNC;
   \   00000026   8B12               STD     Z+18, R17
    987              UART16552[channel].SyncCnt = 0;
   \   00000028   8B13               STD     Z+19, R17
    988              UART16552[channel].TxStatus = 0x00;
   \   0000002A   8710               STD     Z+8, R17
    989          
    990              switch (channel) {
   \   0000002C   2300               TST     R16
   \   0000002E   F019               BREQ    ??Init16552_0
   \   00000030   950A               DEC     R16
   \   00000032   F179               BREQ    ??Init16552_1
   \   00000034   9508               RET
    991              case 0x00 :
    992                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_0:
   \   00000036   EF0A               LDI     R16, 250
   \   00000038   9300....           STS     (UART16552 + 20), R16
   \   0000003C   9310....           STS     (UART16552 + 21), R17
    993                  UART16552[channel].pTxBuffer = TxBuf16552Ch0;
   \   00000040   ....               LDI     R16, LOW(TxBuf16552Ch0)
   \   00000042   ....               LDI     R17, (TxBuf16552Ch0) >> 8
   \   00000044   9300....           STS     UART16552, R16
   \   00000048   9310....           STS     (UART16552 + 1), R17
    994                  UART16552[channel].pRxBuffer = RxBuf16552Ch0;
   \   0000004C   ....               LDI     R16, LOW(RxBuf16552Ch0)
   \   0000004E   ....               LDI     R17, (RxBuf16552Ch0) >> 8
   \   00000050   9300....           STS     (UART16552 + 10), R16
   \   00000054   9310....           STS     (UART16552 + 11), R17
    995                  U0_LCR = 0x80;          // set DLAB
   \   00000058   E800               LDI     R16, 128
   \   0000005A   9300110B           STS     4363, R16
    996                  U0_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   0000005E   E408               LDI     R16, 72
   \   00000060   EE18               LDI     R17, 232
   \   00000062   E021               LDI     R18, 1
   \   00000064   E030               LDI     R19, 0
   \   00000066   ........           CALL    ?UL_DIVMOD_S_L03
   \   0000006A   93001108           STS     4360, R16
    997                  U0_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   0000006E   93101109           STS     4361, R17
    998                  U0_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   00000072   E003               LDI     R16, 3
   \   00000074   9300110B           STS     4363, R16
    999                  U0_FCR = 0x01;          // enable FIFO ..
   \   00000078   E001               LDI     R16, 1
   \   0000007A   9300110A           STS     4362, R16
   1000                  U0_FCR = 0xC1;          // and set RXLevel to 14
   \   0000007E   EC01               LDI     R16, 193
   \   00000080   9300110A           STS     4362, R16
   1001                  U0_IER = 0x03;          // enable TX and RX int.
   \   00000084   E003               LDI     R16, 3
   \   00000086   93001109           STS     4361, R16
   1002                  U0_MCR = 0x00;          // RTS off
   \   0000008A   E000               LDI     R16, 0
   \   0000008C   9300110C           STS     4364, R16
   1003                  break;
   \   00000090   9508               RET
   1004              case 0x01 :
   1005                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_1:
   \   00000092   EF0A               LDI     R16, 250
   \   00000094   9300....           STS     (UART16552 + 46), R16
   \   00000098   9310....           STS     (UART16552 + 47), R17
   1006                  UART16552[channel].pTxBuffer = TxBuf16552Ch1;
   \   0000009C   ....               LDI     R16, LOW(TxBuf16552Ch1)
   \   0000009E   ....               LDI     R17, (TxBuf16552Ch1) >> 8
   \   000000A0   9300....           STS     (UART16552 + 26), R16
   \   000000A4   9310....           STS     (UART16552 + 27), R17
   1007                  UART16552[channel].pRxBuffer = RxBuf16552Ch1;
   \   000000A8   ....               LDI     R16, LOW(RxBuf16552Ch1)
   \   000000AA   ....               LDI     R17, (RxBuf16552Ch1) >> 8
   \   000000AC   9300....           STS     (UART16552 + 36), R16
   \   000000B0   9310....           STS     (UART16552 + 37), R17
   1008                  U1_LCR = 0x80;          // set DLAB
   \   000000B4   E800               LDI     R16, 128
   \   000000B6   93001103           STS     4355, R16
   1009                  U1_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   000000BA   E408               LDI     R16, 72
   \   000000BC   EE18               LDI     R17, 232
   \   000000BE   E021               LDI     R18, 1
   \   000000C0   E030               LDI     R19, 0
   \   000000C2   ........           CALL    ?UL_DIVMOD_S_L03
   \   000000C6   93001100           STS     4352, R16
   1010                  U1_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   000000CA   93101101           STS     4353, R17
   1011                  U1_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   000000CE   E003               LDI     R16, 3
   \   000000D0   93001103           STS     4355, R16
   1012                  U1_FCR = 0x01;          // enable FIFO ..
   \   000000D4   E001               LDI     R16, 1
   \   000000D6   93001102           STS     4354, R16
   1013                  U1_FCR = 0xC1;          // and set RXLevel to 14
   \   000000DA   EC01               LDI     R16, 193
   \   000000DC   93001102           STS     4354, R16
   1014                  U1_IER = 0x03;          // enable TX and RX int.
   \   000000E0   E003               LDI     R16, 3
   \   000000E2   93001101           STS     4353, R16
   1015                  U1_MCR = 0x00;          // RTS off
   \   000000E6   E000               LDI     R16, 0
   \   000000E8   93001104           STS     4356, R16
   1016                  break;
   1017              default:
   1018                  break;
   1019              }
   1020          }
   \   000000EC   9508               RET

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      1      2   CalcDSRxChecksum16552
      0      2   CalcDSTxChecksumUART16552
      3      2   CheckActionUart16552
        3      2   -> ReceiveCData
        3      2   -> ReceiveCardEEPROMData
        3      2   -> ReceiveCardStatus
        3      2   -> ReceiveConfigData
        3      2   -> ReceivePTOData
        3      2   -> ReceiveRData
        3      2   -> ReceiveRadarData
        3      2   -> ReceiveWHData
        3      2   -> ReceiveWISData
        3      2   -> ReceiveWISStatus
        3      2   -> ReceiveWISXData
      0      2   EmptyRxBuf16552
     13      2   ExtRS485Ctl
       13      2   -> Init16552
       13      2   -> OS_Delay
       13      2   -> OS_WaitEventTimed
       13      2   -> ReadEEPROMByte
       13      2   -> Uart_BuildReqC16552
       13      2   -> Uart_BuildReqCardStatus
       13      2   -> Uart_BuildReqEEPROMData
       13      2   -> Uart_BuildReqM16552
       13      2   -> Uart_BuildReqR16552
       13      2   -> Uart_BuildReqRadarData
       13      2   -> Uart_BuildReqWISData
       13      2   -> Uart_BuildReqWISXData
       13      2   -> Uart_BuildTail16552
       13      2 ?SS_SHR_L02
       13      2 ?S_SHL_L02
      2      2   ExtRS485Rec
        2      2   -> OS_Delay
        2      2   -> OS_SignalEvent
        2      2   -> OS_WaitEventTimed
        2      2   -> Usart16552CheckPackage
        2      2 ?SS_SHR_L02
        2      2 ?S_SHL_L02
      0      2   GoToSyncUART16552
      0      2   Init16552
        0      2 ?UL_DIVMOD_S_L03
      8      2   ReceiveCData
      0      2   ReceiveCardEEPROMData
      0      2   ReceiveCardStatus
      2      2   ReceiveConfigData
      7      2   ReceivePTOData
        7      2   -> OS_Unuse
        7      2   -> OS_Use
      4      2   ReceivePacketUart16552
        4      2   -> GoToSyncUART16552
        4      2   -> OS_SignalEvent
      8      2   ReceiveRData
      2      2   ReceiveRadarData
      0      2   ReceiveRadarInfo
      5      2   ReceiveWHData
        5      2   -> OS_Unuse
        5      2   -> OS_Use
        5      2 ?S_SHL_L02
      4      2   ReceiveWISData
        4      2 ?F_DIV_S_L04
        4      2 ?SL2F_S_L04
        4      2 ?UL2F_S_L04
      0      2   ReceiveWISStatus
      0      2   ReceiveWISXData
      0      2   SetRS4Port
      0      2   TimoutUART0
      0      2   TimoutUART1
      0      2   Uart_BuildHeader16552
      0      2   Uart_BuildReqC16552
      0      2   Uart_BuildReqCardStatus
      0      2   Uart_BuildReqConfig
      0      2   Uart_BuildReqEEPROMData
      0      2   Uart_BuildReqM16552
      0      2   Uart_BuildReqR16552
      0      2   Uart_BuildReqRadarData
      0      2   Uart_BuildReqRadarInfo
      0      2   Uart_BuildReqWISCardStatus
      0      2   Uart_BuildReqWISData
      0      2   Uart_BuildReqWISXData
      2      2   Uart_BuildSndData
      3      2   Uart_BuildTail16552
        3      2   -> CalcDSTxChecksumUART16552
        3      2   -> GoToSyncUART16552
        3      2   -> OS_Delay
        3      2   -> OS_RetriggerTimer
        3      2   -> Uart_BuildHeader16552
      7      2   Usart16552CheckPackage
        7      2   -> CheckActionUart16552
        7      2   -> GoToSyncUART16552


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ??Subroutine5_0
      50  ?Subroutine0
      18  ?Subroutine1
      16  ?Subroutine2
      10  ?Subroutine3
      38  ?Subroutine4
     114  CalcDSRxChecksum16552
      62  CalcDSTxChecksumUART16552
     228  CheckActionUart16552
      38  EmptyRxBuf16552
    1622  ExtRS485Ctl
     496  ExtRS485Rec
      32  GoToSyncUART16552
     238  Init16552
     170  ReceiveCData
      82  ReceiveCardEEPROMData
      72  ReceiveCardStatus
     128  ReceiveConfigData
     218  ReceivePTOData
     328  ReceivePacketUart16552
     172  ReceiveRData
     190  ReceiveRadarData
      54  ReceiveRadarInfo
     214  ReceiveWHData
     214  ReceiveWISData
     106  ReceiveWISStatus
      90  ReceiveWISXData
       8  SetRS4Port
      12  TimoutUART0
      12  TimoutUART1
      88  Uart_BuildHeader16552
      30  Uart_BuildReqC16552
      30  Uart_BuildReqCardStatus
      32  Uart_BuildReqConfig
     110  Uart_BuildReqEEPROMData
      30  Uart_BuildReqM16552
      30  Uart_BuildReqR16552
      28  Uart_BuildReqRadarData
      32  Uart_BuildReqRadarInfo
      30  Uart_BuildReqWISCardStatus
      30  Uart_BuildReqWISData
      92  Uart_BuildReqWISXData
     112  Uart_BuildSndData
     338  Uart_BuildTail16552
     102  Usart16552CheckPackage
       1  _A_PORTC
       1  _A_PORTE

 
     2 bytes in segment ABSOLUTE
 6 162 bytes in segment CODE
 
 6 162 bytes of CODE memory
     0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: 3
