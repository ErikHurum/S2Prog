###############################################################################
#
# IAR C/C++ Compiler V8.10.1.1784/W64 for Microchip AVR   28/Apr/2023  08:50:16
# Copyright 1996-2023 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file           =  D:\S2Prog\IO\ANZB-1281\Src\Misc.c
#    Command line          =
#        -f D:\S2Prog\IO\ANZB-1281\Debug\Obj\Main\Misc.r90.rsp
#        (D:\S2Prog\IO\ANZB-1281\Src\Misc.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\ANZB-1281\Debug\Obj\Main -D OS_LIBMODE_D -D OS_UART=-1
#        -lCN D:\S2Prog\IO\ANZB-1281\Debug\List\Main -y --initializers_in_flash
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\ANZB-1281\INC\ -I
#        D:\S2Prog\IO\ANZB-1281\..\..\SHARED\INC\ --eeprom_size 4096 --clib
#        -Ohz) --dependencies=n
#        D:\S2Prog\IO\ANZB-1281\Debug\Obj\Main\Misc.r90.iar_deps
#    Locale                =  C
#    List file             =  D:\S2Prog\IO\ANZB-1281\Debug\List\Main\Misc.lst
#    Object file           =  D:\S2Prog\IO\ANZB-1281\Debug\Obj\Main\Misc.r90
#    Runtime model:           
#      __64bit_doubles     =  disabled
#      __SystemLibrary     =  CLib
#      __architecture      =  *
#      __cpu               =  3
#      __cpu_name          =  ATmega128
#      __dlib_version      =  clib
#      __enhanced_core     =  enabled
#      __enhanced_core_mul =  enabled
#      __has_elpm          =  true
#      __memory_model      =  2
#      __mex               =  disabled
#      __no_rampd          =  enabled
#      __rt_version        =  3
#      __vtable_memory     =  __nearflash
#
###############################################################################

D:\S2Prog\IO\ANZB-1281\Src\Misc.c
      1          /****************************************************************************************
      2          /  Misc. routines
      3          /
      4          ***************************************************************************************/
      5          #ifdef __ATMEGA_1280__
      6          #include	"iom1280.h"
      7          #endif
      8          
      9          #ifdef __ATMEGA_1281__
     10          #include	"iom1281.h"
     11          #endif
     12          #include "stdio.h"
     13          #include "math.h"
     14          #include "externals.h"
     15          #include "version.h"
     16          #include "inavr.h"
     17          #include "string.h"
     18          
     19          /*************************************************************************
     20          *   (This is a task)
     21          *  Watchdog handler
     22          *
     23          *************************************************************************/
     24          void WatchDogHandler(void) {
     25          
     26              OS_Delay(100);                         // wait 1 seconds for other tasks to start and set TaskStatus
     27              asm("WDR");                             // kick the dog!!
     28              WDTCR = 0x1f;
     29              WDTCR = 0x0f;
     30              asm("WDR");                             // kick the dog!!
     31              while (1) {
     32                  OS_Delay(500);
     33                  __watchdog_reset();               //kick the dog
     34              }
     35          }
     36          
     37          
     38          /*************************************************************************
     39          *
     40          *  Get my address
     41          *
     42          *************************************************************************/
     43          char MyAddress(void) {
     44          
     45          #if (OS_UART == 0)
     46              return 0;                   // Debug only
     47          #else
     48              return(~(PIND>>4) & 0x0f) ;
     49          #endif
     50          }
     51          
     52          /*************************************************************************
     53          *
     54          *  Check for legal float
     55          *
     56          *************************************************************************/
     57          char IsFloat(float A){
     58            long exp;
     59          	// A NAN has an exponent of 255 (shifted left 23 positions) and
     60          	// Denormalized has an exponent set to 0
     61          	exp = *(long*)&A & 0x7F800000L;
     62          	//int mantissa = *(int*)&A & 0x007FFFFF;
     63          	if ( exp && (exp != 0x7F800000L)  ) {
     64          		return(true);
     65            }
     66          	return(false);
     67          }

Errors: 7
Warnings: none
