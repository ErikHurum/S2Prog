###############################################################################
#
# IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR           28/Sep/2017  10:44:05
# Copyright 1996-2017 IAR Systems AB.
# Startup license - IAR Embedded Workbench for Atmel AVR 7.10
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\UsartInt.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EW1011.tmp
#        (D:\S2Prog\IO\ANZB\Src\UsartInt.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\ANZB\Debug\Obj -D OS_LIBMODE_D -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\ANZB\Debug\List -y --initializers_in_flash --no_tbaa
#        --debug -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB\INC\ -I
#        D:\S2Prog\IO\ANZB\..\..\SHARED\INC\ --eeprom_size 4096 --clib -Ohz)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB\Debug\List\UsartInt.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Debug\Obj\UsartInt.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\UsartInt.c
      1          /****************************************************************************************
      2          / USART1 functions and interrupt
      3          /   This routines sync and check the ANPRO10
      4          /   Uart1Pro.c handle the package
      5          /
      6          ***************************************************************************************/
      7          
      8          
      9          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9a
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9b
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9c
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1
     10          #include "stdio.h"
     11          #include "math.h"
     12          #include "externals.h"
     13          #include "version.h"
     14          
     15          #if (OS_UART != 0)
     16          
     17          // USART0
     18          #pragma vector=USART0_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     19          __interrupt void IntHandler_RX_USART0( void ){   
   \                     IntHandler_RX_USART0:
   \   00000000   ....               RCALL   ?Subroutine0
     20          
     21              OS_EnterInterrupt();
     22              OS_EnterIntStack();
     23              if ( UCSR0A & __BIT_MASK( DOR0 ) ) {                // Overrun error? 
   \                     ??CrossCallReturnLabel_24:
   \   00000002   B10B               IN      R16, 0x0B
     24              }
     25          
     26              if ( UCSR0A & __BIT_MASK( FE0 ) ) {                 // Framing error? 
   \   00000004   B10B               IN      R16, 0x0B
   \   00000006   ....               LDI     R26, LOW(UART)
   \   00000008   ....               LDI     R27, (UART) >> 8
   \   0000000A   C007               RJMP    ??IntHandler_RX_USART0_0
     27              }
     28          
     29              while ( UCSR0A & __BIT_MASK( RXC0)  ) {                // New byte avaiable?
     30                  UART[0].pRxBuffer[ UART[0].RxFirst ] = UDR0;    // Read the character 
     31          
     32                  if (UART[0].RxState != HANDLE) {                // ok to receive? 
     33                      switch (UART[0].RxState) {                   // Yes, check state
     34                      case SYNC :
     35                          if ( UART[0].pRxBuffer[ UART[0].RxFirst ] == ANPRO10_SYN) {
     36                              UART[0].SyncCnt ++ ;                 // count sync
   \                     ??IntHandler_RX_USART0_1:
   \   0000000C   01FD               MOVW    R31:R30, R27:R26
   \   0000000E   8903               LDD     R16, Z+19
   \   00000010   9503               INC     R16
   \   00000012   8B03               STD     Z+19, R16
     37                              UART[0].RxFirst = 0;                 // start at start of buff
   \   00000014   E000               LDI     R16, 0
   \   00000016   8704               STD     Z+12, R16
   \   00000018   8705               STD     Z+13, R16
     38                          } else if ((UART[0].SyncCnt >= 2) && 
   \                     ??IntHandler_RX_USART0_0:
   \   0000001A   9B5F               SBIS    0x0B, 0x07
   \   0000001C   C03A               RJMP    ??IntHandler_RX_USART0_2
   \   0000001E   B10C               IN      R16, 0x0C
   \   00000020   961A               ADIW    R27:R26, 10
   \   00000022   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_4:
   \   00000024   971D               SBIW    R27:R26, 13
   \   00000026   0FE2               ADD     R30, R18
   \   00000028   1FF3               ADC     R31, R19
   \   0000002A   8300               ST      Z, R16
   \   0000002C   9100....           LDS     R16, (UART + 18)
   \   00000030   300A               CPI     R16, 10
   \   00000032   F399               BREQ    ??IntHandler_RX_USART0_0
   \   00000034   2300               TST     R16
   \   00000036   F4F1               BRNE    ??IntHandler_RX_USART0_3
   \   00000038   961A               ADIW    R27:R26, 10
   \   0000003A   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_6:
   \   0000003C   971D               SBIW    R27:R26, 13
   \   0000003E   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_8:
   \   00000040   F329               BREQ    ??IntHandler_RX_USART0_1
     39                                     (UART[0].pRxBuffer[ UART[0].RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \   00000042   9110....           LDS     R17, (UART + 19)
   \   00000046   3012               CPI     R17, 2
   \   00000048   F088               BRCS    ??IntHandler_RX_USART0_4
   \   0000004A   3001               CPI     R16, 1
   \   0000004C   F479               BRNE    ??IntHandler_RX_USART0_4
     40                              UART[0].SyncCnt = 0 ;                // reset counter
   \   0000004E   E000               LDI     R16, 0
   \   00000050   9300....           STS     (UART + 19), R16
     41                              UART[0].RxState = HEADER ;
   \   00000054   E001               LDI     R16, 1
   \   00000056   9300....           STS     (UART + 18), R16
     42                              UART[0].RxLast = 0 ;
   \   0000005A   01FD               MOVW    R31:R30, R27:R26
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   8706               STD     Z+14, R16
   \   00000060   8707               STD     Z+15, R16
     43                              UART[0].RxTimeout = RX_TO_TIME ;    // reset timeout
   \   00000062   EF0A               LDI     R16, 250
   \   00000064   8B04               STD     Z+20, R16
   \   00000066   E000               LDI     R16, 0
   \   00000068   8B05               STD     Z+21, R16
   \   0000006A   CFD7               RJMP    ??IntHandler_RX_USART0_0
     44                          } else {
     45                              UART[0].SyncCnt = 0 ;                // start over once more
   \                     ??IntHandler_RX_USART0_4:
   \   0000006C   E000               LDI     R16, 0
   \   0000006E   9300....           STS     (UART + 19), R16
   \   00000072   CFD3               RJMP    ??IntHandler_RX_USART0_0
     46                          }
     47                          break;
     48                      default :
     49                          if ((++UART[0].RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??IntHandler_RX_USART0_3:
   \   00000074   01FD               MOVW    R31:R30, R27:R26
   \   00000076   8504               LDD     R16, Z+12
   \   00000078   8515               LDD     R17, Z+13
   \   0000007A   ....               RCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_10:
   \   0000007C   8704               STD     Z+12, R16
   \   0000007E   8715               STD     Z+13, R17
   \   00000080   3907               CPI     R16, 151
   \   00000082   4010               SBCI    R17, 0
   \   00000084   E000               LDI     R16, 0
   \   00000086   F010               BRCS    ??IntHandler_RX_USART0_5
     50                              GoToSyncUART(0) ;                       // go to sync mode
   \   00000088   ....               RCALL   ?Subroutine13
     51                          } else {
   \                     ??CrossCallReturnLabel_19:
   \   0000008A   CFC7               RJMP    ??IntHandler_RX_USART0_0
     52                              ReceivePacketUart(0) ;              // Check package
   \                     ??IntHandler_RX_USART0_5:
   \   0000008C   ........           CALL    ReceivePacketUart
   \   00000090   CFC4               RJMP    ??IntHandler_RX_USART0_0
     53                          }
     54                          break ;   
     55                      }
     56                  }
     57              }
     58              OS_LeaveIntStack();
   \                     ??IntHandler_RX_USART0_2:
   \   00000092                      REQUIRE ?Subroutine18
   \   00000092                      REQUIRE _A_UCSR0A
   \   00000092                      REQUIRE _A_UDR0
   \   00000092                      ;               // Fall through to label ?Subroutine18
     59              OS_LeaveInterruptNoSwitch();
     60          } 

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_14:
   \   00000002   9518               RETI

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE ?Subroutine11
   \   00000004                      REQUIRE ??Subroutine21_0
   \   00000004                      ;               // Fall through to label ??Subroutine21_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine21_0:
   \   00000000   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_30:
   \   00000002   B78F               IN      R24, 0x3F
   \   00000004   B79B               IN      R25, 0x3B
   \   00000006                      REQUIRE ?Subroutine11
   \   00000006                      ;               // Fall through to label ?Subroutine11

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   9100....           LDS     R16, OS_InInt
   \   00000004   9503               INC     R16
   \   00000006   9300....           STS     OS_InInt, R16
   \   0000000A   9100....           LDS     R16, OS_Counters
   \   0000000E   9503               INC     R16
   \   00000010   9300....           STS     OS_Counters, R16
   \   00000014   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_32:
   \   00000016   9503               INC     R16
   \   00000018   9300....           STS     (OS_Counters + 1), R16
   \   0000001C   94F8               CLI
   \   0000001E   ........           CALL    OS__EnterIntStack
   \   00000022   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_33:
   \   00000024   7F00               ANDI    R16, 0xF0
   \   00000026   F011               BREQ    ??CrossCallReturnLabel_36
   \   00000028   E909               LDI     R16, 153
   \   0000002A   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_36:
   \   0000002C   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_34:
   \   0000002E   2300               TST     R16
   \   00000030   F409               BRNE    ??Subroutine11_0
   \   00000032   9478               SEI
   \                     ??Subroutine11_0:
   \   00000034   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   ........           JMP     GoToSyncUART

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   5F0F               SUBI    R16, 255
   \   00000002   4F1F               SBCI    R17, 255
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0FE0               ADD     R30, R16
   \   00000002   1FF1               ADC     R31, R17
   \   00000004   8100               LD      R16, Z
   \   00000006   3106               CPI     R16, 22
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   91ED               LD      R30, X+
   \   00000002   91FD               LD      R31, X+
   \   00000004   910D               LD      R16, X+
   \   00000006   911C               LD      R17, X
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   91ED               LD      R30, X+
   \   00000002   91FD               LD      R31, X+
   \   00000004   912D               LD      R18, X+
   \   00000006   913C               LD      R19, X
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_16:
   \   00000002   91A9               LD      R26, Y+
   \   00000004   91B9               LD      R27, Y+
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_21:
   \   00000002   BF9B               OUT     0x3B, R25
   \   00000004   BF8F               OUT     0x3F, R24
   \   00000006                      REQUIRE ?Subroutine15
   \   00000006                      ;               // Fall through to label ?Subroutine15

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   9109               LD      R16, Y+
   \   00000002   9119               LD      R17, Y+
   \   00000004   9129               LD      R18, Y+
   \   00000006   9139               LD      R19, Y+
   \   00000008   9149               LD      R20, Y+
   \   0000000A   9159               LD      R21, Y+
   \   0000000C   9169               LD      R22, Y+
   \   0000000E   9179               LD      R23, Y+
   \   00000010   9009               LD      R0, Y+
   \   00000012   9019               LD      R1, Y+
   \   00000014   9029               LD      R2, Y+
   \   00000016   9039               LD      R3, Y+
   \   00000018   91E9               LD      R30, Y+
   \   0000001A   91F9               LD      R31, Y+
   \   0000001C   9189               LD      R24, Y+
   \   0000001E   9199               LD      R25, Y+
   \   00000020   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   94F8               CLI
   \   00000002   ........           CALL    OS__LeaveIntStack
   \   00000006   9100....           LDS     R16, OS_InInt
   \   0000000A   2F10               MOV     R17, R16
   \   0000000C   951A               DEC     R17
   \   0000000E   9310....           STS     OS_InInt, R17
   \   00000012   2300               TST     R16
   \   00000014   F411               BRNE    ??CrossCallReturnLabel_35
   \   00000016   E908               LDI     R16, 152
   \   00000018   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_35:
   \   0000001A   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_31:
   \   0000001C   950A               DEC     R16
   \   0000001E   9300....           STS     (OS_Counters + 1), R16
   \   00000022   9100....           LDS     R16, OS_Counters
   \   00000026   950A               DEC     R16
   \   00000028   9300....           STS     OS_Counters, R16
   \   0000002C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   E010               LDI     R17, 0
   \   00000002   ........           JMP     OS_Error

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   9100....           LDS     R16, (OS_Counters + 1)
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   9508               RET
     61          
     62          
     63          #pragma vector=USART0_TXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     64          __interrupt void IntHandler_TX_USART0( void ){   
   \                     IntHandler_TX_USART0:
   \   00000000   ....               RCALL   ??Subroutine21_0
     65          
     66             OS_EnterInterrupt();
     67             OS_EnterIntStack();
     68              
     69              UCSR0B &= ~(__BIT_MASK( TXCIE0)) ;            // transmission end, disable int.
   \                     ??CrossCallReturnLabel_26:
   \   00000002   9856               CBI     0x0A, 0x06
     70              PORTE &= ~0x04 ;                              // TXE0 off
   \   00000004   981A               CBI     0x03, 0x02
     71              OS_StopTimer(&TimerUSART0);                    // and stop timer
   \   00000006   ....               LDI     R16, LOW(TimerUSART0)
   \   00000008   ....               LDI     R17, (TimerUSART0) >> 8
   \   0000000A   ........           CALL    OS_StopTimer
     72              GoToSyncUART(0) ;                                    // go to sync modus for recive
   \   0000000E   E000               LDI     R16, 0
   \   00000010                      REQUIRE ?Subroutine19
   \   00000010                      REQUIRE _A_UCSR0B
   \   00000010                      REQUIRE _A_PORTE
   \   00000010                      ;               // Fall through to label ?Subroutine19
     73              
     74              OS_LeaveIntStack();
     75              OS_LeaveInterruptNoSwitch();
     76          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_15:
   \   00000002   9518               RETI

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_17:
   \   00000002                      REQUIRE ?Subroutine10
   \   00000002                      ;               // Fall through to label ?Subroutine10
     77          
     78          
     79          #pragma vector = USART0_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
     80          __interrupt void IntHandler_UDRE_USART0( void ){   
   \                     IntHandler_UDRE_USART0:
   \   00000000   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_0:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
     81          
     82              OS_EnterInterrupt();
   \   00000002   ....               RCALL   ?Subroutine5
     83              OS_EnterIntStack();
     84              if ( UART[0].TxCount-- > 0 ) {
   \                     ??CrossCallReturnLabel_2:
   \   00000004   8106               LDD     R16, Z+6
   \   00000006   8117               LDD     R17, Z+7
   \   00000008   01C8               MOVW    R25:R24, R17:R16
   \   0000000A   9701               SBIW    R25:R24, 1
   \   0000000C   8386               STD     Z+6, R24
   \   0000000E   8397               STD     Z+7, R25
   \   00000010   2B01               OR      R16, R17
   \   00000012   F071               BREQ    ??IntHandler_UDRE_USART0_0
     85                  UDR0 = UART[0].pTxBuffer[ UART[0].TxLast ];     // Send a character
   \   00000014   81A0               LD      R26, Z
   \   00000016   81B1               LDD     R27, Z+1
   \   00000018   8104               LDD     R16, Z+4
   \   0000001A   8115               LDD     R17, Z+5
   \   0000001C   0FA0               ADD     R26, R16
   \   0000001E   1FB1               ADC     R27, R17
   \   00000020   910C               LD      R16, X
   \   00000022   B90C               OUT     0x0C, R16
     86                  UART[0].TxLast++;
   \   00000024   8104               LDD     R16, Z+4
   \   00000026   8115               LDD     R17, Z+5
   \   00000028   ....               RCALL   ?Subroutine9
     87              } else{                                             // Last byte sent?
   \                     ??CrossCallReturnLabel_11:
   \   0000002A   8304               STD     Z+4, R16
   \   0000002C   8315               STD     Z+5, R17
   \   0000002E   C003               RJMP    ??IntHandler_UDRE_USART0_1
     88                    UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \                     ??IntHandler_UDRE_USART0_0:
   \   00000030   9855               CBI     0x0A, 0x05
     89                    UCSR0A |= (__BIT_MASK( TXC0)) ;               // Clear int bit in TXC.
   \   00000032   9A5E               SBI     0x0B, 0x06
     90                    UCSR0B |= __BIT_MASK( TXCIE0) ;               // Enable TXC int.
   \   00000034   9A56               SBI     0x0A, 0x06
     91              }           
     92              OS_LeaveIntStack();
   \                     ??IntHandler_UDRE_USART0_1:
   \   00000036                      REQUIRE ?Subroutine20
   \   00000036                      REQUIRE _A_UDR0
   \   00000036                      REQUIRE _A_UCSR0B
   \   00000036                      REQUIRE _A_UCSR0A
   \   00000036                      ;               // Fall through to label ?Subroutine20
     93              OS_LeaveInterruptNoSwitch();
     94          } 

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_20:
   \   00000002   9518               RETI

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_28:
   \   00000002   ....               LDI     R30, LOW(UART)
   \   00000004   ....               LDI     R31, (UART) >> 8
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_22:
   \   00000002   BE5B               OUT     0x3B, R5
   \   00000004   BE4F               OUT     0x3F, R4
   \   00000006   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_23:
   \   00000008   91A9               LD      R26, Y+
   \   0000000A   91B9               LD      R27, Y+
   \   0000000C   9049               LD      R4, Y+
   \   0000000E   9059               LD      R5, Y+
   \   00000010   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_29:
   \   0000000A   B64F               IN      R4, 0x3F
   \   0000000C   B65B               IN      R5, 0x3B
   \   0000000E   9508               RET
     95          #endif
     96          
     97          // USART1
     98          #pragma vector=USART1_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     99          __interrupt void IntHandler_RX_USART1( void ){   
   \                     IntHandler_RX_USART1:
   \   00000000   ....               RCALL   ?Subroutine0
    100          
    101              OS_EnterInterrupt();
    102              OS_EnterIntStack();
    103              if ( UCSR1A & __BIT_MASK( DOR1 ) ) {                // Overrun error? 
   \                     ??CrossCallReturnLabel_25:
   \   00000002   9100....           LDS     R16, _A_UCSR1A
    104              }
    105          
    106              if ( UCSR1A & __BIT_MASK( FE1 ) ) {                 // Framing error? 
   \   00000006   9100....           LDS     R16, _A_UCSR1A
   \   0000000A   ....               LDI     R26, LOW(UART)
   \   0000000C   ....               LDI     R27, (UART) >> 8
   \   0000000E   C007               RJMP    ??IntHandler_RX_USART1_0
    107              }
    108          
    109              while ( UCSR1A & __BIT_MASK( RXC1)  ) {                // New byte avaiable?
    110                  UART[1].pRxBuffer[ UART[1].RxFirst ] = UDR1;    // Read the character 
    111          
    112                  if (UART[1].RxState != HANDLE) {                // ok to receive? 
    113                      switch (UART[1].RxState) {                   // Yes, check state
    114                      case SYNC :
    115                          if ( UART[1].pRxBuffer[ UART[1].RxFirst ] == ANPRO10_SYN) {
    116                              UART[1].SyncCnt ++ ;                 // count sync
   \                     ??IntHandler_RX_USART1_1:
   \   00000010   01FD               MOVW    R31:R30, R27:R26
   \   00000012   A505               LDD     R16, Z+45
   \   00000014   9503               INC     R16
   \   00000016   A705               STD     Z+45, R16
    117                              UART[1].RxFirst = 0;                 // start at start of buff
   \   00000018   E000               LDI     R16, 0
   \   0000001A   A306               STD     Z+38, R16
   \   0000001C   A307               STD     Z+39, R16
    118                          } else if ((UART[1].SyncCnt >= 2) && 
   \                     ??IntHandler_RX_USART1_0:
   \   0000001E   9100....           LDS     R16, _A_UCSR1A
   \   00000022   FF07               SBRS    R16, 7
   \   00000024   C03B               RJMP    ??IntHandler_RX_USART1_2
   \   00000026   9100....           LDS     R16, _A_UDR1
   \   0000002A   9694               ADIW    R27:R26, 36
   \   0000002C   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_5:
   \   0000002E   9797               SBIW    R27:R26, 39
   \   00000030   0FE2               ADD     R30, R18
   \   00000032   1FF3               ADC     R31, R19
   \   00000034   8300               ST      Z, R16
   \   00000036   9100....           LDS     R16, (UART + 44)
   \   0000003A   300A               CPI     R16, 10
   \   0000003C   F381               BREQ    ??IntHandler_RX_USART1_0
   \   0000003E   2300               TST     R16
   \   00000040   F4F1               BRNE    ??IntHandler_RX_USART1_3
   \   00000042   9694               ADIW    R27:R26, 36
   \   00000044   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_7:
   \   00000046   9797               SBIW    R27:R26, 39
   \   00000048   ....               RCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_9:
   \   0000004A   F311               BREQ    ??IntHandler_RX_USART1_1
    119                                     (UART[1].pRxBuffer[ UART[1].RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \   0000004C   9110....           LDS     R17, (UART + 45)
   \   00000050   3012               CPI     R17, 2
   \   00000052   F088               BRCS    ??IntHandler_RX_USART1_4
   \   00000054   3001               CPI     R16, 1
   \   00000056   F479               BRNE    ??IntHandler_RX_USART1_4
    120                              UART[1].SyncCnt = 0 ;                // reset counter
   \   00000058   E000               LDI     R16, 0
   \   0000005A   9300....           STS     (UART + 45), R16
    121                              UART[1].RxState = HEADER ;
   \   0000005E   E001               LDI     R16, 1
   \   00000060   9300....           STS     (UART + 44), R16
    122                              UART[1].RxLast = 0 ;
   \   00000064   01FD               MOVW    R31:R30, R27:R26
   \   00000066   E000               LDI     R16, 0
   \   00000068   A700               STD     Z+40, R16
   \   0000006A   A701               STD     Z+41, R16
    123                              UART[1].RxTimeout = RX_TO_TIME ;      // reset timeout
   \   0000006C   EF0A               LDI     R16, 250
   \   0000006E   A706               STD     Z+46, R16
   \   00000070   E000               LDI     R16, 0
   \   00000072   A707               STD     Z+47, R16
   \   00000074   CFD4               RJMP    ??IntHandler_RX_USART1_0
    124                          } else {
    125                              UART[1].SyncCnt = 0 ;                // start over once more
   \                     ??IntHandler_RX_USART1_4:
   \   00000076   E000               LDI     R16, 0
   \   00000078   9300....           STS     (UART + 45), R16
   \   0000007C   CFD0               RJMP    ??IntHandler_RX_USART1_0
    126                          }
    127                          break;
    128                      default :
    129                          if ((++UART[1].RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??IntHandler_RX_USART1_3:
   \   0000007E   01FD               MOVW    R31:R30, R27:R26
   \   00000080   A106               LDD     R16, Z+38
   \   00000082   A117               LDD     R17, Z+39
   \   00000084   ....               RCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_12:
   \   00000086   A306               STD     Z+38, R16
   \   00000088   A317               STD     Z+39, R17
   \   0000008A   3907               CPI     R16, 151
   \   0000008C   4010               SBCI    R17, 0
   \   0000008E   E001               LDI     R16, 1
   \   00000090   F010               BRCS    ??IntHandler_RX_USART1_5
    130                              GoToSyncUART(1) ;                    // go to sync mode
   \   00000092   ....               RCALL   ?Subroutine13
    131                          } else {
   \                     ??CrossCallReturnLabel_18:
   \   00000094   CFC4               RJMP    ??IntHandler_RX_USART1_0
    132                              ReceivePacketUart(1) ;              // Check package
   \                     ??IntHandler_RX_USART1_5:
   \   00000096   ........           CALL    ReceivePacketUart
   \   0000009A   CFC1               RJMP    ??IntHandler_RX_USART1_0
    133                          }
    134                          break ;   
    135                      }
    136                  }
    137              }
    138             OS_LeaveIntStack();
   \                     ??IntHandler_RX_USART1_2:
   \   0000009C   ....               RJMP    ?Subroutine18
   \   0000009E                      REQUIRE _A_UCSR1A
   \   0000009E                      REQUIRE _A_UDR1
    139             OS_LeaveInterruptNoSwitch();
    140          } 
    141          
    142          
    143          #pragma vector=USART1_TXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
    144          __interrupt void IntHandler_TX_USART1( void ){   
   \                     IntHandler_TX_USART1:
   \   00000000   ....               RCALL   ??Subroutine21_0
    145          
    146              OS_EnterInterrupt();
    147              OS_EnterIntStack();
    148              UCSR1B &= ~(__BIT_MASK( TXCIE1)) ;            // transmission end, disable int.
   \                     ??CrossCallReturnLabel_27:
   \   00000002   9100009A           LDS     R16, 154
   \   00000006   7B0F               ANDI    R16, 0xBF
   \   00000008   9300009A           STS     154, R16
    149              PORTE &= ~0x08 ;                              // TXE1 off
   \   0000000C   981B               CBI     0x03, 0x03
    150              OS_StopTimer(&TimerUSART1);                    // and stop timer
   \   0000000E   ....               LDI     R16, LOW(TimerUSART1)
   \   00000010   ....               LDI     R17, (TimerUSART1) >> 8
   \   00000012   ........           CALL    OS_StopTimer
    151              GoToSyncUART(1) ;                                    // go to sync modus for recive
   \   00000016   E001               LDI     R16, 1
   \   00000018   ....               RJMP    ?Subroutine19
   \   0000001A                      REQUIRE _A_UCSR1B
   \   0000001A                      REQUIRE _A_PORTE
    152              OS_LeaveIntStack();
    153              OS_LeaveInterruptNoSwitch();
    154          }
    155          
    156          
    157          #pragma vector = USART1_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    158          __interrupt void IntHandler_UDRE_USART1( void ){   
   \                     IntHandler_UDRE_USART1:
   \   00000000   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_1:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
    159          
    160             OS_EnterInterrupt();
   \   00000002   ....               RCALL   ?Subroutine5
    161             OS_EnterIntStack();
    162               if ( UART[1].TxCount-- > 0 ) {
   \                     ??CrossCallReturnLabel_3:
   \   00000004   A100               LDD     R16, Z+32
   \   00000006   A111               LDD     R17, Z+33
   \   00000008   01C8               MOVW    R25:R24, R17:R16
   \   0000000A   9701               SBIW    R25:R24, 1
   \   0000000C   A380               STD     Z+32, R24
   \   0000000E   A391               STD     Z+33, R25
   \   00000010   2B01               OR      R16, R17
   \   00000012   F079               BREQ    ??IntHandler_UDRE_USART1_0
    163                  UDR1 = UART[1].pTxBuffer[ UART[1].TxLast ];  // Send a character
   \   00000014   8DA2               LDD     R26, Z+26
   \   00000016   8DB3               LDD     R27, Z+27
   \   00000018   8D06               LDD     R16, Z+30
   \   0000001A   8D17               LDD     R17, Z+31
   \   0000001C   0FA0               ADD     R26, R16
   \   0000001E   1FB1               ADC     R27, R17
   \   00000020   910C               LD      R16, X
   \   00000022   9300....           STS     _A_UDR1, R16
    164                  UART[1].TxLast++;
   \   00000026   8D06               LDD     R16, Z+30
   \   00000028   8D17               LDD     R17, Z+31
   \   0000002A   ....               RCALL   ?Subroutine9
    165               } else {
   \                     ??CrossCallReturnLabel_13:
   \   0000002C   8F06               STD     Z+30, R16
   \   0000002E   8F17               STD     Z+31, R17
   \   00000030   C00F               RJMP    ??IntHandler_UDRE_USART1_1
    166                  UCSR1B &= ~(__BIT_MASK( UDRIE1)) ;            // transmission end, disable int.
   \                     ??IntHandler_UDRE_USART1_0:
   \   00000032   9100009A           LDS     R16, 154
   \   00000036   7D0F               ANDI    R16, 0xDF
   \   00000038   9300009A           STS     154, R16
    167                  UCSR1A |= (__BIT_MASK( TXC1)) ;               // Clear int bit in TXC.
   \   0000003C   9100009B           LDS     R16, 155
   \   00000040   6400               ORI     R16, 0x40
   \   00000042   9300009B           STS     155, R16
    168                  UCSR1B |= __BIT_MASK( TXCIE1) ;               // Enable TXC int.
   \   00000046   9100009A           LDS     R16, 154
   \   0000004A   6400               ORI     R16, 0x40
   \   0000004C   9300009A           STS     154, R16
    169               }
    170              OS_LeaveIntStack();
   \                     ??IntHandler_UDRE_USART1_1:
   \   00000050   ....               RJMP    ?Subroutine20
   \   00000052                      REQUIRE _A_UDR1
   \   00000052                      REQUIRE _A_UCSR1B
   \   00000052                      REQUIRE _A_UCSR1A
    171              OS_LeaveInterruptNoSwitch();
    172          } 

   \                                 In  segment INTVEC, offset 0x48, root
   \                     `??IntHandler_RX_USART0::??INTVEC 72`:
   \   00000048   ........           JMP     IntHandler_RX_USART0

   \                                 In  segment INTVEC, offset 0x4c, root
   \                     `??IntHandler_UDRE_USART0::??INTVEC 76`:
   \   0000004C   ........           JMP     IntHandler_UDRE_USART0

   \                                 In  segment INTVEC, offset 0x50, root
   \                     `??IntHandler_TX_USART0::??INTVEC 80`:
   \   00000050   ........           JMP     IntHandler_TX_USART0

   \                                 In  segment INTVEC, offset 0x78, root
   \                     `??IntHandler_RX_USART1::??INTVEC 120`:
   \   00000078   ........           JMP     IntHandler_RX_USART1

   \                                 In  segment INTVEC, offset 0x7c, root
   \                     `??IntHandler_UDRE_USART1::??INTVEC 124`:
   \   0000007C   ........           JMP     IntHandler_UDRE_USART1

   \                                 In  segment INTVEC, offset 0x80, root
   \                     `??IntHandler_TX_USART1::??INTVEC 128`:
   \   00000080   ........           JMP     IntHandler_TX_USART1

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     18      2   IntHandler_RX_USART0
       18      2   -> GoToSyncUART
       18      4   -> OS_Error
       18      8   -> OS_Error
       18      4   -> OS__EnterIntStack
       18      8   -> OS__LeaveIntStack
       18      2   -> ReceivePacketUart
     18      2   IntHandler_RX_USART1
       18      2   -> GoToSyncUART
       18      4   -> OS_Error
       18      8   -> OS_Error
       18      4   -> OS__EnterIntStack
       18      8   -> OS__LeaveIntStack
       18      2   -> ReceivePacketUart
     16      2   IntHandler_TX_USART0
       16      4   -> GoToSyncUART
       16      4   -> OS_Error
       16      6   -> OS_Error
       16      2   -> OS_StopTimer
       16      4   -> OS__EnterIntStack
       16      6   -> OS__LeaveIntStack
     16      2   IntHandler_TX_USART1
       16      4   -> GoToSyncUART
       16      4   -> OS_Error
       16      6   -> OS_Error
       16      2   -> OS_StopTimer
       16      4   -> OS__EnterIntStack
       16      6   -> OS__LeaveIntStack
     20      2   IntHandler_UDRE_USART0
       20      6   -> OS_Error
       20      6   -> OS__EnterIntStack
       20      6   -> OS__LeaveIntStack
     20      2   IntHandler_UDRE_USART1
       20      6   -> OS_Error
       20      6   -> OS__EnterIntStack
       20      6   -> OS__LeaveIntStack


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine21_0
       4  ?Subroutine0
      16  ?Subroutine1
       6  ?Subroutine10
      54  ?Subroutine11
      34  ?Subroutine12
       4  ?Subroutine13
      46  ?Subroutine14
      34  ?Subroutine15
       6  ?Subroutine16
       6  ?Subroutine17
       4  ?Subroutine18
       4  ?Subroutine19
      18  ?Subroutine2
       4  ?Subroutine20
       8  ?Subroutine3
       2  ?Subroutine4
       8  ?Subroutine5
      10  ?Subroutine6
      10  ?Subroutine7
      10  ?Subroutine8
       6  ?Subroutine9
     146  IntHandler_RX_USART0
       4  IntHandler_RX_USART0::??INTVEC 72
     158  IntHandler_RX_USART1
       4  IntHandler_RX_USART1::??INTVEC 120
      16  IntHandler_TX_USART0
       4  IntHandler_TX_USART0::??INTVEC 80
      26  IntHandler_TX_USART1
       4  IntHandler_TX_USART1::??INTVEC 128
      54  IntHandler_UDRE_USART0
       4  IntHandler_UDRE_USART0::??INTVEC 76
      82  IntHandler_UDRE_USART1
       4  IntHandler_UDRE_USART1::??INTVEC 124
       1  _A_PORTE
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UDR0
       1  _A_UDR1

 
   7 bytes in segment ABSOLUTE
 782 bytes in segment CODE
  24 bytes in segment INTVEC
 
 782 bytes of CODE memory (+ 24 bytes shared)
   0 bytes of DATA memory (+  7 bytes shared)

Errors: none
Warnings: none
