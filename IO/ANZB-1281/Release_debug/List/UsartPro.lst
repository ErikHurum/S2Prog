###############################################################################
#
# IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR           28/Sep/2017  11:34:47
# Copyright 1996-2017 IAR Systems AB.
# Startup license - IAR Embedded Workbench for Atmel AVR 7.10
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\UsartPro.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EW7251.tmp
#        (D:\S2Prog\IO\ANZB\Src\UsartPro.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\ANZB\Release_debug\Obj -D OS_LIBMODE_S -D OS_UART=0 -lCN
#        D:\S2Prog\IO\ANZB\Release_debug\List -y --initializers_in_flash
#        --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB\INC\ -I
#        D:\S2Prog\IO\ANZB\..\..\SHARED\INC\ --eeprom_size 4096 --clib -Ohz)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB\Release_debug\List\UsartPro.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Release_debug\Obj\UsartPro.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\UsartPro.c
      1          /****************************************************************************************
      2          / Com protocol for USART0 
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3c
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3e
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9a
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "string.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          
     13          /*************************************************************************
     14          *   (This is a timer calback)
     15          *  Timout timer USART 0
     16          *
     17          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     18          void TimoutUSART0(void) {
   \                     TimoutUSART0:
     19          
     20              UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \   00000000   9855               CBI     0x0A, 0x05
     21              ClrBit(PORTE, 0x04) ;                              // TXE0 off
   \   00000002   94F8               CLI
   \   00000004   981A               CBI     0x03, 0x02
   \   00000006   ....               RCALL   ?Subroutine16
     22              OS_StopTimer(&TimerUSART0);                    // and stop timer
   \                     ??CrossCallReturnLabel_11:
   \   00000008   ....               LDI     R16, LOW(TimerUSART0)
   \   0000000A   ....               LDI     R17, (TimerUSART0) >> 8
   \   0000000C   ........           CALL    OS_StopTimer
     23              GoToSyncUART(0) ;                                    // go to sync modus for recive
   \   00000010   E000               LDI     R16, 0
   \   00000012                      REQUIRE ?Subroutine145
   \   00000012                      REQUIRE _A_UCSR0B
   \   00000012                      REQUIRE _A_PORTE
   \   00000012                      ;               // Fall through to label ?Subroutine145
     24          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine145:
   \   00000000   ....               RJMP    GoToSyncUART

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   9100....           LDS     R16, (OS_Counters + 1)
   \   00000004   2300               TST     R16
   \   00000006   F409               BRNE    ??Subroutine16_0
   \   00000008   9478               SEI
   \                     ??Subroutine16_0:
   \   0000000A   9508               RET
     25          
     26          /*************************************************************************
     27          *   (This is a timer calback)
     28          *  Timer USART 0 on before TX
     29          *
     30          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     31          void TimoutUSART0On(void) {
   \                     TimoutUSART0On:
     32          
     33              UCSR0B |= __BIT_MASK( UDRIE0) ;                     // start sending by enableing interrupt
   \   00000000   9A55               SBI     0x0A, 0x05
     34              OS_StopTimer(&TimerUSART0On);                    // and stop timer
   \   00000002   ....               LDI     R16, LOW(TimerUSART0On)
   \   00000004   ....               LDI     R17, (TimerUSART0On) >> 8
   \   00000006                      REQUIRE ?Subroutine146
   \   00000006                      REQUIRE _A_UCSR0B
   \   00000006                      ;               // Fall through to label ?Subroutine146
     35          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine146:
   \   00000000   ........           JMP     OS_StopTimer
     36          
     37          /*************************************************************************
     38          *   (This is a timer calback)
     39          *  Timout timer USART 1
     40          *
     41          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     42          void TimoutUSART1(void) {
   \                     TimoutUSART1:
     43          
     44              UCSR1B &= ~(__BIT_MASK( UDRIE1)) ;            // transmission end, disable int.
   \   00000000   9100009A           LDS     R16, 154
   \   00000004   7D0F               ANDI    R16, 0xDF
   \   00000006   9300009A           STS     154, R16
     45              ClrBit(PORTE, 0x08) ;                              // TXE1 off
   \   0000000A   94F8               CLI
   \   0000000C   981B               CBI     0x03, 0x03
   \   0000000E   ....               RCALL   ?Subroutine16
     46              OS_StopTimer(&TimerUSART1);                    // and stop timer
   \                     ??CrossCallReturnLabel_12:
   \   00000010   ....               LDI     R16, LOW(TimerUSART1)
   \   00000012   ....               LDI     R17, (TimerUSART1) >> 8
   \   00000014   ........           CALL    OS_StopTimer
     47              GoToSyncUART(1) ;                                    // go to sync modus for recive
   \   00000018   E001               LDI     R16, 1
   \   0000001A   ....               RJMP    ?Subroutine145
   \   0000001C                      REQUIRE _A_UCSR1B
   \   0000001C                      REQUIRE _A_PORTE
     48          }
     49          
     50          
     51          /*************************************************************************
     52          *   (This is a timer calback)
     53          *  Timer USART 1 on before TX
     54          *
     55          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     56          void TimoutUSART1On(void) {
   \                     TimoutUSART1On:
     57          
     58              UCSR1B |= __BIT_MASK( UDRIE1) ;                     // start sending by enableing interrupt
   \   00000000   9100009A           LDS     R16, 154
   \   00000004   6200               ORI     R16, 0x20
   \   00000006   9300009A           STS     154, R16
     59              OS_StopTimer(&TimerUSART1On);                    // and stop timer
   \   0000000A   ....               LDI     R16, LOW(TimerUSART1On)
   \   0000000C   ....               LDI     R17, (TimerUSART1On) >> 8
   \   0000000E   ....               RJMP    ?Subroutine146
   \   00000010                      REQUIRE _A_UCSR1B
     60          }
     61          
     62          
     63          /*************************************************************************
     64          *   (This is a task)
     65          *  Usart0 handler
     66          *
     67          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine144:
   \   00000000   2300               TST     R16
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
     68          void Usart0Handler(void) {
   \                     Usart0Handler:
   \                     ??Usart0Handler_0:
     69              char stat;
     70          
     71              while (1) {
     72                  stat = OS_WaitEventTimed(1,500);
     73                  if (stat) {
   \   00000000   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_176:
   \   00000002   F3F1               BREQ    ??Usart0Handler_0
     74                      OS_Use(&UARTSEND);
   \   00000004   ....               RCALL   ?Subroutine80
     75                      UsartCheckPackage(0) ; 
   \                     ??CrossCallReturnLabel_90:
   \   00000006   E000               LDI     R16, 0
   \   00000008   ....               RCALL   ?Subroutine79
     76                      OS_Unuse(&UARTSEND);
     77                  }
     78              }
   \                     ??CrossCallReturnLabel_88:
   \   0000000A   CFFA               RJMP    ??Usart0Handler_0
     79          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine80:
   \   00000000   ....               LDI     R16, LOW(UARTSEND)
   \   00000002   ....               LDI     R17, (UARTSEND) >> 8
   \   00000004   ........           JMP     OS_Use

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine79:
   \   00000000   ....               RCALL   UsartCheckPackage
   \   00000002   ....               LDI     R16, LOW(UARTSEND)
   \   00000004   ....               LDI     R17, (UARTSEND) >> 8
   \   00000006   ........           JMP     OS_Unuse

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   EF24               LDI     R18, 244
   \   00000002   E031               LDI     R19, 1
   \   00000004   E001               LDI     R16, 1
   \   00000006   ........           CALL    OS_WaitEventTimed
   \   0000000A   ....               RJMP    ?Subroutine144
     80          
     81          /*************************************************************************
     82          *   (This is a task)
     83          *  Usart1 handler
     84          *
     85          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     86          void Usart1Handler(void) {
   \                     Usart1Handler:
   \                     ??Usart1Handler_0:
     87              char stat;
     88          
     89              while (1) {
     90                  stat = OS_WaitEventTimed(1,500);
     91                  if (stat) {
   \   00000000   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_177:
   \   00000002   F3F1               BREQ    ??Usart1Handler_0
     92                      OS_Use(&UARTSEND);
   \   00000004   ....               RCALL   ?Subroutine80
     93                      UsartCheckPackage(1) ; 
   \                     ??CrossCallReturnLabel_89:
   \   00000006   E001               LDI     R16, 1
   \   00000008   ....               RCALL   ?Subroutine79
     94                      OS_Unuse(&UARTSEND);
     95                  }
     96              }
   \                     ??CrossCallReturnLabel_87:
   \   0000000A   CFFA               RJMP    ??Usart1Handler_0
     97          }
     98          
     99          /*************************************************************************
    100          *
    101          *  Check the incoming packages
    102          *
    103          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine136:
   \   00000000   0FA0               ADD     R26, R16
   \   00000002   1FB1               ADC     R27, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_270:
   \   00000002                      REQUIRE ?Subroutine143
   \   00000002                      ;               // Fall through to label ?Subroutine143

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine143:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine111:
   \   00000000   8502               LDD     R16, Z+10
   \   00000002   8513               LDD     R17, Z+11
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine114:
   \   00000000   ....               RCALL   ?Subroutine126
   \                     ??CrossCallReturnLabel_264:
   \   00000002   ....               LDI     R26, LOW(UART)
   \   00000004   ....               LDI     R27, (UART) >> 8
   \   00000006   ....               RJMP    ?Subroutine136

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine126:
   \   00000000   E010               LDI     R17, 0
   \   00000002   E14A               LDI     R20, 26
   \   00000004                      REQUIRE ?Subroutine131
   \   00000004                      ;               // Fall through to label ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine131:
   \   00000000   E050               LDI     R21, 0
   \   00000002   ........           JMP     ?S_EC_MUL_L02

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine141:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    104          void UsartCheckPackage(char ch) {
   \                     UsartCheckPackage:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
    105          
    106              unsigned short pointer;
    107              char    retval ;
    108          
    109              UART[ch].RxSendReply = false ;                              // flag for answering set to fault
   \   00000006   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_168:
   \   00000008   8F51               STD     Z+25, R21
    110              UART[ch].TxFirst = 11 ;                                     // Start pos for first TX command
   \   0000000A   E00B               LDI     R16, 11
   \   0000000C   8302               STD     Z+2, R16
   \   0000000E   8353               STD     Z+3, R21
    111              pointer = 7 ;
   \   00000010   E087               LDI     R24, 7
   \   00000012   E090               LDI     R25, 0
    112              do {
    113                  retval = CheckActionUart(ch, pointer);
   \                     ??UsartCheckPackage_0:
   \   00000014   019C               MOVW    R19:R18, R25:R24
   \   00000016   2D04               MOV     R16, R4
   \   00000018   ....               RCALL   CheckActionUart
   \   0000001A   2F30               MOV     R19, R16
    114                  pointer = pointer + UART[ch].pRxBuffer[pointer+2] 
    115                            + (UART[ch].pRxBuffer[pointer+3]*256) + 4;      // Point to a command cmd hb/lb
   \   0000001C   ....               RCALL   ?Subroutine48
    116              } while (retval && (pointer < (UART[ch].RxPacklen - 4 )));
   \                     ??CrossCallReturnLabel_355:
   \   0000001E   8122               LDD     R18, Z+2
   \   00000020   81F3               LDD     R31, Z+3
   \   00000022   2FE2               MOV     R30, R18
   \   00000024   9634               ADIW    R31:R30, 4
   \   00000026   0F8E               ADD     R24, R30
   \   00000028   1F9F               ADC     R25, R31
   \   0000002A   2333               TST     R19
   \   0000002C   F041               BREQ    ??UsartCheckPackage_1
   \   0000002E   01FD               MOVW    R31:R30, R27:R26
   \   00000030   8906               LDD     R16, Z+22
   \   00000032   8917               LDD     R17, Z+23
   \   00000034   5004               SUBI    R16, 4
   \   00000036   4010               SBCI    R17, 0
   \   00000038   1780               CP      R24, R16
   \   0000003A   0791               CPC     R25, R17
   \   0000003C   F358               BRCS    ??UsartCheckPackage_0
    117              if (UART[ch].RxSendReply) {                                   //send answer?
   \                     ??UsartCheckPackage_1:
   \   0000003E   01FD               MOVW    R31:R30, R27:R26
   \   00000040   8D01               LDD     R16, Z+25
   \   00000042   2300               TST     R16
   \   00000044   2D04               MOV     R16, R4
   \   00000046   F011               BREQ    ??UsartCheckPackage_2
    118                  Uart_BuildTail(ch);                                       // yes, build tail (and header) and start sending
   \   00000048   ....               RCALL   Uart_BuildTail
   \   0000004A   C001               RJMP    ??UsartCheckPackage_3
    119              } else {
    120                  GoToSyncUART(ch) ;                                        // go to sync modus here if not reply
   \                     ??UsartCheckPackage_2:
   \   0000004C   ....               RCALL   GoToSyncUART
    121              }
    122          }
   \                     ??UsartCheckPackage_3:
   \   0000004E   E0E5               LDI     R30, 5
   \   00000050   ........           JMP     ?EPILOGUE_B5_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine48:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_119:
   \   00000004   0F08               ADD     R16, R24
   \   00000006   1F19               ADC     R17, R25
   \   00000008   ....               RJMP    ?Subroutine141
    123          
    124          
    125          /*************************************************************************
    126          *
    127          *  Check action on received data
    128          *
    129          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    130          char CheckActionUart(char ch, unsigned short pointer) {
   \                     CheckActionUart:
   \   00000000   ........           CALL    ?PROLOGUE12_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004   2F80               MOV     R24, R16
   \   00000006   0139               MOVW    R7:R6, R19:R18
    131          
    132              unsigned short   command;
    133              char    retval = true;
   \   00000008   E091               LDI     R25, 1
    134           
    135              command = UART[ch].pRxBuffer[pointer] | (UART[ch].pRxBuffer[pointer+1] << 8);
   \   0000000A   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_4:
   \   0000000C   8482               LDD     R8, Z+10
   \   0000000E   8493               LDD     R9, Z+11
   \   00000010   0C86               ADD     R8, R6
   \   00000012   1C97               ADC     R9, R7
   \   00000014   01F4               MOVW    R31:R30, R9:R8
   \   00000016   80A0               LD      R10, Z
   \   00000018   80B1               LDD     R11, Z+1
    136              switch (command) {                                  // check action 
   \   0000001A   01D3               MOVW    R27:R26, R7:R6
   \   0000001C   9614               ADIW    R27:R26, 4
   \   0000001E   0185               MOVW    R17:R16, R11:R10
   \   00000020   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart>_0`)
   \   00000022   ....               LDI     R31, (`?<Jumptable for CheckActionUart>_0`) >> 16
   \   00000024   BFFB               OUT     0x3B, R31
   \   00000026   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart>_0`)
   \   00000028   ........           JMP     ?SV_SWITCH_L06
    137              case CMD_REQ_STATUS :                           // Regusest status for target
    138                  BuildStatusData(ch) ;                         // make package
   \                     ??CheckActionUart_0:
   \   0000002C   2F08               MOV     R16, R24
   \   0000002E   ....               RCALL   BuildStatusData
    139                  break;
   \   00000030   C078               RJMP    ??CheckActionUart_1
    140          
    141              case CMD_GET_STACKSTATUS :                        // Request stck status
    142                  BuildStackStatus(ch, pointer+4) ;                     // receive package	
   \                     ??CheckActionUart_2:
   \   00000032   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_71:
   \   00000034   ....               RCALL   BuildStackStatus
    143                  break ;
   \   00000036   C075               RJMP    ??CheckActionUart_1
    144          
    145              case CMD_EEPROM_RESET :                        // Reset EEPROM??
    146                  GetResetEEPROM(ch, pointer+4) ;                     // receive package	
   \                     ??CheckActionUart_3:
   \   00000038   ........           CALL    EEPROMReset
    147                  break ;
    148          
    149              case CMD_GOTO_BOOTLOADER :                        // Goto bootlaoder??
    150                  GetGotoBootloader(ch, pointer+4) ;                     // receive package	
    151                  break ;
    152          
    153              case CMD_SND_EEPROM_DATA :                              // Receive EEPROM data
    154                  GetEEPROMData(ch, pointer+4) ;                     // receive package	
    155                  break ;
    156          
    157              case CMD_REQ_EEPROM_DATA :                              // Request to send EEPROM data
    158                  BuildEEPROMData(ch, pointer+4) ;                     // receive package	
    159                  break ;
    160          
    161              case CMD_REQ_INT_DATA :                              // Request external data
    162                  BuildADInt(ch, pointer+4) ;                     // receive package	
    163                  break ;
    164          
    165              case CMD_SND_RS4_SETUP :                              // Receive sertup of AN-RS485
    166                  if (UnitID == AN_ZB485) {
    167                      GetRS4Setup(ch, pointer+4) ;                     // receive package	
    168                  }
    169                  break ;
    170          
    171              case CMD_REQ_RS4_SETUP :                              // Request for sertup of AN-RS485
    172                  if (UnitID == AN_ZB485) {
    173                      BuildRS4Setup(ch, pointer+4) ;                     // receive package	
    174                  }
    175                  break ;
    176                  
    177              case CMD_SND_RS4_ADBUF :                              // Request external AD data
    178                  if (UnitID == AN_ZB485) {
    179                      GetADData(ch, pointer+4) ;                     // receive package	
    180                  }
    181                  break;
    182                  
    183              case CMD_REQ_RS4_DATA :                              // Request external AD eeprom data
    184                  if (UnitID == AN_ZB485) {
    185                      switch (UART[ch].pRxBuffer[pointer+4]) {
    186                      case 0:                                         // Measure data
    187                          BuildMData485(ch, pointer+5) ;              // receive package	
    188                          if (TData.RS4.FromTargetBuffer[0][0] == true) {     // send eepromdata ch 0?
    189                            BuildADEpromdata(ch, 0);
    190                            TData.RS4.FromTargetBuffer[0][0] = false ;  // Marked as sent
    191                          }
    192                          if (TData.RS4.FromTargetBuffer[1][0] == true) {     // send eepromdata ch 1?
    193                            BuildADEpromdata(ch, 1);                  // channel 1
    194                            TData.RS4.FromTargetBuffer[1][0] = false ;  // Marked as sent
    195                          }
    196                          if ((TData.RS4.WHDataAvailable >> UART[ch].pRxBuffer[pointer+5]) & 0x01) {
    197                              BuildWHdata(ch, pointer + 5);
    198                              //TData.RS4.WHDataAvailable &= ~(0x01 << UART[ch].pRxBuffer[pointer+5]);
    199                          }
    200                          break;
    201                      case 1:                                         // Raw and cal data
    202                          BuildRData485(ch, pointer+5) ;                     // receive package	
    203                          break;             
    204                      }          
    205                  }
    206                  break;
    207          
    208              case CMD_SND_ANA_SETUP :                              // Receive sertup of AN-RSANA
    209                  if (UnitID == AN_ZBANA) {
    210                      GetANASetup(ch, pointer+4) ;                     // receive package	
    211                  }
    212                  break ;
    213          
    214              case CMD_REQ_ANA_SETUP :                              // Request for sertup of AN-RSANA
    215                  if (UnitID == AN_ZBANA) {
    216                      BuildANASetup(ch, pointer+4) ;                     // receive package	
    217                  }
    218                  break ;
    219          
    220              case CMD_SND_ANA_FILTER :                              // Receive filter of AN-RSANA
    221                  if (UnitID == AN_ZBANA) {
    222                      GetANAFilter(ch, pointer+4) ;                     // receive package	
    223                  }
    224                  break ;
    225          
    226              case CMD_REQ_ANA_FILTER :                              // Request filter of AN-RSANA
    227                  if (UnitID == AN_ZBANA) {
    228                      BuildANAFilter(ch, pointer+4) ;                     // receive package	
    229                  }
    230                  break ;
    231          
    232              case CMD_REQ_ANA_DATA :                              // Request ANA data(4-20ma)
    233                  if (UnitID == AN_ZBANA) {
    234                      BuildMDataANA(ch, pointer+4) ;                     // receive 
    235                  }
    236                  break ;
    237          
    238              default:
    239                  if (command < MAX_ECMD) {                   // handle end commands
    240                      retval = false ;
    241                  }
    242                  break;
    243          
    244              }
   \   0000003C   C072               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_4:
   \   0000003E   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_72:
   \   00000040   ....               RCALL   GetGotoBootloader
   \   00000042   C06F               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_5:
   \   00000044   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_73:
   \   00000046   ....               RCALL   GetEEPROMData
   \   00000048   C06C               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_6:
   \   0000004A   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_74:
   \   0000004C   ....               RCALL   BuildEEPROMData
   \   0000004E   C069               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_7:
   \   00000050   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_75:
   \   00000052   ....               RCALL   BuildADInt
   \   00000054   C066               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_8:
   \   00000056   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_179:
   \   00000058   F009               BREQ    $+2+2
   \   0000005A   C063               RJMP    ??CheckActionUart_1
   \   0000005C   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_76:
   \   0000005E   ....               RCALL   GetRS4Setup
   \   00000060   C060               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_9:
   \   00000062   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_180:
   \   00000064   F009               BREQ    $+2+2
   \   00000066   C05D               RJMP    ??CheckActionUart_1
   \   00000068   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_77:
   \   0000006A   ....               RCALL   BuildRS4Setup
   \   0000006C   C05A               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_10:
   \   0000006E   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_181:
   \   00000070   F009               BREQ    $+2+2
   \   00000072   C057               RJMP    ??CheckActionUart_1
   \   00000074   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_78:
   \   00000076   ....               RCALL   GetADData
   \   00000078   C054               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_11:
   \   0000007A   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_182:
   \   0000007C   F009               BREQ    $+2+2
   \   0000007E   C051               RJMP    ??CheckActionUart_1
   \   00000080   01D3               MOVW    R27:R26, R7:R6
   \   00000082   9615               ADIW    R27:R26, 5
   \   00000084   01F4               MOVW    R31:R30, R9:R8
   \   00000086   8104               LDD     R16, Z+4
   \   00000088   2300               TST     R16
   \   0000008A   F019               BREQ    ??CheckActionUart_12
   \   0000008C   950A               DEC     R16
   \   0000008E   F139               BREQ    ??CheckActionUart_13
   \   00000090   C048               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_12:
   \   00000092   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_79:
   \   00000094   ....               RCALL   BuildMData485
   \   00000096   9100....           LDS     R16, (TData + 1428)
   \   0000009A   3001               CPI     R16, 1
   \   0000009C   F431               BRNE    ??CheckActionUart_14
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   2F08               MOV     R16, R24
   \   000000A2   ....               RCALL   BuildADEpromdata
   \   000000A4   E000               LDI     R16, 0
   \   000000A6   9300....           STS     (TData + 1428), R16
   \                     ??CheckActionUart_14:
   \   000000AA   9100....           LDS     R16, (TData + 1478)
   \   000000AE   3001               CPI     R16, 1
   \   000000B0   F429               BRNE    ??CheckActionUart_15
   \   000000B2   018C               MOVW    R17:R16, R25:R24
   \   000000B4   ....               RCALL   BuildADEpromdata
   \   000000B6   E000               LDI     R16, 0
   \   000000B8   9300....           STS     (TData + 1478), R16
   \                     ??CheckActionUart_15:
   \   000000BC   9100....           LDS     R16, (TData + 1267)
   \   000000C0   E010               LDI     R17, 0
   \   000000C2   01F2               MOVW    R31:R30, R5:R4
   \   000000C4   8522               LDD     R18, Z+10
   \   000000C6   8533               LDD     R19, Z+11
   \   000000C8   0D26               ADD     R18, R6
   \   000000CA   1D37               ADC     R19, R7
   \   000000CC   01F9               MOVW    R31:R30, R19:R18
   \   000000CE   8145               LDD     R20, Z+5
   \   000000D0   ........           CALL    ?SS_SHR_L02
   \   000000D4   7001               ANDI    R16, 0x01
   \   000000D6   F129               BREQ    ??CheckActionUart_1
   \   000000D8   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_80:
   \   000000DA   ....               RCALL   BuildWHdata
   \   000000DC   C022               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_13:
   \   000000DE   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_81:
   \   000000E0   ....               RCALL   BuildRData485
   \   000000E2   C01F               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_16:
   \   000000E4   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_44:
   \   000000E6   F4E9               BRNE    ??CheckActionUart_1
   \   000000E8   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_82:
   \   000000EA   ....               RCALL   GetANASetup
   \   000000EC   C01A               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_17:
   \   000000EE   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_45:
   \   000000F0   F4C1               BRNE    ??CheckActionUart_1
   \   000000F2   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_83:
   \   000000F4   ....               RCALL   BuildANASetup
   \   000000F6   C015               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_18:
   \   000000F8   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_46:
   \   000000FA   F499               BRNE    ??CheckActionUart_1
   \   000000FC   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_84:
   \   000000FE   ....               RCALL   GetANAFilter
   \   00000100   C010               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_19:
   \   00000102   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_47:
   \   00000104   F471               BRNE    ??CheckActionUart_1
   \   00000106   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_85:
   \   00000108   ....               RCALL   BuildANAFilter
   \   0000010A   C00B               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_20:
   \   0000010C   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_48:
   \   0000010E   F449               BRNE    ??CheckActionUart_1
   \   00000110   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_86:
   \   00000112   ....               RCALL   BuildMDataANA
   \   00000114   C006               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_21:
   \   00000116   E604               LDI     R16, 100
   \   00000118   16A0               CP      R10, R16
   \   0000011A   E000               LDI     R16, 0
   \   0000011C   06B0               CPC     R11, R16
   \   0000011E   F408               BRCC    ??CheckActionUart_1
   \   00000120   E090               LDI     R25, 0
    245              return retval;
   \                     ??CheckActionUart_1:
   \   00000122   2F09               MOV     R16, R25
   \   00000124   E0EC               LDI     R30, 12
   \   00000126   ........           JMP     ?EPILOGUE_B12_L09
    246          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine78:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002   2F08               MOV     R16, R24
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine55:
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004                      REQUIRE ?Subroutine144
   \   00000004                      ;               // Fall through to label ?Subroutine144

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine54:
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   3001               CPI     R16, 1
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   ....               RCALL   ?Subroutine126
   \                     ??CrossCallReturnLabel_263:
   \   00000002   ....               LDI     R18, LOW(UART)
   \   00000004   2E42               MOV     R4, R18
   \   00000006   ....               LDI     R18, (UART) >> 8
   \   00000008   0E40               ADD     R4, R16
   \   0000000A   1F21               ADC     R18, R17
   \   0000000C   2E52               MOV     R5, R18
   \   0000000E   2DE4               MOV     R30, R4
   \   00000010   2FF2               MOV     R31, R18
   \   00000012   9508               RET
    247          
    248          /*************************************************************************
    249          *
    250          * Build send packet header
    251          *
    252          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    253          void Uart_BuildHeader(char ch) {
   \                     Uart_BuildHeader:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
    254          
    255              UART[ch].RxFirst = 0;                                // Reset pointers
   \   00000004   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_165:
   \   00000006   8754               STD     Z+12, R21
   \   00000008   8755               STD     Z+13, R21
    256              UART[ch].RxLast  = 0;
   \   0000000A   8756               STD     Z+14, R21
   \   0000000C   8757               STD     Z+15, R21
    257              UART[ch].TxLast  = 0;
   \   0000000E   8354               STD     Z+4, R21
   \   00000010   8355               STD     Z+5, R21
    258          
    259              UART[ch].pTxBuffer[0] = ANPRO10_SYN ;                        /* Sync */
   \   00000012   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_205:
   \   00000014   E106               LDI     R16, 22
   \   00000016   8300               ST      Z, R16
    260              UART[ch].pTxBuffer[1] = ANPRO10_SYN ;                        /* Sync */
   \   00000018   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_206:
   \   0000001A   8301               STD     Z+1, R16
    261              UART[ch].pTxBuffer[2] = ANPRO10_SYN ;                        /* Sync */
   \   0000001C   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_207:
   \   0000001E   8302               STD     Z+2, R16
    262              UART[ch].pTxBuffer[3] = ANPRO10_SOH ;                        /* Start of header */
   \   00000020   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_222:
   \   00000022   9619               ADIW    R27:R26, 9
   \   00000024   E001               LDI     R16, 1
   \   00000026   8303               STD     Z+3, R16
    263              UART[ch].pTxBuffer[4] = UART[ch].pRxBuffer[2] ;      /* RXID */
   \   00000028   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_223:
   \   0000002A   971B               SBIW    R27:R26, 11
   \   0000002C   8102               LDD     R16, Z+2
   \   0000002E   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_224:
   \   00000030   9619               ADIW    R27:R26, 9
   \   00000032   8304               STD     Z+4, R16
    264              UART[ch].pTxBuffer[5] = UART[ch].pRxBuffer[3] ;      /* Rx address */
   \   00000034   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_225:
   \   00000036   971B               SBIW    R27:R26, 11
   \   00000038   8103               LDD     R16, Z+3
   \   0000003A   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_208:
   \   0000003C   8305               STD     Z+5, R16
    265              UART[ch].pTxBuffer[6] = 0x10 + UnitID ;              /* Unit ID */
   \   0000003E   9100....           LDS     R16, UnitID
   \   00000042   5F00               SUBI    R16, 240
   \   00000044   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_209:
   \   00000046   8306               STD     Z+6, R16
    266              UART[ch].pTxBuffer[7] = MyAddress();                 /* Tx address */
   \   00000048   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_51:
   \   0000004A   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_210:
   \   0000004C   8307               STD     Z+7, R16
    267              UART[ch].pTxBuffer[8] = 0 ;                          /* packlen HB, don't know yet */
   \   0000004E   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_211:
   \   00000050   E000               LDI     R16, 0
   \   00000052   8700               STD     Z+8, R16
    268              UART[ch].pTxBuffer[9] = 0 ;                          /* packlen LB, don't know yet */
   \   00000054   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_212:
   \   00000056   8701               STD     Z+9, R16
    269              UART[ch].pTxBuffer[10] = 0 ;                         /* Header checksum, don't know yet */
   \   00000058   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_226:
   \   0000005A   8702               STD     Z+10, R16
    270          }
   \   0000005C                      REQUIRE ?Subroutine134
   \   0000005C                      ;               // Fall through to label ?Subroutine134

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine134:
   \   00000000   91A9               LD      R26, Y+
   \   00000002   91B9               LD      R27, Y+
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine100:
   \   00000000   91ED               LD      R30, X+
   \   00000002   91FC               LD      R31, X
   \   00000004   9711               SBIW    R27:R26, 1
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine101:
   \   00000000   91ED               LD      R30, X+
   \   00000002   91FC               LD      R31, X
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine57:
   \   00000000   ........           JMP     MyAddress
    271          
    272          /*************************************************************************
    273          *
    274          * Build  packet tail
    275          *
    276          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    277          void Uart_BuildTail(char ch) {
   \                     Uart_BuildTail:
   \   00000000   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_100:
   \   00000002   2F80               MOV     R24, R16
    278          
    279              Uart_BuildHeader(ch);                                    // fist build the header
   \   00000004   ....               RCALL   Uart_BuildHeader
    280          
    281              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK & 0xff ;  // End command lb
   \   00000006   2F08               MOV     R16, R24
   \   00000008   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_268:
   \   0000000A   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_39:
   \   0000000C   8350               ST      Z, R21
   \   0000000E   ....               RCALL   ??Subroutine161_0
    282              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK >> 8 ;    // End command hb 
   \                     ??CrossCallReturnLabel_328:
   \   00000010   ....               RCALL   ?Subroutine32
    283              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0x00 ;                  // End data 
   \                     ??CrossCallReturnLabel_29:
   \   00000012   ....               RCALL   ?Subroutine32
    284          
    285              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].TxSeqCnt++ ;   // Sequence counter 
   \                     ??CrossCallReturnLabel_30:
   \   00000014   8521               LDD     R18, Z+9
   \   00000016   2F02               MOV     R16, R18
   \   00000018   9503               INC     R16
   \   0000001A   8701               STD     Z+9, R16
   \   0000001C   ....               RCALL   ?Subroutine28
    286          
    287              UART[ch].pTxBuffer[8] = UART[ch].TxFirst -2;                    // correct length because stx's
   \                     ??CrossCallReturnLabel_184:
   \   0000001E   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_216:
   \   00000020   8700               STD     Z+8, R16
    288              UART[ch].pTxBuffer[9] = (UART[ch].TxFirst-2) >> 8 ;             // packet len high 
   \   00000022   ....               RCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_316:
   \   00000024   5002               SUBI    R16, 2
   \   00000026   4010               SBCI    R17, 0
   \   00000028   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_213:
   \   0000002A   8711               STD     Z+9, R17
    289          
    290              UART[ch].pTxBuffer[10] = CalcDSTxChecksum(ch, 10) ;         // Get header checksum 
   \   0000002C   E02A               LDI     R18, 10
   \   0000002E   E030               LDI     R19, 0
   \   00000030   ....               RCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_53:
   \   00000032   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_214:
   \   00000034   8702               STD     Z+10, R16
    291          
    292              UART[ch].pTxBuffer[UART[ch].TxFirst] = CalcDSTxChecksum(ch, UART[ch].TxFirst) ; // Get checksum 
   \   00000036   01FD               MOVW    R31:R30, R27:R26
   \   00000038   8122               LDD     R18, Z+2
   \   0000003A   8133               LDD     R19, Z+3
   \   0000003C   ....               RCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_52:
   \   0000003E   2F20               MOV     R18, R16
   \   00000040   ....               RCALL   ?Subroutine127
   \                     ??CrossCallReturnLabel_130:
   \   00000042   9711               SBIW    R27:R26, 1
   \   00000044   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_121:
   \   00000046   ....               RCALL   ?Subroutine64
    293              UART[ch].TxFirst++ ;                                        // OBS!! must be inc here due to ANSI standard !!!!
   \                     ??CrossCallReturnLabel_159:
   \   00000048   ....               RCALL   ?Subroutine30
    294                                                                          
    295              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANPRO10_EOT ;            // End of transmission 
    296              UART[ch].TxCount = UART[ch].TxFirst;                      //bytes to send 
   \                     ??CrossCallReturnLabel_28:
   \   0000004A   8306               STD     Z+6, R16
   \   0000004C   8317               STD     Z+7, R17
    297              UART[ch].TxLast = 0;                                     // reset cunter
   \   0000004E   E000               LDI     R16, 0
   \   00000050   8304               STD     Z+4, R16
   \   00000052   8305               STD     Z+5, R16
    298              if (ch == 0) {                                           // Turn on TXE for channel
   \   00000054   2388               TST     R24
   \   00000056   F449               BRNE    ??Uart_BuildTail_0
    299                  OS_RetriggerTimer(&TimerUSART0);                     // and start timeout TX timer
   \   00000058   ....               LDI     R16, LOW(TimerUSART0)
   \   0000005A   ....               LDI     R17, (TimerUSART0) >> 8
   \   0000005C   ....               RCALL   ?Subroutine66
    300                  SetBit(PORTE, 0x04) ;                                // TXE0 on
   \                     ??CrossCallReturnLabel_62:
   \   0000005E   94F8               CLI
   \   00000060   9A1A               SBI     0x03, 0x02
   \   00000062   ....               RCALL   ?Subroutine16
    301                  OS_RetriggerTimer(&TimerUSART0On);                   // and start timer for on before TX
   \                     ??CrossCallReturnLabel_13:
   \   00000064   ....               LDI     R16, LOW(TimerUSART0On)
   \   00000066   ....               LDI     R17, (TimerUSART0On) >> 8
   \   00000068   C00A               RJMP    ??Uart_BuildTail_1
    302              } else if (ch ==1) {
   \                     ??Uart_BuildTail_0:
   \   0000006A   3081               CPI     R24, 1
   \   0000006C   F449               BRNE    ??CrossCallReturnLabel_60
    303                  OS_RetriggerTimer(&TimerUSART1);                     // and start timeout TX timer
   \   0000006E   ....               LDI     R16, LOW(TimerUSART1)
   \   00000070   ....               LDI     R17, (TimerUSART1) >> 8
   \   00000072   ....               RCALL   ?Subroutine66
    304                  SetBit(PORTE, 0x08) ;                                // TXE1 on
   \                     ??CrossCallReturnLabel_61:
   \   00000074   94F8               CLI
   \   00000076   9A1B               SBI     0x03, 0x03
   \   00000078   ....               RCALL   ?Subroutine16
    305                  OS_RetriggerTimer(&TimerUSART1On);                   // and start timer for on before TX
   \                     ??CrossCallReturnLabel_14:
   \   0000007A   ....               LDI     R16, LOW(TimerUSART1On)
   \   0000007C   ....               LDI     R17, (TimerUSART1On) >> 8
    306              }
   \                     ??Uart_BuildTail_1:
   \   0000007E   ....               RCALL   ?Subroutine66
    307          }
   \                     ??CrossCallReturnLabel_60:
   \   00000080   ....               RJMP    ?Subroutine148
   \   00000082                      REQUIRE _A_PORTE

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine66:
   \   00000000   ........           JMP     OS_RetriggerTimer

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine58:
   \   00000000   2F08               MOV     R16, R24
   \   00000002   ....               RJMP    CalcDSTxChecksum

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine53:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002                      REQUIRE ?Subroutine95
   \   00000002                      ;               // Fall through to label ?Subroutine95

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine95:
   \   00000000   8102               LDD     R16, Z+2
   \   00000002   8113               LDD     R17, Z+3
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   ....               RCALL   ??Subroutine169_0
   \                     ??CrossCallReturnLabel_366:
   \   00000002   8350               ST      Z, R21
   \   00000004   ....               RJMP    ??Subroutine161_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine148:
   \   00000000   E0E4               LDI     R30, 4
   \   00000002                      REQUIRE ??Subroutine156_0
   \   00000002                      ;               // Fall through to label ??Subroutine156_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine156_0:
   \   00000000   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine49:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002                      REQUIRE ?Subroutine122
   \   00000002                      ;               // Fall through to label ?Subroutine122

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine122:
   \   00000000   8142               LDD     R20, Z+2
   \   00000002   8153               LDD     R21, Z+3
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   5002               SUBI    R16, 2
   \   00000002                      REQUIRE ?Subroutine100
   \   00000002                      ;               // Fall through to label ?Subroutine100

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine117:
   \   00000000   8100               LD      R16, Z
   \   00000002   8111               LDD     R17, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine127:
   \   00000000   910D               LD      R16, X+
   \   00000002   911C               LD      R17, X
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine150:
   \   00000000   8320               ST      Z, R18
   \   00000002   ....               RJMP    ??Subroutine161_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_344:
   \   00000002                      REQUIRE ?Subroutine88
   \   00000002                      ;               // Fall through to label ?Subroutine88

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine88:
   \   00000000   E004               LDI     R16, 4
   \   00000002                      REQUIRE ?Subroutine116
   \   00000002                      ;               // Fall through to label ?Subroutine116

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine116:
   \   00000000   8300               ST      Z, R16
   \   00000002                      REQUIRE ?Subroutine128
   \   00000002                      REQUIRE ??Subroutine161_0
   \   00000002                      ;               // Fall through to label ??Subroutine161_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine161_0:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002                      REQUIRE ?Subroutine128
   \   00000002                      REQUIRE ??Subroutine162_0
   \   00000002                      ;               // Fall through to label ??Subroutine162_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine162_0:
   \   00000000   8102               LDD     R16, Z+2
   \   00000002   8113               LDD     R17, Z+3
   \   00000004   5F0F               SUBI    R16, 255
   \   00000006                      REQUIRE ?Subroutine128
   \   00000006                      ;               // Fall through to label ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine128:
   \   00000000   4F1F               SBCI    R17, 255
   \   00000002   8302               STD     Z+2, R16
   \   00000004   8313               STD     Z+3, R17
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine102:
   \   00000000   ........           JMP     ?PROLOGUE4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine118:
   \   00000000   ....               RCALL   ?Subroutine127
   \                     ??CrossCallReturnLabel_133:
   \   00000002   9711               SBIW    R27:R26, 1
   \   00000004   ....               RJMP    ?Subroutine143

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine89:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_352:
   \   00000002                      REQUIRE ?Subroutine121
   \   00000002                      ;               // Fall through to label ?Subroutine121

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine121:
   \   00000000   8142               LDD     R20, Z+2
   \   00000002   8153               LDD     R21, Z+3
   \   00000004   0F04               ADD     R16, R20
   \   00000006   1F15               ADC     R17, R21
   \   00000008   ....               RJMP    ?Subroutine141

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine140:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8320               ST      Z, R18
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine64:
   \   00000000   0F04               ADD     R16, R20
   \   00000002   1F15               ADC     R17, R21
   \   00000004   ....               RJMP    ?Subroutine140

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine47:
   \   00000000   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_173:
   \   00000002   ....               RJMP    ?Subroutine120

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_356:
   \   00000002   ....               RJMP    ?Subroutine150

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine85:
   \   00000000   ....               RCALL   ??Subroutine161_0
   \                     ??CrossCallReturnLabel_336:
   \   00000002                      REQUIRE ?Subroutine120
   \   00000002                      REQUIRE ??Subroutine169_0
   \   00000002                      ;               // Fall through to label ??Subroutine169_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine169_0:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_353:
   \   00000002                      REQUIRE ?Subroutine120
   \   00000002                      ;               // Fall through to label ?Subroutine120

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine120:
   \   00000000   8122               LDD     R18, Z+2
   \   00000002   8133               LDD     R19, Z+3
   \   00000004                      REQUIRE ?Subroutine130
   \   00000004                      ;               // Fall through to label ?Subroutine130

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine130:
   \   00000000   0F02               ADD     R16, R18
   \   00000002   1F13               ADC     R17, R19
   \   00000004                      REQUIRE ?Subroutine141
   \   00000004                      ;               // Fall through to label ?Subroutine141
    308          
    309          /*************************************************************************
    310          *
    311          * Build datablock for card status
    312          *
    313          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine154:
   \   00000000   5F0E               SUBI    R16, 254
   \   00000002   ....               RJMP    ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine132:
   \   00000000   9713               SBIW    R27:R26, 3
   \   00000002                      REQUIRE ??Subroutine158_0
   \   00000002                      ;               // Fall through to label ??Subroutine158_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine158_0:
   \   00000000   0FE0               ADD     R30, R16
   \   00000002   1FF1               ADC     R31, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine106:
   \   00000000   0FE8               ADD     R30, R24
   \   00000002   1FF9               ADC     R31, R25
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine137:
   \   00000000   8182               LDD     R24, Z+2
   \   00000002   8193               LDD     R25, Z+3
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine142:
   \   00000000   8300               ST      Z, R16
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine90:
   \   00000000   8300               ST      Z, R16
   \   00000002   01FD               MOVW    R31:R30, R27:R26
   \   00000004   ....               RJMP    ?Subroutine137

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   9702               SBIW    R25:R24, 2
   \   00000002                      REQUIRE ?Subroutine101
   \   00000002                      ;               // Fall through to label ?Subroutine101

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine147:
   \   00000000   E0E6               LDI     R30, 6
   \   00000002                      REQUIRE ??Subroutine163_0
   \   00000002                      ;               // Fall through to label ??Subroutine163_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine163_0:
   \   00000000   ........           JMP     ?EPILOGUE_B6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   ........           JMP     ?PROLOGUE6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_92:
   \   00000002                      REQUIRE ?Subroutine89
   \   00000002                      ;               // Fall through to label ?Subroutine89

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine81:
   \   00000000   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_271:
   \   00000002   01FD               MOVW    R31:R30, R27:R26
   \   00000004   E001               LDI     R16, 1
   \   00000006   8F01               STD     Z+25, R16
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    314          void BuildStatusData(char ch){
   \                     BuildStatusData:
   \   00000000   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_18:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002   2F20               MOV     R18, R16
    315          
    316              short ntna ;
    317              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   00000004   ....               RCALL   ?Subroutine2
    318          
    319              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS & 0xff;     
   \                     ??CrossCallReturnLabel_0:
   \   00000006   EE09               LDI     R16, 233
   \   00000008   ....               RCALL   ?Subroutine87
    320              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS >> 8;     
   \                     ??CrossCallReturnLabel_275:
   \   0000000A   E003               LDI     R16, 3
   \   0000000C   8300               ST      Z, R16
   \   0000000E   ....               RCALL   ??Subroutine161_0
    321              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \                     ??CrossCallReturnLabel_334:
   \   00000010   0128               MOVW    R5:R4, R17:R16
    322              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000012   ....               RCALL   ?Subroutine154
    323              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ch ;               // channel
   \                     ??CrossCallReturnLabel_203:
   \   00000014   ....               RCALL   ?Subroutine28
    324              UART[ch].pTxBuffer[UART[ch].TxFirst++] = DEVICE_IO + UnitID ;   // Product ID
   \                     ??CrossCallReturnLabel_185:
   \   00000016   9120....           LDS     R18, UnitID
   \   0000001A   5F20               SUBI    R18, 240
   \   0000001C   ....               RCALL   ?Subroutine28
    325              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MyAddress();           // unit adddress
   \                     ??CrossCallReturnLabel_186:
   \   0000001E   01C8               MOVW    R25:R24, R17:R16
   \   00000020   5F0F               SUBI    R16, 255
   \   00000022   ....               RCALL   ?Subroutine128
   \                     ??CrossCallReturnLabel_324:
   \   00000024   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_50:
   \   00000026   ....               RCALL   ?Subroutine20
    326              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROG_VERSION ;       // software version */
   \                     ??CrossCallReturnLabel_162:
   \   00000028   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_40:
   \   0000002A   E206               LDI     R16, 38
   \   0000002C   ....               RCALL   ?Subroutine14
    327              UART[ch].pTxBuffer[UART[ch].TxFirst++] = COMP_VERSION;        // cpmpability version
    328              UART[ch].pTxBuffer[UART[ch].TxFirst++] = STORE_VERSION;        // cpmpability version
   \                     ??CrossCallReturnLabel_322:
   \   0000002E   ....               RCALL   ??Subroutine169_0
   \                     ??CrossCallReturnLabel_364:
   \   00000030   E002               LDI     R16, 2
   \   00000032   8300               ST      Z, R16
   \   00000034   ....               RCALL   ??Subroutine161_0
    329              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RXSIZE_UART & 0xff);         // rx buffer size
   \                     ??CrossCallReturnLabel_335:
   \   00000036   ....               RCALL   ??Subroutine169_0
   \                     ??CrossCallReturnLabel_365:
   \   00000038   E906               LDI     R16, 150
   \   0000003A   8300               ST      Z, R16
   \   0000003C   ....               RCALL   ?Subroutine15
    330              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (( RXSIZE_UART >> 8) & 0xff); // rx buffer size
    331              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TXSIZE_UART & 0xff);         // tx buffer size
   \                     ??CrossCallReturnLabel_341:
   \   0000003E   E103               LDI     R16, 19
   \   00000040   ....               RCALL   ?Subroutine14
    332              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((TXSIZE_UART >> 8) & 0xff);  // tx buffer size
    333              UART[ch].pTxBuffer[UART[ch].TxFirst++] = RestartStatus ;                  // restart flag
   \                     ??CrossCallReturnLabel_321:
   \   00000042   9120....           LDS     R18, RestartStatus
   \   00000046   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_347:
   \   00000048   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_120:
   \   0000004A   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_160:
   \   0000004C   ....               RCALL   ??Subroutine170_0
    334              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROGTYPE_APP ;                // Application program
    335          
    336              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??CrossCallReturnLabel_320:
   \   0000004E   1904               SUB     R16, R4
   \   00000050   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_220:
   \   00000052   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_233:
   \   00000054   ....               RCALL   ?Subroutine90
    337              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \                     ??CrossCallReturnLabel_240:
   \   00000056   1984               SUB     R24, R4
   \   00000058   0995               SBC     R25, R5
   \   0000005A   ....               RCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_231:
   \   0000005C   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_234:
   \   0000005E   8391               STD     Z+1, R25
    338          
    339              RestartStatus = 0 ;                                                       // set reset stat to 0 = read
   \   00000060   E000               LDI     R16, 0
   \   00000062   9300....           STS     RestartStatus, R16
    340          }
   \   00000066   ....               RJMP    ?Subroutine147

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine113:
   \   00000000   0DE4               ADD     R30, R4
   \   00000002   1DF5               ADC     R31, R5
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine87:
   \   00000000   ....               RCALL   ?Subroutine116
   \                     ??CrossCallReturnLabel_338:
   \   00000002   91ED               LD      R30, X+
   \   00000004   91FD               LD      R31, X+
   \   00000006   910D               LD      R16, X+
   \   00000008   ....               RJMP    ?Subroutine132

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_215:
   \   00000002   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_303:
   \   00000004   ....               RJMP    ?Subroutine142

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_343:
   \   00000002   E000               LDI     R16, 0
   \   00000004   8300               ST      Z, R16
   \   00000006                      REQUIRE ?Subroutine85
   \   00000006                      ;               // Fall through to label ?Subroutine85

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   8300               ST      Z, R16
   \   00000002                      REQUIRE ??Subroutine170_0
   \   00000002                      ;               // Fall through to label ??Subroutine170_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine170_0:
   \   00000000   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_340:
   \   00000002   E001               LDI     R16, 1
   \   00000004   ....               RJMP    ?Subroutine116
    341          
    342          /*************************************************************************
    343          *
    344          * Build EEPROM data package
    345          *
    346          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine44:
   \   00000000   8120               LD      R18, Z
   \   00000002   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_97:
   \   00000004                      REQUIRE ?Subroutine150
   \   00000004                      ;               // Fall through to label ?Subroutine150

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine96:
   \   00000000   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_175:
   \   00000002   ....               RJMP    ?Subroutine121

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine155:
   \   00000000   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_204:
   \   00000002   ....               RJMP    ??Subroutine163_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine165_0:
   \   00000000   ....               RCALL   ?Subroutine128
   \                     ??CrossCallReturnLabel_326:
   \   00000002   8502               LDD     R16, Z+10
   \   00000004   8513               LDD     R17, Z+11
   \   00000006   ....               RJMP    ?Subroutine130

   \                                 In  segment CODE, align 2, keep-with-next
    347          void BuildEEPROMData(char ch, short pointer) {   
   \                     BuildEEPROMData:
   \   00000000   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_17:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
    348          
    349              short ntna ;
    350              char channel;
    351              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   00000002   ....               RCALL   ?Subroutine2
    352          
    353              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA & 0xff;     
   \                     ??CrossCallReturnLabel_1:
   \   00000004   E309               LDI     R16, 57
   \   00000006   ....               RCALL   ?Subroutine29
    354              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA >> 8;     
    355              ntna = UART[ch].TxFirst ;                                    /* remember index */
    356              UART[ch].TxFirst += 2 ;                                      // two byte length
    357              
    358              channel = UART[ch].pRxBuffer[pointer];
   \                     ??CrossCallReturnLabel_26:
   \   00000008   ....               RCALL   ?Subroutine44
    359              UART[ch].pTxBuffer[UART[ch].TxFirst++] = channel; //channel 
    360          
    361              ReadEEPROMBuffer( (channel * sizeof(float)* 2) , sizeof(float), (char*)&UART[ch].pTxBuffer[UART[ch].TxFirst] );
   \                     ??CrossCallReturnLabel_183:
   \   0000000A   E008               LDI     R16, 8
   \   0000000C   9F20               MUL     R18, R16
   \   0000000E   01C0               MOVW    R25:R24, R1:R0
   \   00000010   8140               LD      R20, Z
   \   00000012   8151               LDD     R21, Z+1
   \   00000014   8102               LDD     R16, Z+2
   \   00000016   0F40               ADD     R20, R16
   \   00000018   1F51               ADC     R21, R17
   \   0000001A   E024               LDI     R18, 4
   \   0000001C   0180               MOVW    R17:R16, R1:R0
   \   0000001E   ....               RCALL   ?Subroutine45
    362              UART[ch].TxFirst += sizeof(float) ;
    363              ReadEEPROMBuffer( (channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char*)&UART[ch].pTxBuffer[UART[ch].TxFirst] );
   \                     ??CrossCallReturnLabel_311:
   \   00000020   8140               LD      R20, Z
   \   00000022   8151               LDD     R21, Z+1
   \   00000024   0F40               ADD     R20, R16
   \   00000026   1F51               ADC     R21, R17
   \   00000028   E024               LDI     R18, 4
   \   0000002A   9604               ADIW    R25:R24, 4
   \   0000002C   018C               MOVW    R17:R16, R25:R24
   \   0000002E   ....               RCALL   ?Subroutine45
    364              UART[ch].TxFirst += sizeof(float) ;
    365          
    366              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??CrossCallReturnLabel_310:
   \   00000030   ....               RJMP    ?Subroutine155
    367              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
    368          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine45:
   \   00000000   ........           CALL    ReadEEPROMBuffer
   \   00000004                      REQUIRE ??Subroutine168_0
   \   00000004                      ;               // Fall through to label ??Subroutine168_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine168_0:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_319:
   \   00000004   5F0C               SUBI    R16, 252
   \   00000006   ....               RJMP    ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   ....               RCALL   ?Subroutine116
   \                     ??CrossCallReturnLabel_337:
   \   00000002   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_357:
   \   00000004   ....               RCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_339:
   \   00000006   0128               MOVW    R5:R4, R17:R16
   \   00000008   5F0E               SUBI    R16, 254
   \   0000000A   ....               RJMP    ??Subroutine165_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   1904               SUB     R16, R4
   \   00000002   5002               SUBI    R16, 2
   \   00000004   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_221:
   \   00000006   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_235:
   \   00000008   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_241:
   \   0000000A   1984               SUB     R24, R4
   \   0000000C   0995               SBC     R25, R5
   \   0000000E   9702               SBIW    R25:R24, 2
   \   00000010   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_232:
   \   00000012   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_236:
   \   00000014   8391               STD     Z+1, R25
   \   00000016   E0E6               LDI     R30, 6
   \   00000018   9508               RET
    369          
    370          
    371          /*************************************************************************
    372          *
    373          * Build datablock for Internal AD
    374          *
    375          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   9702               SBIW    R25:R24, 2
   \   00000002                      REQUIRE ?Subroutine117
   \   00000002                      ;               // Fall through to label ?Subroutine117

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine138:
   \   00000000   E080               LDI     R24, 0
   \   00000002   E090               LDI     R25, 0
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine153:
   \   00000000   ....               RCALL   ?Subroutine72
   \                     ??CrossCallReturnLabel_195:
   \   00000002   ....               RJMP    ??Subroutine156_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine72:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002                      REQUIRE ?Subroutine139
   \   00000002                      ;               // Fall through to label ?Subroutine139

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine139:
   \   00000000   8391               STD     Z+1, R25
   \   00000002   E0E4               LDI     R30, 4
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine129:
   \   00000000   8162               LDD     R22, Z+2
   \   00000002   8173               LDD     R23, Z+3
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine119:
   \   00000000   8122               LDD     R18, Z+2
   \   00000002   8133               LDD     R19, Z+3
   \   00000004   5F2F               SUBI    R18, 255
   \   00000006                      REQUIRE ?Subroutine133
   \   00000006                      ;               // Fall through to label ?Subroutine133

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine133:
   \   00000000   4F3F               SBCI    R19, 255
   \   00000002   8322               STD     Z+2, R18
   \   00000004   8333               STD     Z+3, R19
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    376          void BuildADInt(char ch, short pointer) {
   \                     BuildADInt:
   \   00000000   ....               RCALL   ?Subroutine102
    377          
    378              short ntna, i ;
    379              UART[ch].RxSendReply = true ;                               // flag for answering 
   \                     ??CrossCallReturnLabel_105:
   \   00000002   ....               RCALL   ?Subroutine126
   \                     ??CrossCallReturnLabel_262:
   \   00000004   0198               MOVW    R19:R18, R17:R16
   \   00000006   ....               LDI     R16, LOW(UART)
   \   00000008   ....               LDI     R17, (UART) >> 8
   \   0000000A   ....               RCALL   ??Subroutine171_0
   \                     ??CrossCallReturnLabel_367:
   \   0000000C   01F8               MOVW    R31:R30, R17:R16
   \   0000000E   E021               LDI     R18, 1
   \   00000010   8F21               STD     Z+25, R18
    380          
    381              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA & 0xff;     
   \   00000012   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_58:
   \   00000014   E423               LDI     R18, 67
   \   00000016   ....               RCALL   ?Subroutine61
    382              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA >> 8;     
   \                     ??CrossCallReturnLabel_56:
   \   00000018   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_59:
   \   0000001A   E024               LDI     R18, 4
   \   0000001C   ....               RCALL   ?Subroutine61
    383              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \                     ??CrossCallReturnLabel_57:
   \   0000001E   01A9               MOVW    R21:R20, R19:R18
    384              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000020   ....               RCALL   ?Subroutine112
    385          
    386              for (i = 0; i<3; i++) {
   \                     ??CrossCallReturnLabel_139:
   \   00000022   ....               RCALL   ?Subroutine138
   \                     ??CrossCallReturnLabel_288:
   \   00000024   E023               LDI     R18, 3
    387                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] ;
   \                     ??BuildADInt_0:
   \   00000026   01BC               MOVW    R23:R22, R25:R24
   \   00000028   0F66               LSL     R22
   \   0000002A   1F77               ROL     R23
   \   0000002C   ....               LDI     R30, LOW(ADInt)
   \   0000002E   ....               LDI     R31, (ADInt) >> 8
   \   00000030   0FE6               ADD     R30, R22
   \   00000032   1FF7               ADC     R31, R23
   \   00000034   8130               LD      R19, Z
   \   00000036   01D8               MOVW    R27:R26, R17:R16
   \   00000038   916D               LD      R22, X+
   \   0000003A   917C               LD      R23, X
   \   0000003C   01D8               MOVW    R27:R26, R17:R16
   \   0000003E   9612               ADIW    R27:R26, 2
   \   00000040   900D               LD      R0, X+
   \   00000042   901C               LD      R1, X
   \   00000044   0D60               ADD     R22, R0
   \   00000046   1D71               ADC     R23, R1
   \   00000048   01DB               MOVW    R27:R26, R23:R22
   \   0000004A   933C               ST      X, R19
   \   0000004C   01D8               MOVW    R27:R26, R17:R16
   \   0000004E   9612               ADIW    R27:R26, 2
   \   00000050   916D               LD      R22, X+
   \   00000052   917C               LD      R23, X
   \   00000054   5F6F               SUBI    R22, 255
   \   00000056   4F7F               SBCI    R23, 255
   \   00000058   937C               ST      X, R23
   \   0000005A   936E               ST      -X, R22
    388                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] >> 8 ;   // ADresult
   \   0000005C   8131               LDD     R19, Z+1
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   8160               LD      R22, Z
   \   00000062   8171               LDD     R23, Z+1
   \   00000064   8002               LDD     R0, Z+2
   \   00000066   8013               LDD     R1, Z+3
   \   00000068   0D60               ADD     R22, R0
   \   0000006A   1D71               ADC     R23, R1
   \   0000006C   01FB               MOVW    R31:R30, R23:R22
   \   0000006E   8330               ST      Z, R19
   \   00000070   01F8               MOVW    R31:R30, R17:R16
   \   00000072   ....               RCALL   ?Subroutine129
    389              }
   \                     ??CrossCallReturnLabel_134:
   \   00000074   5F6F               SUBI    R22, 255
   \   00000076   4F7F               SBCI    R23, 255
   \   00000078   8362               STD     Z+2, R22
   \   0000007A   8373               STD     Z+3, R23
   \   0000007C   9601               ADIW    R25:R24, 1
   \   0000007E   952A               DEC     R18
   \   00000080   F691               BRNE    ??BuildADInt_0
    390          
    391              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000082   8162               LDD     R22, Z+2
   \   00000084   1B64               SUB     R22, R20
   \   00000086   5062               SUBI    R22, 2
   \   00000088   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_191:
   \   0000008A   0F24               ADD     R18, R20
   \   0000008C   1F35               ADC     R19, R21
   \   0000008E   01F9               MOVW    R31:R30, R19:R18
   \   00000090   8360               ST      Z, R22
    392              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000092   01F8               MOVW    R31:R30, R17:R16
   \   00000094   ....               RCALL   ?Subroutine137
   \                     ??CrossCallReturnLabel_244:
   \   00000096   1B84               SUB     R24, R20
   \   00000098   0B95               SBC     R25, R21
   \   0000009A   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_350:
   \   0000009C   0F04               ADD     R16, R20
   \   0000009E   1F15               ADC     R17, R21
   \   000000A0   ....               RJMP    ?Subroutine153
    393          
    394          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine112:
   \   00000000   5F2E               SUBI    R18, 254
   \   00000002   ....               RJMP    ?Subroutine133

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine108:
   \   00000000   8120               LD      R18, Z
   \   00000002   8131               LDD     R19, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine63:
   \   00000000   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_192:
   \   00000002   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_124:
   \   00000004   0F24               ADD     R18, R20
   \   00000006   1F35               ADC     R19, R21
   \   00000008   01F9               MOVW    R31:R30, R19:R18
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine61:
   \   00000000   8320               ST      Z, R18
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   ....               RJMP    ?Subroutine119

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine171_0:
   \   00000000   0F02               ADD     R16, R18
   \   00000002   1F13               ADC     R17, R19
   \   00000004   9508               RET
    395          
    396          
    397          /*************************************************************************
    398          *
    399          * Build datablock for eeprom on ADcard
    400          *
    401          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine159_0:
   \   00000000   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_282:
   \   00000002   E001               LDI     R16, 1
   \   00000004   8F01               STD     Z+25, R16
   \   00000006   ....               RCALL   ?Subroutine125
   \                     ??CrossCallReturnLabel_257:
   \   00000008   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_318:
   \   0000000A                      REQUIRE ?Subroutine136
   \   0000000A                      ;               // Fall through to label ?Subroutine136

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine109:
   \   00000000   930C               ST      X, R16
   \   00000002                      REQUIRE ?Subroutine137
   \   00000002                      ;               // Fall through to label ?Subroutine137

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine51:
   \   00000000   5F0E               SUBI    R16, 254
   \   00000002                      REQUIRE ?Subroutine138
   \   00000002                      REQUIRE ??Subroutine160_0
   \   00000002                      ;               // Fall through to label ??Subroutine160_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine160_0:
   \   00000000   ....               RCALL   ?Subroutine128
   \                     ??CrossCallReturnLabel_325:
   \   00000002                      REQUIRE ?Subroutine138
   \   00000002                      ;               // Fall through to label ?Subroutine138

   \                                 In  segment CODE, align 2, keep-with-next
    402          void BuildADEpromdata(char ch, char portch) {
   \                     BuildADEpromdata:
   \   00000000   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_103:
   \   00000002   2F21               MOV     R18, R17
    403          
    404              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   00000004   ....               RCALL   ??Subroutine159_0
    405          
    406              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF & 0xff;     
   \                     ??CrossCallReturnLabel_246:
   \   00000006   E809               LDI     R16, 137
   \   00000008   ....               RCALL   ?Subroutine91
    407              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF >> 8;     
    408              short ntna = UART[ch].TxFirst ;                                    // remember index
   \                     ??CrossCallReturnLabel_94:
   \   0000000A   01B8               MOVW    R23:R22, R17:R16
    409              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000000C   ....               RCALL   ?Subroutine51
    410          
    411              for (short i = 0; i < 44; i++) {
   \                     ??CrossCallReturnLabel_284:
   \   0000000E   E23C               LDI     R19, 44
    412                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FromTargetBuffer[portch][i] ;
   \                     ??BuildADEpromdata_0:
   \   00000010   ....               LDI     R26, LOW((TData + 1428))
   \   00000012   ....               LDI     R27, HIGH((TData + 1428))
   \   00000014   0FA8               ADD     R26, R24
   \   00000016   1FB9               ADC     R27, R25
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E342               LDI     R20, 50
   \   0000001E   ....               RCALL   ?Subroutine131
    413              }
   \                     ??CrossCallReturnLabel_259:
   \   00000020   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_266:
   \   00000022   910C               LD      R16, X
   \   00000024   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_98:
   \   00000026   930C               ST      X, R16
   \   00000028   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_314:
   \   0000002A   5F0F               SUBI    R16, 255
   \   0000002C   ....               RCALL   ?Subroutine128
   \                     ??CrossCallReturnLabel_323:
   \   0000002E   9601               ADIW    R25:R24, 1
   \   00000030   953A               DEC     R19
   \   00000032   F771               BRNE    ??BuildADEpromdata_0
    414              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   00000034   8102               LDD     R16, Z+2
   \   00000036   1B06               SUB     R16, R22
   \   00000038   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_255:
   \   0000003A   0FA6               ADD     R26, R22
   \   0000003C   1FB7               ADC     R27, R23
   \   0000003E   ....               RCALL   ?Subroutine109
    415              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \                     ??CrossCallReturnLabel_243:
   \   00000040   1B86               SUB     R24, R22
   \   00000042   0B97               SBC     R25, R23
   \   00000044   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_349:
   \   00000046   0F06               ADD     R16, R22
   \   00000048   1F17               ADC     R17, R23
   \   0000004A                      REQUIRE ?Subroutine153
   \   0000004A                      ;               // Fall through to label ?Subroutine153
    416          
    417          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine99:
   \   00000000   ....               RCALL   ?Subroutine125
   \                     ??CrossCallReturnLabel_253:
   \   00000002   ....               RCALL   ?Subroutine122
   \                     ??CrossCallReturnLabel_125:
   \   00000004   0FA4               ADD     R26, R20
   \   00000006   1FB5               ADC     R27, R21
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine91:
   \   00000000   930C               ST      X, R16
   \   00000002   ....               RCALL   ??Subroutine162_0
   \                     ??CrossCallReturnLabel_327:
   \   00000004   ....               RCALL   ?Subroutine125
   \                     ??CrossCallReturnLabel_251:
   \   00000006   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_267:
   \   00000008   E004               LDI     R16, 4
   \   0000000A   930C               ST      X, R16
   \   0000000C   ....               RJMP    ??Subroutine162_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine82:
   \   00000000   ....               RCALL   ?Subroutine126
   \                     ??CrossCallReturnLabel_265:
   \   00000002   ....               LDI     R30, LOW(UART)
   \   00000004   ....               LDI     R31, (UART) >> 8
   \   00000006   ....               RJMP    ??Subroutine158_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine104:
   \   00000000   5002               SUBI    R16, 2
   \   00000002                      REQUIRE ?Subroutine125
   \   00000002                      ;               // Fall through to label ?Subroutine125

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine125:
   \   00000000   81A0               LD      R26, Z
   \   00000002   81B1               LDD     R27, Z+1
   \   00000004   9508               RET
    418          
    419          /*************************************************************************
    420          *
    421          * Build datablock for WHData on ADcard
    422          *
    423          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine157_0:
   \   00000000   0D00               ADD     R16, R0
   \   00000002   1D11               ADC     R17, R1
   \   00000004   ....               RJMP    ?Subroutine141

   \                                 In  segment CODE, align 2, keep-with-next
    424          void BuildWHdata(char ch, short pointer) {
   \                     BuildWHdata:
   \   00000000   ........           CALL    ?PROLOGUE9_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004   0129               MOVW    R5:R4, R19:R18
    425          
    426              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000006   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_167:
   \   00000008   E001               LDI     R16, 1
   \   0000000A   8F01               STD     Z+25, R16
    427          
    428              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF & 0xff;
   \   0000000C   ....               RCALL   ??Subroutine169_0
   \                     ??CrossCallReturnLabel_363:
   \   0000000E   E90C               LDI     R16, 156
   \   00000010   8300               ST      Z, R16
   \   00000012   ....               RCALL   ?Subroutine30
    429              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF >> 8;
    430              short ntna = UART[ch].TxFirst;                          // remember index
   \                     ??CrossCallReturnLabel_27:
   \   00000014   0138               MOVW    R7:R6, R17:R16
    431              UART[ch].TxFirst += 2;                                  // two byte length
   \   00000016   ....               RCALL   ?Subroutine51
    432              for (short i = 0; i < 4; i++) {
   \                     ??CrossCallReturnLabel_283:
   \   00000018   E004               LDI     R16, 4
   \   0000001A   2E80               MOV     R8, R16
    433                  OS_EnterRegion();
   \                     ??BuildWHdata_0:
   \   0000001C   ....               RCALL   ?Subroutine75
    434                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] & 0xff; // WashTrackcnt
   \                     ??CrossCallReturnLabel_163:
   \   0000001E   019C               MOVW    R19:R18, R25:R24
   \   00000020   0F22               LSL     R18
   \   00000022   1F33               ROL     R19
   \   00000024   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_369:
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   8542               LDD     R20, Z+10
   \   0000002A   8553               LDD     R21, Z+11
   \   0000002C   0D44               ADD     R20, R4
   \   0000002E   1D55               ADC     R21, R5
   \   00000030   01FA               MOVW    R31:R30, R21:R20
   \   00000032   8150               LD      R21, Z
   \   00000034   E048               LDI     R20, 8
   \   00000036   9F54               MUL     R21, R20
   \   00000038   ....               RCALL   ??Subroutine157_0
   \                     ??CrossCallReturnLabel_358:
   \   0000003A   8140               LD      R20, Z
   \   0000003C   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_170:
   \   0000003E   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_127:
   \   00000040   ....               RCALL   ??Subroutine161_0
    435                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] >> 8) & 0xff; // WashTrackcnt
   \                     ??CrossCallReturnLabel_331:
   \   00000042   ....               RCALL   ?Subroutine62
    436                  OS_LeaveRegion();
    437              }
   \                     ??CrossCallReturnLabel_370:
   \   00000044   8522               LDD     R18, Z+10
   \   00000046   8533               LDD     R19, Z+11
   \   00000048   0D24               ADD     R18, R4
   \   0000004A   1D35               ADC     R19, R5
   \   0000004C   01F9               MOVW    R31:R30, R19:R18
   \   0000004E   8120               LD      R18, Z
   \   00000050   E038               LDI     R19, 8
   \   00000052   9F23               MUL     R18, R19
   \   00000054   ....               RCALL   ??Subroutine157_0
   \                     ??CrossCallReturnLabel_359:
   \   00000056   ....               RCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_38:
   \   00000058   9601               ADIW    R25:R24, 1
   \   0000005A   948A               DEC     R8
   \   0000005C   F6F9               BRNE    ??BuildWHdata_0
    438              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.LevelSwitch[UART[ch].pRxBuffer[pointer]];
   \   0000005E   01FD               MOVW    R31:R30, R27:R26
   \   00000060   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_114:
   \   00000062   0D04               ADD     R16, R4
   \   00000064   1D15               ADC     R17, R5
   \   00000066   01F8               MOVW    R31:R30, R17:R16
   \   00000068   81E0               LD      R30, Z
   \   0000006A   E0F0               LDI     R31, 0
   \   0000006C   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   00000070   ....               RCALL   ?Subroutine44
    439              OS_EnterRegion();
   \                     ??CrossCallReturnLabel_188:
   \   00000072   ....               RCALL   ?Subroutine75
    440              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] & 0xff; // WashTrackcnt
   \                     ??CrossCallReturnLabel_164:
   \   00000074   01FD               MOVW    R31:R30, R27:R26
   \   00000076   ....               RCALL   ?Subroutine37
   \                     ??CrossCallReturnLabel_31:
   \   00000078   ....               RCALL   ?Subroutine44
    441              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] >> 8) & 0xff; // WashTrackcnt
   \                     ??CrossCallReturnLabel_189:
   \   0000007A   ....               RCALL   ?Subroutine37
   \                     ??CrossCallReturnLabel_32:
   \   0000007C   ....               RCALL   ?Subroutine43
    442              OS_LeaveRegion();
    443              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??CrossCallReturnLabel_37:
   \   0000007E   01FD               MOVW    R31:R30, R27:R26
   \   00000080   8102               LDD     R16, Z+2
   \   00000082   1906               SUB     R16, R6
   \   00000084   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_219:
   \   00000086   0DE6               ADD     R30, R6
   \   00000088   1DF7               ADC     R31, R7
   \   0000008A   ....               RCALL   ?Subroutine90
    444              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \                     ??CrossCallReturnLabel_239:
   \   0000008C   1986               SUB     R24, R6
   \   0000008E   0997               SBC     R25, R7
   \   00000090   ....               RCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_230:
   \   00000092   0DE6               ADD     R30, R6
   \   00000094   1DF7               ADC     R31, R7
   \   00000096   8391               STD     Z+1, R25
    445          }
   \   00000098   E0E9               LDI     R30, 9
   \   0000009A   ........           JMP     ?EPILOGUE_B9_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine75:
   \   00000000   ....               LDI     R30, LOW(OS_Counters)
   \   00000002   ....               LDI     R31, (OS_Counters) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   9503               INC     R16
   \   00000008                      REQUIRE ?Subroutine142
   \   00000008                      ;               // Fall through to label ?Subroutine142

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine124:
   \   00000000   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_138:
   \   00000002   0F06               ADD     R16, R22
   \   00000004   1F17               ADC     R17, R23
   \   00000006   01F8               MOVW    R31:R30, R17:R16
   \   00000008   8340               ST      Z, R20
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine43:
   \   00000000   8121               LDD     R18, Z+1
   \   00000002   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_96:
   \   00000004   ....               RCALL   ?Subroutine150
   \                     ??CrossCallReturnLabel_187:
   \   00000006   ........           JMP     OS_LeaveRegion

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine37:
   \   00000000   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_117:
   \   00000002   0D04               ADD     R16, R4
   \   00000004   1D15               ADC     R17, R5
   \   00000006   01F8               MOVW    R31:R30, R17:R16
   \   00000008   8100               LD      R16, Z
   \   0000000A   E012               LDI     R17, 2
   \   0000000C   9F01               MUL     R16, R17
   \   0000000E   01F0               MOVW    R31:R30, R1:R0
   \   00000010   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   00000012   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   00000014   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine62:
   \   00000000   ....               LDI     R16, LOW((TData + 1179))
   \   00000002   ....               LDI     R17, HIGH((TData + 1179))
   \   00000004                      REQUIRE ??Subroutine171_0
   \   00000004                      ;               // Fall through to label ??Subroutine171_0
    446          
    447          
    448          
    449          /*************************************************************************
    450          *
    451          * Build setup dat package for AN-ZB485
    452          *
    453          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine152:
   \   00000000   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_194:
   \   00000002   ....               RJMP    ??Subroutine156_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_107:
   \   00000002                      REQUIRE ??Subroutine159_0
   \   00000002                      ;               // Fall through to label ??Subroutine159_0

   \                                 In  segment CODE, align 2, keep-with-next
    454          void BuildRS4Setup(char ch, short pointer) {   
   \                     BuildRS4Setup:
   \   00000000   ....               RCALL   ?Subroutine0
    455          
    456              short ntna ;
    457              UART[ch].RxSendReply = true ;                               // flag for answering 
    458          
    459              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP & 0xff;     
   \                     ??CrossCallReturnLabel_248:
   \   00000002   E507               LDI     R16, 87
   \   00000004   ....               RCALL   ?Subroutine40
    460              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP >> 8;     
    461              ntna = UART[ch].TxFirst ;                                    /* remember index */
    462              UART[ch].TxFirst += 2 ;                                      // two byte length
    463          
    464              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.PortUsed;  // send the setup
    465              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[0];  // send the sensor type
    466              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[1];  // send the sensor type
   \                     ??CrossCallReturnLabel_35:
   \   00000006   9120....           LDS     R18, (TData + 2)
   \   0000000A   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_66:
   \   0000000C   1FB3               ADC     R27, R19
   \   0000000E   932C               ST      X, R18
   \   00000010   ....               RCALL   ?Subroutine119
    467          
    468              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??CrossCallReturnLabel_141:
   \   00000012   ....               RJMP    ?Subroutine152
    469              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
    470          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine73:
   \   00000000   ....               RCALL   ?Subroutine125
   \                     ??CrossCallReturnLabel_250:
   \   00000002   8142               LDD     R20, Z+2
   \   00000004   0FA4               ADD     R26, R20
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine41:
   \   00000000   1B20               SUB     R18, R16
   \   00000002   5022               SUBI    R18, 2
   \   00000004   ....               RCALL   ?Subroutine125
   \                     ??CrossCallReturnLabel_256:
   \   00000006   ....               RCALL   ?Subroutine136
   \                     ??CrossCallReturnLabel_272:
   \   00000008   932C               ST      X, R18
   \   0000000A   ....               RCALL   ?Subroutine137
   \                     ??CrossCallReturnLabel_245:
   \   0000000C   1B80               SUB     R24, R16
   \   0000000E   0B91               SBC     R25, R17
   \   00000010   9702               SBIW    R25:R24, 2
   \   00000012   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_193:
   \   00000014   0F20               ADD     R18, R16
   \   00000016   1F31               ADC     R19, R17
   \   00000018   01F9               MOVW    R31:R30, R19:R18
   \   0000001A   ....               RJMP    ?Subroutine139

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_93:
   \   00000002   0198               MOVW    R19:R18, R17:R16
   \   00000004   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_140:
   \   00000006   9120....           LDS     R18, TData
   \   0000000A   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_143:
   \   0000000C   9120....           LDS     R18, (TData + 1)
   \   00000010                      REQUIRE ?Subroutine97
   \   00000010                      ;               // Fall through to label ?Subroutine97

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine97:
   \   00000000   ....               RCALL   ?Subroutine125
   \                     ??CrossCallReturnLabel_252:
   \   00000002   8142               LDD     R20, Z+2
   \   00000004   0FA4               ADD     R26, R20
   \   00000006   1FB3               ADC     R27, R19
   \   00000008   932C               ST      X, R18
   \   0000000A                      REQUIRE ?Subroutine119
   \   0000000A                      ;               // Fall through to label ?Subroutine119
    471          
    472          /*************************************************************************
    473          *
    474          * Build datablock of measured data for ADcard
    475          *
    476          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine71:
   \   00000000   8002               LDD     R0, Z+2
   \   00000002   8013               LDD     R1, Z+3
   \   00000004                      REQUIRE ??Subroutine157_0
   \   00000004                      ;               // Fall through to label ??Subroutine157_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine135:
   \   00000000   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000002   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    477          void BuildMData485(char ch, short pointer) {
   \                     BuildMData485:
   \   00000000   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_16:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
    478          
    479              short ntna, i ;
    480              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   00000002   ....               RCALL   ?Subroutine2
    481          
    482              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA & 0xff;     
   \                     ??CrossCallReturnLabel_2:
   \   00000004   E705               LDI     R16, 117
   \   00000006   ....               RCALL   ?Subroutine29
    483              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA >> 8;     
    484              ntna = UART[ch].TxFirst ;                                    /* remember index */
    485              UART[ch].TxFirst += 2 ;                                      // two byte length
    486          
    487              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer] ;
   \                     ??CrossCallReturnLabel_25:
   \   00000008   8140               LD      R20, Z
   \   0000000A   ....               RCALL   ?Subroutine35
    488              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.IOUnitStatus[UART[ch].pRxBuffer[pointer]] | (RestartStatus <<4); // IOUnit status +  restart status
   \                     ??CrossCallReturnLabel_148:
   \   0000000C   8143               LDD     R20, Z+3
   \   0000000E   9100....           LDS     R16, RestartStatus
   \   00000012   9502               SWAP    R16
   \   00000014   7F00               ANDI    R16, 0xF0
   \   00000016   2B40               OR      R20, R16
   \   00000018   ....               RCALL   ?Subroutine31
    489              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] & 0xff; // Failcnt error
   \                     ??CrossCallReturnLabel_144:
   \   0000001A   8543               LDD     R20, Z+11
   \   0000001C   ....               RCALL   ?Subroutine31
    490              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] >> 8) & 0xff; // Failcnt error
   \                     ??CrossCallReturnLabel_145:
   \   0000001E   8544               LDD     R20, Z+12
   \   00000020   ....               RCALL   ?Subroutine31
    491              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] & 0xff; // Failcnt total
   \                     ??CrossCallReturnLabel_146:
   \   00000022   8545               LDD     R20, Z+13
   \   00000024   ....               RCALL   ?Subroutine31
    492              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] >> 8) & 0xff; // Failcnt total
   \                     ??CrossCallReturnLabel_147:
   \   00000026   8546               LDD     R20, Z+14
   \   00000028   ....               RCALL   ?Subroutine35
    493              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusSWVer[UART[ch].pRxBuffer[pointer]] ; // Target status byte 1
   \                     ??CrossCallReturnLabel_149:
   \   0000002A   A543               LDD     R20, Z+43
   \   0000002C   ....               RCALL   ?Subroutine35
    494              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]] ; // Target status byte 2
   \                     ??CrossCallReturnLabel_150:
   \   0000002E   A943               LDD     R20, Z+51
   \   00000030   ....               RCALL   ?Subroutine35
    495          
    496              TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]] &= ~0x80;                                  //reset restart flag for adcard
   \                     ??CrossCallReturnLabel_151:
   \   00000032   A903               LDD     R16, Z+51
   \   00000034   770F               ANDI    R16, 0x7F
   \   00000036   AB03               STD     Z+51, R16
    497             
    498              for (i = 0; i < 14; i++) {
   \   00000038   ....               RCALL   ?Subroutine138
   \                     ??CrossCallReturnLabel_287:
   \   0000003A   E00E               LDI     R16, 14
   \   0000003C   2E20               MOV     R2, R16
    499                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup1[UART[ch].pRxBuffer[pointer]][i] ;
   \                     ??BuildMData485_0:
   \   0000003E   ....               LDI     R22, LOW((TData + 59))
   \   00000040   ....               LDI     R23, HIGH((TData + 59))
   \   00000042   0F68               ADD     R22, R24
   \   00000044   1F79               ADC     R23, R25
   \   00000046   01FD               MOVW    R31:R30, R27:R26
   \   00000048   ....               RCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_291:
   \   0000004A   E04E               LDI     R20, 14
   \   0000004C   E050               LDI     R21, 0
   \   0000004E   ....               RCALL   ?Subroutine11
    500                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup2[UART[ch].pRxBuffer[pointer]][i] ;
   \                     ??CrossCallReturnLabel_7:
   \   00000050   ....               LDI     R22, LOW((TData + 171))
   \   00000052   ....               LDI     R23, HIGH((TData + 171))
   \   00000054   0F68               ADD     R22, R24
   \   00000056   1F79               ADC     R23, R25
   \   00000058   ....               RCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_292:
   \   0000005A   E04E               LDI     R20, 14
   \   0000005C   ....               RCALL   ?Subroutine11
    501                  *((float*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float*)&TData.RS4.Result[UART[ch].pRxBuffer[pointer]][i]) ;   // ADresult
   \                     ??CrossCallReturnLabel_8:
   \   0000005E   ....               LDI     R22, LOW((TData + 731))
   \   00000060   ....               LDI     R23, HIGH((TData + 731))
   \   00000062   018C               MOVW    R17:R16, R25:R24
   \   00000064   0F00               LSL     R16
   \   00000066   1F11               ROL     R17
   \   00000068   0F00               LSL     R16
   \   0000006A   1F11               ROL     R17
   \   0000006C   0F60               ADD     R22, R16
   \   0000006E   1F71               ADC     R23, R17
   \   00000070   ....               RCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_293:
   \   00000072   E348               LDI     R20, 56
   \   00000074   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_109:
   \   00000076   ....               RCALL   ?Subroutine70
   \                     ??CrossCallReturnLabel_136:
   \   00000078   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_171:
   \   0000007A   ....               RCALL   ?Subroutine71
   \                     ??CrossCallReturnLabel_361:
   \   0000007C   ....               RCALL   ?Subroutine67
    502                  UART[ch].TxFirst += sizeof(float) ;
   \                     ??CrossCallReturnLabel_64:
   \   0000007E   ....               RCALL   ??Subroutine168_0
    503              }
   \                     ??CrossCallReturnLabel_312:
   \   00000080   9601               ADIW    R25:R24, 1
   \   00000082   942A               DEC     R2
   \   00000084   F6E1               BRNE    ??BuildMData485_0
    504          
    505              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000086   8102               LDD     R16, Z+2
   \   00000088                      REQUIRE ?Subroutine155
   \   00000088                      ;               // Fall through to label ?Subroutine155
    506              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
    507          
    508          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine70:
   \   00000000   8140               LD      R20, Z
   \   00000002   8151               LDD     R21, Z+1
   \   00000004                      REQUIRE ?Subroutine129
   \   00000004                      ;               // Fall through to label ?Subroutine129

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine67:
   \   00000000   8340               ST      Z, R20
   \   00000002   8351               STD     Z+1, R21
   \   00000004   8362               STD     Z+2, R22
   \   00000006   8373               STD     Z+3, R23
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_118:
   \   00000002   ....               RCALL   ?Subroutine130
   \                     ??CrossCallReturnLabel_362:
   \   00000004                      REQUIRE ??Subroutine164_0
   \   00000004                      ;               // Fall through to label ??Subroutine164_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine164_0:
   \   00000000   8100               LD      R16, Z
   \   00000002   E010               LDI     R17, 0
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_295:
   \   00000002   81E0               LD      R30, Z
   \   00000004   E0F0               LDI     R31, 0
   \   00000006   ....               RJMP    ?Subroutine135

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine92:
   \   00000000   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_174:
   \   00000002   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_129:
   \   00000004   01FD               MOVW    R31:R30, R27:R26
   \   00000006   8102               LDD     R16, Z+2
   \   00000008   8113               LDD     R17, Z+3
   \   0000000A   5F0F               SUBI    R16, 255
   \   0000000C                      REQUIRE ??Subroutine165_0
   \   0000000C                      ;               // Fall through to label ??Subroutine165_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_294:
   \   00000002   8100               LD      R16, Z
   \   00000004   E014               LDI     R17, 4
   \   00000006   9F01               MUL     R16, R17
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               RJMP    ?Subroutine135

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_110:
   \   00000002   8140               LD      R20, Z
   \   00000004   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_172:
   \   00000006   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_128:
   \   00000008   ....               RJMP    ??Subroutine161_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine103:
   \   00000000   ........           CALL    ?S_EC_MUL_L02
   \   00000004   0F60               ADD     R22, R16
   \   00000006   1F71               ADC     R23, R17
   \   00000008   01FB               MOVW    R31:R30, R23:R22
   \   0000000A   9508               RET
    509          
    510          /*************************************************************************
    511          *
    512          * Build datablock of raw and cal data for ADcard
    513          *
    514          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    515          void BuildRData485(char ch, short pointer) {
   \                     BuildRData485:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
    516          
    517              short ntna, i ;
    518              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   00000004   ....               RCALL   ??Subroutine159_0
    519          
    520              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA & 0xff;     
   \                     ??CrossCallReturnLabel_247:
   \   00000006   E706               LDI     R16, 118
   \   00000008   ....               RCALL   ?Subroutine91
    521              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA >> 8;     
    522              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \                     ??CrossCallReturnLabel_95:
   \   0000000A   0118               MOVW    R3:R2, R17:R16
    523              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000000C   ....               RCALL   ?Subroutine154
    524          
    525              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer] ;
   \                     ??CrossCallReturnLabel_201:
   \   0000000E   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_111:
   \   00000010   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_65:
   \   00000012   1FB1               ADC     R27, R17
   \   00000014   930C               ST      X, R16
   \   00000016   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_313:
   \   00000018   5F0F               SUBI    R16, 255
   \   0000001A   ....               RCALL   ??Subroutine160_0
    526              for (i = 0; i < 14; i++) {
   \                     ??CrossCallReturnLabel_285:
   \   0000001C   E00E               LDI     R16, 14
   \   0000001E   2E40               MOV     R4, R16
    527                  *((short*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short*)&TData.RS4.Raw[UART[ch].pRxBuffer[pointer]][i]) ;   // Raw data
   \                     ??BuildRData485_0:
   \   00000020   01BC               MOVW    R23:R22, R25:R24
   \   00000022   0F66               LSL     R22
   \   00000024   1F77               ROL     R23
   \   00000026   ....               LDI     R16, LOW((TData + 283))
   \   00000028   2E60               MOV     R6, R16
   \   0000002A   ....               LDI     R16, HIGH((TData + 283))
   \   0000002C   ....               RCALL   ?Subroutine4
    528                  UART[ch].TxFirst += sizeof(short) ;
    529                  *((short*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short*)&TData.RS4.Cal[UART[ch].pRxBuffer[pointer]][i]) ;   // Cal data
   \                     ??CrossCallReturnLabel_198:
   \   0000002E   ....               LDI     R16, LOW((TData + 507))
   \   00000030   2E60               MOV     R6, R16
   \   00000032   ....               LDI     R16, HIGH((TData + 507))
   \   00000034   ....               RCALL   ?Subroutine4
    530                  UART[ch].TxFirst += sizeof(short) ;
    531              }
   \                     ??CrossCallReturnLabel_197:
   \   00000036   9601               ADIW    R25:R24, 1
   \   00000038   944A               DEC     R4
   \   0000003A   F791               BRNE    ??BuildRData485_0
    532          
    533              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   0000003C   8102               LDD     R16, Z+2
   \   0000003E   1902               SUB     R16, R2
   \   00000040   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_254:
   \   00000042   0DA2               ADD     R26, R2
   \   00000044   1DB3               ADC     R27, R3
   \   00000046   ....               RCALL   ?Subroutine109
    534              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \                     ??CrossCallReturnLabel_242:
   \   00000048   1982               SUB     R24, R2
   \   0000004A   0993               SBC     R25, R3
   \   0000004C   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_348:
   \   0000004E   0D02               ADD     R16, R2
   \   00000050   1D13               ADC     R17, R3
   \   00000052   01F8               MOVW    R31:R30, R17:R16
   \   00000054   8391               STD     Z+1, R25
    535          
    536          }
   \   00000056                      REQUIRE ?Subroutine149
   \   00000056                      ;               // Fall through to label ?Subroutine149

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine149:
   \   00000000   E0E8               LDI     R30, 8
   \   00000002   ........           JMP     ?EPILOGUE_B8_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0E66               ADD     R6, R22
   \   00000002   1F07               ADC     R16, R23
   \   00000004   2E70               MOV     R7, R16
   \   00000006   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_112:
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14C               LDI     R20, 28
   \   0000000C   ....               RCALL   ?Subroutine131
   \                     ??CrossCallReturnLabel_260:
   \   0000000E   0E60               ADD     R6, R16
   \   00000010   1E71               ADC     R7, R17
   \   00000012   01D3               MOVW    R27:R26, R7:R6
   \   00000014   ....               RCALL   ?Subroutine127
   \                     ??CrossCallReturnLabel_132:
   \   00000016   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_99:
   \   00000018   930D               ST      X+, R16
   \   0000001A   931C               ST      X, R17
   \   0000001C   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_315:
   \   0000001E   ....               RJMP    ?Subroutine154

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine107:
   \   00000000   85A2               LDD     R26, Z+10
   \   00000002   85B3               LDD     R27, Z+11
   \   00000004   0FA2               ADD     R26, R18
   \   00000006   1FB3               ADC     R27, R19
   \   00000008   910C               LD      R16, X
   \   0000000A   9508               RET
    537          
    538          /*************************************************************************
    539          *
    540          * Build setup data package for AN-ZBANA
    541          *
    542          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    543          void BuildANASetup(char ch, short pointer) {   
   \                     BuildANASetup:
   \   00000000   ....               RCALL   ?Subroutine0
    544          
    545              short ntna ;
    546              UART[ch].RxSendReply = true ;                               // flag for answering 
    547          
    548              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP & 0xff;     
   \                     ??CrossCallReturnLabel_249:
   \   00000002   EB0B               LDI     R16, 187
   \   00000004   ....               RCALL   ?Subroutine40
    549              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP >> 8;     
    550              ntna = UART[ch].TxFirst ;                                    /* remember index */
    551              UART[ch].TxFirst += 2 ;                                      // two byte length
    552          
    553              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.PortUsed & 0xff;
    554              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.Ana.PortUsed >> 8) & 0xff;
    555          
    556              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??CrossCallReturnLabel_36:
   \   00000006                      REQUIRE ?Subroutine152
   \   00000006                      ;               // Fall through to label ?Subroutine152
    557              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
    558          }
    559          
    560          /*************************************************************************
    561          *
    562          * Build filter data package for AN-ZBANA
    563          *
    564          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine151:
   \   00000000   ....               RCALL   ?Subroutine139
   \                     ??CrossCallReturnLabel_196:
   \   00000002   ....               RJMP    ??Subroutine156_0

   \                                 In  segment CODE, align 2, keep-with-next
    565          void BuildANAFilter(char ch, short pointer) {   
   \                     BuildANAFilter:
   \   00000000   ....               RCALL   ?Subroutine1
    566          
    567              char port;
    568              short ntna ;
    569              UART[ch].RxSendReply = true ;                               // flag for answering 
    570          
    571              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER & 0xff;     
   \                     ??CrossCallReturnLabel_277:
   \   00000002   EC0F               LDI     R16, 207
   \   00000004   ....               RCALL   ?Subroutine12
    572              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER >> 8;     
    573              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \                     ??CrossCallReturnLabel_9:
   \   00000006   01A8               MOVW    R21:R20, R17:R16
    574              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000008   ....               RCALL   ?Subroutine154
    575          
    576              for (port = 0; port < 12; port++) {
   \                     ??CrossCallReturnLabel_200:
   \   0000000A   E060               LDI     R22, 0
   \   0000000C   E02C               LDI     R18, 12
    577                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Filter[port];
   \                     ??BuildANAFilter_0:
   \   0000000E   E0F0               LDI     R31, 0
   \   00000010   2FE6               MOV     R30, R22
   \   00000012   ....               RCALL   ?Subroutine135
    578              }
   \                     ??CrossCallReturnLabel_154:
   \   00000014   8132               LDD     R19, Z+2
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_346:
   \   0000001A   ....               RCALL   ?Subroutine71
   \                     ??CrossCallReturnLabel_360:
   \   0000001C   8330               ST      Z, R19
   \   0000001E   ....               RCALL   ??Subroutine161_0
   \                     ??CrossCallReturnLabel_330:
   \   00000020   9563               INC     R22
   \   00000022   952A               DEC     R18
   \   00000024   F7A1               BRNE    ??BuildANAFilter_0
    579          
    580              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000026   8102               LDD     R16, Z+2
   \   00000028   1B04               SUB     R16, R20
   \   0000002A   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_218:
   \   0000002C   0FE4               ADD     R30, R20
   \   0000002E   1FF5               ADC     R31, R21
   \   00000030   ....               RCALL   ?Subroutine90
    581              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \                     ??CrossCallReturnLabel_238:
   \   00000032   1B84               SUB     R24, R20
   \   00000034   0B95               SBC     R25, R21
   \   00000036   ....               RCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_229:
   \   00000038   0FE4               ADD     R30, R20
   \   0000003A   1FF5               ADC     R31, R21
   \   0000003C   ....               RJMP    ?Subroutine151
    582          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_273:
   \   00000002   ....               RJMP    ?Subroutine88

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_108:
   \   00000002   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_91:
   \   00000004   91ED               LD      R30, X+
   \   00000006   91FD               LD      R31, X+
   \   00000008   ....               RCALL   ?Subroutine127
   \                     ??CrossCallReturnLabel_131:
   \   0000000A                      REQUIRE ?Subroutine132
   \   0000000A                      ;               // Fall through to label ?Subroutine132
    583          
    584          /*************************************************************************
    585          *
    586          * Build datablock for External AD (ANA)
    587          *
    588          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    589          void BuildMDataANA(char ch, short pointer) {
   \                     BuildMDataANA:
   \   00000000   ....               RCALL   ?Subroutine1
    590          
    591              short ntna, i ;
    592              UART[ch].RxSendReply = true ;                               // flag for answering 
    593          
    594              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA & 0xff;     
   \                     ??CrossCallReturnLabel_276:
   \   00000002   ED09               LDI     R16, 217
   \   00000004   ....               RCALL   ?Subroutine12
    595              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA >> 8;     
    596              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \                     ??CrossCallReturnLabel_10:
   \   00000006   0198               MOVW    R19:R18, R17:R16
    597              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000008   ....               RCALL   ?Subroutine154
    598          
    599              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RestartStatus << 4) ;    // Add restart status
   \                     ??CrossCallReturnLabel_199:
   \   0000000A   9140....           LDS     R20, RestartStatus
   \   0000000E   9542               SWAP    R20
   \   00000010   7F40               ANDI    R20, 0xF0
   \   00000012   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_345:
   \   00000014   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_126:
   \   00000016   ....               RCALL   ??Subroutine161_0
    600              for (i = 0; i<12; i++) {
   \                     ??CrossCallReturnLabel_329:
   \   00000018   ....               RCALL   ?Subroutine138
   \                     ??CrossCallReturnLabel_286:
   \   0000001A   E00C               LDI     R16, 12
    601                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Status[i] ;
   \                     ??BuildMDataANA_0:
   \   0000001C   01FC               MOVW    R31:R30, R25:R24
   \   0000001E   ....               RCALL   ?Subroutine135
   \                     ??CrossCallReturnLabel_152:
   \   00000020   8516               LDD     R17, Z+14
   \   00000022   01FD               MOVW    R31:R30, R27:R26
   \   00000024   ....               RCALL   ?Subroutine70
   \                     ??CrossCallReturnLabel_135:
   \   00000026   0F46               ADD     R20, R22
   \   00000028   1F57               ADC     R21, R23
   \   0000002A   01FA               MOVW    R31:R30, R21:R20
   \   0000002C   8310               ST      Z, R17
   \   0000002E   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_122:
   \   00000030   5F4F               SUBI    R20, 255
   \   00000032   4F5F               SBCI    R21, 255
   \   00000034   8342               STD     Z+2, R20
   \   00000036   8353               STD     Z+3, R21
    602                  *((float*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float*)&TData.Ana.Result[i]) ;   // ADresult
   \   00000038   01AC               MOVW    R21:R20, R25:R24
   \   0000003A   0F44               LSL     R20
   \   0000003C   1F55               ROL     R21
   \   0000003E   0F44               LSL     R20
   \   00000040   1F55               ROL     R21
   \   00000042   01FA               MOVW    R31:R30, R21:R20
   \   00000044   ....               RCALL   ?Subroutine135
   \                     ??CrossCallReturnLabel_153:
   \   00000046   8D42               LDD     R20, Z+26
   \   00000048   8D53               LDD     R21, Z+27
   \   0000004A   8D64               LDD     R22, Z+28
   \   0000004C   8D75               LDD     R23, Z+29
   \   0000004E   01FD               MOVW    R31:R30, R27:R26
   \   00000050   8000               LD      R0, Z
   \   00000052   8011               LDD     R1, Z+1
   \   00000054   8022               LDD     R2, Z+2
   \   00000056   8033               LDD     R3, Z+3
   \   00000058   0C02               ADD     R0, R2
   \   0000005A   1C13               ADC     R1, R3
   \   0000005C   01F0               MOVW    R31:R30, R1:R0
   \   0000005E   ....               RCALL   ?Subroutine67
    603                  UART[ch].TxFirst += sizeof(float) ;
   \                     ??CrossCallReturnLabel_63:
   \   00000060   ....               RCALL   ?Subroutine49
    604              }
   \                     ??CrossCallReturnLabel_123:
   \   00000062   5F4C               SUBI    R20, 252
   \   00000064   4F5F               SBCI    R21, 255
   \   00000066   8342               STD     Z+2, R20
   \   00000068   8353               STD     Z+3, R21
   \   0000006A   9601               ADIW    R25:R24, 1
   \   0000006C   950A               DEC     R16
   \   0000006E   F6B1               BRNE    ??BuildMDataANA_0
    605          
    606              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000070   8102               LDD     R16, Z+2
   \   00000072   1B02               SUB     R16, R18
   \   00000074   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_217:
   \   00000076   0FE2               ADD     R30, R18
   \   00000078   1FF3               ADC     R31, R19
   \   0000007A   ....               RCALL   ?Subroutine90
    607              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \                     ??CrossCallReturnLabel_237:
   \   0000007C   1B82               SUB     R24, R18
   \   0000007E   0B93               SBC     R25, R19
   \   00000080   9702               SBIW    R25:R24, 2
   \   00000082   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_19:
   \   00000084                      REQUIRE ?Subroutine151
   \   00000084                      ;               // Fall through to label ?Subroutine151
    608          
    609          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_228:
   \   00000002   0FE2               ADD     R30, R18
   \   00000004   1FF3               ADC     R31, R19
   \   00000006   9508               RET
    610          
    611          /*************************************************************************
    612          *
    613          * Build datablock for Stack status
    614          *
    615          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_227:
   \   00000002                      REQUIRE ?Subroutine106
   \   00000002                      ;               // Fall through to label ?Subroutine106

   \                                 In  segment CODE, align 2, keep-with-next
    616          void BuildStackStatus(char ch, short pointer) {
   \                     BuildStackStatus:
   \   00000000   ....               RCALL   ?Subroutine1
    617          
    618              short ntna, stack ;
    619              UART[ch].RxSendReply = true ;                               // flag for answering 
    620          
    621              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS & 0xff;     
   \                     ??CrossCallReturnLabel_278:
   \   00000002   E707               LDI     R16, 119
   \   00000004   ....               RCALL   ?Subroutine87
    622              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS >> 8;     
   \                     ??CrossCallReturnLabel_274:
   \   00000006   E007               LDI     R16, 7
   \   00000008   8300               ST      Z, R16
   \   0000000A   ....               RCALL   ??Subroutine161_0
    623              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \                     ??CrossCallReturnLabel_332:
   \   0000000C   01C8               MOVW    R25:R24, R17:R16
    624              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000000E   ....               RCALL   ?Subroutine154
    625          
    626              stack = OS_GetStackSpace(&TCB_USART0);                            // USART 0
   \                     ??CrossCallReturnLabel_202:
   \   00000010   ....               LDI     R16, LOW(TCB_USART0)
   \   00000012   ....               LDI     R17, (TCB_USART0) >> 8
   \   00000014   ....               RCALL   ?Subroutine27
    627              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    628              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
    629              stack = OS_GetStackSpace(&TCB_USART1);                            // USART 1
   \                     ??CrossCallReturnLabel_24:
   \   00000016   ....               LDI     R16, LOW(TCB_USART1)
   \   00000018   ....               LDI     R17, (TCB_USART1) >> 8
   \   0000001A   ....               RCALL   ?Subroutine27
    630              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    631              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
    632              stack = OS_GetStackSpace(&TCB_WATCHDOG);                            // watchdog
   \                     ??CrossCallReturnLabel_23:
   \   0000001C   ....               LDI     R16, LOW(TCB_WATCHDOG)
   \   0000001E   ....               LDI     R17, (TCB_WATCHDOG) >> 8
   \   00000020   ....               RCALL   ?Subroutine27
    633              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    634              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
    635              switch (UnitID) {
   \                     ??CrossCallReturnLabel_22:
   \   00000022   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_178:
   \   00000024   F019               BREQ    ??BuildStackStatus_0
   \   00000026   950A               DEC     R16
   \   00000028   F041               BREQ    ??BuildStackStatus_1
   \   0000002A   C00E               RJMP    ??CrossCallReturnLabel_333
    636              case AN_ZB485 :
    637                  stack = OS_GetStackSpace(&TCB_RS485Ctl);                            // RS485 Control
   \                     ??BuildStackStatus_0:
   \   0000002C   ....               LDI     R16, LOW(TCB_RS485Ctl)
   \   0000002E   ....               LDI     R17, (TCB_RS485Ctl) >> 8
   \   00000030   ....               RCALL   ?Subroutine27
    638                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    639                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
    640                  stack = OS_GetStackSpace(&TCB_RS485Rec);                            // RS485 receive
   \                     ??CrossCallReturnLabel_21:
   \   00000032   ....               LDI     R16, LOW(TCB_RS485Rec)
   \   00000034   ....               LDI     R17, (TCB_RS485Rec) >> 8
   \   00000036   ....               RCALL   ?Subroutine86
    641                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    642                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \                     ??CrossCallReturnLabel_157:
   \   00000038   C006               RJMP    ??BuildStackStatus_2
    643                  break;
    644              case AN_ZBANA :
    645                  stack = OS_GetStackSpace(&TCB_AD7715);                            // AD handling
   \                     ??BuildStackStatus_1:
   \   0000003A   ....               LDI     R16, LOW(TCB_AD7715)
   \   0000003C   ....               LDI     R17, (TCB_AD7715) >> 8
   \   0000003E   ....               RCALL   ?Subroutine86
    646                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    647                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \                     ??CrossCallReturnLabel_156:
   \   00000040   ....               RCALL   ?Subroutine15
    648                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
    649                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
   \                     ??CrossCallReturnLabel_342:
   \   00000042   E000               LDI     R16, 0
   \   00000044   8300               ST      Z, R16
   \                     ??BuildStackStatus_2:
   \   00000046   ....               RCALL   ??Subroutine161_0
    650                  break;
    651              } 
    652          
    653              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??CrossCallReturnLabel_333:
   \   00000048   8102               LDD     R16, Z+2
   \   0000004A   1B08               SUB     R16, R24
   \   0000004C   5002               SUBI    R16, 2
   \   0000004E   ....               RCALL   ?Subroutine20
    654              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \                     ??CrossCallReturnLabel_161:
   \   00000050   ....               RCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_317:
   \   00000052   1B08               SUB     R16, R24
   \   00000054   0B19               SBC     R17, R25
   \   00000056   5002               SUBI    R16, 2
   \   00000058   4010               SBCI    R17, 0
   \   0000005A   ....               RCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_302:
   \   0000005C   8311               STD     Z+1, R17
    655          
    656          }
   \   0000005E   ....               RJMP    ?Subroutine148

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine86:
   \   00000000   ........           CALL    OS_GetStackSpace
   \   00000004   912D               LD      R18, X+
   \   00000006   913C               LD      R19, X
   \   00000008   9711               SBIW    R27:R26, 1
   \   0000000A   01FD               MOVW    R31:R30, R27:R26
   \   0000000C   ....               RCALL   ?Subroutine129
   \                     ??CrossCallReturnLabel_137:
   \   0000000E   0F26               ADD     R18, R22
   \   00000010   1F37               ADC     R19, R23
   \   00000012   01F9               MOVW    R31:R30, R19:R18
   \   00000014   8300               ST      Z, R16
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_142:
   \   0000001A   2F21               MOV     R18, R17
   \   0000001C   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_351:
   \   0000001E   8142               LDD     R20, Z+2
   \   00000020   0F04               ADD     R16, R20
   \   00000022   1F13               ADC     R17, R19
   \   00000024                      REQUIRE ?Subroutine140
   \   00000024                      ;               // Fall through to label ?Subroutine140

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   ....               RCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_158:
   \   00000002   ....               RJMP    ??Subroutine161_0
    657          
    658          //////////////////////////////////////////////////////////////////////////////
    659          // Receiving data to IO module here
    660          /////////////////////////////////////////////////////////////////////////////
    661          
    662          /*************************************************************************
    663          *
    664          * Receive Command to Reset the EEPROM
    665          *
    666          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    667          void GetResetEEPROM(char ch, short pointer) {   
   \                     GetResetEEPROM:
    668          
    669              EEPROMReset();
   \   00000000   ........           JMP     EEPROMReset
    670          }
    671          
    672          
    673          /*************************************************************************
    674          *
    675          * Receive Command to go to the bootloader program
    676          *
    677          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    678          void GetGotoBootloader(char ch, short pointer) {   
   \                     GetGotoBootloader:
   \                     ??GetGotoBootloader_0:
    679          
    680          //    void (*BootApp)(void) = (void(*)())0xF000;
    681          
    682              while ( (EECR & 1<<EEWE) != 0 ) //chech if EEPROM is ready
   \   00000000   99E1               SBIC    0x1C, 0x01
   \   00000002   CFFE               RJMP    ??GetGotoBootloader_0
    683                  ;
    684              EEARL = (0x0fff & 0xff);
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   BB0E               OUT     0x1E, R16
    685              EEARH = (0x0fff >> 8);
   \   00000008   E00F               LDI     R16, 15
   \   0000000A   BB0F               OUT     0x1F, R16
    686              EEDR = 0xff;
   \   0000000C   EF0F               LDI     R16, 255
   \   0000000E   BB0D               OUT     0x1D, R16
    687              EECR |= (1<<EEMWE);
   \   00000010   9AE2               SBI     0x1C, 0x02
    688              EECR |= (1<<EEWE);
   \   00000012   9AE1               SBI     0x1C, 0x01
    689              while (EECR & (1<<EEWE))
   \                     ??GetGotoBootloader_1:
   \   00000014   99E1               SBIC    0x1C, 0x01
   \   00000016   CFFE               RJMP    ??GetGotoBootloader_1
    690                  ;
    691          
    692              WDTCR = 0x18;               //Start watchdog to genetate restart
   \   00000018   E108               LDI     R16, 24
   \   0000001A   BD01               OUT     0x21, R16
    693              WDTCR = 0x08;               //Start watchdog to genetate restart
   \   0000001C   E008               LDI     R16, 8
   \   0000001E   BD01               OUT     0x21, R16
    694          }
   \   00000020   9508               RET
   \   00000022                      REQUIRE _A_EECR
   \   00000022                      REQUIRE _A_EEAR
   \   00000022                      REQUIRE _A_EEDR
   \   00000022                      REQUIRE _A_WDTCR
    695          
    696          /*************************************************************************
    697          *
    698          * Receive EEPROM data
    699          *
    700          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    701          void GetEEPROMData(char ch, short pointer) {   
   \                     GetEEPROMData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   0139               MOVW    R7:R6, R19:R18
    702          
    703            char channel;
    704            int t0;
    705            
    706              channel = UART[ch].pRxBuffer[pointer] ;
   \   00000006   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_3:
   \   00000008   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_67:
   \   0000000A   01FA               MOVW    R31:R30, R21:R20
   \   0000000C   8120               LD      R18, Z
    707              if ((channel >= 0x80) && (UnitID == 0x01)) { // AN-ZBANA
   \   0000000E   3820               CPI     R18, 128
   \   00000010   F0F0               BRCS    ??GetEEPROMData_0
   \   00000012   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_43:
   \   00000014   F4E1               BRNE    ??GetEEPROMData_0
    708                *((float*)&TData.Ana.Offset[channel & 0x0f]) = *((float*)&UART[ch].pRxBuffer[pointer+1]) ;  //offset
   \   00000016   ....               LDI     R16, LOW((TData + 98))
   \   00000018   ....               LDI     R17, HIGH((TData + 98))
   \   0000001A   2F62               MOV     R22, R18
   \   0000001C   E070               LDI     R23, 0
   \   0000001E   706F               ANDI    R22, 0x0F
   \   00000020   0F66               LSL     R22
   \   00000022   0F66               LSL     R22
   \   00000024   0F06               ADD     R16, R22
   \   00000026   1F17               ADC     R17, R23
   \   00000028   8001               LDD     R0, Z+1
   \   0000002A   8012               LDD     R1, Z+2
   \   0000002C   8023               LDD     R2, Z+3
   \   0000002E   8034               LDD     R3, Z+4
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   8200               ST      Z, R0
   \   00000034   8211               STD     Z+1, R1
   \   00000036   8222               STD     Z+2, R2
   \   00000038   8233               STD     Z+3, R3
    709                *((float*)&TData.Ana.Gain[channel & 0x0f]) = *((float*)&UART[ch].pRxBuffer[pointer+5]) ;  //gain
   \   0000003A   01FA               MOVW    R31:R30, R21:R20
   \   0000003C   8005               LDD     R0, Z+5
   \   0000003E   8016               LDD     R1, Z+6
   \   00000040   8027               LDD     R2, Z+7
   \   00000042   8430               LDD     R3, Z+8
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   AA00               STD     Z+48, R0
   \   00000048   AA11               STD     Z+49, R1
   \   0000004A   AA22               STD     Z+50, R2
   \   0000004C   AA33               STD     Z+51, R3
    710              }
    711              WriteEEPROMBuffer((channel * sizeof(float) * 2), sizeof(float), (char*)&UART[ch].pRxBuffer[pointer+1]);
   \                     ??GetEEPROMData_0:
   \   0000004E   E008               LDI     R16, 8
   \   00000050   9F20               MUL     R18, R16
   \   00000052   01D0               MOVW    R27:R26, R1:R0
   \   00000054   5F4F               SUBI    R20, 255
   \   00000056   4F5F               SBCI    R21, 255
   \   00000058   E024               LDI     R18, 4
   \   0000005A   0180               MOVW    R17:R16, R1:R0
   \   0000005C   ....               RCALL   ?Subroutine77
    712              t0 = OS_GetTime();
    713              do {
    714                OS_Delay(1);
   \                     ??CrossCallReturnLabel_69:
   \   0000005E   ....               RCALL   ?Subroutine9
    715              }while ((OS_GetTime()-t0)< (sizeof(float)*9) && !EEPWriteOK);  //8.5 ms programming time
   \                     ??CrossCallReturnLabel_5:
   \   00000060   F420               BRCC    ??GetEEPROMData_1
   \   00000062   9100....           LDS     R16, EEPWriteOK
   \   00000066   2300               TST     R16
   \   00000068   F3D1               BREQ    ??CrossCallReturnLabel_69
    716              WriteEEPROMBuffer( (channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char*)&UART[ch].pRxBuffer[pointer+5]);
   \                     ??GetEEPROMData_1:
   \   0000006A   01F2               MOVW    R31:R30, R5:R4
   \   0000006C   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_68:
   \   0000006E   5F4B               SUBI    R20, 251
   \   00000070   4F5F               SBCI    R21, 255
   \   00000072   E024               LDI     R18, 4
   \   00000074   9614               ADIW    R27:R26, 4
   \   00000076   018D               MOVW    R17:R16, R27:R26
   \   00000078   ....               RCALL   ?Subroutine77
    717              t0 = OS_GetTime();
    718              do {
    719                OS_Delay(1);
   \                     ??CrossCallReturnLabel_70:
   \   0000007A   ....               RCALL   ?Subroutine9
    720              }while ((OS_GetTime()-t0)< (sizeof(float)*9) && !EEPWriteOK);
   \                     ??CrossCallReturnLabel_6:
   \   0000007C   F420               BRCC    ??GetEEPROMData_2
   \   0000007E   9100....           LDS     R16, EEPWriteOK
   \   00000082   2300               TST     R16
   \   00000084   F3D1               BREQ    ??CrossCallReturnLabel_70
    721          }
   \                     ??GetEEPROMData_2:
   \   00000086   ....               RJMP    ?Subroutine149

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine77:
   \   00000000   ........           CALL    WriteEEPROMBuffer
   \   00000004   ........           CALL    OS__Gettime
   \   00000008   01C8               MOVW    R25:R24, R17:R16
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine76:
   \   00000000   8542               LDD     R20, Z+10
   \   00000002   8553               LDD     R21, Z+11
   \   00000004   0D46               ADD     R20, R6
   \   00000006   1D57               ADC     R21, R7
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   E001               LDI     R16, 1
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    OS_Delay
   \   00000008   ........           CALL    OS__Gettime
   \   0000000C   1B08               SUB     R16, R24
   \   0000000E   0B19               SBC     R17, R25
   \   00000010   3204               CPI     R16, 36
   \   00000012   4010               SBCI    R17, 0
   \   00000014   9508               RET
    722          
    723          /*************************************************************************
    724          *
    725          * Receive AN-ZB485 setup
    726          *
    727          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    728          void GetRS4Setup(char ch, short pointer) {   
   \                     GetRS4Setup:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_269:
   \   00000006   961A               ADIW    R27:R26, 10
   \   00000008   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_20:
   \   0000000A   8100               LD      R16, Z
   \   0000000C   9300....           STS     TData, R16
    729          
    730              TData.RS4.PortUsed = UART[ch].pRxBuffer[pointer];           // Get the setup
    731              TData.RS4.SensorType[0] = UART[ch].pRxBuffer[pointer+1];       // Get the sensor type
   \   00000010   8101               LDD     R16, Z+1
   \   00000012   9300....           STS     (TData + 1), R16
    732              TData.RS4.SensorType[1] = UART[ch].pRxBuffer[pointer+2];       // Get the sensor type
   \   00000016   8102               LDD     R16, Z+2
   \   00000018   9300....           STS     (TData + 2), R16
    733              WriteEEPROMByte(EEPROM_PORTSETUP, TData.RS4.PortUsed);      // store in EEPROM 
   \   0000001C   9120....           LDS     R18, TData
   \   00000020   ....               RCALL   ?Subroutine7
    734              WriteEEPROMByte(EEPROM_PORTSETUP+1, TData.RS4.SensorType[0]); 
   \                     ??CrossCallReturnLabel_308:
   \   00000022   9120....           LDS     R18, (TData + 1)
   \   00000026   E003               LDI     R16, 3
   \   00000028   ....               RCALL   ??Subroutine167_0
    735              WriteEEPROMByte(EEPROM_PORTSETUP+2, TData.RS4.SensorType[1]); 
   \                     ??CrossCallReturnLabel_306:
   \   0000002A   9120....           LDS     R18, (TData + 2)
   \   0000002E   E004               LDI     R16, 4
   \   00000030   ....               RCALL   ??Subroutine167_0
    736              SetRS4Port();                                               // Set power on ports
   \                     ??CrossCallReturnLabel_305:
   \   00000032   ........           CALL    SetRS4Port
    737          }
   \   00000036   ....               RJMP    ?Subroutine134

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   E002               LDI     R16, 2
   \   00000002                      REQUIRE ??Subroutine167_0
   \   00000002                      ;               // Fall through to label ??Subroutine167_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine167_0:
   \   00000000   E010               LDI     R17, 0
   \   00000002   ........           JMP     WriteEEPROMByte
    738          
    739          /*************************************************************************
    740          *
    741          * Rceive data fo AD card
    742          *
    743          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    744          void GetADData(char ch, short pointer) {   
   \                     GetADData:
   \   00000000   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_104:
   \   00000002   01C9               MOVW    R25:R24, R19:R18
   \   00000004   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_280:
   \   00000006   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_115:
   \   00000008   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_297:
   \   0000000A   3024               CPI     R18, 4
   \   0000000C   F410               BRCC    ??GetADData_0
    745          
    746             char i, pair;
    747             
    748             if (UART[ch].pRxBuffer[pointer] <=3) {
    749               pair = 0;
   \   0000000E   E020               LDI     R18, 0
   \   00000010   C001               RJMP    ??GetADData_1
    750             } else {
    751               pair = 1;
   \                     ??GetADData_0:
   \   00000012   E520               LDI     R18, 80
   \                     ??GetADData_1:
   \   00000014   E030               LDI     R19, 0
    752             }
    753             if (!TData.RS4.ToTargetBuffer[pair][0]) {                                // buffer empty?
   \   00000016   ....               LDI     R20, LOW(TData)
   \   00000018   ....               LDI     R21, (TData) >> 8
   \   0000001A   0F42               ADD     R20, R18
   \   0000001C   1F53               ADC     R21, R19
   \   0000001E   01DA               MOVW    R27:R26, R21:R20
   \   00000020   50AC               SUBI    R26, 12
   \   00000022   4FBB               SBCI    R27, 251
   \   00000024   912C               LD      R18, X
   \   00000026   2322               TST     R18
   \   00000028   F4F1               BRNE    ??GetADData_2
    754                TData.RS4.ToTargetBuffer[pair][0] = true;                            //  Availible data for AD card
   \   0000002A   E021               LDI     R18, 1
   \   0000002C   932C               ST      X, R18
    755                TData.RS4.ToTargetBuffer[pair][1] = UART[ch].pRxBuffer[pointer++];   //  Channel to AD card
   \   0000002E   8120               LD      R18, Z
   \   00000030   01FD               MOVW    R31:R30, R27:R26
   \   00000032   8321               STD     Z+1, R18
    756                TData.RS4.ToTargetBuffer[pair][2] = UART[ch].pRxBuffer[pointer++];   // nob in datablock
   \   00000034   9601               ADIW    R25:R24, 1
   \   00000036   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_298:
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   8322               STD     Z+2, R18
   \   0000003C   9601               ADIW    R25:R24, 1
    757                for (i = 3; i < TData.RS4.ToTargetBuffer[pair][2] + 3; i++) {
   \   0000003E   E023               LDI     R18, 3
   \   00000040   C00B               RJMP    ??GetADData_3
    758                    TData.RS4.ToTargetBuffer[pair][i] = UART[ch].pRxBuffer[pointer++];  //Get the buffer
   \                     ??GetADData_4:
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               RCALL   ?Subroutine106
    759                }
   \                     ??CrossCallReturnLabel_299:
   \   00000046   8160               LD      R22, Z
   \   00000048   01FA               MOVW    R31:R30, R21:R20
   \   0000004A   0FE2               ADD     R30, R18
   \   0000004C   1FF3               ADC     R31, R19
   \   0000004E   50EC               SUBI    R30, 12
   \   00000050   4FFB               SBCI    R31, 251
   \   00000052   8360               ST      Z, R22
   \   00000054   9601               ADIW    R25:R24, 1
   \   00000056   9523               INC     R18
   \                     ??GetADData_3:
   \   00000058   01FD               MOVW    R31:R30, R27:R26
   \   0000005A   81E2               LDD     R30, Z+2
   \   0000005C   E0F0               LDI     R31, 0
   \   0000005E   9633               ADIW    R31:R30, 3
   \   00000060   172E               CP      R18, R30
   \   00000062   073F               CPC     R19, R31
   \   00000064   F374               BRLT    ??GetADData_4
    760             }
    761          }
   \                     ??GetADData_2:
   \   00000066   ....               RJMP    ?Subroutine148

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002                      REQUIRE ??Subroutine166_0
   \   00000002                      ;               // Fall through to label ??Subroutine166_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine166_0:
   \   00000000   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_304:
   \   00000002   8120               LD      R18, Z
   \   00000004   9508               RET
    762          
    763          /*************************************************************************
    764          *
    765          * Receive AN-ZBANA setup
    766          *
    767          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    768          void GetANASetup(char ch, short pointer) {   
   \                     GetANASetup:
   \   00000000   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_102:
   \   00000002   01C9               MOVW    R25:R24, R19:R18
    769          
    770              TData.Ana.PortUsed = UART[ch].pRxBuffer[pointer] + (UART[ch].pRxBuffer[pointer+1] << 8);  //Get the setup
   \   00000004   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_166:
   \   00000006   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_113:
   \   00000008   0F08               ADD     R16, R24
   \   0000000A   1F19               ADC     R17, R25
   \   0000000C   01F8               MOVW    R31:R30, R17:R16
   \   0000000E   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_190:
   \   00000010   ....               LDI     R30, LOW(TData)
   \   00000012   ....               LDI     R31, (TData) >> 8
   \   00000014   8320               ST      Z, R18
   \   00000016   8331               STD     Z+1, R19
    771              WriteEEPROMByte(EEPROM_PORTSETUP,UART[ch].pRxBuffer[pointer]);   // store in EEPROM 
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   8120               LD      R18, Z
   \   0000001C   ....               RCALL   ?Subroutine7
    772              WriteEEPROMByte(EEPROM_PORTSETUP+1,UART[ch].pRxBuffer[pointer+1]); 
   \                     ??CrossCallReturnLabel_309:
   \   0000001E   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_354:
   \   00000020   8121               LDD     R18, Z+1
   \   00000022   E003               LDI     R16, 3
   \   00000024   ....               RCALL   ??Subroutine167_0
    773              SetAnaPort();                           // set the port on or off
   \                     ??CrossCallReturnLabel_307:
   \   00000026   ........           CALL    SetAnaPort
    774          }
   \   0000002A   ....               RJMP    ?Subroutine148
    775          
    776          /*************************************************************************
    777          *
    778          * Receive AN-ZBANA filter
    779          *
    780          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    781          void GetANAFilter(char ch, short pointer) {   
   \                     GetANAFilter:
   \   00000000   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_101:
   \   00000002   2F60               MOV     R22, R16
   \   00000004   01C9               MOVW    R25:R24, R19:R18
    782              char port;
    783          
    784              for (port = 0; port <12; port++) {
   \   00000006   E030               LDI     R19, 0
   \   00000008   E02C               LDI     R18, 12
    785                  TData.Ana.Filter[port] = UART[ch].pRxBuffer[pointer++];  //Get the filter
   \                     ??GetANAFilter_0:
   \   0000000A   2F06               MOV     R16, R22
   \   0000000C   ....               RCALL   ?Subroutine126
    786              }
   \                     ??CrossCallReturnLabel_261:
   \   0000000E   01D8               MOVW    R27:R26, R17:R16
   \   00000010   ....               SUBI    R26, LOW((-(UART + 10) & 0xFFFF))
   \   00000012   ....               SBCI    R27, HIGH((-(UART + 10) & 0xFFFF))
   \   00000014   ....               RCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_301:
   \   00000016   8140               LD      R20, Z
   \   00000018   E0F0               LDI     R31, 0
   \   0000001A   2FE3               MOV     R30, R19
   \   0000001C   ....               RCALL   ?Subroutine135
   \                     ??CrossCallReturnLabel_155:
   \   0000001E   8342               STD     Z+2, R20
   \   00000020   9601               ADIW    R25:R24, 1
   \   00000022   9533               INC     R19
   \   00000024   952A               DEC     R18
   \   00000026   F789               BRNE    ??GetANAFilter_0
    787          }
   \   00000028   ....               RJMP    ?Subroutine148
    788          
    789          /*************************************************************************
    790          *
    791          *  Receive data on USARTs
    792          *
    793          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    794          void ReceivePacketUart(char ch) {
   \                     ReceivePacketUart:
   \   00000000   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_106:
   \   00000002   2F80               MOV     R24, R16
    795          
    796              switch (UART[ch].RxState) {                  // check status 
   \   00000004   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_169:
   \   00000006   8902               LDD     R16, Z+18
   \   00000008   2300               TST     R16
   \   0000000A   F409               BRNE    $+2+2
   \   0000000C   C06F               RJMP    ??ReceivePacketUart_0
   \   0000000E   950A               DEC     R16
   \   00000010   F031               BREQ    ??ReceivePacketUart_1
   \   00000012   950A               DEC     R16
   \   00000014   F1B9               BREQ    ??ReceivePacketUart_2
   \   00000016   5008               SUBI    R16, 8
   \   00000018   F409               BRNE    $+2+2
   \   0000001A   C068               RJMP    ??ReceivePacketUart_0
   \   0000001C   C065               RJMP    ??ReceivePacketUart_3
    797              case SYNC :
    798                  // all functionallity in inerrupt routine 
    799                  break ;
    800              case HEADER :
    801                  if (UART[ch].RxLast >= 6) {             // receive header 
   \                     ??ReceivePacketUart_1:
   \   0000001E   8506               LDD     R16, Z+14
   \   00000020   8517               LDD     R17, Z+15
   \   00000022   3006               CPI     R16, 6
   \   00000024   4010               SBCI    R17, 0
   \   00000026   F408               BRCC    $+2+2
   \   00000028   C061               RJMP    ??ReceivePacketUart_0
    802                      UART[ch].RxPacklen = (UART[ch].pRxBuffer[4] + (UART[ch].pRxBuffer[5] * 256)) ; // Find length of package
   \   0000002A   8502               LDD     R16, Z+10
   \   0000002C   85F3               LDD     R31, Z+11
   \   0000002E   2FE0               MOV     R30, R16
   \   00000030   8104               LDD     R16, Z+4
   \   00000032   8115               LDD     R17, Z+5
   \   00000034   01FD               MOVW    R31:R30, R27:R26
   \   00000036   8B06               STD     Z+22, R16
   \   00000038   8B17               STD     Z+23, R17
    803                      if (CalcDSRxChecksum(ch, 6) && (UART[ch].pRxBuffer[0] == (DEVICE_IO + UnitID))) {
   \   0000003A   E026               LDI     R18, 6
   \   0000003C   E030               LDI     R19, 0
   \   0000003E   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_54:
   \   00000040   F409               BRNE    $+2+2
   \   00000042   C052               RJMP    ??ReceivePacketUart_3
   \   00000044   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_41:
   \   00000046   ....               RCALL   ??Subroutine164_0
   \                     ??CrossCallReturnLabel_290:
   \   00000048   91E0....           LDS     R30, UnitID
   \   0000004C   E0F0               LDI     R31, 0
   \   0000004E   9670               ADIW    R31:R30, 16
   \   00000050   170E               CP      R16, R30
   \   00000052   071F               CPC     R17, R31
   \   00000054   F009               BREQ    $+2+2
   \   00000056   C048               RJMP    ??ReceivePacketUart_3
    804                          // header checksum OK and to me
    805                          if ((UART[ch].RxPacklen < ((short) RXSIZE_UART-UART[ch].RxLast)) &&    /* chk. header */
    806                              (UART[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   00000058   01FD               MOVW    R31:R30, R27:R26
   \   0000005A   8926               LDD     R18, Z+22
   \   0000005C   8937               LDD     R19, Z+23
   \   0000005E   E906               LDI     R16, 150
   \   00000060   8546               LDD     R20, Z+14
   \   00000062   8557               LDD     R21, Z+15
   \   00000064   1B04               SUB     R16, R20
   \   00000066   0B15               SBC     R17, R21
   \   00000068   1720               CP      R18, R16
   \   0000006A   0731               CPC     R19, R17
   \   0000006C   F5E8               BRCC    ??ReceivePacketUart_3
   \   0000006E   3027               CPI     R18, 7
   \   00000070   4030               SBCI    R19, 0
   \   00000072   F1D0               BRCS    ??ReceivePacketUart_3
    807                              UART[ch].RxState = RECEIVE ;       // Header ok go to data receive state
   \   00000074   E002               LDI     R16, 2
   \   00000076   8B02               STD     Z+18, R16
    808                              UART[ch].RxCount = UART[ch].RxLast + 1 ;    // Set receive counter
   \   00000078   8586               LDD     R24, Z+14
   \   0000007A   8597               LDD     R25, Z+15
   \   0000007C   9601               ADIW    R25:R24, 1
   \   0000007E   8B80               STD     Z+16, R24
   \   00000080   8B91               STD     Z+17, R25
   \   00000082   C034               RJMP    ??ReceivePacketUart_0
    809                          } else {
    810                              GoToSyncUART(ch) ;                        // go to sync modus for recive
    811                          }
    812                      } else {
    813                          GoToSyncUART(ch) ;                            // go to sync modus for recive
    814                      }
    815                  }
    816                  break ;
    817              case RECEIVE :
    818                  if (++UART[ch].RxCount >= UART[ch].RxPacklen) {
   \                     ??ReceivePacketUart_2:
   \   00000084   8900               LDD     R16, Z+16
   \   00000086   8911               LDD     R17, Z+17
   \   00000088   5F0F               SUBI    R16, 255
   \   0000008A   4F1F               SBCI    R17, 255
   \   0000008C   8B00               STD     Z+16, R16
   \   0000008E   8B11               STD     Z+17, R17
   \   00000090   8926               LDD     R18, Z+22
   \   00000092   8937               LDD     R19, Z+23
   \   00000094   1702               CP      R16, R18
   \   00000096   0713               CPC     R17, R19
   \   00000098   F148               BRCS    ??ReceivePacketUart_0
    819                      if ((UART[ch].pRxBuffer[UART[ch].RxPacklen -1]) == ANPRO10_EOT) {
   \   0000009A   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_116:
   \   0000009C   ....               RCALL   ??Subroutine171_0
   \                     ??CrossCallReturnLabel_368:
   \   0000009E   5001               SUBI    R16, 1
   \   000000A0   4010               SBCI    R17, 0
   \   000000A2   01F8               MOVW    R31:R30, R17:R16
   \   000000A4   8100               LD      R16, Z
   \   000000A6   3004               CPI     R16, 4
   \   000000A8   F4F9               BRNE    ??ReceivePacketUart_3
    820                          if (CalcDSRxChecksum(ch, UART[ch].RxPacklen-2)) {
   \   000000AA   5022               SUBI    R18, 2
   \   000000AC   4030               SBCI    R19, 0
   \   000000AE   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_55:
   \   000000B0   F0D9               BREQ    ??ReceivePacketUart_3
    821                              if ((UART[ch].pRxBuffer[1] == MyAddress())||      // message to me? or
    822                                  (UART[ch].pRxBuffer[1] == 0xff)) {            // broadcast
   \   000000B2   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_49:
   \   000000B4   2F20               MOV     R18, R16
   \   000000B6   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_42:
   \   000000B8   8131               LDD     R19, Z+1
   \   000000BA   1732               CP      R19, R18
   \   000000BC   F011               BREQ    ??ReceivePacketUart_4
   \   000000BE   3F3F               CPI     R19, 255
   \   000000C0   F499               BRNE    ??ReceivePacketUart_3
    823                                  hostAddress = UART[ch].pRxBuffer[3];            // address to sender (host)
   \                     ??ReceivePacketUart_4:
   \   000000C2   8103               LDD     R16, Z+3
   \   000000C4   9300....           STS     hostAddress, R16
    824                                  UART[ch].RxState = HANDLE ;                     // Package OK
   \   000000C8   01FD               MOVW    R31:R30, R27:R26
   \   000000CA   E00A               LDI     R16, 10
   \   000000CC   8B02               STD     Z+18, R16
    825                                  if (ch == 0) {
   \   000000CE   2388               TST     R24
   \   000000D0   F419               BRNE    ??ReceivePacketUart_5
    826                                      OS_SignalEvent(1, &TCB_USART0);
   \   000000D2   ....               LDI     R18, LOW(TCB_USART0)
   \   000000D4   ....               LDI     R19, (TCB_USART0) >> 8
   \   000000D6   C004               RJMP    ??ReceivePacketUart_6
    827                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart_5:
   \   000000D8   3081               CPI     R24, 1
   \   000000DA   F441               BRNE    ??ReceivePacketUart_0
    828                                      OS_SignalEvent(1, &TCB_USART1);
   \   000000DC   ....               LDI     R18, LOW(TCB_USART1)
   \   000000DE   ....               LDI     R19, (TCB_USART1) >> 8
   \                     ??ReceivePacketUart_6:
   \   000000E0   E001               LDI     R16, 1
   \   000000E2   ........           CALL    OS_SignalEvent
   \   000000E6   C002               RJMP    ??ReceivePacketUart_0
    829                                  }
    830                              } else {
    831                                  GoToSyncUART(ch) ;                             // go to sync modus for recive
    832                              }
    833                          } else {
    834                              GoToSyncUART(ch) ;                                // go to sync modus for recive
    835                          }
    836                      } else {
    837                          GoToSyncUART(ch) ;                                    // go to sync modus for recive
    838                      }
    839                  }
    840                  break ;
    841              case HANDLE :
    842                  break;
    843              default :
    844                  GoToSyncUART(ch) ;                                            // go to sync modus for recive
   \                     ??ReceivePacketUart_3:
   \   000000E8   2F08               MOV     R16, R24
   \   000000EA   ....               RCALL   GoToSyncUART
    845                  break ;
    846              }                                                           // end switch 
    847              if (++UART[ch].RxLast >= RXSIZE_UART) {                     // check pointer 
   \                     ??ReceivePacketUart_0:
   \   000000EC   01FD               MOVW    R31:R30, R27:R26
   \   000000EE   8506               LDD     R16, Z+14
   \   000000F0   8517               LDD     R17, Z+15
   \   000000F2   5F0F               SUBI    R16, 255
   \   000000F4   4F1F               SBCI    R17, 255
   \   000000F6   8706               STD     Z+14, R16
   \   000000F8   8717               STD     Z+15, R17
   \   000000FA   3906               CPI     R16, 150
   \   000000FC   E020               LDI     R18, 0
   \   000000FE   4010               SBCI    R17, 0
   \   00000100   F010               BRCS    ??ReceivePacketUart_7
    848                  UART[ch].RxLast = 0;                                     // reset pointer
   \   00000102   8726               STD     Z+14, R18
   \   00000104   8727               STD     Z+15, R18
    849              }
    850          }
   \                     ??ReceivePacketUart_7:
   \   00000106   ....               RJMP    ?Subroutine148

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine59:
   \   00000000   2F08               MOV     R16, R24
   \   00000002   ....               RCALL   CalcDSRxChecksum
   \   00000004   2B01               OR      R16, R17
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine50:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   8502               LDD     R16, Z+10
   \   00000004   85F3               LDD     R31, Z+11
   \   00000006   2FE0               MOV     R30, R16
   \   00000008   9508               RET
    851          
    852          
    853          /*************************************************************************
    854          *
    855          * Calculate tx checksum (header and package) using Dallas Semiconductor one-wire CRC
    856          *
    857          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    858          char CalcDSTxChecksum(char ch, unsigned short len) {
   \                     CalcDSTxChecksum:
   \   00000000   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_15:
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002   2E20               MOV     R2, R16
   \   00000004   2E53               MOV     R5, R19
    859          
    860              unsigned short  cnt ;
    861              unsigned char   csum ;
    862          
    863              csum = 0 ;
   \   00000006   E060               LDI     R22, 0
    864              for (cnt = 4 ; cnt < len ; cnt++) {
   \   00000008   E084               LDI     R24, 4
   \   0000000A   E090               LDI     R25, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   ....               LDI     R19, (crc) >> 16
   \   00000010   C00D               RJMP    ??CalcDSTxChecksum_0
    865                  csum = crc[csum ^ UART[ch].pTxBuffer[cnt]] ;
   \                     ??CalcDSTxChecksum_1:
   \   00000012   2D02               MOV     R16, R2
   \   00000014   E010               LDI     R17, 0
   \   00000016   ....               RCALL   ?Subroutine131
    866              }
   \                     ??CrossCallReturnLabel_258:
   \   00000018   01D8               MOVW    R27:R26, R17:R16
   \   0000001A   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   0000001C   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   0000001E   ....               RCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_300:
   \   00000020   8100               LD      R16, Z
   \   00000022   2760               EOR     R22, R16
   \   00000024   2FE6               MOV     R30, R22
   \   00000026   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_33:
   \   00000028   9166               ELPM    R22, Z
   \   0000002A   9601               ADIW    R25:R24, 1
   \                     ??CalcDSTxChecksum_0:
   \   0000002C   1782               CP      R24, R18
   \   0000002E   0595               CPC     R25, R5
   \   00000030   F380               BRCS    ??CalcDSTxChecksum_1
    867              return csum ;
   \   00000032   2F06               MOV     R16, R22
   \   00000034   ....               RJMP    ?Subroutine147
    868          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine39:
   \   00000000   E0F0               LDI     R31, 0
   \   00000002   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000004   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000006   BF3B               OUT     0x3B, R19
   \   00000008   9508               RET
    869          
    870          /*************************************************************************
    871          *
    872          * Calculate rx packet checksum (header and package) using Dallas Semiconductor one-wire CRC
    873          *
    874          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    875          short CalcDSRxChecksum(char ch, unsigned short len) {
   \                     CalcDSRxChecksum:
   \   00000000   011C               MOVW    R3:R2, R25:R24
   \   00000002   01B9               MOVW    R23:R22, R19:R18
    876          
    877              unsigned short  cnt ;
    878              unsigned char   csum ;
    879          
    880              csum = 0 ;
   \   00000004   E020               LDI     R18, 0
    881              for (cnt=0 ; cnt < len ; cnt++) {
   \   00000006   ....               RCALL   ?Subroutine138
   \                     ??CrossCallReturnLabel_289:
   \   00000008   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_281:
   \   0000000A   8542               LDD     R20, Z+10
   \   0000000C   8553               LDD     R21, Z+11
   \   0000000E   ....               LDI     R19, (crc) >> 16
   \   00000010   C008               RJMP    ??CalcDSRxChecksum_0
    882                  csum = crc[csum ^ UART[ch].pRxBuffer[cnt]] ;
   \                     ??CalcDSRxChecksum_1:
   \   00000012   2F02               MOV     R16, R18
   \   00000014   01FA               MOVW    R31:R30, R21:R20
   \   00000016   ....               RCALL   ??Subroutine166_0
    883              }
   \                     ??CrossCallReturnLabel_296:
   \   00000018   2702               EOR     R16, R18
   \   0000001A   2FE0               MOV     R30, R16
   \   0000001C   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_34:
   \   0000001E   9126               ELPM    R18, Z
   \   00000020   9601               ADIW    R25:R24, 1
   \                     ??CalcDSRxChecksum_0:
   \   00000022   1786               CP      R24, R22
   \   00000024   0797               CPC     R25, R23
   \   00000026   F3A8               BRCS    ??CalcDSRxChecksum_1
    884              if (csum == UART[ch].pRxBuffer[len]) {
   \   00000028   0F46               ADD     R20, R22
   \   0000002A   1F57               ADC     R21, R23
   \   0000002C   01FA               MOVW    R31:R30, R21:R20
   \   0000002E   8100               LD      R16, Z
   \   00000030   1720               CP      R18, R16
   \   00000032   F411               BRNE    ??CalcDSRxChecksum_2
    885                  return true ;
   \   00000034   E001               LDI     R16, 1
   \   00000036   C001               RJMP    ??CalcDSRxChecksum_3
    886              } else {
    887                  return false ;
   \                     ??CalcDSRxChecksum_2:
   \   00000038   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum_3:
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   01C1               MOVW    R25:R24, R3:R2
   \   0000003E   9508               RET
    888              }
    889          }
    890          
    891          /*************************************************************************
    892          *
    893          * Goes to sync mode
    894          *
    895          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    896          __monitor void GoToSyncUART(char ch) {
   \                     GoToSyncUART:
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
    897          
    898              if (ch < 2) {
   \   00000004   3002               CPI     R16, 2
   \   00000006   F428               BRCC    ??GoToSyncUART_0
    899                  UART[ch].SyncCnt = 0 ;                        // ready for sync
   \   00000008   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_279:
   \   0000000A   8B53               STD     Z+19, R21
    900                  UART[ch].RxState = SYNC ;
   \   0000000C   8B52               STD     Z+18, R21
    901                  UART[ch].RxFirst = 0 ;
   \   0000000E   8754               STD     Z+12, R21
   \   00000010   8755               STD     Z+13, R21
    902              }
    903          }
   \                     ??GoToSyncUART_0:
   \   00000012   BF2F               OUT     0x3F, R18
   \   00000014   9508               RET

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart>_0`:
   \   00000000   E803               DW      59395
   \   00000002   01                 DB      1
   \   00000003   ....               DW      (??CheckActionUart_21) /2
   \   00000005   ....               DW      (??CheckActionUart_0) /2
   \   00000007   0A                 DB      0xa
   \   00000008   ....               DW      (??CheckActionUart_3) /2
   \   0000000A   0A                 DB      0xa
   \   0000000B   ....               DW      (??CheckActionUart_4) /2
   \   0000000D   32                 DB      0x32
   \   0000000E   ....               DW      (??CheckActionUart_5) /2
   \   00000010   0A                 DB      0xa
   \   00000011   ....               DW      (??CheckActionUart_6) /2
   \   00000013   0A                 DB      0xa
   \   00000014   ....               DW      (??CheckActionUart_7) /2
   \   00000016   0A                 DB      0xa
   \   00000017   ....               DW      (??CheckActionUart_8) /2
   \   00000019   0A                 DB      0xa
   \   0000001A   ....               DW      (??CheckActionUart_9) /2
   \   0000001C   1E                 DB      0x1e
   \   0000001D   ....               DW      (??CheckActionUart_11) /2
   \   0000001F   14                 DB      0x14
   \   00000020   ....               DW      (??CheckActionUart_10) /2
   \   00000022   28                 DB      0x28
   \   00000023   ....               DW      (??CheckActionUart_16) /2
   \   00000025   0A                 DB      0xa
   \   00000026   ....               DW      (??CheckActionUart_17) /2
   \   00000028   0A                 DB      0xa
   \   00000029   ....               DW      (??CheckActionUart_18) /2
   \   0000002B   0A                 DB      0xa
   \   0000002C   ....               DW      (??CheckActionUart_19) /2
   \   0000002E   0A                 DB      0xa
   \   0000002F   ....               DW      (??CheckActionUart_20) /2
   \   00000031   02FE9E             DB      254,0x2,0x9e
   \   00000034   ....               DW      (??CheckActionUart_2) /2
   \   00000036   FB                 DB      251
   \   00000037   00                 DB      0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   BuildADEpromdata
        4      2 ?S_EC_MUL_L02
        4      6 ?S_EC_MUL_L02
      4      2   BuildADInt
        4      2 ?S_EC_MUL_L02
      4      2   BuildANAFilter
        4      8 ?S_EC_MUL_L02
      4      2   BuildANASetup
        4      6 ?S_EC_MUL_L02
      6      2   BuildEEPROMData
        6      4   -> ReadEEPROMBuffer
        6      8 ?S_EC_MUL_L02
      6      2   BuildMData485
        6      4 ?S_EC_MUL_L02
        6      6 ?S_EC_MUL_L02
        6      8 ?S_EC_MUL_L02
      4      2   BuildMDataANA
        4      8 ?S_EC_MUL_L02
      8      2   BuildRData485
        8      4 ?S_EC_MUL_L02
        8      6 ?S_EC_MUL_L02
      4      2   BuildRS4Setup
        4      6 ?S_EC_MUL_L02
      4      2   BuildStackStatus
        4      4   -> OS_GetStackSpace
        4      6   -> OS_GetStackSpace
        4      8 ?S_EC_MUL_L02
      6      2   BuildStatusData
        6      2   -> MyAddress
        6      8 ?S_EC_MUL_L02
      9      2   BuildWHdata
        9      2   -> OS_LeaveRegion
        9      6 ?S_EC_MUL_L02
      0      2   CalcDSRxChecksum
        0      4 ?S_EC_MUL_L02
      6      2   CalcDSTxChecksum
        6      2 ?S_EC_MUL_L02
     12      2   CheckActionUart
       12      2   -> BuildADEpromdata
       12      2   -> BuildADInt
       12      2   -> BuildANAFilter
       12      2   -> BuildANASetup
       12      2   -> BuildEEPROMData
       12      2   -> BuildMData485
       12      2   -> BuildMDataANA
       12      2   -> BuildRData485
       12      2   -> BuildRS4Setup
       12      2   -> BuildStackStatus
       12      2   -> BuildStatusData
       12      2   -> BuildWHdata
       12      2   -> EEPROMReset
       12      2   -> GetADData
       12      2   -> GetANAFilter
       12      2   -> GetANASetup
       12      2   -> GetEEPROMData
       12      2   -> GetGotoBootloader
       12      2   -> GetRS4Setup
       12      2 ?SS_SHR_L02
       12      2 ?SV_SWITCH_L06
       12      4 ?S_EC_MUL_L02
      4      2   GetADData
        4      4 ?S_EC_MUL_L02
      4      2   GetANAFilter
        4      2 ?S_EC_MUL_L02
      4      2   GetANASetup
        4      2   -> SetAnaPort
        4      2   -> WriteEEPROMByte
        4      6 ?S_EC_MUL_L02
      8      2   GetEEPROMData
        8      4   -> OS_Delay
        8      4   -> OS__Gettime
        8      4   -> WriteEEPROMBuffer
        8      4 ?S_EC_MUL_L02
      0      2   GetGotoBootloader
      2      2   GetRS4Setup
        2      2   -> SetRS4Port
        2      2   -> WriteEEPROMByte
        2      4 ?S_EC_MUL_L02
      0      2   GetResetEEPROM
        0      2   -> EEPROMReset
      0      2   GoToSyncUART
        0      4 ?S_EC_MUL_L02
      4      2   ReceivePacketUart
        4      4   -> CalcDSRxChecksum
        4      2   -> GoToSyncUART
        4      2   -> MyAddress
        4      2   -> OS_SignalEvent
        4      6 ?S_EC_MUL_L02
      0      2   TimoutUSART0
        0      2   -> GoToSyncUART
        0      2   -> OS_StopTimer
      0      2   TimoutUSART0On
        0      2   -> OS_StopTimer
      0      2   TimoutUSART1
        0      2   -> GoToSyncUART
        0      2   -> OS_StopTimer
      0      2   TimoutUSART1On
        0      2   -> OS_StopTimer
      2      2   Uart_BuildHeader
        2      2   -> MyAddress
        2      6 ?S_EC_MUL_L02
      4      2   Uart_BuildTail
        4      2   -> CalcDSTxChecksum
        4      2   -> OS_RetriggerTimer
        4      2   -> Uart_BuildHeader
        4      4 ?S_EC_MUL_L02
      0      2   Usart0Handler
        0      2   -> OS_Unuse
        0      2   -> OS_Use
        0      4   -> OS_WaitEventTimed
        0      4   -> UsartCheckPackage
      0      2   Usart1Handler
        0      2   -> OS_Unuse
        0      2   -> OS_Use
        0      4   -> OS_WaitEventTimed
        0      4   -> UsartCheckPackage
      5      2   UsartCheckPackage
        5      2   -> CheckActionUart
        5      2   -> GoToSyncUART
        5      2   -> Uart_BuildTail
        5      6 ?S_EC_MUL_L02


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      56  ?<Jumptable for CheckActionUart>_0
       4  ??Subroutine156_0
       6  ??Subroutine157_0
       6  ??Subroutine158_0
      10  ??Subroutine159_0
       2  ??Subroutine160_0
       2  ??Subroutine161_0
       6  ??Subroutine162_0
       4  ??Subroutine163_0
       6  ??Subroutine164_0
       8  ??Subroutine165_0
       6  ??Subroutine166_0
       6  ??Subroutine167_0
       8  ??Subroutine168_0
       2  ??Subroutine169_0
       6  ??Subroutine170_0
       6  ??Subroutine171_0
       2  ?Subroutine0
      10  ?Subroutine1
       8  ?Subroutine100
       6  ?Subroutine101
       4  ?Subroutine102
      12  ?Subroutine103
       2  ?Subroutine104
       6  ?Subroutine106
      12  ?Subroutine107
       6  ?Subroutine108
       2  ?Subroutine109
      10  ?Subroutine11
       6  ?Subroutine111
       4  ?Subroutine112
       6  ?Subroutine113
       8  ?Subroutine114
       2  ?Subroutine116
       6  ?Subroutine117
       6  ?Subroutine118
       6  ?Subroutine119
       4  ?Subroutine12
       4  ?Subroutine120
      10  ?Subroutine121
       6  ?Subroutine122
      12  ?Subroutine124
       6  ?Subroutine125
       4  ?Subroutine126
       6  ?Subroutine127
       8  ?Subroutine128
       6  ?Subroutine129
       4  ?Subroutine130
       6  ?Subroutine131
       2  ?Subroutine132
       8  ?Subroutine133
       6  ?Subroutine134
       6  ?Subroutine135
       6  ?Subroutine136
       6  ?Subroutine137
       6  ?Subroutine138
       6  ?Subroutine139
       2  ?Subroutine14
       6  ?Subroutine140
       4  ?Subroutine141
       4  ?Subroutine142
       4  ?Subroutine143
       4  ?Subroutine144
       2  ?Subroutine145
       4  ?Subroutine146
       2  ?Subroutine147
       2  ?Subroutine148
       6  ?Subroutine149
       6  ?Subroutine15
       4  ?Subroutine150
       4  ?Subroutine151
       4  ?Subroutine152
       4  ?Subroutine153
       4  ?Subroutine154
       4  ?Subroutine155
      12  ?Subroutine16
      12  ?Subroutine17
      26  ?Subroutine18
       2  ?Subroutine19
       2  ?Subroutine2
       6  ?Subroutine20
       2  ?Subroutine21
       4  ?Subroutine23
       8  ?Subroutine24
       2  ?Subroutine25
       2  ?Subroutine26
       4  ?Subroutine27
       4  ?Subroutine28
      12  ?Subroutine29
       2  ?Subroutine3
       2  ?Subroutine30
      12  ?Subroutine31
       6  ?Subroutine32
       8  ?Subroutine35
       2  ?Subroutine36
      22  ?Subroutine37
       4  ?Subroutine38
      10  ?Subroutine39
      32  ?Subroutine4
      16  ?Subroutine40
      28  ?Subroutine41
      10  ?Subroutine43
       4  ?Subroutine44
       4  ?Subroutine45
       4  ?Subroutine47
      10  ?Subroutine48
       2  ?Subroutine49
      10  ?Subroutine50
       2  ?Subroutine51
       2  ?Subroutine53
       8  ?Subroutine54
       4  ?Subroutine55
       4  ?Subroutine57
       4  ?Subroutine58
       8  ?Subroutine59
      20  ?Subroutine6
       6  ?Subroutine61
       4  ?Subroutine62
      12  ?Subroutine63
       6  ?Subroutine64
       4  ?Subroutine66
      10  ?Subroutine67
       2  ?Subroutine7
       4  ?Subroutine70
       4  ?Subroutine71
       2  ?Subroutine72
       8  ?Subroutine73
       8  ?Subroutine75
      10  ?Subroutine76
      12  ?Subroutine77
       6  ?Subroutine78
      10  ?Subroutine79
       8  ?Subroutine80
      10  ?Subroutine81
       8  ?Subroutine82
       2  ?Subroutine85
      36  ?Subroutine86
      10  ?Subroutine87
       2  ?Subroutine88
       2  ?Subroutine89
      22  ?Subroutine9
       6  ?Subroutine90
      14  ?Subroutine91
      12  ?Subroutine92
       6  ?Subroutine95
       4  ?Subroutine96
      10  ?Subroutine97
      10  ?Subroutine99
      74  BuildADEpromdata
     162  BuildADInt
      62  BuildANAFilter
       6  BuildANASetup
      50  BuildEEPROMData
     136  BuildMData485
     132  BuildMDataANA
      86  BuildRData485
      20  BuildRS4Setup
      96  BuildStackStatus
     104  BuildStatusData
     158  BuildWHdata
      64  CalcDSRxChecksum
      54  CalcDSTxChecksum
     298  CheckActionUart
     104  GetADData
      42  GetANAFilter
      44  GetANASetup
     136  GetEEPROMData
      34  GetGotoBootloader
      56  GetRS4Setup
       4  GetResetEEPROM
      22  GoToSyncUART
     264  ReceivePacketUart
      18  TimoutUSART0
       6  TimoutUSART0On
      28  TimoutUSART1
      16  TimoutUSART1On
      92  Uart_BuildHeader
     130  Uart_BuildTail
      12  Usart0Handler
      12  Usart1Handler
      84  UsartCheckPackage
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_PORTE
       1  _A_UCSR0B
       1  _A_UCSR1B
       1  _A_WDTCR

 
     8 bytes in segment ABSOLUTE
 3 618 bytes in segment CODE
    56 bytes in segment SWITCH
 
 3 674 bytes of CODE memory
     0 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
