###############################################################################
#
# IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR           28/Sep/2017  11:34:44
# Copyright 1996-2017 IAR Systems AB.
# Startup license - IAR Embedded Workbench for Atmel AVR 7.10
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\init.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EW7047.tmp
#        (D:\S2Prog\IO\ANZB\Src\init.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\ANZB\Release_debug\Obj -D OS_LIBMODE_S -D OS_UART=0 -lCN
#        D:\S2Prog\IO\ANZB\Release_debug\List -y --initializers_in_flash
#        --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB\INC\ -I
#        D:\S2Prog\IO\ANZB\..\..\SHARED\INC\ --eeprom_size 4096 --clib -Ohz)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB\Release_debug\List\init.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Release_debug\Obj\init.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x26
   \   union <unnamed> volatile __io _A_ADCSR
   \                     _A_ADCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27
   \   union <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRR0L
   \                     _A_UBRR0L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x36
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3b
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x51
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUCSR
   \                     _A_MCUCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5c
   \   union <unnamed> volatile __io _A_XDIV
   \                     _A_XDIV:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x61
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x62
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x64
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x65
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6c
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6d
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x90
   \   union <unnamed> volatile __io _A_UBRR0H
   \                     _A_UBRR0H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x95
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x98
   \   union <unnamed> volatile __io _A_UBRR1H
   \                     _A_UBRR1H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x99
   \   union <unnamed> volatile __io _A_UBRR1L
   \                     _A_UBRR1L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9a
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9b
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9d
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          /*
     14          **===========================================================================
     15          ** Init the system according to board type
     16          **===========================================================================
     17          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     18          void InitSystem(void) {
   \                     InitSystem:
     19          
     20              DDRB    =  0x00 ;      // Port B data direction, bit 0, 4-7 out
   \   00000000   E000               LDI     R16, 0
   \   00000002   BB07               OUT     0x17, R16
     21          //    PORTB   =  0xc;
     22              UnitID  = (PINB >> 2)& 0x03;       //get the unit ID
   \   00000004   B306               IN      R16, 0x16
     23          #if (OS_UART == 0)
     24              UnitID = 0x00; //AStmark  for test
   \   00000006   E000               LDI     R16, 0
   \   00000008   9300....           STS     UnitID, R16
     25          #endif
     26          
     27              Init_CPU();                         // init all processes
   \   0000000C   ....               RCALL   Init_CPU
     28              Init_IO();
   \   0000000E   ....               RCALL   Init_IO
     29              Init_TMR() ;
   \   00000010   ....               RCALL   Init_TMR
     30          #if (OS_UART != 0)
     31              Init_USART(0, 38400) ;              // 
     32          #endif
     33              Init_USART(1, 38400) ;              //    
   \   00000012   E040               LDI     R20, 0
   \   00000014   E956               LDI     R21, 150
   \   00000016   E060               LDI     R22, 0
   \   00000018   E070               LDI     R23, 0
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   ....               RCALL   Init_USART
     34              Init_AD();
   \   0000001E   ....               RCALL   Init_AD
     35              Init_Values();                      // init the values in the system
     36          
     37              ADCSR |= 0x40 ;                     //start the AD convertion
   \   00000020   9A36               SBI     0x06, 0x06
     38          }
   \   00000022   9508               RET
   \   00000024                      REQUIRE _A_DDRB
   \   00000024                      REQUIRE _A_PINB
   \   00000024                      REQUIRE _A_ADCSR
     39          
     40          /*
     41          **===========================================================================
     42          ** Init the CPU related registers
     43          **===========================================================================
     44          */ 

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   2300               TST     R16
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
     45          void Init_CPU( void ) {
   \                     Init_CPU:
     46          
     47              __disable_interrupt();
   \   00000000   94F8               CLI
     48          
     49              /*--- Configure CPU and interrupts ---*/
     50              switch (UnitID) {
   \   00000002   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_6:
   \   00000004   F019               BREQ    ??Init_CPU_0
   \   00000006   950A               DEC     R16
   \   00000008   F061               BREQ    ??Init_CPU_1
   \   0000000A   C014               RJMP    ??Init_CPU_2
     51              case AN_ZB485:                  // AN-ZB485 
     52                  MCUCR = 0xc0 ;        // MCU control register  External Ram + wait state
   \                     ??Init_CPU_0:
   \   0000000C   EC00               LDI     R16, 192
   \   0000000E   BF05               OUT     0x35, R16
     53                  EIMSK = 0x00 ;        // External interrupt mask register, all off
   \   00000010   E000               LDI     R16, 0
   \   00000012   BF09               OUT     0x39, R16
     54                  EICRA = 0xAf ;        // External interrupt control register, 0,1 raising, rest faling
   \   00000014   EA0F               LDI     R16, 175
   \   00000016   9300....           STS     _A_EICRA, R16
     55                  EICRB = 0xAA ;        // External interrupt control register 
   \   0000001A   EA0A               LDI     R16, 170
   \   0000001C   BF0A               OUT     0x3A, R16
     56                  EIMSK = 0x03 ;        // External interrupt mask register, int 0 and 1 on 
   \   0000001E   E003               LDI     R16, 3
   \   00000020   C008               RJMP    ??Init_CPU_3
     57                  break;
     58              case AN_ZBANA:                  // AN-ZBANA
     59                  MCUCR = 0x00 ;        // MCU control register wait state
   \                     ??Init_CPU_1:
   \   00000022   E000               LDI     R16, 0
   \   00000024   BF05               OUT     0x35, R16
     60                  EIMSK = 0x00 ;        // External interrupt mask register , all off
   \   00000026   BF09               OUT     0x39, R16
     61                  EICRA = 0xAA ;        // External interrupt control register, o on faling edge
   \   00000028   EA0A               LDI     R16, 170
   \   0000002A   9300....           STS     _A_EICRA, R16
     62                  EICRB = 0xAA ;        // External interrupt control register 
   \   0000002E   BF0A               OUT     0x3A, R16
     63                  EIMSK = 0x01 ;        // External interrupt mask register, int 0 on 
   \   00000030   E001               LDI     R16, 1
   \                     ??Init_CPU_3:
   \   00000032   BF09               OUT     0x39, R16
     64                  break;
     65              }
     66              XMCRA = 0x00 ;       // maximum wait states
   \                     ??Init_CPU_2:
   \   00000034   E000               LDI     R16, 0
   \   00000036   9300....           STS     _A_XMCRA, R16
     67              XMCRB = 0x07 ;       // Full portC + bus keeper
   \   0000003A   E007               LDI     R16, 7
   \   0000003C   9300....           STS     _A_XMCRB, R16
     68              SREG  = 0x80 ;        // global interrupt
   \   00000040   E800               LDI     R16, 128
   \   00000042   BF0F               OUT     0x3F, R16
     69              XDIV  = 0x00 ;     // Init valuse used 0x00
   \   00000044   E000               LDI     R16, 0
   \   00000046   BF0C               OUT     0x3C, R16
     70          
     71          
     72              RestartStatus = MCUCSR;       // Remember reset source
   \   00000048   B704               IN      R16, 0x34
   \   0000004A   9300....           STS     RestartStatus, R16
     73              MCUCSR = 0x00;              // and reset
   \   0000004E   E000               LDI     R16, 0
   \   00000050   BF04               OUT     0x34, R16
     74              /*--- Initialize buffer ---*/
     75              WriteCount = 0;
   \   00000052   9300....           STS     WriteCount, R16
     76          
     77          }
   \   00000056   9508               RET
   \   00000058                      REQUIRE _A_MCUCR
   \   00000058                      REQUIRE _A_EIMSK
   \   00000058                      REQUIRE _A_EICRA
   \   00000058                      REQUIRE _A_EICRB
   \   00000058                      REQUIRE _A_XMCRA
   \   00000058                      REQUIRE _A_XMCRB
   \   00000058                      REQUIRE _A_SREG
   \   00000058                      REQUIRE _A_XDIV
   \   00000058                      REQUIRE _A_MCUCSR
     78          
     79          /*
     80          **===========================================================================
     81          ** Init the watchdog registers
     82          **===========================================================================
     83          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     84          __monitor void Init_Watchdog( void ) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
     85          
     86              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
     87              WDTCR = 0x0f;
   \   00000006   E00F               LDI     R16, 15
   \   00000008   BD01               OUT     0x21, R16
     88              asm("WDR");                             // kick the dog!!
   \   0000000A   95A8               WDR
     89          
     90          }
   \   0000000C   BF1F               OUT     0x3F, R17
   \   0000000E   9508               RET
   \   00000010                      REQUIRE _A_WDTCR
     91          
     92          /*
     93          **===========================================================================
     94          ** Init the IO related registers
     95          **===========================================================================
     96          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     97          void Init_IO( void ) {
   \                     Init_IO:
     98          
     99              /*--- Initialize the data registers, output value and input pullup ---*/
    100              switch (UnitID) {
   \   00000000   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_5:
   \   00000002   F019               BREQ    ??Init_IO_0
   \   00000004   950A               DEC     R16
   \   00000006   F0A9               BREQ    ??Init_IO_1
   \   00000008   9508               RET
    101              case AN_ZB485:                  // AN-ZB485  
    102                  DDRA   =  0xff ;      // Port A data direction (out), external bus
   \                     ??Init_IO_0:
   \   0000000A   EF0F               LDI     R16, 255
   \   0000000C   BB0A               OUT     0x1A, R16
    103                  PORTA  =  0x00 ;      // Port A data
   \   0000000E   E000               LDI     R16, 0
   \   00000010   BB0B               OUT     0x1B, R16
    104                  DDRB   =  0x10 ;      // Port B data direction, bit 0, 4-7 out
   \   00000012   E100               LDI     R16, 16
   \   00000014   ....               RCALL   ?Subroutine1
    105                  PORTB  =  0x00 ;      // Port B data   
    106                  DDRC   =  0xff ;      // Port C data direction, all out
    107                  PORTC  =  0x00 ;      // Port C data
    108                  DDRD   =  0x00 ;      // Port D data direction, all in except output to osc and txd
   \                     ??CrossCallReturnLabel_2:
   \   00000016   BB01               OUT     0x11, R16
    109                  PORTD  =  0xff ;      // Port D data pullup on int fro AD
   \   00000018   EF0F               LDI     R16, 255
   \   0000001A   BB02               OUT     0x12, R16
    110                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   0000001C   EF0E               LDI     R16, 254
   \   0000001E   B902               OUT     0x02, R16
    111                  PORTE  =  0xf0 ;      // Port E data 
   \   00000020   EF00               LDI     R16, 240
   \   00000022   B903               OUT     0x03, R16
    112                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000024   E000               LDI     R16, 0
   \   00000026   ....               RCALL   ?Subroutine3
    113                  PORTF  =  0x00 ;      // Port F data 
    114                  DDRG   =  0x07 ;      // Port G data direction, port 1,2,3 out
   \                     ??CrossCallReturnLabel_7:
   \   00000028   E007               LDI     R16, 7
   \   0000002A   9300....           STS     _A_DDRG, R16
    115                  PORTG  =  0x03 ;      // Port G data 
   \   0000002E   E003               LDI     R16, 3
   \   00000030   C012               RJMP    ??Init_IO_2
    116                  break;
    117              case AN_ZBANA:                  // AN-ZBANA
    118                  DDRA   =  0x00 ;      // Port A data direction in (not used)
   \                     ??Init_IO_1:
   \   00000032   E000               LDI     R16, 0
   \   00000034   BB0A               OUT     0x1A, R16
    119                  PORTA  =  0x00 ;      // Port A data
   \   00000036   BB0B               OUT     0x1B, R16
    120                  DDRB   =  0xF1 ;      // Port B data direction, bit 0, 4-7 out
   \   00000038   EF01               LDI     R16, 241
   \   0000003A   ....               RCALL   ?Subroutine1
    121                  PORTB  =  0x00 ;      // Port B data   
    122                  DDRC   =  0xFF ;      // Port C data direction, all out
    123                  PORTC  =  0x00 ;      // Port C data
    124                  DDRD   =  0x02 ;      // Port D data direction, all in except output to osc and txd
   \                     ??CrossCallReturnLabel_3:
   \   0000003C   E002               LDI     R16, 2
   \   0000003E   BB01               OUT     0x11, R16
    125                  PORTD  =  0xf1 ;      // Port D data pullup on int fro AD
   \   00000040   EF01               LDI     R16, 241
   \   00000042   BB02               OUT     0x12, R16
    126                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   00000044   EF0E               LDI     R16, 254
   \   00000046   B902               OUT     0x02, R16
    127                  PORTE  =  0x00 ;      // Port E data 
   \   00000048   E000               LDI     R16, 0
   \   0000004A   B903               OUT     0x03, R16
    128                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   0000004C   ....               RCALL   ?Subroutine3
    129                  PORTF  =  0x00 ;      // Port F data 
    130                  DDRG   =  0x10 ;      // Port G data direction, bit 5 out
   \                     ??CrossCallReturnLabel_8:
   \   0000004E   E100               LDI     R16, 16
   \   00000050   9300....           STS     _A_DDRG, R16
    131                  PORTG  =  0x00 ;      // Port G data 
   \   00000054   E000               LDI     R16, 0
   \                     ??Init_IO_2:
   \   00000056   9300....           STS     _A_PORTG, R16
    132                  break;
    133              default:
    134                  break;
    135              }    
    136          }
   \   0000005A   9508               RET
   \   0000005C                      REQUIRE _A_DDRA
   \   0000005C                      REQUIRE _A_PORTA
   \   0000005C                      REQUIRE _A_DDRB
   \   0000005C                      REQUIRE _A_PORTB
   \   0000005C                      REQUIRE _A_DDRC
   \   0000005C                      REQUIRE _A_PORTC
   \   0000005C                      REQUIRE _A_DDRD
   \   0000005C                      REQUIRE _A_PORTD
   \   0000005C                      REQUIRE _A_DDRE
   \   0000005C                      REQUIRE _A_PORTE
   \   0000005C                      REQUIRE _A_DDRF
   \   0000005C                      REQUIRE _A_PORTF
   \   0000005C                      REQUIRE _A_DDRG
   \   0000005C                      REQUIRE _A_PORTG

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   9300....           STS     _A_DDRF, R16
   \   00000004   9300....           STS     _A_PORTF, R16
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   BB07               OUT     0x17, R16
   \   00000002   E000               LDI     R16, 0
   \   00000004   BB08               OUT     0x18, R16
   \   00000006   EF0F               LDI     R16, 255
   \   00000008   BB04               OUT     0x14, R16
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   BB05               OUT     0x15, R16
   \   0000000E   9508               RET
    137          
    138          /*
    139          **===========================================================================
    140          ** Init the timer related registers
    141          **===========================================================================
    142          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    143          void Init_TMR( void ) {
   \                     Init_TMR:
    144              /*--- Timer control (disable clock inputs) ---*/
    145          
    146              switch (UnitID) {
   \   00000000   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_4:
   \   00000002   F019               BREQ    ??Init_TMR_0
   \   00000004   950A               DEC     R16
   \   00000006   F029               BREQ    ??Init_TMR_1
   \   00000008   9508               RET
    147              case AN_ZB485:                  // AN-ZB485
    148                  TCCR0   =  0x99 ;      // Timer control register 0 
   \                     ??Init_TMR_0:
   \   0000000A   E909               LDI     R16, 153
   \   0000000C   BF03               OUT     0x33, R16
    149                  OCR0    =  3;         // Timer output compare register 0, 2MHZ //16MHz xtal
   \   0000000E   E003               LDI     R16, 3
   \   00000010   C003               RJMP    ??Init_TMR_2
    150                  break;
    151              case AN_ZBANA:                  // AN-ZBANA
    152                  TCCR0   =  0x99 ;      // Timer control register 0 
   \                     ??Init_TMR_1:
   \   00000012   E909               LDI     R16, 153
   \   00000014   BF03               OUT     0x33, R16
    153                  OCR0    =  7 ;         // Timer output compare register 0, 1MHZ //16MHz xtal
   \   00000016   E007               LDI     R16, 7
   \                     ??Init_TMR_2:
   \   00000018   BF01               OUT     0x31, R16
    154                  break;
    155              default:
    156                  break;
    157              }
    158          
    159          } 
   \   0000001A   9508               RET
   \   0000001C                      REQUIRE _A_TCCR0
   \   0000001C                      REQUIRE _A_OCR0
    160          
    161          /*
    162          **===========================================================================
    163          ** Init the USARTs registers
    164          **===========================================================================
    165          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    166          void Init_USART( char channel, unsigned long baud ) {
   \                     Init_USART:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01CA               MOVW    R25:R24, R21:R20
    167          
    168          
    169              /*--- Configure UART data block ---*/
    170              UART[channel].TxFirst   = 0x00;
   \   00000008   ....               LDI     R18, LOW(UART)
   \   0000000A   ....               LDI     R19, (UART) >> 8
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F9               MOVW    R31:R30, R19:R18
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   8352               STD     Z+2, R21
   \   0000001E   8353               STD     Z+3, R21
    171              UART[channel].TxLast    = 0x00;
   \   00000020   8354               STD     Z+4, R21
   \   00000022   8355               STD     Z+5, R21
    172              UART[channel].TxCount   = 0x00;
   \   00000024   8356               STD     Z+6, R21
   \   00000026   8357               STD     Z+7, R21
    173              UART[channel].RxFirst   = 0x00;
   \   00000028   8754               STD     Z+12, R21
   \   0000002A   8755               STD     Z+13, R21
    174              UART[channel].RxLast    = 0x00;
   \   0000002C   8756               STD     Z+14, R21
   \   0000002E   8757               STD     Z+15, R21
    175              UART[channel].RxCount   = 0x00;
   \   00000030   8B50               STD     Z+16, R21
   \   00000032   8B51               STD     Z+17, R21
    176              UART[channel].RxState   = SYNC;
   \   00000034   8B52               STD     Z+18, R21
    177              UART[channel].SyncCnt   = 0 ;
   \   00000036   8B53               STD     Z+19, R21
    178              UART[channel].TxStatus  = 0x00;
   \   00000038   8750               STD     Z+8, R21
    179          
    180              switch (channel) {
   \   0000003A   2022               TST     R2
   \   0000003C   F019               BREQ    ??Init_USART_0
   \   0000003E   942A               DEC     R2
   \   00000040   F0D9               BREQ    ??Init_USART_1
   \   00000042   C036               RJMP    ??Init_USART_2
    181              case 0x00 :          
    182                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_0:
   \   00000044   01F9               MOVW    R31:R30, R19:R18
   \   00000046   EF0A               LDI     R16, 250
   \   00000048   8B04               STD     Z+20, R16
   \   0000004A   8B55               STD     Z+21, R21
    183                  UART[channel].pTxBuffer = TxBufferCh0;        
   \   0000004C   ....               LDI     R16, LOW(TxBufferCh0)
   \   0000004E   ....               LDI     R17, (TxBufferCh0) >> 8
   \   00000050   8300               ST      Z, R16
   \   00000052   8311               STD     Z+1, R17
    184                  UART[channel].pRxBuffer = RxBufferCh0;        
   \   00000054   ....               LDI     R16, LOW(RxBufferCh0)
   \   00000056   ....               LDI     R17, (RxBufferCh0) >> 8
   \   00000058   8702               STD     Z+10, R16
   \   0000005A   8713               STD     Z+11, R17
    185                  UCSR0A  = 0x00; 
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   B90B               OUT     0x0B, R16
    186                  UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   00000060   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   00000062   B949               OUT     0x09, R20
    187                  UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   00000064   5001               SUBI    R16, 1
   \   00000066   4010               SBCI    R17, 0
   \   00000068   9310....           STS     _A_UBRR0H, R17
    188                  UCSR0B  = 0xb8;       /* tx/ rx enable, int udre/rxon */
   \   0000006C   EB08               LDI     R16, 184
   \   0000006E   B90A               OUT     0x0A, R16
    189                  UCSR0C  = 0x06;       /* n,8,1 */
   \   00000070   E006               LDI     R16, 6
   \   00000072   9300....           STS     _A_UCSR0C, R16
    190                  break;
   \   00000076   C01C               RJMP    ??Init_USART_2
    191              case 0x01 :
    192                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_1:
   \   00000078   01F9               MOVW    R31:R30, R19:R18
   \   0000007A   EF0A               LDI     R16, 250
   \   0000007C   A706               STD     Z+46, R16
   \   0000007E   A757               STD     Z+47, R21
    193                  UART[channel].pTxBuffer = TxBufferCh1;
   \   00000080   ....               LDI     R16, LOW(TxBufferCh1)
   \   00000082   ....               LDI     R17, (TxBufferCh1) >> 8
   \   00000084   8F02               STD     Z+26, R16
   \   00000086   8F13               STD     Z+27, R17
    194                  UART[channel].pRxBuffer = RxBufferCh1;
   \   00000088   ....               LDI     R16, LOW(RxBufferCh1)
   \   0000008A   ....               LDI     R17, (RxBufferCh1) >> 8
   \   0000008C   A304               STD     Z+36, R16
   \   0000008E   A315               STD     Z+37, R17
    195                  UCSR1A  = 0x00; 
   \   00000090   E000               LDI     R16, 0
   \   00000092   9300....           STS     _A_UCSR1A, R16
    196                  UBRR1L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   00000096   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   00000098   9340....           STS     _A_UBRR1L, R20
    197                  UBRR1H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   0000009C   5001               SUBI    R16, 1
   \   0000009E   4010               SBCI    R17, 0
   \   000000A0   9310....           STS     _A_UBRR1H, R17
    198                  UCSR1B  = 0xb8;       /* tx/ rx enable, int udre/rxon */
   \   000000A4   EB08               LDI     R16, 184
   \   000000A6   9300....           STS     _A_UCSR1B, R16
    199                  UCSR1C  = 0x06;       /* n,8,1 */
   \   000000AA   E006               LDI     R16, 6
   \   000000AC   9300....           STS     _A_UCSR1C, R16
    200                  break;
    201              default:
    202                  break ;
    203              }    
    204          }
   \                     ??Init_USART_2:
   \   000000B0   9189               LD      R24, Y+
   \   000000B2   9199               LD      R25, Y+
   \   000000B4   9508               RET
   \   000000B6                      REQUIRE _A_UCSR0A
   \   000000B6                      REQUIRE _A_UBRR0L
   \   000000B6                      REQUIRE _A_UBRR0H
   \   000000B6                      REQUIRE _A_UCSR0B
   \   000000B6                      REQUIRE _A_UCSR0C
   \   000000B6                      REQUIRE _A_UCSR1A
   \   000000B6                      REQUIRE _A_UBRR1L
   \   000000B6                      REQUIRE _A_UBRR1H
   \   000000B6                      REQUIRE _A_UCSR1B
   \   000000B6                      REQUIRE _A_UCSR1C

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   E814               LDI     R17, 132
   \   00000002   E023               LDI     R18, 3
   \   00000004   E030               LDI     R19, 0
   \   00000006   01AC               MOVW    R21:R20, R25:R24
   \   00000008   ........           CALL    ?UL_DIVMOD_L03
   \   0000000C   2F40               MOV     R20, R16
   \   0000000E   954A               DEC     R20
   \   00000010   9508               RET
    205          
    206          
    207          /*
    208          **===========================================================================
    209          ** Init the AD converter registers
    210          **===========================================================================
    211          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    212          void Init_AD( void ) {
   \                     Init_AD:
    213          
    214              char i;     
    215              for (i = 0; i<8; i++) {                 // Init variables
   \   00000000   E010               LDI     R17, 0
   \   00000002   E008               LDI     R16, 8
    216                  ADInt.Result[i] = 0;                   // convertion resluts
   \                     ??Init_AD_0:
   \   00000004   E022               LDI     R18, 2
   \   00000006   9F12               MUL     R17, R18
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(ADInt) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(ADInt) & 0xFFFF) >> 8
   \   0000000E   E020               LDI     R18, 0
   \   00000010   8320               ST      Z, R18
   \   00000012   8321               STD     Z+1, R18
    217              }
   \   00000014   9513               INC     R17
   \   00000016   950A               DEC     R16
   \   00000018   F7A9               BRNE    ??Init_AD_0
    218              ADChannel = 0x00 ;                      // AD channel to be converted
   \   0000001A   9320....           STS     ADChannel, R18
    219              ADMUX   = 0xc0 ;                        // Ref = 2,56V, right adjust
   \   0000001E   EC00               LDI     R16, 192
   \   00000020   B907               OUT     0x07, R16
    220              ADCSR   = 0x8f ;                        // AD enabled, int enabled, xtal / 128
   \   00000022   E80F               LDI     R16, 143
   \   00000024   B906               OUT     0x06, R16
    221          }
   \   00000026   9508               RET
   \   00000028                      REQUIRE _A_ADMUX
   \   00000028                      REQUIRE _A_ADCSR
    222          
    223          /*
    224          **===========================================================================
    225          ** Init values  in the system
    226          **===========================================================================
    227          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    228          void Init_Values(void) {
   \                     Init_Values:
    229          
    230          
    231          }
   \   00000000   9508               RET

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   InitSystem
        0      2   -> Init_AD
        0      2   -> Init_CPU
        0      2   -> Init_IO
        0      2   -> Init_TMR
        0      2   -> Init_USART
      0      2   Init_AD
      0      2   Init_CPU
      0      2   Init_IO
      0      2   Init_TMR
      2      2   Init_USART
        2      2 ?S_EC_MUL_L02
        2      4 ?UL_DIVMOD_L03
      0      2   Init_Values
      0      2   Init_Watchdog


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ?Subroutine0
      16  ?Subroutine1
       8  ?Subroutine2
      10  ?Subroutine3
      36  InitSystem
      40  Init_AD
      88  Init_CPU
      92  Init_IO
      28  Init_TMR
     182  Init_USART
       2  Init_Values
      16  Init_Watchdog
       1  _A_ADCSR
       1  _A_ADMUX
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_MCUCR
       1  _A_MCUCSR
       1  _A_OCR0
       1  _A_PINB
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_SREG
       1  _A_TCCR0
       1  _A_UBRR0H
       1  _A_UBRR0L
       1  _A_UBRR1H
       1  _A_UBRR1L
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_WDTCR
       1  _A_XDIV
       1  _A_XMCRA
       1  _A_XMCRB

 
  39 bytes in segment ABSOLUTE
 536 bytes in segment CODE
 
 536 bytes of CODE memory
   0 bytes of DATA memory (+ 39 bytes shared)

Errors: none
Warnings: none
