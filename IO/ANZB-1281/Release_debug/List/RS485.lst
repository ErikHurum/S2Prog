###############################################################################
#
# IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR           28/Sep/2017  11:34:46
# Copyright 1996-2017 IAR Systems AB.
# Startup license - IAR Embedded Workbench for Atmel AVR 7.10
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\RS485.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EW7220.tmp
#        (D:\S2Prog\IO\ANZB\Src\RS485.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\ANZB\Release_debug\Obj -D OS_LIBMODE_S -D OS_UART=0 -lCN
#        D:\S2Prog\IO\ANZB\Release_debug\List -y --initializers_in_flash
#        --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB\INC\ -I
#        D:\S2Prog\IO\ANZB\..\..\SHARED\INC\ --eeprom_size 4096 --clib -Ohz)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB\Release_debug\List\RS485.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Release_debug\Obj\RS485.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\RS485.c
      1          
      2          /****************************************************************************************
      3          / Uart communication to external ADcards
      4          /
      5          ***************************************************************************************/
      6          
      7          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          //#include "stdlib.h"
     13          //#include "string.h"
     14          
     15          
     16          
     17          /************************************************ *************************
     18          *   (This is a timer calback)
     19          *  Timout timer UART 0
     20          *
     21          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     22          void TimoutUART0(void) {
   \                     TimoutUART0:
     23          
     24              U0_MCR &= ~RTS;      // set RTS off
   \   00000000   E0EC               LDI     R30, LOW(4364)
   \   00000002   ....               RJMP    ?Subroutine6
     25          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   E1F1               LDI     R31, (4364) >> 8
   \   00000002   8100               LD      R16, Z
   \   00000004   7F0D               ANDI    R16, 0xFD
   \   00000006                      REQUIRE ?Subroutine125
   \   00000006                      ;               // Fall through to label ?Subroutine125

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine125:
   \   00000000   8300               ST      Z, R16
   \   00000002   9508               RET
     26          
     27          /*************************************************************************
     28          *   (This is a timer calback)
     29          *  Timout timer UART 1
     30          *
     31          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     32          void TimoutUART1(void) {
   \                     TimoutUART1:
     33          
     34              U1_MCR &= ~RTS;       // set RTS off
   \   00000000   E0E4               LDI     R30, LOW(4356)
   \   00000002                      REQUIRE ?Subroutine6
   \   00000002                      ;               // Fall through to label ?Subroutine6
     35          }
     36          
     37          
     38          /*************************************************************************
     39          *   (This is a task)
     40          *  Usart handler UART send request
     41          *
     42          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     43          void ExtRS485Ctl(void) {
   \                     ExtRS485Ctl:
   \   00000000   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_88:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
     44              char SeqCnt = 0;
   \   00000002   2444               CLR     R4
     45              char PowerOnTimer = POWER_ON_CNT;                    // do not make a unwanted power on sequence in the starting phase
   \   00000004   E005               LDI     R16, 5
   \   00000006   2E50               MOV     R5, R16
     46              char EventStatus;
     47              char AskMD[2];
     48          
     49              Init16552(0, 9600);                                      // Init UART channel 0
   \   00000008   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_91:
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   ....               RCALL   Init16552
     50              Init16552(1, 9600);                                      // Init UART channel 1
   \   0000000E   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_92:
   \   00000010   E001               LDI     R16, 1
   \   00000012   ....               RCALL   Init16552
     51          
     52              TData.RS4.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP);   // Get setup from EEPROM
   \   00000014   E002               LDI     R16, 2
   \   00000016   ....               RCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_19:
   \   00000018   9300....           STS     TData, R16
     53              TData.RS4.SensorType[0] = ReadEEPROMByte(EEPROM_PORTSETUP + 1);
   \   0000001C   E003               LDI     R16, 3
   \   0000001E   ....               RCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_18:
   \   00000020   9300....           STS     (TData + 1), R16
     54              TData.RS4.SensorType[1] = ReadEEPROMByte(EEPROM_PORTSETUP + 2);
   \   00000024   E004               LDI     R16, 4
   \   00000026   ....               RCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_17:
   \   00000028   9300....           STS     (TData + 2), R16
     55          
     56              TData.RS4.ToTargetBuffer[0][0] = false;
   \   0000002C   9240....           STS     (TData + 1268), R4
     57              TData.RS4.ToTargetBuffer[1][0] = false;
   \   00000030   9240....           STS     (TData + 1348), R4
     58              TData.RS4.FromTargetBuffer[0][0] = false;
   \   00000034   9240....           STS     (TData + 1428), R4
     59              TData.RS4.FromTargetBuffer[1][0] = false;
   \   00000038   9240....           STS     (TData + 1478), R4
     60          
     61              for (char i = 0; i < 8; i++) {
   \   0000003C   E0B0               LDI     R27, 0
   \   0000003E   E0A8               LDI     R26, 8
     62                  SetBit(PORTC, (TData.RS4.PortUsed & (0x01 << i)));      // Switch on power
   \                     ??ExtRS485Ctl_0:
   \   00000040   94F8               CLI
   \   00000042   9120....           LDS     R18, TData
   \   00000046   E001               LDI     R16, 1
   \   00000048   E010               LDI     R17, 0
   \   0000004A   2F4B               MOV     R20, R27
   \   0000004C   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_84:
   \   0000004E   2320               AND     R18, R16
   \   00000050   B305               IN      R16, 0x15
   \   00000052   2B02               OR      R16, R18
   \   00000054   BB05               OUT     0x15, R16
   \   00000056   ....               RCALL   ?Subroutine101
     63                  OS_Delay(100);
   \                     ??CrossCallReturnLabel_145:
   \   00000058   E604               LDI     R16, 100
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   ....               RCALL   ?Subroutine56
     64              }
   \                     ??CrossCallReturnLabel_78:
   \   0000005E   95B3               INC     R27
   \   00000060   95AA               DEC     R26
   \   00000062   F771               BRNE    ??ExtRS485Ctl_0
     65              OS_Delay(UART_START_DELAY);                               // Waiting for target startup
   \   00000064   E700               LDI     R16, 112
   \   00000066   E117               LDI     R17, 23
   \   00000068   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_77:
   \   0000006A   ....               LDI     R26, LOW((TData + 1528))
   \   0000006C   ....               LDI     R27, HIGH((TData + 1528))
   \   0000006E   ....               LDI     R16, LOW((TData + 1428))
   \   00000070   ....               LDI     R17, HIGH((TData + 1428))
   \   00000072   0138               MOVW    R7:R6, R17:R16
   \   00000074   C005               RJMP    ??ExtRS485Ctl_1
     66          
     67              while (1) {
     68                  for (PortPair = 0; PortPair < 4; PortPair++) {        // loop through all ports
     69                      if (UART16552[0].RxFaultCnt > MAX_16552_FAIL) {
     70                          EmptyRxBuf16552(0);                            // Empty UART channel 0
     71                      }
     72                      if (UART16552[1].RxFaultCnt > MAX_16552_FAIL) {
     73                          EmptyRxBuf16552(1);                            // Empty UART channel 1
     74                      }
     75                      if (PowerOnTimer < POWER_ON_CNT) {
     76                          if (++PowerOnTimer >= POWER_ON_CNT) {          // check if time to switch on power
     77                              SetRS4Port();                                // and set power on ports
     78                          }
     79                      }
     80                      SetBit(PORTE, 0xf0);
     81                      ClrBit(PORTE, (0x10 << PortPair) & 0xf0);            // set mux port
     82                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
     83                          UART16552[0].TxFirst = 6;                       // Start packet build at pos.
     84                          char SnsType = (TData.RS4.SensorType[0] >> (2 * PortPair));
     85                          if (SnsType == 0x01) {    //Water ingress??
     86                              switch (SeqCnt) {
     87                              case 0:
     88                                  Uart_BuildReqWISCardStatus(0);          //Card status
     89                                  break;
     90                              case 20:
     91                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
     92                                      Uart_BuildReqWISXData(0, 115);            // Request serial no
     93                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
     94                                          TData.RS4.EEPROMPortpair[0] = 0;
     95                                      }
     96                                  } else {
     97                                      Uart_BuildReqWISData(0);                //WIS data
     98                                  }
     99                                  break;
    100                              default:
    101                                  Uart_BuildReqWISData(0);                //WIS data
    102                                  break;
    103                              }
    104                          } else if (SnsType == 0x02) {       // Radar??
    105                              switch (SeqCnt) {
    106                              case 20:
    107                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    108                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    109                                          TData.RS4.EEPROMPortpair[0] = 0;
    110                                      }
    111                                  }
    112                                  // Fall through and send the request
    113                              default:
    114                                  Uart_BuildReqRadarData(0);          // Radar data
    115                                  break;
    116                              case 0:
    117                                  Uart_BuildReqRadarInfo(0);          //Radar Information
    118                                  break;
    119                              }
    120                          } else {                                        // AN-SGCNV
    121                              if ((TData.RS4.ToTargetBuffer[0][0] == true) && // Data ready for this AD card
    122                                  (TData.RS4.ToTargetBuffer[0][1] == PortPair)) {
    123                                  Uart_BuildSndData(0);                       // add data to AD card package
    124                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    125                                  AskMD[0] = false;
    126                              } else {
    127                                  AskMD[0] = true;
    128                              }
    129                              if (SeqCnt == 0) {
    130                                  Uart_BuildReqCardStatus(0);             //Card status, cmd 27
    131                              } else if (SeqCnt == 5) {
    132                                  Uart_BuildReqR16552(0);                 //Raw data, cmd 13
    133                              } else if (SeqCnt == 10) {
    134                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    135                              } else if (SeqCnt == 15) {
    136                                  Uart_BuildReqC16552(0);                 //Cal data, cmd 16
    137                              } else if (SeqCnt == 20) {
    138                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    139                                      Uart_BuildReqEEPROMData(0);             //EEpromdata cmd, 24
    140                                      if ((TData.RS4.EEPROMADChannel[0] += 2) > 14) { //Next channel
    141                                          TData.RS4.EEPROMADChannel[0] = 0;
    142                                          if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    143                                              TData.RS4.EEPROMPortpair[0] = 0;
    144                                          }
    145                                      }
    146                                  } else if (AskMD[0] == true) {
    147                                      Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    148                                  }
    149                              } else if (AskMD[0] == true) {
    150                                  Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    151                              }
    152                          }
    153                          Uart_BuildTail16552(0);
    154                      } else {
    155                          if (TData.RS4.EEPROMPortpair[0] == PortPair) {
    156                              if (++TData.RS4.EEPROMPortpair[0] >= 4) {  // make sure that the EEPROM reading is not stopped
    157                                  TData.RS4.EEPROMPortpair[0] = 0;
    158                              }
    159                          }
    160                      }
    161                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
    162                          UART16552[1].TxFirst = 6;                       // Start at
    163                          char SnsType = (TData.RS4.SensorType[1] >> (2 * PortPair));
    164                          if (SnsType == 0x01) {    //Water ingress??
    165                              switch (SeqCnt) {
    166                              case 0:
    167                                  Uart_BuildReqWISCardStatus(1);          //Card status
    168                                  break;
    169                              case 20:
    170                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    171                                      Uart_BuildReqWISXData(1, 115);            // Request serial no
    172                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    173                                          TData.RS4.EEPROMPortpair[1] = 0;
    174                                      }
    175                                  } else {
    176                                      Uart_BuildReqWISData(1);                //WIS data
    177                                  }
    178                                  break;
    179                              default:
    180                                  Uart_BuildReqWISData(1);                //WIS data
    181                                  break;
    182                              }
    183                          } else if (SnsType == 0x02) {       // Radar??
    184                              switch (SeqCnt) {
    185                              case 20:
    186                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    187                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    188                                          TData.RS4.EEPROMPortpair[1] = 0;
    189                                      }
    190                                  }
    191                                  // Fall through and send the request
    192                              default:
    193                                  Uart_BuildReqRadarData(1);          // Radar data
    194                                  break;
    195                              case 0:
    196                                  Uart_BuildReqRadarInfo(1);          //Radar Information
    197                                  break;
    198                              }
    199                          } else {                                        // AN-SGCNV
    200                              if ((TData.RS4.ToTargetBuffer[1][0] == true) && // Data ready for this AD card
    201                                  (TData.RS4.ToTargetBuffer[1][1] == (PortPair + 4))) {
    202                                  Uart_BuildSndData(1);                       // add data to AD card package
    203                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    204                                  AskMD[1] = false;
    205                              } else {
    206                                  AskMD[1] = true;
    207                              }
    208                              if (SeqCnt == 0) {
    209                                  Uart_BuildReqCardStatus(1);             //Card status, cmd 27
    210                              } else if (SeqCnt == 5) {
    211                                  Uart_BuildReqR16552(1);                 //Raw data cmd, 13
    212                              } else if (SeqCnt == 10) {
    213                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    214                              } else if (SeqCnt == 15) {
    215                                  Uart_BuildReqC16552(1);                 //Cal data  cmd, 16
    216                              } else if (SeqCnt == 20) {
    217                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    218                                      Uart_BuildReqEEPROMData(1);             //EEpromdata cmd, 24
    219                                      if ((TData.RS4.EEPROMADChannel[1] += 2) > 14) { //Next channel
    220                                          TData.RS4.EEPROMADChannel[1] = 0;
    221                                          if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    222                                              TData.RS4.EEPROMPortpair[1] = 0;
    223                                          }
    224                                      }
    225                                  } else if (AskMD[1] == true) {
    226                                      Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    227                                  }
    228                              } else if (AskMD[1] == true) {
    229                                  Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    230                              }
    231                          }
    232                          Uart_BuildTail16552(1);
    233                      } else {
    234                          if (TData.RS4.EEPROMPortpair[1] == PortPair) {
    235                              if (++TData.RS4.EEPROMPortpair[1] >= 4) {  // make sure that the EEPROM reading is not stopped
    236                                  TData.RS4.EEPROMPortpair[1] = 0;
    237                              }
    238                          }
    239                      }
    240                      EventStatus = OS_WaitEventTimed(1, 1000);              // Wait for ready to send next
    241                      if (EventStatus & 0x02) {
    242                          if (PowerOnTimer >= POWER_ON_CNT) {
    243                              PowerOnTimer = 0;                              // and start over again
    244                          }
    245                      }
    246                  }
    247                  if (++SeqCnt > 20) {              //  all request within 20 x 2 sec.
   \                     ??ExtRS485Ctl_2:
   \   00000076   9443               INC     R4
   \   00000078   E105               LDI     R16, 21
   \   0000007A   1640               CP      R4, R16
   \   0000007C   F008               BRCS    ??ExtRS485Ctl_1
    248                      SeqCnt = 0;
   \   0000007E   2444               CLR     R4
    249                  }
   \                     ??ExtRS485Ctl_1:
   \   00000080   E000               LDI     R16, 0
   \   00000082   9300....           STS     PortPair, R16
   \   00000086   C013               RJMP    ??ExtRS485Ctl_3
   \                     ??ExtRS485Ctl_4:
   \   00000088   ....               RCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_52:
   \   0000008A   F409               BRNE    ??CrossCallReturnLabel_4
   \   0000008C   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_4:
   \   0000008E   EE28               LDI     R18, 232
   \   00000090   E033               LDI     R19, 3
   \   00000092   E001               LDI     R16, 1
   \   00000094   ........           CALL    OS_WaitEventTimed
   \   00000098   FB01               BST     R16, 1
   \   0000009A   F426               BRTC    ??ExtRS485Ctl_5
   \   0000009C   E005               LDI     R16, 5
   \   0000009E   1650               CP      R5, R16
   \   000000A0   F008               BRCS    ??ExtRS485Ctl_5
   \   000000A2   2455               CLR     R5
   \                     ??ExtRS485Ctl_5:
   \   000000A4   ....               LDI     R30, LOW(PortPair)
   \   000000A6   ....               LDI     R31, (PortPair) >> 8
   \   000000A8   8100               LD      R16, Z
   \   000000AA   9503               INC     R16
   \   000000AC   8300               ST      Z, R16
   \                     ??ExtRS485Ctl_3:
   \   000000AE   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_156:
   \   000000B0   3004               CPI     R16, 4
   \   000000B2   F708               BRCC    ??ExtRS485Ctl_2
   \   000000B4   9100....           LDS     R16, (UART16552 + 24)
   \   000000B8   3009               CPI     R16, 9
   \   000000BA   F010               BRCS    ??ExtRS485Ctl_6
   \   000000BC   E000               LDI     R16, 0
   \   000000BE   ....               RCALL   EmptyRxBuf16552
   \                     ??ExtRS485Ctl_6:
   \   000000C0   9100....           LDS     R16, (UART16552 + 50)
   \   000000C4   3009               CPI     R16, 9
   \   000000C6   F010               BRCS    ??ExtRS485Ctl_7
   \   000000C8   E001               LDI     R16, 1
   \   000000CA   ....               RCALL   EmptyRxBuf16552
   \                     ??ExtRS485Ctl_7:
   \   000000CC   E005               LDI     R16, 5
   \   000000CE   1650               CP      R5, R16
   \   000000D0   F430               BRCC    ??ExtRS485Ctl_8
   \   000000D2   9453               INC     R5
   \   000000D4   1650               CP      R5, R16
   \   000000D6   F018               BRCS    ??ExtRS485Ctl_8
   \   000000D8   9100....           LDS     R16, TData
   \   000000DC   BB05               OUT     0x15, R16
   \                     ??ExtRS485Ctl_8:
   \   000000DE   94F8               CLI
   \   000000E0   B103               IN      R16, 0x03
   \   000000E2   6F00               ORI     R16, 0xF0
   \   000000E4   B903               OUT     0x03, R16
   \   000000E6   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_146:
   \   000000E8   ....               RCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_83:
   \   000000EA   E100               LDI     R16, 16
   \   000000EC   E010               LDI     R17, 0
   \   000000EE   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_85:
   \   000000F0   7F00               ANDI    R16, 0xF0
   \   000000F2   9500               COM     R16
   \   000000F4   B113               IN      R17, 0x03
   \   000000F6   2310               AND     R17, R16
   \   000000F8   B913               OUT     0x03, R17
   \   000000FA   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_147:
   \   000000FC   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_192:
   \   000000FE   F409               BRNE    $+2+2
   \   00000100   C074               RJMP    ??ExtRS485Ctl_9
   \   00000102   ....               RCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_224:
   \   00000104   8302               STD     Z+2, R16
   \   00000106   8313               STD     Z+3, R17
   \   00000108   9100....           LDS     R16, (TData + 1)
   \   0000010C   ....               RCALL   ?Subroutine71
   \                     ??CrossCallReturnLabel_97:
   \   0000010E   8120               LD      R18, Z
   \   00000110   3001               CPI     R16, 1
   \   00000112   F4B1               BRNE    ??ExtRS485Ctl_10
   \   00000114   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_99:
   \   00000116   F019               BREQ    ??ExtRS485Ctl_11
   \   00000118   5104               SUBI    R16, 20
   \   0000011A   F021               BREQ    ??ExtRS485Ctl_12
   \   0000011C   C00E               RJMP    ??ExtRS485Ctl_13
   \                     ??ExtRS485Ctl_11:
   \   0000011E   E000               LDI     R16, 0
   \   00000120   ....               RCALL   Uart_BuildReqWISCardStatus
   \   00000122   C060               RJMP    ??ExtRS485Ctl_14
   \                     ??ExtRS485Ctl_12:
   \   00000124   2322               TST     R18
   \   00000126   F449               BRNE    ??ExtRS485Ctl_13
   \   00000128   ....               RCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_142:
   \   0000012A   F439               BRNE    ??ExtRS485Ctl_13
   \   0000012C   E713               LDI     R17, 115
   \   0000012E   E000               LDI     R16, 0
   \   00000130   ....               RCALL   Uart_BuildReqWISXData
   \   00000132   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_266:
   \   00000134   F408               BRCC    $+2+2
   \   00000136   C056               RJMP    ??ExtRS485Ctl_14
   \   00000138   C04E               RJMP    ??ExtRS485Ctl_15
   \                     ??ExtRS485Ctl_13:
   \   0000013A   E000               LDI     R16, 0
   \   0000013C   ....               RCALL   Uart_BuildReqWISData
   \   0000013E   C052               RJMP    ??ExtRS485Ctl_14
   \                     ??ExtRS485Ctl_10:
   \   00000140   3002               CPI     R16, 2
   \   00000142   F479               BRNE    ??ExtRS485Ctl_16
   \   00000144   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_100:
   \   00000146   F051               BREQ    ??ExtRS485Ctl_17
   \   00000148   5104               SUBI    R16, 20
   \   0000014A   F429               BRNE    ??CrossCallReturnLabel_6
   \   0000014C   2322               TST     R18
   \   0000014E   F419               BRNE    ??CrossCallReturnLabel_6
   \   00000150   ....               RCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_143:
   \   00000152   F409               BRNE    ??CrossCallReturnLabel_6
   \   00000154   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_6:
   \   00000156   E000               LDI     R16, 0
   \   00000158   ....               RCALL   Uart_BuildReqRadarData
   \   0000015A   C044               RJMP    ??ExtRS485Ctl_14
   \                     ??ExtRS485Ctl_17:
   \   0000015C   E000               LDI     R16, 0
   \   0000015E   ....               RCALL   Uart_BuildReqRadarInfo
   \   00000160   C041               RJMP    ??ExtRS485Ctl_14
   \                     ??ExtRS485Ctl_16:
   \   00000162   ....               LDI     R30, LOW((TData + 1268))
   \   00000164   ....               LDI     R31, HIGH((TData + 1268))
   \   00000166   8100               LD      R16, Z
   \   00000168   3001               CPI     R16, 1
   \   0000016A   F441               BRNE    ??ExtRS485Ctl_18
   \   0000016C   8101               LDD     R16, Z+1
   \   0000016E   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_141:
   \   00000170   F429               BRNE    ??ExtRS485Ctl_18
   \   00000172   E000               LDI     R16, 0
   \   00000174   ....               RCALL   Uart_BuildSndData
   \   00000176   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_239:
   \   00000178   E010               LDI     R17, 0
   \   0000017A   C001               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_18:
   \   0000017C   E011               LDI     R17, 1
   \                     ??ExtRS485Ctl_19:
   \   0000017E   2044               TST     R4
   \   00000180   F419               BRNE    ??ExtRS485Ctl_20
   \   00000182   E000               LDI     R16, 0
   \   00000184   ....               RCALL   Uart_BuildReqCardStatus
   \   00000186   C02E               RJMP    ??ExtRS485Ctl_14
   \                     ??ExtRS485Ctl_20:
   \   00000188   E005               LDI     R16, 5
   \   0000018A   1640               CP      R4, R16
   \   0000018C   F419               BRNE    ??ExtRS485Ctl_21
   \   0000018E   E000               LDI     R16, 0
   \   00000190   ....               RCALL   Uart_BuildReqR16552
   \   00000192   C028               RJMP    ??ExtRS485Ctl_14
   \                     ??ExtRS485Ctl_21:
   \   00000194   E00A               LDI     R16, 10
   \   00000196   1640               CP      R4, R16
   \   00000198   F411               BRNE    ??ExtRS485Ctl_22
   \   0000019A   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_238:
   \   0000019C   C023               RJMP    ??ExtRS485Ctl_14
   \                     ??ExtRS485Ctl_22:
   \   0000019E   E00F               LDI     R16, 15
   \   000001A0   1640               CP      R4, R16
   \   000001A2   F419               BRNE    ??ExtRS485Ctl_23
   \   000001A4   E000               LDI     R16, 0
   \   000001A6   ....               RCALL   Uart_BuildReqC16552
   \   000001A8   C01D               RJMP    ??ExtRS485Ctl_14
   \                     ??ExtRS485Ctl_23:
   \   000001AA   E104               LDI     R16, 20
   \   000001AC   1640               CP      R4, R16
   \   000001AE   F4B1               BRNE    ??ExtRS485Ctl_24
   \   000001B0   01F3               MOVW    R31:R30, R7:R6
   \   000001B2   8100               LD      R16, Z
   \   000001B4   2300               TST     R16
   \   000001B6   F491               BRNE    ??ExtRS485Ctl_24
   \   000001B8   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_187:
   \   000001BA   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_117:
   \   000001BC   1702               CP      R16, R18
   \   000001BE   F471               BRNE    ??ExtRS485Ctl_24
   \   000001C0   E000               LDI     R16, 0
   \   000001C2   ....               RCALL   Uart_BuildReqEEPROMData
   \   000001C4   910C               LD      R16, X
   \   000001C6   5F0E               SUBI    R16, 254
   \   000001C8   930C               ST      X, R16
   \   000001CA   300F               CPI     R16, 15
   \   000001CC   F058               BRCS    ??ExtRS485Ctl_14
   \   000001CE   E000               LDI     R16, 0
   \   000001D0   930C               ST      X, R16
   \   000001D2   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_267:
   \   000001D4   F038               BRCS    ??ExtRS485Ctl_14
   \                     ??ExtRS485Ctl_15:
   \   000001D6   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_231:
   \   000001D8   8302               STD     Z+2, R16
   \   000001DA   C004               RJMP    ??ExtRS485Ctl_14
   \                     ??ExtRS485Ctl_24:
   \   000001DC   2311               TST     R17
   \   000001DE   F011               BREQ    ??ExtRS485Ctl_14
   \   000001E0   E000               LDI     R16, 0
   \   000001E2   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_14:
   \   000001E4   E000               LDI     R16, 0
   \   000001E6   ....               RCALL   Uart_BuildTail16552
   \   000001E8   C003               RJMP    ??CrossCallReturnLabel_7
   \                     ??ExtRS485Ctl_9:
   \   000001EA   ....               RCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_144:
   \   000001EC   F409               BRNE    ??CrossCallReturnLabel_7
   \   000001EE   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_7:
   \   000001F0   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_190:
   \   000001F2   F409               BRNE    $+2+2
   \   000001F4   CF49               RJMP    ??ExtRS485Ctl_4
   \   000001F6   ....               RCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_225:
   \   000001F8   8F04               STD     Z+28, R16
   \   000001FA   8F15               STD     Z+29, R17
   \   000001FC   9100....           LDS     R16, (TData + 2)
   \   00000200   ....               RCALL   ?Subroutine71
   \                     ??CrossCallReturnLabel_98:
   \   00000202   A922               LDD     R18, Z+50
   \   00000204   3001               CPI     R16, 1
   \   00000206   F4C1               BRNE    ??ExtRS485Ctl_25
   \   00000208   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_101:
   \   0000020A   F019               BREQ    ??ExtRS485Ctl_26
   \   0000020C   5104               SUBI    R16, 20
   \   0000020E   F021               BREQ    ??ExtRS485Ctl_27
   \   00000210   C010               RJMP    ??ExtRS485Ctl_28
   \                     ??ExtRS485Ctl_26:
   \   00000212   E001               LDI     R16, 1
   \   00000214   ....               RCALL   Uart_BuildReqWISCardStatus
   \   00000216   C06C               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_27:
   \   00000218   2322               TST     R18
   \   0000021A   F459               BRNE    ??ExtRS485Ctl_28
   \   0000021C   ....               RCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_53:
   \   0000021E   F449               BRNE    ??ExtRS485Ctl_28
   \   00000220   E713               LDI     R17, 115
   \   00000222   E001               LDI     R16, 1
   \   00000224   ....               RCALL   Uart_BuildReqWISXData
   \   00000226   ....               LDI     R30, ((TData + 251) & 0xff) & 0xFF
   \   00000228   ....               LDI     R31, (((TData + 1531) >> 8) & 0xff) & 0xFF
   \   0000022A   ....               RCALL   ??Subroutine139_0
   \                     ??CrossCallReturnLabel_264:
   \   0000022C   F408               BRCC    $+2+2
   \   0000022E   C060               RJMP    ??ExtRS485Ctl_29
   \   00000230   C058               RJMP    ??ExtRS485Ctl_30
   \                     ??ExtRS485Ctl_28:
   \   00000232   E001               LDI     R16, 1
   \   00000234   ....               RCALL   Uart_BuildReqWISData
   \   00000236   C05C               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_25:
   \   00000238   3002               CPI     R16, 2
   \   0000023A   F479               BRNE    ??ExtRS485Ctl_31
   \   0000023C   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_102:
   \   0000023E   F051               BREQ    ??ExtRS485Ctl_32
   \   00000240   5104               SUBI    R16, 20
   \   00000242   F429               BRNE    ??CrossCallReturnLabel_5
   \   00000244   2322               TST     R18
   \   00000246   F419               BRNE    ??CrossCallReturnLabel_5
   \   00000248   ....               RCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_54:
   \   0000024A   F409               BRNE    ??CrossCallReturnLabel_5
   \   0000024C   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_5:
   \   0000024E   E001               LDI     R16, 1
   \   00000250   ....               RCALL   Uart_BuildReqRadarData
   \   00000252   C04E               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_32:
   \   00000254   E001               LDI     R16, 1
   \   00000256   ....               RCALL   Uart_BuildReqRadarInfo
   \   00000258   C04B               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_31:
   \   0000025A   ....               LDI     R30, LOW((TData + 1348))
   \   0000025C   ....               LDI     R31, HIGH((TData + 1348))
   \   0000025E   8100               LD      R16, Z
   \   00000260   3001               CPI     R16, 1
   \   00000262   F469               BRNE    ??ExtRS485Ctl_33
   \   00000264   8121               LDD     R18, Z+1
   \   00000266   E030               LDI     R19, 0
   \   00000268   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_226:
   \   0000026A   5F0C               SUBI    R16, 252
   \   0000026C   4F1F               SBCI    R17, 255
   \   0000026E   1720               CP      R18, R16
   \   00000270   0731               CPC     R19, R17
   \   00000272   F429               BRNE    ??ExtRS485Ctl_33
   \   00000274   E001               LDI     R16, 1
   \   00000276   ....               RCALL   Uart_BuildSndData
   \   00000278   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_237:
   \   0000027A   E010               LDI     R17, 0
   \   0000027C   C001               RJMP    ??ExtRS485Ctl_34
   \                     ??ExtRS485Ctl_33:
   \   0000027E   E011               LDI     R17, 1
   \                     ??ExtRS485Ctl_34:
   \   00000280   2044               TST     R4
   \   00000282   F419               BRNE    ??ExtRS485Ctl_35
   \   00000284   E001               LDI     R16, 1
   \   00000286   ....               RCALL   Uart_BuildReqCardStatus
   \   00000288   C033               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_35:
   \   0000028A   E005               LDI     R16, 5
   \   0000028C   1640               CP      R4, R16
   \   0000028E   F419               BRNE    ??ExtRS485Ctl_36
   \   00000290   E001               LDI     R16, 1
   \   00000292   ....               RCALL   Uart_BuildReqR16552
   \   00000294   C02D               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_36:
   \   00000296   E00A               LDI     R16, 10
   \   00000298   1640               CP      R4, R16
   \   0000029A   F411               BRNE    ??ExtRS485Ctl_37
   \   0000029C   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_236:
   \   0000029E   C028               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_37:
   \   000002A0   E00F               LDI     R16, 15
   \   000002A2   1640               CP      R4, R16
   \   000002A4   F419               BRNE    ??ExtRS485Ctl_38
   \   000002A6   E001               LDI     R16, 1
   \   000002A8   ....               RCALL   Uart_BuildReqC16552
   \   000002AA   C022               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_38:
   \   000002AC   E104               LDI     R16, 20
   \   000002AE   1640               CP      R4, R16
   \   000002B0   F4D9               BRNE    ??ExtRS485Ctl_39
   \   000002B2   01F3               MOVW    R31:R30, R7:R6
   \   000002B4   A902               LDD     R16, Z+50
   \   000002B6   2300               TST     R16
   \   000002B8   F4B9               BRNE    ??ExtRS485Ctl_39
   \   000002BA   01FD               MOVW    R31:R30, R27:R26
   \   000002BC   8103               LDD     R16, Z+3
   \   000002BE   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_118:
   \   000002C0   1702               CP      R16, R18
   \   000002C2   F491               BRNE    ??ExtRS485Ctl_39
   \   000002C4   E001               LDI     R16, 1
   \   000002C6   ....               RCALL   Uart_BuildReqEEPROMData
   \   000002C8   ....               LDI     R30, ((TData + 249) & 0xff) & 0xFF
   \   000002CA   ....               LDI     R31, (((TData + 1529) >> 8) & 0xff) & 0xFF
   \   000002CC   8100               LD      R16, Z
   \   000002CE   5F0E               SUBI    R16, 254
   \   000002D0   8300               ST      Z, R16
   \   000002D2   300F               CPI     R16, 15
   \   000002D4   F068               BRCS    ??ExtRS485Ctl_29
   \   000002D6   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_232:
   \   000002D8   8301               STD     Z+1, R16
   \   000002DA   ....               LDI     R30, ((TData + 251) & 0xff) & 0xFF
   \   000002DC   ....               LDI     R31, (((TData + 1531) >> 8) & 0xff) & 0xFF
   \   000002DE   ....               RCALL   ??Subroutine139_0
   \                     ??CrossCallReturnLabel_265:
   \   000002E0   F038               BRCS    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_30:
   \   000002E2   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_233:
   \   000002E4   8303               STD     Z+3, R16
   \   000002E6   C004               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_39:
   \   000002E8   2311               TST     R17
   \   000002EA   F011               BREQ    ??ExtRS485Ctl_29
   \   000002EC   E001               LDI     R16, 1
   \   000002EE   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_29:
   \   000002F0   E001               LDI     R16, 1
   \   000002F2   ....               RCALL   Uart_BuildTail16552
   \   000002F4   CECC               RJMP    ??CrossCallReturnLabel_4
   \   000002F6                      REQUIRE _A_PORTC
   \   000002F6                      REQUIRE _A_PORTE
    250              }
    251          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine118:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   8102               LDD     R16, Z+2
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine73:
   \   00000000   2D04               MOV     R16, R4
   \   00000002   2044               TST     R4
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine71:
   \   00000000   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_206:
   \   00000002   0F44               LSL     R20
   \   00000004   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_194:
   \   00000006   01F3               MOVW    R31:R30, R7:R6
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine64:
   \   00000000   E840               LDI     R20, 128
   \   00000002   E255               LDI     R21, 37
   \   00000004   E060               LDI     R22, 0
   \   00000006   E070               LDI     R23, 0
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine101:
   \   00000000   9100....           LDS     R16, (OS_Counters + 1)
   \   00000004   2300               TST     R16
   \   00000006   F409               BRNE    ??Subroutine101_0
   \   00000008   9478               SEI
   \                     ??Subroutine101_0:
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine54:
   \   00000000   E000               LDI     R16, 0
   \   00000002                      REQUIRE ?Subroutine133
   \   00000002                      ;               // Fall through to label ?Subroutine133

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine133:
   \   00000000   ....               RJMP    Uart_BuildReqConfig

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine49:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RJMP    ?Subroutine133

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine44:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   8103               LDD     R16, Z+3
   \   00000004   ....               RJMP    ?Subroutine99

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine43:
   \   00000000   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_188:
   \   00000002                      REQUIRE ?Subroutine99
   \   00000002                      ;               // Fall through to label ?Subroutine99

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine99:
   \   00000000   9110....           LDS     R17, PortPair
   \   00000004   1701               CP      R16, R17
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_140:
   \   00000002   E006               LDI     R16, 6
   \   00000004                      REQUIRE ?Subroutine129
   \   00000004                      ;               // Fall through to label ?Subroutine129

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine129:
   \   00000000   E010               LDI     R17, 0
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine96:
   \   00000000   ....               LDI     R30, LOW(UART16552)
   \   00000002   ....               LDI     R31, (UART16552) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   E010               LDI     R17, 0
   \   00000002   ........           JMP     ReadEEPROMByte

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   ....               LDI     R30, ((TData + 250) & 0xff) & 0xFF
   \   00000002   ....               LDI     R31, (((TData + 1530) >> 8) & 0xff) & 0xFF
   \   00000004   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_263:
   \   00000006   F010               BRCS    ??Subroutine5_0
   \   00000008   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_235:
   \   0000000A   8302               STD     Z+2, R16
   \                     ??Subroutine5_0:
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine92:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002                      REQUIRE ?Subroutine130
   \   00000002                      ;               // Fall through to label ?Subroutine130

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine130:
   \   00000000   E000               LDI     R16, 0
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   ....               LDI     R30, ((TData + 251) & 0xff) & 0xFF
   \   00000002   ....               LDI     R31, (((TData + 1531) >> 8) & 0xff) & 0xFF
   \   00000004   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_262:
   \   00000006   F010               BRCS    ??Subroutine4_0
   \   00000008   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_234:
   \   0000000A   8303               STD     Z+3, R16
   \                     ??Subroutine4_0:
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   ....               LDI     R30, ((TData + 250) & 0xff) & 0xFF
   \   00000002   ....               LDI     R31, (((TData + 1530) >> 8) & 0xff) & 0xFF
   \   00000004                      REQUIRE ?Subroutine97
   \   00000004                      REQUIRE ??Subroutine139_0
   \   00000004                      ;               // Fall through to label ??Subroutine139_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine139_0:
   \   00000000   8100               LD      R16, Z
   \   00000002                      REQUIRE ?Subroutine97
   \   00000002                      ;               // Fall through to label ?Subroutine97

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine97:
   \   00000000   9503               INC     R16
   \   00000002   8300               ST      Z, R16
   \   00000004   3004               CPI     R16, 4
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine61:
   \   00000000   94F8               CLI
   \   00000002   ....               RJMP    ?Subroutine124

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine56:
   \   00000000   ........           JMP     OS_Delay

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_208:
   \   00000002                      REQUIRE ?Subroutine121
   \   00000002                      ;               // Fall through to label ?Subroutine121

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine121:
   \   00000000   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_195:
   \   00000002   7001               ANDI    R16, 0x01
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine102:
   \   00000000   ........           JMP     ?SS_SHR_L02

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_207:
   \   00000002   5F4C               SUBI    R20, 252
   \   00000004   ....               RJMP    ?Subroutine121

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine98:
   \   00000000   9100....           LDS     R16, TData
   \   00000004   E010               LDI     R17, 0
   \   00000006                      REQUIRE ?Subroutine124
   \   00000006                      ;               // Fall through to label ?Subroutine124

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine124:
   \   00000000   9140....           LDS     R20, PortPair
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine76:
   \   00000000   9120....           LDS     R18, PortPair
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine68:
   \   00000000   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_163:
   \   00000002   ....               RJMP    ?Subroutine129

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine63:
   \   00000000   ........           JMP     ?PROLOGUE8_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine105:
   \   00000000   9100....           LDS     R16, PortPair
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine62:
   \   00000000   ........           JMP     ?S_SHL_L02
    252          
    253          
    254          /*************************************************************************
    255          *   (This is a task)
    256          *  Usart handler UART receive data
    257          *
    258          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    259          void ExtRS485Rec(void) {
   \                     ExtRS485Rec:
   \   00000000   ....               RCALL   ?Subroutine47
    260          
    261              char portresp;
    262          
    263              OS_Delay(UART_START_DELAY + 800);           // Waiting for target startup and power on sequence
   \                     ??CrossCallReturnLabel_59:
   \   00000002   E900               LDI     R16, 144
   \   00000004   E11A               LDI     R17, 26
   \   00000006   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_76:
   \   00000008   C024               RJMP    ??CrossCallReturnLabel_168
    264          
    265              while (1) {
    266                  OS_Delay(499);                          // wait for answer and correct the speed (.5 * 4 = 2 sec update)
    267                  portresp = OS_WaitEventTimed(3, 1);     // Wait for receive from both channels
    268                  if (portresp & 0x01) {                  // answer on ch 0
    269                      Usart16552CheckPackage(0);         // handle incomming package
    270                      TData.RS4.FailCnt[PortPair][0] = 0; // Reset counter
    271                      TData.RS4.IOUnitStatus[PortPair] &= ~COMFAIL_BIT; // No error
    272                      UART16552[0].RxFaultCnt = 0;          // OK package on 16552 channel
    273                  } else {
    274                      UART16552[0].RxFaultCnt++;          // Fault in package on 16552 channel
    275                      TData.RS4.FailCnt[PortPair][1]++;      // no answer total counter
    276                      if (TData.RS4.FailCnt[PortPair][0]++ > FAILCNT_ERROR) {
    277                          TData.RS4.IOUnitStatus[PortPair] |= COMFAIL_BIT;      // report fault
    278                      }
    279                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
    280                          if ((TData.RS4.FailCnt[PortPair][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
    281                              ClrBit(PORTC, (0x01 << PortPair));            // Switch off power
    282                              OS_SignalEvent(2, &TCB_RS485Ctl);
    283                          }
    284                      }
    285                  }
    286                  if (portresp & 0x02) {                  // answer on ch 1
    287                      Usart16552CheckPackage(1);         // handle incomming package
    288                      TData.RS4.FailCnt[PortPair + 4][0] = 0; // Reset counter
    289                      TData.RS4.IOUnitStatus[PortPair + 4] &= ~COMFAIL_BIT; // No error
    290                      UART16552[1].RxFaultCnt = 0;          // OK package on 16552 channel
    291                  } else {
    292                      UART16552[1].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_0:
   \   0000000A   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_138:
   \   0000000C   A902               LDD     R16, Z+50
   \   0000000E   9503               INC     R16
   \   00000010   AB02               STD     Z+50, R16
    293                      TData.RS4.FailCnt[PortPair + 4][1]++;      // no answer
   \   00000012   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_151:
   \   00000014   8D05               LDD     R16, Z+29
   \   00000016   8D16               LDD     R17, Z+30
   \   00000018   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_65:
   \   0000001A   8F05               STD     Z+29, R16
   \   0000001C   8F16               STD     Z+30, R17
    294                      if (TData.RS4.FailCnt[PortPair + 4][0]++ > FAILCNT_ERROR) {
   \   0000001E   ....               RCALL   ?Subroutine67
   \                     ??CrossCallReturnLabel_93:
   \   00000020   8D83               LDD     R24, Z+27
   \   00000022   8D94               LDD     R25, Z+28
   \   00000024   01DC               MOVW    R27:R26, R25:R24
   \   00000026   9611               ADIW    R27:R26, 1
   \   00000028   8FA3               STD     Z+27, R26
   \   0000002A   8FB4               STD     Z+28, R27
   \   0000002C   9706               SBIW    R25:R24, 6
   \   0000002E   F018               BRCS    ??ExtRS485Rec_1
    295                          TData.RS4.IOUnitStatus[PortPair + 4] |= COMFAIL_BIT;      // report fault
   \   00000030   ....               RCALL   ?Subroutine38
    296                      }
   \                     ??CrossCallReturnLabel_46:
   \   00000032   6001               ORI     R16, 0x01
   \   00000034   8307               STD     Z+7, R16
    297                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Rec_1:
   \   00000036   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_191:
   \   00000038   F041               BREQ    ??CrossCallReturnLabel_166
    298                          if ((TData.RS4.FailCnt[PortPair + 4][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   0000003A   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_152:
   \   0000003C   8D03               LDD     R16, Z+27
   \   0000003E   7007               ANDI    R16, 0x07
   \   00000040   3004               CPI     R16, 4
   \   00000042   F419               BRNE    ??CrossCallReturnLabel_166
    299                              ClrBit(PORTC, (0x01 << (PortPair + 4)));            // Switch off power
   \   00000044   ....               RCALL   ?Subroutine61
    300                              OS_SignalEvent(2, &TCB_RS485Ctl);
    301                          }
    302                      }
    303                  }
   \                     ??CrossCallReturnLabel_82:
   \   00000046   5F4C               SUBI    R20, 252
   \   00000048   ....               RCALL   ?Subroutine9
    304                  OS_SignalEvent(1, &TCB_RS485Ctl);
   \                     ??CrossCallReturnLabel_166:
   \   0000004A   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   0000004C   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   0000004E   E001               LDI     R16, 1
   \   00000050   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_168:
   \   00000052   EF03               LDI     R16, 243
   \   00000054   E011               LDI     R17, 1
   \   00000056   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_75:
   \   00000058   E021               LDI     R18, 1
   \   0000005A   E030               LDI     R19, 0
   \   0000005C   E003               LDI     R16, 3
   \   0000005E   ........           CALL    OS_WaitEventTimed
   \   00000062   2F80               MOV     R24, R16
   \   00000064   FB00               BST     R16, 0
   \   00000066   F45E               BRTC    ??ExtRS485Rec_2
   \   00000068   E000               LDI     R16, 0
   \   0000006A   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_229:
   \   0000006C   8703               STD     Z+11, R16
   \   0000006E   8704               STD     Z+12, R16
   \   00000070   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_48:
   \   00000072   7F0E               ANDI    R16, 0xFE
   \   00000074   8303               STD     Z+3, R16
   \   00000076   E000               LDI     R16, 0
   \   00000078   9300....           STS     (UART16552 + 24), R16
   \   0000007C   C01F               RJMP    ??CrossCallReturnLabel_167
   \                     ??ExtRS485Rec_2:
   \   0000007E   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_139:
   \   00000080   8D00               LDD     R16, Z+24
   \   00000082   9503               INC     R16
   \   00000084   8F00               STD     Z+24, R16
   \   00000086   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_153:
   \   00000088   8505               LDD     R16, Z+13
   \   0000008A   8516               LDD     R17, Z+14
   \   0000008C   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_66:
   \   0000008E   8705               STD     Z+13, R16
   \   00000090   8716               STD     Z+14, R17
   \   00000092   ....               RCALL   ?Subroutine67
   \                     ??CrossCallReturnLabel_94:
   \   00000094   85A3               LDD     R26, Z+11
   \   00000096   85B4               LDD     R27, Z+12
   \   00000098   018D               MOVW    R17:R16, R27:R26
   \   0000009A   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_67:
   \   0000009C   8703               STD     Z+11, R16
   \   0000009E   8714               STD     Z+12, R17
   \   000000A0   9716               SBIW    R27:R26, 6
   \   000000A2   F018               BRCS    ??ExtRS485Rec_3
   \   000000A4   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_49:
   \   000000A6   6001               ORI     R16, 0x01
   \   000000A8   8303               STD     Z+3, R16
   \                     ??ExtRS485Rec_3:
   \   000000AA   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_193:
   \   000000AC   F039               BREQ    ??CrossCallReturnLabel_167
   \   000000AE   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_154:
   \   000000B0   8503               LDD     R16, Z+11
   \   000000B2   7007               ANDI    R16, 0x07
   \   000000B4   3004               CPI     R16, 4
   \   000000B6   F411               BRNE    ??CrossCallReturnLabel_167
   \   000000B8   ....               RCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_81:
   \   000000BA   ....               RCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_167:
   \   000000BC   FB81               BST     R24, 1
   \   000000BE   F00E               BRTS    $+2+2
   \   000000C0   CFA4               RJMP    ??ExtRS485Rec_0
   \   000000C2   E001               LDI     R16, 1
   \   000000C4   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_230:
   \   000000C6   8F03               STD     Z+27, R16
   \   000000C8   8F04               STD     Z+28, R16
   \   000000CA   ....               RCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_47:
   \   000000CC   7F0E               ANDI    R16, 0xFE
   \   000000CE   8307               STD     Z+7, R16
   \   000000D0   E000               LDI     R16, 0
   \   000000D2   9300....           STS     (UART16552 + 50), R16
   \   000000D6   CFB9               RJMP    ??CrossCallReturnLabel_166
   \   000000D8                      REQUIRE _A_PORTC
    305              }
    306          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine67:
   \   00000000   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_162:
   \   00000002   E014               LDI     R17, 4
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(TData)
   \   00000008   ....               LDI     R31, (TData) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine104:
   \   00000000   9100....           LDS     R16, PortPair
   \   00000004   E014               LDI     R17, 4
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               RJMP    ?Subroutine116

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine65:
   \   00000000   ....               RCALL   Usart16552CheckPackage
   \   00000002   ....               RCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_155:
   \   00000004   ....               RJMP    ?Subroutine130

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine51:
   \   00000000   5F0F               SUBI    R16, 255
   \   00000002   4F1F               SBCI    R17, 255
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine39:
   \   00000000   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_150:
   \   00000002   8103               LDD     R16, Z+3
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_149:
   \   00000002   8107               LDD     R16, Z+7
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine103:
   \   00000000   9100....           LDS     R16, PortPair
   \   00000004   E0F0               LDI     R31, 0
   \   00000006   2FE0               MOV     R30, R16
   \   00000008   ....               RJMP    ??Subroutine140_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   E001               LDI     R16, 1
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    ?S_SHL_L02
   \   00000008   9500               COM     R16
   \   0000000A   B315               IN      R17, 0x15
   \   0000000C   2310               AND     R17, R16
   \   0000000E   BB15               OUT     0x15, R17
   \   00000010   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_148:
   \   00000012   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   00000014   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   00000016   E002               LDI     R16, 2
   \   00000018                      REQUIRE ?Subroutine106
   \   00000018                      ;               // Fall through to label ?Subroutine106

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine106:
   \   00000000   ........           JMP     OS_SignalEvent

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine116:
   \   00000000   01F0               MOVW    R31:R30, R1:R0
   \   00000002                      REQUIRE ??Subroutine140_0
   \   00000002                      ;               // Fall through to label ??Subroutine140_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine140_0:
   \   00000000   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000002   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine47:
   \   00000000   ........           JMP     ?PROLOGUE4_L09
    307          
    308          /*************************************************************************
    309          *
    310          *  Set ports on or off
    311          *
    312          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    313          void SetRS4Port(void) {
   \                     SetRS4Port:
    314          
    315              PORTC = TData.RS4.PortUsed;
   \   00000000   9100....           LDS     R16, TData
   \   00000004   BB05               OUT     0x15, R16
    316          
    317          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_PORTC
    318          
    319          /*************************************************************************
    320          *
    321          *  Check the incoming packages from AN_SGCNV / WIS
    322          *
    323          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine117:
   \   00000000   E010               LDI     R17, 0
   \   00000002   E14A               LDI     R20, 26
   \   00000004   E050               LDI     R21, 0
   \   00000006                      REQUIRE ?Subroutine132
   \   00000006                      ;               // Fall through to label ?Subroutine132

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine132:
   \   00000000   ........           JMP     ?S_EC_MUL_L02

   \                                 In  segment CODE, align 2, keep-with-next
    324          void Usart16552CheckPackage(char ch) {
   \                     Usart16552CheckPackage:
   \   00000000   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_121:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002   2E40               MOV     R4, R16
    325          
    326              unsigned short pointer;
    327              char count_out, more;
    328          
    329              count_out = MAX_PROT_CMD;                  // max command
   \   00000004   2466               CLR     R6
   \   00000006   946A               DEC     R6
    330              more = true;
   \   00000008   2455               CLR     R5
   \   0000000A   9453               INC     R5
    331              pointer = 4;
   \   0000000C   E084               LDI     R24, 4
   \   0000000E   E090               LDI     R25, 0
   \   00000010   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_288:
   \   00000012   ....               LDI     R26, LOW(UART16552)
   \   00000014   ....               LDI     R27, (UART16552) >> 8
   \   00000016   ....               RCALL   ?Subroutine120
    332              do {
    333                  if (!CheckActionUart16552(ch, pointer)) {
   \                     ??CrossCallReturnLabel_257:
   \   00000018   019C               MOVW    R19:R18, R25:R24
   \   0000001A   2D04               MOV     R16, R4
   \   0000001C   ....               RCALL   CheckActionUart16552
   \   0000001E   2300               TST     R16
   \   00000020   F409               BRNE    ??Usart16552CheckPackage_0
    334                      more = false;                          // terminate while loop
   \   00000022   2455               CLR     R5
    335                  }
    336                  pointer += UART16552[ch].pRxBuffer[pointer + 1] + 2;            // Point to a command cmd hb/lb
   \                     ??Usart16552CheckPackage_0:
   \   00000024   01FD               MOVW    R31:R30, R27:R26
   \   00000026   8502               LDD     R16, Z+10
   \   00000028   8513               LDD     R17, Z+11
   \   0000002A   0F08               ADD     R16, R24
   \   0000002C   1F19               ADC     R17, R25
   \   0000002E   01F8               MOVW    R31:R30, R17:R16
   \   00000030   81E1               LDD     R30, Z+1
   \   00000032   E0F0               LDI     R31, 0
   \   00000034   9632               ADIW    R31:R30, 2
   \   00000036   0F8E               ADD     R24, R30
   \   00000038   1F9F               ADC     R25, R31
    337                  if (!--count_out) {
   \   0000003A   946A               DEC     R6
   \   0000003C   F051               BREQ    ??Usart16552CheckPackage_1
    338                      more = false;
    339                  }
    340              } while (more && (pointer < UART16552[ch].RxPacklen - 3));
   \   0000003E   2055               TST     R5
   \   00000040   F041               BREQ    ??Usart16552CheckPackage_1
   \   00000042   01FD               MOVW    R31:R30, R27:R26
   \   00000044   8906               LDD     R16, Z+22
   \   00000046   8917               LDD     R17, Z+23
   \   00000048   5003               SUBI    R16, 3
   \   0000004A   4010               SBCI    R17, 0
   \   0000004C   1780               CP      R24, R16
   \   0000004E   0791               CPC     R25, R17
   \   00000050   F318               BRCS    ??CrossCallReturnLabel_257
    341              GoToSyncUART16552(ch);
   \                     ??Usart16552CheckPackage_1:
   \   00000052   2D04               MOV     R16, R4
   \   00000054   ....               RCALL   ?Subroutine55
    342          }
   \                     ??CrossCallReturnLabel_73:
   \   00000056                      REQUIRE ?Subroutine134
   \   00000056                      ;               // Fall through to label ?Subroutine134

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine134:
   \   00000000   E0E7               LDI     R30, 7
   \   00000002   ........           JMP     ?EPILOGUE_B7_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine55:
   \   00000000   ....               RJMP    GoToSyncUART16552

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine120:
   \   00000000   0FA0               ADD     R26, R16
   \   00000002   1FB1               ADC     R27, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine77:
   \   00000000   ........           JMP     ?PROLOGUE7_L09
    343          
    344          /*************************************************************************
    345          *
    346          *  Check action on received data from AN_SGCNV
    347          *
    348          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine131:
   \   00000000   E0E4               LDI     R30, 4
   \   00000002   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
    349          char CheckActionUart16552(char ch, unsigned short pointer) {
   \                     CheckActionUart16552:
   \   00000000   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_61:
   \   00000002   2FA0               MOV     R26, R16
    350          
    351              char retval = true;
   \   00000004   E0B1               LDI     R27, 1
    352          
    353              switch (UART16552[ch].pRxBuffer[pointer]) {    // check action
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   9602               ADIW    R25:R24, 2
   \   0000000A   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_16:
   \   0000000C   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_124:
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   8100               LD      R16, Z
   \   00000012   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart16552>_0`)
   \   00000014   ....               LDI     R31, (`?<Jumptable for CheckActionUart16552>_0`) >> 16
   \   00000016   BFFB               OUT     0x3B, R31
   \   00000018   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart16552>_0`)
   \   0000001A   ........           JMP     ?CV_SWITCH_L06
    354          
    355              case ANP1_REP_MP_DATA :                              // Measured pressure data
    356              case ANP1_REP_MT_DATA :                              // Measured temperature data
    357              case ANP1_REP_MO_DATA :                              // Measured "other" data
    358                  ReceivePTOData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_0:
   \   0000001E   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_103:
   \   00000020   ....               RCALL   ReceivePTOData
    359                  break;
   \   00000022   C022               RJMP    ??CheckActionUart16552_1
    360              case ANP1_REP_WH_DATA :                              // Measured "washtrack and high level" data
    361                  ReceiveWHData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_2:
   \   00000024   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_104:
   \   00000026   ....               RCALL   ReceiveWHData
    362                  break;
   \   00000028   C01F               RJMP    ??CheckActionUart16552_1
    363              case ANP1_REP_RP_DATA :                              // Raw pressure data
    364              case ANP1_REP_RT_DATA :                              // Raw temp. data
    365              case ANP1_REP_RO_DATA :                              // Raw "other" data
    366                  ReceiveRData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_3:
   \   0000002A   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_105:
   \   0000002C   ....               RCALL   ReceiveRData
    367                  break;
   \   0000002E   C01C               RJMP    ??CheckActionUart16552_1
    368              case ANP1_REP_CAL_DATA :                             // Raw "other" data
    369                  ReceiveCData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_4:
   \   00000030   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_106:
   \   00000032   ....               RCALL   ReceiveCData
    370                  break;
   \   00000034   C019               RJMP    ??CheckActionUart16552_1
    371          
    372              case ANP1_REP_CARD_STAT :                             // card status package
    373                  ReceiveCardStatus(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_5:
   \   00000036   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_107:
   \   00000038   ....               RCALL   ReceiveCardStatus
    374                  break;
   \   0000003A   C016               RJMP    ??CheckActionUart16552_1
    375          
    376              case ANP1_REP_CONFIG :                             // config data
    377                  ReceiveConfigData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_6:
   \   0000003C   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_108:
   \   0000003E   ....               RCALL   ReceiveConfigData
    378                  break;
   \   00000040   C013               RJMP    ??CheckActionUart16552_1
    379          
    380              case ANP1_REP_EEP_DATA :                             // card eeprome
    381                  ReceiveCardEEPROMData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_7:
   \   00000042   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_109:
   \   00000044   ....               RCALL   ReceiveCardEEPROMData
    382                  break;
   \   00000046   C010               RJMP    ??CheckActionUart16552_1
    383          
    384              case ANP1_REP_WIS_STAT :                             // Card status from WIS
    385                  ReceiveWISStatus(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_8:
   \   00000048   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_110:
   \   0000004A   ....               RCALL   ReceiveWISStatus
    386                  break;
   \   0000004C   C00D               RJMP    ??CheckActionUart16552_1
    387          
    388              case ANP1_REP_WIS_XDATA :                             // Card WIS protocol
    389                  ReceiveWISXData(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_9:
   \   0000004E   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_111:
   \   00000050   ....               RCALL   ReceiveWISXData
    390                  break;
   \   00000052   C00A               RJMP    ??CheckActionUart16552_1
    391          
    392              case ANP1_REP_WIS_DATA :                             // Data from WIS
    393                  ReceiveWISData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_10:
   \   00000054   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_112:
   \   00000056   ....               RCALL   ReceiveWISData
    394                  break;
   \   00000058   C007               RJMP    ??CheckActionUart16552_1
    395              case ANP1_REP_GODA_DATA:
    396                  ReceiveRadarData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_11:
   \   0000005A   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_113:
   \   0000005C   ....               RCALL   ReceiveRadarData
    397                  break;
   \   0000005E   C004               RJMP    ??CheckActionUart16552_1
    398              case ANP1_REP_GODA_INFO:
    399                  ReceiveRadarInfo(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_12:
   \   00000060   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_114:
   \   00000062   ....               RCALL   ReceiveRadarInfo
    400                  break;
   \   00000064   C001               RJMP    ??CheckActionUart16552_1
    401              case ANP1_ECMD_NMDRQACK :                             // No more data, send ack.
    402              case ANP1_ECMD_NMDWOACK :                         // No more data
    403                  retval = false;
   \                     ??CheckActionUart16552_13:
   \   00000066   E0B0               LDI     R27, 0
    404                  break;
    405              }
    406              return retval;
   \                     ??CheckActionUart16552_1:
   \   00000068   2F0B               MOV     R16, R27
   \   0000006A   ....               RJMP    ?Subroutine131
    407          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine74:
   \   00000000   019C               MOVW    R19:R18, R25:R24
   \   00000002   2F0A               MOV     R16, R26
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_289:
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000006   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine78:
   \   00000000   8502               LDD     R16, Z+10
   \   00000002   8513               LDD     R17, Z+11
   \   00000004   0F02               ADD     R16, R18
   \   00000006   1F13               ADC     R17, R19
   \   00000008   9508               RET
    408          
    409          /*************************************************************************
    410          *
    411          *  Receive card status from WIS
    412          *
    413          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine123:
   \   00000000   E004               LDI     R16, 4
   \   00000002   9F60               MUL     R22, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    414          void ReceiveWISStatus(char ch, unsigned short pointer) {
   \                     ReceiveWISStatus:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   2F7A               MOV     R23, R26
   \   00000004   2F60               MOV     R22, R16
    415          
    416              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] |= UART16552[ch].pRxBuffer[pointer];
   \   00000006   9020....           LDS     R2, PortPair
   \   0000000A   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_196:
   \   0000000C   8100               LD      R16, Z
   \   0000000E   2433               CLR     R3
   \   00000010   0190               MOVW    R19:R18, R1:R0
   \   00000012   0D22               ADD     R18, R2
   \   00000014   1F35               ADC     R19, R21
   \   00000016   01D9               MOVW    R27:R26, R19:R18
   \   00000018   ....               SUBI    R26, LOW((-(TData + 43) & 0xFFFF))
   \   0000001A   ....               SBCI    R27, HIGH((-(TData + 43) & 0xFFFF))
   \   0000001C   911C               LD      R17, X
   \   0000001E   2B10               OR      R17, R16
   \   00000020   931C               ST      X, R17
    417              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000022   8121               LDD     R18, Z+1
   \   00000024   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_158:
   \   00000026   01A0               MOVW    R21:R20, R1:R0
   \   00000028   0F40               ADD     R20, R16
   \   0000002A   1D53               ADC     R21, R3
   \   0000002C   01DA               MOVW    R27:R26, R21:R20
   \   0000002E   ....               SUBI    R26, LOW((-(TData + 51) & 0xFFFF))
   \   00000030   ....               SBCI    R27, HIGH((-(TData + 51) & 0xFFFF))
   \   00000032   932C               ST      X, R18
    418              if (UART16552[ch].pRxBuffer[pointer + 4]) {
   \   00000034   8104               LDD     R16, Z+4
   \   00000036   2300               TST     R16
   \   00000038   F039               BREQ    ??ReceiveWISStatus_0
    419                  TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] |= 0x80;
   \   0000003A   ....               RCALL   ?Subroutine105
    420              }
   \                     ??CrossCallReturnLabel_159:
   \   0000003C   0E00               ADD     R0, R16
   \   0000003E   1C13               ADC     R1, R3
   \   00000040   ....               RCALL   ?Subroutine116
   \                     ??CrossCallReturnLabel_270:
   \   00000042   A903               LDD     R16, Z+51
   \   00000044   6800               ORI     R16, 0x80
   \   00000046   AB03               STD     Z+51, R16
    421          }
   \                     ??ReceiveWISStatus_0:
   \   00000048   2FA7               MOV     R26, R23
   \   0000004A   91B9               LD      R27, Y+
   \   0000004C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine88:
   \   00000000   91ED               LD      R30, X+
   \   00000002   91FC               LD      R31, X
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_176:
   \   00000002   961A               ADIW    R27:R26, 10
   \   00000004   ....               RCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_131:
   \   00000006   0FE2               ADD     R30, R18
   \   00000008   1FF3               ADC     R31, R19
   \   0000000A   ....               RJMP    ?Subroutine123

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine109:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_290:
   \   00000002   ....               LDI     R26, LOW(UART16552)
   \   00000004   ....               LDI     R27, (UART16552) >> 8
   \   00000006   ....               RJMP    ?Subroutine120
    422          
    423          /*************************************************************************
    424          *
    425          *  Receive WIS protocol data
    426          *
    427          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine137_0:
   \   00000000   0FE0               ADD     R30, R16
   \   00000002   1FF1               ADC     R31, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    428          void ReceiveWISXData(char ch, unsigned short pointer) {
   \                     ReceiveWISXData:
   \   00000000   ....               RCALL   ?Subroutine46
    429          
    430              char i;
    431          
    432              switch (UART16552[ch].pRxBuffer[pointer++]) {
   \                     ??CrossCallReturnLabel_55:
   \   00000002   0119               MOVW    R3:R2, R19:R18
   \   00000004   9601               ADIW    R25:R24, 1
   \   00000006   ....               RCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_249:
   \   00000008   8522               LDD     R18, Z+10
   \   0000000A   8533               LDD     R19, Z+11
   \   0000000C   01F9               MOVW    R31:R30, R19:R18
   \   0000000E   0DE2               ADD     R30, R2
   \   00000010   1DF3               ADC     R31, R3
   \   00000012   8100               LD      R16, Z
   \   00000014   3703               CPI     R16, 115
   \   00000016   F4E9               BRNE    ??ReceiveWISXData_0
    433              case 115:                                     // Serial number
    434                  TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000018   2F06               MOV     R16, R22
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E342               LDI     R20, 50
   \   0000001E   ....               RCALL   ?Subroutine132
   \                     ??CrossCallReturnLabel_282:
   \   00000020   ....               LDI     R26, LOW(TData)
   \   00000022   ....               LDI     R27, (TData) >> 8
   \   00000024   ....               RCALL   ?Subroutine120
   \                     ??CrossCallReturnLabel_258:
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   ....               RCALL   ?Subroutine80
    435                  TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \                     ??CrossCallReturnLabel_209:
   \   0000002A   0F66               LSL     R22
   \   0000002C   0F66               LSL     R22
   \   0000002E   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_157:
   \   00000030   0F60               ADD     R22, R16
   \   00000032   8361               STD     Z+1, R22
    436                  for (i = 2; i < (4 + 2); i++) {
   \   00000034   E002               LDI     R16, 2
   \   00000036   E014               LDI     R17, 4
    437                      TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveWISXData_1:
   \   00000038   01F9               MOVW    R31:R30, R19:R18
   \   0000003A   ....               RCALL   ?Subroutine108
    438                  }
   \                     ??CrossCallReturnLabel_171:
   \   0000003C   8160               LD      R22, Z
   \   0000003E   01FD               MOVW    R31:R30, R27:R26
   \   00000040   0FE0               ADD     R30, R16
   \   00000042   1FF5               ADC     R31, R21
   \   00000044   56EC               SUBI    R30, 108
   \   00000046   4FFA               SBCI    R31, 250
   \   00000048   8360               ST      Z, R22
   \   0000004A   9601               ADIW    R25:R24, 1
   \   0000004C   9503               INC     R16
   \   0000004E   951A               DEC     R17
   \   00000050   F799               BRNE    ??ReceiveWISXData_1
    439                  break;
    440              default:
    441                  break;
    442              }
    443          }
   \                     ??ReceiveWISXData_0:
   \   00000052   ....               RJMP    ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine80:
   \   00000000   56EC               SUBI    R30, 108
   \   00000002   4FFA               SBCI    R31, 250
   \   00000004   E001               LDI     R16, 1
   \   00000006   ....               RJMP    ?Subroutine125

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine46:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F60               MOV     R22, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine108:
   \   00000000   0FE8               ADD     R30, R24
   \   00000002   1FF9               ADC     R31, R25
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine83:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_291:
   \   00000002   ....               LDI     R30, LOW(UART16552)
   \   00000004   ....               LDI     R31, (UART16552) >> 8
   \   00000006   ....               RJMP    ??Subroutine137_0
    444          
    445          /*************************************************************************
    446          *
    447          *  Receive measured data from WIS
    448          *
    449          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine127:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine128:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine135:
   \   00000000   E0E8               LDI     R30, 8
   \   00000002   ........           JMP     ?EPILOGUE_B8_L09

   \                                 In  segment CODE, align 2, keep-with-next
    450          void ReceiveWISData(char ch, unsigned short pointer) {
   \                     ReceiveWISData:
   \   00000000   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_90:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_199:
   \   00000004   01C0               MOVW    R25:R24, R1:R0
   \   00000006   910C               LD      R16, X
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E020               LDI     R18, 0
   \   0000000C   E030               LDI     R19, 0
   \   0000000E   ........           CALL    ?UL2F_L04
   \   00000012   0128               MOVW    R5:R4, R17:R16
   \   00000014   2E62               MOV     R6, R18
   \   00000016   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_115:
   \   00000018   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_23:
   \   0000001A   8333               STD     Z+3, R19
    451          
    452              TData.RS4.Result[(ch * 4) + PortPair][0] = (float)UART16552[ch].pRxBuffer[pointer + 0];       // Water detected
    453              TData.RS4.Result[(ch * 4) + PortPair][1] = (float)((UART16552[ch].pRxBuffer[pointer + 1] << 8) // Temperature
    454                                                                 + UART16552[ch].pRxBuffer[pointer + 2]) / 10.0;
   \   0000001C   01FD               MOVW    R31:R30, R27:R26
   \   0000001E   8111               LDD     R17, Z+1
   \   00000020   8102               LDD     R16, Z+2
   \   00000022   2F21               MOV     R18, R17
   \   00000024   0F22               LSL     R18
   \   00000026   0B22               SBC     R18, R18
   \   00000028   2F32               MOV     R19, R18
   \   0000002A   ........           CALL    ?SL2F_L04
   \   0000002E   E040               LDI     R20, 0
   \   00000030   E260               LDI     R22, 32
   \   00000032   E471               LDI     R23, 65
   \   00000034   ........           CALL    ?F_DIV_L04
   \   00000038   0128               MOVW    R5:R4, R17:R16
   \   0000003A   0139               MOVW    R7:R6, R19:R18
   \   0000003C   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_120:
   \   0000003E   E030               LDI     R19, 0
   \   00000040   018C               MOVW    R17:R16, R25:R24
   \   00000042   0F02               ADD     R16, R18
   \   00000044   1F13               ADC     R17, R19
   \   00000046   E348               LDI     R20, 56
   \   00000048   E050               LDI     R21, 0
   \   0000004A   ....               RCALL   ?Subroutine23
    455              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 3];         // Status
   \                     ??CrossCallReturnLabel_212:
   \   0000004C   8163               LDD     R22, Z+3
   \   0000004E   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_116:
   \   00000050   ....               RCALL   ?Subroutine27
    456              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = 0;                                            // Unused
   \                     ??CrossCallReturnLabel_30:
   \   00000052   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_228:
   \   00000054   0F08               ADD     R16, R24
   \   00000056   1F19               ADC     R17, R25
   \   00000058   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_32:
   \   0000005A   8330               ST      Z, R19
    457          }
   \   0000005C   ....               RJMP    ?Subroutine135

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine75:
   \   00000000   9120....           LDS     R18, PortPair
   \   00000004   018C               MOVW    R17:R16, R25:R24
   \   00000006   0F02               ADD     R16, R18
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_223:
   \   00000002   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   00000004   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   1F15               ADC     R17, R21
   \   00000002   E04E               LDI     R20, 14
   \   00000004   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_222:
   \   00000006   ....               RCALL   ??Subroutine140_0
   \                     ??CrossCallReturnLabel_268:
   \   00000008   AF63               STD     Z+59, R22
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   1F15               ADC     R17, R21
   \   00000002   E348               LDI     R20, 56
   \   00000004   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_221:
   \   00000006   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   00000008   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   0000000A   8240               ST      Z, R4
   \   0000000C   8251               STD     Z+1, R5
   \   0000000E   8262               STD     Z+2, R6
   \   00000010   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine94:
   \   00000000   ....               RCALL   ?Subroutine132
   \                     ??CrossCallReturnLabel_285:
   \   00000002   ....               RJMP    ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_220:
   \   00000002   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   00000004   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   00000006   8240               ST      Z, R4
   \   00000008   8251               STD     Z+1, R5
   \   0000000A   8262               STD     Z+2, R6
   \   0000000C   8273               STD     Z+3, R7
   \   0000000E   ....               RJMP    ?Subroutine127

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   2F60               MOV     R22, R16
   \   00000002   ....               RCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_253:
   \   00000004   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_170:
   \   00000006                      REQUIRE ?Subroutine123
   \   00000006                      ;               // Fall through to label ?Subroutine123

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine107:
   \   00000000   85A2               LDD     R26, Z+10
   \   00000002   85B3               LDD     R27, Z+11
   \   00000004   0FA2               ADD     R26, R18
   \   00000006   1FB3               ADC     R27, R19
   \   00000008   9508               RET
    458          
    459          
    460          /*************************************************************************
    461          *
    462          *  Receive measured data from Radar
    463          *
    464          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    465          void ReceiveRadarData(char ch, unsigned short pointer) {
   \                     ReceiveRadarData:
   \   00000000   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_89:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_198:
   \   00000004   0190               MOVW    R19:R18, R1:R0
   \   00000006   904D               LD      R4, X+
   \   00000008   905D               LD      R5, X+
   \   0000000A   906D               LD      R6, X+
   \   0000000C   907C               LD      R7, X
   \   0000000E   9713               SBIW    R27:R26, 3
   \   00000010   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_200:
   \   00000012   0180               MOVW    R17:R16, R1:R0
   \   00000014   0F04               ADD     R16, R20
   \   00000016   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_22:
   \   00000018   8273               STD     Z+3, R7
    466              float *Data1 = (float *)&UART16552[ch].pRxBuffer[pointer + 0];
    467              float *Data2 = (float *)&UART16552[ch].pRxBuffer[pointer + 4];
    468          
    469              TData.RS4.Result[(ch * 4) + PortPair][0] = *Data1;       // Distance
    470              TData.RS4.Result[(ch * 4) + PortPair][1] = *Data2;      // Level
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8044               LDD     R4, Z+4
   \   0000001E   8055               LDD     R5, Z+5
   \   00000020   8066               LDD     R6, Z+6
   \   00000022   8077               LDD     R7, Z+7
   \   00000024   ....               RCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_309:
   \   00000026   E348               LDI     R20, 56
   \   00000028   ....               RCALL   ?Subroutine23
    471              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 8];         // Status
   \                     ??CrossCallReturnLabel_211:
   \   0000002A   8560               LDD     R22, Z+8
   \   0000002C   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_201:
   \   0000002E   0189               MOVW    R17:R16, R19:R18
   \   00000030   0F04               ADD     R16, R20
   \   00000032   ....               RCALL   ?Subroutine27
    472              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 9];         // Unused???
   \                     ??CrossCallReturnLabel_29:
   \   00000034   01FD               MOVW    R31:R30, R27:R26
   \   00000036   8561               LDD     R22, Z+9
   \   00000038   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_227:
   \   0000003A   0F20               ADD     R18, R16
   \   0000003C   1F53               ADC     R21, R19
   \   0000003E   2F42               MOV     R20, R18
   \   00000040   E00E               LDI     R16, 14
   \   00000042   ....               RCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_31:
   \   00000044   8360               ST      Z, R22
    473          }
   \   00000046                      REQUIRE ?Subroutine135
   \   00000046                      ;               // Fall through to label ?Subroutine135

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine53:
   \   00000000   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_205:
   \   00000002                      REQUIRE ??Subroutine145_0
   \   00000002                      ;               // Fall through to label ??Subroutine145_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine145_0:
   \   00000000   0189               MOVW    R17:R16, R19:R18
   \   00000002                      REQUIRE ??Subroutine146_0
   \   00000002                      ;               // Fall through to label ??Subroutine146_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine146_0:
   \   00000000   0F04               ADD     R16, R20
   \   00000002   1F15               ADC     R17, R21
   \   00000004   9508               RET
    474          
    475          
    476          /*************************************************************************
    477          *
    478          *  Receive Serial number and version information from Radar
    479          *
    480          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    481          void ReceiveRadarInfo(char ch, unsigned short pointer) {
   \                     ReceiveRadarInfo:
   \   00000000   2F7B               MOV     R23, R27
   \   00000002   2E2A               MOV     R2, R26
   \   00000004   2F60               MOV     R22, R16
    482              // TData.RS4.SerialNumber[(ch * 4) + PortPair] = atol((const char *)&UART16552[ch].pRxBuffer[pointer + 0]);
    483              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = *((long *)&UART16552[ch].pRxBuffer[pointer + 10]);
   \   00000006   ....               RCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_15:
   \   00000008   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_169:
   \   0000000A   961A               ADIW    R27:R26, 10
   \   0000000C   910D               LD      R16, X+
   \   0000000E   E014               LDI     R17, 4
   \   00000010   9F61               MUL     R22, R17
   \   00000012   ....               RCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_119:
   \   00000014   0E02               ADD     R0, R18
   \   00000016   1E15               ADC     R1, R21
   \   00000018   ....               RCALL   ?Subroutine116
   \                     ??CrossCallReturnLabel_269:
   \   0000001A   A703               STD     Z+43, R16
    484          }
   \   0000001C                      REQUIRE ?Subroutine122
   \   0000001C                      ;               // Fall through to label ?Subroutine122

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine122:
   \   00000000   2DA2               MOV     R26, R2
   \   00000002   2FB7               MOV     R27, R23
   \   00000004   9508               RET
    485          
    486          /*************************************************************************
    487          *
    488          *  Receive pressure measured data from AN_SGCNV
    489          *
    490          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine141_0:
   \   00000000   ....               RCALL   ?Subroutine132
   \                     ??CrossCallReturnLabel_292:
   \   00000002   ....               RJMP    ??Subroutine137_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine143_0:
   \   00000000   ....               RCALL   ??Subroutine141_0
   \                     ??CrossCallReturnLabel_280:
   \   00000002   8240               ST      Z, R4
   \   00000004   8251               STD     Z+1, R5
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    491          void ReceivePTOData(char ch, unsigned short pointer) {
   \                     ReceivePTOData:
   \   00000000   ........           CALL    ?PROLOGUE12_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   0159               MOVW    R11:R10, R19:R18
    492          
    493              unsigned short pnt, ADCh;
    494              short packlen;
    495          
    496              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000008   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_13:
   \   0000000A   0D0A               ADD     R16, R10
   \   0000000C   1D1B               ADC     R17, R11
   \   0000000E   5001               SUBI    R16, 1
   \   00000010   4010               SBCI    R17, 0
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   8080               LD      R8, Z
   \   00000016   2499               CLR     R9
    497          
    498              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000018   ....               RCALL   ?Subroutine81
    499          
    500              if (packlen > 0) {
   \                     ??CrossCallReturnLabel_126:
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   1680               CP      R8, R16
   \   0000001E   0499               CPC     R9, R9
   \   00000020   F1A4               BRLT    ??ReceivePTOData_0
    501                  for (pnt = 0; pnt < packlen; pnt += 6) {
   \   00000022   E080               LDI     R24, 0
   \   00000024   E090               LDI     R25, 0
   \   00000026   E004               LDI     R16, 4
   \   00000028   9E40               MUL     R4, R16
   \   0000002A   0190               MOVW    R19:R18, R1:R0
   \                     ??ReceivePTOData_1:
   \   0000002C   01FD               MOVW    R31:R30, R27:R26
   \   0000002E   8422               LDD     R2, Z+10
   \   00000030   8433               LDD     R3, Z+11
   \   00000032   0185               MOVW    R17:R16, R11:R10
   \   00000034   0F08               ADD     R16, R24
   \   00000036   1F19               ADC     R17, R25
   \   00000038   0E20               ADD     R2, R16
   \   0000003A   1E31               ADC     R3, R17
   \   0000003C   01F1               MOVW    R31:R30, R3:R2
   \   0000003E   8160               LD      R22, Z
   \   00000040   E070               LDI     R23, 0
    502                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
    503                      if (ADCh < 14) {
   \   00000042   306E               CPI     R22, 14
   \   00000044   F4F0               BRCC    ??ReceivePTOData_2
    504                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000046   8041               LDD     R4, Z+1
   \   00000048   ....               LDI     R30, LOW((TData + 59))
   \   0000004A   ....               LDI     R31, HIGH((TData + 59))
   \   0000004C   0FE6               ADD     R30, R22
   \   0000004E   1DF9               ADC     R31, R9
   \   00000050   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_203:
   \   00000052   E050               LDI     R21, 0
   \   00000054   ....               RCALL   ??Subroutine145_0
   \                     ??CrossCallReturnLabel_308:
   \   00000056   E04E               LDI     R20, 14
   \   00000058   ....               RCALL   ?Subroutine132
   \                     ??CrossCallReturnLabel_284:
   \   0000005A   ....               RCALL   ??Subroutine137_0
   \                     ??CrossCallReturnLabel_298:
   \   0000005C   8240               ST      Z, R4
    505                          *((float *)&TData.RS4.Result[(ch * 4) + PortPair][ADCh]) = *((float *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   0000005E   01F1               MOVW    R31:R30, R3:R2
   \   00000060   8042               LDD     R4, Z+2
   \   00000062   8053               LDD     R5, Z+3
   \   00000064   8064               LDD     R6, Z+4
   \   00000066   8075               LDD     R7, Z+5
   \   00000068   ....               LDI     R30, LOW((TData + 731))
   \   0000006A   ....               LDI     R31, HIGH((TData + 731))
   \   0000006C   0F66               LSL     R22
   \   0000006E   1F77               ROL     R23
   \   00000070   0F66               LSL     R22
   \   00000072   1F77               ROL     R23
   \   00000074   0FE6               ADD     R30, R22
   \   00000076   1FF7               ADC     R31, R23
   \   00000078   ....               RCALL   ?Subroutine53
    506                      }
    507                  }
   \                     ??CrossCallReturnLabel_310:
   \   0000007A   E348               LDI     R20, 56
   \   0000007C   ....               RCALL   ??Subroutine143_0
   \                     ??CrossCallReturnLabel_275:
   \   0000007E   8262               STD     Z+2, R6
   \   00000080   8273               STD     Z+3, R7
   \                     ??ReceivePTOData_2:
   \   00000082   9606               ADIW    R25:R24, 6
   \   00000084   1588               CP      R24, R8
   \   00000086   0599               CPC     R25, R9
   \   00000088   F288               BRCS    ??ReceivePTOData_1
    508              }
    509              OS_Unuse(&UARTSEND);
   \                     ??ReceivePTOData_0:
   \   0000008A   ....               RCALL   ?Subroutine82
    510          }
   \                     ??CrossCallReturnLabel_128:
   \   0000008C   E0EC               LDI     R30, 12
   \   0000008E   ........           JMP     ?EPILOGUE_B12_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine82:
   \   00000000   ....               LDI     R16, LOW(UARTSEND)
   \   00000002   ....               LDI     R17, (UARTSEND) >> 8
   \   00000004   ........           JMP     OS_Unuse

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine81:
   \   00000000   ....               LDI     R16, LOW(UARTSEND)
   \   00000002   ....               LDI     R17, (UARTSEND) >> 8
   \   00000004   ........           JMP     OS_Use

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine84:
   \   00000000   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_177:
   \   00000002   ....               RJMP    ?Subroutine127

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_217:
   \   00000002   8502               LDD     R16, Z+10
   \   00000004   8513               LDD     R17, Z+11
   \   00000006   9508               RET
    511          /*************************************************************************
    512          *
    513          *  Receive Wash Track and High Level data from AN_SGCNV
    514          *
    515          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    516          void ReceiveWHData(char ch, unsigned short pointer) {
   \                     ReceiveWHData:
   \   00000000   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_60:
   \   00000002   2F80               MOV     R24, R16
   \   00000004   01D9               MOVW    R27:R26, R19:R18
    517          
    518              // Fixed packet length
    519              //short packlen;
    520          
    521              //packlen = UART16552[ch].pRxBuffer[pointer - 1];
    522          
    523              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000006   ....               RCALL   ?Subroutine81
    524          
    525              for (short pnt = 0; pnt < 4; pnt++) {
   \                     ??CrossCallReturnLabel_127:
   \   00000008   E020               LDI     R18, 0
   \   0000000A   E030               LDI     R19, 0
   \   0000000C   E064               LDI     R22, 4
   \   0000000E   2F08               MOV     R16, R24
   \   00000010   ....               RCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_251:
   \   00000012   8422               LDD     R2, Z+10
   \   00000014   8433               LDD     R3, Z+11
   \   00000016   0E2A               ADD     R2, R26
   \   00000018   1E3B               ADC     R3, R27
   \   0000001A   9F86               MUL     R24, R22
    526                  TData.RS4.WTrackCnt[(ch * 4) + PortPair][pnt] = ((unsigned short*)&UART16552[ch].pRxBuffer[pointer])[pnt];  // 4 x Wash track 
   \                     ??ReceiveWHData_0:
   \   0000001C   0189               MOVW    R17:R16, R19:R18
   \   0000001E   0F00               LSL     R16
   \   00000020   1F11               ROL     R17
   \   00000022   01F1               MOVW    R31:R30, R3:R2
   \   00000024   ....               RCALL   ??Subroutine137_0
    527              }
   \                     ??CrossCallReturnLabel_295:
   \   00000026   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_302:
   \   00000028   ....               LDI     R30, LOW((TData + 1179))
   \   0000002A   ....               LDI     R31, HIGH((TData + 1179))
   \   0000002C   ....               RCALL   ??Subroutine137_0
   \                     ??CrossCallReturnLabel_296:
   \   0000002E   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_202:
   \   00000030   0180               MOVW    R17:R16, R1:R0
   \   00000032   ....               RCALL   ??Subroutine146_0
   \                     ??CrossCallReturnLabel_306:
   \   00000034   E043               LDI     R20, 3
   \   00000036   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_86:
   \   00000038   ....               RCALL   ??Subroutine137_0
   \                     ??CrossCallReturnLabel_297:
   \   0000003A   83A0               ST      Z, R26
   \   0000003C   83B1               STD     Z+1, R27
   \   0000003E   5F2F               SUBI    R18, 255
   \   00000040   4F3F               SBCI    R19, 255
   \   00000042   956A               DEC     R22
   \   00000044   F759               BRNE    ??ReceiveWHData_0
    528              TData.RS4.LevelSwitch[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer+8]; // Hgh levels in 9th byte
   \   00000046   01F1               MOVW    R31:R30, R3:R2
   \   00000048   8520               LDD     R18, Z+8
   \   0000004A   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_21:
   \   0000004C   01FA               MOVW    R31:R30, R21:R20
   \   0000004E   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   00000050   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   00000052   8320               ST      Z, R18
    529              TData.RS4.WTTime[(ch * 4) + PortPair] = *((unsigned short *)&UART16552[ch].pRxBuffer[pointer+9]);  // WashTrack time in 10th and 11th bytes
   \   00000054   01F1               MOVW    R31:R30, R3:R2
   \   00000056   8521               LDD     R18, Z+9
   \   00000058   8532               LDD     R19, Z+10
   \   0000005A   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_96:
   \   0000005C   0C00               LSL     R0
   \   0000005E   1C11               ROL     R1
   \   00000060   01F0               MOVW    R31:R30, R1:R0
   \   00000062   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   00000064   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   00000066   8320               ST      Z, R18
   \   00000068   8331               STD     Z+1, R19
    530              
    531              TData.RS4.WHDataAvailable |= 0x01 << ((ch * 4) + PortPair);
   \   0000006A   0F88               LSL     R24
   \   0000006C   0F88               LSL     R24
   \   0000006E   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_160:
   \   00000070   0F80               ADD     R24, R16
   \   00000072   E001               LDI     R16, 1
   \   00000074   2F48               MOV     R20, R24
   \   00000076   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_87:
   \   00000078   ....               LDI     R30, LOW((TData + 1267))
   \   0000007A   ....               LDI     R31, HIGH((TData + 1267))
   \   0000007C   8110               LD      R17, Z
   \   0000007E   2B10               OR      R17, R16
   \   00000080   8310               ST      Z, R17
    532              OS_Unuse(&UARTSEND);
   \   00000082   ....               RCALL   ?Subroutine82
    533          }
   \                     ??CrossCallReturnLabel_129:
   \   00000084                      REQUIRE ?Subroutine131
   \   00000084                      ;               // Fall through to label ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine69:
   \   00000000   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_164:
   \   00000002   0E00               ADD     R0, R16
   \   00000004   1E11               ADC     R1, R17
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine144_0:
   \   00000000   81A0               LD      R26, Z
   \   00000002   81B1               LDD     R27, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_161:
   \   00000002   E010               LDI     R17, 0
   \   00000004   01A0               MOVW    R21:R20, R1:R0
   \   00000006   0F40               ADD     R20, R16
   \   00000008   1F51               ADC     R21, R17
   \   0000000A   9508               RET
    534          
    535          
    536          /************************************************************************
    537          *
    538          *  Receive raw data for pressure, temp and other from AN_SGCNV
    539          *
    540          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine95:
   \   00000000   1FF5               ADC     R31, R21
   \   00000002   9140....           LDS     R20, PortPair
   \   00000006   0181               MOVW    R17:R16, R3:R2
   \   00000008   0F04               ADD     R16, R20
   \   0000000A   1F15               ADC     R17, R21
   \   0000000C   E04E               LDI     R20, 14
   \   0000000E                      REQUIRE ??Subroutine141_0
   \   0000000E                      ;               // Fall through to label ??Subroutine141_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine60:
   \   00000000   E0A0               LDI     R26, 0
   \   00000002                      REQUIRE ??Subroutine142_0
   \   00000002                      ;               // Fall through to label ??Subroutine142_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine142_0:
   \   00000000   E004               LDI     R16, 4
   \   00000002   9E20               MUL     R2, R16
   \   00000004   0110               MOVW    R3:R2, R1:R0
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   E002               LDI     R16, 2
   \   00000002   9FB0               MUL     R27, R16
   \   00000004   0DE0               ADD     R30, R0
   \   00000006   1DF1               ADC     R31, R1
   \   00000008   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_204:
   \   0000000A   0181               MOVW    R17:R16, R3:R2
   \   0000000C   0F04               ADD     R16, R20
   \   0000000E   1F15               ADC     R17, R21
   \   00000010   E14C               LDI     R20, 28
   \   00000012                      REQUIRE ??Subroutine143_0
   \   00000012                      ;               // Fall through to label ??Subroutine143_0

   \                                 In  segment CODE, align 2, keep-with-next
    541          void ReceiveRData(char ch, unsigned short pointer) {
   \                     ReceiveRData:
   \   00000000   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_123:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine10
    542          
    543              char pnt, ADCh;
    544              short packlen;
    545          
    546              packlen = UART16552[ch].pRxBuffer[pointer - 1];
    547          
    548              if (packlen > 0) {
   \                     ??CrossCallReturnLabel_12:
   \   00000004   F064               BRLT    ??ReceiveRData_0
    549                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000006   ....               RCALL   ?Subroutine60
   \                     ??CrossCallReturnLabel_274:
   \   00000008   C007               RJMP    ??ReceiveRData_1
   \                     ??ReceiveRData_2:
   \   0000000A   ....               RCALL   ?Subroutine52
    550                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
    551                      if (ADCh < 14) {
   \                     ??CrossCallReturnLabel_71:
   \   0000000C   F420               BRCC    ??CrossCallReturnLabel_277
    552                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   0000000E   ....               RCALL   ?Subroutine25
    553                          *((short *)&TData.RS4.Raw[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
    554                      }
    555                  }
   \                     ??CrossCallReturnLabel_25:
   \   00000010   ....               LDI     R30, LOW((TData + 283))
   \   00000012   ....               LDI     R31, HIGH((TData + 283))
   \   00000014   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_277:
   \   00000016   5FAC               SUBI    R26, 252
   \                     ??ReceiveRData_1:
   \   00000018   17A2               CP      R26, R18
   \   0000001A   0755               CPC     R21, R21
   \   0000001C   F3B4               BRLT    ??ReceiveRData_2
    556              }
    557          }
   \                     ??ReceiveRData_0:
   \   0000001E   ....               RJMP    ?Subroutine134

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine52:
   \   00000000   2F08               MOV     R16, R24
   \   00000002   2F13               MOV     R17, R19
   \   00000004   0F0A               ADD     R16, R26
   \   00000006   1F15               ADC     R17, R21
   \   00000008   012B               MOVW    R5:R4, R23:R22
   \   0000000A   0E40               ADD     R4, R16
   \   0000000C   1E51               ADC     R5, R17
   \   0000000E   01F2               MOVW    R31:R30, R5:R4
   \   00000010   81B0               LD      R27, Z
   \   00000012   30BE               CPI     R27, 14
   \   00000014   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   8061               LDD     R6, Z+1
   \   00000002   ....               LDI     R30, LOW((TData + 59))
   \   00000004   ....               LDI     R31, HIGH((TData + 59))
   \   00000006   0FEB               ADD     R30, R27
   \   00000008   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_278:
   \   0000000A   8260               ST      Z, R6
   \   0000000C   01F2               MOVW    R31:R30, R5:R4
   \   0000000E   8042               LDD     R4, Z+2
   \   00000010   8053               LDD     R5, Z+3
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   2E20               MOV     R2, R16
   \   00000002   2F82               MOV     R24, R18
   \   00000004   ....               RCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_252:
   \   00000006   8562               LDD     R22, Z+10
   \   00000008   8573               LDD     R23, Z+11
   \   0000000A   01FB               MOVW    R31:R30, R23:R22
   \   0000000C   0FE8               ADD     R30, R24
   \   0000000E   1FF3               ADC     R31, R19
   \   00000010   9122               LD      R18, -Z
   \   00000012   3021               CPI     R18, 1
   \   00000014   0755               CPC     R21, R21
   \   00000016   9508               RET
    558          
    559          /*************************************************************************
    560          *
    561          *  Receive cal data  from AN_SGCNV
    562          *
    563          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    564          void ReceiveCData(char ch, unsigned short pointer) {
   \                     ReceiveCData:
   \   00000000   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_122:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine10
    565          
    566              char pnt, ADCh;
    567              short packlen;
    568          
    569              packlen = UART16552[ch].pRxBuffer[pointer - 1];
    570          
    571              if (packlen > 0) {
   \                     ??CrossCallReturnLabel_11:
   \   00000004   F064               BRLT    ??ReceiveCData_0
    572                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000006   ....               RCALL   ?Subroutine60
   \                     ??CrossCallReturnLabel_273:
   \   00000008   C007               RJMP    ??ReceiveCData_1
   \                     ??ReceiveCData_2:
   \   0000000A   ....               RCALL   ?Subroutine52
    573                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
    574                      if (ADCh < 14) {
   \                     ??CrossCallReturnLabel_70:
   \   0000000C   F420               BRCC    ??CrossCallReturnLabel_276
    575                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   0000000E   ....               RCALL   ?Subroutine25
    576                          *((short *)&TData.RS4.Cal[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
    577                      }
    578                  }
   \                     ??CrossCallReturnLabel_24:
   \   00000010   ....               LDI     R30, LOW((TData + 507))
   \   00000012   ....               LDI     R31, HIGH((TData + 507))
   \   00000014   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_276:
   \   00000016   5FAC               SUBI    R26, 252
   \                     ??ReceiveCData_1:
   \   00000018   17A2               CP      R26, R18
   \   0000001A   0755               CPC     R21, R21
   \   0000001C   F3B4               BRLT    ??ReceiveCData_2
    579              }
    580          }
   \                     ??ReceiveCData_0:
   \   0000001E   ....               RJMP    ?Subroutine134
    581          
    582          /*************************************************************************
    583          *
    584          *  Receive card status  from AN_SGCNV
    585          *
    586          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    587          void ReceiveCardStatus(char ch, unsigned short pointer) {
   \                     ReceiveCardStatus:
   \   00000000   2F7B               MOV     R23, R27
   \   00000002   2E2A               MOV     R2, R26
   \   00000004   2F60               MOV     R22, R16
   \   00000006   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_197:
   \   00000008   8120               LD      R18, Z
   \   0000000A   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_20:
   \   0000000C   01DA               MOVW    R27:R26, R21:R20
   \   0000000E   ....               SUBI    R26, LOW((-(TData + 43) & 0xFFFF))
   \   00000010   ....               SBCI    R27, HIGH((-(TData + 43) & 0xFFFF))
   \   00000012   932C               ST      X, R18
    588          
    589              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer];
    590              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000014   8121               LDD     R18, Z+1
   \   00000016   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_95:
   \   00000018   ....               RCALL   ?Subroutine116
   \                     ??CrossCallReturnLabel_271:
   \   0000001A   AB23               STD     Z+51, R18
    591          }
   \   0000001C   ....               RJMP    ?Subroutine122
    592          
    593          /*************************************************************************
    594          *
    595          *  Receive config data from AN_SGCNV
    596          *
    597          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    598          void ReceiveConfigData(char ch, unsigned short pointer) {
   \                     ReceiveConfigData:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    599          
    600              char i, ADCh;
    601          
    602              for (i = 0; i < 14; i++) {
   \   00000008   E02E               LDI     R18, 14
   \   0000000A   ....               RCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_250:
   \   0000000C   8562               LDD     R22, Z+10
   \   0000000E   8573               LDD     R23, Z+11
   \   00000010   ....               RCALL   ??Subroutine142_0
    603                  ADCh = UART16552[ch].pRxBuffer[pointer++];
   \                     ??CrossCallReturnLabel_272:
   \   00000012   01FB               MOVW    R31:R30, R23:R22
   \   00000014   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_172:
   \   00000016   8040               LD      R4, Z
   \   00000018   9601               ADIW    R25:R24, 1
    604                  if (ADCh < 14) {
   \   0000001A   E00E               LDI     R16, 14
   \   0000001C   1640               CP      R4, R16
   \   0000001E   F468               BRCC    ??CrossCallReturnLabel_34
    605                      TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer];
   \   00000020   01DB               MOVW    R27:R26, R23:R22
   \   00000022   0FA8               ADD     R26, R24
   \   00000024   1FB9               ADC     R27, R25
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   8130               LD      R19, Z
   \   0000002A   ....               LDI     R30, LOW((TData + 59))
   \   0000002C   ....               LDI     R31, HIGH((TData + 59))
   \   0000002E   ....               RCALL   ?Subroutine29
    606                      TData.RS4.TargetSetup2[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + 1];
   \                     ??CrossCallReturnLabel_33:
   \   00000030   01FD               MOVW    R31:R30, R27:R26
   \   00000032   8131               LDD     R19, Z+1
   \   00000034   ....               LDI     R30, LOW((TData + 171))
   \   00000036   ....               LDI     R31, HIGH((TData + 171))
   \   00000038   ....               RCALL   ?Subroutine29
    607                  }
    608                  pointer += 2;
   \                     ??CrossCallReturnLabel_34:
   \   0000003A   9602               ADIW    R25:R24, 2
    609              }
   \   0000003C   952A               DEC     R18
   \   0000003E   F749               BRNE    ??CrossCallReturnLabel_272
    610          }
   \   00000040   E0E5               LDI     R30, 5
   \   00000042   ........           JMP     ?EPILOGUE_B5_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   0DE4               ADD     R30, R4
   \   00000002   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_279:
   \   00000004   8330               ST      Z, R19
   \   00000006   9508               RET
    611          
    612          /*************************************************************************
    613          *
    614          *  Receive eeprom data from AN_SGCNV
    615          *
    616          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   E050               LDI     R21, 0
   \   00000002   ....               RJMP    ?Subroutine132

   \                                 In  segment CODE, align 2, keep-with-next
    617          void ReceiveCardEEPROMData(char ch, unsigned short pointer) {
   \                     ReceiveCardEEPROMData:
   \   00000000   ....               RCALL   ?Subroutine46
    618          
    619              short i;
    620          
    621              TData.RS4.FromTargetBuffer[ch][0] = true;
   \                     ??CrossCallReturnLabel_56:
   \   00000002   E010               LDI     R17, 0
   \   00000004   E342               LDI     R20, 50
   \   00000006   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_28:
   \   00000008   ....               LDI     R18, LOW(TData)
   \   0000000A   2E22               MOV     R2, R18
   \   0000000C   ....               LDI     R18, (TData) >> 8
   \   0000000E   0E20               ADD     R2, R16
   \   00000010   1F21               ADC     R18, R17
   \   00000012   2E32               MOV     R3, R18
   \   00000014   2DE2               MOV     R30, R2
   \   00000016   2FF2               MOV     R31, R18
   \   00000018   ....               RCALL   ?Subroutine80
    622              TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \                     ??CrossCallReturnLabel_210:
   \   0000001A   2F06               MOV     R16, R22
   \   0000001C   0F00               LSL     R16
   \   0000001E   0F00               LSL     R16
   \   00000020   9110....           LDS     R17, PortPair
   \   00000024   0F01               ADD     R16, R17
   \   00000026   8301               STD     Z+1, R16
    623              for (i = 2; i < (41 + 2); i++) {
   \   00000028   E022               LDI     R18, 2
   \   0000002A   E030               LDI     R19, 0
   \   0000002C   E279               LDI     R23, 41
   \   0000002E   E14A               LDI     R20, 26
    624                  TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveCardEEPROMData_0:
   \   00000030   2F06               MOV     R16, R22
   \   00000032   E010               LDI     R17, 0
   \   00000034   ....               RCALL   ?Subroutine132
    625              }
   \                     ??CrossCallReturnLabel_283:
   \   00000036   01D8               MOVW    R27:R26, R17:R16
   \   00000038   ....               SUBI    R26, LOW((-(UART16552 + 10) & 0xFFFF))
   \   0000003A   ....               SBCI    R27, HIGH((-(UART16552 + 10) & 0xFFFF))
   \   0000003C   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_43:
   \   0000003E   01F1               MOVW    R31:R30, R3:R2
   \   00000040   0FE2               ADD     R30, R18
   \   00000042   1FF3               ADC     R31, R19
   \   00000044   56EC               SUBI    R30, 108
   \   00000046   4FFA               SBCI    R31, 250
   \   00000048   8300               ST      Z, R16
   \   0000004A   9601               ADIW    R25:R24, 1
   \   0000004C   5F2F               SUBI    R18, 255
   \   0000004E   4F3F               SBCI    R19, 255
   \   00000050   957A               DEC     R23
   \   00000052   F771               BRNE    ??ReceiveCardEEPROMData_0
    626          }
   \   00000054   ....               RJMP    ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   ....               RCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_133:
   \   00000002   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_174:
   \   00000004   8100               LD      R16, Z
   \   00000006   9508               RET
    627          
    628          /*************************************************************************
    629          *
    630          * Build send packet header for AN-SGCNV
    631          *
    632          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    633          void Uart_BuildHeader16552(char ch) {
   \                     Uart_BuildHeader16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
    634          
    635              UART16552[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_215:
   \   00000004   ....               RCALL   ?Subroutine35
    636              UART16552[ch].RxLast = 0;
    637              UART16552[ch].TxLast = 0;
   \                     ??CrossCallReturnLabel_44:
   \   00000006   8354               STD     Z+4, R21
   \   00000008   8355               STD     Z+5, R21
    638          
    639              UART16552[ch].pTxBuffer[0] = ANPRO1_SYN;                        /* Sync */
   \   0000000A   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_35:
   \   0000000C   E002               LDI     R16, 2
   \   0000000E   8300               ST      Z, R16
    640              UART16552[ch].pTxBuffer[1] = ANPRO1_SYN;                        /* Sync */
   \   00000010   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_36:
   \   00000012   8301               STD     Z+1, R16
    641              UART16552[ch].pTxBuffer[2] = 0;                          /* Rx address */
   \   00000014   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_37:
   \   00000016   8352               STD     Z+2, R21
    642              UART16552[ch].pTxBuffer[3] = MY_SGCNV_ADDR;              /* My address to AD-SGCNV */
   \   00000018   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_38:
   \   0000001A   EF0D               LDI     R16, 253
   \   0000001C   8303               STD     Z+3, R16
    643              UART16552[ch].pTxBuffer[4] = 0;                          /* packlen HB, don't know yet */
   \   0000001E   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_39:
   \   00000020   8354               STD     Z+4, R21
    644              UART16552[ch].pTxBuffer[5] = 0;                          /* packlen LB, don't know yet */
   \   00000022   ....               RCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_130:
   \   00000024   8355               STD     Z+5, R21
    645          }
   \   00000026                      REQUIRE ?Subroutine126
   \   00000026                      ;               // Fall through to label ?Subroutine126

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine126:
   \   00000000   01D9               MOVW    R27:R26, R19:R18
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   ....               RCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_132:
   \   00000002   9711               SBIW    R27:R26, 1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   8754               STD     Z+12, R21
   \   00000002   8755               STD     Z+13, R21
   \   00000004   8756               STD     Z+14, R21
   \   00000006   8757               STD     Z+15, R21
   \   00000008   9508               RET
    646          
    647          /*************************************************************************
    648          *
    649          * Build  packet tail
    650          *
    651          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    652          void Uart_BuildTail16552(char ch) {
   \                     Uart_BuildTail16552:
   \   00000000   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_57:
   \   00000002   2F70               MOV     R23, R16
    653          
    654              Uart_BuildHeader16552(ch);                                // fist build the header
   \   00000004   ....               RCALL   Uart_BuildHeader16552
    655          
    656              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;         // command, No more data
   \   00000006   ....               LDI     R24, LOW(UART16552)
   \   00000008   ....               LDI     R25, (UART16552) >> 8
   \   0000000A   2F07               MOV     R16, R23
   \   0000000C   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_286:
   \   0000000E   01DC               MOVW    R27:R26, R25:R24
   \   00000010   ....               RCALL   ?Subroutine120
   \                     ??CrossCallReturnLabel_255:
   \   00000012   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_213:
   \   00000014   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_218:
   \   00000016   E001               LDI     R16, 1
   \   00000018   ....               RCALL   ?Subroutine1
    657              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;         // error
   \                     ??CrossCallReturnLabel_1:
   \   0000001A   8350               ST      Z, R21
   \   0000001C   ....               RCALL   ?Subroutine111
    658          
    659              UART16552[ch].pTxBuffer[4] = (UART16552[ch].TxFirst) >> 8;           // packet len high
   \                     ??CrossCallReturnLabel_178:
   \   0000001E   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_40:
   \   00000020   8314               STD     Z+4, R17
    660              UART16552[ch].pTxBuffer[5] = UART16552[ch].TxFirst;                // correct length because stx's
   \   00000022   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_186:
   \   00000024   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_41:
   \   00000026   8305               STD     Z+5, R16
    661          
    662          
    663              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst] = CalcDSTxChecksumUART16552(ch, UART16552[ch].TxFirst); // Get checksum
   \   00000028   01FD               MOVW    R31:R30, R27:R26
   \   0000002A   8122               LDD     R18, Z+2
   \   0000002C   8133               LDD     R19, Z+3
   \   0000002E   2F07               MOV     R16, R23
   \   00000030   ....               RCALL   CalcDSTxChecksumUART16552
   \   00000032   2F20               MOV     R18, R16
   \   00000034   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_214:
   \   00000036   8142               LDD     R20, Z+2
   \   00000038   8153               LDD     R21, Z+3
   \   0000003A   ....               RCALL   ??Subroutine146_0
   \                     ??CrossCallReturnLabel_305:
   \   0000003C   01F8               MOVW    R31:R30, R17:R16
   \   0000003E   8320               ST      Z, R18
    664              UART16552[ch].TxFirst++;                                     // OBS!! must be inc here due
   \   00000040   ....               RCALL   ?Subroutine111
    665                                                                           // to ANSI standard !!!!
    666          
    667              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANPRO1_EOT;            // End of transmission
   \                     ??CrossCallReturnLabel_179:
   \   00000042   8100               LD      R16, Z
   \   00000044   8111               LDD     R17, Z+1
   \   00000046   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_219:
   \   00000048   E003               LDI     R16, 3
   \   0000004A   ....               RCALL   ?Subroutine1
    668              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0x00;            //switch off transmitter delay
   \                     ??CrossCallReturnLabel_0:
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   8300               ST      Z, R16
   \   00000050   ....               RCALL   ?Subroutine111
    669          
    670              UART16552[ch].TxCount = UART16552[ch].TxFirst - 1;       //bytes to send (-1 for the start byte)
   \                     ??CrossCallReturnLabel_180:
   \   00000052   5001               SUBI    R16, 1
   \   00000054   4010               SBCI    R17, 0
   \   00000056   8306               STD     Z+6, R16
   \   00000058   8317               STD     Z+7, R17
    671              UART16552[ch].TxLast = 1;                               // sent 1 byte
   \   0000005A   E001               LDI     R16, 1
   \   0000005C   E010               LDI     R17, 0
   \   0000005E   8304               STD     Z+4, R16
   \   00000060   8315               STD     Z+5, R17
    672              GoToSyncUART16552(ch);                                 // go to sync modus for recive
   \   00000062   2F07               MOV     R16, R23
   \   00000064   ....               RCALL   ?Subroutine55
    673              if (ch == 0) {                                           // Turn on TXE for channel
   \                     ??CrossCallReturnLabel_74:
   \   00000066   2377               TST     R23
   \   00000068   F459               BRNE    ??Uart_BuildTail16552_0
    674                  OS_RetriggerTimer(&TimerUART0);                    // and start timeout timer
   \   0000006A   ....               LDI     R16, LOW(TimerUART0)
   \   0000006C   ....               LDI     R17, (TimerUART0) >> 8
   \   0000006E   ........           CALL    OS_RetriggerTimer
    675                  U0_MCR |= RTS;                                    // set RTS on
   \   00000072   E0EC               LDI     R30, LOW(4364)
   \   00000074   ....               RCALL   ?Subroutine3
    676                  OS_Delay(20);                                           // Wait (ms) for tx stable
    677                  U0_THR = UART16552[ch].pTxBuffer[0];                // Send 1. byte
    678              } else if (ch == 1) {
   \                     ??CrossCallReturnLabel_2:
   \   00000076   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_300:
   \   00000078   910C               LD      R16, X
   \   0000007A   93001108           STS     4360, R16
   \   0000007E   C00D               RJMP    ??Uart_BuildTail16552_1
   \                     ??Uart_BuildTail16552_0:
   \   00000080   3071               CPI     R23, 1
   \   00000082   F459               BRNE    ??Uart_BuildTail16552_1
    679                  OS_RetriggerTimer(&TimerUART1);                    // and start timeout timer
   \   00000084   ....               LDI     R16, LOW(TimerUART1)
   \   00000086   ....               LDI     R17, (TimerUART1) >> 8
   \   00000088   ........           CALL    OS_RetriggerTimer
    680                  U1_MCR |= RTS;                                      // set RTS on
   \   0000008C   E0E4               LDI     R30, LOW(4356)
   \   0000008E   ....               RCALL   ?Subroutine3
    681                  OS_Delay(20);                                           // Wait (ms) for tx stable
    682                  U1_THR = UART16552[ch].pTxBuffer[0];                  // Send 1. byte
    683              }
   \                     ??CrossCallReturnLabel_3:
   \   00000090   8DA2               LDD     R26, Z+26
   \   00000092   8DB3               LDD     R27, Z+27
   \   00000094   910C               LD      R16, X
   \   00000096   93001100           STS     4352, R16
    684          }
   \                     ??Uart_BuildTail16552_1:
   \   0000009A   ....               RJMP    ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine48:
   \   00000000   910D               LD      R16, X+
   \   00000002   911C               LD      R17, X
   \   00000004   9711               SBIW    R27:R26, 1
   \   00000006                      REQUIRE ?Subroutine127
   \   00000006                      ;               // Fall through to label ?Subroutine127

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   E1F1               LDI     R31, (4364) >> 8
   \   00000002   8100               LD      R16, Z
   \   00000004   6002               ORI     R16, 0x02
   \   00000006   8300               ST      Z, R16
   \   00000008   E104               LDI     R16, 20
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   ........           CALL    OS_Delay
   \   00000010   01FC               MOVW    R31:R30, R25:R24
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_183:
   \   00000002   8100               LD      R16, Z
   \   00000004   8111               LDD     R17, Z+1
   \   00000006                      REQUIRE ?Subroutine93
   \   00000006                      ;               // Fall through to label ?Subroutine93

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine93:
   \   00000000   8122               LDD     R18, Z+2
   \   00000002   8133               LDD     R19, Z+3
   \   00000004   0F02               ADD     R16, R18
   \   00000006   1F13               ADC     R17, R19
   \   00000008                      REQUIRE ?Subroutine128
   \   00000008                      ;               // Fall through to label ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine85:
   \   00000000   8300               ST      Z, R16
   \   00000002                      REQUIRE ?Subroutine111
   \   00000002                      ;               // Fall through to label ?Subroutine111

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine111:
   \   00000000   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_189:
   \   00000002   ....               RJMP    ?Subroutine119

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine119:
   \   00000000   8113               LDD     R17, Z+3
   \   00000002   5F0F               SUBI    R16, 255
   \   00000004   4F1F               SBCI    R17, 255
   \   00000006   8302               STD     Z+2, R16
   \   00000008   8313               STD     Z+3, R17
   \   0000000A   9508               RET
    685          
    686          /*************************************************************************
    687          *
    688          * Build send request for system status on WIS
    689          *
    690          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_175:
   \   00000004   91ED               LD      R30, X+
   \   00000006   91FD               LD      R31, X+
   \   00000008   910D               LD      R16, X+
   \   0000000A   911C               LD      R17, X
   \   0000000C                      REQUIRE ?Subroutine115
   \   0000000C                      ;               // Fall through to label ?Subroutine115

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine115:
   \   00000000   9713               SBIW    R27:R26, 3
   \   00000002                      REQUIRE ??Subroutine137_0
   \   00000002                      ;               // Fall through to label ??Subroutine137_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_182:
   \   00000002   91ED               LD      R30, X+
   \   00000004   91FD               LD      R31, X+
   \   00000006   910D               LD      R16, X+
   \   00000008   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_299:
   \   0000000A   8350               ST      Z, R21
   \   0000000C   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_181:
   \   0000000E   ....               RJMP    ?Subroutine126

   \                                 In  segment CODE, align 2, keep-with-next
    691          void Uart_BuildReqWISCardStatus(char ch) {
   \                     Uart_BuildReqWISCardStatus:
   \   00000000   ....               RCALL   ?Subroutine8
    692          
    693              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_STAT;       /*command, send data */
   \                     ??CrossCallReturnLabel_8:
   \   00000002   E604               LDI     R16, 100
   \   00000004   ....               RJMP    ?Subroutine0
    694              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    695          
    696          }
    697          
    698          /*************************************************************************
    699          *
    700          * Build send request for WIS protocoler on WIS
    701          *
    702          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine136_0:
   \   00000000   ....               RCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_254:
   \   00000002   81A0               LD      R26, Z
   \   00000004   81B1               LDD     R27, Z+1
   \   00000006   8102               LDD     R16, Z+2
   \   00000008   8113               LDD     R17, Z+3
   \   0000000A   ....               RJMP    ?Subroutine120

   \                                 In  segment CODE, align 2, keep-with-next
    703          void Uart_BuildReqWISXData(char ch, char sndcmd) {
   \                     Uart_BuildReqWISXData:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004   2F21               MOV     R18, R17
    704          
    705              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_XDATA;       /*command, send data */
   \   00000006   ....               RCALL   ??Subroutine136_0
   \                     ??CrossCallReturnLabel_247:
   \   00000008   E606               LDI     R16, 102
   \   0000000A   ....               RCALL   ?Subroutine89
    706              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
    707              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = sndcmd;                 // xdata cmd
   \                     ??CrossCallReturnLabel_134:
   \   0000000C   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_301:
   \   0000000E   ....               RCALL   ?Subroutine120
   \                     ??CrossCallReturnLabel_256:
   \   00000010   932C               ST      X, R18
   \   00000012                      REQUIRE ?Subroutine50
   \   00000012                      ;               // Fall through to label ?Subroutine50
    708          
    709          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine50:
   \   00000000   ....               RCALL   ??Subroutine138_0
   \                     ??CrossCallReturnLabel_260:
   \   00000002   2FA6               MOV     R26, R22
   \   00000004   2FB3               MOV     R27, R19
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine89:
   \   00000000   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_261:
   \   00000002   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_185:
   \   00000004   E001               LDI     R16, 1
   \   00000006   ....               RJMP    ?Subroutine112

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine113:
   \   00000000   81A0               LD      R26, Z
   \   00000002   81B1               LDD     R27, Z+1
   \   00000004   ....               RJMP    ?Subroutine120

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine112:
   \   00000000   930C               ST      X, R16
   \   00000002                      REQUIRE ?Subroutine119
   \   00000002                      REQUIRE ??Subroutine138_0
   \   00000002                      ;               // Fall through to label ??Subroutine138_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine138_0:
   \   00000000   8102               LDD     R16, Z+2
   \   00000002                      REQUIRE ?Subroutine119
   \   00000002                      ;               // Fall through to label ?Subroutine119
    710          
    711          /*************************************************************************
    712          *
    713          * Build send request for measure data to Water ingress
    714          *
    715          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE ??Subroutine136_0
   \   00000002                      ;               // Fall through to label ??Subroutine136_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_136:
   \   00000002   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_184:
   \   00000004   935C               ST      X, R21
   \   00000006   ....               RCALL   ??Subroutine138_0
   \                     ??CrossCallReturnLabel_259:
   \   00000008   ....               RJMP    ?Subroutine126

   \                                 In  segment CODE, align 2, keep-with-next
    716          void Uart_BuildReqWISData(char ch) {
   \                     Uart_BuildReqWISData:
   \   00000000   ....               RCALL   ?Subroutine7
    717          
    718              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_240:
   \   00000002   E605               LDI     R16, 101
   \   00000004   ....               RJMP    ?Subroutine36
    719              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    720              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    721          
    722          }
    723          
    724          
    725          /*************************************************************************
    726          *
    727          * Build send request for GODA measurement
    728          *
    729          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    730          void Uart_BuildReqRadarData(char ch) {
   \                     Uart_BuildReqRadarData:
   \   00000000   ....               RCALL   ?Subroutine7
    731          
    732              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_241:
   \   00000002   EA00               LDI     R16, 160
   \   00000004   ....               RJMP    ?Subroutine36
    733              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
    734              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 // data
    735          
    736          }
    737          
    738          /*************************************************************************
    739          *
    740          * Build send request for GODA device information
    741          *
    742          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    743          void Uart_BuildReqRadarInfo(char ch) {
   \                     Uart_BuildReqRadarInfo:
   \   00000000   ....               RCALL   ?Subroutine8
    744          
    745              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_INFO;       /*command, send data */
   \                     ??CrossCallReturnLabel_9:
   \   00000002   EA01               LDI     R16, 161
   \   00000004   ....               RJMP    ?Subroutine0
    746              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                        /*nob */
    747          }
    748          
    749          /*************************************************************************
    750          *
    751          * Build datablock to AN-SGCNV
    752          *
    753          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    754          void Uart_BuildSndData(char ch) {
   \                     Uart_BuildSndData:
   \   00000000   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_58:
   \   00000002   2F30               MOV     R19, R16
    755          
    756              char i;
    757          
    758              for (i = 3; i < (TData.RS4.ToTargetBuffer[ch][2]) + 3; i++) {
   \   00000004   E023               LDI     R18, 3
   \   00000006   E010               LDI     R17, 0
   \   00000008   E540               LDI     R20, 80
   \   0000000A   ....               RCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_27:
   \   0000000C   ....               LDI     R24, LOW(TData)
   \   0000000E   ....               LDI     R25, (TData) >> 8
   \   00000010   0F80               ADD     R24, R16
   \   00000012   1F91               ADC     R25, R17
   \   00000014   01BC               MOVW    R23:R22, R25:R24
   \   00000016   506C               SUBI    R22, 12
   \   00000018   4F7B               SBCI    R23, 251
   \   0000001A   2F03               MOV     R16, R19
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   E14A               LDI     R20, 26
   \   00000020   ....               RCALL   ?Subroutine132
   \                     ??CrossCallReturnLabel_281:
   \   00000022   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_137:
   \   00000024   ....               RCALL   ??Subroutine137_0
   \                     ??CrossCallReturnLabel_293:
   \   00000026   E030               LDI     R19, 0
   \   00000028   C011               RJMP    ??Uart_BuildSndData_0
    759                  UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.ToTargetBuffer[ch][i];       /*command, send data */
   \                     ??Uart_BuildSndData_1:
   \   0000002A   01DC               MOVW    R27:R26, R25:R24
   \   0000002C   0FA2               ADD     R26, R18
   \   0000002E   1FB3               ADC     R27, R19
   \   00000030   50AC               SUBI    R26, 12
   \   00000032   4FBB               SBCI    R27, 251
   \   00000034   ....               RCALL   ?Subroutine57
    760              }
   \                     ??CrossCallReturnLabel_304:
   \   00000036   8142               LDD     R20, Z+2
   \   00000038   8153               LDD     R21, Z+3
   \   0000003A   0FA4               ADD     R26, R20
   \   0000003C   1FB5               ADC     R27, R21
   \   0000003E   930C               ST      X, R16
   \   00000040   8102               LDD     R16, Z+2
   \   00000042   8113               LDD     R17, Z+3
   \   00000044   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_64:
   \   00000046   8302               STD     Z+2, R16
   \   00000048   8313               STD     Z+3, R17
   \   0000004A   9523               INC     R18
   \                     ??Uart_BuildSndData_0:
   \   0000004C   01DB               MOVW    R27:R26, R23:R22
   \   0000004E   9612               ADIW    R27:R26, 2
   \   00000050   91AC               LD      R26, X
   \   00000052   E0B0               LDI     R27, 0
   \   00000054   9613               ADIW    R27:R26, 3
   \   00000056   172A               CP      R18, R26
   \   00000058   073B               CPC     R19, R27
   \   0000005A   F33C               BRLT    ??Uart_BuildSndData_1
    761              TData.RS4.ToTargetBuffer[ch][0] = false;            // data sent
   \   0000005C   01FB               MOVW    R31:R30, R23:R22
   \   0000005E   8330               ST      Z, R19
    762          }
   \   00000060   ....               RJMP    ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine57:
   \   00000000   910C               LD      R16, X
   \   00000002                      REQUIRE ??Subroutine144_0
   \   00000002                      ;               // Fall through to label ??Subroutine144_0
    763          
    764          /*************************************************************************
    765          *
    766          * Build send request for measure data to AN-SGCNV
    767          *
    768          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    769          void Uart_BuildReqM16552(char ch) {
   \                     Uart_BuildReqM16552:
   \   00000000   ....               RCALL   ?Subroutine7
    770          
    771              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_M_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_245:
   \   00000002   E00A               LDI     R16, 10
   \   00000004   ....               RJMP    ?Subroutine36
    772              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    773              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    774          
    775          }
    776          
    777          /*************************************************************************
    778          *
    779          * Build send request for raw data to AN-SGCNV
    780          *
    781          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    782          void Uart_BuildReqR16552(char ch) {
   \                     Uart_BuildReqR16552:
   \   00000000   ....               RCALL   ?Subroutine7
    783          
    784              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_R_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_243:
   \   00000002   E00D               LDI     R16, 13
   \   00000004   ....               RJMP    ?Subroutine36
    785              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    786              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    787          
    788          }
    789          
    790          /*************************************************************************
    791          *
    792          * Build send request for cal data to AN-SGCNV
    793          *
    794          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    795          void Uart_BuildReqC16552(char ch) {
   \                     Uart_BuildReqC16552:
   \   00000000   ....               RCALL   ?Subroutine7
    796          
    797              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_C_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_244:
   \   00000002   E100               LDI     R16, 16
   \   00000004   ....               RJMP    ?Subroutine36
    798              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    799              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    800          
    801          }
    802          
    803          /*************************************************************************
    804          *
    805          * Build send request for system status on AN_SGCNV
    806          *
    807          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    808          void Uart_BuildReqCardStatus(char ch) {
   \                     Uart_BuildReqCardStatus:
   \   00000000   ....               RCALL   ?Subroutine7
    809          
    810              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CARD_STAT;       /*command, send data */
   \                     ??CrossCallReturnLabel_242:
   \   00000002   E10B               LDI     R16, 27
   \   00000004                      REQUIRE ?Subroutine36
   \   00000004                      ;               // Fall through to label ?Subroutine36
    811              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    812              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    813          
    814          }
    815          
    816          /*************************************************************************
    817          *
    818          * Build send request for card config on AN_SGCNV
    819          *
    820          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    821          void Uart_BuildReqConfig(char ch) {
   \                     Uart_BuildReqConfig:
   \   00000000   ....               RCALL   ?Subroutine8
    822          
    823              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CONFIG;       /*command, send data */
   \                     ??CrossCallReturnLabel_10:
   \   00000002   E101               LDI     R16, 17
   \   00000004   ....               RJMP    ?Subroutine0
    824              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    825          
    826          }
    827          
    828          /*************************************************************************
    829          *
    830          * Build send request for EEPROM data on AN_SGCNV
    831          *
    832          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    833          void Uart_BuildReqEEPROMData(char ch) {
   \                     Uart_BuildReqEEPROMData:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004   2F20               MOV     R18, R16
    834          
    835              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_EEP_DATA;       /*command, send data */
   \   00000006   ....               RCALL   ??Subroutine136_0
   \                     ??CrossCallReturnLabel_246:
   \   00000008   E108               LDI     R16, 24
   \   0000000A   ....               RCALL   ?Subroutine89
    836              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    837              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.EEPROMADChannel[ch];       /*data */
   \                     ??CrossCallReturnLabel_135:
   \   0000000C   ....               SUBI    R18, LOW((-(TData + 1528) & 0xFFFF))
   \   0000000E   2FA2               MOV     R26, R18
   \   00000010   ....               SBCI    R21, HIGH((-(TData + 1528) & 0xFFFF))
   \   00000012   2FB5               MOV     R27, R21
   \   00000014   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_303:
   \   00000016   8122               LDD     R18, Z+2
   \   00000018   0FA2               ADD     R26, R18
   \   0000001A   1FB1               ADC     R27, R17
   \   0000001C   930C               ST      X, R16
   \   0000001E   ....               RJMP    ?Subroutine50
    838          
    839          }
    840          /*************************************************************************
    841          *
    842          *  Receive data on USARTs
    843          *
    844          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    845          void ReceivePacketUart16552(char ch) {
   \                     ReceivePacketUart16552:
   \   00000000   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_62:
   \   00000002   2F80               MOV     R24, R16
    846          
    847              switch (UART16552[ch].RxState) {                  // check status
   \   00000004   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_216:
   \   00000006   8902               LDD     R16, Z+18
   \   00000008   2300               TST     R16
   \   0000000A   F409               BRNE    $+2+2
   \   0000000C   C059               RJMP    ??CrossCallReturnLabel_72
   \   0000000E   950A               DEC     R16
   \   00000010   F031               BREQ    ??ReceivePacketUart16552_0
   \   00000012   950A               DEC     R16
   \   00000014   F139               BREQ    ??ReceivePacketUart16552_1
   \   00000016   5008               SUBI    R16, 8
   \   00000018   F409               BRNE    $+2+2
   \   0000001A   C052               RJMP    ??CrossCallReturnLabel_72
   \   0000001C   C04F               RJMP    ??ReceivePacketUart16552_2
    848              case SYNC :
    849                  // all functionallity in inerrupt routine
    850                  break;
    851              case HEADER :
    852                  if (UART16552[ch].RxLast >= 3) {             // receive header
   \                     ??ReceivePacketUart16552_0:
   \   0000001E   8506               LDD     R16, Z+14
   \   00000020   8517               LDD     R17, Z+15
   \   00000022   3003               CPI     R16, 3
   \   00000024   4010               SBCI    R17, 0
   \   00000026   F408               BRCC    $+2+2
   \   00000028   C04B               RJMP    ??CrossCallReturnLabel_72
    853                      UART16552[ch].RxPacklen = ((UART16552[ch].pRxBuffer[2] * 256) +
    854                                                 UART16552[ch].pRxBuffer[3]);    // Find length of package
   \   0000002A   8502               LDD     R16, Z+10
   \   0000002C   85F3               LDD     R31, Z+11
   \   0000002E   2FE0               MOV     R30, R16
   \   00000030   8132               LDD     R19, Z+2
   \   00000032   8103               LDD     R16, Z+3
   \   00000034   E010               LDI     R17, 0
   \   00000036   2F20               MOV     R18, R16
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   8B06               STD     Z+22, R16
   \   0000003C   8B37               STD     Z+23, R19
    855                      if ((UART16552[ch].RxPacklen < ((short)RXSIZE_UART_16552 - UART16552[ch].RxLast)) &&    /* chk. header */
    856                          (UART16552[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   0000003E   E708               LDI     R16, 120
   \   00000040   8546               LDD     R20, Z+14
   \   00000042   8557               LDD     R21, Z+15
   \   00000044   1B04               SUB     R16, R20
   \   00000046   0B15               SBC     R17, R21
   \   00000048   1720               CP      R18, R16
   \   0000004A   0731               CPC     R19, R17
   \   0000004C   F5B8               BRCC    ??ReceivePacketUart16552_2
   \   0000004E   3027               CPI     R18, 7
   \   00000050   4030               SBCI    R19, 0
   \   00000052   F1A0               BRCS    ??ReceivePacketUart16552_2
    857                          UART16552[ch].RxState = RECEIVE;       // Header ok og to data receive state
   \   00000054   E002               LDI     R16, 2
   \   00000056   8B02               STD     Z+18, R16
    858                          UART16552[ch].RxCount = UART16552[ch].RxLast + 1;    // Set receivcounter
   \   00000058   8586               LDD     R24, Z+14
   \   0000005A   8597               LDD     R25, Z+15
   \   0000005C   9601               ADIW    R25:R24, 1
   \   0000005E   8B80               STD     Z+16, R24
   \   00000060   8B91               STD     Z+17, R25
   \   00000062   C02E               RJMP    ??CrossCallReturnLabel_72
    859                      } else {
    860                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    861                      }
    862                  }
    863                  break;
    864              case RECEIVE :
    865                  if (++UART16552[ch].RxCount >= UART16552[ch].RxPacklen) {
   \                     ??ReceivePacketUart16552_1:
   \   00000064   8900               LDD     R16, Z+16
   \   00000066   8911               LDD     R17, Z+17
   \   00000068   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_68:
   \   0000006A   8B00               STD     Z+16, R16
   \   0000006C   8B11               STD     Z+17, R17
   \   0000006E   8926               LDD     R18, Z+22
   \   00000070   8937               LDD     R19, Z+23
   \   00000072   1702               CP      R16, R18
   \   00000074   0713               CPC     R17, R19
   \   00000076   F120               BRCS    ??CrossCallReturnLabel_72
    866                      if ((UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 1]) == ANPRO1_EOT) {
   \   00000078   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_125:
   \   0000007A   5001               SUBI    R16, 1
   \   0000007C   4010               SBCI    R17, 0
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   8100               LD      R16, Z
   \   00000082   3003               CPI     R16, 3
   \   00000084   F4D9               BRNE    ??ReceivePacketUart16552_2
    867                          if (CalcDSRxChecksum16552(ch)) {
   \   00000086   2F08               MOV     R16, R24
   \   00000088   ....               RCALL   CalcDSRxChecksum16552
   \   0000008A   2B01               OR      R16, R17
   \   0000008C   F0B9               BREQ    ??ReceivePacketUart16552_2
    868                              if (UART16552[ch].pRxBuffer[0] == MY_SGCNV_ADDR) {     // reply from AN_SGCNV
   \   0000008E   01FD               MOVW    R31:R30, R27:R26
   \   00000090   8502               LDD     R16, Z+10
   \   00000092   85F3               LDD     R31, Z+11
   \   00000094   2FE0               MOV     R30, R16
   \   00000096   8100               LD      R16, Z
   \   00000098   3F0D               CPI     R16, 253
   \   0000009A   F481               BRNE    ??ReceivePacketUart16552_2
    869                                  UART16552[ch].RxState = HANDLE;                   // Package OK
   \   0000009C   01FD               MOVW    R31:R30, R27:R26
   \   0000009E   E00A               LDI     R16, 10
   \   000000A0   8B02               STD     Z+18, R16
    870                                  if (ch == 0) {
   \   000000A2   2388               TST     R24
   \   000000A4   F421               BRNE    ??ReceivePacketUart16552_3
    871                                      OS_SignalEvent(1, &TCB_RS485Rec);
   \   000000A6   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   000000A8   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   000000AA   E001               LDI     R16, 1
   \   000000AC   C005               RJMP    ??ReceivePacketUart16552_4
    872                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart16552_3:
   \   000000AE   3081               CPI     R24, 1
   \   000000B0   F439               BRNE    ??CrossCallReturnLabel_72
    873                                      OS_SignalEvent(2, &TCB_RS485Rec);
   \   000000B2   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   000000B4   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   000000B6   E002               LDI     R16, 2
    874                                  }
    875                              } else {
    876                                  GoToSyncUART16552(ch);                             // go to sync modus for recive
    877                              }
    878                          } else {
    879                              GoToSyncUART16552(ch);                                // go to sync modus for recive
    880                          }
    881                      } else {
    882                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    883                      }
    884                  }
   \                     ??ReceivePacketUart16552_4:
   \   000000B8   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_165:
   \   000000BA   C002               RJMP    ??CrossCallReturnLabel_72
    885                  break;
    886              case HANDLE :
    887                  break;
    888              default :
    889                  GoToSyncUART16552(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart16552_2:
   \   000000BC   2F08               MOV     R16, R24
   \   000000BE   ....               RCALL   ?Subroutine55
    890                  break;
    891              }                                                           // end switch
    892              if (++UART16552[ch].RxLast >= RXSIZE_UART_16552) {                     // check pointer
   \                     ??CrossCallReturnLabel_72:
   \   000000C0   01FD               MOVW    R31:R30, R27:R26
   \   000000C2   8506               LDD     R16, Z+14
   \   000000C4   8517               LDD     R17, Z+15
   \   000000C6   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_69:
   \   000000C8   8706               STD     Z+14, R16
   \   000000CA   8717               STD     Z+15, R17
   \   000000CC   3708               CPI     R16, 120
   \   000000CE   E020               LDI     R18, 0
   \   000000D0   4010               SBCI    R17, 0
   \   000000D2   F010               BRCS    ??ReceivePacketUart16552_5
    893                  UART16552[ch].RxLast = 0;                                     // reset pointer
   \   000000D4   8726               STD     Z+14, R18
   \   000000D6   8727               STD     Z+15, R18
    894              }
    895          }
   \                     ??ReceivePacketUart16552_5:
   \   000000D8   ....               RJMP    ?Subroutine131
    896          
    897          
    898          /*************************************************************************
    899          *
    900          * Calculate tx checksum for Dallas Semiconductor one-wire CRC
    901          *
    902          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    903          char CalcDSTxChecksumUART16552(char ch, unsigned short len) {
   \                     CalcDSTxChecksumUART16552:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
   \   00000006   2E53               MOV     R5, R19
    904          
    905              unsigned short cnt;
    906              unsigned char csum;
    907          
    908              csum = 0;
   \   00000008   E060               LDI     R22, 0
    909              for (cnt = 2; cnt < len; cnt++) {
   \   0000000A   E082               LDI     R24, 2
   \   0000000C   E090               LDI     R25, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   ....               LDI     R19, (crc) >> 16
   \   00000012   C00C               RJMP    ??CalcDSTxChecksumUART16552_0
    910                  csum = crc[csum ^ UART16552[ch].pTxBuffer[cnt]];
   \                     ??CalcDSTxChecksumUART16552_1:
   \   00000014   2D02               MOV     R16, R2
   \   00000016   E010               LDI     R17, 0
   \   00000018   ....               RCALL   ?Subroutine26
    911              }
   \                     ??CrossCallReturnLabel_26:
   \   0000001A   01D8               MOVW    R27:R26, R17:R16
   \   0000001C   ....               SUBI    R26, LOW((-(UART16552) & 0xFFFF))
   \   0000001E   ....               SBCI    R27, (-(UART16552) & 0xFFFF) >> 8
   \   00000020   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_42:
   \   00000022   2760               EOR     R22, R16
   \   00000024   2FE6               MOV     R30, R22
   \   00000026   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_50:
   \   00000028   9166               ELPM    R22, Z
   \   0000002A   9601               ADIW    R25:R24, 1
   \                     ??CalcDSTxChecksumUART16552_0:
   \   0000002C   1782               CP      R24, R18
   \   0000002E   0595               CPC     R25, R5
   \   00000030   F388               BRCS    ??CalcDSTxChecksumUART16552_1
    912              return csum;
   \   00000032   2F06               MOV     R16, R22
   \   00000034   E0E6               LDI     R30, 6
   \   00000036   ........           JMP     ?EPILOGUE_B6_L09
    913          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   E0F0               LDI     R31, 0
   \   00000002   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000004   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000006   BF3B               OUT     0x3B, R19
   \   00000008   9508               RET
    914          
    915          /*************************************************************************
    916          *
    917          * Calculate rx checksum for Dallas Semiconductor one-wire CRC
    918          *
    919          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    920          short CalcDSRxChecksum16552(char ch) {
   \                     CalcDSRxChecksum16552:
   \   00000000   ....               RCALL   ?Subroutine47
    921          
    922              short cnt;
    923              unsigned char csum;
    924          
    925              csum = 0;
   \                     ??CrossCallReturnLabel_63:
   \   00000002   E020               LDI     R18, 0
    926              for (cnt = 0; cnt < (UART16552[ch].RxPacklen - 2); cnt++) {
   \   00000004   E080               LDI     R24, 0
   \   00000006   E090               LDI     R25, 0
   \   00000008   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_14:
   \   0000000A   ....               LDI     R19, (crc) >> 16
   \   0000000C   C009               RJMP    ??CalcDSRxChecksum16552_0
    927                  csum = crc[csum ^ UART16552[ch].pRxBuffer[cnt]];
   \                     ??CalcDSRxChecksum16552_1:
   \   0000000E   2F42               MOV     R20, R18
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   ....               RCALL   ?Subroutine108
    928              }
   \                     ??CrossCallReturnLabel_173:
   \   00000014   8120               LD      R18, Z
   \   00000016   2742               EOR     R20, R18
   \   00000018   2FE4               MOV     R30, R20
   \   0000001A   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_51:
   \   0000001C   9126               ELPM    R18, Z
   \   0000001E   9601               ADIW    R25:R24, 1
   \                     ??CalcDSRxChecksum16552_0:
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   8946               LDD     R20, Z+22
   \   00000024   8957               LDD     R21, Z+23
   \   00000026   5042               SUBI    R20, 2
   \   00000028   4050               SBCI    R21, 0
   \   0000002A   1784               CP      R24, R20
   \   0000002C   0795               CPC     R25, R21
   \   0000002E   F378               BRCS    ??CalcDSRxChecksum16552_1
    929              if (csum == UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 2]) {
   \   00000030   8946               LDD     R20, Z+22
   \   00000032   8957               LDD     R21, Z+23
   \   00000034   ....               RCALL   ??Subroutine146_0
   \                     ??CrossCallReturnLabel_307:
   \   00000036   5002               SUBI    R16, 2
   \   00000038   4010               SBCI    R17, 0
   \   0000003A   01F8               MOVW    R31:R30, R17:R16
   \   0000003C   8100               LD      R16, Z
   \   0000003E   1720               CP      R18, R16
   \   00000040   F411               BRNE    ??CalcDSRxChecksum16552_2
    930                  return true;
   \   00000042   E001               LDI     R16, 1
   \   00000044   C001               RJMP    ??CalcDSRxChecksum16552_3
    931              } else {
    932                  return false;
   \                     ??CalcDSRxChecksum16552_2:
   \   00000046   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum16552_3:
   \   00000048   E010               LDI     R17, 0
    933              }
   \   0000004A   ....               RJMP    ?Subroutine131
    934          }
    935          
    936          /*************************************************************************
    937          *
    938          * Goes to sync mode
    939          *
    940          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    941          void GoToSyncUART16552(char ch) {
   \                     GoToSyncUART16552:
    942          
    943              if (ch < 2) {
   \   00000000   3002               CPI     R16, 2
   \   00000002   F438               BRCC    ??GoToSyncUART16552_0
    944                  UART16552[ch].SyncCnt = 0;                        // ready for sync
   \   00000004   ....               RCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_248:
   \   00000006   8B53               STD     Z+19, R21
    945                  UART16552[ch].RxState = SYNC;
   \   00000008   8B52               STD     Z+18, R21
    946                  UART16552[ch].RxFirst = 0;
   \   0000000A   8754               STD     Z+12, R21
   \   0000000C   8755               STD     Z+13, R21
    947                  UART16552[ch].RxPacklen = 0;
   \   0000000E   8B56               STD     Z+22, R21
   \   00000010   8B57               STD     Z+23, R21
    948              }
    949          }
   \                     ??GoToSyncUART16552_0:
   \   00000012   9508               RET
    950          
    951          /*************************************************************************
    952          *
    953          *  Empty rx buffer on PC16552 UART
    954          *
    955          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    956          void EmptyRxBuf16552(char uartno) {
   \                     EmptyRxBuf16552:
    957          
    958              switch (uartno) {
   \   00000000   2300               TST     R16
   \   00000002   F019               BREQ    ??EmptyRxBuf16552_0
   \   00000004   950A               DEC     R16
   \   00000006   F041               BREQ    ??EmptyRxBuf16552_1
   \   00000008   9508               RET
    959              case 0:
    960                  do {
    961                      U0_RBR;
   \                     ??EmptyRxBuf16552_0:
   \   0000000A   91001108           LDS     R16, 4360
    962                  } while (U0_LSR & DATA_READY);
   \   0000000E   9100110D           LDS     R16, 4365
   \   00000012   FD00               SBRC    R16, 0
   \   00000014   CFFA               RJMP    ??EmptyRxBuf16552_0
   \   00000016   9508               RET
    963                  break;
    964              case 1:
    965                  do {
    966                      U1_RBR;
   \                     ??EmptyRxBuf16552_1:
   \   00000018   91001100           LDS     R16, 4352
    967                  } while (U1_LSR & DATA_READY);
   \   0000001C   91001105           LDS     R16, 4357
   \   00000020   FD00               SBRC    R16, 0
   \   00000022   CFFA               RJMP    ??EmptyRxBuf16552_1
    968                  break;
    969              }
    970          }
   \   00000024   9508               RET
    971          
    972          /*************************************************************************
    973          *
    974          *  Init the PC16552 UART
    975          *
    976          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    977          void Init16552(char channel, unsigned long baud) {
   \                     Init16552:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01CA               MOVW    R25:R24, R21:R20
    978          
    979              /*--- Configure UART data block ---*/
    980              UART16552[channel].TxFirst = 0x00;
   \   00000008   ....               LDI     R18, LOW(UART16552)
   \   0000000A   ....               LDI     R19, (UART16552) >> 8
   \   0000000C   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_287:
   \   0000000E   01F9               MOVW    R31:R30, R19:R18
   \   00000010   ....               RCALL   ??Subroutine137_0
   \                     ??CrossCallReturnLabel_294:
   \   00000012   8352               STD     Z+2, R21
   \   00000014   8353               STD     Z+3, R21
    981              UART16552[channel].TxLast = 0x00;
   \   00000016   8354               STD     Z+4, R21
   \   00000018   8355               STD     Z+5, R21
    982              UART16552[channel].TxCount = 0x00;
   \   0000001A   8356               STD     Z+6, R21
   \   0000001C   8357               STD     Z+7, R21
    983              UART16552[channel].RxFirst = 0x00;
   \   0000001E   ....               RCALL   ?Subroutine35
    984              UART16552[channel].RxLast = 0x00;
    985              UART16552[channel].RxCount = 0x00;
   \                     ??CrossCallReturnLabel_45:
   \   00000020   8B50               STD     Z+16, R21
   \   00000022   8B51               STD     Z+17, R21
    986              UART16552[channel].RxState = SYNC;
   \   00000024   8B52               STD     Z+18, R21
    987              UART16552[channel].SyncCnt = 0;
   \   00000026   8B53               STD     Z+19, R21
    988              UART16552[channel].TxStatus = 0x00;
   \   00000028   8750               STD     Z+8, R21
    989          
    990              switch (channel) {
   \   0000002A   2022               TST     R2
   \   0000002C   F019               BREQ    ??Init16552_0
   \   0000002E   942A               DEC     R2
   \   00000030   F129               BREQ    ??Init16552_1
   \   00000032   C047               RJMP    ??Init16552_2
    991              case 0x00 :
    992                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_0:
   \   00000034   01F9               MOVW    R31:R30, R19:R18
   \   00000036   EF0A               LDI     R16, 250
   \   00000038   8B04               STD     Z+20, R16
   \   0000003A   8B55               STD     Z+21, R21
    993                  UART16552[channel].pTxBuffer = TxBuf16552Ch0;
   \   0000003C   ....               LDI     R16, LOW(TxBuf16552Ch0)
   \   0000003E   ....               LDI     R17, (TxBuf16552Ch0) >> 8
   \   00000040   8300               ST      Z, R16
   \   00000042   8311               STD     Z+1, R17
    994                  UART16552[channel].pRxBuffer = RxBuf16552Ch0;
   \   00000044   ....               LDI     R16, LOW(RxBuf16552Ch0)
   \   00000046   ....               LDI     R17, (RxBuf16552Ch0) >> 8
   \   00000048   8702               STD     Z+10, R16
   \   0000004A   8713               STD     Z+11, R17
    995                  U0_LCR = 0x80;          // set DLAB
   \   0000004C   E800               LDI     R16, 128
   \   0000004E   9300110B           STS     4363, R16
    996                  U0_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   00000052   ....               RCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_79:
   \   00000054   93001108           STS     4360, R16
    997                  U0_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   00000058   93101109           STS     4361, R17
    998                  U0_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   0000005C   E003               LDI     R16, 3
   \   0000005E   9300110B           STS     4363, R16
    999                  U0_FCR = 0x01;          // enable FIFO ..
   \   00000062   E001               LDI     R16, 1
   \   00000064   9300110A           STS     4362, R16
   1000                  U0_FCR = 0xC1;          // and set RXLevel to 14
   \   00000068   EC01               LDI     R16, 193
   \   0000006A   9300110A           STS     4362, R16
   1001                  U0_IER = 0x03;          // enable TX and RX int.
   \   0000006E   E003               LDI     R16, 3
   \   00000070   93001109           STS     4361, R16
   1002                  U0_MCR = 0x00;          // RTS off
   \   00000074   E000               LDI     R16, 0
   \   00000076   9300110C           STS     4364, R16
   1003                  break;
   \   0000007A   C023               RJMP    ??Init16552_2
   1004              case 0x01 :
   1005                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_1:
   \   0000007C   01F9               MOVW    R31:R30, R19:R18
   \   0000007E   EF0A               LDI     R16, 250
   \   00000080   A706               STD     Z+46, R16
   \   00000082   A757               STD     Z+47, R21
   1006                  UART16552[channel].pTxBuffer = TxBuf16552Ch1;
   \   00000084   ....               LDI     R16, LOW(TxBuf16552Ch1)
   \   00000086   ....               LDI     R17, (TxBuf16552Ch1) >> 8
   \   00000088   8F02               STD     Z+26, R16
   \   0000008A   8F13               STD     Z+27, R17
   1007                  UART16552[channel].pRxBuffer = RxBuf16552Ch1;
   \   0000008C   ....               LDI     R16, LOW(RxBuf16552Ch1)
   \   0000008E   ....               LDI     R17, (RxBuf16552Ch1) >> 8
   \   00000090   A304               STD     Z+36, R16
   \   00000092   A315               STD     Z+37, R17
   1008                  U1_LCR = 0x80;          // set DLAB
   \   00000094   E800               LDI     R16, 128
   \   00000096   93001103           STS     4355, R16
   1009                  U1_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   0000009A   ....               RCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_80:
   \   0000009C   93001100           STS     4352, R16
   1010                  U1_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   000000A0   93101101           STS     4353, R17
   1011                  U1_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   000000A4   E003               LDI     R16, 3
   \   000000A6   93001103           STS     4355, R16
   1012                  U1_FCR = 0x01;          // enable FIFO ..
   \   000000AA   E001               LDI     R16, 1
   \   000000AC   93001102           STS     4354, R16
   1013                  U1_FCR = 0xC1;          // and set RXLevel to 14
   \   000000B0   EC01               LDI     R16, 193
   \   000000B2   93001102           STS     4354, R16
   1014                  U1_IER = 0x03;          // enable TX and RX int.
   \   000000B6   E003               LDI     R16, 3
   \   000000B8   93001101           STS     4353, R16
   1015                  U1_MCR = 0x00;          // RTS off
   \   000000BC   E000               LDI     R16, 0
   \   000000BE   93001104           STS     4356, R16
   1016                  break;
   1017              default:
   1018                  break;
   1019              }
   1020          }
   \                     ??Init16552_2:
   \   000000C2   9189               LD      R24, Y+
   \   000000C4   9199               LD      R25, Y+
   \   000000C6   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine58:
   \   00000000   E710               LDI     R17, 112
   \   00000002   E020               LDI     R18, 0
   \   00000004   E030               LDI     R19, 0
   \   00000006   01AC               MOVW    R21:R20, R25:R24
   \   00000008   ........           JMP     ?UL_DIVMOD_L03

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart16552>_0`:
   \   00000000   00                 DB      0
   \   00000001   01                 DB      1
   \   00000002   ....               DW      (??CheckActionUart16552_1) /2
   \   00000004   ....               DW      (??CheckActionUart16552_13) /2
   \   00000006   01                 DB      0x1
   \   00000007   ....               DW      (??CheckActionUart16552_13) /2
   \   00000009   1D                 DB      0x1d
   \   0000000A   ....               DW      (??CheckActionUart16552_0) /2
   \   0000000C   01                 DB      0x1
   \   0000000D   ....               DW      (??CheckActionUart16552_0) /2
   \   0000000F   01                 DB      0x1
   \   00000010   ....               DW      (??CheckActionUart16552_0) /2
   \   00000012   01                 DB      0x1
   \   00000013   ....               DW      (??CheckActionUart16552_3) /2
   \   00000015   01                 DB      0x1
   \   00000016   ....               DW      (??CheckActionUart16552_3) /2
   \   00000018   01                 DB      0x1
   \   00000019   ....               DW      (??CheckActionUart16552_3) /2
   \   0000001B   01                 DB      0x1
   \   0000001C   ....               DW      (??CheckActionUart16552_4) /2
   \   0000001E   01                 DB      0x1
   \   0000001F   ....               DW      (??CheckActionUart16552_6) /2
   \   00000021   07                 DB      0x7
   \   00000022   ....               DW      (??CheckActionUart16552_7) /2
   \   00000024   03                 DB      0x3
   \   00000025   ....               DW      (??CheckActionUart16552_5) /2
   \   00000027   02                 DB      0x2
   \   00000028   ....               DW      (??CheckActionUart16552_2) /2
   \   0000002A   4D                 DB      0x4d
   \   0000002B   ....               DW      (??CheckActionUart16552_8) /2
   \   0000002D   01                 DB      0x1
   \   0000002E   ....               DW      (??CheckActionUart16552_10) /2
   \   00000030   01                 DB      0x1
   \   00000031   ....               DW      (??CheckActionUart16552_9) /2
   \   00000033   34                 DB      0x34
   \   00000034   ....               DW      (??CheckActionUart16552_11) /2
   \   00000036   01                 DB      0x1
   \   00000037   ....               DW      (??CheckActionUart16552_12) /2
   \   00000039   FB                 DB      251

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   CalcDSRxChecksum16552
        4      8 ?S_EC_MUL_L02
      6      2   CalcDSTxChecksumUART16552
        6      2 ?S_EC_MUL_L02
      4      2   CheckActionUart16552
        4      2   -> ReceiveCData
        4      2   -> ReceiveCardEEPROMData
        4      2   -> ReceiveCardStatus
        4      2   -> ReceiveConfigData
        4      2   -> ReceivePTOData
        4      2   -> ReceiveRData
        4      2   -> ReceiveRadarData
        4      2   -> ReceiveRadarInfo
        4      2   -> ReceiveWHData
        4      2   -> ReceiveWISData
        4      2   -> ReceiveWISStatus
        4      2   -> ReceiveWISXData
        4      2 ?CV_SWITCH_L06
        4      4 ?S_EC_MUL_L02
      0      2   EmptyRxBuf16552
      8      2   ExtRS485Ctl
        8      2   -> EmptyRxBuf16552
        8      2   -> Init16552
        8      2   -> OS_Delay
        8      2   -> OS_WaitEventTimed
        8      2   -> ReadEEPROMByte
        8      2   -> Uart_BuildReqC16552
        8      2   -> Uart_BuildReqCardStatus
        8      2   -> Uart_BuildReqConfig
        8      2   -> Uart_BuildReqEEPROMData
        8      2   -> Uart_BuildReqM16552
        8      2   -> Uart_BuildReqR16552
        8      2   -> Uart_BuildReqRadarData
        8      2   -> Uart_BuildReqRadarInfo
        8      2   -> Uart_BuildReqWISCardStatus
        8      2   -> Uart_BuildReqWISData
        8      2   -> Uart_BuildReqWISXData
        8      2   -> Uart_BuildSndData
        8      2   -> Uart_BuildTail16552
        8      4 ?SS_SHR_L02
        8      2 ?S_SHL_L02
      4      2   ExtRS485Rec
        4      2   -> OS_Delay
        4      2   -> OS_SignalEvent
        4      2   -> OS_WaitEventTimed
        4      4   -> Usart16552CheckPackage
        4      4 ?SS_SHR_L02
        4      4 ?S_SHL_L02
      0      2   GoToSyncUART16552
        0      4 ?S_EC_MUL_L02
      2      2   Init16552
        2      2 ?S_EC_MUL_L02
        2      2 ?UL_DIVMOD_L03
      7      2   ReceiveCData
        7      6 ?S_EC_MUL_L02
      4      2   ReceiveCardEEPROMData
        4      2 ?S_EC_MUL_L02
      0      2   ReceiveCardStatus
        0      6 ?S_EC_MUL_L02
      5      2   ReceiveConfigData
        5      4 ?S_EC_MUL_L02
        5      6 ?S_EC_MUL_L02
     12      2   ReceivePTOData
       12      2   -> OS_Unuse
       12      2   -> OS_Use
       12      2 ?S_EC_MUL_L02
       12      6 ?S_EC_MUL_L02
       12      8 ?S_EC_MUL_L02
      4      2   ReceivePacketUart16552
        4      2   -> CalcDSRxChecksum16552
        4      2   -> GoToSyncUART16552
        4      2   -> OS_SignalEvent
        4      6 ?S_EC_MUL_L02
      7      2   ReceiveRData
        7      6 ?S_EC_MUL_L02
      8      2   ReceiveRadarData
        8      6 ?S_EC_MUL_L02
      0      2   ReceiveRadarInfo
        0      4 ?S_EC_MUL_L02
      4      2   ReceiveWHData
        4      2   -> OS_Unuse
        4      2   -> OS_Use
        4      4 ?S_EC_MUL_L02
        4      2 ?S_SHL_L02
      8      2   ReceiveWISData
        8      2 ?F_DIV_L04
        8      2 ?SL2F_L04
        8      6 ?S_EC_MUL_L02
        8      2 ?UL2F_L04
      1      2   ReceiveWISStatus
        1      6 ?S_EC_MUL_L02
      4      2   ReceiveWISXData
        4      2 ?S_EC_MUL_L02
        4      4 ?S_EC_MUL_L02
      0      2   SetRS4Port
      0      2   TimoutUART0
      0      2   TimoutUART1
      0      2   Uart_BuildHeader16552
        0      6 ?S_EC_MUL_L02
      0      2   Uart_BuildReqC16552
        0      6 ?S_EC_MUL_L02
      0      2   Uart_BuildReqCardStatus
        0      6 ?S_EC_MUL_L02
      0      2   Uart_BuildReqConfig
        0      6 ?S_EC_MUL_L02
      0      2   Uart_BuildReqEEPROMData
        0      6 ?S_EC_MUL_L02
      0      2   Uart_BuildReqM16552
        0      6 ?S_EC_MUL_L02
      0      2   Uart_BuildReqR16552
        0      6 ?S_EC_MUL_L02
      0      2   Uart_BuildReqRadarData
        0      6 ?S_EC_MUL_L02
      0      2   Uart_BuildReqRadarInfo
        0      6 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISCardStatus
        0      6 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISData
        0      6 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISXData
        0      6 ?S_EC_MUL_L02
      4      2   Uart_BuildSndData
        4      2 ?S_EC_MUL_L02
      4      2   Uart_BuildTail16552
        4      2   -> CalcDSTxChecksumUART16552
        4      2   -> GoToSyncUART16552
        4      4   -> OS_Delay
        4      2   -> OS_RetriggerTimer
        4      2   -> Uart_BuildHeader16552
        4      2 ?S_EC_MUL_L02
      7      2   Usart16552CheckPackage
        7      2   -> CheckActionUart16552
        7      2   -> GoToSyncUART16552
        7      2 ?S_EC_MUL_L02


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      58  ?<Jumptable for CheckActionUart16552>_0
      12  ??Subroutine136_0
       6  ??Subroutine137_0
       2  ??Subroutine138_0
       2  ??Subroutine139_0
       6  ??Subroutine140_0
       4  ??Subroutine141_0
       8  ??Subroutine142_0
       8  ??Subroutine143_0
       6  ??Subroutine144_0
       2  ??Subroutine145_0
       6  ??Subroutine146_0
      16  ?Subroutine0
       6  ?Subroutine1
      24  ?Subroutine10
      12  ?Subroutine101
       4  ?Subroutine102
      10  ?Subroutine103
      10  ?Subroutine104
       6  ?Subroutine105
       4  ?Subroutine106
      10  ?Subroutine107
       6  ?Subroutine108
       8  ?Subroutine109
      12  ?Subroutine11
       4  ?Subroutine111
       2  ?Subroutine112
       6  ?Subroutine113
       2  ?Subroutine115
       2  ?Subroutine116
       6  ?Subroutine117
       6  ?Subroutine118
      12  ?Subroutine119
       6  ?Subroutine12
       6  ?Subroutine120
       6  ?Subroutine121
       6  ?Subroutine122
       6  ?Subroutine123
       6  ?Subroutine124
       4  ?Subroutine125
       4  ?Subroutine126
       4  ?Subroutine127
       4  ?Subroutine128
       4  ?Subroutine129
       4  ?Subroutine130
       6  ?Subroutine131
       4  ?Subroutine132
       2  ?Subroutine133
       6  ?Subroutine134
       6  ?Subroutine135
       8  ?Subroutine14
      10  ?Subroutine16
       6  ?Subroutine18
       6  ?Subroutine19
       4  ?Subroutine2
       2  ?Subroutine20
      12  ?Subroutine21
      18  ?Subroutine22
      16  ?Subroutine23
      18  ?Subroutine24
      20  ?Subroutine25
       4  ?Subroutine26
      12  ?Subroutine27
       8  ?Subroutine28
       8  ?Subroutine29
      20  ?Subroutine3
       4  ?Subroutine32
       6  ?Subroutine33
       8  ?Subroutine34
      10  ?Subroutine35
      10  ?Subroutine36
       6  ?Subroutine38
       6  ?Subroutine39
      14  ?Subroutine4
      10  ?Subroutine40
       2  ?Subroutine43
       6  ?Subroutine44
      10  ?Subroutine46
       4  ?Subroutine47
       6  ?Subroutine48
       4  ?Subroutine49
      14  ?Subroutine5
       8  ?Subroutine50
       6  ?Subroutine51
      22  ?Subroutine52
       2  ?Subroutine53
       2  ?Subroutine54
       2  ?Subroutine55
       4  ?Subroutine56
       2  ?Subroutine57
      12  ?Subroutine58
       6  ?Subroutine6
       2  ?Subroutine60
       4  ?Subroutine61
       4  ?Subroutine62
       4  ?Subroutine63
      10  ?Subroutine64
       6  ?Subroutine65
      16  ?Subroutine67
       4  ?Subroutine68
       8  ?Subroutine69
       2  ?Subroutine7
      10  ?Subroutine71
       6  ?Subroutine73
       6  ?Subroutine74
      10  ?Subroutine75
       6  ?Subroutine76
       4  ?Subroutine77
      10  ?Subroutine78
      12  ?Subroutine8
       8  ?Subroutine80
       8  ?Subroutine81
       8  ?Subroutine82
       8  ?Subroutine83
       4  ?Subroutine84
       2  ?Subroutine85
       6  ?Subroutine88
       8  ?Subroutine89
      24  ?Subroutine9
       2  ?Subroutine92
       8  ?Subroutine93
       4  ?Subroutine94
      14  ?Subroutine95
       6  ?Subroutine96
       8  ?Subroutine97
       6  ?Subroutine98
       8  ?Subroutine99
      76  CalcDSRxChecksum16552
      58  CalcDSTxChecksumUART16552
     108  CheckActionUart16552
      38  EmptyRxBuf16552
     758  ExtRS485Ctl
     216  ExtRS485Rec
      20  GoToSyncUART16552
     200  Init16552
      32  ReceiveCData
      86  ReceiveCardEEPROMData
      30  ReceiveCardStatus
      70  ReceiveConfigData
     146  ReceivePTOData
     218  ReceivePacketUart16552
      32  ReceiveRData
      70  ReceiveRadarData
      28  ReceiveRadarInfo
     132  ReceiveWHData
      94  ReceiveWISData
      78  ReceiveWISStatus
      84  ReceiveWISXData
       8  SetRS4Port
       4  TimoutUART0
       2  TimoutUART1
      38  Uart_BuildHeader16552
       6  Uart_BuildReqC16552
       4  Uart_BuildReqCardStatus
       6  Uart_BuildReqConfig
      32  Uart_BuildReqEEPROMData
       6  Uart_BuildReqM16552
       6  Uart_BuildReqR16552
       6  Uart_BuildReqRadarData
       6  Uart_BuildReqRadarInfo
       6  Uart_BuildReqWISCardStatus
       6  Uart_BuildReqWISData
      18  Uart_BuildReqWISXData
      98  Uart_BuildSndData
     156  Uart_BuildTail16552
      86  Usart16552CheckPackage
       1  _A_PORTC
       1  _A_PORTE

 
     2 bytes in segment ABSOLUTE
 3 996 bytes in segment CODE
    58 bytes in segment SWITCH
 
 4 054 bytes of CODE memory
     0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: 3
