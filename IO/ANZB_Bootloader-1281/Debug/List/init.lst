###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       13/Feb/2024  15:22:08
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\Src\init.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW9DB8.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\Src\init.c"
#        --cpu=m1281 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\Debug\Obj" -D
#        SPEED=38400 -D __AVR_ATmega1281__ -D ANZBANA_V8=1 -lCN
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\Debug\List" -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\Debug\List\init.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\Debug\Obj\init.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #ifdef __ATMEGA_1280__
      6          #include	"iom1280.h"
      7          #endif
      8          
      9          #ifdef __AVR_ATmega1281__
     10          #include	"iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xc4
   \   union <unnamed> volatile __io _A_UBRR0
   \                     _A_UBRR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xc2
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb3
   \   union <unnamed> volatile __io _A_OCR2A
   \                     _A_OCR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb1
   \   union <unnamed> volatile __io _A_TCCR2B
   \                     _A_TCCR2B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb0
   \   union <unnamed> volatile __io _A_TCCR2A
   \                     _A_TCCR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x75
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x74
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x69
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x33
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2d
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x25
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x24
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x21
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x20
   \   union <unnamed> volatile __io _A_PINA
   \                     _A_PINA:
   \   00000000                      DS8 1
     11          #endif
     12          #include "stdio.h"
     13          #include "math.h"
     14          #include "constants.h"
     15          #include "externals.h"
     16          #include "inavr.h"
     17          #include "string.h"
     18          
     19          /*
     20          **===========================================================================
     21          ** Init the system according to board type
     22          **===========================================================================
     23          */

   \                                 In  segment CODE, align 2, keep-with-next
     24          void InitSystem(void) {
   \                     InitSystem:
     25          
     26          
     27              Init_CPU();                         // init all processes
   \   00000000   ....               RCALL   Init_CPU
     28              Init_IO();
   \   00000002   ....               RCALL   Init_IO
     29              Init_TMR();
   \   00000004   ....               RCALL   Init_TMR
     30              Init_USART( SPEED) ;              // Init uarts
   \   00000006   E000               LDI     R16, 0
   \   00000008   E916               LDI     R17, 150
   \   0000000A   E020               LDI     R18, 0
   \   0000000C   E030               LDI     R19, 0
   \   0000000E   ....               RCALL   Init_USART
     31          }
   \   00000010   9508               RET
     32          
     33          /*
     34          **===========================================================================
     35          ** Init the CPU related registers
     36          **===========================================================================
     37          */

   \                                 In  segment CODE, align 2, keep-with-next
     38          void Init_CPU(void) {
   \                     Init_CPU:
     39              __disable_interrupt();
   \   00000000   94F8               CLI
     40          
     41              EIMSK = 0x00;        // External interrupt mask register
   \   00000002   E000               LDI     R16, 0
   \   00000004   BB0D               OUT     0x1D, R16
     42              EICRA = 0x00;       // External interrupt control register Int 0/1 on low level
   \   00000006   E000               LDI     R16, 0
   \   00000008   9300....           STS     _A_EICRA, R16
     43              EICRB = 0x00;        // External interrupt control register Int 0/1 enabled
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   9300....           STS     _A_EICRB, R16
     44              EIMSK = 0x00;        // External interrupt mask register
   \   00000012   E000               LDI     R16, 0
   \   00000014   BB0D               OUT     0x1D, R16
     45              MCUCR = 0x00;        // MCU control register  External Ram + wait state
   \   00000016   E000               LDI     R16, 0
   \   00000018   BF05               OUT     0x35, R16
     46              XMCRA = 0x00;       // maximum wait states
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   9300....           STS     _A_XMCRA, R16
     47              XMCRB = 0x00;       // Full 16 bit bus + bus keeper
   \   00000020   E000               LDI     R16, 0
   \   00000022   9300....           STS     _A_XMCRB, R16
     48              SREG  = 0x00;        // glabal interrupt
   \   00000026   E000               LDI     R16, 0
   \   00000028   BF0F               OUT     0x3F, R16
     49          
     50              ResetStatus = MCUCR;       // Remember reset source
   \   0000002A   B705               IN      R16, 0x35
   \   0000002C   9300....           STS     ResetStatus, R16
     51              MCUCR = 0x00;              // and reset
   \   00000030   E000               LDI     R16, 0
   \   00000032   BF05               OUT     0x35, R16
     52              /*--- Initialize buffer ---*/
     53              // enable bootloader interrupt HKim code
     54              char temp = MCUCR;
   \   00000034   B715               IN      R17, 0x35
     55              MCUCR = temp | (1 << IVCE);       // enable change of interrupt vectors
   \   00000036   2F01               MOV     R16, R17
   \   00000038   6001               ORI     R16, 0x01
   \   0000003A   BF05               OUT     0x35, R16
     56              MCUCR = temp | (1 << IVSEL);      // move inerrupt vectors to boot flash section
   \   0000003C   2F01               MOV     R16, R17
   \   0000003E   6002               ORI     R16, 0x02
   \   00000040   BF05               OUT     0x35, R16
     57          
     58          }
   \   00000042   9508               RET
   \   00000044                      REQUIRE _A_EIMSK
   \   00000044                      REQUIRE _A_EICRA
   \   00000044                      REQUIRE _A_EICRB
   \   00000044                      REQUIRE _A_MCUCR
   \   00000044                      REQUIRE _A_XMCRA
   \   00000044                      REQUIRE _A_XMCRB
   \   00000044                      REQUIRE _A_SREG
     59          
     60          /*
     61          **===========================================================================
     62          ** Init the watchdog registers
     63          **===========================================================================
     64          */

   \                                 In  segment CODE, align 2, keep-with-next
     65          __monitor void Init_Watchdog(void) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
     66          
     67              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
     68              WDTCSR = 0x0f;
   \   00000006   E00F               LDI     R16, 15
   \   00000008   9300....           STS     _A_WDTCSR, R16
     69              asm("WDR");                             // kick the dog!!
   \   0000000C   95A8               WDR
     70          
     71          }
   \   0000000E   BF1F               OUT     0x3F, R17
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_WDTCSR
     72          
     73          /*
     74          **===========================================================================
     75          ** Init the IO related registers
     76          **===========================================================================
     77          */

   \                                 In  segment CODE, align 2, keep-with-next
     78          void Init_IO(void) {
   \                     Init_IO:
     79          #if ANZBANA_V8 == 1
     80              DDRA    =  0x00 ;      // Port A data direction, bit 0, 4-7 out
   \   00000000   E000               LDI     R16, 0
   \   00000002   B901               OUT     0x01, R16
     81              PORTA   =  0x3;
   \   00000004   E003               LDI     R16, 3
   \   00000006   B902               OUT     0x02, R16
     82              UnitID  = PINA & 0x03;       //get the unit ID
   \   00000008   B100               IN      R16, 0x00
   \   0000000A   7003               ANDI    R16, 0x03
   \   0000000C   9300....           STS     UnitID, R16
     83          #else
     84              DDRB    =  0x00 ;      // Port B data direction, bit 0, 4-7 out
     85          //    PORTB   =  0xc;
     86              UnitID  = (PINB >> 2)& 0x03;       //get the unit ID
     87          #endif
     88              DDRA   =  0x00;      // Port A data
   \   00000010   E000               LDI     R16, 0
   \   00000012   B901               OUT     0x01, R16
     89              PORTA  =  0x00;      // Port A data
   \   00000014   E000               LDI     R16, 0
   \   00000016   B902               OUT     0x02, R16
     90              DDRB   =  0x00;      // Port B data
   \   00000018   E000               LDI     R16, 0
   \   0000001A   B904               OUT     0x04, R16
     91              PORTB  =  0xC0;      // Port B data
   \   0000001C   EC00               LDI     R16, 192
   \   0000001E   B905               OUT     0x05, R16
     92              DDRC   =  0x00;      // Port C data
   \   00000020   E000               LDI     R16, 0
   \   00000022   B907               OUT     0x07, R16
     93              PORTC  =  0x00;      // Port C data
   \   00000024   E000               LDI     R16, 0
   \   00000026   B908               OUT     0x08, R16
     94              DDRD   =  0x00;      // Port D data
   \   00000028   E000               LDI     R16, 0
   \   0000002A   B90A               OUT     0x0A, R16
     95              PORTD  =  0xf0;      // Port D data  //pullup addr
   \   0000002C   EF00               LDI     R16, 240
   \   0000002E   B90B               OUT     0x0B, R16
     96              DDRE   =  0x0E;      // Port E data bit 7-4 Address in, Bit 3 -1 out, bit 0 rxd in
   \   00000030   E00E               LDI     R16, 14
   \   00000032   B90D               OUT     0x0D, R16
     97              PORTE  =  0x00;      // Port E data
   \   00000034   E000               LDI     R16, 0
   \   00000036   B90E               OUT     0x0E, R16
     98              DDRF   =  0x00;      // Port F data
   \   00000038   E000               LDI     R16, 0
   \   0000003A   BB00               OUT     0x10, R16
     99              PORTF  =  0x00;      // Port F data
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   BB01               OUT     0x11, R16
    100              DDRG   =  0x00;      // Port G data
   \   00000040   E000               LDI     R16, 0
   \   00000042   BB03               OUT     0x13, R16
    101              PORTG  =  0x00;      // Port G data
   \   00000044   E000               LDI     R16, 0
   \   00000046   BB04               OUT     0x14, R16
    102          }
   \   00000048   9508               RET
   \   0000004A                      REQUIRE _A_DDRA
   \   0000004A                      REQUIRE _A_PORTA
   \   0000004A                      REQUIRE _A_PINA
   \   0000004A                      REQUIRE _A_DDRB
   \   0000004A                      REQUIRE _A_PORTB
   \   0000004A                      REQUIRE _A_DDRC
   \   0000004A                      REQUIRE _A_PORTC
   \   0000004A                      REQUIRE _A_DDRD
   \   0000004A                      REQUIRE _A_PORTD
   \   0000004A                      REQUIRE _A_DDRE
   \   0000004A                      REQUIRE _A_PORTE
   \   0000004A                      REQUIRE _A_DDRF
   \   0000004A                      REQUIRE _A_PORTF
   \   0000004A                      REQUIRE _A_DDRG
   \   0000004A                      REQUIRE _A_PORTG
    103          
    104          /*
    105          **===========================================================================
    106          ** Init the timer related registers
    107          **===========================================================================
    108          */

   \                                 In  segment CODE, align 2, keep-with-next
    109          void Init_TMR(void) {
   \                     Init_TMR:
    110              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   5000               SUBI    R16, 0
   \   00000006   F019               BREQ    ??Init_TMR_0
   \   00000008   950A               DEC     R16
   \   0000000A   F059               BREQ    ??Init_TMR_1
   \   0000000C   9508               RET
    111              case AN_ZB485:                  // AN-ZB485
    112                  // 128 -> 1281
    113                  // TIM0 and TIM2 are swapped in 1281.
    114                  // Registers are completely changed.
    115                  // TCCR0   =  0x99 ;      // Timer control register 0
    116                  // OCR0    =  3;         // Timer output compare register 0, 2MHZ //16MHz xtal
    117                  //
    118                  // TCCR2A : 0 1 0 0 - - 1 0
    119                  // TCCR2B : 1 0 - - 0 0 0 1
    120                  //
    121                  // COM2A1 COM2A0 : 0 1
    122                  // COM2B1 COM2B0 : 0 0
    123                  // WGM21 WGM20   : 1 0
    124                  // FOC2A : 1, FOR2B : 0, WGM22 : 0, CS2/1/0 : 0 0 1
    125                  //
    126                  // COM2A : Toggle
    127                  // WGM : CTC
    128                  // Clock Scale: 1
    129          
    130                  TCCR2A = 0x42;
   \                     ??Init_TMR_0:
   \   0000000E   E402               LDI     R16, 66
   \   00000010   9300....           STS     _A_TCCR2A, R16
    131                  TCCR2B = 0x81;
   \   00000014   E801               LDI     R16, 129
   \   00000016   9300....           STS     _A_TCCR2B, R16
    132                  OCR2A = 3;
   \   0000001A   E003               LDI     R16, 3
   \   0000001C   9300....           STS     _A_OCR2A, R16
    133                  break;
   \   00000020   9508               RET
    134              case AN_ZBANA:                  // AN-ZBANA
    135                  // 128 -> 1281
    136                  // TCCR0   =  0x99 ;      // Timer control register 0
    137                  // OCR0    =  7 ;         // Timer output compare register 0, 1MHZ //16MHz xtal
    138                  TCCR2A = 0x42;
   \                     ??Init_TMR_1:
   \   00000022   E402               LDI     R16, 66
   \   00000024   9300....           STS     _A_TCCR2A, R16
    139                  TCCR2B = 0x81;
   \   00000028   E801               LDI     R16, 129
   \   0000002A   9300....           STS     _A_TCCR2B, R16
    140                  OCR2A = 7;
   \   0000002E   E007               LDI     R16, 7
   \   00000030   9300....           STS     _A_OCR2A, R16
    141                  break;
    142              default:
    143                  break;
    144              }
    145          
    146          
    147          }
   \   00000034   9508               RET
   \   00000036                      REQUIRE _A_TCCR2A
   \   00000036                      REQUIRE _A_TCCR2B
   \   00000036                      REQUIRE _A_OCR2A
    148          
    149          /*
    150          **===========================================================================
    151          ** Init the USARTs registers
    152          **===========================================================================
    153          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    154          void Init_USART( unsigned long baud ) {
   \                     Init_USART:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    155          
    156              /*--- Configure UART data block ---*/
    157              myUART.TxFirst   = 0x00;
   \   00000008   ....               LDI     R30, LOW(myUART)
   \   0000000A   ....               LDI     R31, (myUART) >> 8
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   8300               ST      Z, R16
   \   00000010   E000               LDI     R16, 0
   \   00000012   8301               STD     Z+1, R16
    158              myUART.TxLast    = 0x00;
   \   00000014   ....               LDI     R30, LOW(myUART)
   \   00000016   ....               LDI     R31, (myUART) >> 8
   \   00000018   E000               LDI     R16, 0
   \   0000001A   8302               STD     Z+2, R16
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   8303               STD     Z+3, R16
    159              myUART.TxCount   = 0x00;
   \   00000020   ....               LDI     R30, LOW(myUART)
   \   00000022   ....               LDI     R31, (myUART) >> 8
   \   00000024   E000               LDI     R16, 0
   \   00000026   8304               STD     Z+4, R16
   \   00000028   E000               LDI     R16, 0
   \   0000002A   8305               STD     Z+5, R16
    160              myUART.RxFirst   = 0x00;
   \   0000002C   ....               LDI     R30, LOW(myUART)
   \   0000002E   ....               LDI     R31, (myUART) >> 8
   \   00000030   E000               LDI     R16, 0
   \   00000032   8702               STD     Z+10, R16
   \   00000034   E000               LDI     R16, 0
   \   00000036   8703               STD     Z+11, R16
    161              myUART.RxLast    = 0x00;
   \   00000038   ....               LDI     R30, LOW(myUART)
   \   0000003A   ....               LDI     R31, (myUART) >> 8
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   8704               STD     Z+12, R16
   \   00000040   E000               LDI     R16, 0
   \   00000042   8705               STD     Z+13, R16
    162              myUART.RxCount   = 0x00;
   \   00000044   ....               LDI     R30, LOW(myUART)
   \   00000046   ....               LDI     R31, (myUART) >> 8
   \   00000048   E000               LDI     R16, 0
   \   0000004A   8706               STD     Z+14, R16
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   8707               STD     Z+15, R16
    163              myUART.RxState   = SYNC;
   \   00000050   E000               LDI     R16, 0
   \   00000052   9300....           STS     (myUART + 16), R16
    164              myUART.SyncCnt   = 0 ;
   \   00000056   E000               LDI     R16, 0
   \   00000058   9300....           STS     (myUART + 17), R16
    165              myUART.TxStatus  = 0x00;
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   9300....           STS     (myUART + 8), R16
    166          
    167              myUART.RxTimeout = RX_TO_TIME ;   // reset timeout
   \   00000062   ....               LDI     R30, LOW(myUART)
   \   00000064   ....               LDI     R31, (myUART) >> 8
   \   00000066   EF0A               LDI     R16, 250
   \   00000068   E010               LDI     R17, 0
   \   0000006A   8B02               STD     Z+18, R16
   \   0000006C   8B13               STD     Z+19, R17
    168              UCSR0A  = 0x00; 
   \   0000006E   E000               LDI     R16, 0
   \   00000070   9300....           STS     _A_UCSR0A, R16
    169              UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   00000074   E400               LDI     R16, 64
   \   00000076   E412               LDI     R17, 66
   \   00000078   E02F               LDI     R18, 15
   \   0000007A   E030               LDI     R19, 0
   \   0000007C   01AC               MOVW    R21:R20, R25:R24
   \   0000007E   01BD               MOVW    R23:R22, R27:R26
   \   00000080   ........           CALL    ?UL_DIVMOD_L03
   \   00000084   950A               DEC     R16
   \   00000086   9300....           STS     _A_UBRR0, R16
    170              UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   0000008A   E400               LDI     R16, 64
   \   0000008C   E412               LDI     R17, 66
   \   0000008E   E02F               LDI     R18, 15
   \   00000090   E030               LDI     R19, 0
   \   00000092   01AC               MOVW    R21:R20, R25:R24
   \   00000094   01BD               MOVW    R23:R22, R27:R26
   \   00000096   ........           CALL    ?UL_DIVMOD_L03
   \   0000009A   5001               SUBI    R16, 1
   \   0000009C   4010               SBCI    R17, 0
   \   0000009E   2F01               MOV     R16, R17
   \   000000A0   E010               LDI     R17, 0
   \   000000A2   930000C5           STS     197, R16
    171              UCSR0B  = (1<<RXEN0) | (1<<TXEN0);        // Enable recieve and transmit
   \   000000A6   E108               LDI     R16, 24
   \   000000A8   9300....           STS     _A_UCSR0B, R16
    172              UCSR0C  = 0x06;       /* n,8,1 */
   \   000000AC   E006               LDI     R16, 6
   \   000000AE   9300....           STS     _A_UCSR0C, R16
    173          }
   \   000000B2   E0E4               LDI     R30, 4
   \   000000B4   ........           JMP     ?EPILOGUE_B4_L09
   \   000000B8                      REQUIRE _A_UCSR0A
   \   000000B8                      REQUIRE _A_UBRR0
   \   000000B8                      REQUIRE _A_UCSR0B
   \   000000B8                      REQUIRE _A_UCSR0C
    174          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   InitSystem
        0      2   -> Init_CPU
        0      2   -> Init_IO
        0      2   -> Init_TMR
        0      2   -> Init_USART
      0      2   Init_CPU
      0      2   Init_IO
      0      2   Init_TMR
      4      2   Init_USART
        4      2 ?UL_DIVMOD_L03
      0      2   Init_Watchdog


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  InitSystem
      68  Init_CPU
      74  Init_IO
      54  Init_TMR
     184  Init_USART
      18  Init_Watchdog
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_MCUCR
       1  _A_OCR2A
       1  _A_PINA
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_SREG
       1  _A_TCCR2A
       1  _A_TCCR2B
       2  _A_UBRR0
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_WDTCSR
       1  _A_XMCRA
       1  _A_XMCRB

 
  31 bytes in segment ABSOLUTE
 416 bytes in segment CODE
 
 416 bytes of CODE memory
   0 bytes of DATA memory (+ 31 bytes shared)

Errors: none
Warnings: none
