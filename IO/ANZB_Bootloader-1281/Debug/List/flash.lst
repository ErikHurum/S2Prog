###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       30/Jan/2023  09:43:17
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\ANZB_Bootloader\Src\flash.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW5030.tmp
#        (D:\S2Prog\IO\ANZB_Bootloader\Src\flash.c --cpu=m1280 -ms -o
#        D:\S2Prog\IO\ANZB_Bootloader\Debug\Obj -D SPEED=38400 -D PORT0 -D
#        __ATMEGA_1280__ -lCN D:\S2Prog\IO\ANZB_Bootloader\Debug\List -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB_Bootloader\INC\\ -I
#        D:\S2Prog\IO\ANZB_Bootloader\..\..\SHARED\INC\\ --eeprom_size 4096
#        --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB_Bootloader\Debug\List\flash.lst
#    Object file  =  D:\S2Prog\IO\ANZB_Bootloader\Debug\Obj\flash.r90
#
###############################################################################

D:\S2Prog\IO\ANZB_Bootloader\Src\flash.c
      1          #ifdef __ATMEGA_1280__
      2          #include <iom1280.h>

   \                                 In  segment ABSOLUTE, at 0x5b
   \   union <unnamed> volatile __io _A_RAMPZ
   \                     _A_RAMPZ:
   \   00000000                      DS8 1
      3          #endif
      4          
      5          #ifdef __ATMEGA_1281__
      6          #include <iom1281.h>
      7          #endif
      8          
      9          #include <inavr.h>
     10          #include "defines.h"
     11          #include "flash.h"
     12          #include "flash_asm.h"
     13          

   \                                 In  segment CODE, align 2, keep-with-next
     14          void
     15          flash_erase(unsigned long addr)
   \                     flash_erase:
     16          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
     17            unsigned short a;
     18            
     19            __disable_interrupt();
   \   00000008   94F8               CLI
     20            
     21            RAMPZ = (addr >> 16) & 0xff;
   \   0000000A   018C               MOVW    R17:R16, R25:R24
   \   0000000C   019D               MOVW    R19:R18, R27:R26
   \   0000000E   2F02               MOV     R16, R18
   \   00000010   2F13               MOV     R17, R19
   \   00000012   E020               LDI     R18, 0
   \   00000014   E030               LDI     R19, 0
   \   00000016   BF0B               OUT     0x3B, R16
     22            a = (addr & 0xffff);
   \   00000018   018C               MOVW    R17:R16, R25:R24
   \   0000001A   0128               MOVW    R5:R4, R17:R16
     23          
     24            do_spm(a,(1<<PGERS) + (1<<SPMEN));
   \   0000001C   E023               LDI     R18, 3
   \   0000001E   0182               MOVW    R17:R16, R5:R4
   \   00000020   ........           CALL    do_spm
     25            do_spm(a, (1<<RWWSRE) + (1<<SPMEN));
   \   00000024   E121               LDI     R18, 17
   \   00000026   0182               MOVW    R17:R16, R5:R4
   \   00000028   ........           CALL    do_spm
     26          
     27            RAMPZ = 0x00;
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   BF0B               OUT     0x3B, R16
     28            __enable_interrupt();
   \   00000030   9478               SEI
     29          }
   \   00000032   E0E6               LDI     R30, 6
   \   00000034   ........           JMP     ?EPILOGUE_B6_L09
   \   00000038                      REQUIRE _A_RAMPZ

   \                                 In  segment CODE, align 2, keep-with-next
     30          char flash_program(unsigned long addr, char* buf, unsigned len)
   \                     flash_program:
     31          {
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   0168               MOVW    R13:R12, R17:R16
   \   00000006   0179               MOVW    R15:R14, R19:R18
   \   00000008   013A               MOVW    R7:R6, R21:R20
   \   0000000A   015B               MOVW    R11:R10, R23:R22
     32            unsigned short a,
     33                           i,
     34                           tmp;
     35            __disable_interrupt();
   \   0000000C   94F8               CLI
     36            
     37            RAMPZ = (addr >> 16) & 0xff;
   \   0000000E   0186               MOVW    R17:R16, R13:R12
   \   00000010   0197               MOVW    R19:R18, R15:R14
   \   00000012   2F02               MOV     R16, R18
   \   00000014   2F13               MOV     R17, R19
   \   00000016   E020               LDI     R18, 0
   \   00000018   E030               LDI     R19, 0
   \   0000001A   BF0B               OUT     0x3B, R16
     38          
     39            a = (addr & 0xffff);
   \   0000001C   0186               MOVW    R17:R16, R13:R12
   \   0000001E   0128               MOVW    R5:R4, R17:R16
     40            for(i = 0; i < len; i+=2, a += 2)
   \   00000020   E080               LDI     R24, 0
   \   00000022   E090               LDI     R25, 0
   \                     ??flash_program_0:
   \   00000024   158A               CP      R24, R10
   \   00000026   059B               CPC     R25, R11
   \   00000028   F490               BRCC    ??flash_program_1
     41            {
     42              unsigned int data = buf[i] | buf[i + 1] << 8;
   \   0000002A   01F3               MOVW    R31:R30, R7:R6
   \   0000002C   0FE8               ADD     R30, R24
   \   0000002E   1FF9               ADC     R31, R25
   \   00000030   81A0               LD      R26, Z
   \   00000032   01F3               MOVW    R31:R30, R7:R6
   \   00000034   0FE8               ADD     R30, R24
   \   00000036   1FF9               ADC     R31, R25
   \   00000038   81B1               LDD     R27, Z+1
     43              
     44              fill_temp_buffer(data, a);
   \   0000003A   0192               MOVW    R19:R18, R5:R4
   \   0000003C   018D               MOVW    R17:R16, R27:R26
   \   0000003E   ........           CALL    fill_temp_buffer
     45            }
   \   00000042   9602               ADIW    R25:R24, 2
   \   00000044   E002               LDI     R16, 2
   \   00000046   0E40               ADD     R4, R16
   \   00000048   E000               LDI     R16, 0
   \   0000004A   1E50               ADC     R5, R16
   \   0000004C   CFEB               RJMP    ??flash_program_0
     46            
     47            a = (addr & 0xffff);
   \                     ??flash_program_1:
   \   0000004E   0186               MOVW    R17:R16, R13:R12
   \   00000050   0128               MOVW    R5:R4, R17:R16
     48            
     49            do_spm(a, (1<<PGWRT) + (1<<SPMEN));
   \   00000052   E025               LDI     R18, 5
   \   00000054   0182               MOVW    R17:R16, R5:R4
   \   00000056   ........           CALL    do_spm
     50            do_spm(a, (1<<RWWSRE) + (1<<SPMEN));
   \   0000005A   E121               LDI     R18, 17
   \   0000005C   0182               MOVW    R17:R16, R5:R4
   \   0000005E   ........           CALL    do_spm
     51          
     52            //
     53            // verify
     54            //
     55            for(i = 0; i < len; i+= 2, a += 2)
   \   00000062   E080               LDI     R24, 0
   \   00000064   E090               LDI     R25, 0
   \                     ??flash_program_2:
   \   00000066   158A               CP      R24, R10
   \   00000068   059B               CPC     R25, R11
   \   0000006A   F520               BRCC    ??flash_program_3
     56            {
     57              // low byte low address, high byte high address
     58              tmp = read_program_memory(a, 0x00);
   \   0000006C   E020               LDI     R18, 0
   \   0000006E   0182               MOVW    R17:R16, R5:R4
   \   00000070   ........           CALL    read_program_memory
   \   00000074   0148               MOVW    R9:R8, R17:R16
     59          
     60              if((buf[i] != (tmp & 0xff)) || (buf[i + 1] != ((tmp >> 8) & 0xff)))
   \   00000076   01F3               MOVW    R31:R30, R7:R6
   \   00000078   0FE8               ADD     R30, R24
   \   0000007A   1FF9               ADC     R31, R25
   \   0000007C   8120               LD      R18, Z
   \   0000007E   E030               LDI     R19, 0
   \   00000080   0184               MOVW    R17:R16, R9:R8
   \   00000082   7F0F               ANDI    R16, 0xFF
   \   00000084   7010               ANDI    R17, 0x00
   \   00000086   1720               CP      R18, R16
   \   00000088   0731               CPC     R19, R17
   \   0000008A   F459               BRNE    ??flash_program_4
   \   0000008C   01F3               MOVW    R31:R30, R7:R6
   \   0000008E   0FE8               ADD     R30, R24
   \   00000090   1FF9               ADC     R31, R25
   \   00000092   8101               LDD     R16, Z+1
   \   00000094   E010               LDI     R17, 0
   \   00000096   0194               MOVW    R19:R18, R9:R8
   \   00000098   2F23               MOV     R18, R19
   \   0000009A   E030               LDI     R19, 0
   \   0000009C   1702               CP      R16, R18
   \   0000009E   0713               CPC     R17, R19
   \   000000A0   F019               BREQ    ??flash_program_5
     61              {
     62                __enable_interrupt();
   \                     ??flash_program_4:
   \   000000A2   9478               SEI
     63                return 0;
   \   000000A4   E000               LDI     R16, 0
   \   000000A6   C008               RJMP    ??flash_program_6
     64              }
     65            }
   \                     ??flash_program_5:
   \   000000A8   9602               ADIW    R25:R24, 2
   \   000000AA   E002               LDI     R16, 2
   \   000000AC   0E40               ADD     R4, R16
   \   000000AE   E000               LDI     R16, 0
   \   000000B0   1E50               ADC     R5, R16
   \   000000B2   CFD9               RJMP    ??flash_program_2
     66            __enable_interrupt();
   \                     ??flash_program_3:
   \   000000B4   9478               SEI
     67            return 1;
   \   000000B6   E001               LDI     R16, 1
   \                     ??flash_program_6:
   \   000000B8   E1E0               LDI     R30, 16
   \   000000BA   ........           JMP     ?EPILOGUE_B16_L09
   \   000000BE                      REQUIRE _A_RAMPZ
     68          }
     69          

   \                                 In  segment CODE, align 2, keep-with-next
     70          void flash_read(unsigned long addr, char* buf, unsigned len)
   \                     flash_read:
     71          {
   \   00000000   ........           CALL    ?PROLOGUE14_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004   0148               MOVW    R9:R8, R17:R16
   \   00000006   0159               MOVW    R11:R10, R19:R18
   \   00000008   013A               MOVW    R7:R6, R21:R20
   \   0000000A   016B               MOVW    R13:R12, R23:R22
     72            unsigned short a,
     73                           i,
     74                           tmp;
     75          
     76            RAMPZ = (addr >> 16) & 0xff;
   \   0000000C   0184               MOVW    R17:R16, R9:R8
   \   0000000E   0195               MOVW    R19:R18, R11:R10
   \   00000010   2F02               MOV     R16, R18
   \   00000012   2F13               MOV     R17, R19
   \   00000014   E020               LDI     R18, 0
   \   00000016   E030               LDI     R19, 0
   \   00000018   BF0B               OUT     0x3B, R16
     77          
     78            a = (addr & 0xffff);
   \   0000001A   0184               MOVW    R17:R16, R9:R8
   \   0000001C   0128               MOVW    R5:R4, R17:R16
     79            for(i = 0; i < len; i += 2, a += 2)
   \   0000001E   E080               LDI     R24, 0
   \   00000020   E090               LDI     R25, 0
   \                     ??flash_read_0:
   \   00000022   158C               CP      R24, R12
   \   00000024   059D               CPC     R25, R13
   \   00000026   F4B8               BRCC    ??flash_read_1
     80            {
     81              // low byte low address, high byte high address
     82              tmp= read_program_memory(a, 0x00);
   \   00000028   E020               LDI     R18, 0
   \   0000002A   0182               MOVW    R17:R16, R5:R4
   \   0000002C   ........           CALL    read_program_memory
   \   00000030   01D8               MOVW    R27:R26, R17:R16
     83              buf[i + 0] = tmp & 0xff;
   \   00000032   2F0A               MOV     R16, R26
   \   00000034   01F3               MOVW    R31:R30, R7:R6
   \   00000036   0FE8               ADD     R30, R24
   \   00000038   1FF9               ADC     R31, R25
   \   0000003A   8300               ST      Z, R16
     84              buf[i + 1] = (tmp >> 8) & 0xff;
   \   0000003C   018D               MOVW    R17:R16, R27:R26
   \   0000003E   2F01               MOV     R16, R17
   \   00000040   E010               LDI     R17, 0
   \   00000042   01F3               MOVW    R31:R30, R7:R6
   \   00000044   0FE8               ADD     R30, R24
   \   00000046   1FF9               ADC     R31, R25
   \   00000048   8301               STD     Z+1, R16
     85            }
   \   0000004A   9602               ADIW    R25:R24, 2
   \   0000004C   E002               LDI     R16, 2
   \   0000004E   0E40               ADD     R4, R16
   \   00000050   E000               LDI     R16, 0
   \   00000052   1E50               ADC     R5, R16
   \   00000054   CFE6               RJMP    ??flash_read_0
     86            
     87            RAMPZ = 0;
   \                     ??flash_read_1:
   \   00000056   E000               LDI     R16, 0
   \   00000058   BF0B               OUT     0x3B, R16
     88          }
   \   0000005A   E0EE               LDI     R30, 14
   \   0000005C   ........           JMP     ?EPILOGUE_B14_L09
   \   00000060                      REQUIRE _A_RAMPZ

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      6      2   flash_erase
        6      2   -> do_spm
     16      2   flash_program
       16      2   -> do_spm
       16      2   -> fill_temp_buffer
       16      2   -> read_program_memory
     14      2   flash_read
       14      2   -> read_program_memory


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_RAMPZ
      56  flash_erase
     190  flash_program
      96  flash_read

 
   1 byte  in segment ABSOLUTE
 342 bytes in segment CODE
 
 342 bytes of CODE memory
   0 bytes of DATA memory (+ 1 byte shared)

Errors: none
Warnings: none
