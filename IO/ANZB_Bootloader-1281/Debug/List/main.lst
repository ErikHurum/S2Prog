###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       13/Feb/2024  15:22:08
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\Src\main.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW9DB9.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\Src\main.c"
#        --cpu=m1281 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\Debug\Obj" -D
#        SPEED=38400 -D __AVR_ATmega1281__ -D ANZBANA_V8=1 -lCN
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\Debug\List" -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\Debug\List\main.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\Debug\Obj\main.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1281\Src\main.c
      1          #ifdef __ATMEGA_1280__
      2          #include	"iom1280.h"
      3          #endif
      4          
      5          #ifdef __AVR_ATmega1281__
      6          #include	"iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xc6
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUSR
   \                     _A_MCUSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3f
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      7          #endif
      8          
      9          /*****************************************************************************
     10          *
     11          * Copyright (C) 2004 Scanjet Ariston AS
     12          *
     13          * File          : main.c
     14          * Compiler      : IAR EWAAVR 2.28a
     15          * Output size   : 
     16          * Created       : 8-oct-03
     17          *              
     18          ****************************************************************************/
     19          #include "stdio.h"
     20          #include "math.h"
     21          #include "defines.h"
     22          #include "assembly.h"
     23          #include "variables.h"

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   void (*__near AppStart)(void)
   \                     AppStart:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char UnitID
   \                     UnitID:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char ResetStatus
   \                     ResetStatus:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   UARTDataType myUART
   \                     myUART:
   \   00000000                      DS8 25

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char hostAddress
   \                     hostAddress:
   \   00000000                      DS8 1

   \                                 In  segment FAR_F, align 1, keep-with-next
   \   char const __farflash crc[256]
   \                     crc:
   \   00000000   5E00E2BC3F61       DC8 0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31
   \              83DD9CC2207E
   \              FDA31F      
   \   0000000F   9D4121C3FC7F       DC8 65, 157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96
   \              40A25F1EE301
   \              3EBD60      
   \   0000001E   DC827D23C19F       DC8 130, 220, 35, 125, 159, 193, 66, 28, 254, 160, 225, 191, 93, 3, 128
   \              1C42A0FEBFE1
   \              035D80      
   \   0000002D   3CDEBE6202E0       DC8 222, 60, 98, 190, 224, 2, 92, 223, 129, 99, 61, 124, 34, 192, 158
   \              DF5C63817C3D
   \              C0229E      
   \   0000003C   431DFFA11846       DC8 29, 67, 161, 255, 70, 24, 250, 164, 39, 121, 155, 197, 132, 218, 56
   \              A4FA7927C59B
   \              DA8438      
   \   0000004B   E56659BBDB07       DC8 102, 229, 187, 89, 7, 219, 133, 103, 57, 186, 228, 6, 88, 25, 71
   \              6785BA3906E4
   \              195847      
   \   0000005A   FBA526789AC4       DC8 165, 251, 120, 38, 196, 154, 101, 59, 217, 135, 4, 90, 184, 230
   \              3B6587D95A04
   \              E6B8        
   \   00000068   F9A7451B98C6       DC8 167, 249, 27, 69, 198, 152, 122, 36, 248, 166, 68, 26, 153, 199, 37
   \              247AA6F81A44
   \              C79925      
   \   00000077   3A7B86645BD8       DC8 123, 58, 100, 134, 216, 91, 5, 231, 185, 140, 210, 48, 110, 237
   \              E7058CB930D2
   \              ED6E        
   \   00000085   51B34E0FF210       DC8 179, 81, 15, 78, 16, 242, 172, 47, 113, 147, 205, 17, 79, 173, 243
   \              2FAC937111CD
   \              AD4FF3      
   \   00000094   2E7092CC8DD3       DC8 112, 46, 204, 146, 211, 141, 111, 49, 178, 236, 14, 80, 175, 241
   \              316FECB2500E
   \              F1AF        
   \   000000A2   4D1390CE2C72       DC8 19, 77, 206, 144, 114, 44, 109, 51, 209, 143, 12, 82, 176, 238, 50
   \              336D8FD1520C
   \              EEB032      
   \   000000B1   8E6C53D0EF0D       DC8 108, 142, 208, 83, 13, 239, 177, 240, 174, 76, 18, 145, 207, 45
   \              F0B14CAE9112
   \              2DCF        
   \   000000BF   CA737694AB28       DC8 115, 202, 148, 118, 40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55
   \              17F50849B456
   \              69EA37      
   \   000000CE   8BD50957B5EB       DC8 213, 139, 87, 9, 235, 181, 54, 104, 138, 212, 149, 203, 41, 119
   \              6836D48ACB95
   \              7729        
   \   000000DC   AAF41648B7E9       DC8 244, 170, 72, 22, 233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151
   \              0B55D6886A34
   \              752B97      
   \   000000EB   4AC9F61474A8       DC8 201, 74, 20, 246, 168, 116, 42, 200, 150, 21, 75, 169, 247, 182
   \              C82A1596A94B
   \              B6F7        
   \   000000F9   0AE8D7546B89       DC8 232, 10, 84, 215, 137, 107, 53
   \              35          
     24          #include <intrinsics.h>
     25          
     26          extern char MyAddress(void);
     27          extern void WDT_Prescaler_Change(void);
     28          extern void EEPROM_writeByte(unsigned int uiAddress, unsigned char ucData);
     29          extern unsigned char EEPROM_readByte(unsigned int uiAddress);

   \                                 In  segment ABSOLUTE, at 0x21ff
     30          __no_init char BootloaderRevision    @0x21FF;
   \                     BootloaderRevision:
   \   00000000                      DS8 1
     31          
     32          

   \                                 In  segment CODE, align 2, keep-with-next
     33          __C_task void main(void){
   \                     main:
     34              //
     35              // watchdog off
     36              // if we don't do this, watchdog keeps
     37              // reseting the system in case of
     38              // intentional reset by app
     39              //
     40          
     41              /*
     42              asm("WDR");
     43              char status = MCUSR;
     44              MCUSR &= ~(1<<WDRF);
     45              WDTCSR = 0x00;
     46              (void)status;
     47              */
     48              __disable_interrupt();
   \   00000000   94F8               CLI
     49              __watchdog_reset();
   \   00000002   95A8               WDR
     50              WDT_Prescaler_Change();
   \   00000004   ........           CALL    WDT_Prescaler_Change
     51              BootloaderRevision = PROG_VERSION;
   \   00000008   E208               LDI     R16, 40
   \   0000000A   9300....           STS     BootloaderRevision, R16
     52          
     53              /* Clear WDRF in MCUSR */
     54              MCUSR &= ~(1<<WDRF);
   \   0000000E   B704               IN      R16, 0x34
   \   00000010   7F07               ANDI    R16, 0xF7
   \   00000012   BF04               OUT     0x34, R16
     55              __enable_interrupt();
   \   00000014   9478               SEI
     56          
     57              while ( (EECR & 1<<EEPE) != 0 ) //chech if EEPROM is ready
   \                     ??main_0:
   \   00000016   99F9               SBIC    0x1F, 0x01
   \   00000018   CFFE               RJMP    ??main_0
     58                  ;
     59              //EEARL = (0x0fff & 0xff);                // check high byte of eeprom 
     60              //EEARH = (0x0fff >> 8);                  // if date = 0xaa enter uploader mode
     61              //EECR |= (1<<EERE);                      // else jump to program
     62              //char ProgramOK = EEDR;
     63              int ProgramOK = EEPROM_readByte(0x0fff);
   \   0000001A   EF0F               LDI     R16, 255
   \   0000001C   E01F               LDI     R17, 15
   \   0000001E   ........           CALL    EEPROM_readByte
   \   00000022   2F80               MOV     R24, R16
   \   00000024   E090               LDI     R25, 0
     64              DDRD   =  0x00;      // Port D data
   \   00000026   E000               LDI     R16, 0
   \   00000028   B90A               OUT     0x0A, R16
     65              PORTD  =  0xf0;      // Port D data  //pullup addr
   \   0000002A   EF00               LDI     R16, 240
   \   0000002C   B90B               OUT     0x0B, R16
     66              int MyAddr = MyAddress();
   \   0000002E   ........           CALL    MyAddress
   \   00000032   2FA0               MOV     R26, R16
   \   00000034   E0B0               LDI     R27, 0
     67              if ( ProgramOK != 0xaa || MyAddress() == 0xF) {
   \   00000036   3A8A               CPI     R24, 170
   \   00000038   E000               LDI     R16, 0
   \   0000003A   0790               CPC     R25, R16
   \   0000003C   F421               BRNE    ??main_1
   \   0000003E   ........           CALL    MyAddress
   \   00000042   300F               CPI     R16, 15
   \   00000044   F491               BRNE    ??main_2
     68                  EEDR = 0;
   \                     ??main_1:
   \   00000046   E000               LDI     R16, 0
   \   00000048   BD00               OUT     0x20, R16
     69                  InitSystem();                       // Init the system
   \   0000004A   ........           CALL    InitSystem
     70                  GoToSyncUART() ;                   // go to sync modus for recive
   \   0000004E   ........           CALL    GoToSyncUART
     71                  UART_DATA_REG0 ;                    // read dummy byte
   \   00000052   9100....           LDS     R16, _A_UDR0
     72                  for(;;) {                           // suuuuuuperloooop here!!
     73                      __watchdog_reset();
   \                     ??main_3:
   \   00000056   95A8               WDR
     74                      recchar();
   \   00000058   ........           CALL    recchar
     75                       if(myUART.RxState == HANDLE){ // Package OK
   \   0000005C   9100....           LDS     R16, (myUART + 16)
   \   00000060   300A               CPI     R16, 10
   \   00000062   F7C9               BRNE    ??main_3
     76                           UsartCheckPackage();
   \   00000064   ........           CALL    UsartCheckPackage
   \   00000068   CFF6               RJMP    ??main_3
     77                       }
     78                  }                            
     79              } else {
     80                  AppStart();        					// Jump to Reset vector 0x0000 in Application Section
   \                     ??main_2:
   \   0000006A   ....               LDI     R30, LOW(AppStart)
   \   0000006C   ....               LDI     R31, (AppStart) >> 8
   \   0000006E   8100               LD      R16, Z
   \   00000070   8111               LDD     R17, Z+1
   \   00000072   01F8               MOVW    R31:R30, R17:R16
   \   00000074   9509               ICALL
     81              }
     82          }
   \   00000076   9508               RET
   \   00000078                      REQUIRE BootloaderRevision
   \   00000078                      REQUIRE _A_MCUSR
   \   00000078                      REQUIRE _A_EECR
   \   00000078                      REQUIRE _A_DDRD
   \   00000078                      REQUIRE _A_PORTD
   \   00000078                      REQUIRE _A_EEDR
   \   00000078                      REQUIRE _A_UDR0
     83          
     84          
     85          

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   main
        2   -- Indirect call
        2   -> EEPROM_readByte
        2   -> GoToSyncUART
        2   -> InitSystem
        2   -> MyAddress
        2   -> UsartCheckPackage
        2   -> WDT_Prescaler_Change
        2   -> recchar


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  AppStart
       1  BootloaderRevision
       1  ResetStatus
       1  UnitID
       1  _A_DDRD
       1  _A_EECR
       1  _A_EEDR
       1  _A_MCUSR
       1  _A_PORTD
       1  _A_UDR0
     256  crc
       1  hostAddress
     120  main
      25  myUART
       7  -- Other

 
   7 bytes in segment ABSOLUTE
 120 bytes in segment CODE
 256 bytes in segment FAR_F
   7 bytes in segment INITTAB
  30 bytes in segment NEAR_Z
 
 376 bytes of CODE memory (+ 7 bytes shared)
  30 bytes of DATA memory (+ 7 bytes shared)

Errors: none
Warnings: none
