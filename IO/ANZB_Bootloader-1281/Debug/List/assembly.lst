###############################################################################
#                                                                             #
#     IAR Assembler V7.30.5.1680/W32 for Microchip AVR 17/Mar/2023  14:41:02  #
#     Copyright 2022 IAR Systems AB.                                          #
#                                                                             #
#           Target option =  Relative jumps do not wrap                       #
#           Source file   =  D:\S2Prog\IO\ANZB_Bootloader-1281\Asm\assembly.s90#
#           List file     =  D:\S2Prog\IO\ANZB_Bootloader-1281\Debug\List\assembly.lst#
#           Object file   =  D:\S2Prog\IO\ANZB_Bootloader-1281\Debug\Obj\assembly.r90#
#           Command line  =  -f C:\Users\ESY\AppData\Local\Temp\EWEC5A.tmp    #
#                            (D:\S2Prog\IO\ANZB_Bootloader-1281\Asm\assembly.s90 #
#                            -v3                                              #
#                            -OD:\S2Prog\IO\ANZB_Bootloader-1281\Debug\Obj    #
#                            -s+ -w+ -r -DENABLE_BIT_DEFINITIONS              #
#                            -D__ATMEGA_1280__ -M<>                           #
#                            -LD:\S2Prog\IO\ANZB_Bootloader-1281\Debug\List   #
#                            -t8 -u_enhancedCore -D__HAS_ENHANCED_CORE__=1    #
#                            -D__HAS_MUL__=1                                  #
#                            -IC:\Program Files (x86)\IAR Systems\Embedded Workbench 8.4\avr\INC\\ #
#                            -ID:\S2Prog\IO\ANZB_Bootloader-1281\INC\\        #
#                            -D__MEMORY_MODEL__=2 -D__ATmega1281__=1          #
#                            -D__HAS_ELPM__=1)                                #
#                                                                             #
###############################################################################

      1    00000000                      NAME    assembly(16)
      2    00000000                      PUBLIC  fill_temp_buffer
      3    00000000                      PUBLIC  write_page
      4    00000000                      PUBLIC  write_lock_bits
      5    00000000                      PUBLIC  read_program_memory
      6    00000000                      RSEG    CODE
      7    00000000              
      8    00000000              
      9    00000000              #include        "iom1280.h"
     10    00000000              
     11    00000000              write_page:
     12    00000000 D01F                 RCALL   WAIT_SPMEN  ;Wait for SPMEN
                                                              flag cleared
     13    00000002 2FF1                 MOV     R31,R17         
     14    00000004 2FE0                 MOV     R30,R16     ;move adress to z
                                                              pointer (R31=ZH
                                                              R30=ZL)
     15    00000006 BF27                 OUT     SPMCSR, R18     ; argument 2
                                                                  decides
                                                                  function
                                                                  (r18)
     16    00000008 95E8                 SPM
     17    0000000A C01A                 RJMP    WAIT_SPMEN ;Wait for SPMEN
                                                             flag cleared
     18    0000000C              
     19    0000000C              
     20    0000000C              fill_temp_buffer:
     21    0000000C D019                 RCALL   WAIT_SPMEN  ;Wait for SPMEN
                                                              flag cleared
     22    0000000E 2FF3                 MOV     R31,R19     ;move adress to z
                                                              pointer (R31=ZH
                                                              R30=ZL)  
                                                              
     23    00000010 2FE2                 MOV     R30,R18     
     24    00000012 2E11                 MOV     R1,R17      ;move data to reg
                                                              0 and 1     
                                                              
     25    00000014 2E00                 MOV     R0,R16
     26    00000016                      
     27    00000016 E021                 LDI     R18,(1<<SPMEN)
     28    00000018 BF27                 OUT     SPMCSR, R18    ; r18 decides
                                                                 function
     29    0000001A 95E8                 SPM
     30    0000001C C011                 RJMP   WAIT_SPMEN  ;Wait for SPMEN
                                                             flag cleared
     31    0000001E              
     32    0000001E              
     33    0000001E              read_program_memory:
     34    0000001E D010                 RCALL    WAIT_SPMEN
     35    00000020 2FF1                 MOV     R31,R17     ;R31=ZH R30=ZL
     36    00000022 2FE0                 MOV     R30,R16     ;move adress to z
                                                              pointer
     37    00000024 FD20                 SBRC    R18,0       ;read lockbits?
                                                              (second
                                                              argument=0x09)
     38    00000026                                          ;if so, place
                                  second argument in SPMEN register
     39    00000026 BF27                 OUT     SPMCSR, R18     ; r18 decides
                                                                  function
     40    00000028                      
     41    00000028 95D8                 ELPM                ;read LSB       
                                                              
     42    0000002A              
     43    0000002A 2D00                 MOV     R16,R0      ;read LSB         
                                                               
     44    0000002C 95E3                 INC     R30
     45    0000002E              
     46    0000002E 95D8                 ELPM                ;read LSB       
                                                              
     47    00000030              
     48    00000030 2D10                 MOV     R17,R0      ;read MSB (ignored
                                                              when reading
                                                              lockbits)
     49    00000032 9508                 RET
     50    00000034              
     51    00000034              
     52    00000034              write_lock_bits:
     53    00000034 D005                 RCALL   WAIT_SPMEN  ;Wait for SPMEN
                                                              flag cleared
     54    00000036 2E00                 MOV     R0,R16   
     55    00000038 E029                 LDI     R18,((1<<BLBSET)|(1<<SPMEN))
     56    0000003A              
     57    0000003A BF27                 OUT     SPMCSR, R18    ; r18 decides
                                                                 function
     58    0000003C 95E8                 SPM                ;write lockbits
     59    0000003E C000                 RJMP   WAIT_SPMEN  ;Wait for SPMEN
                                                             flag cleared
     60    00000040                      
     61    00000040              
     62    00000040              WAIT_SPMEN:
     63    00000040 2E02                     MOV         R0, R18
     64    00000042 B727                 IN      R18, SPMCSR      ; get SPMCR
                                                                   into
                                                                   r18
     65    00000044 FD20                 SBRC    R18,SPMEN
     66    00000046 CFFC                 RJMP    WAIT_SPMEN  ;Wait for SPMEN
                                                              flag cleared
     67    00000048 2D20                 MOV             R18, R0
     68    0000004A              
     69    0000004A 9508                 RET
     70    0000004C              
     71    0000004C              
     72    0000004C              END
##############################
#          CRC:CEE9          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 76          #
##############################



