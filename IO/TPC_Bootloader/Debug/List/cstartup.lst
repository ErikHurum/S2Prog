###############################################################################
#                                                                             #
#     IAR Assembler V6.70.1.929/W32 for Atmel AVR 18/Jan/2017  11:06:37       #
#     Copyright 2015 IAR Systems AB.                                          #
#                                                                             #
#           Target option =  Relative jumps do not wrap                       #
#           Source file   =  D:\S2Prog\IO\TPC_Bootloader\Asm\cstartup.s90     #
#           List file     =  D:\S2Prog\IO\TPC_Bootloader\Debug\List\cstartup.lst#
#           Object file   =  D:\S2Prog\IO\TPC_Bootloader\Debug\Obj\cstartup.r90#
#           Command line  =  D:\S2Prog\IO\TPC_Bootloader\Asm\cstartup.s90     #
#                            -v3 -OD:\S2Prog\IO\TPC_Bootloader\Debug\Obj -s+  #
#                            -w+ -r -DENABLE_BIT_DEFINITIONS -M<>             #
#                            -LD:\S2Prog\IO\TPC_Bootloader\Debug\List -t8     #
#                            -u_enhancedCore -D__HAS_ENHANCED_CORE__=1        #
#                            -D__HAS_MUL__=1                                  #
#                            -IC:\Program Files (x86)\IAR Systems\Embedded Workbench 7.3\avr\INC\ #
#                            -ID:\S2Prog\IO\TPC_Bootloader\INC\               #
#                            -D__MEMORY_MODEL__=2 -D__HAS_ELPM__=1            #
#                                                                             #
###############################################################################

      1    00000000              ;---------------------------------------------
                                 -------------------------------
      2    00000000              ;                   CSTARTUP.S90
      3    00000000              ;
      4    00000000              ;       This module contains the AVR C and
                                  EC++ startup
      5    00000000              ;       routine and must usually be tailored
                                  to suit
      6    00000000              ;       customer's hardware.
      7    00000000              ;
      8    00000000              ;   File version:   $Revision: 1.2 $
      9    00000000              ;
     10    00000000              ;---------------------------------------------
                                 -------------------------------
     11    00000000              #include        "macros.m90"
     12    00000000              
     13    00000000              ;---------------------------------------------
                                 -------------------------------
     14    00000000              ; Set up the INTVEC segment with a reset
                                  vector         
     15    00000000              ;---------------------------------------------
                                 -------------------------------
     16    00000000                      NAME    ?RESET
     17    00000000              ;         NAME C_STARTUP   
     18    00000000              
     19    00000000                      EXTERN  ?C_STARTUP
     20    00000000              ;        PUBLIC  __RESTART
     21    00000000              
     22    00000000                      COMMON  INTVEC:CODE:ROOT(1)     ;
                                  Align at an even address
     23    00000000              
     24    00000000              ;        EXTERN  ?C_STARTUP
     25    00000000              
     26    00000000                      ORG     $0
     27    00000000              ;__RESTART:
     28    00000000 ........             XJMP    ?C_STARTUP
     29    00000004              
     30    00000004                      ENDMOD
##############################
#          CRC:F1B5          #
#        Errors:   0         #
#        Warnings: 0         #
#          Bytes: 4          #
##############################



###############################################################################
#                                                                             #
#     IAR Assembler V6.70.1.929/W32 for Atmel AVR 18/Jan/2017  11:06:37       #
#     Copyright 2015 IAR Systems AB.                                          #
#                                                                             #
#           Target option =  Relative jumps do not wrap                       #
#           Source file   =  D:\S2Prog\IO\TPC_Bootloader\Asm\cstartup.s90     #
#           List file     =  D:\S2Prog\IO\TPC_Bootloader\Debug\List\cstartup.lst#
#           Object file   =  D:\S2Prog\IO\TPC_Bootloader\Debug\Obj\cstartup.r90#
#           Command line  =  D:\S2Prog\IO\TPC_Bootloader\Asm\cstartup.s90     #
#                            -v3 -OD:\S2Prog\IO\TPC_Bootloader\Debug\Obj -s+  #
#                            -w+ -r -DENABLE_BIT_DEFINITIONS -M<>             #
#                            -LD:\S2Prog\IO\TPC_Bootloader\Debug\List -t8     #
#                            -u_enhancedCore -D__HAS_ENHANCED_CORE__=1        #
#                            -D__HAS_MUL__=1                                  #
#                            -IC:\Program Files (x86)\IAR Systems\Embedded Workbench 7.3\avr\INC\ #
#                            -ID:\S2Prog\IO\TPC_Bootloader\INC\               #
#                            -D__MEMORY_MODEL__=2 -D__HAS_ELPM__=1            #
#                                                                             #
###############################################################################

     31    00000000              
     32    00000000              ;---------------------------------------------
                                 -------------------------------
     33    00000000              ; Forward declarations of segments used in
                                  initialization
     34    00000000              ;---------------------------------------------
                                 -------------------------------
     35    00000000                      RSEG    CSTACK(0)
     36    00000000                      RSEG    RSTACK(0)
     37    00000000              
     38    00000000              ;---------------------------------------------
                                 -------------------------------
     39    00000000              ; Perform C initialization
     40    00000000              ;---------------------------------------------
                                 -------------------------------
     41    00000000                      MODULE  ?C_STARTUP
     42    00000000              
     43    00000000                      EXTERN  __low_level_init
     44    00000000                      EXTERN  __segment_init
     45    00000000              #ifdef _ECLIB
     47    00000000              #endif /* _ECLIB */
     48    00000000                      EXTERN  main
     49    00000000                      EXTERN  exit
     50    00000000                      EXTERN  _exit
     51    00000000              
     52    00000000              ;---------------------------------------------
                                 -------------------------------
     53    00000000              ; If the return address stack is located in
                                  external SRAM, make sure that
     54    00000000              ; you have uncommented the correct code in
                                  __low_level_init!!!
     55    00000000              ;---------------------------------------------
                                 -------------------------------
     56    00000000                      RSEG    CODE:CODE:NOROOT(1)
     57    00000000                      PUBLIC  ?C_STARTUP
     58    00000000                      PUBLIC  __RESTART
     59    00000000              
     60    00000000              __RESTART:
     61    00000000              ?C_STARTUP:
     62    00000000                      REQUIRE ?SETUP_STACK
     63    00000000              
     64    00000000                      RSEG    CODE:CODE:NOROOT(1)
     65    00000000                      PUBLIC  __RSTACK_in_external_ram
     66    00000000              
     67    00000000              __RSTACK_in_external_ram:
     68    00000000 EC00                 LDI     R16,0xC0
     69    00000002 BF05                 OUT     0x35,R16        ;Enable the
                                                                  external SRAM
                                                                  with a wait
                                                                  state
     70    00000004              
     71    00000004              ;---------------------------------------------
                                 -------------------------------
     72    00000004              ; Set up the CSTACK and RSTACK pointers.
     73    00000004              ;---------------------------------------------
                                 -------------------------------
     74    00000000                      RSEG    CODE:CODE:NOROOT(1)
     75    00000000              ?SETUP_STACK:
     76    00000000                      ;; Return address stack (RSTACK)
     77    00000000 ....                 LDI     R16,LOW(SFE(RSTACK))
     78    00000002 5003                 SUBI    R16,0x03
     79    00000004 BF0D                 OUT     0x3D,R16
     80    00000006              #if A90_POINTER_REG_SIZE > 1
     81    00000006 ....                 LDI     R16,HIGH(SFE(RSTACK))
     82    00000008 4000                 SBCI    R16,0x00
     83    0000000A BF0E                 OUT     0x3E,R16
     84    0000000C              #endif
     85    0000000C              
     86    0000000C                      ;; Data stack (CSTACK)
     87    0000000C ....                 LDI     Y0,LOW(SFE(CSTACK))
     88    0000000E              #if A90_POINTER_REG_SIZE > 1
     89    0000000E ....                 LDI     Y1,HIGH(SFE(CSTACK))
     90    00000010              #if A90_POINTER_REG_SIZE > 2
     93    00000010              #endif
     94    00000010              #endif
     95    00000010              
     96    00000010                      REQUIRE ?call_low_level_init
     97    00000010              
     98    00000010              ;---------------------------------------------
                                 -------------------------------
     99    00000010              ; Clear R15 so that it can be used as zero
                                  register by the code generator.
    100    00000010              ; The compiler will emit a "REQUIRE ?zero_reg_
                                 initialization" statement if
    101    00000010              ; this optimization has been enabled.
    102    00000010              ;---------------------------------------------
                                 -------------------------------
    103    00000000                      RSEG    CODE:CODE:NOROOT(1)
    104    00000000                      PUBLIC  ?zero_reg_initialization
    105    00000000              
    106    00000000              ?zero_reg_initialization:
    107    00000000 24FF                 CLR     R15
    108    00000002              
    109    00000002              ;---------------------------------------------
                                 -------------------------------
    110    00000002              ; Call __low_level_init to do low level
                                  initializatons. Modify the supplied
    111    00000002              ; __low_level_init module to add your own
                                  initialization code or to
    112    00000002              ; remove segment initialization (by returning
                                  0).
    113    00000002              ;---------------------------------------------
                                 -------------------------------
    114    00000000                      RSEG    CODE:CODE:NOROOT(1)
    115    00000000                      PUBLIC  ?call_low_level_init
    116    00000000              
    117    00000000              ?call_low_level_init:
    118    00000000 ........             XCALL   __low_level_init
    119    00000004              
    120    00000004                      REQUIRE ?cstartup_call_main
    121    00000004              
    122    00000004              ;---------------------------------------------
                                 -------------------------------
    123    00000004              ; Call __segment_init to initialize segments.
    124    00000004              ;---------------------------------------------
                                 -------------------------------
    125    00000000                      RSEG    CODE:CODE:NOROOT(1)
    126    00000000                      PUBLIC  ?need_segment_init
    127    00000000              
    128    00000000              ?need_segment_init:
    129    00000000 2300                 TST     P0
    130    00000002 F011                 BREQ    ?skip_segment_init
    131    00000004 ........             XCALL   __segment_init
    132    00000008              ?skip_segment_init:
    133    00000008              
    134    00000008              ;---------------------------------------------
                                 -------------------------------
    135    00000008              ;       Call the constructors of all global
                                  objects. This code will only
    136    00000008              ;       be used if any EC++ modules defines
                                  global objects that need to
    137    00000008              ;       have its constructor called before
                                  main.
    138    00000008              ;---------------------------------------------
                                 -------------------------------
    139    00000008              #ifdef _ECLIB
    141    00000008              #endif /* _ECLIB */
    142    00000000                      RSEG    CODE:CODE:NOROOT(1)
    143    00000000              
    144    00000000                      PUBLIC  ?call_ctors
    145    00000000              
    146    00000000              ?call_ctors:
    147    00000000              #ifdef _ECLIB
    155    00000000              #endif /* _ECLIB */
    156    00000000              
    157    00000000              ;---------------------------------------------
                                 -------------------------------
    158    00000000              ;       Call main
    159    00000000              ;---------------------------------------------
                                 -------------------------------
    160    00000000                      RSEG    CODE:CODE:NOROOT(1)
    161    00000000              
    162    00000000                      PUBLIC  ?cstartup_call_main
    163    00000000              
    164    00000000              ?cstartup_call_main:
    165    00000000              #if MEMORY_MODEL != LARGE_MEMORY_MODEL
    166    00000000              #if A90_PROC_OPTION > 1
    169    00000000              #if A90_POINTER_REG_SIZE > 2
    172    00000000              #endif /* A90_POINTER_REG_SIZE > 2 */
    173    00000000              #endif /* A90_PROC_OPTION > 1 */
    174    00000000              #endif /* MEMORY_MODEL != LARGE_MEMORY_MODEL
                                  */
    175    00000000              
    176    00000000 ........             XCALL   main
    177    00000004 ........             XCALL   exit
    178    00000008 ........             XJMP    _exit
    179    0000000C              
    180    0000000C                      END
##############################
#          CRC:F205          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 46          #
#     Modules:        2      #
#     Total errors:   0      #
#     Total warnings: 0      #
##############################



