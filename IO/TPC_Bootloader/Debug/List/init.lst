###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            18/Jan/2017  11:06:42
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\TPC_Bootloader\Src\init.c
#    Command line =  
#        D:\S2Prog\IO\TPC_Bootloader\Src\init.c -v3 --enhanced_core -ms -o
#        D:\S2Prog\IO\TPC_Bootloader\Debug\Obj -D SPEED=19200 -D PORT0 -lCN
#        D:\S2Prog\IO\TPC_Bootloader\Debug\List -y --initializers_in_flash
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\TPC_Bootloader\INC\ -I
#        D:\S2Prog\IO\TPC_Bootloader\..\..\SHARED\INC\ --dlib --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h" -Oh
#    List file    =  D:\S2Prog\IO\TPC_Bootloader\Debug\List\init.lst
#    Object file  =  D:\S2Prog\IO\TPC_Bootloader\Debug\Obj\init.r90
#
###############################################################################

D:\S2Prog\IO\TPC_Bootloader\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRR0L
   \                     _A_UBRR0L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x36
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3b
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x43
   \   union <unnamed> volatile __io _A_OCR2
   \                     _A_OCR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x45
   \   union <unnamed> volatile __io _A_TCCR2
   \                     _A_TCCR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4f
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x50
   \   union <unnamed> volatile __io _A_ASSR
   \                     _A_ASSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x51
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUCSR
   \                     _A_MCUCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x57
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x61
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x62
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x64
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x65
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6c
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6d
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a
   \   union <unnamed> volatile __io _A_TCCR1C
   \                     _A_TCCR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7d
   \   union <unnamed> volatile __io _A_ETIMSK
   \                     _A_ETIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x86
   \   union <unnamed> volatile __io _A_OCR3A
   \                     _A_OCR3A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x8a
   \   union <unnamed> volatile __io _A_TCCR3B
   \                     _A_TCCR3B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x8b
   \   union <unnamed> volatile __io _A_TCCR3A
   \                     _A_TCCR3A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x8c
   \   union <unnamed> volatile __io _A_TCCR3C
   \                     _A_TCCR3C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x90
   \   union <unnamed> volatile __io _A_UBRR0H
   \                     _A_UBRR0H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x95
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x98
   \   union <unnamed> volatile __io _A_UBRR1H
   \                     _A_UBRR1H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x99
   \   union <unnamed> volatile __io _A_UBRR1L
   \                     _A_UBRR1L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9a
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9b
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9d
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "inavr.h"
     10          #include "string.h"
     11          
     12          /*
     13          **===========================================================================
     14          ** Init the system according to board type
     15          **===========================================================================
     16          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     17          void InitSystem(void) {
   \                     InitSystem:
   \   00000000   938A               ST      -Y, R24
     18          
     19              char UnitIDtemp;
     20              DDRB   =  0x00 ;      // Port B data direction, bit 0, 4-7 out
   \   00000002   E000               LDI     R16, 0
   \   00000004   BB07               OUT     0x17, R16
     21              UnitIDtemp  = (PINB >> 2)& 0x03;       //get the unit ID
   \   00000006   B386               IN      R24, 0x16
   \   00000008   9586               LSR     R24
   \   0000000A   9586               LSR     R24
   \   0000000C   7083               ANDI    R24, 0x03
     22             
     23              Init_CPU();                         // init all processes
   \   0000000E   ....               RCALL   Init_CPU
     24              Init_IO();
   \   00000010   ....               RCALL   Init_IO
     25              Init_TMR() ;
   \   00000012   ....               RCALL   Init_TMR
     26              Init_USART(0, SPEED) ;              // Init uarts
   \   00000014   E040               LDI     R20, 0
   \   00000016   E45B               LDI     R21, 75
   \   00000018   E060               LDI     R22, 0
   \   0000001A   E070               LDI     R23, 0
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   ....               RCALL   Init_USART
     27              Init_USART(1, SPEED) ;              
   \   00000020   E040               LDI     R20, 0
   \   00000022   E45B               LDI     R21, 75
   \   00000024   E060               LDI     R22, 0
   \   00000026   E070               LDI     R23, 0
   \   00000028   E001               LDI     R16, 1
   \   0000002A   ....               RCALL   Init_USART
     28               if (((ReadEEPROMByte(EEPROM_PRI_ADDR)) < 30) || ((ReadEEPROMByte(EEPROM_PRI_ADDR) > 45))) {
   \   0000002C   E001               LDI     R16, 1
   \   0000002E   E010               LDI     R17, 0
   \   00000030   ........           CALL    ReadEEPROMByte
   \   00000034   310E               CPI     R16, 30
   \   00000036   F030               BRCS    ??InitSystem_0
   \   00000038   E001               LDI     R16, 1
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ........           CALL    ReadEEPROMByte
   \   00000040   320E               CPI     R16, 46
   \   00000042   F1C0               BRCS    ??InitSystem_1
     29                switch (UnitIDtemp) {
   \                     ??InitSystem_0:
   \   00000044   2F08               MOV     R16, R24
   \   00000046   2388               TST     R24
   \   00000048   F029               BREQ    ??InitSystem_2
   \   0000004A   950A               DEC     R16
   \   0000004C   F071               BREQ    ??InitSystem_3
   \   0000004E   950A               DEC     R16
   \   00000050   F0D9               BREQ    ??InitSystem_4
   \   00000052   C030               RJMP    ??InitSystem_1
     30                  case TPC140_LOC:
     31                    WriteEEPROMByte(EEPROM_PRI_ADDR, TPC140_DEF_ADDR);
   \                     ??InitSystem_2:
   \   00000054   E12F               LDI     R18, 31
   \   00000056   E001               LDI     R16, 1
   \   00000058   E010               LDI     R17, 0
   \   0000005A   ........           CALL    WriteEEPROMByte
     32                    WriteEEPROMByte(EEPROM_SEC_ADDR, 0);
   \   0000005E   E020               LDI     R18, 0
   \   00000060   E002               LDI     R16, 2
   \   00000062   E010               LDI     R17, 0
   \   00000064   ........           CALL    WriteEEPROMByte
     33                    break;
   \   00000068   C02C               RJMP    ??InitSystem_5
     34                  case TPC350_LOC:
     35                    WriteEEPROMByte(EEPROM_PRI_ADDR, TPC350_DEF_ADDR);
   \                     ??InitSystem_3:
   \   0000006A   E12E               LDI     R18, 30
   \   0000006C   E001               LDI     R16, 1
   \   0000006E   E010               LDI     R17, 0
   \   00000070   ........           CALL    WriteEEPROMByte
     36                    WriteEEPROMByte(EEPROM_SEC_ADDR, 0);
   \   00000074   E020               LDI     R18, 0
   \   00000076   E002               LDI     R16, 2
   \   00000078   E010               LDI     R17, 0
   \   0000007A   ........           CALL    WriteEEPROMByte
     37                    break;
     38                  case TPC196_LOC:
     39                    WriteEEPROMByte(EEPROM_PRI_ADDR, TPC196_DEF_ADDR);
     40                    WriteEEPROMByte(EEPROM_SEC_ADDR, 0);
     41                    break;
     42                }
     43              }
     44             
     45              switch (UnitIDtemp) {
     46                case TPC140_LOC:
     47                  UnitID = TPC140;
     48                  MyPriAddress = TPC140_DEF_ADDR;
     49                  break;
     50                case TPC350_LOC:
     51                  UnitID = TPC350;
   \                     ??InitSystem_6:
   \   0000007E   E000               LDI     R16, 0
   \   00000080   9300....           STS     UnitID, R16
     52                  MyPriAddress = TPC350_DEF_ADDR;
   \   00000084   E10E               LDI     R16, 30
   \   00000086   C00E               RJMP    ??InitSystem_7
   \                     ??InitSystem_4:
   \   00000088   E220               LDI     R18, 32
   \   0000008A   E001               LDI     R16, 1
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   ........           CALL    WriteEEPROMByte
   \   00000092   E020               LDI     R18, 0
   \   00000094   E002               LDI     R16, 2
   \   00000096   E010               LDI     R17, 0
   \   00000098   ........           CALL    WriteEEPROMByte
     53                  break;
     54                case TPC196_LOC:
     55                  UnitID = TPC196;
   \                     ??InitSystem_8:
   \   0000009C   E001               LDI     R16, 1
   \   0000009E   9300....           STS     UnitID, R16
     56                  MyPriAddress = TPC196_DEF_ADDR;
   \   000000A2   E200               LDI     R16, 32
   \                     ??InitSystem_7:
   \   000000A4   9300....           STS     MyPriAddress, R16
     57                  break;
     58              }
     59              MySecAddress = MyAddress() ;    // Get my address
   \                     ??InitSystem_9:
   \   000000A8   ........           CALL    MyAddress
   \   000000AC   9300....           STS     MySecAddress, R16
     60          }
   \   000000B0   9189               LD      R24, Y+
   \   000000B2   9508               RET
   \                     ??InitSystem_1:
   \   000000B4   2388               TST     R24
   \   000000B6   F029               BREQ    ??InitSystem_5
   \   000000B8   958A               DEC     R24
   \   000000BA   F309               BREQ    ??InitSystem_6
   \   000000BC   958A               DEC     R24
   \   000000BE   F371               BREQ    ??InitSystem_8
   \   000000C0   CFF3               RJMP    ??InitSystem_9
   \                     ??InitSystem_5:
   \   000000C2   E100               LDI     R16, 16
   \   000000C4   9300....           STS     UnitID, R16
   \   000000C8   E10F               LDI     R16, 31
   \   000000CA   CFEC               RJMP    ??InitSystem_7
   \   000000CC                      REQUIRE _A_DDRB
   \   000000CC                      REQUIRE _A_PINB
     61          
     62          /*
     63          **===========================================================================
     64          ** Init the CPU related registers
     65          **===========================================================================
     66          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     67          void Init_CPU( void ) {
   \                     Init_CPU:
     68          
     69              __disable_interrupt();
   \   00000000   94F8               CLI
     70          
     71              EIMSK = 0x00 ;        // External interrupt mask register 
   \   00000002   E000               LDI     R16, 0
   \   00000004   BF09               OUT     0x39, R16
     72              EICRA = 0x00 ;       // External interrupt control register Int 0/1 on low level
   \   00000006   9300....           STS     _A_EICRA, R16
     73              EICRB = 0x00 ;        // External interrupt control register Int 0/1 enabled
   \   0000000A   BF0A               OUT     0x3A, R16
     74              EIMSK = 0x00 ;        // External interrupt mask register 
   \   0000000C   BF09               OUT     0x39, R16
     75              MCUCR = 0x00 ;        // MCU control register  External Ram + wait state
   \   0000000E   BF05               OUT     0x35, R16
     76              XMCRA = 0x00 ;       // maximum wait states
   \   00000010   9300....           STS     _A_XMCRA, R16
     77              XMCRB = 0x00 ;       // Full 16 bit bus + bus keeper
   \   00000014   9300....           STS     _A_XMCRB, R16
     78              SREG  = 0x00 ;        // glabal interrupt
   \   00000018   BF0F               OUT     0x3F, R16
     79          
     80              RestartStatus = MCUCSR;       // Remember reset source
   \   0000001A   B704               IN      R16, 0x34
   \   0000001C   9300....           STS     RestartStatus, R16
     81              MCUCSR = 0x00;              // and reset
   \   00000020   E000               LDI     R16, 0
   \   00000022   BF04               OUT     0x34, R16
     82              /*--- Initialize buffer ---*/
     83          
     84          }
   \   00000024   9508               RET
   \   00000026                      REQUIRE _A_EIMSK
   \   00000026                      REQUIRE _A_EICRA
   \   00000026                      REQUIRE _A_EICRB
   \   00000026                      REQUIRE _A_MCUCR
   \   00000026                      REQUIRE _A_XMCRA
   \   00000026                      REQUIRE _A_XMCRB
   \   00000026                      REQUIRE _A_SREG
   \   00000026                      REQUIRE _A_MCUCSR
     85          
     86          /*
     87          **===========================================================================
     88          ** Init the watchdog registers
     89          **===========================================================================
     90          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     91          __monitor void Init_Watchdog( void ) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
     92          
     93              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
     94              WDTCR = 0x1f;
   \   00000006   E10F               LDI     R16, 31
   \   00000008   BD01               OUT     0x21, R16
     95              WDTCR = 0x1f;
   \   0000000A   BD01               OUT     0x21, R16
     96              asm("WDR");                             // kick the dog!!
   \   0000000C   95A8               WDR
     97          
     98          }
   \   0000000E   BF1F               OUT     0x3F, R17
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_WDTCR
     99          
    100          /*
    101          **===========================================================================
    102          ** Init the IO related registers
    103          **===========================================================================
    104          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    105          void Init_IO( void ) {
   \                     Init_IO:
    106          
    107              DDRA   =  0x00 ;      // Port A data 
   \   00000000   E000               LDI     R16, 0
   \   00000002   BB0A               OUT     0x1A, R16
    108              PORTA  =  0x00 ;      // Port A data
   \   00000004   BB0B               OUT     0x1B, R16
    109              DDRB   =  0x00 ;      // Port B data 
   \   00000006   BB07               OUT     0x17, R16
    110              PORTB  =  0x00 ;      // Port B data   
   \   00000008   BB08               OUT     0x18, R16
    111              DDRC   =  0x00 ;      // Port C data 
   \   0000000A   BB04               OUT     0x14, R16
    112              PORTC  =  0x00 ;      // Port C data
   \   0000000C   BB05               OUT     0x15, R16
    113              DDRD   =  0xff ;      // Port D data direction, all out
   \   0000000E   EF0F               LDI     R16, 255
   \   00000010   BB01               OUT     0x11, R16
    114              PORTD  =  0xff ;      // Port D data 1-7 high, 0 low
   \   00000012   BB02               OUT     0x12, R16
    115              DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   00000014   EF0E               LDI     R16, 254
   \   00000016   B902               OUT     0x02, R16
    116              PORTE  =  0x00 ;      // Port E data 
   \   00000018   E000               LDI     R16, 0
   \   0000001A   B903               OUT     0x03, R16
    117              DDRF   =  0x00 ;      // Port F data 
   \   0000001C   9300....           STS     _A_DDRF, R16
    118              PORTF  =  0x00 ;      // Port F data 
   \   00000020   9300....           STS     _A_PORTF, R16
    119              DDRG   =  0x10 ;      // Port G data 4 out, Alarm LED
   \   00000024   E100               LDI     R16, 16
   \   00000026   9300....           STS     _A_DDRG, R16
    120              PORTG  =  0x00 ;      // Port G data 
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   9300....           STS     _A_PORTG, R16
    121          }
   \   00000030   9508               RET
   \   00000032                      REQUIRE _A_DDRA
   \   00000032                      REQUIRE _A_PORTA
   \   00000032                      REQUIRE _A_DDRB
   \   00000032                      REQUIRE _A_PORTB
   \   00000032                      REQUIRE _A_DDRC
   \   00000032                      REQUIRE _A_PORTC
   \   00000032                      REQUIRE _A_DDRD
   \   00000032                      REQUIRE _A_PORTD
   \   00000032                      REQUIRE _A_DDRE
   \   00000032                      REQUIRE _A_PORTE
   \   00000032                      REQUIRE _A_DDRF
   \   00000032                      REQUIRE _A_PORTF
   \   00000032                      REQUIRE _A_DDRG
   \   00000032                      REQUIRE _A_PORTG
    122          
    123          /*
    124          **===========================================================================
    125          ** Init the timer related registers
    126          **===========================================================================
    127          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    128          void Init_TMR( void ) {
   \                     Init_TMR:
    129              /*--- Timer control (disable clock inputs) ---*/
    130              
    131              TCCR0   =  0x00 ;      // Timer control register 0 
   \   00000000   E000               LDI     R16, 0
   \   00000002   BF03               OUT     0x33, R16
    132              OCR0    =  57 ;        // Timer output compare register 0, 1000HZ //7.37MHz xtal
   \   00000004   E309               LDI     R16, 57
   \   00000006   BF01               OUT     0x31, R16
    133              TCCR1A  =  0x00 ;      // Timer control register 1A 
   \   00000008   E000               LDI     R16, 0
   \   0000000A   BD0F               OUT     0x2F, R16
    134              TCCR1B  =  0x00 ;      // Timer control register 1B , divide by 256
   \   0000000C   BD0E               OUT     0x2E, R16
    135              TCCR1C  =  0x00 ;      // Timer control register 1c , force outp. comp
   \   0000000E   9300....           STS     _A_TCCR1C, R16
    136              OCR1A   =  288 ;       // Timer output compare register 1A, 100 Hz //7.37MHz xtal
   \   00000012   E200               LDI     R16, 32
   \   00000014   E011               LDI     R17, 1
   \   00000016   BD1B               OUT     0x2B, R17
   \   00000018   BD0A               OUT     0x2A, R16
    137              TCCR2   =  0x00 ;      // Timer control register 2 
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   BD05               OUT     0x25, R16
    138              OCR2    =  0x00 ;      // Timer output compare register 2 
   \   0000001E   BD03               OUT     0x23, R16
    139              TCCR3A  =  0x00 ;      // Timer control register 3A 
   \   00000020   9300....           STS     _A_TCCR3A, R16
    140              TCCR3B  =  0x00 ;      // Timer control register 3B , divide by 256
   \   00000024   9300....           STS     _A_TCCR3B, R16
    141              TCCR3C  =  0x00 ;      // Timer control register 3c , force outp. comp
   \   00000028   9300....           STS     _A_TCCR3C, R16
    142              OCR3AH  =  0x00 ;      // Timer output compare register 3C, 1 Hz //7.37MHz xtal
   \   0000002C   93000087           STS     135, R16
    143              OCR3AL  =  0x00 ;      // Timer output compare register 3C, 1 Hz
   \   00000030   9300....           STS     _A_OCR3A, R16
    144              ASSR    =  0x00 ;      // Asynchronous status register 
   \   00000034   BF00               OUT     0x30, R16
    145              TIMSK   =  0x00 ;      // Timer interrupt mask register, enable 16 bit 1A, 8Bit73
   \   00000036   BF07               OUT     0x37, R16
    146              ETIMSK  =  0x00 ;      // Timer interrupt mask register, enable 16 bit 3A
   \   00000038   9300....           STS     _A_ETIMSK, R16
    147          } 
   \   0000003C   9508               RET
   \   0000003E                      REQUIRE _A_TCCR0
   \   0000003E                      REQUIRE _A_OCR0
   \   0000003E                      REQUIRE _A_TCCR1A
   \   0000003E                      REQUIRE _A_TCCR1B
   \   0000003E                      REQUIRE _A_TCCR1C
   \   0000003E                      REQUIRE _A_OCR1A
   \   0000003E                      REQUIRE _A_TCCR2
   \   0000003E                      REQUIRE _A_OCR2
   \   0000003E                      REQUIRE _A_TCCR3A
   \   0000003E                      REQUIRE _A_TCCR3B
   \   0000003E                      REQUIRE _A_TCCR3C
   \   0000003E                      REQUIRE _A_OCR3A
   \   0000003E                      REQUIRE _A_ASSR
   \   0000003E                      REQUIRE _A_TIMSK
   \   0000003E                      REQUIRE _A_ETIMSK
    148          
    149          /*
    150          **===========================================================================
    151          ** Init the USARTs registers
    152          **===========================================================================
    153          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    154          void Init_USART( char channel, unsigned long baud ) {
   \                     Init_USART:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
    155          
    156              /*--- Configure UART data block ---*/
    157              UART[channel].TxFirst   = 0x00;
   \   00000008   ....               LDI     R26, LOW(UART)
   \   0000000A   ....               LDI     R27, (UART) >> 8
   \   0000000C   E11D               LDI     R17, 29
   \   0000000E   9F01               MUL     R16, R17
   \   00000010   01FD               MOVW    R31:R30, R27:R26
   \   00000012   0DE0               ADD     R30, R0
   \   00000014   1DF1               ADC     R31, R1
   \   00000016   E030               LDI     R19, 0
   \   00000018   8332               STD     Z+2, R19
   \   0000001A   8333               STD     Z+3, R19
    158              UART[channel].TxLast    = 0x00;
   \   0000001C   8334               STD     Z+4, R19
   \   0000001E   8335               STD     Z+5, R19
    159              UART[channel].TxCount   = 0x00;
   \   00000020   8336               STD     Z+6, R19
   \   00000022   8337               STD     Z+7, R19
    160              UART[channel].RxFirst   = 0x00;
   \   00000024   8736               STD     Z+14, R19
   \   00000026   8737               STD     Z+15, R19
    161              UART[channel].RxLast    = 0x00;
   \   00000028   8B30               STD     Z+16, R19
   \   0000002A   8B31               STD     Z+17, R19
    162              UART[channel].RxCount   = 0x00;
   \   0000002C   8B32               STD     Z+18, R19
   \   0000002E   8B33               STD     Z+19, R19
    163              UART[channel].RxState   = SYNC;
   \   00000030   8B34               STD     Z+20, R19
    164              UART[channel].SyncCnt   = 0 ;
   \   00000032   8B35               STD     Z+21, R19
    165              UART[channel].TxStatus  = 0x00;
   \   00000034   8732               STD     Z+10, R19
    166          
    167              switch (channel) {
   \   00000036   2300               TST     R16
   \   00000038   F019               BREQ    ??Init_USART_0
   \   0000003A   950A               DEC     R16
   \   0000003C   F101               BREQ    ??Init_USART_1
   \   0000003E   C040               RJMP    ??Init_USART_2
    168              case 0x00 :          
    169                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_0:
   \   00000040   EF0A               LDI     R16, 250
   \   00000042   01FD               MOVW    R31:R30, R27:R26
   \   00000044   8B06               STD     Z+22, R16
   \   00000046   8B37               STD     Z+23, R19
    170                  UART[channel].pTxBuffer = TxBufferCh0;        
   \   00000048   ....               LDI     R16, LOW(TxBufferCh0)
   \   0000004A   ....               LDI     R17, (TxBufferCh0) >> 8
   \   0000004C   930D               ST      X+, R16
   \   0000004E   931C               ST      X, R17
    171                  UART[channel].pRxBuffer = RxBufferCh0;        
   \   00000050   ....               LDI     R16, LOW(RxBufferCh0)
   \   00000052   ....               LDI     R17, (RxBufferCh0) >> 8
   \   00000054   8704               STD     Z+12, R16
   \   00000056   8715               STD     Z+13, R17
    172                  UCSR0A  = 0x00; 
   \   00000058   B93B               OUT     0x0B, R19
    173                  UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   0000005A   E400               LDI     R16, 64
   \   0000005C   E412               LDI     R17, 66
   \   0000005E   E02F               LDI     R18, 15
   \   00000060   ........           CALL    ?UL_DIVMOD_S_L03
   \   00000064   2F40               MOV     R20, R16
   \   00000066   954A               DEC     R20
   \   00000068   B949               OUT     0x09, R20
    174                  UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   0000006A   01C8               MOVW    R25:R24, R17:R16
   \   0000006C   9701               SBIW    R25:R24, 1
   \   0000006E   9390....           STS     _A_UBRR0H, R25
    175                  UCSR0B  = (1<<RXEN0) | (1<<TXEN0);        // Enable recieve and transmit
   \   00000072   E108               LDI     R16, 24
   \   00000074   B90A               OUT     0x0A, R16
    176                  UCSR0C  = 0x06;       /* n,8,1 */
   \   00000076   E006               LDI     R16, 6
   \   00000078   9300....           STS     _A_UCSR0C, R16
    177                  break;
   \   0000007C   C021               RJMP    ??Init_USART_2
    178              case 0x01 :
    179                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_1:
   \   0000007E   EF0A               LDI     R16, 250
   \   00000080   01FD               MOVW    R31:R30, R27:R26
   \   00000082   AB03               STD     Z+51, R16
   \   00000084   AB34               STD     Z+52, R19
    180                  UART[channel].pTxBuffer = TxBufferCh1;
   \   00000086   ....               LDI     R16, LOW(TxBufferCh1)
   \   00000088   ....               LDI     R17, (TxBufferCh1) >> 8
   \   0000008A   8F05               STD     Z+29, R16
   \   0000008C   8F16               STD     Z+30, R17
    181                  UART[channel].pRxBuffer = RxBufferCh1;
   \   0000008E   ....               LDI     R16, LOW(RxBufferCh1)
   \   00000090   ....               LDI     R17, (RxBufferCh1) >> 8
   \   00000092   A701               STD     Z+41, R16
   \   00000094   A712               STD     Z+42, R17
    182                  UCSR1A  = 0x00; 
   \   00000096   9330....           STS     _A_UCSR1A, R19
    183                  UBRR1L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   0000009A   E400               LDI     R16, 64
   \   0000009C   E412               LDI     R17, 66
   \   0000009E   E02F               LDI     R18, 15
   \   000000A0   ........           CALL    ?UL_DIVMOD_S_L03
   \   000000A4   2F40               MOV     R20, R16
   \   000000A6   954A               DEC     R20
   \   000000A8   9340....           STS     _A_UBRR1L, R20
    184                  UBRR1H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   000000AC   01C8               MOVW    R25:R24, R17:R16
   \   000000AE   9701               SBIW    R25:R24, 1
   \   000000B0   9390....           STS     _A_UBRR1H, R25
    185                  UCSR1B  = (1<<RXEN1) | (1<<TXEN1);        // Enable recieve and transmit
   \   000000B4   E108               LDI     R16, 24
   \   000000B6   9300....           STS     _A_UCSR1B, R16
    186                  UCSR1C  = 0x06;       /* n,8,1 */
   \   000000BA   E006               LDI     R16, 6
   \   000000BC   9300....           STS     _A_UCSR1C, R16
    187                  break;
    188              default:
    189                  break ;
    190              }    
    191          }
   \                     ??Init_USART_2:
   \   000000C0   9189               LD      R24, Y+
   \   000000C2   9199               LD      R25, Y+
   \   000000C4   91A9               LD      R26, Y+
   \   000000C6   91B9               LD      R27, Y+
   \   000000C8   9508               RET
   \   000000CA                      REQUIRE _A_UCSR0A
   \   000000CA                      REQUIRE _A_UBRR0L
   \   000000CA                      REQUIRE _A_UBRR0H
   \   000000CA                      REQUIRE _A_UCSR0B
   \   000000CA                      REQUIRE _A_UCSR0C
   \   000000CA                      REQUIRE _A_UCSR1A
   \   000000CA                      REQUIRE _A_UBRR1L
   \   000000CA                      REQUIRE _A_UBRR1H
   \   000000CA                      REQUIRE _A_UCSR1B
   \   000000CA                      REQUIRE _A_UCSR1C
    192          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      1      2   InitSystem
        1      2   -> Init_CPU
        1      2   -> Init_IO
        1      2   -> Init_TMR
        1      2   -> Init_USART
        1      2   -> MyAddress
        1      2   -> ReadEEPROMByte
        1      2   -> WriteEEPROMByte
      0      2   Init_CPU
      0      2   Init_IO
      0      2   Init_TMR
      4      2   Init_USART
        4      2 ?UL_DIVMOD_S_L03
      0      2   Init_Watchdog


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     204  InitSystem
      38  Init_CPU
      50  Init_IO
      62  Init_TMR
     202  Init_USART
      18  Init_Watchdog
       1  _A_ASSR
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_ETIMSK
       1  _A_MCUCR
       1  _A_MCUCSR
       1  _A_OCR0
       2  _A_OCR1A
       1  _A_OCR2
       2  _A_OCR3A
       1  _A_PINB
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_SREG
       1  _A_TCCR0
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_TCCR1C
       1  _A_TCCR2
       1  _A_TCCR3A
       1  _A_TCCR3B
       1  _A_TCCR3C
       1  _A_TIMSK
       1  _A_UBRR0H
       1  _A_UBRR0L
       1  _A_UBRR1H
       1  _A_UBRR1L
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_WDTCR
       1  _A_XMCRA
       1  _A_XMCRB

 
  51 bytes in segment ABSOLUTE
 574 bytes in segment CODE
 
 574 bytes of CODE memory
   0 bytes of DATA memory (+ 51 bytes shared)

Errors: none
Warnings: none
