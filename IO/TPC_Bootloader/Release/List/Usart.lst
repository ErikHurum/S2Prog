###############################################################################
#
# IAR C/C++ Compiler V7.30.1.1615 for Microchip AVR       19/Feb/2021  14:16:07
# Copyright 1996-2020 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\TPC_Bootloader\Src\Usart.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EW7251.tmp
#        (D:\S2Prog\IO\TPC_Bootloader\Src\Usart.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\TPC_Bootloader\Release\Obj -D SPEED=9600 -lC
#        D:\S2Prog\IO\TPC_Bootloader\Release\List -y --initializers_in_flash
#        --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\TPC_Bootloader\INC\\ -I
#        D:\S2Prog\IO\TPC_Bootloader\..\..\SHARED\INC\\ --eeprom_size 4096
#        --clib -Oh)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\TPC_Bootloader\Release\List\Usart.lst
#    Object file  =  D:\S2Prog\IO\TPC_Bootloader\Release\Obj\Usart.r90
#
###############################################################################

D:\S2Prog\IO\TPC_Bootloader\Src\Usart.c
      1          /****************************************************************************************
      2          / Com protocol for USART0 
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3c
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3e
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5b
   \   union <unnamed> volatile __io _A_RAMPZ
   \                     _A_RAMPZ:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x65
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          #include "assembly.h"
     11          
     12          
     13          /*************************************************************************
     14          *
     15          *  Check the incoming packages
     16          *
     17          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     18          void UsartCheckPackage(char ch) {
   \                     UsartCheckPackage:
   \   00000000   924A               ST      -Y, R4
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006   939A               ST      -Y, R25
   \   00000008   938A               ST      -Y, R24
   \   0000000A                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000A   2E40               MOV     R4, R16
     19          
     20              unsigned short pointer;
     21              char    retval ;
     22          
     23              UART[ch].RxSendReply = false ;                           // flag for answering set to fault
   \   0000000C   E10D               LDI     R16, 29
   \   0000000E   9E40               MUL     R4, R16
   \   00000010   ....               LDI     R26, LOW(UART)
   \   00000012   ....               LDI     R27, (UART) >> 8
   \   00000014   0DA0               ADD     R26, R0
   \   00000016   1DB1               ADC     R27, R1
   \   00000018   01FD               MOVW    R31:R30, R27:R26
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   8F04               STD     Z+28, R16
     24              UART[ch].TxFirst = 6 ;                                 // Start pos for first TX command
   \   0000001E   E006               LDI     R16, 6
   \   00000020   8302               STD     Z+2, R16
   \   00000022   E000               LDI     R16, 0
   \   00000024   8303               STD     Z+3, R16
     25              pointer = 4 ;
   \   00000026   E084               LDI     R24, 4
   \   00000028   E090               LDI     R25, 0
     26              do {
     27                  retval = CheckActionUart(ch, pointer);
   \                     ??UsartCheckPackage_0:
   \   0000002A   019C               MOVW    R19:R18, R25:R24
   \   0000002C   2D04               MOV     R16, R4
   \   0000002E   ....               RCALL   CheckActionUart
   \   00000030   2F20               MOV     R18, R16
     28                  pointer = pointer + UART[ch].pRxBuffer[pointer+1] + 2;        // Point to a command cmd hb/lb
   \   00000032   01FD               MOVW    R31:R30, R27:R26
   \   00000034   8504               LDD     R16, Z+12
   \   00000036   8515               LDD     R17, Z+13
   \   00000038   0F08               ADD     R16, R24
   \   0000003A   1F19               ADC     R17, R25
   \   0000003C   01F8               MOVW    R31:R30, R17:R16
   \   0000003E   81E1               LDD     R30, Z+1
   \   00000040   E0F0               LDI     R31, 0
   \   00000042   9632               ADIW    R31:R30, 2
   \   00000044   0F8E               ADD     R24, R30
   \   00000046   1F9F               ADC     R25, R31
     29              } while (retval && (pointer < (UART[ch].RxPacklen - 2 )));
   \   00000048   2322               TST     R18
   \   0000004A   F041               BREQ    ??UsartCheckPackage_1
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8D00               LDD     R16, Z+24
   \   00000050   8D11               LDD     R17, Z+25
   \   00000052   5002               SUBI    R16, 2
   \   00000054   4010               SBCI    R17, 0
   \   00000056   1780               CP      R24, R16
   \   00000058   0791               CPC     R25, R17
   \   0000005A   F338               BRCS    ??UsartCheckPackage_0
     30              if (UART[ch].RxSendReply) {                              //send answer
   \                     ??UsartCheckPackage_1:
   \   0000005C   01FD               MOVW    R31:R30, R27:R26
   \   0000005E   8D04               LDD     R16, Z+28
   \   00000060   2300               TST     R16
   \   00000062   F011               BREQ    ??UsartCheckPackage_2
     31                  Uart_BuildTail(ch);
   \   00000064   2D04               MOV     R16, R4
   \   00000066   ....               RCALL   Uart_BuildTail
     32              }
     33              GoToSyncUART(ch) ;                                    // go to sync modus for recive
   \                     ??UsartCheckPackage_2:
   \   00000068   2D04               MOV     R16, R4
   \   0000006A   ....               RCALL   GoToSyncUART
     34          }
   \   0000006C   9189               LD      R24, Y+
   \   0000006E   9199               LD      R25, Y+
   \   00000070   91A9               LD      R26, Y+
   \   00000072   91B9               LD      R27, Y+
   \   00000074   9049               LD      R4, Y+
   \   00000076   9508               RET
     35          
     36          /*************************************************************************
     37          *
     38          *  Check action on received data
     39          *
     40          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     41          char CheckActionUart(char ch, unsigned short pointer) {
   \                     CheckActionUart:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
     42          
     43             unsigned short   command;
     44             char    retval = true;
   \   00000006   E081               LDI     R24, 1
   \   00000008   E11D               LDI     R17, 29
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   ....               LDI     R26, LOW(UART)
   \   0000000E   ....               LDI     R27, (UART) >> 8
   \   00000010   0DA0               ADD     R26, R0
   \   00000012   1DB1               ADC     R27, R1
   \   00000014   961C               ADIW    R27:R26, 12
   \   00000016   91ED               LD      R30, X+
   \   00000018   91FC               LD      R31, X
   \   0000001A   0FE2               ADD     R30, R18
   \   0000001C   1FF3               ADC     R31, R19
   \   0000001E   81A0               LD      R26, Z
   \   00000020   E0B0               LDI     R27, 0
     45          
     46             command = UART[ch].pRxBuffer[pointer] ;
     47             switch (command) {                                      // check action 
   \   00000022   2F1A               MOV     R17, R26
   \   00000024   5F10               SUBI    R17, 240
   \   00000026   F089               BREQ    ??CheckActionUart_0
   \   00000028   5012               SUBI    R17, 2
   \   0000002A   F0B1               BREQ    ??CheckActionUart_1
   \   0000002C   5012               SUBI    R17, 2
   \   0000002E   F0D9               BREQ    ??CheckActionUart_2
   \   00000030   5012               SUBI    R17, 2
   \   00000032   F111               BREQ    ??CheckActionUart_3
   \   00000034   5013               SUBI    R17, 3
   \   00000036   F149               BREQ    ??CheckActionUart_4
   \   00000038   5412               SUBI    R17, 66
   \   0000003A   F571               BRNE    ??CheckActionUart_5
     48             case ANP1_REQ_STAT :                                    // Regusest status for target
     49                  if (UART[ch].pRxBuffer[pointer+2] == MySecAddress) {           // unit adddress sec
   \   0000003C   8112               LDD     R17, Z+2
   \   0000003E   9120....           LDS     R18, MySecAddress
   \   00000042   1712               CP      R17, R18
   \   00000044   F561               BRNE    ??CheckActionUart_6
     50                        BuildStatusData(ch) ;
   \   00000046   ....               RCALL   BuildStatusData
   \   00000048   C02A               RJMP    ??CheckActionUart_6
     51                  }                      
     52                  break;
     53                  
     54              case ANP1_FLASH_ID :                                     // Send flash ID
     55                  if (UART[ch].pRxBuffer[pointer+2] == MySecAddress) {           // unit adddress sec
   \                     ??CheckActionUart_0:
   \   0000004A   8112               LDD     R17, Z+2
   \   0000004C   9120....           LDS     R18, MySecAddress
   \   00000050   1712               CP      R17, R18
   \   00000052   F529               BRNE    ??CheckActionUart_6
     56                       BuildFlashID(ch) ;
   \   00000054   ....               RCALL   BuildFlashID
   \   00000056   C023               RJMP    ??CheckActionUart_6
     57                  }
     58                  break ;
     59                  
     60              case ANP1_FLASH_ERASE :                                 // Erase flash
     61                  if (UART[ch].pRxBuffer[pointer+2] == MySecAddress) {           // unit adddress sec
   \                     ??CheckActionUart_1:
   \   00000058   8112               LDD     R17, Z+2
   \   0000005A   9120....           LDS     R18, MySecAddress
   \   0000005E   1712               CP      R17, R18
   \   00000060   F4F1               BRNE    ??CheckActionUart_6
     62                      EraseFlash(ch) ;
   \   00000062   ....               RCALL   EraseFlash
   \   00000064   C01C               RJMP    ??CheckActionUart_6
     63                  }
     64                  break ;
     65                  
     66              case ANP1_FLASH_PROG :                                   // Prog flash
     67                  if (UART[ch].pRxBuffer[pointer+2] == MySecAddress) {           // unit adddress sec
   \                     ??CheckActionUart_2:
   \   00000066   8112               LDD     R17, Z+2
   \   00000068   9140....           LDS     R20, MySecAddress
   \   0000006C   1714               CP      R17, R20
   \   0000006E   F4B9               BRNE    ??CheckActionUart_6
     68                      ProgramFlash(ch, pointer+3) ;
   \   00000070   5F2D               SUBI    R18, 253
   \   00000072   4F3F               SBCI    R19, 255
   \   00000074   ....               RCALL   ProgramFlash
   \   00000076   C013               RJMP    ??CheckActionUart_6
     69                  }
     70                  break ;
     71                  
     72              case ANP1_FLASH_READ :                                   // Read flash
     73                  if (UART[ch].pRxBuffer[pointer+2] == MySecAddress) {           // unit adddress sec
   \                     ??CheckActionUart_3:
   \   00000078   8112               LDD     R17, Z+2
   \   0000007A   9140....           LDS     R20, MySecAddress
   \   0000007E   1714               CP      R17, R20
   \   00000080   F471               BRNE    ??CheckActionUart_6
     74                     ReadFlash(ch, pointer+3) ;
   \   00000082   5F2D               SUBI    R18, 253
   \   00000084   4F3F               SBCI    R19, 255
   \   00000086   ....               RCALL   ReadFlash
   \   00000088   C00A               RJMP    ??CheckActionUart_6
     75                  }
     76                  break ;
     77                  
     78              case ANP1_EXIT_BOOTLOADER :                                // Leave bootlaoder
     79                  if (UART[ch].pRxBuffer[pointer+2] == MySecAddress) {           // unit adddress sec
   \                     ??CheckActionUart_4:
   \   0000008A   8112               LDD     R17, Z+2
   \   0000008C   9120....           LDS     R18, MySecAddress
   \   00000090   1712               CP      R17, R18
   \   00000092   F429               BRNE    ??CheckActionUart_6
     80                      ExitBootloader(ch) ; 
   \   00000094   ....               RCALL   ExitBootloader
   \   00000096   C003               RJMP    ??CheckActionUart_6
     81                  }
     82                  break ;
     83                  
     84              default:
     85                  if (command < ANP1_MAX_ECMD) {                           // handle end commands
   \                     ??CheckActionUart_5:
   \   00000098   971A               SBIW    R27:R26, 10
   \   0000009A   F408               BRCC    ??CheckActionUart_6
     86                      retval = false ;
   \   0000009C   E080               LDI     R24, 0
     87                  }
     88                  break;
     89                  
     90              }
     91              return retval;
   \                     ??CheckActionUart_6:
   \   0000009E   2F08               MOV     R16, R24
   \   000000A0   9189               LD      R24, Y+
   \   000000A2   91A9               LD      R26, Y+
   \   000000A4   91B9               LD      R27, Y+
   \   000000A6   9508               RET
     92          }
     93          
     94          /*************************************************************************
     95          *
     96          * Build send packet header
     97          * *her*AStmark
     98          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     99          void Uart_BuildHeader(char ch) {
   \                     Uart_BuildHeader:
   \   00000000   019D               MOVW    R19:R18, R27:R26
    100          
    101              UART[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   E11D               LDI     R17, 29
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART)
   \   00000008   ....               LDI     R27, (UART) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   01FD               MOVW    R31:R30, R27:R26
   \   00000010   E000               LDI     R16, 0
   \   00000012   8706               STD     Z+14, R16
   \   00000014   8707               STD     Z+15, R16
    102              UART[ch].RxLast  = 0;
   \   00000016   8B00               STD     Z+16, R16
   \   00000018   8B01               STD     Z+17, R16
    103              UART[ch].TxLast  = 0;
   \   0000001A   8304               STD     Z+4, R16
   \   0000001C   8305               STD     Z+5, R16
    104          
    105              UART[ch].pTxBuffer[0] = ANPRO1_SYN ;                        /* Sync */
   \   0000001E   91ED               LD      R30, X+
   \   00000020   91FC               LD      R31, X
   \   00000022   9711               SBIW    R27:R26, 1
   \   00000024   E002               LDI     R16, 2
   \   00000026   8300               ST      Z, R16
    106              UART[ch].pTxBuffer[1] = ANPRO1_SYN ;                        /* Sync */
   \   00000028   91ED               LD      R30, X+
   \   0000002A   91FC               LD      R31, X
   \   0000002C   9711               SBIW    R27:R26, 1
   \   0000002E   8301               STD     Z+1, R16
    107              UART[ch].pTxBuffer[2] = hostAddress ;                 /* RXID */
   \   00000030   9100....           LDS     R16, hostAddress
   \   00000034   91ED               LD      R30, X+
   \   00000036   91FC               LD      R31, X
   \   00000038   9711               SBIW    R27:R26, 1
   \   0000003A   8302               STD     Z+2, R16
    108              UART[ch].pTxBuffer[3] = MyPriAddress;                 /* Tx address pri*/
   \   0000003C   9100....           LDS     R16, MyPriAddress
   \   00000040   91ED               LD      R30, X+
   \   00000042   91FC               LD      R31, X
   \   00000044   9711               SBIW    R27:R26, 1
   \   00000046   8303               STD     Z+3, R16
    109              UART[ch].pTxBuffer[4] = 0 ;                          /* packlen HB, don't know yet */
   \   00000048   91ED               LD      R30, X+
   \   0000004A   91FC               LD      R31, X
   \   0000004C   9711               SBIW    R27:R26, 1
   \   0000004E   E000               LDI     R16, 0
   \   00000050   8304               STD     Z+4, R16
    110              UART[ch].pTxBuffer[5] = 0 ;                          /* packlen LB, don't know yet */
   \   00000052   91ED               LD      R30, X+
   \   00000054   91FC               LD      R31, X
   \   00000056   8305               STD     Z+5, R16
    111          }
   \   00000058   01D9               MOVW    R27:R26, R19:R18
   \   0000005A   9508               RET
    112          
    113          /*************************************************************************
    114          *
    115          * Build  packet tail
    116          * 
    117          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    118          void Uart_BuildTail(char ch) {
   \                     Uart_BuildTail:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   2E20               MOV     R2, R16
    119          
    120              Uart_BuildHeader(ch);                                    // fist build the header
   \   00000006   ....               RCALL   Uart_BuildHeader
    121          
    122              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANP1_ECMD_NMDWOACK ;  // End command 
   \   00000008   E10D               LDI     R16, 29
   \   0000000A   9E20               MUL     R2, R16
   \   0000000C   ....               LDI     R26, LOW(UART)
   \   0000000E   ....               LDI     R27, (UART) >> 8
   \   00000010   0DA0               ADD     R26, R0
   \   00000012   1DB1               ADC     R27, R1
   \   00000014   910D               LD      R16, X+
   \   00000016   911C               LD      R17, X
   \   00000018   9711               SBIW    R27:R26, 1
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8122               LDD     R18, Z+2
   \   0000001E   8133               LDD     R19, Z+3
   \   00000020   0F02               ADD     R16, R18
   \   00000022   1F13               ADC     R17, R19
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   E000               LDI     R16, 0
   \   00000028   8300               ST      Z, R16
   \   0000002A   01FD               MOVW    R31:R30, R27:R26
   \   0000002C   8102               LDD     R16, Z+2
   \   0000002E   8113               LDD     R17, Z+3
   \   00000030   5F0F               SUBI    R16, 255
   \   00000032   4F1F               SBCI    R17, 255
   \   00000034   8302               STD     Z+2, R16
   \   00000036   8313               STD     Z+3, R17
    123              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0x00 ;                  // End data 
   \   00000038   8100               LD      R16, Z
   \   0000003A   8111               LDD     R17, Z+1
   \   0000003C   8122               LDD     R18, Z+2
   \   0000003E   8133               LDD     R19, Z+3
   \   00000040   0F02               ADD     R16, R18
   \   00000042   1F13               ADC     R17, R19
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   E000               LDI     R16, 0
   \   00000048   8300               ST      Z, R16
   \   0000004A   01FD               MOVW    R31:R30, R27:R26
   \   0000004C   8102               LDD     R16, Z+2
   \   0000004E   8113               LDD     R17, Z+3
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \   00000054   8302               STD     Z+2, R16
   \   00000056   8313               STD     Z+3, R17
    124          
    125              UART[ch].pTxBuffer[5] = UART[ch].TxFirst;                    // correct length because stx's
   \   00000058   91ED               LD      R30, X+
   \   0000005A   91FC               LD      R31, X
   \   0000005C   9711               SBIW    R27:R26, 1
   \   0000005E   8305               STD     Z+5, R16
    126              UART[ch].pTxBuffer[4] = (UART[ch].TxFirst) >> 8 ;             // packet len high 
   \   00000060   01FD               MOVW    R31:R30, R27:R26
   \   00000062   8103               LDD     R16, Z+3
   \   00000064   91ED               LD      R30, X+
   \   00000066   91FC               LD      R31, X
   \   00000068   9711               SBIW    R27:R26, 1
   \   0000006A   8304               STD     Z+4, R16
    127          
    128              UART[ch].pTxBuffer[UART[ch].TxFirst] = CalcDSTxChecksum(ch, UART[ch].TxFirst) ; // Get checksum 
   \   0000006C   01FD               MOVW    R31:R30, R27:R26
   \   0000006E   8122               LDD     R18, Z+2
   \   00000070   8133               LDD     R19, Z+3
   \   00000072   2D02               MOV     R16, R2
   \   00000074   ....               RCALL   CalcDSTxChecksum
   \   00000076   2F20               MOV     R18, R16
   \   00000078   910D               LD      R16, X+
   \   0000007A   911C               LD      R17, X
   \   0000007C   9711               SBIW    R27:R26, 1
   \   0000007E   01FD               MOVW    R31:R30, R27:R26
   \   00000080   8142               LDD     R20, Z+2
   \   00000082   8153               LDD     R21, Z+3
   \   00000084   0F04               ADD     R16, R20
   \   00000086   1F15               ADC     R17, R21
   \   00000088   01F8               MOVW    R31:R30, R17:R16
   \   0000008A   8320               ST      Z, R18
    129              UART[ch].TxFirst++ ;                                        // OBS!! must be inc here due
   \   0000008C   01FD               MOVW    R31:R30, R27:R26
   \   0000008E   8102               LDD     R16, Z+2
   \   00000090   8113               LDD     R17, Z+3
   \   00000092   5F0F               SUBI    R16, 255
   \   00000094   4F1F               SBCI    R17, 255
   \   00000096   8302               STD     Z+2, R16
   \   00000098   8313               STD     Z+3, R17
    130                                                                          // to ANSI standard !!!!
    131          
    132              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANPRO1_EOT ;            // End of transmission 
   \   0000009A   8100               LD      R16, Z
   \   0000009C   8111               LDD     R17, Z+1
   \   0000009E   8122               LDD     R18, Z+2
   \   000000A0   8133               LDD     R19, Z+3
   \   000000A2   0F02               ADD     R16, R18
   \   000000A4   1F13               ADC     R17, R19
   \   000000A6   01F8               MOVW    R31:R30, R17:R16
   \   000000A8   E003               LDI     R16, 3
   \   000000AA   8300               ST      Z, R16
   \   000000AC   01FD               MOVW    R31:R30, R27:R26
   \   000000AE   8102               LDD     R16, Z+2
   \   000000B0   8113               LDD     R17, Z+3
   \   000000B2   5F0F               SUBI    R16, 255
   \   000000B4   4F1F               SBCI    R17, 255
   \   000000B6   8302               STD     Z+2, R16
   \   000000B8   8313               STD     Z+3, R17
    133              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0x00 ;            //switch off transmitter delay 
   \   000000BA   8100               LD      R16, Z
   \   000000BC   8111               LDD     R17, Z+1
   \   000000BE   8122               LDD     R18, Z+2
   \   000000C0   8133               LDD     R19, Z+3
   \   000000C2   0F02               ADD     R16, R18
   \   000000C4   1F13               ADC     R17, R19
   \   000000C6   01F8               MOVW    R31:R30, R17:R16
   \   000000C8   E000               LDI     R16, 0
   \   000000CA   8300               ST      Z, R16
   \   000000CC   01FD               MOVW    R31:R30, R27:R26
   \   000000CE   8102               LDD     R16, Z+2
   \   000000D0   8113               LDD     R17, Z+3
   \   000000D2   5F0F               SUBI    R16, 255
   \   000000D4   4F1F               SBCI    R17, 255
   \   000000D6   8302               STD     Z+2, R16
   \   000000D8   8313               STD     Z+3, R17
    134          
    135              UART[ch].TxCount = UART[ch].TxFirst;                      //bytes to send 
   \   000000DA   8306               STD     Z+6, R16
   \   000000DC   8317               STD     Z+7, R17
    136              UART[ch].TxLast = 0;                                     // reset cunter
   \   000000DE   E000               LDI     R16, 0
   \   000000E0   8304               STD     Z+4, R16
   \   000000E2   8305               STD     Z+5, R16
    137              UART[ch].TxPkCnt++ ;                                     // Count sent packages
   \   000000E4   8500               LDD     R16, Z+8
   \   000000E6   8511               LDD     R17, Z+9
   \   000000E8   5F0F               SUBI    R16, 255
   \   000000EA   4F1F               SBCI    R17, 255
   \   000000EC   8700               STD     Z+8, R16
   \   000000EE   8711               STD     Z+9, R17
    138              if (ch == 0) {                                           // Turn on TXE for channel
   \   000000F0   2022               TST     R2
   \   000000F2   F441               BRNE    ??Uart_BuildTail_0
    139                 SetBit(PORTG, 0x10) ;                                //Use the alarmled as TXE signal
   \   000000F4   91000065           LDS     R16, 101
   \   000000F8   6100               ORI     R16, 0x10
   \   000000FA   93000065           STS     101, R16
    140                 SetBit(PORTE, 0x04) ;                                     // TXE0 on
   \   000000FE   9A1A               SBI     0x03, 0x02
    141                  SendPacketUart(0) ;                                     // send answer
   \   00000100   E000               LDI     R16, 0
   \   00000102   ....               RCALL   SendPacketUart
    142              } else if (ch ==1) {
    143                  // not used
    144              }
    145          
    146          }
   \                     ??Uart_BuildTail_0:
   \   00000104   91A9               LD      R26, Y+
   \   00000106   91B9               LD      R27, Y+
   \   00000108   9508               RET
   \   0000010A                      REQUIRE _A_PORTG
   \   0000010A                      REQUIRE _A_PORTE
    147          
    148          
    149          /*************************************************************************
    150          *
    151          * Build datablock for card status
    152          *
    153          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    154          void BuildStatusData(char ch){
   \                     BuildStatusData:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
    155          
    156              short ntna ;
    157              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   00000004   E11D               LDI     R17, 29
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(UART)
   \   0000000A   ....               LDI     R31, (UART) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   E001               LDI     R16, 1
   \   00000012   8F04               STD     Z+28, R16
    158          
    159              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANP1_REP_STAT;     
   \   00000014   81A0               LD      R26, Z
   \   00000016   81B1               LDD     R27, Z+1
   \   00000018   8102               LDD     R16, Z+2
   \   0000001A   8113               LDD     R17, Z+3
   \   0000001C   0FA0               ADD     R26, R16
   \   0000001E   1FB1               ADC     R27, R17
   \   00000020   E40F               LDI     R16, 79
   \   00000022   930C               ST      X, R16
   \   00000024   8102               LDD     R16, Z+2
   \   00000026   8113               LDD     R17, Z+3
   \   00000028   5F0F               SUBI    R16, 255
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   8302               STD     Z+2, R16
   \   0000002E   8313               STD     Z+3, R17
    160              ntna = UART[ch].TxFirst++ ;                                    // remember index 
   \   00000030   0198               MOVW    R19:R18, R17:R16
   \   00000032   5F2F               SUBI    R18, 255
   \   00000034   4F3F               SBCI    R19, 255
   \   00000036   8322               STD     Z+2, R18
   \   00000038   8333               STD     Z+3, R19
    161              
    162              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MySecAddress;           // unit adddress sec
   \   0000003A   9120....           LDS     R18, MySecAddress
   \   0000003E   81A0               LD      R26, Z
   \   00000040   81B1               LDD     R27, Z+1
   \   00000042   8142               LDD     R20, Z+2
   \   00000044   0FA4               ADD     R26, R20
   \   00000046   1FB3               ADC     R27, R19
   \   00000048   932C               ST      X, R18
   \   0000004A   8122               LDD     R18, Z+2
   \   0000004C   8133               LDD     R19, Z+3
   \   0000004E   5F2F               SUBI    R18, 255
   \   00000050   4F3F               SBCI    R19, 255
   \   00000052   8322               STD     Z+2, R18
   \   00000054   8333               STD     Z+3, R19
    163              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROG_VERSION + PROGTYPE_BOOT ; // software version Bit 7 = bootloader
   \   00000056   81A0               LD      R26, Z
   \   00000058   81B1               LDD     R27, Z+1
   \   0000005A   0FA2               ADD     R26, R18
   \   0000005C   1FB3               ADC     R27, R19
   \   0000005E   E823               LDI     R18, 131
   \   00000060   932C               ST      X, R18
   \   00000062   8122               LDD     R18, Z+2
   \   00000064   8133               LDD     R19, Z+3
   \   00000066   5F2F               SUBI    R18, 255
   \   00000068   4F3F               SBCI    R19, 255
   \   0000006A   8322               STD     Z+2, R18
   \   0000006C   8333               STD     Z+3, R19
    164              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UnitID;                       // unit id
   \   0000006E   9120....           LDS     R18, UnitID
   \   00000072   81A0               LD      R26, Z
   \   00000074   81B1               LDD     R27, Z+1
   \   00000076   8142               LDD     R20, Z+2
   \   00000078   0FA4               ADD     R26, R20
   \   0000007A   1FB3               ADC     R27, R19
   \   0000007C   932C               ST      X, R18
   \   0000007E   8122               LDD     R18, Z+2
   \   00000080   8133               LDD     R19, Z+3
   \   00000082   5F2F               SUBI    R18, 255
   \   00000084   4F3F               SBCI    R19, 255
   \   00000086   8322               STD     Z+2, R18
   \   00000088   8333               STD     Z+3, R19
    165              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RXSIZE_UART & 0xff);         // rx buffer size
   \   0000008A   81A0               LD      R26, Z
   \   0000008C   81B1               LDD     R27, Z+1
   \   0000008E   0FA2               ADD     R26, R18
   \   00000090   1FB3               ADC     R27, R19
   \   00000092   E52E               LDI     R18, 94
   \   00000094   932C               ST      X, R18
   \   00000096   8122               LDD     R18, Z+2
   \   00000098   8133               LDD     R19, Z+3
   \   0000009A   5F2F               SUBI    R18, 255
   \   0000009C   4F3F               SBCI    R19, 255
   \   0000009E   8322               STD     Z+2, R18
   \   000000A0   8333               STD     Z+3, R19
    166              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (( RXSIZE_UART >> 8) & 0xff); // rx buffer size
   \   000000A2   81A0               LD      R26, Z
   \   000000A4   81B1               LDD     R27, Z+1
   \   000000A6   0FA2               ADD     R26, R18
   \   000000A8   1FB3               ADC     R27, R19
   \   000000AA   E021               LDI     R18, 1
   \   000000AC   932C               ST      X, R18
   \   000000AE   8122               LDD     R18, Z+2
   \   000000B0   8133               LDD     R19, Z+3
   \   000000B2   5F2F               SUBI    R18, 255
   \   000000B4   4F3F               SBCI    R19, 255
   \   000000B6   8322               STD     Z+2, R18
   \   000000B8   8333               STD     Z+3, R19
    167              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TXSIZE_UART & 0xff);         // tx buffer size
   \   000000BA   81A0               LD      R26, Z
   \   000000BC   81B1               LDD     R27, Z+1
   \   000000BE   0FA2               ADD     R26, R18
   \   000000C0   1FB3               ADC     R27, R19
   \   000000C2   E52E               LDI     R18, 94
   \   000000C4   932C               ST      X, R18
   \   000000C6   8122               LDD     R18, Z+2
   \   000000C8   8133               LDD     R19, Z+3
   \   000000CA   5F2F               SUBI    R18, 255
   \   000000CC   4F3F               SBCI    R19, 255
   \   000000CE   8322               STD     Z+2, R18
   \   000000D0   8333               STD     Z+3, R19
    168              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((TXSIZE_UART >> 8) & 0xff);  // tx buffer size
   \   000000D2   81A0               LD      R26, Z
   \   000000D4   81B1               LDD     R27, Z+1
   \   000000D6   0FA2               ADD     R26, R18
   \   000000D8   1FB3               ADC     R27, R19
   \   000000DA   E021               LDI     R18, 1
   \   000000DC   932C               ST      X, R18
   \   000000DE   8122               LDD     R18, Z+2
   \   000000E0   8133               LDD     R19, Z+3
   \   000000E2   5F2F               SUBI    R18, 255
   \   000000E4   4F3F               SBCI    R19, 255
   \   000000E6   8322               STD     Z+2, R18
   \   000000E8   8333               STD     Z+3, R19
    169              UART[ch].pTxBuffer[UART[ch].TxFirst++] = RestartStatus ;                  // restart flag
   \   000000EA   9120....           LDS     R18, RestartStatus
   \   000000EE   81A0               LD      R26, Z
   \   000000F0   81B1               LDD     R27, Z+1
   \   000000F2   8142               LDD     R20, Z+2
   \   000000F4   0FA4               ADD     R26, R20
   \   000000F6   1FB3               ADC     R27, R19
   \   000000F8   932C               ST      X, R18
   \   000000FA   8122               LDD     R18, Z+2
   \   000000FC   8133               LDD     R19, Z+3
   \   000000FE   5F2F               SUBI    R18, 255
   \   00000100   4F3F               SBCI    R19, 255
   \   00000102   8322               STD     Z+2, R18
   \   00000104   8333               STD     Z+3, R19
    170              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0; //Ser no1 ;                // Application program
   \   00000106   81A0               LD      R26, Z
   \   00000108   81B1               LDD     R27, Z+1
   \   0000010A   0FA2               ADD     R26, R18
   \   0000010C   1FB3               ADC     R27, R19
   \   0000010E   E020               LDI     R18, 0
   \   00000110   932C               ST      X, R18
   \   00000112   8122               LDD     R18, Z+2
   \   00000114   8133               LDD     R19, Z+3
   \   00000116   5F2F               SUBI    R18, 255
   \   00000118   4F3F               SBCI    R19, 255
   \   0000011A   8322               STD     Z+2, R18
   \   0000011C   8333               STD     Z+3, R19
    171              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0; //Ser no2 ;                // Application program
   \   0000011E   81A0               LD      R26, Z
   \   00000120   81B1               LDD     R27, Z+1
   \   00000122   0FA2               ADD     R26, R18
   \   00000124   1FB3               ADC     R27, R19
   \   00000126   E020               LDI     R18, 0
   \   00000128   932C               ST      X, R18
   \   0000012A   8122               LDD     R18, Z+2
   \   0000012C   8133               LDD     R19, Z+3
   \   0000012E   5F2F               SUBI    R18, 255
   \   00000130   4F3F               SBCI    R19, 255
   \   00000132   8322               STD     Z+2, R18
   \   00000134   8333               STD     Z+3, R19
    172              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0; //Ser no3 ;                // Application program
   \   00000136   81A0               LD      R26, Z
   \   00000138   81B1               LDD     R27, Z+1
   \   0000013A   0FA2               ADD     R26, R18
   \   0000013C   1FB3               ADC     R27, R19
   \   0000013E   E020               LDI     R18, 0
   \   00000140   932C               ST      X, R18
   \   00000142   8122               LDD     R18, Z+2
   \   00000144   8133               LDD     R19, Z+3
   \   00000146   5F2F               SUBI    R18, 255
   \   00000148   4F3F               SBCI    R19, 255
   \   0000014A   8322               STD     Z+2, R18
   \   0000014C   8333               STD     Z+3, R19
    173              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0; //Ser no4 ;                // Application program
   \   0000014E   81A0               LD      R26, Z
   \   00000150   81B1               LDD     R27, Z+1
   \   00000152   0FA2               ADD     R26, R18
   \   00000154   1FB3               ADC     R27, R19
   \   00000156   E020               LDI     R18, 0
   \   00000158   932C               ST      X, R18
   \   0000015A   8122               LDD     R18, Z+2
   \   0000015C   8133               LDD     R19, Z+3
   \   0000015E   5F2F               SUBI    R18, 255
   \   00000160   4F3F               SBCI    R19, 255
   \   00000162   8322               STD     Z+2, R18
   \   00000164   8333               STD     Z+3, R19
    174          
    175              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 1) ;      // length of data block lb
   \   00000166   1B20               SUB     R18, R16
   \   00000168   952A               DEC     R18
   \   0000016A   2F42               MOV     R20, R18
   \   0000016C   8120               LD      R18, Z
   \   0000016E   8131               LDD     R19, Z+1
   \   00000170   0F20               ADD     R18, R16
   \   00000172   1F31               ADC     R19, R17
   \   00000174   01F9               MOVW    R31:R30, R19:R18
   \   00000176   8340               ST      Z, R20
    176          
    177              RestartStatus = 0 ;                                                  // set reset stat to 0 = read    
   \   00000178   E000               LDI     R16, 0
   \   0000017A   9300....           STS     RestartStatus, R16
    178          }
   \   0000017E   2FA6               MOV     R26, R22
   \   00000180   2FB5               MOV     R27, R21
   \   00000182   9508               RET
    179          
    180          /*************************************************************************
    181          *
    182          * Build datablock for Flash ID
    183          * 
    184          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    185          void BuildFlashID(char ch) {
   \                     BuildFlashID:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
    186          
    187              short ntna;
    188              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   00000004   E11D               LDI     R17, 29
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(UART)
   \   0000000A   ....               LDI     R31, (UART) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   E001               LDI     R16, 1
   \   00000012   8F04               STD     Z+28, R16
    189           
    190              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANP1_REP_FLASH_ID;     
   \   00000014   81A0               LD      R26, Z
   \   00000016   81B1               LDD     R27, Z+1
   \   00000018   8102               LDD     R16, Z+2
   \   0000001A   8113               LDD     R17, Z+3
   \   0000001C   0FA0               ADD     R26, R16
   \   0000001E   1FB1               ADC     R27, R17
   \   00000020   EF01               LDI     R16, 241
   \   00000022   930C               ST      X, R16
   \   00000024   8102               LDD     R16, Z+2
   \   00000026   8113               LDD     R17, Z+3
   \   00000028   5F0F               SUBI    R16, 255
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   8302               STD     Z+2, R16
   \   0000002E   8313               STD     Z+3, R17
    191              ntna = UART[ch].TxFirst++ ;               /* remember index */
   \   00000030   0198               MOVW    R19:R18, R17:R16
   \   00000032   5F2F               SUBI    R18, 255
   \   00000034   4F3F               SBCI    R19, 255
   \   00000036   8322               STD     Z+2, R18
   \   00000038   8333               STD     Z+3, R19
    192                                                 
    193              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MySecAddress;           // unit adddress sec
   \   0000003A   9120....           LDS     R18, MySecAddress
   \   0000003E   81A0               LD      R26, Z
   \   00000040   81B1               LDD     R27, Z+1
   \   00000042   8142               LDD     R20, Z+2
   \   00000044   0FA4               ADD     R26, R20
   \   00000046   1FB3               ADC     R27, R19
   \   00000048   932C               ST      X, R18
   \   0000004A   8122               LDD     R18, Z+2
   \   0000004C   8133               LDD     R19, Z+3
   \   0000004E   5F2F               SUBI    R18, 255
   \   00000050   4F3F               SBCI    R19, 255
   \   00000052   8322               STD     Z+2, R18
   \   00000054   8333               STD     Z+3, R19
    194             
    195              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PARTCODE ;
   \   00000056   81A0               LD      R26, Z
   \   00000058   81B1               LDD     R27, Z+1
   \   0000005A   0FA2               ADD     R26, R18
   \   0000005C   1FB3               ADC     R27, R19
   \   0000005E   E424               LDI     R18, 68
   \   00000060   932C               ST      X, R18
   \   00000062   8122               LDD     R18, Z+2
   \   00000064   8133               LDD     R19, Z+3
   \   00000066   5F2F               SUBI    R18, 255
   \   00000068   4F3F               SBCI    R19, 255
   \   0000006A   8322               STD     Z+2, R18
   \   0000006C   8333               STD     Z+3, R19
    196              UART[ch].pTxBuffer[UART[ch].TxFirst++] = SIGNATURE_BYTE_1 ;
   \   0000006E   81A0               LD      R26, Z
   \   00000070   81B1               LDD     R27, Z+1
   \   00000072   0FA2               ADD     R26, R18
   \   00000074   1FB3               ADC     R27, R19
   \   00000076   E12E               LDI     R18, 30
   \   00000078   932C               ST      X, R18
   \   0000007A   8122               LDD     R18, Z+2
   \   0000007C   8133               LDD     R19, Z+3
   \   0000007E   5F2F               SUBI    R18, 255
   \   00000080   4F3F               SBCI    R19, 255
   \   00000082   8322               STD     Z+2, R18
   \   00000084   8333               STD     Z+3, R19
    197              UART[ch].pTxBuffer[UART[ch].TxFirst++] = SIGNATURE_BYTE_2 ;
   \   00000086   81A0               LD      R26, Z
   \   00000088   81B1               LDD     R27, Z+1
   \   0000008A   0FA2               ADD     R26, R18
   \   0000008C   1FB3               ADC     R27, R19
   \   0000008E   E927               LDI     R18, 151
   \   00000090   932C               ST      X, R18
   \   00000092   8122               LDD     R18, Z+2
   \   00000094   8133               LDD     R19, Z+3
   \   00000096   5F2F               SUBI    R18, 255
   \   00000098   4F3F               SBCI    R19, 255
   \   0000009A   8322               STD     Z+2, R18
   \   0000009C   8333               STD     Z+3, R19
    198              UART[ch].pTxBuffer[UART[ch].TxFirst++] = SIGNATURE_BYTE_3 ;
   \   0000009E   81A0               LD      R26, Z
   \   000000A0   81B1               LDD     R27, Z+1
   \   000000A2   0FA2               ADD     R26, R18
   \   000000A4   1FB3               ADC     R27, R19
   \   000000A6   E022               LDI     R18, 2
   \   000000A8   932C               ST      X, R18
   \   000000AA   8122               LDD     R18, Z+2
   \   000000AC   8133               LDD     R19, Z+3
   \   000000AE   5F2F               SUBI    R18, 255
   \   000000B0   4F3F               SBCI    R19, 255
   \   000000B2   8322               STD     Z+2, R18
   \   000000B4   8333               STD     Z+3, R19
    199          
    200              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 1) ;      // length of data block lb
   \   000000B6   1B20               SUB     R18, R16
   \   000000B8   952A               DEC     R18
   \   000000BA   2F42               MOV     R20, R18
   \   000000BC   8120               LD      R18, Z
   \   000000BE   8131               LDD     R19, Z+1
   \   000000C0   0F20               ADD     R18, R16
   \   000000C2   1F31               ADC     R19, R17
   \   000000C4   01F9               MOVW    R31:R30, R19:R18
   \   000000C6   8340               ST      Z, R20
    201          }
   \   000000C8   2FA6               MOV     R26, R22
   \   000000CA   2FB5               MOV     R27, R21
   \   000000CC   9508               RET
    202          
    203          /*************************************************************************
    204          *
    205          * Erase Flash 
    206          *
    207          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    208          void EraseFlash(char ch) {
   \                     EraseFlash:
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
    209          
    210              unsigned short ntna, address;
    211              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   0000000C   E11D               LDI     R17, 29
   \   0000000E   9F01               MUL     R16, R17
   \   00000010   ....               LDI     R26, LOW(UART)
   \   00000012   ....               LDI     R27, (UART) >> 8
   \   00000014   0DA0               ADD     R26, R0
   \   00000016   1DB1               ADC     R27, R1
   \   00000018   01FD               MOVW    R31:R30, R27:R26
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8F04               STD     Z+28, R16
    212              
    213              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANP1_REP_FLASH_ERASE;     
   \   0000001E   91ED               LD      R30, X+
   \   00000020   91FD               LD      R31, X+
   \   00000022   910D               LD      R16, X+
   \   00000024   911C               LD      R17, X
   \   00000026   9713               SBIW    R27:R26, 3
   \   00000028   0FE0               ADD     R30, R16
   \   0000002A   1FF1               ADC     R31, R17
   \   0000002C   EF03               LDI     R16, 243
   \   0000002E   8300               ST      Z, R16
   \   00000030   01FD               MOVW    R31:R30, R27:R26
   \   00000032   8102               LDD     R16, Z+2
   \   00000034   8113               LDD     R17, Z+3
   \   00000036   5F0F               SUBI    R16, 255
   \   00000038   4F1F               SBCI    R17, 255
   \   0000003A   8302               STD     Z+2, R16
   \   0000003C   8313               STD     Z+3, R17
    214              ntna = UART[ch].TxFirst++ ;                                    /* remember index */
   \   0000003E   0128               MOVW    R5:R4, R17:R16
   \   00000040   5F0F               SUBI    R16, 255
   \   00000042   4F1F               SBCI    R17, 255
   \   00000044   8302               STD     Z+2, R16
   \   00000046   8313               STD     Z+3, R17
    215              
    216              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MySecAddress;           // unit adddress sec
   \   00000048   9120....           LDS     R18, MySecAddress
   \   0000004C   8100               LD      R16, Z
   \   0000004E   8111               LDD     R17, Z+1
   \   00000050   8142               LDD     R20, Z+2
   \   00000052   8153               LDD     R21, Z+3
   \   00000054   0F04               ADD     R16, R20
   \   00000056   1F15               ADC     R17, R21
   \   00000058   01F8               MOVW    R31:R30, R17:R16
   \   0000005A   8320               ST      Z, R18
   \   0000005C   01FD               MOVW    R31:R30, R27:R26
   \   0000005E   8102               LDD     R16, Z+2
   \   00000060   8113               LDD     R17, Z+3
   \   00000062   5F0F               SUBI    R16, 255
   \   00000064   4F1F               SBCI    R17, 255
   \   00000066   8302               STD     Z+2, R16
   \   00000068   8313               STD     Z+3, R17
    217             
    218              #ifdef LARGE_MEMORY               //SPM uses Z pointer but the pointer is only 16bit and
    219              RAMPZ = 0x00;                     //can only address up to 64Kbytes FLASH to adresse higher 
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   BF0B               OUT     0x3B, R16
    220                                                //location it require the use of RAMPZ
    221              
    222              for(address=0;((address < (unsigned int)(APP_END&0xFFFF))|(RAMPZ == 0x00));address += PAGESIZE) {
   \   0000006E   E080               LDI     R24, 0
   \   00000070   E090               LDI     R25, 0
   \                     ??EraseFlash_0:
   \   00000072   E001               LDI     R16, 1
   \   00000074   C012               RJMP    ??EraseFlash_1
    223                  write_page(address,(1<<PGERS) + (1<<SPMEN));              //Perform page erase
   \                     ??EraseFlash_2:
   \   00000076   E023               LDI     R18, 3
   \   00000078   018C               MOVW    R17:R16, R25:R24
   \   0000007A   ........           CALL    write_page
    224                  write_page(address, (1<<REENABLE_RWW_BIT) + (1<<SPMEN));  //Re-enable the RWW section
   \   0000007E   E121               LDI     R18, 17
   \   00000080   018C               MOVW    R17:R16, R25:R24
   \   00000082   ........           CALL    write_page
    225              
    226                  if(address >=(0xFFFF-PAGESIZE)) //Last section on lower 64k segment is erased
   \   00000086   3F8F               CPI     R24, 255
   \   00000088   EF0E               LDI     R16, 254
   \   0000008A   0790               CPC     R25, R16
   \   0000008C   F010               BRCS    ??EraseFlash_3
    227                     RAMPZ = (1<<RAMPZ0);         //RAMPZ has to incremented into upper 64k segment
   \   0000008E   E001               LDI     R16, 1
   \   00000090   BF0B               OUT     0x3B, R16
    228              }
   \                     ??EraseFlash_3:
   \   00000092   9593               INC     R25
   \   00000094   3E90               CPI     R25, 224
   \   00000096   F368               BRCS    ??EraseFlash_0
   \   00000098   E000               LDI     R16, 0
   \                     ??EraseFlash_1:
   \   0000009A   B71B               IN      R17, 0x3B
   \   0000009C   2311               TST     R17
   \   0000009E   F359               BREQ    ??EraseFlash_2
   \   000000A0   2300               TST     R16
   \   000000A2   F749               BRNE    ??EraseFlash_2
    229              RAMPZ = 0x00;                     //Clear RAMPZ pointer
   \   000000A4   BF8B               OUT     0x3B, R24
    230              
    231              #else
    232              
    233              for(address=0;address < APP_END;address += PAGESIZE){  //Application section = 60 pages
    234                  write_page(address,(1<<PGERS) + (1<<SPMEN));       //Perform page erase
    235                  write_page(address, (1<<REENABLE_RWW_BIT) + (1<<SPMEN));  //Re-enable the RWW section
    236              }
    237              
    238              #endif          
    239          
    240              UART[ch].pTxBuffer[UART[ch].TxFirst++] = FLASH_ERASE_OK ;                 // Answer that the erase is OK
   \   000000A6   910D               LD      R16, X+
   \   000000A8   911C               LD      R17, X
   \   000000AA   9711               SBIW    R27:R26, 1
   \   000000AC   01FD               MOVW    R31:R30, R27:R26
   \   000000AE   8122               LDD     R18, Z+2
   \   000000B0   8133               LDD     R19, Z+3
   \   000000B2   0F02               ADD     R16, R18
   \   000000B4   1F13               ADC     R17, R19
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   8380               ST      Z, R24
   \   000000BA   01FD               MOVW    R31:R30, R27:R26
   \   000000BC   8102               LDD     R16, Z+2
   \   000000BE   8113               LDD     R17, Z+3
   \   000000C0   5F0F               SUBI    R16, 255
   \   000000C2   4F1F               SBCI    R17, 255
   \   000000C4   8302               STD     Z+2, R16
   \   000000C6   8313               STD     Z+3, R17
    241          
    242              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 1) ;      // length of data block lb
   \   000000C8   1904               SUB     R16, R4
   \   000000CA   950A               DEC     R16
   \   000000CC   91ED               LD      R30, X+
   \   000000CE   91FC               LD      R31, X
   \   000000D0   0DE4               ADD     R30, R4
   \   000000D2   1DF5               ADC     R31, R5
   \   000000D4   8300               ST      Z, R16
    243          }
   \   000000D6   9189               LD      R24, Y+
   \   000000D8   9199               LD      R25, Y+
   \   000000DA   91A9               LD      R26, Y+
   \   000000DC   91B9               LD      R27, Y+
   \   000000DE   9049               LD      R4, Y+
   \   000000E0   9059               LD      R5, Y+
   \   000000E2   9508               RET
   \   000000E4                      REQUIRE _A_RAMPZ
    244          
    245          /*************************************************************************
    246          *
    247          * Program Flash 
    248          *
    249          *   OBS!! This differ from the ANPRO10 protocol boot loader
    250          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    251          void ProgramFlash(char ch, unsigned short pointer) {
   \                     ProgramFlash:
   \   00000000   92DA               ST      -Y, R13
   \   00000002   92CA               ST      -Y, R12
   \   00000004   92BA               ST      -Y, R11
   \   00000006   92AA               ST      -Y, R10
   \   00000008   929A               ST      -Y, R9
   \   0000000A   928A               ST      -Y, R8
   \   0000000C   927A               ST      -Y, R7
   \   0000000E   926A               ST      -Y, R6
   \   00000010   925A               ST      -Y, R5
   \   00000012   924A               ST      -Y, R4
   \   00000014   93BA               ST      -Y, R27
   \   00000016   93AA               ST      -Y, R26
   \   00000018   939A               ST      -Y, R25
   \   0000001A   938A               ST      -Y, R24
   \   0000001C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R6_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R7_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R8_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R9_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R10_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R11_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R12_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R13_is_cg_reg
    252          
    253              unsigned short ntna, address, Nobytes, i, Addr, intval;
    254              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   0000001C   E11D               LDI     R17, 29
   \   0000001E   9F01               MUL     R16, R17
   \   00000020   ....               LDI     R26, LOW(UART)
   \   00000022   ....               LDI     R27, (UART) >> 8
   \   00000024   0DA0               ADD     R26, R0
   \   00000026   1DB1               ADC     R27, R1
   \   00000028   01FD               MOVW    R31:R30, R27:R26
   \   0000002A   E001               LDI     R16, 1
   \   0000002C   8F04               STD     Z+28, R16
    255              
    256              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANP1_REP_FLASH_PROG;     
   \   0000002E   8100               LD      R16, Z
   \   00000030   8111               LDD     R17, Z+1
   \   00000032   8142               LDD     R20, Z+2
   \   00000034   8153               LDD     R21, Z+3
   \   00000036   0F04               ADD     R16, R20
   \   00000038   1F15               ADC     R17, R21
   \   0000003A   01F8               MOVW    R31:R30, R17:R16
   \   0000003C   EF05               LDI     R16, 245
   \   0000003E   8300               ST      Z, R16
   \   00000040   01FD               MOVW    R31:R30, R27:R26
   \   00000042   8102               LDD     R16, Z+2
   \   00000044   8113               LDD     R17, Z+3
   \   00000046   5F0F               SUBI    R16, 255
   \   00000048   4F1F               SBCI    R17, 255
   \   0000004A   8302               STD     Z+2, R16
   \   0000004C   8313               STD     Z+3, R17
    257              ntna = UART[ch].TxFirst++ ;                         /* remember index */
   \   0000004E   0168               MOVW    R13:R12, R17:R16
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \   00000054   8302               STD     Z+2, R16
   \   00000056   8313               STD     Z+3, R17
    258                                                
    259              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MySecAddress;           // unit adddress sec
   \   00000058   9140....           LDS     R20, MySecAddress
   \   0000005C   8100               LD      R16, Z
   \   0000005E   8111               LDD     R17, Z+1
   \   00000060   8162               LDD     R22, Z+2
   \   00000062   8173               LDD     R23, Z+3
   \   00000064   0F06               ADD     R16, R22
   \   00000066   1F17               ADC     R17, R23
   \   00000068   01F8               MOVW    R31:R30, R17:R16
   \   0000006A   8340               ST      Z, R20
   \   0000006C   01FD               MOVW    R31:R30, R27:R26
   \   0000006E   8102               LDD     R16, Z+2
   \   00000070   8113               LDD     R17, Z+3
   \   00000072   5F0F               SUBI    R16, 255
   \   00000074   4F1F               SBCI    R17, 255
   \   00000076   8302               STD     Z+2, R16
   \   00000078   8313               STD     Z+3, R17
    260             
    261              UART[ch].pTxBuffer[UART[ch].TxFirst++] = FLASH_PROG_OK;       // OK
   \   0000007A   8100               LD      R16, Z
   \   0000007C   8111               LDD     R17, Z+1
   \   0000007E   8142               LDD     R20, Z+2
   \   00000080   8153               LDD     R21, Z+3
   \   00000082   0F04               ADD     R16, R20
   \   00000084   1F15               ADC     R17, R21
   \   00000086   01F8               MOVW    R31:R30, R17:R16
   \   00000088   E000               LDI     R16, 0
   \   0000008A   8300               ST      Z, R16
   \   0000008C   01FD               MOVW    R31:R30, R27:R26
   \   0000008E   8102               LDD     R16, Z+2
   \   00000090   8113               LDD     R17, Z+3
   \   00000092   5F0F               SUBI    R16, 255
   \   00000094   4F1F               SBCI    R17, 255
   \   00000096   8302               STD     Z+2, R16
   \   00000098   8313               STD     Z+3, R17
    262             
    263              address = UART[ch].pRxBuffer[pointer] + (UART[ch].pRxBuffer[pointer+1]<<8); // save address
   \   0000009A   8504               LDD     R16, Z+12
   \   0000009C   8515               LDD     R17, Z+13
   \   0000009E   01F8               MOVW    R31:R30, R17:R16
   \   000000A0   0FE2               ADD     R30, R18
   \   000000A2   1FF3               ADC     R31, R19
   \   000000A4   8040               LD      R4, Z
   \   000000A6   8051               LDD     R5, Z+1
    264              pointer += 2;
   \   000000A8   5F2E               SUBI    R18, 254
   \   000000AA   4F3F               SBCI    R19, 255
    265              Nobytes = UART[ch].pRxBuffer[pointer] + (UART[ch].pRxBuffer[pointer+1]<<8); // save address
   \   000000AC   01F8               MOVW    R31:R30, R17:R16
   \   000000AE   0FE2               ADD     R30, R18
   \   000000B0   1FF3               ADC     R31, R19
   \   000000B2   8080               LD      R8, Z
   \   000000B4   8091               LDD     R9, Z+1
    266              pointer += 2;
    267              if (UART[ch].pRxBuffer[pointer++] == 0x00) {          // copy first part to buffer (128 byte)
   \   000000B6   5F2E               SUBI    R18, 254
   \   000000B8   4F3F               SBCI    R19, 255
   \   000000BA   01F8               MOVW    R31:R30, R17:R16
   \   000000BC   0FE2               ADD     R30, R18
   \   000000BE   1FF3               ADC     R31, R19
   \   000000C0   8140               LD      R20, Z
   \   000000C2   2344               TST     R20
   \   000000C4   F511               BRNE    ??ProgramFlash_0
    268                  for (i = 0; i < Nobytes; i++){                    // copy data to buffer
   \   000000C6   2D48               MOV     R20, R8
   \   000000C8   2949               OR      R20, R9
   \   000000CA   F079               BREQ    ??ProgramFlash_1
   \   000000CC   0F02               ADD     R16, R18
   \   000000CE   1F13               ADC     R17, R19
   \   000000D0   5F0F               SUBI    R16, 255
   \   000000D2   4F1F               SBCI    R17, 255
   \   000000D4   ....               LDI     R18, LOW(PageBuffer)
   \   000000D6   ....               LDI     R19, (PageBuffer) >> 8
   \   000000D8   01C4               MOVW    R25:R24, R9:R8
    269                      PageBuffer[i] = UART[ch].pRxBuffer[pointer++];  
   \                     ??ProgramFlash_2:
   \   000000DA   01F8               MOVW    R31:R30, R17:R16
   \   000000DC   9141               LD      R20, Z+
   \   000000DE   018F               MOVW    R17:R16, R31:R30
   \   000000E0   01F9               MOVW    R31:R30, R19:R18
   \   000000E2   9341               ST      Z+, R20
   \   000000E4   019F               MOVW    R19:R18, R31:R30
    270                  }
   \   000000E6   9701               SBIW    R25:R24, 1
   \   000000E8   F7C1               BRNE    ??ProgramFlash_2
    271                  UART[ch].pTxBuffer[UART[ch].TxFirst-1] = FLASH_COPYL_OK;       // Copy OK
   \                     ??ProgramFlash_1:
   \   000000EA   910D               LD      R16, X+
   \   000000EC   911C               LD      R17, X
   \   000000EE   9711               SBIW    R27:R26, 1
   \   000000F0   01FD               MOVW    R31:R30, R27:R26
   \   000000F2   8122               LDD     R18, Z+2
   \   000000F4   8133               LDD     R19, Z+3
   \   000000F6   0F02               ADD     R16, R18
   \   000000F8   1F13               ADC     R17, R19
   \   000000FA   5001               SUBI    R16, 1
   \   000000FC   4010               SBCI    R17, 0
   \   000000FE   01F8               MOVW    R31:R30, R17:R16
   \   00000100   E005               LDI     R16, 5
   \   00000102   8300               ST      Z, R16
    272                  NoBLow = Nobytes  ;                               // Number of bytes in low data
   \   00000104   9280....           STS     NoBLow, R8
   \   00000108   C0A2               RJMP    ??ProgramFlash_3
    273              } else {
    274                  for (i = NoBLow; i < NoBLow + Nobytes; i++){                    // copy data to buffer
   \                     ??ProgramFlash_0:
   \   0000010A   9140....           LDS     R20, NoBLow
   \   0000010E   2F64               MOV     R22, R20
   \   00000110   E070               LDI     R23, 0
   \   00000112   2F04               MOV     R16, R20
   \   00000114   E010               LDI     R17, 0
   \   00000116   0D08               ADD     R16, R8
   \   00000118   1D19               ADC     R17, R9
   \   0000011A   1740               CP      R20, R16
   \   0000011C   0771               CPC     R23, R17
   \   0000011E   F4A8               BRCC    ??ProgramFlash_4
   \   00000120   01FD               MOVW    R31:R30, R27:R26
   \   00000122   8504               LDD     R16, Z+12
   \   00000124   8515               LDD     R17, Z+13
   \   00000126   0F02               ADD     R16, R18
   \   00000128   1F13               ADC     R17, R19
   \   0000012A   5F0F               SUBI    R16, 255
   \   0000012C   4F1F               SBCI    R17, 255
   \   0000012E   ....               LDI     R18, LOW(PageBuffer)
   \   00000130   ....               LDI     R19, (PageBuffer) >> 8
   \   00000132   0F24               ADD     R18, R20
   \   00000134   1F37               ADC     R19, R23
   \   00000136   01A4               MOVW    R21:R20, R9:R8
    275                      PageBuffer[i] = UART[ch].pRxBuffer[pointer++];  
   \                     ??ProgramFlash_5:
   \   00000138   01F8               MOVW    R31:R30, R17:R16
   \   0000013A   9001               LD      R0, Z+
   \   0000013C   018F               MOVW    R17:R16, R31:R30
   \   0000013E   01F9               MOVW    R31:R30, R19:R18
   \   00000140   9201               ST      Z+, R0
   \   00000142   019F               MOVW    R19:R18, R31:R30
    276                  }
   \   00000144   5041               SUBI    R20, 1
   \   00000146   4050               SBCI    R21, 0
   \   00000148   F7B9               BRNE    ??ProgramFlash_5
    277                  Nobytes += NoBLow;                                    // toatl no of bytes
   \                     ??ProgramFlash_4:
   \   0000014A   0E86               ADD     R8, R22
   \   0000014C   1E97               ADC     R9, R23
    278                  if (Nobytes > PAGESIZE) {
   \   0000014E   E001               LDI     R16, 1
   \   00000150   1680               CP      R8, R16
   \   00000152   0690               CPC     R9, R16
   \   00000154   F098               BRCS    ??ProgramFlash_6
    279                      UART[ch].pTxBuffer[UART[ch].TxFirst++] = FLASH_PROG_PAGEF ;               // Answer with Page fault
   \   00000156   910D               LD      R16, X+
   \   00000158   911C               LD      R17, X
   \   0000015A   9711               SBIW    R27:R26, 1
   \   0000015C   01FD               MOVW    R31:R30, R27:R26
   \   0000015E   8122               LDD     R18, Z+2
   \   00000160   8133               LDD     R19, Z+3
   \   00000162   0F02               ADD     R16, R18
   \   00000164   1F13               ADC     R17, R19
   \   00000166   01F8               MOVW    R31:R30, R17:R16
   \   00000168   E001               LDI     R16, 1
   \   0000016A   8300               ST      Z, R16
   \   0000016C   01FD               MOVW    R31:R30, R27:R26
   \   0000016E   8102               LDD     R16, Z+2
   \   00000170   8113               LDD     R17, Z+3
   \   00000172   5F0F               SUBI    R16, 255
   \   00000174   4F1F               SBCI    R17, 255
   \   00000176   8302               STD     Z+2, R16
   \   00000178   8313               STD     Z+3, R17
   \   0000017A   C069               RJMP    ??ProgramFlash_3
    280                  } else {
    281                      #ifdef LARGE_MEMORY
    282                      if(address >= 0x7FFF){
   \                     ??ProgramFlash_6:
   \   0000017C   EF0F               LDI     R16, 255
   \   0000017E   1640               CP      R4, R16
   \   00000180   E70F               LDI     R16, 127
   \   00000182   0650               CPC     R5, R16
   \   00000184   F018               BRCS    ??ProgramFlash_7
    283                          RAMPZ = (1<<RAMPZ0);
   \   00000186   E001               LDI     R16, 1
   \   00000188   BF0B               OUT     0x3B, R16
   \   0000018A   C001               RJMP    ??ProgramFlash_8
    284                      } else {
    285                          RAMPZ = 0;
   \                     ??ProgramFlash_7:
   \   0000018C   BF7B               OUT     0x3B, R23
    286                      }
    287                      #endif            
    288                      address = address << 1;                                     // convert from byte address to word address
   \                     ??ProgramFlash_8:
   \   0000018E   0C44               LSL     R4
   \   00000190   1C55               ROL     R5
    289                      Addr = address;                                             // mirror the address
   \   00000192   0152               MOVW    R11:R10, R5:R4
    290                      for (i = 0; i < Nobytes; i+=2, address+=2, pointer+=2) {              // write data to flash
   \   00000194   E080               LDI     R24, 0
   \   00000196   E090               LDI     R25, 0
   \   00000198   2D08               MOV     R16, R8
   \   0000019A   2909               OR      R16, R9
   \   0000019C   F0A9               BREQ    ??ProgramFlash_9
   \   0000019E   ....               LDI     R16, LOW(PageBuffer)
   \   000001A0   ....               LDI     R17, (PageBuffer) >> 8
   \   000001A2   0138               MOVW    R7:R6, R17:R16
    291                          fill_temp_buffer(PageBuffer[i] + (PageBuffer[i+1]<< 8),(address)); //call asm routine. 
   \                     ??ProgramFlash_10:
   \   000001A4   0192               MOVW    R19:R18, R5:R4
   \   000001A6   01F3               MOVW    R31:R30, R7:R6
   \   000001A8   8100               LD      R16, Z
   \   000001AA   8111               LDD     R17, Z+1
   \   000001AC   ........           CALL    fill_temp_buffer
    292                      }
   \   000001B0   9602               ADIW    R25:R24, 2
   \   000001B2   E002               LDI     R16, 2
   \   000001B4   0E40               ADD     R4, R16
   \   000001B6   E000               LDI     R16, 0
   \   000001B8   1E50               ADC     R5, R16
   \   000001BA   E002               LDI     R16, 2
   \   000001BC   0E60               ADD     R6, R16
   \   000001BE   E000               LDI     R16, 0
   \   000001C0   1E70               ADC     R7, R16
   \   000001C2   1588               CP      R24, R8
   \   000001C4   0599               CPC     R25, R9
   \   000001C6   F370               BRCS    ??ProgramFlash_10
    293                      write_page(Addr, (1<<PGWRT) + (1<<SPMEN));                  //Perform page write
   \                     ??ProgramFlash_9:
   \   000001C8   E025               LDI     R18, 5
   \   000001CA   0185               MOVW    R17:R16, R11:R10
   \   000001CC   ........           CALL    write_page
    294                      write_page(Addr, (1<<REENABLE_RWW_BIT) + (1<<SPMEN));       //Re-enable the RWW section
   \   000001D0   E121               LDI     R18, 17
   \   000001D2   0185               MOVW    R17:R16, R11:R10
   \   000001D4   ........           CALL    write_page
    295                      
    296                      for (i = 0; i < Nobytes; Addr+=2) {         // check the whole buffer
   \   000001D8   E080               LDI     R24, 0
   \   000001DA   E090               LDI     R25, 0
   \   000001DC   2D08               MOV     R16, R8
   \   000001DE   2909               OR      R16, R9
   \   000001E0   F1B1               BREQ    ??ProgramFlash_3
   \   000001E2   ....               LDI     R16, LOW(PageBuffer)
   \   000001E4   ....               LDI     R17, (PageBuffer) >> 8
   \   000001E6   0128               MOVW    R5:R4, R17:R16
   \   000001E8   E002               LDI     R16, 2
   \   000001EA   2E60               MOV     R6, R16
    297                        intval = read_program_memory(Addr,0x00);
   \                     ??ProgramFlash_11:
   \   000001EC   E020               LDI     R18, 0
   \   000001EE   0185               MOVW    R17:R16, R11:R10
   \   000001F0   ........           CALL    read_program_memory
    298                        if (PageBuffer[i++] != (intval & 0xff)) {
   \   000001F4   9602               ADIW    R25:R24, 2
   \   000001F6   01F2               MOVW    R31:R30, R5:R4
   \   000001F8   8140               LD      R20, Z
   \   000001FA   E050               LDI     R21, 0
   \   000001FC   1740               CP      R20, R16
   \   000001FE   4050               SBCI    R21, 0
   \   00000200   F061               BREQ    ??ProgramFlash_12
    299                            UART[ch].pTxBuffer[UART[ch].TxFirst-1] = FLASH_PROG_ERROR;       // compare error
   \   00000202   912D               LD      R18, X+
   \   00000204   913C               LD      R19, X
   \   00000206   9711               SBIW    R27:R26, 1
   \   00000208   01FD               MOVW    R31:R30, R27:R26
   \   0000020A   8142               LDD     R20, Z+2
   \   0000020C   8153               LDD     R21, Z+3
   \   0000020E   0F24               ADD     R18, R20
   \   00000210   1F35               ADC     R19, R21
   \   00000212   5021               SUBI    R18, 1
   \   00000214   4030               SBCI    R19, 0
   \   00000216   01F9               MOVW    R31:R30, R19:R18
   \   00000218   8260               ST      Z, R6
    300                        }
    301                        if (PageBuffer[i++] != ((intval>>8) & 0xff)) {
   \                     ??ProgramFlash_12:
   \   0000021A   01F2               MOVW    R31:R30, R5:R4
   \   0000021C   8121               LDD     R18, Z+1
   \   0000021E   E030               LDI     R19, 0
   \   00000220   1721               CP      R18, R17
   \   00000222   4030               SBCI    R19, 0
   \   00000224   F061               BREQ    ??ProgramFlash_13
    302                            UART[ch].pTxBuffer[UART[ch].TxFirst-1] = FLASH_PROG_ERROR;       // compare error
   \   00000226   910D               LD      R16, X+
   \   00000228   911C               LD      R17, X
   \   0000022A   9711               SBIW    R27:R26, 1
   \   0000022C   01FD               MOVW    R31:R30, R27:R26
   \   0000022E   8122               LDD     R18, Z+2
   \   00000230   8133               LDD     R19, Z+3
   \   00000232   0F02               ADD     R16, R18
   \   00000234   1F13               ADC     R17, R19
   \   00000236   5001               SUBI    R16, 1
   \   00000238   4010               SBCI    R17, 0
   \   0000023A   01F8               MOVW    R31:R30, R17:R16
   \   0000023C   8260               ST      Z, R6
    303                        }
    304                      }
   \                     ??ProgramFlash_13:
   \   0000023E   0CA6               ADD     R10, R6
   \   00000240   E000               LDI     R16, 0
   \   00000242   1EB0               ADC     R11, R16
   \   00000244   0C46               ADD     R4, R6
   \   00000246   1E50               ADC     R5, R16
   \   00000248   1588               CP      R24, R8
   \   0000024A   0599               CPC     R25, R9
   \   0000024C   F278               BRCS    ??ProgramFlash_11
    305                  }  
    306              }
    307                  
    308              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 1) ;      // length of data block lb
   \                     ??ProgramFlash_3:
   \   0000024E   01FD               MOVW    R31:R30, R27:R26
   \   00000250   8102               LDD     R16, Z+2
   \   00000252   190C               SUB     R16, R12
   \   00000254   950A               DEC     R16
   \   00000256   91ED               LD      R30, X+
   \   00000258   91FC               LD      R31, X
   \   0000025A   0DEC               ADD     R30, R12
   \   0000025C   1DFD               ADC     R31, R13
   \   0000025E   8300               ST      Z, R16
    309          }
   \   00000260   9189               LD      R24, Y+
   \   00000262   9199               LD      R25, Y+
   \   00000264   91A9               LD      R26, Y+
   \   00000266   91B9               LD      R27, Y+
   \   00000268   9049               LD      R4, Y+
   \   0000026A   9059               LD      R5, Y+
   \   0000026C   9069               LD      R6, Y+
   \   0000026E   9079               LD      R7, Y+
   \   00000270   9089               LD      R8, Y+
   \   00000272   9099               LD      R9, Y+
   \   00000274   90A9               LD      R10, Y+
   \   00000276   90B9               LD      R11, Y+
   \   00000278   90C9               LD      R12, Y+
   \   0000027A   90D9               LD      R13, Y+
   \   0000027C   9508               RET
   \   0000027E                      REQUIRE _A_RAMPZ
    310          
    311          /*************************************************************************
    312          *
    313          * Read Flash 
    314          *
    315          *   Not implmented in this bootloader
    316          *
    317          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    318          void ReadFlash(char ch, unsigned short pointer) {
   \                     ReadFlash:
   \   00000000   929A               ST      -Y, R9
   \   00000002   928A               ST      -Y, R8
   \   00000004   927A               ST      -Y, R7
   \   00000006   926A               ST      -Y, R6
   \   00000008   925A               ST      -Y, R5
   \   0000000A   924A               ST      -Y, R4
   \   0000000C   93BA               ST      -Y, R27
   \   0000000E   93AA               ST      -Y, R26
   \   00000010   939A               ST      -Y, R25
   \   00000012   938A               ST      -Y, R24
   \   00000014                      REQUIRE ?Register_R4_is_cg_reg
   \   00000014                      REQUIRE ?Register_R5_is_cg_reg
   \   00000014                      REQUIRE ?Register_R6_is_cg_reg
   \   00000014                      REQUIRE ?Register_R7_is_cg_reg
   \   00000014                      REQUIRE ?Register_R8_is_cg_reg
   \   00000014                      REQUIRE ?Register_R9_is_cg_reg
    319          
    320              unsigned short ntna, address, Nobytes, i, intval;
    321              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   00000014   E11D               LDI     R17, 29
   \   00000016   9F01               MUL     R16, R17
   \   00000018   ....               LDI     R26, LOW(UART)
   \   0000001A   ....               LDI     R27, (UART) >> 8
   \   0000001C   0DA0               ADD     R26, R0
   \   0000001E   1DB1               ADC     R27, R1
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   E001               LDI     R16, 1
   \   00000024   8F04               STD     Z+28, R16
    322              
    323              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANP1_REP_FLASH_READ;     
   \   00000026   8100               LD      R16, Z
   \   00000028   8111               LDD     R17, Z+1
   \   0000002A   8142               LDD     R20, Z+2
   \   0000002C   8153               LDD     R21, Z+3
   \   0000002E   0F04               ADD     R16, R20
   \   00000030   1F15               ADC     R17, R21
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   EF07               LDI     R16, 247
   \   00000036   8300               ST      Z, R16
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   8102               LDD     R16, Z+2
   \   0000003C   8113               LDD     R17, Z+3
   \   0000003E   5F0F               SUBI    R16, 255
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   8302               STD     Z+2, R16
   \   00000044   8313               STD     Z+3, R17
    324              ntna = UART[ch].TxFirst++ ;                               /* remember index */
   \   00000046   0148               MOVW    R9:R8, R17:R16
   \   00000048   5F0F               SUBI    R16, 255
   \   0000004A   4F1F               SBCI    R17, 255
   \   0000004C   8302               STD     Z+2, R16
   \   0000004E   8313               STD     Z+3, R17
    325              
    326              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MySecAddress;           // unit adddress sec
   \   00000050   9140....           LDS     R20, MySecAddress
   \   00000054   8100               LD      R16, Z
   \   00000056   8111               LDD     R17, Z+1
   \   00000058   8162               LDD     R22, Z+2
   \   0000005A   8173               LDD     R23, Z+3
   \   0000005C   0F06               ADD     R16, R22
   \   0000005E   1F17               ADC     R17, R23
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   8340               ST      Z, R20
   \   00000064   01FD               MOVW    R31:R30, R27:R26
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    327             
    328              for (i = 0; i<4; i++) {
   \   00000072   01C9               MOVW    R25:R24, R19:R18
   \   00000074   E044               LDI     R20, 4
    329                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer+i] ; // ansver with address and nob
   \                     ??ReadFlash_0:
   \   00000076   8504               LDD     R16, Z+12
   \   00000078   8515               LDD     R17, Z+13
   \   0000007A   0F08               ADD     R16, R24
   \   0000007C   1F19               ADC     R17, R25
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   8150               LD      R21, Z
   \   00000082   910D               LD      R16, X+
   \   00000084   911C               LD      R17, X
   \   00000086   9711               SBIW    R27:R26, 1
   \   00000088   01FD               MOVW    R31:R30, R27:R26
   \   0000008A   8162               LDD     R22, Z+2
   \   0000008C   8173               LDD     R23, Z+3
   \   0000008E   0F06               ADD     R16, R22
   \   00000090   1F17               ADC     R17, R23
   \   00000092   01F8               MOVW    R31:R30, R17:R16
   \   00000094   8350               ST      Z, R21
   \   00000096   01FD               MOVW    R31:R30, R27:R26
   \   00000098   8102               LDD     R16, Z+2
   \   0000009A   8113               LDD     R17, Z+3
   \   0000009C   5F0F               SUBI    R16, 255
   \   0000009E   4F1F               SBCI    R17, 255
   \   000000A0   8302               STD     Z+2, R16
   \   000000A2   8313               STD     Z+3, R17
    330              }
   \   000000A4   9601               ADIW    R25:R24, 1
   \   000000A6   954A               DEC     R20
   \   000000A8   F731               BRNE    ??ReadFlash_0
    331            
    332              address = UART[ch].pRxBuffer[pointer] | (UART[ch].pRxBuffer[pointer+1]<<8); // save address
   \   000000AA   8504               LDD     R16, Z+12
   \   000000AC   8515               LDD     R17, Z+13
   \   000000AE   01F8               MOVW    R31:R30, R17:R16
   \   000000B0   0FE2               ADD     R30, R18
   \   000000B2   1FF3               ADC     R31, R19
   \   000000B4   8180               LD      R24, Z
   \   000000B6   8191               LDD     R25, Z+1
    333              pointer += 2;
   \   000000B8   5F2E               SUBI    R18, 254
   \   000000BA   4F3F               SBCI    R19, 255
    334              Nobytes = UART[ch].pRxBuffer[pointer] | (UART[ch].pRxBuffer[pointer+1]<<8); // save address
   \   000000BC   0F02               ADD     R16, R18
   \   000000BE   1F13               ADC     R17, R19
   \   000000C0   01F8               MOVW    R31:R30, R17:R16
   \   000000C2   8060               LD      R6, Z
   \   000000C4   8071               LDD     R7, Z+1
    335              pointer += 2;
    336              if (Nobytes > PAGESIZE) {
   \   000000C6   E001               LDI     R16, 1
   \   000000C8   1660               CP      R6, R16
   \   000000CA   0670               CPC     R7, R16
   \   000000CC   F098               BRCS    ??ReadFlash_1
    337                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = FLASH_PROG_PAGEF ;               // Answer with Page fault
   \   000000CE   910D               LD      R16, X+
   \   000000D0   911C               LD      R17, X
   \   000000D2   9711               SBIW    R27:R26, 1
   \   000000D4   01FD               MOVW    R31:R30, R27:R26
   \   000000D6   8122               LDD     R18, Z+2
   \   000000D8   8133               LDD     R19, Z+3
   \   000000DA   0F02               ADD     R16, R18
   \   000000DC   1F13               ADC     R17, R19
   \   000000DE   01F8               MOVW    R31:R30, R17:R16
   \   000000E0   E001               LDI     R16, 1
   \   000000E2   8300               ST      Z, R16
   \   000000E4   01FD               MOVW    R31:R30, R27:R26
   \   000000E6   8102               LDD     R16, Z+2
   \   000000E8   8113               LDD     R17, Z+3
   \   000000EA   5F0F               SUBI    R16, 255
   \   000000EC   4F1F               SBCI    R17, 255
   \   000000EE   8302               STD     Z+2, R16
   \   000000F0   8313               STD     Z+3, R17
   \   000000F2   C03D               RJMP    ??ReadFlash_2
    338              } else {
    339                #ifdef LARGE_MEMORY
    340                if(address >= 0x7FFF){
   \                     ??ReadFlash_1:
   \   000000F4   3F8F               CPI     R24, 255
   \   000000F6   E70F               LDI     R16, 127
   \   000000F8   0790               CPC     R25, R16
   \   000000FA   F010               BRCS    ??ReadFlash_3
    341                  RAMPZ = (1<<RAMPZ0);
   \   000000FC   E001               LDI     R16, 1
   \   000000FE   C001               RJMP    ??ReadFlash_4
    342                } else {
    343                  RAMPZ = 0;
   \                     ??ReadFlash_3:
   \   00000100   E000               LDI     R16, 0
   \                     ??ReadFlash_4:
   \   00000102   BF0B               OUT     0x3B, R16
    344                }
    345                #endif            
    346                address = address<<1;             // convert from byte address to word address
   \   00000104   0F88               LSL     R24
   \   00000106   1F99               ROL     R25
    347                for (i = 0; i < Nobytes; i+=2, address+=2) {   // receive the whole buffer
   \   00000108   2444               CLR     R4
   \   0000010A   2455               CLR     R5
   \   0000010C   2D06               MOV     R16, R6
   \   0000010E   2907               OR      R16, R7
   \   00000110   F171               BREQ    ??ReadFlash_2
    348                   intval = read_program_memory(address,0x00);
   \                     ??ReadFlash_5:
   \   00000112   E020               LDI     R18, 0
   \   00000114   018C               MOVW    R17:R16, R25:R24
   \   00000116   ........           CALL    read_program_memory
   \   0000011A   2F31               MOV     R19, R17
    349                   UART[ch].pTxBuffer[UART[ch].TxFirst++] = intval & 0xff;
   \   0000011C   2F40               MOV     R20, R16
   \   0000011E   910D               LD      R16, X+
   \   00000120   911C               LD      R17, X
   \   00000122   9711               SBIW    R27:R26, 1
   \   00000124   01FD               MOVW    R31:R30, R27:R26
   \   00000126   8162               LDD     R22, Z+2
   \   00000128   8173               LDD     R23, Z+3
   \   0000012A   0F06               ADD     R16, R22
   \   0000012C   1F17               ADC     R17, R23
   \   0000012E   01F8               MOVW    R31:R30, R17:R16
   \   00000130   8340               ST      Z, R20
   \   00000132   01FD               MOVW    R31:R30, R27:R26
   \   00000134   8102               LDD     R16, Z+2
   \   00000136   8113               LDD     R17, Z+3
   \   00000138   5F0F               SUBI    R16, 255
   \   0000013A   4F1F               SBCI    R17, 255
   \   0000013C   8302               STD     Z+2, R16
   \   0000013E   8313               STD     Z+3, R17
    350                   UART[ch].pTxBuffer[UART[ch].TxFirst++] = (intval>>8) & 0xff;
   \   00000140   8100               LD      R16, Z
   \   00000142   8111               LDD     R17, Z+1
   \   00000144   8142               LDD     R20, Z+2
   \   00000146   8153               LDD     R21, Z+3
   \   00000148   0F04               ADD     R16, R20
   \   0000014A   1F15               ADC     R17, R21
   \   0000014C   01F8               MOVW    R31:R30, R17:R16
   \   0000014E   8330               ST      Z, R19
   \   00000150   01FD               MOVW    R31:R30, R27:R26
   \   00000152   8102               LDD     R16, Z+2
   \   00000154   8113               LDD     R17, Z+3
   \   00000156   5F0F               SUBI    R16, 255
   \   00000158   4F1F               SBCI    R17, 255
   \   0000015A   8302               STD     Z+2, R16
   \   0000015C   8313               STD     Z+3, R17
    351                }
   \   0000015E   E002               LDI     R16, 2
   \   00000160   0E40               ADD     R4, R16
   \   00000162   E000               LDI     R16, 0
   \   00000164   1E50               ADC     R5, R16
   \   00000166   9602               ADIW    R25:R24, 2
   \   00000168   1446               CP      R4, R6
   \   0000016A   0457               CPC     R5, R7
   \   0000016C   F290               BRCS    ??ReadFlash_5
    352              }
    353              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 1) ;      // length of data block lb
   \                     ??ReadFlash_2:
   \   0000016E   01FD               MOVW    R31:R30, R27:R26
   \   00000170   8102               LDD     R16, Z+2
   \   00000172   1908               SUB     R16, R8
   \   00000174   950A               DEC     R16
   \   00000176   91ED               LD      R30, X+
   \   00000178   91FC               LD      R31, X
   \   0000017A   0DE8               ADD     R30, R8
   \   0000017C   1DF9               ADC     R31, R9
   \   0000017E   8300               ST      Z, R16
    354          }
   \   00000180   9189               LD      R24, Y+
   \   00000182   9199               LD      R25, Y+
   \   00000184   91A9               LD      R26, Y+
   \   00000186   91B9               LD      R27, Y+
   \   00000188   9049               LD      R4, Y+
   \   0000018A   9059               LD      R5, Y+
   \   0000018C   9069               LD      R6, Y+
   \   0000018E   9079               LD      R7, Y+
   \   00000190   9089               LD      R8, Y+
   \   00000192   9099               LD      R9, Y+
   \   00000194   9508               RET
   \   00000196                      REQUIRE _A_RAMPZ
    355          
    356          /*************************************************************************
    357          *
    358          *  Exit bootloader program
    359          *
    360          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    361          void ExitBootloader(char ch) {   
   \                     ExitBootloader:
    362          
    363          
    364              while ( (EECR & 1<<EEWE) != 0 ) //chech if EEPROM is ready
   \                     ??ExitBootloader_0:
   \   00000000   99E1               SBIC    0x1C, 0x01
   \   00000002   CFFE               RJMP    ??ExitBootloader_0
    365                  ;
    366              EEARL = (0x0fff & 0xff);
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   BB0E               OUT     0x1E, R16
    367              EEARH = (0x0fff >> 8);
   \   00000008   E00F               LDI     R16, 15
   \   0000000A   BB0F               OUT     0x1F, R16
    368              EEDR = 0xaa;
   \   0000000C   EA0A               LDI     R16, 170
   \   0000000E   BB0D               OUT     0x1D, R16
    369              EECR |= (1<<EEMWE);
   \   00000010   9AE2               SBI     0x1C, 0x02
    370              EECR |= (1<<EEWE);
   \   00000012   9AE1               SBI     0x1C, 0x01
    371              while (EECR & (1<<EEWE))
   \                     ??ExitBootloader_1:
   \   00000014   99E1               SBIC    0x1C, 0x01
   \   00000016   CFFE               RJMP    ??ExitBootloader_1
    372                ;
    373                
    374              WDTCR = 0x08;               //Start watchdog to genetate restart
   \   00000018   E008               LDI     R16, 8
   \   0000001A   BD01               OUT     0x21, R16
    375          }
   \   0000001C   9508               RET
   \   0000001E                      REQUIRE _A_EECR
   \   0000001E                      REQUIRE _A_EEAR
   \   0000001E                      REQUIRE _A_EEDR
   \   0000001E                      REQUIRE _A_WDTCR
    376          
    377          
    378          /*************************************************************************
    379          *
    380          *  Transmitting data on USARTs
    381          *
    382          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    383          void SendPacketUart(char ch) {
   \                     SendPacketUart:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006   2F80               MOV     R24, R16
    384              unsigned short delay, cnt;
    385              
    386              for (delay = 0; delay < 0xffff; delay++) {
   \   00000008   EFEF               LDI     R30, 255
   \   0000000A   EFFF               LDI     R31, 255
    387                  asm("nop") ;
   \                     ??SendPacketUart_0:
   \   0000000C   0000               nop
    388                  cnt++;
    389              }
   \   0000000E   9731               SBIW    R31:R30, 1
   \   00000010   F7E9               BRNE    ??SendPacketUart_0
    390          
    391              while ( UART[ch].TxCount > 0 ) {               // Any characters to send?
   \                     ??SendPacketUart_1:
   \   00000012   E10D               LDI     R16, 29
   \   00000014   9F80               MUL     R24, R16
   \   00000016   ....               LDI     R26, LOW(UART)
   \   00000018   ....               LDI     R27, (UART) >> 8
   \   0000001A   0DA0               ADD     R26, R0
   \   0000001C   1DB1               ADC     R27, R1
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   8106               LDD     R16, Z+6
   \   00000022   8117               LDD     R17, Z+7
   \   00000024   2B01               OR      R16, R17
   \   00000026   F101               BREQ    ??SendPacketUart_2
    392                  sendchar(ch, UART[ch].pTxBuffer[ UART[ch].TxLast ]);  // Send a character
   \   00000028   91ED               LD      R30, X+
   \   0000002A   91FC               LD      R31, X
   \   0000002C   9613               ADIW    R27:R26, 3
   \   0000002E   910D               LD      R16, X+
   \   00000030   911C               LD      R17, X
   \   00000032   9715               SBIW    R27:R26, 5
   \   00000034   0FE0               ADD     R30, R16
   \   00000036   1FF1               ADC     R31, R17
   \   00000038   8110               LD      R17, Z
   \   0000003A   2F08               MOV     R16, R24
   \   0000003C   ........           CALL    sendchar
    393          
    394                  if ((++UART[ch].TxLast)> TXSIZE_UART ) {     // End of buffer?
   \   00000040   01FD               MOVW    R31:R30, R27:R26
   \   00000042   8104               LDD     R16, Z+4
   \   00000044   8115               LDD     R17, Z+5
   \   00000046   5F0F               SUBI    R16, 255
   \   00000048   4F1F               SBCI    R17, 255
   \   0000004A   8304               STD     Z+4, R16
   \   0000004C   8315               STD     Z+5, R17
   \   0000004E   350F               CPI     R16, 95
   \   00000050   4011               SBCI    R17, 1
   \   00000052   F018               BRCS    ??SendPacketUart_3
    395                      UART[ch].TxLast = 0 ;                     // yes, reset pointer
   \   00000054   E000               LDI     R16, 0
   \   00000056   8304               STD     Z+4, R16
   \   00000058   8305               STD     Z+5, R16
    396                  }
    397                  UART[ch].TxCount--; 
   \                     ??SendPacketUart_3:
   \   0000005A   8106               LDD     R16, Z+6
   \   0000005C   8117               LDD     R17, Z+7
   \   0000005E   5001               SUBI    R16, 1
   \   00000060   4010               SBCI    R17, 0
   \   00000062   8306               STD     Z+6, R16
   \   00000064   8317               STD     Z+7, R17
   \   00000066   CFD5               RJMP    ??SendPacketUart_1
    398              } 
    399              if (ch == 0){                                           // Turn on TXE for channel
   \                     ??SendPacketUart_2:
   \   00000068   2388               TST     R24
   \   0000006A   F431               BRNE    ??SendPacketUart_4
    400                  PORTE &= ~0x04 ;                                     // TXE0 off
   \   0000006C   981A               CBI     0x03, 0x02
    401                  ClrBit(PORTG, 0x10) ;                 //Light off on alarm lamp
   \   0000006E   91000065           LDS     R16, 101
   \   00000072   7E0F               ANDI    R16, 0xEF
   \   00000074   93000065           STS     101, R16
    402              } else if (ch ==1){
    403           //       PORTE &= ~0x08 ;                                     // TXE1 off
    404              }
    405              cnt = 0;
    406          }
   \                     ??SendPacketUart_4:
   \   00000078   9189               LD      R24, Y+
   \   0000007A   91A9               LD      R26, Y+
   \   0000007C   91B9               LD      R27, Y+
   \   0000007E   9508               RET
   \   00000080                      REQUIRE _A_PORTE
   \   00000080                      REQUIRE _A_PORTG
    407          
    408          /*************************************************************************
    409          *
    410          *  Receive data on USARTs
    411          *
    412          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    413          void ReceivePacketUart(char ch) {
   \                     ReceivePacketUart:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   2E39               MOV     R3, R25
   \   00000006   2F78               MOV     R23, R24
   \   00000008   2F20               MOV     R18, R16
    414          
    415              switch (UART[ch].RxState) {                  // check status 
   \   0000000A   E10D               LDI     R16, 29
   \   0000000C   9F20               MUL     R18, R16
   \   0000000E   ....               LDI     R26, LOW(UART)
   \   00000010   ....               LDI     R27, (UART) >> 8
   \   00000012   0DA0               ADD     R26, R0
   \   00000014   1DB1               ADC     R27, R1
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8904               LDD     R16, Z+20
   \   0000001A   2300               TST     R16
   \   0000001C   F409               BRNE    $+2+2
   \   0000001E   C066               RJMP    ??ReceivePacketUart_0
   \   00000020   950A               DEC     R16
   \   00000022   F031               BREQ    ??ReceivePacketUart_1
   \   00000024   950A               DEC     R16
   \   00000026   F0F1               BREQ    ??ReceivePacketUart_2
   \   00000028   5008               SUBI    R16, 8
   \   0000002A   F409               BRNE    $+2+2
   \   0000002C   C05F               RJMP    ??ReceivePacketUart_0
   \   0000002E   C05C               RJMP    ??ReceivePacketUart_3
    416              case SYNC :
    417                  // all functionallity in inerrupt routine 
    418                  break ;
    419              case HEADER :
    420                   if (UART[ch].RxLast >= 3) {             // receive header 
   \                     ??ReceivePacketUart_1:
   \   00000030   8980               LDD     R24, Z+16
   \   00000032   8991               LDD     R25, Z+17
   \   00000034   9703               SBIW    R25:R24, 3
   \   00000036   F408               BRCC    $+2+2
   \   00000038   C059               RJMP    ??ReceivePacketUart_0
    421                    UART[ch].RxPacklen = (UART[ch].pRxBuffer[2] * 256)+ UART[ch].pRxBuffer[3] ; // Find length of package
   \   0000003A   8504               LDD     R16, Z+12
   \   0000003C   85F5               LDD     R31, Z+13
   \   0000003E   2FE0               MOV     R30, R16
   \   00000040   8152               LDD     R21, Z+2
   \   00000042   8103               LDD     R16, Z+3
   \   00000044   2F40               MOV     R20, R16
   \   00000046   01FD               MOVW    R31:R30, R27:R26
   \   00000048   8F00               STD     Z+24, R16
   \   0000004A   8F51               STD     Z+25, R21
    422                    if (UART[ch].RxPacklen >= MIN_PACK_LEN) {
   \   0000004C   01CA               MOVW    R25:R24, R21:R20
   \   0000004E   9707               SBIW    R25:R24, 7
   \   00000050   F408               BRCC    $+2+2
   \   00000052   C04A               RJMP    ??ReceivePacketUart_3
    423                      UART[ch].RxState = RECEIVE ;       // Header ok go to data receive state
   \   00000054   E002               LDI     R16, 2
   \   00000056   8B04               STD     Z+20, R16
    424                      UART[ch].RxCount = UART[ch].RxLast + 1 ;    // Set receive counter
   \   00000058   8980               LDD     R24, Z+16
   \   0000005A   8991               LDD     R25, Z+17
   \   0000005C   9601               ADIW    R25:R24, 1
   \   0000005E   8B82               STD     Z+18, R24
   \   00000060   8B93               STD     Z+19, R25
   \   00000062   C044               RJMP    ??ReceivePacketUart_0
    425                    } else {
    426                      GoToSyncUART(ch) ;                        // go to sync modus for recive
    427                    }
    428                  }
    429                  break ;
    430              case RECEIVE :
    431                  if (++UART[ch].RxCount >= UART[ch].RxPacklen) {
   \                     ??ReceivePacketUart_2:
   \   00000064   8902               LDD     R16, Z+18
   \   00000066   8913               LDD     R17, Z+19
   \   00000068   5F0F               SUBI    R16, 255
   \   0000006A   4F1F               SBCI    R17, 255
   \   0000006C   8B02               STD     Z+18, R16
   \   0000006E   8B13               STD     Z+19, R17
   \   00000070   8D40               LDD     R20, Z+24
   \   00000072   8D51               LDD     R21, Z+25
   \   00000074   1704               CP      R16, R20
   \   00000076   0715               CPC     R17, R21
   \   00000078   F1C8               BRCS    ??ReceivePacketUart_0
    432                     if ((UART[ch].pRxBuffer[UART[ch].RxPacklen -1]) == ANPRO1_EOT) {
   \   0000007A   010A               MOVW    R1:R0, R21:R20
   \   0000007C   961C               ADIW    R27:R26, 12
   \   0000007E   91ED               LD      R30, X+
   \   00000080   91FC               LD      R31, X
   \   00000082   971D               SBIW    R27:R26, 13
   \   00000084   0FE4               ADD     R30, R20
   \   00000086   1FF5               ADC     R31, R21
   \   00000088   9102               LD      R16, -Z
   \   0000008A   3003               CPI     R16, 3
   \   0000008C   F569               BRNE    ??ReceivePacketUart_3
    433                         if (CalcDSRxChecksum(ch, UART[ch].RxPacklen-2)) {
   \   0000008E   EF0E               LDI     R16, 254
   \   00000090   0E00               ADD     R0, R16
   \   00000092   EF0F               LDI     R16, 255
   \   00000094   1E10               ADC     R1, R16
   \   00000096   E060               LDI     R22, 0
   \   00000098   01FD               MOVW    R31:R30, R27:R26
   \   0000009A   8544               LDD     R20, Z+12
   \   0000009C   8555               LDD     R21, Z+13
   \   0000009E   2D00               MOV     R16, R0
   \   000000A0   2901               OR      R16, R1
   \   000000A2   F079               BREQ    ??ReceivePacketUart_4
   \   000000A4   018A               MOVW    R17:R16, R21:R20
   \   000000A6   01C0               MOVW    R25:R24, R1:R0
   \   000000A8   ....               LDI     R19, (crc) >> 16
   \                     ??ReceivePacketUart_5:
   \   000000AA   01F8               MOVW    R31:R30, R17:R16
   \   000000AC   9021               LD      R2, Z+
   \   000000AE   018F               MOVW    R17:R16, R31:R30
   \   000000B0   2562               EOR     R22, R2
   \   000000B2   2FE6               MOV     R30, R22
   \   000000B4   E0F0               LDI     R31, 0
   \   000000B6   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   000000B8   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   000000BA   BF3B               OUT     0x3B, R19
   \   000000BC   9166               ELPM    R22, Z
   \   000000BE   9701               SBIW    R25:R24, 1
   \   000000C0   F7A1               BRNE    ??ReceivePacketUart_5
   \                     ??ReceivePacketUart_4:
   \   000000C2   01FA               MOVW    R31:R30, R21:R20
   \   000000C4   0DE0               ADD     R30, R0
   \   000000C6   1DF1               ADC     R31, R1
   \   000000C8   8100               LD      R16, Z
   \   000000CA   1760               CP      R22, R16
   \   000000CC   F469               BRNE    ??ReceivePacketUart_3
    434                            if (UART[ch].pRxBuffer[0] == MyPriAddress) {            // broadcast
   \   000000CE   01FA               MOVW    R31:R30, R21:R20
   \   000000D0   8100               LD      R16, Z
   \   000000D2   9110....           LDS     R17, MyPriAddress
   \   000000D6   1701               CP      R16, R17
   \   000000D8   F439               BRNE    ??ReceivePacketUart_3
    435                                  hostAddress = UART[ch].pRxBuffer[1];            // address to sender (host)
   \   000000DA   8101               LDD     R16, Z+1
   \   000000DC   9300....           STS     hostAddress, R16
    436                                  UART[ch].RxState = HANDLE ;                     // Package OK
   \   000000E0   01FD               MOVW    R31:R30, R27:R26
   \   000000E2   E00A               LDI     R16, 10
   \   000000E4   8B04               STD     Z+20, R16
   \   000000E6   C002               RJMP    ??ReceivePacketUart_0
    437                              } else {
    438                                  GoToSyncUART(ch) ;                             // go to sync modus for recive
    439                              }
    440                          } else {
    441                              GoToSyncUART(ch) ;                                // go to sync modus for recive
    442                          }
    443                      } else {
    444                          GoToSyncUART(ch) ;                                    // go to sync modus for recive
    445                      }
    446                  }
    447                  break ;
    448              case HANDLE :
    449                  break;
    450              default :
    451                  GoToSyncUART(ch) ;                                            // go to sync modus for recive
   \                     ??ReceivePacketUart_3:
   \   000000E8   2F02               MOV     R16, R18
   \   000000EA   ....               RCALL   GoToSyncUART
    452                  break ;
    453              }                                                           // end switch 
    454              if (++UART[ch].RxLast >= RXSIZE_UART) {                     // check pointer 
   \                     ??ReceivePacketUart_0:
   \   000000EC   01FD               MOVW    R31:R30, R27:R26
   \   000000EE   8900               LDD     R16, Z+16
   \   000000F0   8911               LDD     R17, Z+17
   \   000000F2   5F0F               SUBI    R16, 255
   \   000000F4   4F1F               SBCI    R17, 255
   \   000000F6   8B00               STD     Z+16, R16
   \   000000F8   8B11               STD     Z+17, R17
   \   000000FA   350E               CPI     R16, 94
   \   000000FC   4011               SBCI    R17, 1
   \   000000FE   F018               BRCS    ??ReceivePacketUart_6
    455                  UART[ch].RxLast = 0;                                     // reset pointer
   \   00000100   E000               LDI     R16, 0
   \   00000102   8B00               STD     Z+16, R16
   \   00000104   8B01               STD     Z+17, R16
    456              }
    457          }
   \                     ??ReceivePacketUart_6:
   \   00000106   2F87               MOV     R24, R23
   \   00000108   2D93               MOV     R25, R3
   \   0000010A   91A9               LD      R26, Y+
   \   0000010C   91B9               LD      R27, Y+
   \   0000010E   9508               RET
    458          
    459          /*************************************************************************
    460          *
    461          * Calculate tx checksum (header and package) using Dallas Semiconductor one-wire CRC
    462          *
    463          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    464          char CalcDSTxChecksum(char ch, unsigned short len) {
   \                     CalcDSTxChecksum:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
   \   00000004   2F10               MOV     R17, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    465          
    466              unsigned short  cnt ;
    467              unsigned char   csum ;
    468          
    469              csum = 0 ;
   \   00000008   E000               LDI     R16, 0
    470              for (cnt = 2 ; cnt < len ; cnt++) {
   \   0000000A   3023               CPI     R18, 3
   \   0000000C   4030               SBCI    R19, 0
   \   0000000E   F0A0               BRCS    ??CalcDSTxChecksum_0
   \   00000010   E12D               LDI     R18, 29
   \   00000012   9F12               MUL     R17, R18
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   81A0               LD      R26, Z
   \   0000001C   81B1               LDD     R27, Z+1
   \   0000001E   9612               ADIW    R27:R26, 2
   \   00000020   9702               SBIW    R25:R24, 2
   \   00000022   ....               LDI     R19, (crc) >> 16
    471                  csum = crc[csum ^ UART[ch].pTxBuffer[cnt]] ;
   \                     ??CalcDSTxChecksum_1:
   \   00000024   2FE0               MOV     R30, R16
   \   00000026   E0F0               LDI     R31, 0
   \   00000028   910D               LD      R16, X+
   \   0000002A   27E0               EOR     R30, R16
   \   0000002C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000030   BF3B               OUT     0x3B, R19
   \   00000032   9106               ELPM    R16, Z
    472              }
   \   00000034   9701               SBIW    R25:R24, 1
   \   00000036   F7B1               BRNE    ??CalcDSTxChecksum_1
    473              return csum ;
   \                     ??CalcDSTxChecksum_0:
   \   00000038   01CA               MOVW    R25:R24, R21:R20
   \   0000003A   01DB               MOVW    R27:R26, R23:R22
   \   0000003C   9508               RET
    474          }
    475          
    476          /*************************************************************************
    477          *
    478          * Calculate rx packet checksum (header and package) using Dallas Semiconductor one-wire CRC
    479          *
    480          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    481          short CalcDSRxChecksum(char ch, unsigned short len) {
   \                     CalcDSRxChecksum:
   \   00000000   939A               ST      -Y, R25
   \   00000002   2F58               MOV     R21, R24
   \   00000004   0119               MOVW    R3:R2, R19:R18
    482          
    483              unsigned short  cnt ;
    484              unsigned char   csum ;
    485          
    486              csum = 0 ;
   \   00000006   E040               LDI     R20, 0
   \   00000008   E11D               LDI     R17, 29
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   ....               LDI     R30, LOW(UART)
   \   0000000E   ....               LDI     R31, (UART) >> 8
   \   00000010   0DE0               ADD     R30, R0
   \   00000012   1DF1               ADC     R31, R1
   \   00000014   8564               LDD     R22, Z+12
   \   00000016   8575               LDD     R23, Z+13
   \   00000018   2923               OR      R18, R3
   \   0000001A   F081               BREQ    ??CalcDSRxChecksum_0
   \   0000001C   018B               MOVW    R17:R16, R23:R22
   \   0000001E   2D82               MOV     R24, R2
   \   00000020   2F93               MOV     R25, R19
   \   00000022   ....               LDI     R19, (crc) >> 16
    487              for (cnt=0 ; cnt < len ; cnt++) {
    488                  csum = crc[csum ^ UART[ch].pRxBuffer[cnt]] ;
   \                     ??CalcDSRxChecksum_1:
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   9121               LD      R18, Z+
   \   00000028   018F               MOVW    R17:R16, R31:R30
   \   0000002A   2742               EOR     R20, R18
   \   0000002C   2FE4               MOV     R30, R20
   \   0000002E   E0F0               LDI     R31, 0
   \   00000030   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000032   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000034   BF3B               OUT     0x3B, R19
   \   00000036   9146               ELPM    R20, Z
    489              }
   \   00000038   9701               SBIW    R25:R24, 1
   \   0000003A   F7A1               BRNE    ??CalcDSRxChecksum_1
    490              if (csum == UART[ch].pRxBuffer[len]) {
   \                     ??CalcDSRxChecksum_0:
   \   0000003C   0D62               ADD     R22, R2
   \   0000003E   1D73               ADC     R23, R3
   \   00000040   01FB               MOVW    R31:R30, R23:R22
   \   00000042   8100               LD      R16, Z
   \   00000044   1740               CP      R20, R16
   \   00000046   F411               BRNE    ??CalcDSRxChecksum_2
    491                  return true ;
   \   00000048   E001               LDI     R16, 1
   \   0000004A   C001               RJMP    ??CalcDSRxChecksum_3
    492              } else {
    493                  return false ; 
   \                     ??CalcDSRxChecksum_2:
   \   0000004C   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum_3:
   \   0000004E   E010               LDI     R17, 0
   \   00000050   2F85               MOV     R24, R21
   \   00000052   9199               LD      R25, Y+
   \   00000054   9508               RET
    494              }
    495          }
    496          
    497          /*************************************************************************
    498          *
    499          * Goes to sync mode
    500          *
    501          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    502          __monitor void GoToSyncUART(char ch) {
   \                     GoToSyncUART:
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
    503          
    504              if (ch < 2) {
   \   00000004   3002               CPI     R16, 2
   \   00000006   F458               BRCC    ??GoToSyncUART_0
    505                  UART[ch].SyncCnt = 0 ;                        // ready for sync
   \   00000008   E11D               LDI     R17, 29
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   ....               LDI     R30, LOW(UART)
   \   0000000E   ....               LDI     R31, (UART) >> 8
   \   00000010   0DE0               ADD     R30, R0
   \   00000012   1DF1               ADC     R31, R1
   \   00000014   E000               LDI     R16, 0
   \   00000016   8B05               STD     Z+21, R16
    506                  UART[ch].RxState = SYNC ;
   \   00000018   8B04               STD     Z+20, R16
    507                  UART[ch].RxFirst = 0 ;
   \   0000001A   8706               STD     Z+14, R16
   \   0000001C   8707               STD     Z+15, R16
    508              }
    509          }
   \                     ??GoToSyncUART_0:
   \   0000001E   BF2F               OUT     0x3F, R18
   \   00000020   9508               RET

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   BuildFlashID
      0      2   BuildStatusData
      1      2   CalcDSRxChecksum
      0      2   CalcDSTxChecksum
      3      2   CheckActionUart
        3      2   -> BuildFlashID
        3      2   -> BuildStatusData
        3      2   -> EraseFlash
        3      2   -> ExitBootloader
        3      2   -> ProgramFlash
        3      2   -> ReadFlash
      6      2   EraseFlash
        6      2   -> write_page
      0      2   ExitBootloader
      0      2   GoToSyncUART
     14      2   ProgramFlash
       14      2   -> fill_temp_buffer
       14      2   -> read_program_memory
       14      2   -> write_page
     10      2   ReadFlash
       10      2   -> read_program_memory
      2      2   ReceivePacketUart
        2      2   -> GoToSyncUART
      3      2   SendPacketUart
        3      2   -> sendchar
      0      2   Uart_BuildHeader
      2      2   Uart_BuildTail
        2      2   -> CalcDSTxChecksum
        2      2   -> SendPacketUart
        2      2   -> Uart_BuildHeader
      5      2   UsartCheckPackage
        5      2   -> CheckActionUart
        5      2   -> GoToSyncUART
        5      2   -> Uart_BuildTail


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     206  BuildFlashID
     388  BuildStatusData
      86  CalcDSRxChecksum
      62  CalcDSTxChecksum
     168  CheckActionUart
     228  EraseFlash
      30  ExitBootloader
      34  GoToSyncUART
     638  ProgramFlash
     406  ReadFlash
     272  ReceivePacketUart
     128  SendPacketUart
      92  Uart_BuildHeader
     266  Uart_BuildTail
     120  UsartCheckPackage
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_PORTE
       1  _A_PORTG
       1  _A_RAMPZ
       1  _A_WDTCR

 
     8 bytes in segment ABSOLUTE
 3 124 bytes in segment CODE
 
 3 124 bytes of CODE memory
     0 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
