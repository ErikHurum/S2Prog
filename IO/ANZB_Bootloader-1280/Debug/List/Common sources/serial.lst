###############################################################################
#
# IAR C/C++ Compiler V8.10.1.1784/W64 for Microchip AVR   02/Oct/2023  15:15:14
# Copyright 1996-2023 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file           =
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1280\Src\serial.c
#    Command line          =
#        -f "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1280\Debug\Obj\Common
#        sources\serial.r90.rsp" ("C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1280\Src\serial.c"
#        --cpu=m1280 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1280\Debug\Obj\Common
#        sources" -D SPEED=38400 -D PORT0 -D __ATMEGA_1280__ -lCN
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1280\Debug\List\Common
#        sources" -y --initializers_in_flash --no_cse --no_inline
#        --no_code_motion --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1280\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1280\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On) --dependencies=n "C:\Users\ESY\OneDrive
#        -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1280\Debug\Obj\Common
#        sources\serial.r90.iar_deps"
#    Locale                =  C
#    List file             =
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1280\Debug\List\Common
#        sources\serial.lst
#    Object file           =
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1280\Debug\Obj\Common
#        sources\serial.r90
#    Runtime model:           
#      __64bit_doubles     =  disabled
#      __SystemLibrary     =  CLib
#      __architecture      =  *
#      __cpu               =  3
#      __cpu_name          =  ATmega1280
#      __dlib_version      =  clib
#      __enhanced_core     =  enabled
#      __enhanced_core_mul =  enabled
#      __has_elpm          =  true
#      __memory_model      =  2
#      __mex               =  disabled
#      __no_rampd          =  enabled
#      __rt_version        =  3
#      __vtable_memory     =  __nearflash
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_Bootloader-1280\Src\serial.c
      1          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0xc6
   \   __no_init union <unnamed>#133 volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   __no_init union <unnamed>#149 volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1
      2          #include "stdio.h"
      3          #include "math.h"
      4          #include "externals.h"
      5          #include <intrinsics.h>

   \                                 In  segment CODE, align 2, keep-with-next
      6          void sendchar(char c){
   \                     sendchar:
      7              UART_DATA_REG0 = c;                                   // prepare transmission
   \   00000000   930000C6           STS     198, R16
      8              while (!(UART_STATUS_REG0 & (1 << TRANSMIT_COMPLETE_BIT0)));// wait until byte sendt
   \                     ??sendchar_0:
   \   00000004   911000C0           LDS     R17, 192
   \   00000008   FF16               SBRS    R17, 6
   \   0000000A   CFFC               RJMP    ??sendchar_0
      9              UART_STATUS_REG0 |= (1 << TRANSMIT_COMPLETE_BIT0);          // delete TXCflag
   \   0000000C   911000C0           LDS     R17, 192
   \   00000010   6410               ORI     R17, 0x40
   \   00000012   931000C0           STS     192, R17
     10          }
   \   00000016   9508               RET
   \   00000018                      REQUIRE _A_UDR0
   \   00000018                      REQUIRE _A_UCSR0A
     11          
     12          

   \                                 In  segment CODE, align 2, keep-with-next
     13          void recchar(void){
   \                     recchar:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
     14            if((UART_STATUS_REG0 & (1 << RECEIVE_COMPLETE_BIT0)) ||(UART_STATUS_REG0 & 0x10)){
   \   00000004   910000C0           LDS     R16, 192
   \   00000008   FD07               SBRC    R16, 7
   \   0000000A   C004               RJMP    ??recchar_0
   \   0000000C   910000C0           LDS     R16, 192
   \   00000010   FF04               SBRS    R16, 4
   \   00000012   C062               RJMP    ??recchar_1
     15              RxBufferCh0[ myUART.RxFirst ] = UART_DATA_REG0;                     // Read the character 
   \                     ??recchar_0:
   \   00000014   910000C6           LDS     R16, 198
   \   00000018   ....               LDI     R30, LOW(myUART)
   \   0000001A   ....               LDI     R31, (myUART) >> 8
   \   0000001C   85A2               LDD     R26, Z+10
   \   0000001E   85B3               LDD     R27, Z+11
   \   00000020   ....               SUBI    R26, LOW((-(RxBufferCh0) & 0xFFFF))
   \   00000022   ....               SBCI    R27, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   00000024   930C               ST      X, R16
     16              __watchdog_reset();
   \   00000026   95A8               WDR
     17              if (myUART.RxState != HANDLE) {        // ok to receive? 
   \   00000028   9100....           LDS     R16, (myUART + 16)
   \   0000002C   300A               CPI     R16, 10
   \   0000002E   F409               BRNE    $+2+2
   \   00000030   C053               RJMP    ??recchar_1
     18                  switch (myUART.RxState) {                   // Yes, check state
   \   00000032   9100....           LDS     R16, (myUART + 16)
   \   00000036   2300               TST     R16
   \   00000038   F5C9               BRNE    ??recchar_2
     19                  case SYNC :
     20                      if ( RxBufferCh0[ myUART.RxFirst ] == ANPRO10_SYN) {
   \   0000003A   ....               LDI     R30, LOW(myUART)
   \   0000003C   ....               LDI     R31, (myUART) >> 8
   \   0000003E   85A2               LDD     R26, Z+10
   \   00000040   85B3               LDD     R27, Z+11
   \   00000042   ....               SUBI    R26, LOW((-(RxBufferCh0) & 0xFFFF))
   \   00000044   ....               SBCI    R27, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   00000046   910C               LD      R16, X
   \   00000048   3106               CPI     R16, 22
   \   0000004A   F461               BRNE    ??recchar_3
     21                          myUART.SyncCnt ++ ;                 // count sync
   \   0000004C   ....               LDI     R30, LOW(myUART)
   \   0000004E   ....               LDI     R31, (myUART) >> 8
   \   00000050   8901               LDD     R16, Z+17
   \   00000052   9503               INC     R16
   \   00000054   8B01               STD     Z+17, R16
     22                          myUART.RxFirst = 0;                 // start at start of buff
   \   00000056   E000               LDI     R16, 0
   \   00000058   E010               LDI     R17, 0
   \   0000005A   ....               LDI     R30, LOW(myUART)
   \   0000005C   ....               LDI     R31, (myUART) >> 8
   \   0000005E   8702               STD     Z+10, R16
   \   00000060   8713               STD     Z+11, R17
   \   00000062   C03A               RJMP    ??recchar_1
     23                      } else if ((myUART.SyncCnt >= 2) && 
     24                                 (RxBufferCh0[ myUART.RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \                     ??recchar_3:
   \   00000064   9100....           LDS     R16, (myUART + 17)
   \   00000068   3002               CPI     R16, 2
   \   0000006A   F0E0               BRCS    ??recchar_4
   \   0000006C   ....               LDI     R30, LOW(myUART)
   \   0000006E   ....               LDI     R31, (myUART) >> 8
   \   00000070   85A2               LDD     R26, Z+10
   \   00000072   85B3               LDD     R27, Z+11
   \   00000074   ....               SUBI    R26, LOW((-(RxBufferCh0) & 0xFFFF))
   \   00000076   ....               SBCI    R27, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   00000078   910C               LD      R16, X
   \   0000007A   3001               CPI     R16, 1
   \   0000007C   F499               BRNE    ??recchar_4
     25                          myUART.SyncCnt = 0 ;                // reset counter
   \   0000007E   E000               LDI     R16, 0
   \   00000080   9300....           STS     (myUART + 17), R16
     26                          myUART.RxState = HEADER ;
   \   00000084   E001               LDI     R16, 1
   \   00000086   9300....           STS     (myUART + 16), R16
     27                          myUART.RxLast = 0 ;
   \   0000008A   E000               LDI     R16, 0
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   ....               LDI     R30, LOW(myUART)
   \   00000090   ....               LDI     R31, (myUART) >> 8
   \   00000092   8704               STD     Z+12, R16
   \   00000094   8715               STD     Z+13, R17
     28                          myUART.RxTimeout = RX_TO_TIME ;   // reset timeout
   \   00000096   EF0A               LDI     R16, 250
   \   00000098   E010               LDI     R17, 0
   \   0000009A   ....               LDI     R30, LOW(myUART)
   \   0000009C   ....               LDI     R31, (myUART) >> 8
   \   0000009E   8B02               STD     Z+18, R16
   \   000000A0   8B13               STD     Z+19, R17
   \   000000A2   C01A               RJMP    ??recchar_1
     29                      } else {
     30                          myUART.SyncCnt = 0 ;                // start over once more
   \                     ??recchar_4:
   \   000000A4   E000               LDI     R16, 0
   \   000000A6   9300....           STS     (myUART + 17), R16
     31                      }
     32                      break;
   \   000000AA   C016               RJMP    ??recchar_1
     33                  default :
     34                      if ((++myUART.RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??recchar_2:
   \   000000AC   ....               LDI     R30, LOW(myUART)
   \   000000AE   ....               LDI     R31, (myUART) >> 8
   \   000000B0   8502               LDD     R16, Z+10
   \   000000B2   8513               LDD     R17, Z+11
   \   000000B4   5F0F               SUBI    R16, 255
   \   000000B6   4F1F               SBCI    R17, 255
   \   000000B8   8702               STD     Z+10, R16
   \   000000BA   8713               STD     Z+11, R17
   \   000000BC   ....               LDI     R30, LOW(myUART)
   \   000000BE   ....               LDI     R31, (myUART) >> 8
   \   000000C0   8502               LDD     R16, Z+10
   \   000000C2   8513               LDD     R17, Z+11
   \   000000C4   350F               CPI     R16, 95
   \   000000C6   E021               LDI     R18, 1
   \   000000C8   0712               CPC     R17, R18
   \   000000CA   F018               BRCS    ??recchar_5
     35                          GoToSyncUART() ;                       // go to sync mode
   \   000000CC   ........           CALL    GoToSyncUART
   \   000000D0   C003               RJMP    ??recchar_1
     36                      } else {
     37                          ReceivePacketUart(0) ;              // Check package
   \                     ??recchar_5:
   \   000000D2   E000               LDI     R16, 0
   \   000000D4   ........           CALL    ReceivePacketUart
     38                      }
     39                      break ;   
     40                  }
     41              }
     42            }
     43          }
   \                     ??recchar_1:
   \   000000D8   91A9               LD      R26, Y+
   \   000000DA   91B9               LD      R27, Y+
   \   000000DC   9508               RET
   \   000000DE                      REQUIRE _A_UCSR0A
   \   000000DE                      REQUIRE _A_UDR0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      2      2   recchar
        2      2   -> GoToSyncUART
        2      2   -> ReceivePacketUart
      0      2   sendchar


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_UCSR0A
       1  _A_UDR0
     222  recchar
      24  sendchar

 
   2 bytes in segment ABSOLUTE
 246 bytes in segment CODE
 
 246 bytes of CODE memory
   0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
