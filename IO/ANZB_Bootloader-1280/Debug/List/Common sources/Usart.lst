###############################################################################
#
# IAR C/C++ Compiler V8.10.1.1784/W64 for Microchip AVR   26/Apr/2023  10:28:45
# Copyright 1996-2023 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file           =  D:\S2Prog\IO\ANZB_Bootloader-1280\Src\Usart.c
#    Command line          =
#        -f "D:\S2Prog\IO\ANZB_Bootloader-1280\Debug\Obj\Common
#        sources\Usart.r90.rsp" (D:\S2Prog\IO\ANZB_Bootloader-1280\Src\Usart.c
#        --cpu=m1280 -ms -o "D:\S2Prog\IO\ANZB_Bootloader-1280\Debug\Obj\Common
#        sources" -D SPEED=38400 -D PORT0 -D __ATMEGA_1280__ -lCN
#        "D:\S2Prog\IO\ANZB_Bootloader-1280\Debug\List\Common sources" -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB_Bootloader-1280\INC\
#        -I D:\S2Prog\IO\ANZB_Bootloader-1280\..\..\SHARED\INC\ --eeprom_size
#        4096 --clib -On) --dependencies=n
#        "D:\S2Prog\IO\ANZB_Bootloader-1280\Debug\Obj\Common
#        sources\Usart.r90.iar_deps"
#    Locale                =  C
#    List file             =
#        D:\S2Prog\IO\ANZB_Bootloader-1280\Debug\List\Common sources\Usart.lst
#    Object file           =
#        D:\S2Prog\IO\ANZB_Bootloader-1280\Debug\Obj\Common sources\Usart.r90
#    Runtime model:           
#      __64bit_doubles     =  disabled
#      __SystemLibrary     =  CLib
#      __architecture      =  *
#      __cpu               =  3
#      __cpu_name          =  ATmega1280
#      __dlib_version      =  clib
#      __enhanced_core     =  enabled
#      __enhanced_core_mul =  enabled
#      __has_elpm          =  true
#      __memory_model      =  2
#      __mex               =  disabled
#      __no_rampd          =  enabled
#      __rt_version        =  3
#      __vtable_memory     =  __nearflash
#
###############################################################################

D:\S2Prog\IO\ANZB_Bootloader-1280\Src\Usart.c
      1          /****************************************************************************************
      2          / Com protocol for USART0 
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x60
   \   __no_init union <unnamed>#383 volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5b
   \   __no_init union <unnamed>#395 volatile __io _A_RAMPZ
   \                     _A_RAMPZ:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   __no_init union <unnamed>#450 volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x40
   \   __no_init union <unnamed>#456 volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3f
   \   __no_init union <unnamed>#459 volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   __no_init union <unnamed>#510 volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
      7          #include "stdio.h"
      8          #include "string.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "assembly.h"
     12          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     13          __near char TxBufferCh0[TXSIZE_UART];            // set up buffer size
   \                     TxBufferCh0:
   \   00000000                      DS8 350

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     14          __near char RxBufferCh0[RXSIZE_UART];
   \                     RxBufferCh0:
   \   00000000                      DS8 350
     15          
     16          
     17          /*************************************************************************
     18          *
     19          *  Check the incoming packages
     20          *
     21          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     22          void UsartCheckPackage(void) {
   \                     UsartCheckPackage:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
     23          
     24              unsigned short pointer;
     25              char retval;
     26          
     27              myUART.RxSendReply = false;                           // flag for answering set to fault
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     (myUART + 24), R16
     28              myUART.TxFirst = 11;                        // Startpos for fist TX command
   \   0000000A   E00B               LDI     R16, 11
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   ....               LDI     R30, LOW(myUART)
   \   00000010   ....               LDI     R31, (myUART) >> 8
   \   00000012   8300               ST      Z, R16
   \   00000014   8311               STD     Z+1, R17
     29              pointer = 7;
   \   00000016   E087               LDI     R24, 7
   \   00000018   E090               LDI     R25, 0
     30              do {
     31                  retval = CheckActionUart(pointer);
   \                     ??UsartCheckPackage_0:
   \   0000001A   018C               MOVW    R17:R16, R25:R24
   \   0000001C   ....               RCALL   CheckActionUart
   \   0000001E   2FA0               MOV     R26, R16
     32                  pointer = pointer + RxBufferCh0[pointer + 2]
     33                      + (RxBufferCh0[pointer + 3] * 256) + 4;            // Point to a command cmd hb/lb
   \   00000020   01FC               MOVW    R31:R30, R25:R24
   \   00000022   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   00000024   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   00000026   8102               LDD     R16, Z+2
   \   00000028   01FC               MOVW    R31:R30, R25:R24
   \   0000002A   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   0000002E   8113               LDD     R17, Z+3
   \   00000030   5F0C               SUBI    R16, 252
   \   00000032   4F1F               SBCI    R17, 255
   \   00000034   0F80               ADD     R24, R16
   \   00000036   1F91               ADC     R25, R17
     34              } while ( retval && (pointer < (myUART.RxPacklen - 4)) );
   \   00000038   23AA               TST     R26
   \   0000003A   F049               BREQ    ??UsartCheckPackage_1
   \   0000003C   ....               LDI     R30, LOW(myUART)
   \   0000003E   ....               LDI     R31, (myUART) >> 8
   \   00000040   8904               LDD     R16, Z+20
   \   00000042   8915               LDD     R17, Z+21
   \   00000044   5004               SUBI    R16, 4
   \   00000046   4010               SBCI    R17, 0
   \   00000048   1780               CP      R24, R16
   \   0000004A   0791               CPC     R25, R17
   \   0000004C   F330               BRCS    ??UsartCheckPackage_0
     35              if ( myUART.RxSendReply ) {                              //send answer
   \                     ??UsartCheckPackage_1:
   \   0000004E   9100....           LDS     R16, (myUART + 24)
   \   00000052   2300               TST     R16
   \   00000054   F009               BREQ    ??UsartCheckPackage_2
     36                  Uart_BuildTail();
   \   00000056   ....               RCALL   Uart_BuildTail
     37              }
     38              GoToSyncUART();                                    // go to sync modus for recive
   \                     ??UsartCheckPackage_2:
   \   00000058   ....               RCALL   GoToSyncUART
     39          }
   \   0000005A   E0E3               LDI     R30, 3
   \   0000005C   ........           JMP     ?EPILOGUE_B3_L09
     40          
     41          /*************************************************************************
     42          *
     43          *  Check action on received data
     44          *
     45          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     46          char CheckActionUart(unsigned short pointer) {
   \                     CheckActionUart:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
     47          
     48              const char ch = 0;
   \   00000006   2444               CLR     R4
     49              unsigned short   command;
     50              char    retval = true;
   \   00000008   2455               CLR     R5
   \   0000000A   9453               INC     R5
     51          
     52              command = RxBufferCh0[pointer] | (RxBufferCh0[pointer + 1] << 8);
   \   0000000C   01FC               MOVW    R31:R30, R25:R24
   \   0000000E   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   00000012   81A0               LD      R26, Z
   \   00000014   01FC               MOVW    R31:R30, R25:R24
   \   00000016   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   0000001A   81B1               LDD     R27, Z+1
     53              switch ( command ) {                                      // check action
   \   0000001C   018D               MOVW    R17:R16, R27:R26
   \   0000001E   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart>_0`)
   \   00000020   ....               LDI     R31, (`?<Jumptable for CheckActionUart>_0`) >> 16
   \   00000022   BFFB               OUT     0x3B, R31
   \   00000024   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart>_0`)
   \   00000026   ........           JMP     ?SV_SWITCH_L06
     54              case CMD_REQ_STATUS :                                    // Regusest status for target
     55                  BuildStatusData(ch);
   \                     ??CheckActionUart_0:
   \   0000002A   2D04               MOV     R16, R4
   \   0000002C   ....               RCALL   BuildStatusData
     56                  break;
   \   0000002E   C017               RJMP    ??CheckActionUart_1
     57          
     58              case CMD_FLASH_ID :                                     // Send flash ID
     59                  BuildFlashID(ch);
   \                     ??CheckActionUart_2:
   \   00000030   2D04               MOV     R16, R4
   \   00000032   ....               RCALL   BuildFlashID
     60                  break;
   \   00000034   C014               RJMP    ??CheckActionUart_1
     61          
     62              case CMD_FLASH_ERASE :                                 // Erase flash
     63                  EraseFlash();
   \                     ??CheckActionUart_3:
   \   00000036   ....               RCALL   EraseFlash
     64                  break;
   \   00000038   C012               RJMP    ??CheckActionUart_1
     65          
     66              case CMD_FLASH_PROG :                                   // Prog flash
     67                  ProgramFlash(pointer + 4);
   \                     ??CheckActionUart_4:
   \   0000003A   018C               MOVW    R17:R16, R25:R24
   \   0000003C   5F0C               SUBI    R16, 252
   \   0000003E   4F1F               SBCI    R17, 255
   \   00000040   ....               RCALL   ProgramFlash
     68                  break;
   \   00000042   C00D               RJMP    ??CheckActionUart_1
     69          
     70              case CMD_FLASH_READ :                                   // Read flash
     71                  ReadFlash(pointer + 4);
   \                     ??CheckActionUart_5:
   \   00000044   018C               MOVW    R17:R16, R25:R24
   \   00000046   5F0C               SUBI    R16, 252
   \   00000048   4F1F               SBCI    R17, 255
   \   0000004A   ....               RCALL   ReadFlash
     72                  break;
   \   0000004C   C008               RJMP    ??CheckActionUart_1
     73          
     74              case CMD_EXIT_BOOTLOADER :                                // Leave bootlaoder
     75                  ExitBootloader(ch);
   \                     ??CheckActionUart_6:
   \   0000004E   2D04               MOV     R16, R4
   \   00000050   ....               RCALL   ExitBootloader
     76                  break;
   \   00000052   C005               RJMP    ??CheckActionUart_1
     77          
     78              default:
     79                  if ( command < MAX_ECMD ) {                           // handle end commands
   \                     ??CheckActionUart_7:
   \   00000054   36A4               CPI     R26, 100
   \   00000056   E000               LDI     R16, 0
   \   00000058   07B0               CPC     R27, R16
   \   0000005A   F408               BRCC    ??CheckActionUart_1
     80                      retval = false;
   \   0000005C   2455               CLR     R5
     81                  }
     82                  break;
     83          
     84              }
     85              return retval;
   \                     ??CheckActionUart_1:
   \   0000005E   2D05               MOV     R16, R5
   \   00000060   E0E6               LDI     R30, 6
   \   00000062   ........           JMP     ?EPILOGUE_B6_L09
     86          }
     87          
     88          //#include <intrinsics.h>
     89          
     90          /*************************************************************************
     91          *
     92          * Build send packet header
     93          *
     94          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     95          void Uart_BuildHeader(void) {
   \                     Uart_BuildHeader:
     96              //__disable_interrupt();
     97              myUART.RxFirst = 0;                                // Reset pointers
   \   00000000   E000               LDI     R16, 0
   \   00000002   E010               LDI     R17, 0
   \   00000004   ....               LDI     R30, LOW(myUART)
   \   00000006   ....               LDI     R31, (myUART) >> 8
   \   00000008   8702               STD     Z+10, R16
   \   0000000A   8713               STD     Z+11, R17
     98              myUART.RxLast  = 0;
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   E010               LDI     R17, 0
   \   00000010   ....               LDI     R30, LOW(myUART)
   \   00000012   ....               LDI     R31, (myUART) >> 8
   \   00000014   8704               STD     Z+12, R16
   \   00000016   8715               STD     Z+13, R17
     99              myUART.TxLast  = 0;
   \   00000018   E000               LDI     R16, 0
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   ....               LDI     R30, LOW(myUART)
   \   0000001E   ....               LDI     R31, (myUART) >> 8
   \   00000020   8302               STD     Z+2, R16
   \   00000022   8313               STD     Z+3, R17
    100          
    101          
    102              TxBufferCh0[0] = ANPRO10_SYN;                        /* Sync */
   \   00000024   E106               LDI     R16, 22
   \   00000026   9300....           STS     TxBufferCh0, R16
    103              TxBufferCh0[1] = ANPRO10_SYN;                        /* Sync */
   \   0000002A   E106               LDI     R16, 22
   \   0000002C   9300....           STS     (TxBufferCh0 + 1), R16
    104              TxBufferCh0[2] = ANPRO10_SYN;                        /* Sync */
   \   00000030   E106               LDI     R16, 22
   \   00000032   9300....           STS     (TxBufferCh0 + 2), R16
    105              TxBufferCh0[3] = ANPRO10_SOH;                        /* Start of header */
   \   00000036   E001               LDI     R16, 1
   \   00000038   9300....           STS     (TxBufferCh0 + 3), R16
    106              TxBufferCh0[4] = RxBufferCh0[2];      /* RXID */
   \   0000003C   9100....           LDS     R16, (RxBufferCh0 + 2)
   \   00000040   9300....           STS     (TxBufferCh0 + 4), R16
    107              TxBufferCh0[5] = RxBufferCh0[3];      /* Rx address */
   \   00000044   9100....           LDS     R16, (RxBufferCh0 + 3)
   \   00000048   9300....           STS     (TxBufferCh0 + 5), R16
    108              TxBufferCh0[6] = 0x10 + UnitID;              /* Unit ID */
   \   0000004C   9100....           LDS     R16, UnitID
   \   00000050   5F00               SUBI    R16, 240
   \   00000052   9300....           STS     (TxBufferCh0 + 6), R16
    109              TxBufferCh0[7] = MyAddress();                /* Tx address */
   \   00000056   ........           CALL    MyAddress
   \   0000005A   9300....           STS     (TxBufferCh0 + 7), R16
    110              TxBufferCh0[8] = 0;                         /* packlen HB, don't know yet */
   \   0000005E   E000               LDI     R16, 0
   \   00000060   9300....           STS     (TxBufferCh0 + 8), R16
    111              TxBufferCh0[9] = 0;                         /* packlen LB, don't know yet */
   \   00000064   E000               LDI     R16, 0
   \   00000066   9300....           STS     (TxBufferCh0 + 9), R16
    112              TxBufferCh0[10] = 0;                        /* header checksum, don't know yet */
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   9300....           STS     (TxBufferCh0 + 10), R16
    113          
    114              //__enable_interrupt();
    115          }
   \   00000070   9508               RET
    116          
    117          /*************************************************************************
    118          *
    119          * Build  packet tail
    120          *
    121          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    122          void Uart_BuildTail(void) {
   \                     Uart_BuildTail:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
    123              Uart_BuildHeader();                                    // fist build the header
   \   00000004   ....               RCALL   Uart_BuildHeader
    124          
    125              TxBufferCh0[myUART.TxFirst++] = ECMD_NMDWOACK & 0xff;  // End command lb
   \   00000006   ....               LDI     R30, LOW(myUART)
   \   00000008   ....               LDI     R31, (myUART) >> 8
   \   0000000A   81A0               LD      R26, Z
   \   0000000C   81B1               LDD     R27, Z+1
   \   0000000E   ....               SUBI    R26, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000010   ....               SBCI    R27, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000012   E000               LDI     R16, 0
   \   00000014   930C               ST      X, R16
   \   00000016   ....               LDI     R30, LOW(myUART)
   \   00000018   ....               LDI     R31, (myUART) >> 8
   \   0000001A   8100               LD      R16, Z
   \   0000001C   8111               LDD     R17, Z+1
   \   0000001E   5F0F               SUBI    R16, 255
   \   00000020   4F1F               SBCI    R17, 255
   \   00000022   8300               ST      Z, R16
   \   00000024   8311               STD     Z+1, R17
    126              TxBufferCh0[myUART.TxFirst++] = ECMD_NMDWOACK >> 8;    // End command hb
   \   00000026   ....               LDI     R30, LOW(myUART)
   \   00000028   ....               LDI     R31, (myUART) >> 8
   \   0000002A   81A0               LD      R26, Z
   \   0000002C   81B1               LDD     R27, Z+1
   \   0000002E   ....               SUBI    R26, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000030   ....               SBCI    R27, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000032   E000               LDI     R16, 0
   \   00000034   930C               ST      X, R16
   \   00000036   ....               LDI     R30, LOW(myUART)
   \   00000038   ....               LDI     R31, (myUART) >> 8
   \   0000003A   8100               LD      R16, Z
   \   0000003C   8111               LDD     R17, Z+1
   \   0000003E   5F0F               SUBI    R16, 255
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   8300               ST      Z, R16
   \   00000044   8311               STD     Z+1, R17
    127              TxBufferCh0[myUART.TxFirst++] = 0x00;                  // End data
   \   00000046   ....               LDI     R30, LOW(myUART)
   \   00000048   ....               LDI     R31, (myUART) >> 8
   \   0000004A   81A0               LD      R26, Z
   \   0000004C   81B1               LDD     R27, Z+1
   \   0000004E   ....               SUBI    R26, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000050   ....               SBCI    R27, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000052   E000               LDI     R16, 0
   \   00000054   930C               ST      X, R16
   \   00000056   ....               LDI     R30, LOW(myUART)
   \   00000058   ....               LDI     R31, (myUART) >> 8
   \   0000005A   8100               LD      R16, Z
   \   0000005C   8111               LDD     R17, Z+1
   \   0000005E   5F0F               SUBI    R16, 255
   \   00000060   4F1F               SBCI    R17, 255
   \   00000062   8300               ST      Z, R16
   \   00000064   8311               STD     Z+1, R17
    128          
    129              TxBufferCh0[myUART.TxFirst++] = myUART.TxSeqCnt++;   // Sequence counter
   \   00000066   9100....           LDS     R16, (myUART + 9)
   \   0000006A   2F10               MOV     R17, R16
   \   0000006C   9513               INC     R17
   \   0000006E   9310....           STS     (myUART + 9), R17
   \   00000072   ....               LDI     R30, LOW(myUART)
   \   00000074   ....               LDI     R31, (myUART) >> 8
   \   00000076   81A0               LD      R26, Z
   \   00000078   81B1               LDD     R27, Z+1
   \   0000007A   ....               SUBI    R26, LOW((-(TxBufferCh0) & 0xFFFF))
   \   0000007C   ....               SBCI    R27, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000007E   930C               ST      X, R16
   \   00000080   ....               LDI     R30, LOW(myUART)
   \   00000082   ....               LDI     R31, (myUART) >> 8
   \   00000084   8100               LD      R16, Z
   \   00000086   8111               LDD     R17, Z+1
   \   00000088   5F0F               SUBI    R16, 255
   \   0000008A   4F1F               SBCI    R17, 255
   \   0000008C   8300               ST      Z, R16
   \   0000008E   8311               STD     Z+1, R17
    130          
    131              TxBufferCh0[8] = myUART.TxFirst - 2;                // correct length because stx's
   \   00000090   ....               LDI     R30, LOW(myUART)
   \   00000092   ....               LDI     R31, (myUART) >> 8
   \   00000094   8100               LD      R16, Z
   \   00000096   8111               LDD     R17, Z+1
   \   00000098   5002               SUBI    R16, 2
   \   0000009A   9300....           STS     (TxBufferCh0 + 8), R16
    132              TxBufferCh0[9] = (myUART.TxFirst - 2) >> 8;           // packet len high
   \   0000009E   ....               LDI     R30, LOW(myUART)
   \   000000A0   ....               LDI     R31, (myUART) >> 8
   \   000000A2   8100               LD      R16, Z
   \   000000A4   8111               LDD     R17, Z+1
   \   000000A6   5002               SUBI    R16, 2
   \   000000A8   4010               SBCI    R17, 0
   \   000000AA   2F01               MOV     R16, R17
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   9300....           STS     (TxBufferCh0 + 9), R16
    133          
    134              TxBufferCh0[10] = CalcDSTxChecksum(10);         // Get header checksum
   \   000000B2   E00A               LDI     R16, 10
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   ....               RCALL   CalcDSTxChecksum
   \   000000B8   9300....           STS     (TxBufferCh0 + 10), R16
    135          
    136              TxBufferCh0[myUART.TxFirst] = CalcDSTxChecksum(myUART.TxFirst); // Get checksum
   \   000000BC   ....               LDI     R30, LOW(myUART)
   \   000000BE   ....               LDI     R31, (myUART) >> 8
   \   000000C0   8100               LD      R16, Z
   \   000000C2   8111               LDD     R17, Z+1
   \   000000C4   ....               RCALL   CalcDSTxChecksum
   \   000000C6   ....               LDI     R30, LOW(myUART)
   \   000000C8   ....               LDI     R31, (myUART) >> 8
   \   000000CA   81A0               LD      R26, Z
   \   000000CC   81B1               LDD     R27, Z+1
   \   000000CE   ....               SUBI    R26, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000000D0   ....               SBCI    R27, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000000D2   930C               ST      X, R16
    137              myUART.TxFirst++;                                       // OBS!! must be inc here
   \   000000D4   ....               LDI     R30, LOW(myUART)
   \   000000D6   ....               LDI     R31, (myUART) >> 8
   \   000000D8   8100               LD      R16, Z
   \   000000DA   8111               LDD     R17, Z+1
   \   000000DC   5F0F               SUBI    R16, 255
   \   000000DE   4F1F               SBCI    R17, 255
   \   000000E0   8300               ST      Z, R16
   \   000000E2   8311               STD     Z+1, R17
    138          
    139              TxBufferCh0[myUART.TxFirst++] = ANPRO10_EOT;            // End of transmission
   \   000000E4   E004               LDI     R16, 4
   \   000000E6   ....               LDI     R30, LOW(myUART)
   \   000000E8   ....               LDI     R31, (myUART) >> 8
   \   000000EA   81A0               LD      R26, Z
   \   000000EC   81B1               LDD     R27, Z+1
   \   000000EE   ....               SUBI    R26, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000000F0   ....               SBCI    R27, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000000F2   930C               ST      X, R16
   \   000000F4   ....               LDI     R30, LOW(myUART)
   \   000000F6   ....               LDI     R31, (myUART) >> 8
   \   000000F8   8100               LD      R16, Z
   \   000000FA   8111               LDD     R17, Z+1
   \   000000FC   5F0F               SUBI    R16, 255
   \   000000FE   4F1F               SBCI    R17, 255
   \   00000100   8300               ST      Z, R16
   \   00000102   8311               STD     Z+1, R17
    140              TxBufferCh0[myUART.TxFirst++] = 0x00;            //switch off transmitter delay
   \   00000104   ....               LDI     R30, LOW(myUART)
   \   00000106   ....               LDI     R31, (myUART) >> 8
   \   00000108   81A0               LD      R26, Z
   \   0000010A   81B1               LDD     R27, Z+1
   \   0000010C   ....               SUBI    R26, LOW((-(TxBufferCh0) & 0xFFFF))
   \   0000010E   ....               SBCI    R27, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000110   E000               LDI     R16, 0
   \   00000112   930C               ST      X, R16
   \   00000114   ....               LDI     R30, LOW(myUART)
   \   00000116   ....               LDI     R31, (myUART) >> 8
   \   00000118   8100               LD      R16, Z
   \   0000011A   8111               LDD     R17, Z+1
   \   0000011C   5F0F               SUBI    R16, 255
   \   0000011E   4F1F               SBCI    R17, 255
   \   00000120   8300               ST      Z, R16
   \   00000122   8311               STD     Z+1, R17
    141          
    142              myUART.TxCount = myUART.TxFirst;                      //bytes to send
   \   00000124   ....               LDI     R30, LOW(myUART)
   \   00000126   ....               LDI     R31, (myUART) >> 8
   \   00000128   8100               LD      R16, Z
   \   0000012A   8111               LDD     R17, Z+1
   \   0000012C   ....               LDI     R30, LOW(myUART)
   \   0000012E   ....               LDI     R31, (myUART) >> 8
   \   00000130   8304               STD     Z+4, R16
   \   00000132   8315               STD     Z+5, R17
    143              myUART.TxLast = 0;                                     // reset cunter
   \   00000134   E000               LDI     R16, 0
   \   00000136   E010               LDI     R17, 0
   \   00000138   ....               LDI     R30, LOW(myUART)
   \   0000013A   ....               LDI     R31, (myUART) >> 8
   \   0000013C   8302               STD     Z+2, R16
   \   0000013E   8313               STD     Z+3, R17
    144              myUART.TxPkCnt++;                                     // Count sent packages
   \   00000140   ....               LDI     R30, LOW(myUART)
   \   00000142   ....               LDI     R31, (myUART) >> 8
   \   00000144   8106               LDD     R16, Z+6
   \   00000146   8117               LDD     R17, Z+7
   \   00000148   5F0F               SUBI    R16, 255
   \   0000014A   4F1F               SBCI    R17, 255
   \   0000014C   8306               STD     Z+6, R16
   \   0000014E   8317               STD     Z+7, R17
    145              PORTE |= 0x04;                                     // TXE0 on
   \   00000150   9A72               SBI     0x0E, 0x02
    146              SendPacketUart();                                     // send answer
   \   00000152   ....               RCALL   SendPacketUart
    147          }
   \   00000154   91A9               LD      R26, Y+
   \   00000156   91B9               LD      R27, Y+
   \   00000158   9508               RET
   \   0000015A                      REQUIRE _A_PORTE
    148          
    149          
    150          /*************************************************************************
    151          *
    152          * Build datablock for card status
    153          *
    154          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    155          void BuildStatusData(char ch) {
   \                     BuildStatusData:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
    156          
    157              short ntna;
    158              myUART.RxSendReply = true;                               // flag for answering
   \   00000006   E001               LDI     R16, 1
   \   00000008   9300....           STS     (myUART + 24), R16
    159          
    160              TxBufferCh0[myUART.TxFirst++] = CMD_REP_STATUS & 0xff;
   \   0000000C   EE29               LDI     R18, 233
   \   0000000E   ....               LDI     R30, LOW(myUART)
   \   00000010   ....               LDI     R31, (myUART) >> 8
   \   00000012   8100               LD      R16, Z
   \   00000014   8111               LDD     R17, Z+1
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000001C   8320               ST      Z, R18
   \   0000001E   ....               LDI     R30, LOW(myUART)
   \   00000020   ....               LDI     R31, (myUART) >> 8
   \   00000022   8100               LD      R16, Z
   \   00000024   8111               LDD     R17, Z+1
   \   00000026   5F0F               SUBI    R16, 255
   \   00000028   4F1F               SBCI    R17, 255
   \   0000002A   8300               ST      Z, R16
   \   0000002C   8311               STD     Z+1, R17
    161              TxBufferCh0[myUART.TxFirst++] = CMD_REP_STATUS >> 8;
   \   0000002E   E023               LDI     R18, 3
   \   00000030   ....               LDI     R30, LOW(myUART)
   \   00000032   ....               LDI     R31, (myUART) >> 8
   \   00000034   8100               LD      R16, Z
   \   00000036   8111               LDD     R17, Z+1
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000003E   8320               ST      Z, R18
   \   00000040   ....               LDI     R30, LOW(myUART)
   \   00000042   ....               LDI     R31, (myUART) >> 8
   \   00000044   8100               LD      R16, Z
   \   00000046   8111               LDD     R17, Z+1
   \   00000048   5F0F               SUBI    R16, 255
   \   0000004A   4F1F               SBCI    R17, 255
   \   0000004C   8300               ST      Z, R16
   \   0000004E   8311               STD     Z+1, R17
    162              ntna = myUART.TxFirst;                                    /* remember index */
   \   00000050   ....               LDI     R30, LOW(myUART)
   \   00000052   ....               LDI     R31, (myUART) >> 8
   \   00000054   8180               LD      R24, Z
   \   00000056   8191               LDD     R25, Z+1
    163              myUART.TxFirst += 2;                                      // two byte length
   \   00000058   ....               LDI     R30, LOW(myUART)
   \   0000005A   ....               LDI     R31, (myUART) >> 8
   \   0000005C   8100               LD      R16, Z
   \   0000005E   8111               LDD     R17, Z+1
   \   00000060   5F0E               SUBI    R16, 254
   \   00000062   4F1F               SBCI    R17, 255
   \   00000064   8300               ST      Z, R16
   \   00000066   8311               STD     Z+1, R17
    164              TxBufferCh0[myUART.TxFirst++] = ch;                // channel
   \   00000068   ....               LDI     R30, LOW(myUART)
   \   0000006A   ....               LDI     R31, (myUART) >> 8
   \   0000006C   8100               LD      R16, Z
   \   0000006E   8111               LDD     R17, Z+1
   \   00000070   01F8               MOVW    R31:R30, R17:R16
   \   00000072   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000074   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000076   8240               ST      Z, R4
   \   00000078   ....               LDI     R30, LOW(myUART)
   \   0000007A   ....               LDI     R31, (myUART) >> 8
   \   0000007C   8100               LD      R16, Z
   \   0000007E   8111               LDD     R17, Z+1
   \   00000080   5F0F               SUBI    R16, 255
   \   00000082   4F1F               SBCI    R17, 255
   \   00000084   8300               ST      Z, R16
   \   00000086   8311               STD     Z+1, R17
    165              TxBufferCh0[myUART.TxFirst++] = 0x10 + UnitID;               // Product ID
   \   00000088   9120....           LDS     R18, UnitID
   \   0000008C   5F20               SUBI    R18, 240
   \   0000008E   ....               LDI     R30, LOW(myUART)
   \   00000090   ....               LDI     R31, (myUART) >> 8
   \   00000092   8100               LD      R16, Z
   \   00000094   8111               LDD     R17, Z+1
   \   00000096   01F8               MOVW    R31:R30, R17:R16
   \   00000098   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   0000009A   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000009C   8320               ST      Z, R18
   \   0000009E   ....               LDI     R30, LOW(myUART)
   \   000000A0   ....               LDI     R31, (myUART) >> 8
   \   000000A2   8100               LD      R16, Z
   \   000000A4   8111               LDD     R17, Z+1
   \   000000A6   5F0F               SUBI    R16, 255
   \   000000A8   4F1F               SBCI    R17, 255
   \   000000AA   8300               ST      Z, R16
   \   000000AC   8311               STD     Z+1, R17
    166              TxBufferCh0[myUART.TxFirst++] = MyAddress();           // unit address				/* get the address */
   \   000000AE   ....               LDI     R30, LOW(myUART)
   \   000000B0   ....               LDI     R31, (myUART) >> 8
   \   000000B2   81A0               LD      R26, Z
   \   000000B4   81B1               LDD     R27, Z+1
   \   000000B6   018D               MOVW    R17:R16, R27:R26
   \   000000B8   5F0F               SUBI    R16, 255
   \   000000BA   4F1F               SBCI    R17, 255
   \   000000BC   ....               LDI     R30, LOW(myUART)
   \   000000BE   ....               LDI     R31, (myUART) >> 8
   \   000000C0   8300               ST      Z, R16
   \   000000C2   8311               STD     Z+1, R17
   \   000000C4   ........           CALL    MyAddress
   \   000000C8   ....               SUBI    R26, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000000CA   ....               SBCI    R27, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000000CC   930C               ST      X, R16
    167              TxBufferCh0[myUART.TxFirst++] = PROG_VERSION;       // software version */
   \   000000CE   E02B               LDI     R18, 11
   \   000000D0   ....               LDI     R30, LOW(myUART)
   \   000000D2   ....               LDI     R31, (myUART) >> 8
   \   000000D4   8100               LD      R16, Z
   \   000000D6   8111               LDD     R17, Z+1
   \   000000D8   01F8               MOVW    R31:R30, R17:R16
   \   000000DA   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000000DC   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000000DE   8320               ST      Z, R18
   \   000000E0   ....               LDI     R30, LOW(myUART)
   \   000000E2   ....               LDI     R31, (myUART) >> 8
   \   000000E4   8100               LD      R16, Z
   \   000000E6   8111               LDD     R17, Z+1
   \   000000E8   5F0F               SUBI    R16, 255
   \   000000EA   4F1F               SBCI    R17, 255
   \   000000EC   8300               ST      Z, R16
   \   000000EE   8311               STD     Z+1, R17
    168              TxBufferCh0[myUART.TxFirst++] = COMP_VERSION;        // cpmpability version
   \   000000F0   E021               LDI     R18, 1
   \   000000F2   ....               LDI     R30, LOW(myUART)
   \   000000F4   ....               LDI     R31, (myUART) >> 8
   \   000000F6   8100               LD      R16, Z
   \   000000F8   8111               LDD     R17, Z+1
   \   000000FA   01F8               MOVW    R31:R30, R17:R16
   \   000000FC   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000000FE   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000100   8320               ST      Z, R18
   \   00000102   ....               LDI     R30, LOW(myUART)
   \   00000104   ....               LDI     R31, (myUART) >> 8
   \   00000106   8100               LD      R16, Z
   \   00000108   8111               LDD     R17, Z+1
   \   0000010A   5F0F               SUBI    R16, 255
   \   0000010C   4F1F               SBCI    R17, 255
   \   0000010E   8300               ST      Z, R16
   \   00000110   8311               STD     Z+1, R17
    169              TxBufferCh0[myUART.TxFirst++] = STORE_VERSION;        // cpmpability version
   \   00000112   E022               LDI     R18, 2
   \   00000114   ....               LDI     R30, LOW(myUART)
   \   00000116   ....               LDI     R31, (myUART) >> 8
   \   00000118   8100               LD      R16, Z
   \   0000011A   8111               LDD     R17, Z+1
   \   0000011C   01F8               MOVW    R31:R30, R17:R16
   \   0000011E   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000120   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000122   8320               ST      Z, R18
   \   00000124   ....               LDI     R30, LOW(myUART)
   \   00000126   ....               LDI     R31, (myUART) >> 8
   \   00000128   8100               LD      R16, Z
   \   0000012A   8111               LDD     R17, Z+1
   \   0000012C   5F0F               SUBI    R16, 255
   \   0000012E   4F1F               SBCI    R17, 255
   \   00000130   8300               ST      Z, R16
   \   00000132   8311               STD     Z+1, R17
    170              TxBufferCh0[myUART.TxFirst++] = (RXSIZE_UART & 0xff);         // rx buffer size
   \   00000134   E52E               LDI     R18, 94
   \   00000136   ....               LDI     R30, LOW(myUART)
   \   00000138   ....               LDI     R31, (myUART) >> 8
   \   0000013A   8100               LD      R16, Z
   \   0000013C   8111               LDD     R17, Z+1
   \   0000013E   01F8               MOVW    R31:R30, R17:R16
   \   00000140   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000142   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000144   8320               ST      Z, R18
   \   00000146   ....               LDI     R30, LOW(myUART)
   \   00000148   ....               LDI     R31, (myUART) >> 8
   \   0000014A   8100               LD      R16, Z
   \   0000014C   8111               LDD     R17, Z+1
   \   0000014E   5F0F               SUBI    R16, 255
   \   00000150   4F1F               SBCI    R17, 255
   \   00000152   8300               ST      Z, R16
   \   00000154   8311               STD     Z+1, R17
    171              TxBufferCh0[myUART.TxFirst++] = ((RXSIZE_UART >> 8) & 0xff); // rx buffer size
   \   00000156   E021               LDI     R18, 1
   \   00000158   ....               LDI     R30, LOW(myUART)
   \   0000015A   ....               LDI     R31, (myUART) >> 8
   \   0000015C   8100               LD      R16, Z
   \   0000015E   8111               LDD     R17, Z+1
   \   00000160   01F8               MOVW    R31:R30, R17:R16
   \   00000162   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000164   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000166   8320               ST      Z, R18
   \   00000168   ....               LDI     R30, LOW(myUART)
   \   0000016A   ....               LDI     R31, (myUART) >> 8
   \   0000016C   8100               LD      R16, Z
   \   0000016E   8111               LDD     R17, Z+1
   \   00000170   5F0F               SUBI    R16, 255
   \   00000172   4F1F               SBCI    R17, 255
   \   00000174   8300               ST      Z, R16
   \   00000176   8311               STD     Z+1, R17
    172              TxBufferCh0[myUART.TxFirst++] = (TXSIZE_UART & 0xff);         // tx buffer size
   \   00000178   E52E               LDI     R18, 94
   \   0000017A   ....               LDI     R30, LOW(myUART)
   \   0000017C   ....               LDI     R31, (myUART) >> 8
   \   0000017E   8100               LD      R16, Z
   \   00000180   8111               LDD     R17, Z+1
   \   00000182   01F8               MOVW    R31:R30, R17:R16
   \   00000184   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000186   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000188   8320               ST      Z, R18
   \   0000018A   ....               LDI     R30, LOW(myUART)
   \   0000018C   ....               LDI     R31, (myUART) >> 8
   \   0000018E   8100               LD      R16, Z
   \   00000190   8111               LDD     R17, Z+1
   \   00000192   5F0F               SUBI    R16, 255
   \   00000194   4F1F               SBCI    R17, 255
   \   00000196   8300               ST      Z, R16
   \   00000198   8311               STD     Z+1, R17
    173              TxBufferCh0[myUART.TxFirst++] = ((TXSIZE_UART >> 8) & 0xff);  // tx buffer size
   \   0000019A   E021               LDI     R18, 1
   \   0000019C   ....               LDI     R30, LOW(myUART)
   \   0000019E   ....               LDI     R31, (myUART) >> 8
   \   000001A0   8100               LD      R16, Z
   \   000001A2   8111               LDD     R17, Z+1
   \   000001A4   01F8               MOVW    R31:R30, R17:R16
   \   000001A6   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000001A8   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000001AA   8320               ST      Z, R18
   \   000001AC   ....               LDI     R30, LOW(myUART)
   \   000001AE   ....               LDI     R31, (myUART) >> 8
   \   000001B0   8100               LD      R16, Z
   \   000001B2   8111               LDD     R17, Z+1
   \   000001B4   5F0F               SUBI    R16, 255
   \   000001B6   4F1F               SBCI    R17, 255
   \   000001B8   8300               ST      Z, R16
   \   000001BA   8311               STD     Z+1, R17
    174              TxBufferCh0[myUART.TxFirst++] = ResetStatus;                  // restart flag
   \   000001BC   9120....           LDS     R18, ResetStatus
   \   000001C0   ....               LDI     R30, LOW(myUART)
   \   000001C2   ....               LDI     R31, (myUART) >> 8
   \   000001C4   8100               LD      R16, Z
   \   000001C6   8111               LDD     R17, Z+1
   \   000001C8   01F8               MOVW    R31:R30, R17:R16
   \   000001CA   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000001CC   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000001CE   8320               ST      Z, R18
   \   000001D0   ....               LDI     R30, LOW(myUART)
   \   000001D2   ....               LDI     R31, (myUART) >> 8
   \   000001D4   8100               LD      R16, Z
   \   000001D6   8111               LDD     R17, Z+1
   \   000001D8   5F0F               SUBI    R16, 255
   \   000001DA   4F1F               SBCI    R17, 255
   \   000001DC   8300               ST      Z, R16
   \   000001DE   8311               STD     Z+1, R17
    175              TxBufferCh0[myUART.TxFirst++] = PROGTYPE_BOOT;                // Boot program
   \   000001E0   ....               LDI     R30, LOW(myUART)
   \   000001E2   ....               LDI     R31, (myUART) >> 8
   \   000001E4   8100               LD      R16, Z
   \   000001E6   8111               LDD     R17, Z+1
   \   000001E8   01F8               MOVW    R31:R30, R17:R16
   \   000001EA   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000001EC   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000001EE   E000               LDI     R16, 0
   \   000001F0   8300               ST      Z, R16
   \   000001F2   ....               LDI     R30, LOW(myUART)
   \   000001F4   ....               LDI     R31, (myUART) >> 8
   \   000001F6   8100               LD      R16, Z
   \   000001F8   8111               LDD     R17, Z+1
   \   000001FA   5F0F               SUBI    R16, 255
   \   000001FC   4F1F               SBCI    R17, 255
   \   000001FE   8300               ST      Z, R16
   \   00000200   8311               STD     Z+1, R17
    176          
    177              TxBufferCh0[ntna] = (myUART.TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   00000202   ....               LDI     R30, LOW(myUART)
   \   00000204   ....               LDI     R31, (myUART) >> 8
   \   00000206   8100               LD      R16, Z
   \   00000208   8111               LDD     R17, Z+1
   \   0000020A   1B08               SUB     R16, R24
   \   0000020C   5002               SUBI    R16, 2
   \   0000020E   01FC               MOVW    R31:R30, R25:R24
   \   00000210   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000212   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000214   8300               ST      Z, R16
    178              TxBufferCh0[ntna + 1] = ((myUART.TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   00000216   ....               LDI     R30, LOW(myUART)
   \   00000218   ....               LDI     R31, (myUART) >> 8
   \   0000021A   8100               LD      R16, Z
   \   0000021C   8111               LDD     R17, Z+1
   \   0000021E   1B08               SUB     R16, R24
   \   00000220   0B19               SBC     R17, R25
   \   00000222   5002               SUBI    R16, 2
   \   00000224   4010               SBCI    R17, 0
   \   00000226   2F01               MOV     R16, R17
   \   00000228   E010               LDI     R17, 0
   \   0000022A   01FC               MOVW    R31:R30, R25:R24
   \   0000022C   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   0000022E   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000230   8301               STD     Z+1, R16
    179          
    180              ResetStatus = 0;                                                       // set reset stat to 0 = read
   \   00000232   E000               LDI     R16, 0
   \   00000234   9300....           STS     ResetStatus, R16
    181          }
   \   00000238   E0E5               LDI     R30, 5
   \   0000023A   ........           JMP     ?EPILOGUE_B5_L09
    182          
    183          /*************************************************************************
    184          *
    185          * Build datablock for Flash ID
    186          *
    187          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    188          void BuildFlashID(char ch) {
   \                     BuildFlashID:
   \   00000000   2F20               MOV     R18, R16
    189          
    190              short ntna;
    191              myUART.RxSendReply = true;                               // flag for answering
   \   00000002   E001               LDI     R16, 1
   \   00000004   9300....           STS     (myUART + 24), R16
    192          
    193              TxBufferCh0[myUART.TxFirst++] = CMD_REP_FLASH_ID & 0xff;
   \   00000008   E935               LDI     R19, 149
   \   0000000A   ....               LDI     R30, LOW(myUART)
   \   0000000C   ....               LDI     R31, (myUART) >> 8
   \   0000000E   8100               LD      R16, Z
   \   00000010   8111               LDD     R17, Z+1
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000018   8330               ST      Z, R19
   \   0000001A   ....               LDI     R30, LOW(myUART)
   \   0000001C   ....               LDI     R31, (myUART) >> 8
   \   0000001E   8100               LD      R16, Z
   \   00000020   8111               LDD     R17, Z+1
   \   00000022   5F0F               SUBI    R16, 255
   \   00000024   4F1F               SBCI    R17, 255
   \   00000026   8300               ST      Z, R16
   \   00000028   8311               STD     Z+1, R17
    194              TxBufferCh0[myUART.TxFirst++] = CMD_REP_FLASH_ID >> 8;
   \   0000002A   E037               LDI     R19, 7
   \   0000002C   ....               LDI     R30, LOW(myUART)
   \   0000002E   ....               LDI     R31, (myUART) >> 8
   \   00000030   8100               LD      R16, Z
   \   00000032   8111               LDD     R17, Z+1
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000038   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000003A   8330               ST      Z, R19
   \   0000003C   ....               LDI     R30, LOW(myUART)
   \   0000003E   ....               LDI     R31, (myUART) >> 8
   \   00000040   8100               LD      R16, Z
   \   00000042   8111               LDD     R17, Z+1
   \   00000044   5F0F               SUBI    R16, 255
   \   00000046   4F1F               SBCI    R17, 255
   \   00000048   8300               ST      Z, R16
   \   0000004A   8311               STD     Z+1, R17
    195              ntna = myUART.TxFirst;                                    // remember index
   \   0000004C   ....               LDI     R30, LOW(myUART)
   \   0000004E   ....               LDI     R31, (myUART) >> 8
   \   00000050   8100               LD      R16, Z
   \   00000052   8111               LDD     R17, Z+1
    196              myUART.TxFirst += 2;                                      // two byte length
   \   00000054   ....               LDI     R30, LOW(myUART)
   \   00000056   ....               LDI     R31, (myUART) >> 8
   \   00000058   8140               LD      R20, Z
   \   0000005A   8151               LDD     R21, Z+1
   \   0000005C   5F4E               SUBI    R20, 254
   \   0000005E   4F5F               SBCI    R21, 255
   \   00000060   8340               ST      Z, R20
   \   00000062   8351               STD     Z+1, R21
    197          
    198              TxBufferCh0[myUART.TxFirst++] = PARTCODE;
   \   00000064   E434               LDI     R19, 68
   \   00000066   ....               LDI     R30, LOW(myUART)
   \   00000068   ....               LDI     R31, (myUART) >> 8
   \   0000006A   8140               LD      R20, Z
   \   0000006C   8151               LDD     R21, Z+1
   \   0000006E   01FA               MOVW    R31:R30, R21:R20
   \   00000070   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000072   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000074   8330               ST      Z, R19
   \   00000076   ....               LDI     R30, LOW(myUART)
   \   00000078   ....               LDI     R31, (myUART) >> 8
   \   0000007A   8140               LD      R20, Z
   \   0000007C   8151               LDD     R21, Z+1
   \   0000007E   5F4F               SUBI    R20, 255
   \   00000080   4F5F               SBCI    R21, 255
   \   00000082   8340               ST      Z, R20
   \   00000084   8351               STD     Z+1, R21
    199              TxBufferCh0[myUART.TxFirst++] = SIGNATURE_BYTE_1;
   \   00000086   E13E               LDI     R19, 30
   \   00000088   ....               LDI     R30, LOW(myUART)
   \   0000008A   ....               LDI     R31, (myUART) >> 8
   \   0000008C   8140               LD      R20, Z
   \   0000008E   8151               LDD     R21, Z+1
   \   00000090   01FA               MOVW    R31:R30, R21:R20
   \   00000092   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000094   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000096   8330               ST      Z, R19
   \   00000098   ....               LDI     R30, LOW(myUART)
   \   0000009A   ....               LDI     R31, (myUART) >> 8
   \   0000009C   8140               LD      R20, Z
   \   0000009E   8151               LDD     R21, Z+1
   \   000000A0   5F4F               SUBI    R20, 255
   \   000000A2   4F5F               SBCI    R21, 255
   \   000000A4   8340               ST      Z, R20
   \   000000A6   8351               STD     Z+1, R21
    200              TxBufferCh0[myUART.TxFirst++] = SIGNATURE_BYTE_2;
   \   000000A8   E937               LDI     R19, 151
   \   000000AA   ....               LDI     R30, LOW(myUART)
   \   000000AC   ....               LDI     R31, (myUART) >> 8
   \   000000AE   8140               LD      R20, Z
   \   000000B0   8151               LDD     R21, Z+1
   \   000000B2   01FA               MOVW    R31:R30, R21:R20
   \   000000B4   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000000B8   8330               ST      Z, R19
   \   000000BA   ....               LDI     R30, LOW(myUART)
   \   000000BC   ....               LDI     R31, (myUART) >> 8
   \   000000BE   8140               LD      R20, Z
   \   000000C0   8151               LDD     R21, Z+1
   \   000000C2   5F4F               SUBI    R20, 255
   \   000000C4   4F5F               SBCI    R21, 255
   \   000000C6   8340               ST      Z, R20
   \   000000C8   8351               STD     Z+1, R21
    201              TxBufferCh0[myUART.TxFirst++] = SIGNATURE_BYTE_3;
   \   000000CA   E032               LDI     R19, 2
   \   000000CC   ....               LDI     R30, LOW(myUART)
   \   000000CE   ....               LDI     R31, (myUART) >> 8
   \   000000D0   8140               LD      R20, Z
   \   000000D2   8151               LDD     R21, Z+1
   \   000000D4   01FA               MOVW    R31:R30, R21:R20
   \   000000D6   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000000D8   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000000DA   8330               ST      Z, R19
   \   000000DC   ....               LDI     R30, LOW(myUART)
   \   000000DE   ....               LDI     R31, (myUART) >> 8
   \   000000E0   8140               LD      R20, Z
   \   000000E2   8151               LDD     R21, Z+1
   \   000000E4   5F4F               SUBI    R20, 255
   \   000000E6   4F5F               SBCI    R21, 255
   \   000000E8   8340               ST      Z, R20
   \   000000EA   8351               STD     Z+1, R21
    202          
    203          
    204              TxBufferCh0[ntna] = (myUART.TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   000000EC   ....               LDI     R30, LOW(myUART)
   \   000000EE   ....               LDI     R31, (myUART) >> 8
   \   000000F0   8140               LD      R20, Z
   \   000000F2   8151               LDD     R21, Z+1
   \   000000F4   1B40               SUB     R20, R16
   \   000000F6   5042               SUBI    R20, 2
   \   000000F8   01F8               MOVW    R31:R30, R17:R16
   \   000000FA   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000000FC   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000000FE   8340               ST      Z, R20
    205              TxBufferCh0[ntna + 1] = ((myUART.TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   00000100   ....               LDI     R30, LOW(myUART)
   \   00000102   ....               LDI     R31, (myUART) >> 8
   \   00000104   8140               LD      R20, Z
   \   00000106   8151               LDD     R21, Z+1
   \   00000108   1B40               SUB     R20, R16
   \   0000010A   0B51               SBC     R21, R17
   \   0000010C   5042               SUBI    R20, 2
   \   0000010E   4050               SBCI    R21, 0
   \   00000110   2F45               MOV     R20, R21
   \   00000112   E050               LDI     R21, 0
   \   00000114   01F8               MOVW    R31:R30, R17:R16
   \   00000116   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000118   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000011A   8341               STD     Z+1, R20
    206          
    207          }
   \   0000011C   9508               RET
    208          
    209          /*************************************************************************
    210          *
    211          * Erase Flash 
    212          *
    213          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    214          void EraseFlash(void) {
   \                     EraseFlash:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
    215          
    216              unsigned short ntna, address;
    217              myUART.RxSendReply = true;                               // flag for answering
   \   00000004   E001               LDI     R16, 1
   \   00000006   9300....           STS     (myUART + 24), R16
    218          
    219              TxBufferCh0[myUART.TxFirst++] = CMD_REP_FLASH_ERASE & 0xff;
   \   0000000A   E90F               LDI     R16, 159
   \   0000000C   ....               LDI     R30, LOW(myUART)
   \   0000000E   ....               LDI     R31, (myUART) >> 8
   \   00000010   81A0               LD      R26, Z
   \   00000012   81B1               LDD     R27, Z+1
   \   00000014   ....               SUBI    R26, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000016   ....               SBCI    R27, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000018   930C               ST      X, R16
   \   0000001A   ....               LDI     R30, LOW(myUART)
   \   0000001C   ....               LDI     R31, (myUART) >> 8
   \   0000001E   8100               LD      R16, Z
   \   00000020   8111               LDD     R17, Z+1
   \   00000022   5F0F               SUBI    R16, 255
   \   00000024   4F1F               SBCI    R17, 255
   \   00000026   8300               ST      Z, R16
   \   00000028   8311               STD     Z+1, R17
    220              TxBufferCh0[myUART.TxFirst++] = CMD_REP_FLASH_ERASE >> 8;
   \   0000002A   E007               LDI     R16, 7
   \   0000002C   ....               LDI     R30, LOW(myUART)
   \   0000002E   ....               LDI     R31, (myUART) >> 8
   \   00000030   81A0               LD      R26, Z
   \   00000032   81B1               LDD     R27, Z+1
   \   00000034   ....               SUBI    R26, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000036   ....               SBCI    R27, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000038   930C               ST      X, R16
   \   0000003A   ....               LDI     R30, LOW(myUART)
   \   0000003C   ....               LDI     R31, (myUART) >> 8
   \   0000003E   8100               LD      R16, Z
   \   00000040   8111               LDD     R17, Z+1
   \   00000042   5F0F               SUBI    R16, 255
   \   00000044   4F1F               SBCI    R17, 255
   \   00000046   8300               ST      Z, R16
   \   00000048   8311               STD     Z+1, R17
    221              ntna = myUART.TxFirst;                                    // remember index
   \   0000004A   ....               LDI     R30, LOW(myUART)
   \   0000004C   ....               LDI     R31, (myUART) >> 8
   \   0000004E   8180               LD      R24, Z
   \   00000050   8191               LDD     R25, Z+1
    222              myUART.TxFirst += 2;                                      // two byte length
   \   00000052   ....               LDI     R30, LOW(myUART)
   \   00000054   ....               LDI     R31, (myUART) >> 8
   \   00000056   8100               LD      R16, Z
   \   00000058   8111               LDD     R17, Z+1
   \   0000005A   5F0E               SUBI    R16, 254
   \   0000005C   4F1F               SBCI    R17, 255
   \   0000005E   8300               ST      Z, R16
   \   00000060   8311               STD     Z+1, R17
    223          
    224          #ifdef LARGE_MEMORY               //SPM uses Z pointer but the pointer is only 16bit and
    225              RAMPZ = 0x00;                     //can only address up to 64Kbytes FLASH to adresse higher
   \   00000062   E000               LDI     R16, 0
   \   00000064   BF0B               OUT     0x3B, R16
    226              //location it require the use of RAMPZ
    227          
    228              for ( address = 0; ((address < (unsigned int)(APP_END & 0xFFFF)) | (RAMPZ == 0x00)); address += PAGESIZE ) {
   \   00000066   E0A0               LDI     R26, 0
   \   00000068   E0B0               LDI     R27, 0
   \                     ??EraseFlash_0:
   \   0000006A   30A0               CPI     R26, 0
   \   0000006C   EE00               LDI     R16, 224
   \   0000006E   07B0               CPC     R27, R16
   \   00000070   F410               BRCC    ??EraseFlash_1
   \   00000072   E011               LDI     R17, 1
   \   00000074   C001               RJMP    ??EraseFlash_2
   \                     ??EraseFlash_1:
   \   00000076   E010               LDI     R17, 0
   \                     ??EraseFlash_2:
   \   00000078   B70B               IN      R16, 0x3B
   \   0000007A   2300               TST     R16
   \   0000007C   F411               BRNE    ??EraseFlash_3
   \   0000007E   E001               LDI     R16, 1
   \   00000080   C001               RJMP    ??EraseFlash_4
   \                     ??EraseFlash_3:
   \   00000082   E000               LDI     R16, 0
   \                     ??EraseFlash_4:
   \   00000084   2B10               OR      R17, R16
   \   00000086   2311               TST     R17
   \   00000088   F089               BREQ    ??EraseFlash_5
    229                  write_page(address, (1 << PGERS) + (1 << SPMEN));              //Perform page erase
   \   0000008A   E023               LDI     R18, 3
   \   0000008C   018D               MOVW    R17:R16, R27:R26
   \   0000008E   ........           CALL    write_page
    230                  write_page(address, (1 << REENABLE_RWW_BIT) + (1 << SPMEN));  //Re-enable the RWW section
   \   00000092   E121               LDI     R18, 17
   \   00000094   018D               MOVW    R17:R16, R27:R26
   \   00000096   ........           CALL    write_page
    231          
    232                  if ( address >= (0xFFFF - PAGESIZE) ) //Last section on lower 64k segment is erased
   \   0000009A   3FAF               CPI     R26, 255
   \   0000009C   EF0E               LDI     R16, 254
   \   0000009E   07B0               CPC     R27, R16
   \   000000A0   F010               BRCS    ??EraseFlash_6
    233                      RAMPZ = (1 << RAMPZ0);         //RAMPZ has to incremented into upper 64k segment
   \   000000A2   E001               LDI     R16, 1
   \   000000A4   BF0B               OUT     0x3B, R16
    234              }
   \                     ??EraseFlash_6:
   \   000000A6   50A0               SUBI    R26, 0
   \   000000A8   4FBF               SBCI    R27, 255
   \   000000AA   CFDF               RJMP    ??EraseFlash_0
    235              RAMPZ = 0x00;                     //Clear RAMPZ pointer
   \                     ??EraseFlash_5:
   \   000000AC   E000               LDI     R16, 0
   \   000000AE   BF0B               OUT     0x3B, R16
    236          
    237          #else
    238          
    239              for ( address = 0; address < APP_END; address += PAGESIZE ) {  //Application section = 60 pages
    240                  write_page(address, (1 << PGERS) + (1 << SPMEN));       //Perform page erase
    241                  write_page(address, (1 << REENABLE_RWW_BIT) + (1 << SPMEN));  //Re-enable the RWW section
    242              }
    243          
    244          #endif
    245              TxBufferCh0[myUART.TxFirst++] = FLASH_ERASE_OK;                 // Answer that the erase is OK
   \   000000B0   ....               LDI     R30, LOW(myUART)
   \   000000B2   ....               LDI     R31, (myUART) >> 8
   \   000000B4   8100               LD      R16, Z
   \   000000B6   8111               LDD     R17, Z+1
   \   000000B8   01F8               MOVW    R31:R30, R17:R16
   \   000000BA   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000000BC   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000000BE   E000               LDI     R16, 0
   \   000000C0   8300               ST      Z, R16
   \   000000C2   ....               LDI     R30, LOW(myUART)
   \   000000C4   ....               LDI     R31, (myUART) >> 8
   \   000000C6   8100               LD      R16, Z
   \   000000C8   8111               LDD     R17, Z+1
   \   000000CA   5F0F               SUBI    R16, 255
   \   000000CC   4F1F               SBCI    R17, 255
   \   000000CE   8300               ST      Z, R16
   \   000000D0   8311               STD     Z+1, R17
    246          
    247              TxBufferCh0[ntna] = (myUART.TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   000000D2   ....               LDI     R30, LOW(myUART)
   \   000000D4   ....               LDI     R31, (myUART) >> 8
   \   000000D6   8100               LD      R16, Z
   \   000000D8   8111               LDD     R17, Z+1
   \   000000DA   1B08               SUB     R16, R24
   \   000000DC   5002               SUBI    R16, 2
   \   000000DE   01FC               MOVW    R31:R30, R25:R24
   \   000000E0   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000000E2   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000000E4   8300               ST      Z, R16
    248              TxBufferCh0[ntna + 1] = ((myUART.TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   000000E6   ....               LDI     R30, LOW(myUART)
   \   000000E8   ....               LDI     R31, (myUART) >> 8
   \   000000EA   8100               LD      R16, Z
   \   000000EC   8111               LDD     R17, Z+1
   \   000000EE   1B08               SUB     R16, R24
   \   000000F0   0B19               SBC     R17, R25
   \   000000F2   5002               SUBI    R16, 2
   \   000000F4   4010               SBCI    R17, 0
   \   000000F6   2F01               MOV     R16, R17
   \   000000F8   E010               LDI     R17, 0
   \   000000FA   01FC               MOVW    R31:R30, R25:R24
   \   000000FC   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000000FE   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000100   8301               STD     Z+1, R16
    249          
    250          }
   \   00000102   E0E4               LDI     R30, 4
   \   00000104   ........           JMP     ?EPILOGUE_B4_L09
   \   00000108                      REQUIRE _A_RAMPZ
    251          
    252          /*************************************************************************
    253          *
    254          * Program Flash 
    255          *
    256          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    257          void ProgramFlash(unsigned Pointer) {
   \                     ProgramFlash:
   \   00000000   ........           CALL    ?PROLOGUE14_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    258          
    259              unsigned ntna;
    260              myUART.RxSendReply = true;                               // flag for answering
   \   00000006   E001               LDI     R16, 1
   \   00000008   9300....           STS     (myUART + 24), R16
    261          
    262              TxBufferCh0[myUART.TxFirst++] = CMD_REP_FLASH_PROG & 0xff;
   \   0000000C   EA29               LDI     R18, 169
   \   0000000E   ....               LDI     R30, LOW(myUART)
   \   00000010   ....               LDI     R31, (myUART) >> 8
   \   00000012   8100               LD      R16, Z
   \   00000014   8111               LDD     R17, Z+1
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000001C   8320               ST      Z, R18
   \   0000001E   ....               LDI     R30, LOW(myUART)
   \   00000020   ....               LDI     R31, (myUART) >> 8
   \   00000022   8100               LD      R16, Z
   \   00000024   8111               LDD     R17, Z+1
   \   00000026   5F0F               SUBI    R16, 255
   \   00000028   4F1F               SBCI    R17, 255
   \   0000002A   8300               ST      Z, R16
   \   0000002C   8311               STD     Z+1, R17
    263              TxBufferCh0[myUART.TxFirst++] = CMD_REP_FLASH_PROG >> 8;
   \   0000002E   E027               LDI     R18, 7
   \   00000030   ....               LDI     R30, LOW(myUART)
   \   00000032   ....               LDI     R31, (myUART) >> 8
   \   00000034   8100               LD      R16, Z
   \   00000036   8111               LDD     R17, Z+1
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000003E   8320               ST      Z, R18
   \   00000040   ....               LDI     R30, LOW(myUART)
   \   00000042   ....               LDI     R31, (myUART) >> 8
   \   00000044   8100               LD      R16, Z
   \   00000046   8111               LDD     R17, Z+1
   \   00000048   5F0F               SUBI    R16, 255
   \   0000004A   4F1F               SBCI    R17, 255
   \   0000004C   8300               ST      Z, R16
   \   0000004E   8311               STD     Z+1, R17
    264              ntna = myUART.TxFirst;                                    // remember index
   \   00000050   ....               LDI     R30, LOW(myUART)
   \   00000052   ....               LDI     R31, (myUART) >> 8
   \   00000054   8080               LD      R8, Z
   \   00000056   8091               LDD     R9, Z+1
    265              myUART.TxFirst += 2;                                      // two byte length
   \   00000058   ....               LDI     R30, LOW(myUART)
   \   0000005A   ....               LDI     R31, (myUART) >> 8
   \   0000005C   8100               LD      R16, Z
   \   0000005E   8111               LDD     R17, Z+1
   \   00000060   5F0E               SUBI    R16, 254
   \   00000062   4F1F               SBCI    R17, 255
   \   00000064   8300               ST      Z, R16
   \   00000066   8311               STD     Z+1, R17
    266          
    267              unsigned Address = RxBufferCh0[Pointer + 0] + (RxBufferCh0[Pointer + 1] << 8); // save address
   \   00000068   01FD               MOVW    R31:R30, R27:R26
   \   0000006A   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   0000006E   8180               LD      R24, Z
   \   00000070   01FD               MOVW    R31:R30, R27:R26
   \   00000072   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   00000074   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   00000076   8191               LDD     R25, Z+1
    268              unsigned Nobytes = RxBufferCh0[Pointer + 2] + (RxBufferCh0[Pointer + 3] << 8); // save address
   \   00000078   01FD               MOVW    R31:R30, R27:R26
   \   0000007A   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   0000007E   8062               LDD     R6, Z+2
   \   00000080   01FD               MOVW    R31:R30, R27:R26
   \   00000082   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   00000084   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   00000086   8073               LDD     R7, Z+3
    269              Pointer += 4;
   \   00000088   9614               ADIW    R27:R26, 4
    270              unsigned Ptr = Pointer;
   \   0000008A   012D               MOVW    R5:R4, R27:R26
    271              if ( Nobytes > PAGESIZE ) {
   \   0000008C   E001               LDI     R16, 1
   \   0000008E   1660               CP      R6, R16
   \   00000090   E001               LDI     R16, 1
   \   00000092   0670               CPC     R7, R16
   \   00000094   F090               BRCS    ??ProgramFlash_0
    272                  TxBufferCh0[myUART.TxFirst++] = FLASH_PROG_PAGEF;               // Answer with Page fault
   \   00000096   E021               LDI     R18, 1
   \   00000098   ....               LDI     R30, LOW(myUART)
   \   0000009A   ....               LDI     R31, (myUART) >> 8
   \   0000009C   8100               LD      R16, Z
   \   0000009E   8111               LDD     R17, Z+1
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000000A6   8320               ST      Z, R18
   \   000000A8   ....               LDI     R30, LOW(myUART)
   \   000000AA   ....               LDI     R31, (myUART) >> 8
   \   000000AC   8100               LD      R16, Z
   \   000000AE   8111               LDD     R17, Z+1
   \   000000B0   5F0F               SUBI    R16, 255
   \   000000B2   4F1F               SBCI    R17, 255
   \   000000B4   8300               ST      Z, R16
   \   000000B6   8311               STD     Z+1, R17
   \   000000B8   C07E               RJMP    ??ProgramFlash_1
    273              } else {
    274          #ifdef LARGE_MEMORY
    275                  if ( Address >= 0x7FFF ) {
   \                     ??ProgramFlash_0:
   \   000000BA   3F8F               CPI     R24, 255
   \   000000BC   E70F               LDI     R16, 127
   \   000000BE   0790               CPC     R25, R16
   \   000000C0   F018               BRCS    ??ProgramFlash_2
    276                      RAMPZ = (1 << RAMPZ0);
   \   000000C2   E001               LDI     R16, 1
   \   000000C4   BF0B               OUT     0x3B, R16
   \   000000C6   C002               RJMP    ??ProgramFlash_3
    277                  } else {
    278                      RAMPZ = 0;
   \                     ??ProgramFlash_2:
   \   000000C8   E000               LDI     R16, 0
   \   000000CA   BF0B               OUT     0x3B, R16
    279                  }
    280          #endif
    281                  Address = Address << 1;                                     // convert from byte address to word address
   \                     ??ProgramFlash_3:
   \   000000CC   0F88               LSL     R24
   \   000000CE   1F99               ROL     R25
    282                  unsigned Addr = Address;                                             // mirror the address
   \   000000D0   015C               MOVW    R11:R10, R25:R24
    283                  for ( unsigned i = 0; i < Nobytes; i += 2, Address += 2, Pointer += 2 ) {              // write data to flash
   \   000000D2   24CC               CLR     R12
   \   000000D4   24DD               CLR     R13
   \                     ??ProgramFlash_4:
   \   000000D6   14C6               CP      R12, R6
   \   000000D8   04D7               CPC     R13, R7
   \   000000DA   F490               BRCC    ??ProgramFlash_5
    284                      fill_temp_buffer(RxBufferCh0[Pointer] + (RxBufferCh0[Pointer + 1] << 8), (Address)); //call asm routine.
   \   000000DC   019C               MOVW    R19:R18, R25:R24
   \   000000DE   01FD               MOVW    R31:R30, R27:R26
   \   000000E0   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   000000E2   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   000000E4   8100               LD      R16, Z
   \   000000E6   01FD               MOVW    R31:R30, R27:R26
   \   000000E8   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   000000EA   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   000000EC   8111               LDD     R17, Z+1
   \   000000EE   ........           CALL    fill_temp_buffer
    285                  }
   \   000000F2   E002               LDI     R16, 2
   \   000000F4   0EC0               ADD     R12, R16
   \   000000F6   E000               LDI     R16, 0
   \   000000F8   1ED0               ADC     R13, R16
   \   000000FA   9602               ADIW    R25:R24, 2
   \   000000FC   9612               ADIW    R27:R26, 2
   \   000000FE   CFEB               RJMP    ??ProgramFlash_4
    286                  write_page(Addr, (1 << PGWRT) + (1 << SPMEN));                  //Perform page write
   \                     ??ProgramFlash_5:
   \   00000100   E025               LDI     R18, 5
   \   00000102   0185               MOVW    R17:R16, R11:R10
   \   00000104   ........           CALL    write_page
    287                  write_page(Addr, (1 << REENABLE_RWW_BIT) + (1 << SPMEN));       //Re-enable the RWW section
   \   00000108   E121               LDI     R18, 17
   \   0000010A   0185               MOVW    R17:R16, R11:R10
   \   0000010C   ........           CALL    write_page
    288                  TxBufferCh0[myUART.TxFirst++] = FLASH_PROG_OK;       // OK
   \   00000110   ....               LDI     R30, LOW(myUART)
   \   00000112   ....               LDI     R31, (myUART) >> 8
   \   00000114   8100               LD      R16, Z
   \   00000116   8111               LDD     R17, Z+1
   \   00000118   01F8               MOVW    R31:R30, R17:R16
   \   0000011A   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   0000011C   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000011E   E000               LDI     R16, 0
   \   00000120   8300               ST      Z, R16
   \   00000122   ....               LDI     R30, LOW(myUART)
   \   00000124   ....               LDI     R31, (myUART) >> 8
   \   00000126   8100               LD      R16, Z
   \   00000128   8111               LDD     R17, Z+1
   \   0000012A   5F0F               SUBI    R16, 255
   \   0000012C   4F1F               SBCI    R17, 255
   \   0000012E   8300               ST      Z, R16
   \   00000130   8311               STD     Z+1, R17
    289          
    290                  for ( unsigned i = 0; i < Nobytes; i += 2, Addr += 2 ) {         // check the whole buffer
   \   00000132   24CC               CLR     R12
   \   00000134   24DD               CLR     R13
   \                     ??ProgramFlash_6:
   \   00000136   14C6               CP      R12, R6
   \   00000138   04D7               CPC     R13, R7
   \   0000013A   F5E8               BRCC    ??ProgramFlash_1
    291                      unsigned intval = read_program_memory(Addr, 0x00);
   \   0000013C   E020               LDI     R18, 0
   \   0000013E   0185               MOVW    R17:R16, R11:R10
   \   00000140   ........           CALL    read_program_memory
   \   00000144   0198               MOVW    R19:R18, R17:R16
    292                      if ( RxBufferCh0[Ptr++] != (intval & 0xff) ) {
   \   00000146   01F2               MOVW    R31:R30, R5:R4
   \   00000148   01AF               MOVW    R21:R20, R31:R30
   \   0000014A   5F4F               SUBI    R20, 255
   \   0000014C   4F5F               SBCI    R21, 255
   \   0000014E   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   00000150   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   00000152   8100               LD      R16, Z
   \   00000154   E010               LDI     R17, 0
   \   00000156   01B9               MOVW    R23:R22, R19:R18
   \   00000158   E070               LDI     R23, 0
   \   0000015A   1706               CP      R16, R22
   \   0000015C   0717               CPC     R17, R23
   \   0000015E   F049               BREQ    ??ProgramFlash_7
    293                          TxBufferCh0[myUART.TxFirst - 1] = FLASH_PROG_ERROR;       // compare error
   \   00000160   E062               LDI     R22, 2
   \   00000162   ....               LDI     R30, LOW(myUART)
   \   00000164   ....               LDI     R31, (myUART) >> 8
   \   00000166   8100               LD      R16, Z
   \   00000168   8111               LDD     R17, Z+1
   \   0000016A   01F8               MOVW    R31:R30, R17:R16
   \   0000016C   ....               SUBI    R30, LOW((-(TxBufferCh0 - 1) & 0xFFFF))
   \   0000016E   ....               SBCI    R31, HIGH((-(TxBufferCh0 - 1) & 0xFFFF))
   \   00000170   8360               ST      Z, R22
    294                      }
    295                      if ( RxBufferCh0[Ptr++] != ((intval >> 8) & 0xff) ) {
   \                     ??ProgramFlash_7:
   \   00000172   01FA               MOVW    R31:R30, R21:R20
   \   00000174   012F               MOVW    R5:R4, R31:R30
   \   00000176   E001               LDI     R16, 1
   \   00000178   0E40               ADD     R4, R16
   \   0000017A   E000               LDI     R16, 0
   \   0000017C   1E50               ADC     R5, R16
   \   0000017E   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   00000180   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   00000182   8100               LD      R16, Z
   \   00000184   E010               LDI     R17, 0
   \   00000186   01A9               MOVW    R21:R20, R19:R18
   \   00000188   2F45               MOV     R20, R21
   \   0000018A   E050               LDI     R21, 0
   \   0000018C   1704               CP      R16, R20
   \   0000018E   0715               CPC     R17, R21
   \   00000190   F049               BREQ    ??ProgramFlash_8
    296                          TxBufferCh0[myUART.TxFirst - 1] = FLASH_PROG_ERROR;       // compare error
   \   00000192   E042               LDI     R20, 2
   \   00000194   ....               LDI     R30, LOW(myUART)
   \   00000196   ....               LDI     R31, (myUART) >> 8
   \   00000198   8100               LD      R16, Z
   \   0000019A   8111               LDD     R17, Z+1
   \   0000019C   01F8               MOVW    R31:R30, R17:R16
   \   0000019E   ....               SUBI    R30, LOW((-(TxBufferCh0 - 1) & 0xFFFF))
   \   000001A0   ....               SBCI    R31, HIGH((-(TxBufferCh0 - 1) & 0xFFFF))
   \   000001A2   8340               ST      Z, R20
    297                      }
    298                  }
   \                     ??ProgramFlash_8:
   \   000001A4   E002               LDI     R16, 2
   \   000001A6   0EC0               ADD     R12, R16
   \   000001A8   E000               LDI     R16, 0
   \   000001AA   1ED0               ADC     R13, R16
   \   000001AC   E002               LDI     R16, 2
   \   000001AE   0EA0               ADD     R10, R16
   \   000001B0   E000               LDI     R16, 0
   \   000001B2   1EB0               ADC     R11, R16
   \   000001B4   CFC0               RJMP    ??ProgramFlash_6
    299              }
    300          
    301              TxBufferCh0[ntna] = (myUART.TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??ProgramFlash_1:
   \   000001B6   ....               LDI     R30, LOW(myUART)
   \   000001B8   ....               LDI     R31, (myUART) >> 8
   \   000001BA   8100               LD      R16, Z
   \   000001BC   8111               LDD     R17, Z+1
   \   000001BE   1908               SUB     R16, R8
   \   000001C0   5002               SUBI    R16, 2
   \   000001C2   01F4               MOVW    R31:R30, R9:R8
   \   000001C4   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000001C6   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000001C8   8300               ST      Z, R16
    302              TxBufferCh0[ntna + 1] = ((myUART.TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   000001CA   ....               LDI     R30, LOW(myUART)
   \   000001CC   ....               LDI     R31, (myUART) >> 8
   \   000001CE   8100               LD      R16, Z
   \   000001D0   8111               LDD     R17, Z+1
   \   000001D2   1908               SUB     R16, R8
   \   000001D4   0919               SBC     R17, R9
   \   000001D6   5002               SUBI    R16, 2
   \   000001D8   4010               SBCI    R17, 0
   \   000001DA   2F01               MOV     R16, R17
   \   000001DC   E010               LDI     R17, 0
   \   000001DE   01F4               MOVW    R31:R30, R9:R8
   \   000001E0   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000001E2   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000001E4   8301               STD     Z+1, R16
    303          
    304          }
   \   000001E6   E0EE               LDI     R30, 14
   \   000001E8   ........           JMP     ?EPILOGUE_B14_L09
   \   000001EC                      REQUIRE _A_RAMPZ
    305          
    306          /*************************************************************************
    307          *
    308          * Read Flash 
    309          *
    310          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    311          void ReadFlash(unsigned Pointer) {
   \                     ReadFlash:
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    312          
    313              unsigned short ntna, intval;
    314              myUART.RxSendReply = true;                               // flag for answering
   \   00000006   E001               LDI     R16, 1
   \   00000008   9300....           STS     (myUART + 24), R16
    315          
    316              TxBufferCh0[myUART.TxFirst++] = CMD_REP_FLASH_READ & 0xff;
   \   0000000C   EB23               LDI     R18, 179
   \   0000000E   ....               LDI     R30, LOW(myUART)
   \   00000010   ....               LDI     R31, (myUART) >> 8
   \   00000012   8100               LD      R16, Z
   \   00000014   8111               LDD     R17, Z+1
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000001C   8320               ST      Z, R18
   \   0000001E   ....               LDI     R30, LOW(myUART)
   \   00000020   ....               LDI     R31, (myUART) >> 8
   \   00000022   8100               LD      R16, Z
   \   00000024   8111               LDD     R17, Z+1
   \   00000026   5F0F               SUBI    R16, 255
   \   00000028   4F1F               SBCI    R17, 255
   \   0000002A   8300               ST      Z, R16
   \   0000002C   8311               STD     Z+1, R17
    317              TxBufferCh0[myUART.TxFirst++] = CMD_REP_FLASH_READ >> 8;
   \   0000002E   E027               LDI     R18, 7
   \   00000030   ....               LDI     R30, LOW(myUART)
   \   00000032   ....               LDI     R31, (myUART) >> 8
   \   00000034   8100               LD      R16, Z
   \   00000036   8111               LDD     R17, Z+1
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000003E   8320               ST      Z, R18
   \   00000040   ....               LDI     R30, LOW(myUART)
   \   00000042   ....               LDI     R31, (myUART) >> 8
   \   00000044   8100               LD      R16, Z
   \   00000046   8111               LDD     R17, Z+1
   \   00000048   5F0F               SUBI    R16, 255
   \   0000004A   4F1F               SBCI    R17, 255
   \   0000004C   8300               ST      Z, R16
   \   0000004E   8311               STD     Z+1, R17
    318              ntna = myUART.TxFirst;                                    // remember index
   \   00000050   ....               LDI     R30, LOW(myUART)
   \   00000052   ....               LDI     R31, (myUART) >> 8
   \   00000054   8060               LD      R6, Z
   \   00000056   8071               LDD     R7, Z+1
    319              myUART.TxFirst += 2;                                      // two byte length
   \   00000058   ....               LDI     R30, LOW(myUART)
   \   0000005A   ....               LDI     R31, (myUART) >> 8
   \   0000005C   8100               LD      R16, Z
   \   0000005E   8111               LDD     R17, Z+1
   \   00000060   5F0E               SUBI    R16, 254
   \   00000062   4F1F               SBCI    R17, 255
   \   00000064   8300               ST      Z, R16
   \   00000066   8311               STD     Z+1, R17
    320          
    321              for ( unsigned i = 0; i < 4; i++ ) {
   \   00000068   E080               LDI     R24, 0
   \   0000006A   E090               LDI     R25, 0
   \                     ??ReadFlash_0:
   \   0000006C   3084               CPI     R24, 4
   \   0000006E   E000               LDI     R16, 0
   \   00000070   0790               CPC     R25, R16
   \   00000072   F4C0               BRCC    ??ReadFlash_1
    322                  TxBufferCh0[myUART.TxFirst++] = RxBufferCh0[Pointer + i]; // ansver with address and nob
   \   00000074   01FD               MOVW    R31:R30, R27:R26
   \   00000076   0FE8               ADD     R30, R24
   \   00000078   1FF9               ADC     R31, R25
   \   0000007A   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   0000007E   8120               LD      R18, Z
   \   00000080   ....               LDI     R30, LOW(myUART)
   \   00000082   ....               LDI     R31, (myUART) >> 8
   \   00000084   8100               LD      R16, Z
   \   00000086   8111               LDD     R17, Z+1
   \   00000088   01F8               MOVW    R31:R30, R17:R16
   \   0000008A   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   0000008C   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000008E   8320               ST      Z, R18
   \   00000090   ....               LDI     R30, LOW(myUART)
   \   00000092   ....               LDI     R31, (myUART) >> 8
   \   00000094   8100               LD      R16, Z
   \   00000096   8111               LDD     R17, Z+1
   \   00000098   5F0F               SUBI    R16, 255
   \   0000009A   4F1F               SBCI    R17, 255
   \   0000009C   8300               ST      Z, R16
   \   0000009E   8311               STD     Z+1, R17
    323              }
   \   000000A0   9601               ADIW    R25:R24, 1
   \   000000A2   CFE4               RJMP    ??ReadFlash_0
    324          
    325              unsigned Address = RxBufferCh0[Pointer + 0] + (RxBufferCh0[Pointer + 1] << 8); // save address
   \                     ??ReadFlash_1:
   \   000000A4   01FD               MOVW    R31:R30, R27:R26
   \   000000A6   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   000000A8   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   000000AA   8180               LD      R24, Z
   \   000000AC   01FD               MOVW    R31:R30, R27:R26
   \   000000AE   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   000000B0   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   000000B2   8191               LDD     R25, Z+1
    326              unsigned Nobytes = RxBufferCh0[Pointer + 2] + (RxBufferCh0[Pointer + 3] << 8); // save address
   \   000000B4   01FD               MOVW    R31:R30, R27:R26
   \   000000B6   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   000000BA   8042               LDD     R4, Z+2
   \   000000BC   01FD               MOVW    R31:R30, R27:R26
   \   000000BE   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   000000C0   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   000000C2   8053               LDD     R5, Z+3
    327              if ( Nobytes > PAGESIZE ) {
   \   000000C4   E001               LDI     R16, 1
   \   000000C6   1640               CP      R4, R16
   \   000000C8   E001               LDI     R16, 1
   \   000000CA   0650               CPC     R5, R16
   \   000000CC   F090               BRCS    ??ReadFlash_2
    328                  TxBufferCh0[myUART.TxFirst++] = FLASH_PROG_PAGEF;               // Answer with Page fault
   \   000000CE   E001               LDI     R16, 1
   \   000000D0   ....               LDI     R30, LOW(myUART)
   \   000000D2   ....               LDI     R31, (myUART) >> 8
   \   000000D4   8120               LD      R18, Z
   \   000000D6   8131               LDD     R19, Z+1
   \   000000D8   01F9               MOVW    R31:R30, R19:R18
   \   000000DA   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   000000DC   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   000000DE   8300               ST      Z, R16
   \   000000E0   ....               LDI     R30, LOW(myUART)
   \   000000E2   ....               LDI     R31, (myUART) >> 8
   \   000000E4   8100               LD      R16, Z
   \   000000E6   8111               LDD     R17, Z+1
   \   000000E8   5F0F               SUBI    R16, 255
   \   000000EA   4F1F               SBCI    R17, 255
   \   000000EC   8300               ST      Z, R16
   \   000000EE   8311               STD     Z+1, R17
   \   000000F0   C03D               RJMP    ??ReadFlash_3
    329              } else {
    330          #ifdef LARGE_MEMORY
    331                  if ( Address >= 0x7FFF ) {
   \                     ??ReadFlash_2:
   \   000000F2   3F8F               CPI     R24, 255
   \   000000F4   E70F               LDI     R16, 127
   \   000000F6   0790               CPC     R25, R16
   \   000000F8   F018               BRCS    ??ReadFlash_4
    332                      RAMPZ = (1 << RAMPZ0);
   \   000000FA   E001               LDI     R16, 1
   \   000000FC   BF0B               OUT     0x3B, R16
   \   000000FE   C002               RJMP    ??ReadFlash_5
    333                  } else {
    334                      RAMPZ = 0;
   \                     ??ReadFlash_4:
   \   00000100   E000               LDI     R16, 0
   \   00000102   BF0B               OUT     0x3B, R16
    335                  }
    336          #endif
    337                  Address = Address << 1;             // convert from byte address to word address
   \                     ??ReadFlash_5:
   \   00000104   0F88               LSL     R24
   \   00000106   1F99               ROL     R25
    338                  for ( unsigned i = 0; i < Nobytes; i += 2, Address += 2 ) {   // receive the whole buffer
   \   00000108   2488               CLR     R8
   \   0000010A   2499               CLR     R9
   \                     ??ReadFlash_6:
   \   0000010C   1484               CP      R8, R4
   \   0000010E   0495               CPC     R9, R5
   \   00000110   F568               BRCC    ??ReadFlash_3
    339                      unsigned intval = read_program_memory(Address, 0x00);
   \   00000112   E020               LDI     R18, 0
   \   00000114   018C               MOVW    R17:R16, R25:R24
   \   00000116   ........           CALL    read_program_memory
   \   0000011A   0198               MOVW    R19:R18, R17:R16
    340                      TxBufferCh0[myUART.TxFirst++] = intval & 0xff;
   \   0000011C   ....               LDI     R30, LOW(myUART)
   \   0000011E   ....               LDI     R31, (myUART) >> 8
   \   00000120   8100               LD      R16, Z
   \   00000122   8111               LDD     R17, Z+1
   \   00000124   01F8               MOVW    R31:R30, R17:R16
   \   00000126   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000128   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000012A   8320               ST      Z, R18
   \   0000012C   ....               LDI     R30, LOW(myUART)
   \   0000012E   ....               LDI     R31, (myUART) >> 8
   \   00000130   8100               LD      R16, Z
   \   00000132   8111               LDD     R17, Z+1
   \   00000134   5F0F               SUBI    R16, 255
   \   00000136   4F1F               SBCI    R17, 255
   \   00000138   8300               ST      Z, R16
   \   0000013A   8311               STD     Z+1, R17
    341                      TxBufferCh0[myUART.TxFirst++] = (intval >> 8) & 0xff;
   \   0000013C   2F23               MOV     R18, R19
   \   0000013E   E030               LDI     R19, 0
   \   00000140   ....               LDI     R30, LOW(myUART)
   \   00000142   ....               LDI     R31, (myUART) >> 8
   \   00000144   8100               LD      R16, Z
   \   00000146   8111               LDD     R17, Z+1
   \   00000148   01F8               MOVW    R31:R30, R17:R16
   \   0000014A   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   0000014C   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000014E   8320               ST      Z, R18
   \   00000150   ....               LDI     R30, LOW(myUART)
   \   00000152   ....               LDI     R31, (myUART) >> 8
   \   00000154   8100               LD      R16, Z
   \   00000156   8111               LDD     R17, Z+1
   \   00000158   5F0F               SUBI    R16, 255
   \   0000015A   4F1F               SBCI    R17, 255
   \   0000015C   8300               ST      Z, R16
   \   0000015E   8311               STD     Z+1, R17
    342                  }
   \   00000160   E002               LDI     R16, 2
   \   00000162   0E80               ADD     R8, R16
   \   00000164   E000               LDI     R16, 0
   \   00000166   1E90               ADC     R9, R16
   \   00000168   9602               ADIW    R25:R24, 2
   \   0000016A   CFD0               RJMP    ??ReadFlash_6
    343              }
    344          
    345              TxBufferCh0[ntna] = (myUART.TxFirst  - ntna - 2) & 0xff;      // length of data block lb
   \                     ??ReadFlash_3:
   \   0000016C   ....               LDI     R30, LOW(myUART)
   \   0000016E   ....               LDI     R31, (myUART) >> 8
   \   00000170   8100               LD      R16, Z
   \   00000172   8111               LDD     R17, Z+1
   \   00000174   1906               SUB     R16, R6
   \   00000176   5002               SUBI    R16, 2
   \   00000178   01F3               MOVW    R31:R30, R7:R6
   \   0000017A   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   0000017C   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000017E   8300               ST      Z, R16
    346              TxBufferCh0[ntna + 1] = ((myUART.TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   00000180   ....               LDI     R30, LOW(myUART)
   \   00000182   ....               LDI     R31, (myUART) >> 8
   \   00000184   8100               LD      R16, Z
   \   00000186   8111               LDD     R17, Z+1
   \   00000188   1906               SUB     R16, R6
   \   0000018A   0917               SBC     R17, R7
   \   0000018C   5002               SUBI    R16, 2
   \   0000018E   4010               SBCI    R17, 0
   \   00000190   2F01               MOV     R16, R17
   \   00000192   E010               LDI     R17, 0
   \   00000194   01F3               MOVW    R31:R30, R7:R6
   \   00000196   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000198   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   0000019A   8301               STD     Z+1, R16
    347          
    348          }
   \   0000019C   E0EA               LDI     R30, 10
   \   0000019E   ........           JMP     ?EPILOGUE_B10_L09
   \   000001A2                      REQUIRE _A_RAMPZ
    349          
    350          /*************************************************************************
    351          *
    352          *  Exit bootloader program
    353          *
    354          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    355          void ExitBootloader(char ch) {
   \                     ExitBootloader:
    356          
    357          
    358              while ( (EECR & 1 << EEPE) != 0 ) //chech if EEPROM is ready
   \                     ??ExitBootloader_0:
   \   00000000   99F9               SBIC    0x1F, 0x01
   \   00000002   CFFE               RJMP    ??ExitBootloader_0
    359              ;
    360              EEARL = (0x0fff & 0xff);
   \   00000004   EF1F               LDI     R17, 255
   \   00000006   BD11               OUT     0x21, R17
    361              EEARH = (0x0fff >> 8);
   \   00000008   E01F               LDI     R17, 15
   \   0000000A   BD12               OUT     0x22, R17
    362              EEDR = 0xaa;
   \   0000000C   EA1A               LDI     R17, 170
   \   0000000E   BD10               OUT     0x20, R17
    363              EECR |= (1 << EEMPE);
   \   00000010   9AFA               SBI     0x1F, 0x02
    364              EECR |= (1 << EEPE);
   \   00000012   9AF9               SBI     0x1F, 0x01
    365              while ( EECR & (1 << EEPE) );
   \                     ??ExitBootloader_1:
   \   00000014   99F9               SBIC    0x1F, 0x01
   \   00000016   CFFE               RJMP    ??ExitBootloader_1
    366              WDTCSR = 0x08;               //Start watchdog to genetate restart
   \   00000018   E018               LDI     R17, 8
   \   0000001A   93100060           STS     96, R17
    367              //AppStart();        					// Jump to Reset vector 0x0000 in Application Section
    368          
    369          }
   \   0000001E   9508               RET
   \   00000020                      REQUIRE _A_EECR
   \   00000020                      REQUIRE _A_EEAR
   \   00000020                      REQUIRE _A_EEDR
   \   00000020                      REQUIRE _A_WDTCSR
    370          
    371          
    372          /*************************************************************************
    373          *
    374          *  Transmitting data on USARTs
    375          *
    376          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    377          void SendPacketUart(void) {
   \                     SendPacketUart:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    378              unsigned cnt = 0;
   \   00000004   E080               LDI     R24, 0
   \   00000006   E090               LDI     R25, 0
    379          
    380              for ( unsigned delay = 0; delay < 0xffff; delay++ ) {
   \   00000008   E0E0               LDI     R30, 0
   \   0000000A   E0F0               LDI     R31, 0
   \                     ??SendPacketUart_0:
   \   0000000C   3FEF               CPI     R30, 255
   \   0000000E   EF0F               LDI     R16, 255
   \   00000010   07F0               CPC     R31, R16
   \   00000012   F021               BREQ    ??SendPacketUart_1
    381                  asm("nop");
   \   00000014   0000               nop
    382                  cnt++;
   \   00000016   9601               ADIW    R25:R24, 1
    383              }
   \   00000018   9631               ADIW    R31:R30, 1
   \   0000001A   CFF8               RJMP    ??SendPacketUart_0
    384          
    385              while ( myUART.TxCount > 0 ) {               // Any characters to send?
   \                     ??SendPacketUart_1:
   \   0000001C   ....               LDI     R30, LOW(myUART)
   \   0000001E   ....               LDI     R31, (myUART) >> 8
   \   00000020   8104               LDD     R16, Z+4
   \   00000022   8115               LDD     R17, Z+5
   \   00000024   2B01               OR      R16, R17
   \   00000026   F149               BREQ    ??SendPacketUart_2
    386                  sendchar(TxBufferCh0[myUART.TxLast]);  // Send a character
   \   00000028   ....               LDI     R30, LOW(myUART)
   \   0000002A   ....               LDI     R31, (myUART) >> 8
   \   0000002C   8102               LDD     R16, Z+2
   \   0000002E   8113               LDD     R17, Z+3
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000034   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000036   8100               LD      R16, Z
   \   00000038   ........           CALL    sendchar
    387          
    388                  if ( (++myUART.TxLast) > TXSIZE_UART ) {     // End of buffer?
   \   0000003C   ....               LDI     R30, LOW(myUART)
   \   0000003E   ....               LDI     R31, (myUART) >> 8
   \   00000040   8102               LDD     R16, Z+2
   \   00000042   8113               LDD     R17, Z+3
   \   00000044   5F0F               SUBI    R16, 255
   \   00000046   4F1F               SBCI    R17, 255
   \   00000048   8302               STD     Z+2, R16
   \   0000004A   8313               STD     Z+3, R17
   \   0000004C   ....               LDI     R30, LOW(myUART)
   \   0000004E   ....               LDI     R31, (myUART) >> 8
   \   00000050   8102               LDD     R16, Z+2
   \   00000052   8113               LDD     R17, Z+3
   \   00000054   350F               CPI     R16, 95
   \   00000056   E021               LDI     R18, 1
   \   00000058   0712               CPC     R17, R18
   \   0000005A   F030               BRCS    ??SendPacketUart_3
    389                      myUART.TxLast = 0;                     // yes, reset pointer
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   E010               LDI     R17, 0
   \   00000060   ....               LDI     R30, LOW(myUART)
   \   00000062   ....               LDI     R31, (myUART) >> 8
   \   00000064   8302               STD     Z+2, R16
   \   00000066   8313               STD     Z+3, R17
    390                  }
    391                  myUART.TxCount--;
   \                     ??SendPacketUart_3:
   \   00000068   ....               LDI     R30, LOW(myUART)
   \   0000006A   ....               LDI     R31, (myUART) >> 8
   \   0000006C   8104               LDD     R16, Z+4
   \   0000006E   8115               LDD     R17, Z+5
   \   00000070   5001               SUBI    R16, 1
   \   00000072   4010               SBCI    R17, 0
   \   00000074   8304               STD     Z+4, R16
   \   00000076   8315               STD     Z+5, R17
   \   00000078   CFD1               RJMP    ??SendPacketUart_1
    392              }
    393              PORTE &= ~0x04;                                     // TXE0 off
   \                     ??SendPacketUart_2:
   \   0000007A   9872               CBI     0x0E, 0x02
    394              cnt = 0;
   \   0000007C   E000               LDI     R16, 0
   \   0000007E   E010               LDI     R17, 0
    395          }
   \   00000080   9189               LD      R24, Y+
   \   00000082   9199               LD      R25, Y+
   \   00000084   9508               RET
   \   00000086                      REQUIRE _A_PORTE
    396          
    397          /*************************************************************************
    398          *
    399          *  Receive data on USARTs
    400          *
    401          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    402          void ReceivePacketUart(char ch) {
   \                     ReceivePacketUart:
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    403          
    404              switch ( myUART.RxState ) {                  // check status
   \   00000004   9100....           LDS     R16, (myUART + 16)
   \   00000008   5000               SUBI    R16, 0
   \   0000000A   F049               BREQ    ??ReceivePacketUart_0
   \   0000000C   950A               DEC     R16
   \   0000000E   F041               BREQ    ??ReceivePacketUart_1
   \   00000010   950A               DEC     R16
   \   00000012   F409               BRNE    $+2+2
   \   00000014   C04E               RJMP    ??ReceivePacketUart_2
   \   00000016   5008               SUBI    R16, 8
   \   00000018   F409               BRNE    $+2+2
   \   0000001A   C08B               RJMP    ??ReceivePacketUart_3
   \   0000001C   C089               RJMP    ??ReceivePacketUart_4
    405              case SYNC :
    406                  // all functionallity in inerrupt routine
    407                  break;
   \                     ??ReceivePacketUart_0:
   \   0000001E   C089               RJMP    ??ReceivePacketUart_3
    408              case HEADER :
    409                  if ( myUART.RxLast >= 6 ) {             // receive header
   \                     ??ReceivePacketUart_1:
   \   00000020   ....               LDI     R30, LOW(myUART)
   \   00000022   ....               LDI     R31, (myUART) >> 8
   \   00000024   8504               LDD     R16, Z+12
   \   00000026   8515               LDD     R17, Z+13
   \   00000028   3006               CPI     R16, 6
   \   0000002A   4010               SBCI    R17, 0
   \   0000002C   F408               BRCC    $+2+2
   \   0000002E   C081               RJMP    ??ReceivePacketUart_3
    410                      myUART.RxPacklen = (RxBufferCh0[4] +
    411                                          (RxBufferCh0[5] * 256));    // Find length of package
   \   00000030   9100....           LDS     R16, (RxBufferCh0 + 4)
   \   00000034   9110....           LDS     R17, (RxBufferCh0 + 5)
   \   00000038   ....               LDI     R30, LOW(myUART)
   \   0000003A   ....               LDI     R31, (myUART) >> 8
   \   0000003C   8B04               STD     Z+20, R16
   \   0000003E   8B15               STD     Z+21, R17
    412                      if ( CalcDSRxChecksum(ch, 6) && (RxBufferCh0[0] == (0x10 + UnitID)) ) {
   \   00000040   E026               LDI     R18, 6
   \   00000042   E030               LDI     R19, 0
   \   00000044   2F08               MOV     R16, R24
   \   00000046   ....               RCALL   CalcDSRxChecksum
   \   00000048   2B01               OR      R16, R17
   \   0000004A   F189               BREQ    ??ReceivePacketUart_5
   \   0000004C   9120....           LDS     R18, RxBufferCh0
   \   00000050   E030               LDI     R19, 0
   \   00000052   9100....           LDS     R16, UnitID
   \   00000056   E010               LDI     R17, 0
   \   00000058   5F00               SUBI    R16, 240
   \   0000005A   4F1F               SBCI    R17, 255
   \   0000005C   1720               CP      R18, R16
   \   0000005E   0731               CPC     R19, R17
   \   00000060   F531               BRNE    ??ReceivePacketUart_5
    413                          // header checksum OK and to me
    414                          if ( (myUART.RxPacklen < ((short)RXSIZE_UART - myUART.RxLast)) &&    /* chk. header */
    415                               (myUART.RxPacklen >= MIN_PACK_LEN) ) {
   \   00000062   ....               LDI     R30, LOW(myUART)
   \   00000064   ....               LDI     R31, (myUART) >> 8
   \   00000066   8924               LDD     R18, Z+20
   \   00000068   8935               LDD     R19, Z+21
   \   0000006A   E50E               LDI     R16, 94
   \   0000006C   E011               LDI     R17, 1
   \   0000006E   ....               LDI     R30, LOW(myUART)
   \   00000070   ....               LDI     R31, (myUART) >> 8
   \   00000072   8544               LDD     R20, Z+12
   \   00000074   8555               LDD     R21, Z+13
   \   00000076   1B04               SUB     R16, R20
   \   00000078   0B15               SBC     R17, R21
   \   0000007A   1720               CP      R18, R16
   \   0000007C   0731               CPC     R19, R17
   \   0000007E   F4A8               BRCC    ??ReceivePacketUart_6
   \   00000080   ....               LDI     R30, LOW(myUART)
   \   00000082   ....               LDI     R31, (myUART) >> 8
   \   00000084   8904               LDD     R16, Z+20
   \   00000086   8915               LDD     R17, Z+21
   \   00000088   3007               CPI     R16, 7
   \   0000008A   4010               SBCI    R17, 0
   \   0000008C   F070               BRCS    ??ReceivePacketUart_6
    416                              myUART.RxState = RECEIVE;       // Header ok og to data receive state
   \   0000008E   E002               LDI     R16, 2
   \   00000090   9300....           STS     (myUART + 16), R16
    417                              myUART.RxCount = myUART.RxLast + 1;    // Set receive counter
   \   00000094   ....               LDI     R30, LOW(myUART)
   \   00000096   ....               LDI     R31, (myUART) >> 8
   \   00000098   8504               LDD     R16, Z+12
   \   0000009A   8515               LDD     R17, Z+13
   \   0000009C   5F0F               SUBI    R16, 255
   \   0000009E   4F1F               SBCI    R17, 255
   \   000000A0   ....               LDI     R30, LOW(myUART)
   \   000000A2   ....               LDI     R31, (myUART) >> 8
   \   000000A4   8706               STD     Z+14, R16
   \   000000A6   8717               STD     Z+15, R17
   \   000000A8   C044               RJMP    ??ReceivePacketUart_3
    418                          } else {
    419                              GoToSyncUART();                        // go to sync modus for recive
   \                     ??ReceivePacketUart_6:
   \   000000AA   ....               RCALL   GoToSyncUART
   \   000000AC   C042               RJMP    ??ReceivePacketUart_3
    420                          }
    421                      } else {
    422                          GoToSyncUART();                            // go to sync modus for recive
   \                     ??ReceivePacketUart_5:
   \   000000AE   ....               RCALL   GoToSyncUART
    423                      }
    424                  }
    425                  break;
   \   000000B0   C040               RJMP    ??ReceivePacketUart_3
    426              case RECEIVE :
    427                  if ( ++myUART.RxCount >= myUART.RxPacklen ) {
   \                     ??ReceivePacketUart_2:
   \   000000B2   ....               LDI     R30, LOW(myUART)
   \   000000B4   ....               LDI     R31, (myUART) >> 8
   \   000000B6   8506               LDD     R16, Z+14
   \   000000B8   8517               LDD     R17, Z+15
   \   000000BA   5F0F               SUBI    R16, 255
   \   000000BC   4F1F               SBCI    R17, 255
   \   000000BE   8706               STD     Z+14, R16
   \   000000C0   8717               STD     Z+15, R17
   \   000000C2   ....               LDI     R30, LOW(myUART)
   \   000000C4   ....               LDI     R31, (myUART) >> 8
   \   000000C6   8506               LDD     R16, Z+14
   \   000000C8   8517               LDD     R17, Z+15
   \   000000CA   ....               LDI     R30, LOW(myUART)
   \   000000CC   ....               LDI     R31, (myUART) >> 8
   \   000000CE   8924               LDD     R18, Z+20
   \   000000D0   8935               LDD     R19, Z+21
   \   000000D2   1702               CP      R16, R18
   \   000000D4   0713               CPC     R17, R19
   \   000000D6   F168               BRCS    ??ReceivePacketUart_3
    428                      if ( (RxBufferCh0[myUART.RxPacklen - 1]) == ANPRO10_EOT ) {
   \   000000D8   ....               LDI     R30, LOW(myUART)
   \   000000DA   ....               LDI     R31, (myUART) >> 8
   \   000000DC   8904               LDD     R16, Z+20
   \   000000DE   8915               LDD     R17, Z+21
   \   000000E0   01F8               MOVW    R31:R30, R17:R16
   \   000000E2   ....               SUBI    R30, LOW((-(RxBufferCh0 - 1) & 0xFFFF))
   \   000000E4   ....               SBCI    R31, HIGH((-(RxBufferCh0 - 1) & 0xFFFF))
   \   000000E6   8100               LD      R16, Z
   \   000000E8   3004               CPI     R16, 4
   \   000000EA   F501               BRNE    ??ReceivePacketUart_7
    429                          if ( CalcDSRxChecksum(ch, myUART.RxPacklen - 2) ) {
   \   000000EC   ....               LDI     R30, LOW(myUART)
   \   000000EE   ....               LDI     R31, (myUART) >> 8
   \   000000F0   8924               LDD     R18, Z+20
   \   000000F2   8935               LDD     R19, Z+21
   \   000000F4   5022               SUBI    R18, 2
   \   000000F6   4030               SBCI    R19, 0
   \   000000F8   2F08               MOV     R16, R24
   \   000000FA   ....               RCALL   CalcDSRxChecksum
   \   000000FC   2B01               OR      R16, R17
   \   000000FE   F0A1               BREQ    ??ReceivePacketUart_8
    430                              if ( (RxBufferCh0[1] == MyAddress()) ||       // message to me? or
    431                                   (RxBufferCh0[1] == 0xff) ) {            // broadcast
   \   00000100   ........           CALL    MyAddress
   \   00000104   9110....           LDS     R17, (RxBufferCh0 + 1)
   \   00000108   1710               CP      R17, R16
   \   0000010A   F021               BREQ    ??ReceivePacketUart_9
   \   0000010C   9100....           LDS     R16, (RxBufferCh0 + 1)
   \   00000110   3F0F               CPI     R16, 255
   \   00000112   F441               BRNE    ??ReceivePacketUart_10
    432                                  hostAddress = RxBufferCh0[3];            // address to sender (host)
   \                     ??ReceivePacketUart_9:
   \   00000114   9100....           LDS     R16, (RxBufferCh0 + 3)
   \   00000118   9300....           STS     hostAddress, R16
    433                                  myUART.RxState = HANDLE;                     // Package OK
   \   0000011C   E00A               LDI     R16, 10
   \   0000011E   9300....           STS     (myUART + 16), R16
   \   00000122   C007               RJMP    ??ReceivePacketUart_3
    434                              } else {
    435                                  GoToSyncUART();                             // go to sync modus for recive
   \                     ??ReceivePacketUart_10:
   \   00000124   ....               RCALL   GoToSyncUART
   \   00000126   C005               RJMP    ??ReceivePacketUart_3
    436                              }
    437                          } else {
    438                              GoToSyncUART();                                // go to sync modus for recive
   \                     ??ReceivePacketUart_8:
   \   00000128   ....               RCALL   GoToSyncUART
   \   0000012A   C003               RJMP    ??ReceivePacketUart_3
    439                          }
    440                      } else {
    441                          GoToSyncUART();                                    // go to sync modus for recive
   \                     ??ReceivePacketUart_7:
   \   0000012C   ....               RCALL   GoToSyncUART
    442                      }
    443                  }
    444                  break;
   \   0000012E   C001               RJMP    ??ReceivePacketUart_3
    445              case HANDLE :
    446                  break;
    447              default :
    448                  GoToSyncUART();                                            // go to sync modus for recive
   \                     ??ReceivePacketUart_4:
   \   00000130   ....               RCALL   GoToSyncUART
    449                  break;
    450              }                                                           // end switch
    451              if ( ++myUART.RxLast >= RXSIZE_UART ) {                     // check pointer
   \                     ??ReceivePacketUart_3:
   \   00000132   ....               LDI     R30, LOW(myUART)
   \   00000134   ....               LDI     R31, (myUART) >> 8
   \   00000136   8504               LDD     R16, Z+12
   \   00000138   8515               LDD     R17, Z+13
   \   0000013A   5F0F               SUBI    R16, 255
   \   0000013C   4F1F               SBCI    R17, 255
   \   0000013E   8704               STD     Z+12, R16
   \   00000140   8715               STD     Z+13, R17
   \   00000142   ....               LDI     R30, LOW(myUART)
   \   00000144   ....               LDI     R31, (myUART) >> 8
   \   00000146   8504               LDD     R16, Z+12
   \   00000148   8515               LDD     R17, Z+13
   \   0000014A   350E               CPI     R16, 94
   \   0000014C   E021               LDI     R18, 1
   \   0000014E   0712               CPC     R17, R18
   \   00000150   F030               BRCS    ??ReceivePacketUart_11
    452                  myUART.RxLast = 0;                                     // reset pointer
   \   00000152   E000               LDI     R16, 0
   \   00000154   E010               LDI     R17, 0
   \   00000156   ....               LDI     R30, LOW(myUART)
   \   00000158   ....               LDI     R31, (myUART) >> 8
   \   0000015A   8704               STD     Z+12, R16
   \   0000015C   8715               STD     Z+13, R17
    453              }
    454          }
   \                     ??ReceivePacketUart_11:
   \   0000015E   9189               LD      R24, Y+
   \   00000160   9508               RET
    455          /*************************************************************************
    456          *
    457          * Calculate tx checksum (header and package) using Dallas Semiconductor one-wire CRC
    458          *
    459          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    460          char CalcDSTxChecksum(unsigned short len) {
   \                     CalcDSTxChecksum:
   \   00000000   01A8               MOVW    R21:R20, R17:R16
    461          
    462              unsigned short  cnt;
    463              unsigned char   csum;
    464          
    465              csum = 0;
   \   00000002   E000               LDI     R16, 0
    466              for ( cnt = 4; cnt < len; cnt++ ) {
   \   00000004   E064               LDI     R22, 4
   \   00000006   E070               LDI     R23, 0
   \                     ??CalcDSTxChecksum_0:
   \   00000008   1764               CP      R22, R20
   \   0000000A   0775               CPC     R23, R21
   \   0000000C   F488               BRCC    ??CalcDSTxChecksum_1
    467                  csum = crc[csum ^ TxBufferCh0[cnt]];
   \   0000000E   E010               LDI     R17, 0
   \   00000010   01FB               MOVW    R31:R30, R23:R22
   \   00000012   ....               SUBI    R30, LOW((-(TxBufferCh0) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(TxBufferCh0) & 0xFFFF) >> 8
   \   00000016   8120               LD      R18, Z
   \   00000018   E030               LDI     R19, 0
   \   0000001A   2702               EOR     R16, R18
   \   0000001C   2713               EOR     R17, R19
   \   0000001E   01F8               MOVW    R31:R30, R17:R16
   \   00000020   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000022   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000024   ....               LDI     R19, (crc) >> 16
   \   00000026   BF3B               OUT     0x3B, R19
   \   00000028   9106               ELPM    R16, Z
    468              }
   \   0000002A   5F6F               SUBI    R22, 255
   \   0000002C   4F7F               SBCI    R23, 255
   \   0000002E   CFEC               RJMP    ??CalcDSTxChecksum_0
    469              return csum;
   \                     ??CalcDSTxChecksum_1:
   \   00000030   9508               RET
    470          }
    471          
    472          /*************************************************************************
    473          *
    474          * Calculate rx packet checksum (header and package) using Dallas Semiconductor one-wire CRC
    475          *
    476          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    477          short CalcDSRxChecksum(char ch, unsigned short len) {
   \                     CalcDSRxChecksum:
   \   00000000   2E00               MOV     R0, R16
   \   00000002   01A9               MOVW    R21:R20, R19:R18
    478          
    479              unsigned short  cnt;
    480              unsigned char   csum;
    481          
    482              csum = 0;
   \   00000004   E020               LDI     R18, 0
    483              for ( cnt = 0; cnt < len; cnt++ ) {
   \   00000006   E060               LDI     R22, 0
   \   00000008   E070               LDI     R23, 0
   \                     ??CalcDSRxChecksum_0:
   \   0000000A   1764               CP      R22, R20
   \   0000000C   0775               CPC     R23, R21
   \   0000000E   F488               BRCC    ??CalcDSRxChecksum_1
    484                  csum = crc[csum ^ RxBufferCh0[cnt]];
   \   00000010   E030               LDI     R19, 0
   \   00000012   01FB               MOVW    R31:R30, R23:R22
   \   00000014   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   00000018   8100               LD      R16, Z
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   2720               EOR     R18, R16
   \   0000001E   2731               EOR     R19, R17
   \   00000020   01F9               MOVW    R31:R30, R19:R18
   \   00000022   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000024   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000026   ....               LDI     R19, (crc) >> 16
   \   00000028   BF3B               OUT     0x3B, R19
   \   0000002A   9126               ELPM    R18, Z
    485              }
   \   0000002C   5F6F               SUBI    R22, 255
   \   0000002E   4F7F               SBCI    R23, 255
   \   00000030   CFEC               RJMP    ??CalcDSRxChecksum_0
    486              if ( csum == RxBufferCh0[len] ) {
   \                     ??CalcDSRxChecksum_1:
   \   00000032   01FA               MOVW    R31:R30, R21:R20
   \   00000034   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   00000036   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   00000038   8100               LD      R16, Z
   \   0000003A   1720               CP      R18, R16
   \   0000003C   F419               BRNE    ??CalcDSRxChecksum_2
    487                  return true;
   \   0000003E   E001               LDI     R16, 1
   \   00000040   E010               LDI     R17, 0
   \   00000042   9508               RET
    488              } else {
    489                  return false;
   \                     ??CalcDSRxChecksum_2:
   \   00000044   E000               LDI     R16, 0
   \   00000046   E010               LDI     R17, 0
   \   00000048   9508               RET
    490              }
    491          }
    492          
    493          /*************************************************************************
    494          *
    495          * Goes to sync mode
    496          *
    497          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    498          __monitor void GoToSyncUART() {
   \                     GoToSyncUART:
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
    499          
    500              myUART.SyncCnt = 0;                        // ready for sync
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     (myUART + 17), R16
    501              myUART.RxState = SYNC;
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   9300....           STS     (myUART + 16), R16
    502              myUART.RxFirst = 0;
   \   00000010   E000               LDI     R16, 0
   \   00000012   E010               LDI     R17, 0
   \   00000014   ....               LDI     R30, LOW(myUART)
   \   00000016   ....               LDI     R31, (myUART) >> 8
   \   00000018   8702               STD     Z+10, R16
   \   0000001A   8713               STD     Z+11, R17
    503          }
   \   0000001C   BF2F               OUT     0x3F, R18
   \   0000001E   9508               RET

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart>_0`:
   \   00000000   E803               DW      59395
   \   00000002   01                 DB      1
   \   00000003   ....               DW      (??CheckActionUart_7) /2
   \   00000005   ....               DW      (??CheckActionUart_0) /2
   \   00000007   03FEAC             DB      254,0x3,0xac
   \   0000000A   ....               DW      (??CheckActionUart_2) /2
   \   0000000C   0A                 DB      0xa
   \   0000000D   ....               DW      (??CheckActionUart_3) /2
   \   0000000F   0A                 DB      0xa
   \   00000010   ....               DW      (??CheckActionUart_4) /2
   \   00000012   0A                 DB      0xa
   \   00000013   ....               DW      (??CheckActionUart_5) /2
   \   00000015   14                 DB      0x14
   \   00000016   ....               DW      (??CheckActionUart_6) /2
   \   00000018   FB                 DB      251
   \   00000019   00                 DB      0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   BuildFlashID
      5      2   BuildStatusData
        5      2   -> MyAddress
      0      2   CalcDSRxChecksum
      0      2   CalcDSTxChecksum
      6      2   CheckActionUart
        6      2   -> BuildFlashID
        6      2   -> BuildStatusData
        6      2   -> EraseFlash
        6      2   -> ExitBootloader
        6      2   -> ProgramFlash
        6      2   -> ReadFlash
        6      2 ?SV_SWITCH_L06
      4      2   EraseFlash
        4      2   -> write_page
      0      2   ExitBootloader
      0      2   GoToSyncUART
     14      2   ProgramFlash
       14      2   -> fill_temp_buffer
       14      2   -> read_program_memory
       14      2   -> write_page
     10      2   ReadFlash
       10      2   -> read_program_memory
      1      2   ReceivePacketUart
        1      2   -> CalcDSRxChecksum
        1      2   -> GoToSyncUART
        1      2   -> MyAddress
      2      2   SendPacketUart
        2      2   -> sendchar
      0      2   Uart_BuildHeader
        0      2   -> MyAddress
      2      2   Uart_BuildTail
        2      2   -> CalcDSTxChecksum
        2      2   -> SendPacketUart
        2      2   -> Uart_BuildHeader
      3      2   UsartCheckPackage
        3      2   -> CheckActionUart
        3      2   -> GoToSyncUART
        3      2   -> Uart_BuildTail


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      26  ?<Jumptable for CheckActionUart>_0
     286  BuildFlashID
     574  BuildStatusData
      74  CalcDSRxChecksum
      50  CalcDSTxChecksum
     102  CheckActionUart
     264  EraseFlash
      32  ExitBootloader
      32  GoToSyncUART
     492  ProgramFlash
     418  ReadFlash
     354  ReceivePacketUart
     350  RxBufferCh0
     134  SendPacketUart
     350  TxBufferCh0
     114  Uart_BuildHeader
     346  Uart_BuildTail
      96  UsartCheckPackage
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_PORTE
       1  _A_RAMPZ
       1  _A_WDTCSR
       7  -- Other

 
     7 bytes in segment ABSOLUTE
 3'368 bytes in segment CODE
     7 bytes in segment INITTAB
   700 bytes in segment NEAR_Z
    26 bytes in segment SWITCH
 
 3'394 bytes of CODE memory (+ 7 bytes shared)
   700 bytes of DATA memory (+ 7 bytes shared)

Errors: none
Warnings: 1
