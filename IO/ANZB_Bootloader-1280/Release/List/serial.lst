###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       01/Feb/2023  09:02:18
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\ANZB_Bootloader-1280\Src\serial.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW5F4C.tmp
#        (D:\S2Prog\IO\ANZB_Bootloader-1280\Src\serial.c --cpu=m1280 -ms -o
#        D:\S2Prog\IO\ANZB_Bootloader-1280\Release\Obj -D SPEED=38400 -D PORT0
#        -D __ATMEGA_1280__ -lC D:\S2Prog\IO\ANZB_Bootloader-1280\Release\List
#        -y --initializers_in_flash --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\ANZB_Bootloader-1280\INC\\ -I
#        D:\S2Prog\IO\ANZB_Bootloader-1280\..\..\SHARED\INC\\ --eeprom_size
#        4096 --clib -Oh)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB_Bootloader-1280\Release\List\serial.lst
#    Object file  =  D:\S2Prog\IO\ANZB_Bootloader-1280\Release\Obj\serial.r90
#
###############################################################################

D:\S2Prog\IO\ANZB_Bootloader-1280\Src\serial.c
      1          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0xc6
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1
      2          #include "stdio.h"
      3          #include "math.h"
      4          #include "externals.h"
      5          

   \                                 In  segment CODE, align 2, keep-with-next
      6          void sendchar(char c){
   \                     sendchar:
      7              UART_DATA_REG0 = c;                                   // prepare transmission
   \   00000000   9300....           STS     _A_UDR0, R16
      8              while (!(UART_STATUS_REG0 & (1 << TRANSMIT_COMPLETE_BIT0)));// wait until byte sendt
   \                     ??sendchar_0:
   \   00000004   9100....           LDS     R16, _A_UCSR0A
   \   00000008   FF06               SBRS    R16, 6
   \   0000000A   CFFC               RJMP    ??sendchar_0
      9              UART_STATUS_REG0 |= (1 << TRANSMIT_COMPLETE_BIT0);          // delete TXCflag
   \   0000000C   910000C0           LDS     R16, 192
   \   00000010   6400               ORI     R16, 0x40
   \   00000012   930000C0           STS     192, R16
     10          }
   \   00000016   9508               RET
   \   00000018                      REQUIRE _A_UDR0
   \   00000018                      REQUIRE _A_UCSR0A
     11          
     12          

   \                                 In  segment CODE, align 2, keep-with-next
     13          void recchar(void){
   \                     recchar:
     14            if((UART_STATUS_REG0 & (1 << RECEIVE_COMPLETE_BIT0)) ||(UART_STATUS_REG0 & 0x10)){
   \   00000000   9100....           LDS     R16, _A_UCSR0A
   \   00000004   FD07               SBRC    R16, 7
   \   00000006   C004               RJMP    ??recchar_0
   \   00000008   9100....           LDS     R16, _A_UCSR0A
   \   0000000C   FF04               SBRS    R16, 4
   \   0000000E   C04A               RJMP    ??recchar_1
     15              RxBufferCh0[ myUART.RxFirst ] = UART_DATA_REG0;                     // Read the character 
   \                     ??recchar_0:
   \   00000010   9100....           LDS     R16, _A_UDR0
   \   00000014   91E0....           LDS     R30, (myUART + 10)
   \   00000018   91F0....           LDS     R31, (myUART + 11)
   \   0000001C   ....               SUBI    R30, LOW((-(RxBufferCh0) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(RxBufferCh0) & 0xFFFF) >> 8
   \   00000020   8300               ST      Z, R16
     16              if (myUART.RxState != HANDLE) {        // ok to receive? 
   \   00000022   9110....           LDS     R17, (myUART + 16)
   \   00000026   301A               CPI     R17, 10
   \   00000028   F1E9               BREQ    ??recchar_1
     17                  switch (myUART.RxState) {                   // Yes, check state
   \   0000002A   2311               TST     R17
   \   0000002C   F549               BRNE    ??recchar_2
     18                  case SYNC :
     19                      if ( RxBufferCh0[ myUART.RxFirst ] == ANPRO10_SYN) {
   \   0000002E   3106               CPI     R16, 22
   \   00000030   F459               BRNE    ??recchar_3
     20                          myUART.SyncCnt ++ ;                 // count sync
   \   00000032   9100....           LDS     R16, (myUART + 17)
   \   00000036   9503               INC     R16
   \   00000038   9300....           STS     (myUART + 17), R16
     21                          myUART.RxFirst = 0;                 // start at start of buff
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   9300....           STS     (myUART + 10), R16
   \   00000042   9300....           STS     (myUART + 11), R16
   \   00000046   9508               RET
     22                      } else if ((myUART.SyncCnt >= 2) && 
     23                                 (RxBufferCh0[ myUART.RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \                     ??recchar_3:
   \   00000048   9110....           LDS     R17, (myUART + 17)
   \   0000004C   3012               CPI     R17, 2
   \   0000004E   F0A0               BRCS    ??recchar_4
   \   00000050   3001               CPI     R16, 1
   \   00000052   F491               BRNE    ??recchar_4
     24                          myUART.SyncCnt = 0 ;                // reset counter
   \   00000054   E000               LDI     R16, 0
   \   00000056   9300....           STS     (myUART + 17), R16
     25                          myUART.RxState = HEADER ;
   \   0000005A   E001               LDI     R16, 1
   \   0000005C   9300....           STS     (myUART + 16), R16
     26                          myUART.RxLast = 0 ;
   \   00000060   E000               LDI     R16, 0
   \   00000062   9300....           STS     (myUART + 12), R16
   \   00000066   9300....           STS     (myUART + 13), R16
     27                          myUART.RxTimeout = RX_TO_TIME ;   // reset timeout
   \   0000006A   EF0A               LDI     R16, 250
   \   0000006C   9300....           STS     (myUART + 18), R16
   \   00000070   E000               LDI     R16, 0
   \   00000072   9300....           STS     (myUART + 19), R16
   \   00000076   9508               RET
     28                      } else {
     29                          myUART.SyncCnt = 0 ;                // start over once more
   \                     ??recchar_4:
   \   00000078   E000               LDI     R16, 0
   \   0000007A   9300....           STS     (myUART + 17), R16
   \   0000007E   9508               RET
     30                      }
     31                      break;
     32                  default :
     33                      if ((++myUART.RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??recchar_2:
   \   00000080   9100....           LDS     R16, (myUART + 10)
   \   00000084   9110....           LDS     R17, (myUART + 11)
   \   00000088   5F0F               SUBI    R16, 255
   \   0000008A   4F1F               SBCI    R17, 255
   \   0000008C   9300....           STS     (myUART + 10), R16
   \   00000090   9310....           STS     (myUART + 11), R17
   \   00000094   350F               CPI     R16, 95
   \   00000096   4011               SBCI    R17, 1
   \   00000098   F010               BRCS    ??recchar_5
     34                          GoToSyncUART() ;                       // go to sync mode
   \   0000009A   ........           JMP     GoToSyncUART
     35                      } else {
     36                          ReceivePacketUart(0) ;              // Check package
   \                     ??recchar_5:
   \   0000009E   E000               LDI     R16, 0
   \   000000A0   ........           CALL    ReceivePacketUart
     37                      }
     38                      break ;   
     39                  }
     40              }
     41            }
     42          }
   \                     ??recchar_1:
   \   000000A4   9508               RET
   \   000000A6                      REQUIRE _A_UCSR0A
   \   000000A6                      REQUIRE _A_UDR0

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   recchar
        2   -> GoToSyncUART
        2   -> ReceivePacketUart
      2   sendchar


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_UCSR0A
       1  _A_UDR0
     166  recchar
      24  sendchar

 
   2 bytes in segment ABSOLUTE
 190 bytes in segment CODE
 
 190 bytes of CODE memory
   0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
